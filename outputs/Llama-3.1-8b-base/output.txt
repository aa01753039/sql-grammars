SELECT COUNT(*) FROM club; 
SELECT COUNT(*) FROM club; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT club.Manager, club.Captain FROM club 
SELECT club.Manager, club.Captain FROM club 
SELECT Name FROM club WHERE Manufacturer!= 'Nike'; 
SELECT Name FROM club WHERE Manufacturer!= 'Nike'; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000; 
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000; 
SELECT Country FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2); 
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1; 
SELECT player.Name, club.Name 
SELECT player.Name, club.Name 
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2); 
SELECT club.Name FROM club WHERE club.Club_ID IN (SELECT player.Club_ID FROM player WHERE player.Wins_count > 2)  
SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce'); 
SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce'); 
SELECT Name FROM club ORDER BY AVG(Earnings) DESC;  
SELECT club.Name FROM club ORDER BY club.Name DESC; 
SELECT DISTINCT Manufacturer, COUNT(*) AS Club_count FROM club GROUP BY Manufacturer ORDER BY Club_count DESC; 
SELECT club.Manufacturer, COUNT(*) AS Count  
SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC LIMIT 1 
SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC LIMIT 1 
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1; 
SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1 
SELECT DISTINCT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Player_ID HAVING COUNT(Player_ID) > 1); 
SELECT DISTINCT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Player_ID HAVING COUNT(Player_ID) > 1)); 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT player.Country FROM player WHERE player.Earnings > 1400000 OR player.Earnings < 1100000; 
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000; 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'; 
SELECT player.Earnings FROM player WHERE player.Country IN ('Australia', 'Zimbabwe')  
SELECT customer_id, customer_first_name, customer_last_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_id HAVING COUNT(Orders.order_id) > 2 INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(Order_Items.order_item_id) > 3 
SELECT customer_id, customer_first_name, customer_last_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(*) > 2 AND COUNT(*) >= 3 
SELECT order_id, order_status_code, COUNT(*) AS num_products FROM Order_Items GROUP BY order_id, order_status_code; 
SELECT COUNT(*), order_id, order_status_code FROM Order_Items GROUP BY order_id, order_status_code;  
SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_id) > 1) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_id) = 1) ORDER BY date_order_placed ASC; 
SELECT MIN(date_order_placed) AS earliest_order_date, MAX(date_order_placed) AS latest_order_date FROM Orders 
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders); 
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL; 
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2); 
SELECT product_id, product_name, product_price, product_color FROM Order_Items INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Order_Items.order_id IN (SELECT order_id FROM Orders GROUP BY order_id HAVING COUNT(order_id) < 2)  
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 1); 
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 1)  
SELECT product_id, product_name, product_price FROM Order_Items INNER JOIN Products ON Order_Items.product_id = Products.product_id; 
SELECT product_id, product_name, product_price FROM Order_Items INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1; 
SELECT order_id, SUM(product_price) FROM Order_Items GROUP BY order_id ORDER BY SUM(product_price) ASC LIMIT 1;  
SELECT * FROM Orders WHERE order_id = 1; 
SELECT payment_method_code, COUNT(*) AS total FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY total DESC LIMIT 1 
SELECT payment_method_code, COUNT(*) AS num_customers FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY num_customers DESC LIMIT 1; 
SELECT gender_code, COUNT(*) AS num_products FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code 
SELECT gender_code, COUNT(*) AS num_products FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code 
SELECT gender_code, COUNT(*) AS num_orders FROM Customers GROUP BY gender_code; 
SELECT gender_code, COUNT(*) AS order_count FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code 
SELECT Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customer_Payment_Methods.payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id 
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id 
SELECT invoice_status_code, invoice_date, shipment_date FROM Shipments INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number; 
SELECT invoice_status_code, invoice_date, shipment_date FROM Shipments INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number; 
SELECT product_name, shipment_date FROM Shipments JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id JOIN Products ON Order_Items.product_id = Products.product_id 
SELECT product_name, shipment_date FROM Shipments JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id JOIN Products ON Order_Items.product_id = Products.product_id 
SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id; 
SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id WHERE Order_Items.order_id = Shipments.order_id; 
SELECT product_name, product_color FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Shipments.shipment_id = 1; 
SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items WHERE shipment_id IN (SELECT shipment_id FROM Shipments WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code = 'credit card'))))); 
SELECT DISTINCT product_name, product_price, product_description FROM Products, Order_Items, Shipments, Shipment_Items, Customers, Customer_Payment_Methods WHERE Customers.gender_code = 'F' AND Customers.customer_id = Customer_Payment_Methods.customer_id AND Customer_Payment_Methods.payment_method_code = 'C' AND Customer_Payment_Methods.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id AND Orders.order_id = Shipments.order_id AND Shipments.shipment_id = Shipment_Items.shipment_id AND Shipment_Items.order_item_id = Order_Items.order_item_id;  
SELECT DISTINCT product_name, product_price, product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id INNER JOIN Customers ON Shipments.customer_id = Customers.customer_id WHERE Customers.gender_code = 'F' ORDER BY product_name ASC; 
SELECT * FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments WHERE shipment_id IS NULL); 
SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments WHERE shipment_id IS NULL); 
SELECT order_id, date_order_placed, SUM ( product_price ) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id, date_order_placed 
SELECT order_id, date_order_placed, SUM(product_price) AS total_amount_paid FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id 
SELECT COUNT(DISTINCT customer_id) FROM Orders; 
SELECT COUNT(DISTINCT customer_id) FROM Orders; 
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items; 
SELECT DISTINCT order_item_status_code FROM Order_Items; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_id IS NULL; 
SELECT COUNT(*) FROM Products p 
SELECT COUNT(*) FROM Customers c 
SELECT COUNT(*) FROM Customers c 
SELECT order_status_code, date_order_placed FROM Orders; 
SELECT order_status_code, date_order_placed FROM Orders; 
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'; 
SELECT c.address_line_1, c.town_city, c.county, c.country FROM Customers c WHERE c.country = 'United States'  
SELECT c.customer_first_name, p.product_name FROM Customers AS c JOIN Order_Items AS oi ON c.customer_id = oi.customer_id JOIN Products AS p ON oi.product_id = p.product_id; 
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Order_Items oi ON c.customer_id = oi.customer_id JOIN Products p ON oi.product_id = p.product_id; 
SELECT COUNT(*) FROM Shipment_Items; 
SELECT COUNT(*) FROM Shipments 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id; 
SELECT AVG(product_price) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id; 
SELECT email_address, town_city, county FROM Customers WHERE gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1))  
SELECT email_address, town_city, county FROM Customers WHERE gender_code = 'F' AND customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(*) < (SELECT COUNT(*) FROM Orders GROUP BY customer_id)); 
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT order_status_code, COUNT(*) AS order_count FROM Orders GROUP BY order_status_code ORDER BY order_count ASC LIMIT 1; 
SELECT order_status_code, COUNT(*) AS order_count FROM Orders GROUP BY order_status_code ORDER BY order_count ASC LIMIT 1; 
SELECT product_id, product_description FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Order_Items.order_item_id IN (SELECT order_item_id FROM Order_Items GROUP BY order_item_id HAVING COUNT(order_item_id) > 3) ORDER BY product_id ASC;  
SELECT product_id, product_description FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Order_Items.order_item_id IN (SELECT order_item_id FROM Order_Items GROUP BY order_item_id HAVING COUNT(order_item_id) > 3);  
SELECT invoice_date, invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2;  
SELECT invoice_number, shipment_id FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2; 
SELECT shipment_tracking_number, shipment_date FROM Shipments; 
SELECT shipment_tracking_number, shipment_date FROM Shipments 
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products); 
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products); 
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director); 
SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director); 
SELECT COUNT(*) FROM channel WHERE channel.Internet LIKE '%bbc%'; 
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel 
SELECT Title FROM program ORDER BY Start_Year DESC; 
SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID JOIN director_admin da ON d.Director_ID = da.Director_ID JOIN channel c ON da.Channel_ID = c.Channel_ID WHERE da.Is_first_director = 1 GROUP BY d.Name ORDER BY COUNT(p.Program_ID) DESC LIMIT 1 
SELECT d.Name, d.Age FROM director d JOIN director_admin da ON d.Director_ID = da.Director_ID JOIN channel c ON da.Channel_ID = c.Channel_ID JOIN program p ON c.Channel_ID = p.Channel_ID WHERE p.Program_ID = (SELECT MAX(p2.Program_ID) FROM program p2) GROUP BY d.Director_ID ORDER BY d.Director_ID ASC; 
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1; 
SELECT channel.Name, channel.Internet FROM channel WHERE channel.Name IN (SELECT channel.Name FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Name HAVING COUNT(program.Program_ID) > 1)  
SELECT channel.Name, COUNT(program.Program_ID) AS num_programs FROM program JOIN channel ON program.Channel_ID = channel.Channel_ID GROUP BY channel.Name; 
SELECT COUNT(*) 
SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title = 'Dracula'); 
SELECT channel.Name, channel.Internet FROM channel INNER JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE director_admin.Is_first_director = 1 GROUP BY channel.Channel_ID ORDER BY COUNT(director_admin.Director_ID) DESC LIMIT 1; 
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60; 
SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin WHERE Director_ID IN (SELECT Director_ID FROM director WHERE Age < 40) AND Director_ID IN (SELECT Director_ID FROM director WHERE Age > 60)) 
SELECT channel.Channel_ID, channel.Name FROM channel WHERE channel.Channel_ID NOT IN (SELECT channel.Channel_ID FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID JOIN director ON director_admin.Director_ID = director.Director_ID WHERE director.Name = 'Hank Baskett')  
SELECT COUNT(*) FROM radio; 
SELECT Radio_ID, Transmitter, ERP_kW FROM radio ORDER BY ERP_kW ASC; 
SELECT tv_show_name, Original_Airdate FROM city_channel_tv_show, tv_show WHERE city_channel_tv_show.tv_show_ID = tv_show.tv_show_ID; 
SELECT Station_name FROM city_channel WHERE Affiliation!= 'ABC'; 
SELECT Radio_ID, Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30; 
SELECT Transmitter FROM radio WHERE Radio_ID = (SELECT Radio_ID FROM radio WHERE ERP_kW = (SELECT MAX(ERP_kW) FROM radio)); 
SELECT AVG(ERP_kW) FROM radio; 
SELECT DISTINCT Affiliation, COUNT(*) AS num_city_channels FROM city_channel GROUP BY Affiliation 
SELECT affiliation, COUNT(*) AS count FROM city_channel GROUP BY affiliation ORDER BY count DESC LIMIT 1 
SELECT DISTINCT Affiliation FROM city_channel WHERE ID IN (SELECT City_channel_ID FROM city_channel_radio WHERE Radio_ID IN (SELECT Radio_ID FROM city_channel_radio GROUP BY Radio_ID HAVING COUNT(*) > 3) OR City_channel_ID IN (SELECT City_channel_ID FROM city_channel_tv_show WHERE tv_show_ID IN (SELECT tv_show_ID FROM city_channel_tv_show GROUP BY tv_show_ID HAVING COUNT(*) > 3))) ORDER BY Affiliation ASC; 
SELECT city, station_name FROM city_channel ORDER BY station_name ASC; 
SELECT r.Transmitter, c.City FROM city_channel c JOIN city_channel_radio cr ON c.ID = cr.City_channel_ID JOIN radio r ON cr.Radio_ID = r.Radio_ID 
SELECT r.Transmitter, c.Station_name FROM city_channel c JOIN city_channel_radio cr ON c.ID = cr.City_channel_ID JOIN radio r ON cr.Radio_ID = r.Radio_ID ORDER BY r.ERP_kW DESC; 
SELECT r.Transmitter, COUNT(*) AS num_city_channels FROM city_channel_radio JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID GROUP BY r.Transmitter; 
SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio); 
SELECT Model FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle) AND Power > 6000; 
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1; 
SELECT Name FROM driver WHERE Citizenship = 'United States'; 
SELECT Name FROM driver WHERE Citizenship = 'United States'; 
SELECT COUNT(DISTINCT vehicle_driver.Vehicle_ID) AS num_vehicles, driver.Driver_ID FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID GROUP BY driver.Driver_ID ORDER BY num_vehicles DESC LIMIT 1 
SELECT driver.Driver_ID, COUNT(*) AS num_vehicles FROM vehicle_driver GROUP BY driver.Driver_ID ORDER BY num_vehicles DESC LIMIT 1 
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'; 
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'; 
SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver);  
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver GROUP BY Vehicle_ID);  
SELECT vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = '1996'  
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'; 
SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle; 
SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder  
SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = '2012'; 
SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = '2012'; 
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Racing_Series = 'NASCAR';  
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Racing_Series = 'NASCAR';  
SELECT AVG(v.Top_Speed) FROM vehicle v; 
SELECT AVG(v.Top_Speed) FROM vehicle v; 
SELECT DISTINCT driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000; 
SELECT driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000; 
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'; 
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver); 
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver); 
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 1) OR vehicle.Builder = 'Ziyang'  
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Driver_ID = 2 OR driver.Driver_ID = 3 OR driver.Driver_ID = 4 OR driver.Driver_ID = 5 OR driver.Driver_ID = 6 OR driver.Driver_ID = 7 OR driver.Driver_ID = 8 OR driver.Driver_ID = 9 OR driver.Driver_ID = 10 OR driver.Driver_ID = 11 OR driver.Driver_ID = 12 OR driver.Driver_ID = 13 OR driver.Driver_ID = 14 OR driver.Driver_ID = 15 OR driver.Driver_ID = 16 OR driver.Driver_ID = 17 OR driver.Driver_ID = 18 OR driver.Driver_ID = 19 OR driver.Driver_ID = 20 OR driver.Driver_ID = 21 OR driver.Driver_ID = 22 OR driver.Driver_ID = 23 OR driver.Driver_ID = 24 OR driver.Driver_ID = 25 OR driver.Driver_ID = 26 OR driver.Driver_ID = 27 OR driver.Driver_ID = 28 OR driver.Driver_ID = 29 OR driver.Driver_ID =
SELECT vehicle_id, model FROM vehicle_driver WHERE driver_id IN (SELECT driver_id FROM driver WHERE name = 'Jeff Gordon') OR driver_id IN (SELECT driver_id FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver GROUP BY driver_id HAVING COUNT(driver_id) > 2)) GROUP BY vehicle_id, model HAVING COUNT(driver_id) > 2;  
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon' GROUP BY vehicle.Vehicle_ID HAVING COUNT(*) > 2 
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle); 
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle); 
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT Racing_Series, COUNT(Driver_ID) AS Driver_Count FROM driver GROUP BY Racing_Series 
SELECT COUNT(Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series; 
SELECT driver.Name, driver.Citizenship FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle_driver.Vehicle_ID = 1 
SELECT driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1'; 
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver); 
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver); 
SELECT COUNT(*) FROM Exams; 
SELECT COUNT(*) FROM Exams; 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code!= 'Database'; 
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code!= 'Database'  
SELECT DISTINCT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC; 
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC; 
SELECT Type_of_Question_Code, COUNT(*) AS Question_Count FROM Questions GROUP BY Type_of_Question_Code 
SELECT Type_of_Question_Code, COUNT(*) AS Count FROM Questions GROUP BY Type_of_Question_Code; 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'  
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'  
SELECT DISTINCT Comments FROM Student_Answers 
SELECT COUNT(DISTINCT Comments) FROM Student_Answers 
SELECT Student_Answer_Text FROM Student_Answers ORDER BY COUNT(Student_Answer_Text) DESC; 
SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC; 
SELECT First_Name, Date_of_Answer FROM Student_Answers 
SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID 
SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC 
SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC; 
SELECT DISTINCT Assessment FROM Student_Assessments ORDER BY Assessment ASC LIMIT 1; 
SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1; 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2); 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2) 
SELECT Valid_Answer_Text, COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Count DESC LIMIT 1; 
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'; 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M' ORDER BY Last_Name ASC; 
SELECT Gender_MFU, COUNT(Student_ID) AS Number_of_Students FROM Students GROUP BY Gender_MFU 
SELECT Gender_MFU, COUNT(Student_ID) AS Number_of_Students FROM Students GROUP BY Gender_MFU 
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M'); 
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M'); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers); 
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent')  
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent')  
SELECT DISTINCT Type_of_Question_Code FROM Questions WHERE Question_ID IN (SELECT Question_ID FROM Questions_in_Exams GROUP BY Question_ID HAVING COUNT(*) >= 3); 
SELECT Type_of_Question_Code FROM Questions WHERE Question_ID IN (SELECT Question_ID FROM Questions_in_Exams GROUP BY Question_ID HAVING COUNT(*) >= 3); 
SELECT * FROM Students; 
SELECT * FROM Students; 
SELECT COUNT(*) FROM Addresses; 
SELECT COUNT(*) FROM Addresses; 
SELECT address_id, address_details FROM Addresses; 
SELECT address_id, address_details FROM Addresses; 
SELECT COUNT(*) FROM Products; 
SELECT COUNT(*) FROM Products; 
SELECT product_id, product_type_code, product_name FROM Products; 
SELECT product_id, product_type_code, product_name FROM Products; 
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products; 
SELECT MIN(product_price) AS min_price, AVG(product_price) AS avg_price, MAX(product_price) AS max_price FROM Products; 
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'; 
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'; 
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware' 
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'; 
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')  
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware'); 
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes'); 
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes'); 
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware'); 
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1; 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC; 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC; 
SELECT product_type_code, COUNT(product_id) AS num_products FROM Products GROUP BY product_type_code; 
SELECT product_type_code, COUNT(*) AS product_count FROM Products GROUP BY product_type_code 
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code; 
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code; 
SELECT product_type_code FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2); 
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) >= 2; 
SELECT product_type_code, COUNT(*) AS num_products FROM Products GROUP BY product_type_code ORDER BY num_products DESC LIMIT 1; 
SELECT product_type_code, COUNT(*) AS count FROM Products GROUP BY product_type_code ORDER BY count DESC LIMIT 1; 
SELECT COUNT(*) FROM Customers; 
SELECT COUNT(*) FROM Customers; 
SELECT customer_id, customer_name FROM Customers; 
SELECT customer_id, customer_name FROM Customers; 
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy'  
SELECT   
SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM Customers GROUP BY payment_method_code 
SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code 
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT payment_method_code FROM Customers WHERE payment_method_code = 'credit card' ORDER BY COUNT(payment_method_code) DESC LIMIT 1; 
SELECT customer_name, payment_method_code FROM Customers WHERE customer_name = 'customer_name' AND payment_method_code = 'payment_method_code' ORDER BY customer_name ASC; 
SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)); 
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' AND customer_number IS NOT NULL; 
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT product_id, product_type_code FROM Products ORDER BY product_name; 
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC; 
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')  
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')  
SELECT customer_name, customer_id, COUNT(order_id) AS num_orders FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id; 
SELECT customer_name, customer_id, COUNT(order_id) AS num_orders FROM Customer_Orders GROUP BY customer_id; 
SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customer_Orders AS co JOIN Customers AS c ON co.customer_id = c.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1; 
SELECT order_status_code, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY order_status_code; 
SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code 
SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code ORDER BY order_count DESC LIMIT 1; 
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT COUNT(*) FROM Order_Items 
SELECT COUNT(*) FROM Order_Items 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'; 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor' AND Customer_Orders.order_status_code = 'Completed' AND Customer_Orders.order_date >= '2019-01-01' AND Customer_Orders.order_date <= '2019-12-31' AND Customer_Orders.customer_id IS NOT NULL; 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders; 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders; 
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT order_date, order_id FROM Customer_Orders 
SELECT order_id, order_date FROM Customer_Orders 
SELECT COUNT(*) FROM building; 
SELECT COUNT(*) FROM building; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980 
SELECT AVG(region.Population) FROM region; 
SELECT AVG(region.Population) FROM region; 
SELECT Name FROM region ORDER BY Name ASC; 
SELECT Name FROM region ORDER BY Name ASC; 
SELECT region.Capital FROM region WHERE region.Area > 10000; 
SELECT Capital FROM region WHERE Area > 10000; 
SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)  
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM region WHERE Population = (SELECT MAX(Population) FROM region)); 
SELECT Name FROM region ORDER BY Area DESC LIMIT 5; 
SELECT Name FROM region ORDER BY Area DESC LIMIT 5; 
SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID 
SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID 
SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1); 
SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1); 
SELECT region.Capital FROM region WHERE region.Population = (SELECT MAX(region.Population) FROM region)  
SELECT region.Capital FROM region WHERE region.Region_ID = (SELECT region.Region_ID FROM region WHERE region.Population = (SELECT MAX(region.Population) FROM region)); 
SELECT building.Address, region.Capital FROM building, region WHERE building.Region_ID = region.Region_ID; 
SELECT building.Address, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID 
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')  
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo'); 
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings FROM building GROUP BY Completed_Year 
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings FROM building GROUP BY Completed_Year 
SELECT Completed_Year FROM building WHERE Completed_Year = (SELECT MAX(Completed_Year) FROM building)  
SELECT Completed_Year FROM building WHERE Completed_Year = (SELECT MAX(Completed_Year) FROM building)  
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building); 
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building); 
SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15; 
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15 
SELECT DISTINCT Address FROM building; 
SELECT DISTINCT Address FROM building; 
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC; 
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC; 
SELECT COUNT(Service_ID) FROM Services; 
SELECT COUNT(Service_ID) FROM Services; 
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')); 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT * FROM Customers c 
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID HAVING COUNT(DISTINCT Service_ID) = (SELECT COUNT(DISTINCT Service_ID) FROM Customer_Interactions GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)); 
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT * FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services); 
SELECT * FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services); 
SELECT * FROM Customers c 
SELECT DISTINCT Customer_Details FROM Customers_and_Services 
SELECT DISTINCT Customers_and_Services_Details FROM Customers_and_Services; 
SELECT COUNT(Customer_Details) AS Customer_Details, COUNT(Service_Details) AS Service_Details FROM Customers, Services; 
SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'; 
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%' 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good'))  
SELECT Service_ID, Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Status_Code = 'bad')  
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Status_Code = 'bad')  
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')); 
SELECT * FROM Services 
SELECT * FROM Customer_Interactions 
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad'); 
SELECT COUNT(*) FROM Integration_Platform WHERE Status_Code = 'Successful'  
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'; 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Status_Code = 'Failed')));  
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Fail'));  
SELECT Service_ID, Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customer_Interactions); 
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services); 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied'); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied'); 
SELECT COUNT(*) FROM Vehicles; 
SELECT COUNT(*) FROM Vehicles; 
SELECT name FROM Vehicles ORDER BY Model_year DESC; 
SELECT Vehicles.name FROM Vehicles ORDER BY Model_year DESC; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles; 
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014; 
SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year IN (2013, 2014)  
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2014, 2013) GROUP BY Type_of_powertrain 
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(*) > 1 
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain 
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain 
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1 
SELECT Type_of_powertrain, COUNT(*) AS count FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count DESC LIMIT 1 
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles; 
SELECT MIN(Annual_fuel_cost) AS min, MAX(Annual_fuel_cost) AS max, AVG(Annual_fuel_cost) AS avg FROM Vehicles 
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate; 
SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate; 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2; 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2; 
SELECT name, age, membership_credit FROM Customers; 
SELECT name, age, membership_credit FROM Customers; 
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers); 
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers); 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT * FROM Discount; 
SELECT * FROM Discount; 
SELECT Vehicles.name, Renting_history.total_hours  
SELECT Vehicles.name, SUM(Renting_history.total_hours) AS total_rental_hours FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name 
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history); 
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history); 
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT Vehicles.name, Vehicles.Model_year FROM Renting_history INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.name, Vehicles.Model_year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Vehicles.name, Vehicles.Model_year  
SELECT Vehicles.name, Renting_history.total_hours FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC; 
SELECT Vehicles.name FROM Renting_history, Vehicles WHERE Renting_history.vehicles_id = Vehicles.id ORDER BY total_hours DESC; 
SELECT discount.name  
SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Vehicles.name, Vehicles.Type_of_powertrain  
SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history, Vehicles WHERE Renting_history.vehicles_id = Vehicles.id AND Renting_history.total_hours > 30; 
SELECT AVG(City_fuel_economy_rate) AS avg_city_fuel_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_rate, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain; 
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT Students.bio_data, Students.student_id FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id INNER JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id WHERE Classes.class_id = 1 OR Classes.class_id = 2 OR Classes.class_id = 3 OR Classes.class_id = 4 OR Classes.class_id = 5 OR Classes.class_id = 6 OR Classes.class_id = 7 OR Classes.class_id = 8 OR Classes.class_id = 9 OR Classes.class_id = 10 OR Classes.class_id = 11 OR Classes.class_id = 12 OR Classes.class_id = 13 OR Classes.class_id = 14 OR Classes.class_id = 15 OR Classes.class_id = 16 OR Classes.class_id = 17 OR Classes.class_id = 18 OR Classes.class_id = 19 OR Classes.class_id = 20 OR Classes.class_id = 21 OR Classes.class_id = 22 OR Classes.class_id = 23 OR Classes.class_id = 24 OR Classes.class_id = 25 OR Classes.class_id = 26 OR Classes.class_id = 27 OR Classes.class_id = 28 OR Classes.class_id = 29 OR Classes.class_id = 30 OR Classes.class_id = 31 OR Classes.class_id = 32 OR Classes.class_id = 33 OR Classes.class_id = 34 OR Classes.class_id = 35 OR Classes.class_id = 36 OR Classes.class_id = 37 OR Classes.class_id = 38 OR Classes.class_id = 39 OR Classes.class_id = 40 OR Classes.class_id = 41 OR Classes.class_id = 42 OR Classes.class_id = 43 OR Classes.class_id = 44 OR Classes.class_id = 45 OR Classes.class_id = 46 OR Classes.class_id = 47 OR Classes.class_id = 48 OR Classes.class_id = 49 OR Classes.class_id = 50 OR Classes.class_id = 51 OR Classes.class_id = 52 OR Classes.class_id = 53 OR Classes.class_id = 54 OR Classes.class_id = 55 OR Classes.class_id = 56 OR Classes.class_id = 57 OR Classes.class_id = 58 OR Classes.class_id = 59 OR Classes.class_id = 60 OR Classes.class_id = 61 OR Classes.class_id = 62 OR Classes.class_id = 63 OR Classes.class_id = 64 OR Classes.class_id = 65 OR Classes.class_id = 66 OR Classes.class_id = 67 OR Classes.class_id = 68 OR Classes.class_id = 69 OR Classes.class_id = 70 OR Classes.class_id = 71 OR Classes.class_id = 72 OR Classes.class_id = 73 OR Classes.class_id = 74 OR Classes.class_id = 75 OR Classes.class_id = 76 OR Classes.class_id = 77 OR Classes.class_id = 78 OR Classes.class_id = 79 OR Classes.class_id = 80 OR Classes.class_id = 81 OR Classes.class_id = 82 OR
SELECT Students.bio_data, Students.student_id FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id INNER JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id INNER JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.detention_type_code = 'No Detention' OR Detention.detention_type_code = 'Detention' GROUP BY Students.student_id HAVING COUNT(Detention.detention_type_code) < 2 OR COUNT(Classes.class_id) >= 2; 
SELECT teacher_details FROM Teachers 
SELECT teacher_details FROM Teachers 
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT * FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT student_loan.amount_of_loan, student_loan.date_of_loan FROM Student_Loans student_loan INNER JOIN Achievements achievement ON student_loan.student_id = achievement.student_id GROUP BY student_loan.student_id HAVING COUNT(achievement.student_id) >= 2; 
SELECT amount_of_loan, date_of_loan FROM Student_Loans 
SELECT teacher_details, teacher_id FROM Teachers 
SELECT teacher_details, teacher_id FROM Teachers 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT Students.student_id, Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description  
SELECT Students.student_id, Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description  
SELECT Addresses.address_details, Students.bio_data  
SELECT Students.address_details, Students.bio_data FROM Students;  
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id; 
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id; 
SELECT COUNT(*) AS total_students, behaviour_monitoring_details AS result_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY total_students DESC LIMIT 1; 
SELECT COUNT(*) AS count, behaviour_monitoring_details AS details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1; 
SELECT Students.student_id, Students.bio_data, Students.student_details  
SELECT Students.bio_data, Students.student_details FROM Students INNER JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id WHERE Behaviour_Monitoring.behaviour_monitoring_details IN (SELECT Behaviour_Monitoring.behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details HAVING COUNT(Behaviour_Monitoring.behaviour_monitoring_details) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details ORDER BY COUNT(Behaviour_Monitoring.behaviour_monitoring_details) DESC LIMIT 1 OFFSET 1)) AND Behaviour_Monitoring.behaviour_monitoring_details IN (SELECT Behaviour_Monitoring.behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details HAVING COUNT(Behaviour_Monitoring.behaviour_monitoring_details) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details ORDER BY COUNT(Behaviour_Monitoring.behaviour_monitoring_details) DESC LIMIT 1 OFFSET 1)) 
SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))); 
SELECT Students.student_id, Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id 
SELECT Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id WHERE Student_Events.event_type_code IN (SELECT event_type_code FROM Ref_Event_Types WHERE event_type_description = 'Participated in any events')  
SELECT COUNT(student_id), event_type_code, event_type_description FROM Student_Events GROUP BY event_type_code ORDER BY COUNT(student_id) DESC LIMIT 1; 
SELECT COUNT(student_id), event_type_code, event_type_description FROM Student_Events GROUP BY event_type_code ORDER BY COUNT(student_id) DESC LIMIT 1; 
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code 
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code 
SELECT COUNT(DISTINCT teacher_id) FROM Classes 
SELECT COUNT(DISTINCT teacher_id) FROM Teachers 
SELECT date_of_transcript, transcript_details FROM Transcripts 
SELECT date_of_transcript, transcript_details FROM Transcripts; 
SELECT achievement_type_code, achievement_details, date_achievement  
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements; 
SELECT datetime_detention_start, datetime_detention_end FROM Detention 
SELECT datetime_detention_start, datetime_detention_end FROM Detention 
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'; 
SELECT * FROM Students WHERE bio_data LIKE '%Suite%'; 
SELECT Teachers.teacher_details, Students.student_details FROM Classes INNER JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id 
SELECT Teachers.teacher_details, Students.student_details FROM Classes INNER JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id 
SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1 
SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1 
SELECT COUNT(DISTINCT class_id) AS max_courses, student_id FROM Classes GROUP BY student_id ORDER BY max_courses DESC LIMIT 1; 
SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1 
SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2); 
SELECT student_id, class_details FROM Classes WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) > 1)  
SELECT detention_type_code, detention_type_description FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code IN (SELECT detention_type_code FROM Detention GROUP BY detention_type_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1))  
SELECT Students.student_id, Students.bio_data, Students.student_details FROM Students WHERE Students.student_id IN (SELECT Student_Loans.student_id FROM Student_Loans WHERE Student_Loans.amount_of_loan > (SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans)); 
SELECT Students.bio_data, Students.student_details FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans) 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1); 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1); 
SELECT * FROM Students; 
SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1); 
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1)); 
SELECT teacher_details FROM Teachers 
SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id; 
SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id; 
SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) AS course_count 
SELECT student_id, bio_data, COUNT(class_id) AS num_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id; 
SELECT COUNT(*) FROM Students 
SELECT COUNT(*) FROM Students 
SELECT address_type_code, address_type_description FROM Students_Addresses GROUP BY address_type_code ORDER BY count(address_type_code) DESC LIMIT 1 
SELECT address_type_code, address_type_description FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(address_type_code) DESC LIMIT 1; 
SELECT Students.bio_data FROM Students WHERE Students.student_id NOT IN (SELECT Student_Events.student_id FROM Student_Events) AND Students.student_id NOT IN (SELECT Student_Loans.student_id FROM Student_Loans) 
SELECT Students.bio_data FROM Students WHERE Students.student_id NOT IN (SELECT Student_Loans.student_id FROM Student_Loans) AND Students.student_id IN (SELECT Student_Events.student_id FROM Student_Events)  
SELECT   
SELECT datetime_detention_start, datetime_detention_end FROM Detention WHERE student_id IN (SELECT student_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE
SELECT datetime_detention_start FROM Detention 
SELECT datetime_detention_start FROM Detention; 
SELECT Name FROM Author 
SELECT Name FROM Author 
SELECT Name, Address FROM Client 
SELECT Name, Address FROM Client 
SELECT Book.Title, Book.ISBN, Book.SalePrice  
SELECT Book.Title, Book.ISBN, Book.SalePrice  
SELECT COUNT(*) FROM Book 
SELECT COUNT(*) FROM Book; 
SELECT COUNT(DISTINCT Author) FROM Author_Book; 
SELECT COUNT(DISTINCT Author) FROM Author_Book; 
SELECT COUNT(IdClient) FROM Client 
SELECT COUNT(IdClient) FROM Client 
SELECT Name, Address FROM Client ORDER BY Name ASC; 
SELECT Name, Address FROM Client ORDER BY Name ASC; 
SELECT Book.Title, Author.Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor 
SELECT Book.Title, Author.Name FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor 
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdOrder = Client.IdClient 
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient 
SELECT Author.Name, COUNT(*) AS numBooks FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name 
SELECT Author.Name, COUNT(*) AS numBooks FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name 
SELECT Book.ISBN, COUNT(Orders.IdOrder) AS numOrders FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder GROUP BY Book.ISBN 
SELECT ISBN, COUNT(*) AS num_orders FROM Books_Order GROUP BY ISBN; 
SELECT Book.ISBN, SUM(Books_Order.amount) as TotalAmount  
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN; 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Book.Title, Book.PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN INNER JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.DateExped IS NULL ORDER BY Book.PurchasePrice DESC LIMIT 1 
SELECT Book.Title, Book.PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN INNER JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.DateExped IS NULL ORDER BY Books_Order.amount DESC LIMIT 1; 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order); 
SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE DateOrder < '2019-01-01')) 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders); 
SELECT DISTINCT Name FROM Client, Orders WHERE Client.IdClient = Orders.IdClient; 
SELECT Name, COUNT(IdOrder) FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name; 
SELECT Name, COUNT(IdOrder) FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name; 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(IdClient) DESC LIMIT 1); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(IdClient) DESC LIMIT 1); 
SELECT Client.Name, SUM(Books_Order.amount) AS TotalAmount FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name 
SELECT Client.Name, SUM(Books_Order.amount) FROM Client, Books_Order WHERE Client.IdClient = Books_Order.IdOrder GROUP BY Client.Name; 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE SalePrice = (SELECT MAX(SalePrice) FROM Book)))); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE SalePrice = (SELECT MAX(SalePrice) FROM Book)))); 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders); 
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders); 
SELECT MAX(SalePrice) FROM Book; 
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book; 
SELECT AVG(PurchasePrice) AS avg_purchase_price, AVG(SalePrice) AS avg_sale_price FROM Book 
SELECT AVG(PurchasePrice) AS avg_purchase_price, AVG(SalePrice) AS avg_sale_price FROM Book 
SELECT MAX(SalePrice - PurchasePrice) FROM Book 
SELECT MAX(SalePrice - PurchasePrice) FROM Book 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT AVG(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'); 
SELECT AVG(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'); 
SELECT Book.SalePrice  
SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato')); 
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') AND SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')); 
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') AND SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')); 
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book) 
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book) 
SELECT Author.Name FROM Author_Book INNER JOIN Book ON Author_Book.Author = Book.Author WHERE Book.Title = 'Pride and Prejudice'  
SELECT Name FROM Author, Book, Author_Book WHERE Author.idAuthor = Author_Book.Author AND Book.ISBN = Author_Book.ISBN AND Book.Title = 'Pride and Prejudice' 
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%') 
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%') 
SELECT COUNT(*) FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')); 
SELECT COUNT(*) FROM Orders 
SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' OR Title = 'The Little Prince')); 
SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name IN ('Pride and Prejudice', 'The Little Prince'))))  
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))) 
SELECT ISBN FROM Books_Order 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND IdOrder NOT IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))) 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND IdOrder NOT IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))) 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))) 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))) 
SELECT COUNT(*) FROM book; 
SELECT Title FROM book ORDER BY Title ASC; 
SELECT Title FROM book ORDER BY Pages DESC; 
SELECT Type, Release FROM book; 
SELECT book.Book_ID, MAX(chapters), MIN(chapters) FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID GROUP BY book.Book_ID; 
SELECT Title FROM book WHERE Type!= 'Poet'; 
SELECT AVG(Rating) FROM review; 
SELECT book.Title, review.Rating FROM book INNER JOIN review ON book.Book_ID = review.Book_ID; 
SELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book WHERE Chapters = (SELECT MAX(Chapters) FROM book)); 
SELECT * FROM book ORDER BY Pages ASC LIMIT 1; 
SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review WHERE Rank = (SELECT MAX(Rank) FROM review)); 
SELECT AVG(Readers_in_Million) FROM review WHERE Type = 'Novel';  
SELECT Type, COUNT(*) AS Count FROM book GROUP BY Type; 
SELECT Type, COUNT(*) AS Count FROM book GROUP BY Type ORDER BY Count DESC LIMIT 1 
SELECT Type FROM book WHERE Book_ID IN (SELECT Book_ID FROM book GROUP BY Book_ID HAVING COUNT(*) >= 3); 
SELECT book.Title FROM book, review WHERE book.Book_ID = review.Book_ID ORDER BY review.Rating ASC; 
SELECT book.Title, book.Audio, review.Readers_in_Million FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC; 
SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review); 
SELECT Type FROM book WHERE Chapters > 75 OR Chapters < 50; 
SELECT DISTINCT Type FROM book; 
SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review); 
SELECT COUNT(*) FROM customer; 
SELECT COUNT(*) FROM customer; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT customer.Nationality, customer.Card_Credit  
SELECT customer.Nationality, customer.Card_Credit FROM customer 
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'; 
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'; 
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1; 
SELECT AVG(customer.Card_Credit) FROM customer WHERE customer.Level_of_Membership > 1; 
SELECT card_credit FROM customer WHERE customer_id IN (SELECT customer_id FROM customer ORDER BY level_of_membership DESC LIMIT 1); 
SELECT * FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer) AND Card_Credit = (SELECT MAX(Card_Credit) FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)); 
SELECT Nationality, COUNT(*) AS Number_of_customers FROM customer GROUP BY Nationality 
SELECT Nationality, COUNT(Customer_ID) AS Num_Customers FROM customer GROUP BY Nationality; 
SELECT Nationality, COUNT(*) AS Count FROM customer GROUP BY Nationality ORDER BY Count DESC LIMIT 1 
SELECT Nationality, COUNT(*) AS Count FROM customer GROUP BY Nationality ORDER BY Count DESC LIMIT 1 
SELECT Nationality FROM customer WHERE Card_Credit < 50 OR Card_Credit > 75 GROUP BY Nationality HAVING COUNT(*) > 1; 
SELECT Nationality FROM customer WHERE Card_Credit > 50 AND Card_Credit < 75; 
SELECT customer.Name, customer_order.Dish_Name 
SELECT customer.Name, customer_order.Dish_Name  
SELECT customer.Name, customer_order.Dish_Name, customer_order.Quantity FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC; 
SELECT customer.Name, customer_order.Dish_Name, customer_order.Quantity FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC; 
SELECT customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name; 
SELECT customer.Name, SUM(customer_order.Quantity) AS Total_Quantity  
SELECT * FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1); 
SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1); 
SELECT DISTINCT Manager FROM branch; 
SELECT DISTINCT Manager FROM branch; 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT COUNT(*) FROM member; 
SELECT Name FROM member ORDER BY Age ASC; 
SELECT member.Name, member.Nationality FROM member; 
SELECT Name FROM member WHERE Nationality!= 'England'; 
SELECT Name FROM member WHERE Age = 19 OR Age = 20; 
SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member); 
SELECT Nationality, COUNT(*) AS num_members FROM member GROUP BY Nationality; 
SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality ORDER BY Count DESC LIMIT 1 
SELECT DISTINCT Nationality FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader GROUP BY Member_ID HAVING COUNT(*) >= 2); 
SELECT club_leader.Member_ID, club_leader.Club_ID, club_leader.Year_Join, club.Club_Name, member.Name FROM club_leader JOIN club ON club_leader.Club_ID = club.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID 
SELECT club_leader.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Club_ID IN (SELECT Club_ID FROM club WHERE Overall_Ranking > 100)  
SELECT Name FROM club_leader WHERE Year_Join < '2018' AND Club_ID IN (SELECT Club_ID FROM club WHERE Team_Leader = 'Name') ORDER BY Name ASC;  
SELECT Name FROM club WHERE Club_Name = 'Houston' AND Team_Leader = 'Team Leader';  
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader); 
SELECT DISTINCT Nationality FROM member WHERE Age > 22 AND Age < 19; 
SELECT AVG(Age) FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON c.Club_ID = cl.Club_ID; 
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'; 
SELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID 
SELECT Collection_Subset_Name FROM Collection_Subsets; 
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'  
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Top collection'  
SELECT Document_Subset_Name FROM Document_Subsets 
SELECT Document_Subset_Name FROM Document_Subsets 
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'  
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'  
SELECT Document_Object_ID FROM Document_Objects 
SELECT Document_Object_ID FROM Document_Objects 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NOT NULL 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'  
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'; 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Braeden Collection')); 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') 
SELECT Owner FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NOT NULL; 
SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects) 
SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects) 
SELECT COUNT(DISTINCT Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin' 
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'; 
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects)  
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS NumberOfChildDocuments FROM Document_Objects GROUP BY Document_Object_ID 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Child_Document_Count FROM Document_Objects GROUP BY Document_Object_ID 
SELECT Collection_Name FROM Collections 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Document Subset 1'))) 
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'  
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'  
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Nice')  
SELECT Collection_Name FROM Collections WHERE Collection_Name = 'Nice' AND Parent_Collection_ID IS NOT NULL 
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections) 
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)  
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL) GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) > 1 
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL) GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) > 1 
SELECT COUNT(*) 
SELECT COUNT(*) 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom' 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom' AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Ransom'))  
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Collection_Count FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name 
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Collection_Count FROM Collection_Subset_Members GROUP BY Collection_Subset_ID, Collection_Subset_Name 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Child_Count FROM Document_Objects GROUP BY Document_Object_ID ORDER BY Child_Count DESC LIMIT 1; 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Children_Count FROM Document_Objects GROUP BY Document_Object_ID 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Related_Document_Count ASC LIMIT 1; 
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) = (SELECT MIN(COUNT(Document_Object_ID)) FROM Documents_in_Collections GROUP BY Document_Object_ID)); 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Number_of_Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) BETWEEN 2 AND 4 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) BETWEEN 2 AND 4; 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN
SELECT DISTINCT Owner FROM Document_Objects WHERE Owner = 'Braeden' AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) OR Owner = 'Braeden' AND Document_Object_ID IN (SELECT Document_Object_ID FROM Collection_Subset_Members WHERE Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Braeden'))) 
SELECT Document_Subset_Name FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden') GROUP BY Document_Subset_Name HAVING COUNT(*) = 1 
SELECT DISTINCT Document_Subset_Name FROM Document_Subset_Members WHERE Owner = 'Braeden' AND Document_Object_ID = Related_Document_Object_ID 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subset_Members GROUP BY Document_Subset_ID, Document_Subset_Name; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subset_Members GROUP BY Document_Subset_ID, Document_Subset_Name 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY num_docs DESC LIMIT 1; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY Document_Count DESC LIMIT 1; 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')  
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Related_Document_Object_ID = Document_Object_ID 
SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID 
SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID = 1; 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom ')) 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')); 
SELECT COUNT(Collection_ID), Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID 
SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID; 
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS Document_Count FROM Documents_in_Collections GROUP BY Collection_ID ORDER BY Document_Count DESC LIMIT 1; 
SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS Document_Count FROM Documents_in_Collections WHERE Collection_Name = 'Best' GROUP BY Collection_ID ORDER BY Document_Count DESC LIMIT 1; 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Related_Document_Object_ID = Document_Object_ID) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Related_Document_Object_ID = Document_Object_ID) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Related_Document_Object_ID = Document_Object_ID) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Related_Document_Object_ID = Document_Object_ID) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Related_Document_Object_ID = Document_Object_ID) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name =
SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')); 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')  
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') OR Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) OR Collection_ID IN (SELECT Collection
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID
SELECT COUNT(DISTINCT Collection_ID) FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections
SELECT COUNT(DISTINCT Collection_ID) FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IN (SELECT Collection_ID FROM
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best in')); 
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')); 
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'; 
SELECT name FROM songs ORDER BY name ASC; 
SELECT songs.name, songs.language FROM songs; 
SELECT MAX(voice_sound_quality) AS max_voice_sound_quality, MIN(voice_sound_quality) AS min_voice_sound_quality FROM performance_score; 
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE participant_id IN (SELECT id FROM participants WHERE name = 'Freeway')  
SELECT songs.id, songs.language, songs.original_artist FROM songs WHERE songs.name!= 'Love'  
SELECT songs.name, songs.original_artist FROM songs WHERE songs.english_translation = 'All the streets of love'; 
SELECT DISTINCT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'); 
SELECT participants.id, participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id HAVING COUNT(participants.id) >= 2 
SELECT participants.id, participants.name, participants.popularity  
SELECT participants.id, participants.name FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5; 
SELECT voice_sound_quality FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE name = 'The Balkan Girls' AND english_translation IS NOT NULL) AND songs_id IN (SELECT id FROM songs WHERE language = 'English')  
SELECT songs.id, songs.name  
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9; 
SELECT COUNT(*) FROM songs WHERE songs.id NOT IN (SELECT songs_id FROM performance_score); 
SELECT songs.language, AVG(performance_score.rhythm_tempo) AS avg_rhythm_score FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.language 
SELECT DISTINCT name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English')); 
SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'Croatian') AND songs_id IN (SELECT id FROM songs WHERE language = 'English')); 
SELECT name FROM songs WHERE name LIKE '%Is%'; 
SELECT original_artist FROM songs WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC;  
SELECT COUNT(*) FROM City; 
SELECT COUNT(DISTINCT city_name) FROM City; 
SELECT DISTINCT state FROM City; 
SELECT DISTINCT state FROM City; 
SELECT COUNT(DISTINCT country) FROM City; 
SELECT COUNT(DISTINCT country) FROM City; 
SELECT City.city_name, City.city_code, City.state, City.country 
SELECT City.city_name, City.city_code, City.state, City.country 
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT city_name FROM City WHERE state = 'PA'; 
SELECT city_name FROM City WHERE state = 'PA'; 
SELECT COUNT(*) FROM City WHERE country = 'Canada'; 
SELECT COUNT(*) FROM City WHERE country = 'Canada'; 
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC; 
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude; 
SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state; 
SELECT city_name, state, COUNT(*) AS num_cities FROM City GROUP BY state; 
SELECT country, COUNT(city_code) AS num_cities FROM City GROUP BY country; 
SELECT COUNT(city_name), country FROM City GROUP BY country; 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) GROUP BY state HAVING COUNT(*)>1; 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) GROUP BY state HAVING COUNT(*) >= 2; 
SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1; 
SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT country FROM City GROUP BY country HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM City GROUP BY country);  
SELECT country FROM City GROUP BY country HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM City GROUP BY country);  
SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD'); 
SELECT CONCAT(LName,'', Fname) AS FullName FROM Student WHERE city_code = 'MD'; 
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China'); 
SELECT COUNT(*) FROM Student WHERE city_code = 'CHN'; 
SELECT Fname, Major FROM Student WHERE city_code = 'BAL'  
SELECT Fname, Major FROM Student WHERE city_code = 'BAL'  
SELECT COUNT(*) AS num_students, country FROM Student GROUP BY country ORDER BY num_students DESC;  
SELECT City.country, COUNT(*) AS num_students FROM Student INNER JOIN City ON Student.city_code = City.city_code GROUP BY City.country 
SELECT city_name, COUNT(*) AS num_students FROM Student GROUP BY city_name; 
SELECT city_name, COUNT(*) AS num_students FROM Student GROUP BY city_name; 
SELECT state, COUNT(*) AS num_students FROM Student GROUP BY state ORDER BY num_students DESC LIMIT 1; 
SELECT state FROM Student GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;  
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY city_code)); 
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY city_code));  
SELECT DISTINCT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) >= 3))) 
SELECT DISTINCT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3); 
SELECT DISTINCT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) > 5);  
SELECT DISTINCT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) > 5);  
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA') 
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code = 'PA'; 
SELECT StuID FROM Student WHERE Sex = 'F' AND state = 'PA';  
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA') 
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA') 
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'; 
SELECT * FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'; 
SELECT AVG(distance) AS avg_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance; 
SELECT AVG(distance) AS avg_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance;  
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance); 
SELECT city_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);  
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000; 
SELECT city_code FROM Direct_distance WHERE distance < 1000;  
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = 'CHI')); 
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance LIMIT 1); 
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' AND distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = 'BOS')); 
SELECT City.city_name FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code AND City.city_code = 'BOS' AND Direct_distance.distance = (SELECT MAX(Direct_distance.distance) FROM Direct_distance WHERE Direct_distance.city1_code = 'BOS') AND City.city_code!= 'BOS'; 
SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code; 
SELECT city_code, SUM(distance) FROM Direct_distance GROUP BY city_code;  
SELECT city_name, AVG(distance) AS avg_distance FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code GROUP BY city_name; 
SELECT city_name, AVG(distance) AS avg_distance FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code GROUP BY city_name 
SELECT city1_name, city2_name, distance FROM City, Direct_distance WHERE city1_code = city_code AND city2_code = city_code AND city1_name = 'Linda' AND city2_name = 'Tracy' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND city2_name = 'Kim' AND city1_name = 'Smith' AND
SELECT distance FROM Direct_distance WHERE city1_code = 'NYC' AND city2_code = 'LAX'; 
SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND StuID IN (SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND StuID IN (SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND StuID IN (SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND StuID IN (SELECT StuID FROM Student WHERE StuID NOT IN (SELECT 
SELECT CONCAT(LName,'', Fname) AS Full_Name FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND city_code IN (SELECT city_code FROM City WHERE latitude = (SELECT MAX(latitude) FROM City) AND longitude = (SELECT MAX(longitude) FROM City))  
SELECT state FROM Student WHERE Fname = 'Linda';  
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda'); 
SELECT * FROM Sailors WHERE age > 30; 
SELECT name FROM Sailors WHERE age > 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT * FROM Reserves WHERE sid = 1; 
SELECT DISTINCT bid FROM Reserves WHERE sid = 1; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102) 
SELECT DISTINCT bid FROM Reserves; 
SELECT bid FROM Reserves; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors); 
SELECT DISTINCT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Sailors WHERE age = (SELECT MIN(age) FROM Sailors)); 
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7) 
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7) ORDER BY name ASC; 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 1); 
SELECT DISTINCT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) >= 2); 
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red') AND sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue'))) 
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')); 
SELECT name, sid FROM Sailors, Reserves, Boats WHERE Reserves.sid = Sailors.sid AND Reserves.bid = Boats.bid AND Boats.color ='red' OR Boats.color = 'blue' ORDER BY name ASC, sid ASC;  
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT name, sid FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves); 
SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors); 
SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors); 
SELECT COUNT(*) FROM Sailors; 
SELECT COUNT(*) FROM Sailors; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT AVG(rating), MAX(age) FROM Sailors; 
SELECT AVG(rating), MAX(age) FROM Sailors; 
SELECT COUNT(*) FROM Reserves GROUP BY bid; 
SELECT b.name, COUNT(*) AS num_reservations FROM Reserves r JOIN Boats b ON r.bid = b.bid GROUP BY b.name; 
SELECT COUNT(*) AS num_reservations, bid FROM Reserves WHERE bid > 50; 
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid; 
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1; 
SELECT COUNT(*) FROM Reserves WHERE bid IN (SELECT bid FROM Reserves GROUP BY bid HAVING COUNT(*) > 1); 
SELECT COUNT(*) FROM Reserves WHERE sid > 1 GROUP BY bid; 
SELECT b.name, COUNT(*) AS num_reservations FROM Reserves r JOIN Sailors s ON r.sid = s.sid JOIN Boats b ON r.bid = b.bid WHERE s.sid > 1 GROUP BY b.name; 
SELECT rating, AVG(age) FROM Sailors 
SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ='red' GROUP BY rating; 
SELECT name, rating, age FROM Sailors ORDER BY rating, age; 
SELECT name, rating, age FROM Sailors ORDER BY rating, age; 
SELECT COUNT(*) FROM Boats; 
SELECT COUNT(*) FROM Boats; 
SELECT COUNT(*) FROM Boats WHERE color ='red'; 
SELECT COUNT(*) FROM Boats WHERE color ='red'; 
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30)); 
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30)); 
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red'))); 
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red'))); 
SELECT MAX(rating) FROM Sailors; 
SELECT MAX(rating) FROM Sailors; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')); 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone); 
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone); 
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC; 
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC; 
SELECT Class, COUNT(*) AS Count FROM headphone GROUP BY Class ORDER BY Count DESC LIMIT 1 
SELECT Class, COUNT(*) AS Count FROM headphone GROUP BY Class ORDER BY Count DESC LIMIT 1 
SELECT Class FROM headphone WHERE headphone_id IN (SELECT headphone_id FROM stock GROUP BY headphone_id HAVING COUNT(*) > 2); 
SELECT DISTINCT headphone.Class FROM headphone WHERE headphone.Class NOT IN (SELECT headphone.Class FROM headphone GROUP BY headphone.Class HAVING COUNT(*) > 2); 
SELECT headphone.Class, COUNT(*) AS num_headphones FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class; 
SELECT headphone_class, COUNT(*) AS num_headphones FROM headphone GROUP BY headphone_class; 
SELECT DISTINCT Earpads FROM headphone; 
SELECT COUNT(DISTINCT earpads) FROM headphone; 
SELECT earpads, COUNT(*) AS count FROM headphone GROUP BY earpads ORDER BY count DESC LIMIT 2; 
SELECT earpads, COUNT(*) AS num_headphones FROM headphone GROUP BY earpads ORDER BY num_headphones DESC LIMIT 2; 
SELECT headphone.Model, headphone.Class, headphone.Construction  
SELECT headphone.Model, headphone.Class, headphone.Construction FROM headphone WHERE headphone.Price = (SELECT MIN(headphone.Price) FROM headphone); 
SELECT headphone.Construction, AVG(headphone.Price) AS Average_Price FROM headphone GROUP BY headphone.Construction 
SELECT AVG(Price) AS Average_Price, Construction FROM headphone GROUP BY Construction; 
SELECT DISTINCT headphone.Class FROM headphone WHERE headphone.Earpads IN ('Bowls', 'Comfort Pads')  
SELECT DISTINCT headphone.Class FROM headphone WHERE headphone.Earpads IN ('Bowls', 'Comfort Pads')  
SELECT DISTINCT headphone.Earpads FROM headphone WHERE headphone.Earpads NOT IN (SELECT headphone.Earpads FROM headphone WHERE headphone.Construction = 'plastic')  
SELECT DISTINCT Earpads FROM headphone WHERE Construction!= 'plastic'  
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Name FROM store ORDER BY Date_Opened ASC; 
SELECT store.Name FROM store ORDER BY store.Date_Opened ASC; 
SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana' 
SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana' 
SELECT DISTINCT Neighborhood FROM store; 
SELECT COUNT(DISTINCT Neighborhood) FROM store; 
SELECT COUNT(*), Neighborhood FROM store GROUP BY Neighborhood; 
SELECT store.Neighborhood, COUNT(*) AS num_stores FROM store GROUP BY store.Neighborhood 
SELECT store.Name, COUNT(*) AS num_headphones FROM stock JOIN headphone ON stock.Headphone_ID=headphone.Headphone_ID GROUP BY store.Name ORDER BY num_headphones DESC LIMIT 1; 
SELECT store.Name, SUM(stock.Quantity) AS Total_Quantity FROM store INNER JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock); 
SELECT Model FROM headphone WHERE headphone.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock); 
SELECT headphone.Model, SUM(stock.Quantity) AS Total_Quantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Model 
SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1); 
SELECT COUNT(*) FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman'); 
SELECT SUM(Quantity) FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman'); 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT COUNT(DISTINCT author_id) FROM Author; 
SELECT COUNT(DISTINCT author_id) FROM Author_list; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation; 
SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation; 
SELECT COUNT(*) FROM Paper WHERE year = 2000 AND venue = 'NAACL'; 
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000; 
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE p.year = 2009 AND af.name = 'Columbia University'; 
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND p.year = 2009; 
SELECT A.name, A.address FROM Affiliation AS A; 
SELECT name, address FROM Affiliation; 
SELECT venue, year FROM Paper ORDER BY year; 
SELECT DISTINCT venue FROM Paper ORDER BY year DESC; 
SELECT Paper.title, Paper.paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.email = 'johndoe@harvard.edu' AND Affiliation.name = 'Harvard University' AND Affiliation.affiliation_id = Author_list.affiliation_id;  
SELECT title, paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Harvard University';  
SELECT paper_id, title FROM Paper, Author_list, Author WHERE Author.name = 'Mckeown' AND Author.author_id = Author_list.author_id AND Paper.paper_id = Author_list.paper_id;  
SELECT title, paper_id FROM Paper WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown');  
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' OR af.name = 'Columbia University' GROUP BY p.paper_id, p.title 
SELECT Paper.paper_id, Paper.title FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id INNER JOIN Affiliation ON Author.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford' AND Affiliation.name = 'Columbia'  
SELECT paper_id, title FROM Paper 
SELECT title, paper_id FROM Paper, Author_list, Author WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen' AND Author.email = 'kathleen.mckeown@nyu.edu' AND Author_list.author_id = (SELECT author_id FROM Author WHERE Author.name = 'Rambow, Owen' AND Author.email = 'owen.rambow@nyu.edu') AND Paper.paper_id = Author_list.paper_id;  
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Rambow')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Rambow')) ORDER BY title ASC; 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown, Kathleen', 'Rambow, Owen'))); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen')); 
SELECT Author.name, COUNT(*) AS num_papers FROM Author_list GROUP BY Author.name ORDER BY num_papers DESC; 
SELECT author_id, COUNT(*) AS num_papers FROM Author_list GROUP BY author_id ORDER BY num_papers DESC; 
SELECT affiliation_id, name, address, COUNT(*) AS num_papers FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY affiliation_id ORDER BY num_papers ASC 
SELECT name FROM Affiliation ORDER BY COUNT(DISTINCT paper_id) DESC;  
SELECT Author.name FROM Author, Author_list WHERE Author.author_id = Author_list.author_id AND Author_list.paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id AND Citation.cited_paper_id IN (SELECT Paper.paper_id FROM Paper, Citation WHERE Paper.paper_id = Citation.paper_id
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) > 50); 
SELECT Author.name FROM Author 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation) AND paper_id NOT IN (SELECT paper_id FROM Citation) GROUP BY paper_id HAVING COUNT(*) = 1)); 
SELECT venue, year, count(*) as num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC LIMIT 1; 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC LIMIT 1; 
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT venue, COUNT(*) AS num_papers FROM Paper GROUP BY venue ORDER BY num_papers ASC LIMIT 1; 
SELECT COUNT(*) FROM Paper p1 JOIN Citation c ON p1.paper_id = c.cited_paper_id WHERE p1.paper_id = 'A00-1002'; 
SELECT COUNT(*) FROM Paper p1 JOIN Citation c ON p1.paper_id = c.paper_id WHERE c.cited_paper_id = 'A00-1002'; 
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'; 
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'; 
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT p.paper_id, COUNT(*) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 10; 
SELECT title, COUNT(*) AS num_citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY title ORDER BY num_citations DESC LIMIT 10; 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND a.email = 'kathleen@cs.cornell.edu' AND c.cited_paper_id = p.paper_id; 
SELECT COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND a.email = 'kathleen.mckeown@nyu.edu'; 
SELECT Author.name, COUNT(Citation.paper_id) AS num_citations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Author.name ORDER BY num_citations DESC LIMIT 1; 
SELECT Author.name, COUNT(Citation.cited_paper_id) AS num_citations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Author.name ORDER BY num_citations DESC LIMIT 1; 
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT venue, year FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University');  
SELECT DISTINCT venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' ORDER BY venue, year; 
SELECT author_id, COUNT(*) AS num_papers FROM Author_list WHERE year = 2009 GROUP BY author_id ORDER BY num_papers DESC LIMIT 1; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT affiliation.name FROM affiliation WHERE affiliation.year = 2009 ORDER BY affiliation.year DESC LIMIT 3; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Paper WHERE year = 2009 GROUP BY affiliation_id ORDER BY num_papers DESC LIMIT 3; 
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND p.year <= 2009; 
SELECT COUNT(*) FROM Paper WHERE year <= 2009 AND venue = 'Columbia University'; 
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009; 
SELECT COUNT(*) FROM Paper WHERE year BETWEEN 2000 AND 2009 AND venue = 'Stanford University'; 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT COUNT(*) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL; 
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'); 
SELECT author_id, COUNT(*) AS num_papers FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY author_id ORDER BY num_papers DESC LIMIT 1; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'University of Pennsylvania') AND author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'University of Pennsylvania') AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role Labeling System' OR title = 'A Semantic Role
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT Paper.paper_id, Paper.title  
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation); 
SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Author_list GROUP BY affiliation_id));  
SELECT affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2019 AND Affiliation.address LIKE '%China%' GROUP BY affiliation.name HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2019 AND Affiliation.address LIKE '%China%')  
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year; 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list GROUP BY affiliation_id; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list GROUP BY affiliation_id 
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50); 
SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000)))); 
SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010)) AND year > 2000 AND year < 2010) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010) AND year > 2000 AND year < 2010) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010) AND year > 2000 AND year < 2010) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010) AND year > 2000 AND year < 2010) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010) AND year > 2000 AND year < 2010) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010) AND year > 2000 AND year < 2010) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010) AND year > 2000 AND year < 2010) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009)); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009)) GROUP BY name HAVING COUNT(*) > 1; 
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL')); 
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL')); 
SELECT COUNT(*) FROM conference; 
SELECT COUNT(*) FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT conference_name, year, location FROM conference; 
SELECT Conference_Name, Year, Location FROM conference; 
SELECT Conference_Name, COUNT(Conference_Name) AS Conference_Count FROM conference GROUP BY Conference_Name 
SELECT Conference_Name, COUNT(Conference_Name) AS Count  
SELECT Year, COUNT(Conference_ID) AS num_conferences FROM conference GROUP BY Year 
SELECT Conference_ID, Year, COUNT(*) AS num_conferences  
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2; 
SELECT Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(*) >= 2) 
SELECT institution.Institution_Name, institution.Location, institution.Founded  
SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution; 
SELECT COUNT(DISTINCT Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT institution.Institution_Name, institution.Location FROM institution WHERE institution.Founded = (SELECT MAX(institution.Founded) FROM institution); 
SELECT institution.Institution_Name, institution.Location FROM institution WHERE institution.Founded = (SELECT MAX(institution.Founded) FROM institution); 
SELECT institution.Institution_Name, COUNT(staff.staff_ID) AS num_staff FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_Name 
SELECT institution.Institution_ID, institution.Institution_Name, COUNT(staff.name) AS num_staff, staff.name FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID, institution.Institution_Name, staff.name 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'; 
SELECT MIN(Age), MAX(Age) FROM staff; 
SELECT Conference_Name FROM conference_participation  
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada')); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker' AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='sponsor')); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker' AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='sponsor')); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND role = 'author') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL') AND role = 'author') 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL' OR Conference_Name = 'NACCL') AND role = 'attendee') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL' OR Conference_Name = 'NACCL') AND role = 'attendee') ORDER BY name ASC; 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004)); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004)); 
SELECT conference_name, year, count(*) as num_participants FROM conference_participation GROUP BY conference_name, year; 
SELECT Conference_Name, Year, COUNT(*) AS num_participants FROM conference_participation GROUP BY Conference_ID; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2); 
SELECT Conference_Name FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2;  
SELECT name, nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')); 
SELECT name, nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')); 
SELECT institution.Institution_Name, institution.Location FROM institution 
SELECT institution.Institution_Name, institution.Location FROM institution 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1; 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC; 
SELECT * FROM PilotSkills WHERE age < 30; 
SELECT * FROM PilotSkills WHERE age < 30; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35; 
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT DISTINCT location FROM Hangar 
SELECT COUNT(DISTINCT location) FROM Hangar; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills 
SELECT COUNT(*) FROM PilotSkills 
SELECT pilot_name, plane_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')  
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1; 
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1; 
SELECT plane_name FROM Hangar WHERE location = 'New York' ORDER BY COUNT(*) ASC LIMIT 1;  
SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PilotSkills GROUP BY plane_name); 
SELECT COUNT(*) FROM PilotSkills 
SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago'); 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT DISTINCT plane_name FROM PilotSkills; 
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills; 
SELECT COUNT(plane_name)  
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith'; 
SELECT COUNT(plane_name)  
SELECT COUNT(plane_name) FROM PilotSkills WHERE age > 40; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT location FROM Hangar ORDER BY plane_name; 
SELECT location FROM Hangar ORDER BY plane_name; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT COUNT(*) FROM PilotSkills 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name = 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(*) = 2; 
SELECT AVG(age) AS avg_age, MIN(age) AS min_age FROM PilotSkills 
SELECT AVG(age) AS avg_age, MIN(age) AS min_age FROM PilotSkills 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') AND plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')  
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston'))  
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')  
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')  
SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name 
SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name 
SELECT plane_name, COUNT(plane_name) AS num_planes FROM Hangar GROUP BY plane_name; 
SELECT plane_name, COUNT(*) AS num_entries FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, pilot_name FROM PilotSkills ORDER BY plane_name DESC; 
SELECT DISTINCT plane_name, pilot_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills) GROUP BY plane_name 
SELECT DISTINCT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)  
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT DISTINCT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT location, COUNT(pilot_name), AVG(age) FROM PilotSkills GROUP BY location; 
SELECT location, COUNT(pilot_name) AS num_pilots, AVG(age) AS avg_age FROM PilotSkills GROUP BY location 
SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < 35; 
SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35 
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))); 
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))); 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')  
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') ORDER BY pilot_name ASC; 
SELECT pilot_name FROM PilotSkills 
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC; 
SELECT COUNT(*) FROM PilotSkills 
SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')  
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'; 
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'; 
SELECT COUNT(*) FROM PilotSkills 
SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')  
SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district); 
SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district); 
SELECT district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district); 
SELECT MAX(Area_km), AVG(Area_km) FROM district; 
SELECT SUM(d.Population) FROM district d WHERE d.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3); 
SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY district.Population DESC; 
SELECT Name FROM district WHERE Government_website LIKE '%gov%'; 
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000; 
SELECT spokesman.Name, spokesman.Speach_title FROM spokesman; 
SELECT AVG(points), AVG(age) FROM spokesman WHERE rank_position = 1; 
SELECT spokesman.Name, spokesman.Points  
SELECT * FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman); 
SELECT * FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman); 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID ORDER BY COUNT(District_ID) DESC LIMIT 1); 
SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < '2004') ORDER BY Name ASC; 
SELECT district.Name, COUNT(spokesman.Spokesman_ID) AS num_spokesmen FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.Name 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 1) AND Start_year IN (SELECT Start_year FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 2))); 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(District_ID) > 1); 
SELECT COUNT(DISTINCT district.District_ID) FROM district LEFT JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Spokesman_ID IS NULL; 
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district); 
SELECT SUM(d.Population) AS Total_Population, AVG(d.Population) AS Average_Population FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.Spokesman_ID IS NOT NULL 
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures); 
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1; 
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT title FROM Sculptures WHERE location = '226'; 
SELECT title FROM Sculptures WHERE location = '226'; 
SELECT title, location FROM Paintings; 
SELECT title, location FROM Paintings; 
SELECT title, location FROM Sculptures; 
SELECT title, location FROM Sculptures 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT lname, fname FROM Artists WHERE birthYear > 1850; 
SELECT fname ||'' || lname FROM Artists WHERE birthYear > 1850; 
SELECT Artists.fname, Artists.lname, Sculptures.year FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.location!= 'gallery 226' ORDER BY Artists.fname ASC, Artists.lname ASC, Sculptures.year ASC; 
SELECT Artists.fname, Artists.lname, Sculptures.year FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.location!= 'gallery 226' ORDER BY Artists.fname ASC, Artists.lname ASC, Sculptures.year ASC; 
SELECT DISTINCT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900); 
SELECT DISTINCT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900); 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920) GROUP BY birthYear HAVING COUNT(*) = 1; 
SELECT DISTINCT Artists.artistID, Artists.birthYear 
SELECT fname, lname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists); 
SELECT fname ||'' || lname FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1; 
SELECT  FROM Artists WHERE birthYear = (SELECT MIN(birthYear) FROM Artists) AND deathYear = (SELECT MAX(deathYear) FROM Artists) ORDER BY birthYear DESC LIMIT 1; 
SELECT fname, lname, birthYear, deathYear, deathYear - birthYear AS age FROM Artists ORDER BY age ASC LIMIT 1; 
SELECT fname, deathYear - birthYear AS age FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1; 
SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1; 
SELECT COUNT(*) FROM Paintings WHERE location = '240'; 
SELECT COUNT(*) FROM Paintings WHERE location = '240'; 
SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1); 
SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1); 
SELECT Artists.fname, Paintings.year FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname = 'Mary' ORDER BY Artists.fname ASC, Paintings.year ASC; 
SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary'); 
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT width_mm FROM Paintings WHERE year > 1850 AND painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo') AND mediumOn IS NOT NULL; 
SELECT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo') ORDER BY location, mediumOn; 
SELECT Artists.lname, Artists.fname FROM Artists WHERE EXISTS (SELECT * FROM Paintings WHERE Paintings.painterID = Artists.artistID) AND EXISTS (SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID) ORDER BY Artists.lname ASC, Artists.fname ASC; 
SELECT Artists.lname, Artists.fname FROM Artists WHERE Artists.artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures); 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND paintingID IN (SELECT paintingID FROM Paintings WHERE medium = 'lithographic')) ORDER BY lname, fname; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' OR medium = 'lithographic') ORDER BY lname, fname; 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas'); 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884) 
SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241') AND artistID IN (SELECT sculptorID FROM Sculptures WHERE medium = 'oil' AND location = 'gallery 241'); 
SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE location = 'gallery 241' AND mediumOn = 'oil') ORDER BY fname ASC; 
SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on canvas' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on panel' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on wood' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on copper' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on paper' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on canvas' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on panel' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on wood' UNION ALL SELECT COUNT(*) FROM Paintings WHERE medium = 'oil on copper' UNION 
SELECT medium, COUNT(*) AS num_works FROM Paintings UNION ALL SELECT medium, COUNT(*) AS num_works FROM Sculptures GROUP BY medium ORDER BY num_works DESC; 
SELECT AVG(height_mm) AS avg_height, medium FROM Paintings GROUP BY medium 
SELECT AVG(height_mm) AS avg_height, medium FROM Paintings GROUP BY medium 
SELECT COUNT(paintingID), location FROM Paintings WHERE year < 1900 GROUP BY location; 
SELECT COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location; 
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'; 
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil' 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas') AND medium = 'canvas'; 
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas') ORDER BY title ASC; 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240') AND location = 'gallery 240'; 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240') ORDER BY paintingID ASC; 
SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT Artists.lname, Artists.fname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%' 
SELECT fname ||'' || lname FROM Artists 
SELECT title FROM Paintings GROUP BY title ORDER BY title ASC; 
SELECT title FROM Paintings GROUP BY title ORDER BY title ASC; 
SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC; 
SELECT title FROM Paintings ORDER BY height_mm ASC; 
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 
SELECT title FROM Paintings WHERE painterID = 222 
SELECT title FROM Paintings 
SELECT artistID FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year < 1900) GROUP BY artistID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year < 1900) GROUP BY artistID);  
SELECT artistID FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year < 1900) ORDER BY COUNT(*) DESC LIMIT 1;  
SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptorID) DESC LIMIT 1); 
SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT location FROM Paintings WHERE mediumOn = 'on panel' OR mediumOn = 'on canvas'; 
SELECT location FROM Paintings WHERE mediumOn = 'on panels' OR mediumOn = 'on canvas'; 
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900; 
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1; 
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year; 
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year; 
SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width, lname, fname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY lname, fname ORDER BY lname, fname; 
SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width, lname, fname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY lname, fname ORDER BY lname, fname; 
SELECT fname, COUNT(*) AS num_paintings FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(*) >= 2; 
SELECT fname, COUNT(*) AS num_paintings FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(*) >= 2; 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) <= 3); 
SELECT * FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) < 4) AND deathYear IS NOT NULL; 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID)); 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptorID) = (SELECT MIN(COUNT(sculptorID)) FROM Sculptures GROUP BY sculptorID)); 
SELECT paintingID, height_mm FROM Paintings WHERE width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = '240') AND location = '240'; 
SELECT height_mm, paintingID FROM Paintings WHERE location = '240' ORDER BY height_mm DESC LIMIT 1; 
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240'); 
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240'); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); 
SELECT * FROM Artists ORDER BY COUNT(*) DESC LIMIT 3;  
SELECT * FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC; 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC; 
SELECT Artists.lname, Artists.fname FROM Artists WHERE Artists.artistID IN (SELECT Artists.artistID FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.artistID NOT IN (SELECT Artists.artistID FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID))  
SELECT lname, fname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures) AND artistID IN (SELECT painterID FROM Paintings) 
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn!= 'canvas' GROUP BY location HAVING COUNT(*) = 0; 
SELECT * FROM Paintings WHERE year < 1885 AND medium!= 'canvas'; 
SELECT COUNT(*) FROM race; 
SELECT COUNT(*) FROM race; 
SELECT winning_driver, winning_team FROM race ORDER BY winning_team ASC; 
SELECT DISTINCT  
SELECT * FROM race WHERE Winning_driver NOT IN (SELECT Driver_Name FROM driver WHERE Driver_Name = 'Junior Strous') AND Winning_driver = Pole_Position; 
SELECT Winning_driver FROM race WHERE Winning_driver NOT IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous') AND Winning_driver IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous') AND Winning_driver IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous') AND Winning_driver IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous') AND Winning_driver IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous') AND Winning_driver
SELECT Constructor, Age FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver; 
SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver; 
SELECT DISTINCT Engine FROM driver WHERE Age > 30 OR Age < 20; 
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT driver.Driver_Name, race.Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID; 
SELECT driver.Driver_Name, race.Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID; 
SELECT Driver_Name, COUNT(*) AS Race_Count FROM driver GROUP BY Driver_Name ORDER BY Race_Count DESC; 
SELECT Driver_ID, COUNT(*) AS Race_Count FROM race GROUP BY Driver_ID 
SELECT age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT driver.Age FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID ORDER BY COUNT(driver.Driver_ID) DESC LIMIT 1)  
SELECT driver.Driver_Name, driver.Age FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN
SELECT driver.Driver_Name, driver.Age FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE
SELECT race.Race_Name FROM race, driver WHERE driver.Age >= 26 AND race.Driver_ID = driver.Driver_ID; 
SELECT DISTINCT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age >= 26); 
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'; 
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'; 
SELECT DISTINCT Constructor, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Constructor 
SELECT Constructor, COUNT(*) AS Count FROM driver GROUP BY Constructor 
SELECT Engine, COUNT(*) AS Count FROM driver GROUP BY Engine ORDER BY Count DESC LIMIT 1 
SELECT DISTINCT Engine FROM driver ORDER BY COUNT(Engine) DESC LIMIT 1;  
SELECT DISTINCT Engine FROM driver WHERE Engine IN (SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) > 1); 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 1)  
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Winning_team = Constructor GROUP BY Constructor HAVING COUNT(*) > 1);  
SELECT DISTINCT Constructor, COUNT(*) AS num_wins FROM race GROUP BY Constructor HAVING COUNT(*) > 1; 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong')); 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver_Name IN (SELECT DISTINCT Driver_Name FROM driver WHERE Driver
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'); 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'); 
SELECT COUNT(*) FROM languages; 
SELECT COUNT(*) FROM languages; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT AVG(c.overall_score) FROM countries c; 
SELECT AVG(c.overall_score) FROM countries c; 
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'; 
SELECT MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE id!= 1; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries); 
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries); 
SELECT countries.name, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id; 
SELECT countries.name, languages.name FROM countries, languages, official_languages WHERE countries.id = official_languages.country_id AND languages.id = official_languages.language_id; 
SELECT l.name, COUNT(*) AS num_countries FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name; 
SELECT languages.name, COUNT(countries.id) AS num_countries FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name 
SELECT l.name FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY ol.language_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1; 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score = (SELECT MAX(overall_score) FROM countries))); 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name HAVING COUNT(c.id) >= 2; 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name IN (SELECT name FROM
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'; 
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id = (SELECT id FROM languages WHERE name = 'English'); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries ORDER BY overall_score DESC LIMIT 3)) ORDER BY name ASC; 
SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_overall_score DESC; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC; 
SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT country_id, COUNT(*) AS num_of_official_languages FROM official_languages GROUP BY country_id ORDER BY num_of_official_languages DESC LIMIT 1; 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) OR country_id IN (SELECT id FROM countries WHERE overall_score < 90)) ORDER BY name ASC; 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) AND country_id IN (SELECT id FROM countries WHERE overall_score < 90)) ORDER BY name ASC; 
SELECT DISTINCT 
SELECT country, town_city FROM Addresses; 
SELECT p.property_id, p.property_name, p.property_address_id, p.property_type_code, p.property_description, p.date_on_market, p.date_off_market, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address_id, p.property_type_code, p.date_on_market, p.date_off_market, p.property_name, p.property_description, p.garage_yn, p.parking_lots, p.room_count, p.vendor_requested_price, p.price_min, p.price_max, p.other_property_details, p.owner_user_id, p.property_address
SELECT DISTINCT  
SELECT feature_name FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE line_1_number_building IN (SELECT line_1_number_building FROM Addresses WHERE line_2_number_street IN (SELECT line_2_number_street FROM Addresses WHERE line_3_area_locality IN (SELECT line_3_area_locality FROM Addresses WHERE town_city IN (SELECT town_city FROM Addresses WHERE zip_postcode IN (SELECT zip_postcode FROM Addresses WHERE county_state_province IN (SELECT county_state_province FROM Addresses WHERE country IN (SELECT country FROM Addresses WHERE other_address_details IN (SELECT other_address_details FROM Addresses WHERE address_id IN (SELECT address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN
SELECT feature_description FROM Features WHERE feature_name = 'rooftop'; 
SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT MIN(room_count) FROM Rooms;  
SELECT MIN(room_count) FROM Rooms;  
SELECT COUNT(*) FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1') AND (parking_lots IS NOT NULL OR garage_yn IS NOT NULL); 
SELECT COUNT(*) FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1') AND (parking_lots IS NOT NULL OR garage_yn IS NOT NULL); 
SELECT age_category_code FROM Users WHERE middle_name LIKE '%Mother%'; 
SELECT age_category_code, age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'; 
SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(owner_user_id) DESC LIMIT 1); 
SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT AVG(room_count) FROM Rooms WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'Garden');  
SELECT AVG(room_count) FROM Rooms r JOIN Property_Features pf ON r.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'Garden' AND r.room_type_code = 'Bedroom';  
SELECT DISTINCT town_city FROM Addresses 
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool'))) 
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties); 
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties); 
SELECT AVG(room_count) FROM Rooms;  
SELECT AVG(room_count) FROM Rooms;  
SELECT COUNT(DISTINCT room_size) FROM Rooms; 
SELECT COUNT(DISTINCT room_size) FROM Rooms; 
SELECT user_id, COUNT(search_seq) AS search_count FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) > 1; 
SELECT user_id, search_seq FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2) ORDER BY user_id ASC, search_seq ASC; 
SELECT MAX(search_datetime) AS latest_search  
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_datetime DESC, search_string DESC; 
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC 
SELECT DISTINCT zip_postcode FROM Addresses WHERE property_id NOT IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (
SELECT zip_postcode FROM Addresses WHERE property_id NOT IN (SELECT property_id FROM User_Property_History GROUP BY property_id HAVING COUNT(property_id) >= 2)  
SELECT user_category_code, user_id FROM Users, User_Searches WHERE user_id = user_id AND search_seq = 1;  
SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1); 
SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1); 
SELECT age_category_code FROM Users, User_Searches WHERE Users.user_id = User_Searches.user_id AND User_Searches.search_datetime = (SELECT MIN(User_Searches.search_datetime) FROM User_Searches); 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name; 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name; 
SELECT COUNT(*) FROM User_Searches WHERE is_buyer = 'Y';  
SELECT COUNT(*) FROM User_Searches WHERE is_buyer = 'Y';  
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'  
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE user_category_code = 'Senior Citizen' AND is_buyer = 'Y' AND is_seller = 'N' AND age_category_code = 'Senior Citizen' AND user_address_id = user_id AND user_id = owner_user_id AND property_type_code = 'House' AND room_count = '1' AND room_type_code = 'Bedroom' AND room_size = '1' AND feature_id = '1' AND feature_value = '1' AND photo_seq = '1' AND photo_title = '1' AND photo_description = '1' AND photo_filename = '1' AND property_name = '1' AND property_description = '1' AND garage_yn = '1' AND parking_lots = '1' AND vendor_requested_price = '1' AND price_min = '1' AND price_max = '1' AND other_property_details = '1' AND other_address_details = '1' AND other_user_details = '1' AND date_registered = '1' AND first_name = '1' AND middle_name = '1' AND last_name = '1' AND login_name = '1' AND password = '1' AND date_on_market = '1' AND date_off_market = '1' AND search_string = '1' AND search_datetime = '1' AND search_seq = '1' AND datestamp = '1' AND other_room_details = '1' AND property_feature_description = '1' AND feature_description = '1' AND age_category_description = '1' AND property_type_description = '1' AND room_type_description = '1' AND user_category_description = '1' AND feature_name = '1' AND other_feature_details = '1' AND feature_value = '1' AND feature_description = '1' AND photo_title = '1' AND photo_description = '1' AND photo_filename = '1' AND property_name = '1' AND property_description = '1' AND garage_yn = '1' AND parking_lots = '1' AND vendor_requested_price = '1' AND price_min = '1' AND price_max = '1' AND other_property_details = '1' AND other_address_details = '1' AND other_user_details = '1' AND date_registered = '1' AND
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE age_category_code = 'Senior Citizen'  
SELECT COUNT(*) FROM Properties p 
SELECT COUNT(*) FROM Properties p 
SELECT property_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY property_id; 
SELECT property_id, COUNT(*) AS num_photos FROM Property_Photos GROUP BY property_id; 
SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS num_photos FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id 
SELECT user_id, COUNT(*) AS num_photos FROM Property_Photos GROUP BY user_id; 
SELECT SUM(price_max) FROM Properties 
SELECT MAX(vendor_requested_price) FROM Properties p 
SELECT datestamp, property_name FROM User_Property_History, Properties WHERE User_Property_History.property_id = Properties.property_id ORDER BY datestamp; 
SELECT datestamp, property_name FROM User_Property_History ORDER BY datestamp ASC; 
SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT DISTINCT room_size, COUNT(room_size) AS room_count FROM Rooms GROUP BY room_size 
SELECT room_size, COUNT(room_size) AS room_count FROM Rooms GROUP BY room_size 
SELECT country FROM Addresses 
SELECT country FROM Addresses 
SELECT first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id
SELECT CONCAT(first_name,'', middle_name,'', last_name) AS full_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Addresses ON Properties.property_address_id = Addresses.address_id WHERE Users.user_id = Properties.owner_user_id AND Addresses.address_id = Properties.property_address_id 
SELECT * FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM User_Property_History GROUP BY user_id HAVING COUNT(*) = 1); 
SELECT DISTINCT search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM User_Property_History)  
SELECT last_name, user_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History GROUP BY user_id HAVING COUNT(*) >= 2) AND user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) ORDER BY last_name ASC; 
SELECT Users.last_name, Users.user_id  
SELECT COUNT(*) FROM bike WHERE weight > 780; 
SELECT bike.product_name, bike.weight FROM bike ORDER BY bike.price ASC; 
SELECT heat, name, nation FROM cyclist; 
SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike; 
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'; 
SELECT cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation!= 'Russia' ORDER BY cyclist.result DESC; 
SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015; 
SELECT bike.id, bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(cyclists_own_bikes.cyclist_id) >= 4; 
SELECT cyclist.id, cyclist.name FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id JOIN bike ON cyclists_own_bikes.bike_id = bike.id GROUP BY cyclist.id ORDER BY COUNT(bike.id) DESC LIMIT 1; 
SELECT DISTINCT product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE nation = 'Russia' OR nation = 'Great Britain'; 
SELECT DISTINCT heat FROM cyclist; 
SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015); 
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result > '4:21.558' AND bike.material = 'racing'; 
SELECT bike.product_name, bike.price FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') AND cyclists_own_bikes.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler')  
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike')); 
SELECT product_name FROM bike WHERE material LIKE '%fiber%'; 
SELECT cyclist_id, COUNT(*) AS num_bikes FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id 
SELECT goods.Flavor, goods.Price FROM goods WHERE goods.Flavor = 'cake' AND goods.Price = (SELECT MAX(goods.Price) FROM goods WHERE goods.Flavor = 'cake')  
SELECT goods.Id, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE items.Item = 'cake' AND goods.Price = (SELECT MAX(goods.Price) FROM goods JOIN items ON goods.Id = items.Item WHERE items.Item = 'cake'); 
SELECT goods.Flavor, goods.Price FROM goods WHERE goods.Price = (SELECT MIN(goods.Price) FROM goods); 
SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'Cookie' AND goods.Price = (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'Cookie')  
SELECT goods.Id FROM goods WHERE goods.Flavor = 'apple'; 
SELECT Id FROM goods WHERE Flavor = 'apple'; 
SELECT goods.Id FROM goods WHERE goods.Price < 3.0 
SELECT goods.Id FROM goods WHERE goods.Price < 3.0; 
SELECT DISTINCT customers.Id FROM customers, items, goods WHERE customers.Id = receipts.CustomerId AND items.Receipt = receipts.ReceiptNumber AND items.Item = goods.Id AND goods.Flavor = 'lemon' AND goods.Food = 'cake' ORDER BY customers.Id ASC;  
SELECT DISTINCT customers.Id FROM customers, receipts, items WHERE customers.Id = receipts.CustomerId AND items.Item = 'lemon cake' AND items.Receipt = receipts.ReceiptNumber; 
SELECT COUNT(DISTINCT customers.Id) AS Count, goods.Food AS Food FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY goods.Food 
SELECT customers.FirstName, customers.LastName, goods.Food, COUNT(*) AS Count FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY customers.FirstName, customers.LastName, goods.Food 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT LastName FROM customers WHERE Receipts > 10;  
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) > 10)) 
SELECT COUNT(DISTINCT Item) FROM items WHERE Item LIKE 'Cake%'; 
SELECT COUNT(DISTINCT goods.Flavor) FROM goods WHERE goods.Food = 'cake'; 
SELECT DISTINCT goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE items.Item = 'Croissant'; 
SELECT DISTINCT goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE items.Item = 'croissant'; 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT  AVG(goods.Price) AS avg_price, MAX(goods.Price) AS max_price, MIN(goods.Price) AS min_price FROM goods GROUP BY goods.Food; 
SELECT food, AVG(price), MIN(price), MAX(price) FROM goods GROUP BY food; 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN ('Cake', 'Cookie')); 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND EXISTS (SELECT * FROM items WHERE ReceiptNumber = receipts.ReceiptNumber AND Item = 'Croissant'); 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND EXISTS (SELECT * FROM items WHERE ReceiptNumber = receipts.ReceiptNumber AND Item = 'croissant'); 
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price = (SELECT MAX(Price) FROM goods))); 
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1; 
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count ASC LIMIT 1 
SELECT COUNT(goods.Id) AS goods_count, goods.Food FROM goods GROUP BY goods.Food; 
SELECT COUNT(goods.Id) AS Count, goods.Food FROM goods GROUP BY goods.Food; 
SELECT food, AVG(price) FROM goods GROUP BY food; 
SELECT AVG(goods.Price) AS AveragePrice, goods.Food FROM goods GROUP BY goods.Food 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5.0 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5.0 
SELECT goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE items.Item = 'Cake' AND goods.Price > 10.0 
SELECT DISTINCT goods.Flavor FROM goods WHERE goods.Price > 10.0 
SELECT goods.Id, goods.Price FROM goods WHERE goods.Price < (SELECT AVG(goods.Price) FROM goods); 
SELECT DISTINCT goods.Id, goods.Price  
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT goods.Price FROM goods WHERE goods.Flavor = 'Tart'); 
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT MIN(goods.Price) FROM goods WHERE goods.Flavor = 'Tart'); 
SELECT DISTINCT ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13.0 
SELECT DISTINCT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John' AND LastName = 'Doe') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13)) 
SELECT receipts.Date  
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id
SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'; 
SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'; 
SELECT * FROM goods WHERE Id LIKE '%70%' AND Price = (SELECT Price FROM goods WHERE Id LIKE '%70%'); 
SELECT goods.Id, goods.Price FROM goods WHERE goods.Id LIKE '%70%'; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT Item FROM items ORDER BY Item; 
SELECT DISTINCT Item FROM items ORDER BY Item ASC; 
SELECT * FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR CustomerId = 12); 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR CustomerId = 12) 
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts WHERE receipts.Date = (SELECT MAX(receipts.Date) FROM receipts); 
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1; 
SELECT * FROM receipts WHERE receipts.ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price > 10) OR receipts.ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts)); 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR Price > 10)  
SELECT goods.Id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food IN ('Cookie', 'Cake'); 
SELECT goods.Id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food IN ('Cookies', 'Cakes'); 
SELECT customers.FirstName, customers.LastName FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts)  
SELECT customers.FirstName ||'' || customers.LastName AS FullName, receipts.Date  
SELECT AVG(goods.Price) FROM goods WHERE goods.Flavor = 'blackberry' OR goods.Flavor = 'blueberry'; 
SELECT AVG(goods.Price) FROM goods WHERE goods.Flavor IN ('blackberry', 'blueberry'); 
SELECT MIN(goods.Price) FROM goods WHERE goods.Flavor = 'cheese'; 
SELECT goods.Id, goods.Price FROM goods WHERE goods.Flavor = 'cheese' AND goods.Price = (SELECT MIN(goods.Price) FROM goods WHERE goods.Flavor = 'cheese')  
SELECT  FROM  GROUP BY  ORDER BY  
SELECT   
SELECT MIN(goods.Price), MAX(goods.Price) FROM goods GROUP BY goods.Food ORDER BY goods.Food ASC; 
SELECT MIN(goods.Price), MAX(goods.Price) FROM goods WHERE goods.Food IS NOT NULL ORDER BY goods.Food; 
SELECT Date, COUNT(*) AS Count FROM receipts GROUP BY Date ORDER BY Count DESC LIMIT 3; 
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT c.LastName, c.FirstName, COUNT(*) AS Count FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.LastName, c.FirstName ORDER BY Count DESC LIMIT 1 
SELECT customers.Id, COUNT(receipts.ReceiptNumber) AS num_purchases FROM receipts JOIN customers ON receipts.CustomerId = customers.Id GROUP BY customers.Id ORDER BY num_purchases DESC LIMIT 1 
SELECT Date, COUNT(DISTINCT CustomerId) AS Count FROM receipts GROUP BY Date 
SELECT Date, COUNT(*) AS Count FROM receipts GROUP BY Date 
SELECT customers.FirstName, customers.LastName FROM customers, items, goods WHERE customers.Id = receipts.CustomerId AND items.Receipt = receipts.ReceiptNumber AND items.Item = goods.Id AND goods.Flavor = 'apple' AND goods.Food = 'Tart' ORDER BY customers.LastName ASC, customers.FirstName ASC LIMIT 1;  
SELECT CONCAT(c.FirstName,'', c.LastName) AS FullName  
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Cookies' AND goods.Price < (SELECT goods.Price FROM goods WHERE goods.Flavor = 'Croissant'); 
SELECT goods.Id FROM goods WHERE goods.Food = 'cookie' AND goods.Price < (SELECT goods.Price FROM goods WHERE goods.Food = 'croissant'); 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Cake' AND goods.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Flavor = 'Tart'); 
SELECT goods.Id FROM goods WHERE goods.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Tart') AND goods.Food = 'Cake'; 
SELECT goods.Id FROM goods WHERE goods.Price > (SELECT AVG(goods.Price) FROM goods); 
SELECT goods.Id FROM goods WHERE goods.Price > (SELECT AVG(goods.Price) FROM goods); 
SELECT goods.Id, goods.Flavor, goods.Food FROM goods, items WHERE items.Item = goods.Id ORDER BY goods.Price DESC; 
SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price; 
SELECT items.Item, goods.Flavor FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' ORDER BY goods.Flavor; 
SELECT goods.Id, goods.Flavor FROM items INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' ORDER BY goods.Flavor ASC; 
SELECT * FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') AND Receipt IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) <= 10)); 
SELECT Item FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') AND Receipt IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) <= 10) 
SELECT DISTINCT goods.Flavor FROM goods WHERE goods.Flavor NOT IN (SELECT goods.Flavor FROM goods WHERE goods.Flavor = 'Tart')  
SELECT DISTINCT goods.Flavor FROM goods WHERE goods.Food = 'Cake' AND goods.Id NOT IN (SELECT items.Item FROM items WHERE items.Item = 'Tart'); 
SELECT goods.Flavor, goods.Food, COUNT(*) AS Count FROM items INNER JOIN goods ON items.Item = goods.Id GROUP BY goods.Flavor, goods.Food ORDER BY Count DESC LIMIT 3 
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count DESC LIMIT 3; 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE SUM(Price) > 100);  
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT 
SELECT COUNT(Driver_ID) FROM driver; 
SELECT COUNT(Driver_ID) FROM driver; 
SELECT COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT make, COUNT(*) AS count FROM driver WHERE Points > 150 GROUP BY make; 
SELECT make, AVG(age) FROM driver GROUP BY make; 
SELECT AVG(Driver.Age) AS Average_Age, Driver.Make FROM driver GROUP BY Driver.Make 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT team_manager, team_sponsor FROM team ORDER BY team_car_owner;  
SELECT team_manager, team_sponsor, team_car_owner FROM team_driver  
SELECT DISTINCT Make FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1); 
SELECT DISTINCT Make FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1); 
SELECT DISTINCT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT MAX(Points) AS Max_Points, MIN(Points) AS Min_Points FROM driver; 
SELECT MAX(Points) AS Highest_Points, MIN(Points) AS Lowest_Points FROM driver; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id; 
SELECT driver.Driver, country.Country FROM driver INNER JOIN country ON driver.Country = country.Country_Id 
SELECT MAX(Driver.Points) FROM driver, country WHERE Driver.Country = Country.Country_Id AND Country.Capital = 'Dublin'; 
SELECT MAX(Driver.Points) FROM driver as Driver, country as Country WHERE Driver.Country = Country.Country_Id AND Country.Capital = 'Dublin'; 
SELECT AVG(Driver.Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'; 
SELECT AVG(Driver.Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'; 
SELECT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150; 
SELECT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150; 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM driver WHERE Points = (SELECT MAX(Points) FROM driver))); 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM team_driver WHERE Team_ID = (SELECT Team_ID FROM team WHERE Team = (SELECT Team FROM team_driver WHERE Driver_ID = (SELECT Driver_ID FROM driver WHERE Points = (SELECT MAX(Points) FROM driver)))))); 
SELECT Make, COUNT(Driver_ID) AS Driver_Count FROM driver GROUP BY Make; 
SELECT make, COUNT(Driver_ID) FROM driver GROUP BY make; 
SELECT DISTINCT Make FROM driver ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1;  
SELECT make FROM driver GROUP BY make ORDER BY COUNT(make) DESC LIMIT 1; 
SELECT DISTINCT driver.Make 
SELECT DISTINCT Make FROM driver WHERE Make IN (SELECT DISTINCT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Make) >= 3); 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT country.Country FROM country 
SELECT DISTINCT country.Country FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN team ON team_driver.Team_ID = team.Team_ID WHERE driver.Make = 'Dodge' AND team.Make = 'Chevrolet'  
SELECT SUM(Points) AS TotalPoints, AVG(Points) AS AveragePoints FROM driver; 
SELECT SUM(Driver.Points) AS TotalPoints, AVG(Driver.Points) AS AveragePoints FROM driver; 
SELECT DISTINCT country.Country FROM country LEFT JOIN driver ON country.Country_Id = driver.Country WHERE driver.Driver_ID IS NULL; 
SELECT DISTINCT country.Country  
SELECT team_manager, team_sponsor FROM team_driver INNER JOIN team ON team_driver.team_id = team.team_id INNER JOIN driver ON team_driver.driver_id = driver.driver_id WHERE driver.driver_id IN (SELECT driver_id FROM team_driver GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM team_driver GROUP BY driver_id)) ORDER BY team_driver.team_id ASC; 
SELECT team_manager, team_sponsor FROM team WHERE team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM team_driver));  
SELECT team_manager, team_car_owner FROM team_driver WHERE team_driver.team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(*) >= 2)  
SELECT team.Manager, team.Car_Owner FROM team_driver INNER JOIN team ON team_driver.Team_ID = team.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE driver.Driver_ID = 1 
SELECT COUNT(*) FROM institution; 
SELECT COUNT(*) FROM institution; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT City, Province FROM institution; 
SELECT City, Province FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT affiliation FROM institution WHERE city!= 'Vancouver'; 
SELECT affiliation FROM institution WHERE city!= 'Vancouver'; 
SELECT Stadium FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID; 
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution)); 
SELECT nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution)); 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC;  
SELECT Name FROM institution ORDER BY Number_of_Championships DESC;  
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public';  
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public';  
SELECT affiliation, COUNT(*) AS num_institutions FROM institution GROUP BY affiliation 
SELECT affiliation, COUNT(*) AS num_institutions FROM institution GROUP BY affiliation 
SELECT affiliation, COUNT(*) AS count FROM institution GROUP BY affiliation ORDER BY count DESC LIMIT 1 
SELECT affiliation, COUNT(*) AS count FROM institution GROUP BY affiliation ORDER BY count DESC LIMIT 1 
SELECT DISTINCT  
SELECT DISTINCT Founded FROM institution WHERE Founded IN (SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1) ORDER BY Founded ASC; 
SELECT Championship.Nickname FROM Championship ORDER BY Capacity DESC;  
SELECT Championship.Nickname FROM Championship ORDER BY Capacity DESC; 
SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 OR Founded > 1950; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND Founded > 1950; 
SELECT DISTINCT Province FROM institution; 
SELECT COUNT(DISTINCT Province) FROM institution; 
SELECT * FROM Warehouses; 
SELECT * FROM Warehouses; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT Contents FROM Boxes WHERE Value > 150.0 
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Value) AS AverageValue, SUM(Value) AS TotalValue FROM Boxes; 
SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses 
SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses 
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT Contents FROM Boxes WHERE Code IN (SELECT Code FROM Boxes GROUP BY Code HAVING SUM(Value) = (SELECT MAX(SUM(Value)) FROM Boxes GROUP BY Code));  
SELECT Contents, MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT AVG(Value) FROM Boxes; 
SELECT AVG(Value) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York')  
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN ('Chicago', 'New York'))  
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT DISTINCT Boxes.Contents FROM Boxes, Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York' AND Boxes.Warehouse = Warehouses.Code; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') AND Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Code NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') AND Contents NOT IN (SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Code FROM Boxes WHERE Contents = 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Code FROM Boxes WHERE Contents = 'Scissors')); 
SELECT * FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT DISTINCT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value; 
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value; 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes); 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents; 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC; 
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT Value FROM Boxes WHERE Boxes.Contents = 'Rocks')  
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT Value FROM Boxes WHERE Boxes.Contents = 'Rocks')  
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT Boxes.Value FROM Boxes WHERE Boxes.Contents = 'Scissors') AND Boxes.Contents!= 'Scissors'  
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT Value FROM Boxes WHERE Boxes.Contents = 'Scissors') AND Boxes.Contents!= 'Scissors' ORDER BY Boxes.Value DESC; 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); 
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150; 
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents; 
SELECT Contents, SUM(Value), COUNT(Code) FROM Boxes GROUP BY Contents; 
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location 
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT Warehouses.Location, MAX(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location; 
SELECT Warehouses.Location, MAX(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location; 
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code 
SELECT COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'); 
SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code 
SELECT Boxes.Code, Warehouses.Location FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code 
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse = (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago'); 
SELECT Boxes.Code FROM Warehouses, Boxes WHERE Warehouses.Location = 'Chicago' AND Warehouses.Code = Boxes.Warehouse; 
SELECT Warehouse, COUNT(*) AS Boxes FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(*) AS BoxesCount FROM Boxes GROUP BY Warehouse; 
SELECT DISTINCT Warehouses.Location, Boxes.Contents FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse; 
SELECT Warehouse, COUNT(DISTINCT Contents) AS ContentsCount FROM Boxes GROUP BY Warehouse 
SELECT Code FROM Warehouses WHERE Capacity > (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code); 
SELECT Warehouses.Code FROM Warehouses 
SELECT SUM(Value) FROM Boxes WHERE Code NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university; 
SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university; 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT DISTINCT Home_Conference FROM university; 
SELECT DISTINCT Home_Conference FROM university; 
SELECT Home_Conference, COUNT(University_ID) AS num_universities FROM university GROUP BY Home_Conference 
SELECT COUNT(DISTINCT University_ID) AS num_universities, Home_Conference FROM university WHERE Home_Conference IS NOT NULL GROUP BY Home_Conference 
SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1; 
SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000 
SELECT Home_Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1 
SELECT Home_Conference, COUNT(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT major.Major_Name, major_ranking.Rank FROM major INNER JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE major.Major_Name = 'Augustana College' ORDER BY major_ranking.Rank ASC; 
SELECT major_ranking.Rank, major.Major_Name FROM major_ranking JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major_ranking.University_ID = 1; 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name, City, State FROM major_ranking INNER JOIN university ON major_ranking.University_ID = university.University_ID WHERE major_ranking.Rank = 1 AND major_ranking.Major_ID = 1; 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM major_ranking WHERE Rank = 1));  
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM major_ranking WHERE Rank = 1));  
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') OR Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')); 
SELECT University_Name, Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin' ORDER BY Rank ASC; 
SELECT University_Name, Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin' ORDER BY Rank ASC; 
SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking WHERE Rank = 1 ORDER BY Research_point DESC LIMIT 1); 
SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking WHERE Research_point = (SELECT MAX(Research_point) FROM overall_ranking)); 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university ORDER BY Reputation_point ASC;  
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3); 
SELECT University_Name FROM university 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT University_Name, Citation_point FROM overall_ranking WHERE Rank <= 3 AND Reputation_point > 0 ORDER BY Reputation_point DESC;  
SELECT University_Name, Citation_point FROM overall_ranking WHERE Rank <= 3 ORDER BY Reputation_point DESC;  
SELECT DISTINCT State FROM university WHERE University_ID IN (SELECT University_ID FROM university WHERE Enrollment < 3000 GROUP BY University_ID HAVING COUNT(University_ID) > 1) ORDER BY State ASC; 
SELECT DISTINCT State FROM university WHERE University_ID IN (SELECT University_ID FROM university WHERE Enrollment < 3000 GROUP BY University_ID HAVING COUNT(University_ID) > 2) ORDER BY State ASC; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie 
SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'PG-13' AND Code IN (SELECT Movie FROM MovieTheaters); 
SELECT COUNT(*) FROM MovieTheaters; 
SELECT COUNT(DISTINCT Movies.Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie; 
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters; 
SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters; 
SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial')); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') AND Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial'); 
SELECT Title FROM Movies 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Rating DESC; 
SELECT Title FROM Movies ORDER BY Rating DESC; 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1); 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Rating, COUNT(*) AS Count FROM Movies GROUP BY Rating; 
SELECT Rating, COUNT(*) AS Count FROM Movies GROUP BY Rating; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G'); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G'); 
SELECT Title FROM Movies; 
SELECT Title FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Client.Name, Package.Weight FROM Package, Client WHERE Package.Recipient = Client.AccountNumber ORDER BY Package.Weight DESC LIMIT 1; 
SELECT Client.Name FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package); 
SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth'); 
SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician') AND Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Earth') AND Level = 3 
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')  
SELECT * FROM Package WHERE Sender = 1 OR Recipient = 1; 
SELECT DISTINCT Package.PackageNumber 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb'); 
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb')  
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT Package.PackageNumber FROM Package WHERE Package
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package.PackageNumber IN (SELECT PackageNumber FROM Package WHERE Package
SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC LIMIT 3; 
SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC LIMIT 3; 
SELECT Client.Name, COUNT(*) AS NumberOfPackages FROM Package GROUP BY Client.Name ORDER BY NumberOfPackages DESC LIMIT 1 
SELECT Client.Name, COUNT(*) AS NumberOfPackages FROM Package GROUP BY Client.Name ORDER BY NumberOfPackages DESC LIMIT 1; 
SELECT Client.Name, COUNT(*) AS NumPackages  
SELECT COUNT(*) AS NumberOfPackages, Client.Name AS RecipientName FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client) GROUP BY Recipient ORDER BY NumberOfPackages DESC LIMIT 1; 
SELECT Client.Name FROM Package WHERE Package.Recipient IN (SELECT Client.AccountNumber FROM Client) GROUP BY Client.Name HAVING COUNT(Package.Recipient) > 1 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1); 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC; 
SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC; 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry'); 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry'); 
SELECT Date FROM Shipment; 
SELECT Shipment.Date FROM Shipment; 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') 
SELECT ShipmentID FROM Shipment WHERE PlanetID = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') 
SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS TotalShipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name 
SELECT Planet.Name, COUNT(*) AS ShipmentCount FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Employee.Name, COUNT(Shipment.ShipmentID) AS ShipmentCount FROM Employee INNER JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Name 
SELECT COUNT(Shipment.ShipmentID) AS NumberOfShipments, Employee.Name AS ManagerName FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Shipment.Manager 
SELECT SUM(Weight) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT SUM(Weight) FROM Package WHERE Recipient IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name 
SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment WHERE ShipmentID IN (SELECT ShipmentID FROM Package WHERE Weight > 30)); 
SELECT Planet.Name FROM Planet WHERE Planet.Name IN (SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Package.Weight > 30) 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')  
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')); 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'))  
SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') OR Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'); 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = 2) 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = 2) 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = 3) 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III')); 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(*) = 1); 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet IN
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT COUNT(*) FROM Employee 
SELECT COUNT(*) FROM Employee 
SELECT COUNT(*) FROM game; 
SELECT COUNT(*) FROM game; 
SELECT game.Title, game.Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT game.Title, game.Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT AVG(game.Units_sold_Millions) FROM game WHERE game.Developers!= 'Nintendo'; 
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers!= 'Nintendo'; 
SELECT platform_name, market_district FROM platform 
SELECT platform_name, market_district FROM platform; 
SELECT platform_name, platform_id FROM platform WHERE download_rank = 1; 
SELECT platform_name, platform_id FROM platform WHERE download_rank = 1; 
SELECT MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3; 
SELECT player_name FROM player ORDER BY player_name ASC; 
SELECT player_name FROM player ORDER BY player_name ASC; 
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC; 
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC; 
SELECT player_name, rank_of_the_year FROM player, game_player, game WHERE game.title = 'Super Mario World' AND game_player.game_id = game.game_id AND game_player.player_id = player.player_id; 
SELECT player_name, rank_of_the_year FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE game_player.Game_ID = (SELECT Game_ID FROM game WHERE Title = 'Super Mario World') AND game_player.If_active = 1; 
SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')); 
SELECT DISTINCT Developers FROM game WHERE College = 'Auburn' AND Developers IS NOT NULL; 
SELECT AVG(game_units_sold_millions) FROM (  
SELECT AVG(game_units_sold_millions) FROM game_player JOIN game ON game_player.game_id = game.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard';  
SELECT game.Title, platform.Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID; 
SELECT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID; 
SELECT game.Title FROM game, platform WHERE platform.Platform_ID = game.Platform_ID AND platform.Market_district = 'Asia' OR platform.Market_district = 'USA'; 
SELECT game.Title FROM game WHERE game.Platform_ID IN (SELECT Platform_ID FROM platform WHERE platform.Market_district = 'Asia' OR platform.Market_district = 'USA')  
SELECT franchise, COUNT(*) AS num_games FROM game GROUP BY franchise; 
SELECT COUNT(DISTINCT Game_ID) AS num_games, Franchise FROM game GROUP BY Franchise; 
SELECT DISTINCT franchise FROM game ORDER BY COUNT(*) DESC LIMIT 1;  
SELECT franchise, COUNT(*) AS num_games FROM game GROUP BY franchise ORDER BY num_games DESC LIMIT 1; 
SELECT DISTINCT franchise FROM game WHERE game_id IN (SELECT game_id FROM game WHERE franchise IS NOT NULL GROUP BY franchise HAVING COUNT(*) >= 2); 
SELECT DISTINCT franchise FROM game WHERE game_id IN (SELECT game_id FROM game WHERE game_id IN (SELECT game_id FROM game GROUP BY game_id HAVING COUNT(game_id) > 1)); 
SELECT player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT title FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Oklahoma') AND game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Auburn'))); 
SELECT game.Title FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE player.College = 'Oklahoma' OR player.College = 'Auburn'  
SELECT DISTINCT franchise FROM game; 
SELECT DISTINCT franchise FROM game; 
SELECT title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT game.Title FROM game WHERE game.Title NOT IN (SELECT game_player.Game_ID FROM game_player WHERE game_player.Player_ID IN (SELECT player.Player_ID FROM player WHERE player.Position = 'Guard') AND game_player.If_active = 1)  
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT AVG(Year_Profits_billion) AS avg_profit, MAX(Year_Profits_billion) AS max_profit FROM press 
SELECT press.Name, AVG(press.Year_Profits_billion), MAX(press.Year_Profits_billion) FROM press GROUP BY press.Name; 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT AVG(Age) AS Average_Age, Gender FROM author GROUP BY Gender; 
SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender; 
SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Book_Series, COUNT(*) AS Book_Count FROM book GROUP BY Book_Series; 
SELECT Book_Series, COUNT(*) AS Book_Count FROM book GROUP BY Book_Series; 
SELECT book.Title, book.Release_date  
SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book) LIMIT 5; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 AND Sale_Amount < 500; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 OR Sale_Amount < 500; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series IN ('MM', 'LT')); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series IN ('MM', 'LT')); 
SELECT author.Name, author.Age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL; 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Author_ID) > 1); 
SELECT book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3; 
SELECT book.Title, author.Name, press.Name 
SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sale_Amount FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Name; 
SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sale_Amount FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Name 
SELECT press.Name, COUNT(*) AS Book_Sold FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Name HAVING COUNT(*) > 1000; 
SELECT press.Name, COUNT(*) AS num_books FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))); 
SELECT author.Name FROM author WHERE author.Name = 'J.K. Rowling' AND author.Age = 57 AND author.Gender = 'Female' AND author.Author_ID = 1 AND author.Name = 'J.K. Rowling' AND author.Age = 57 AND author.Gender = 'Female' AND author.Author_ID = 1 AND author.Name = 'J.K. Rowling' AND author.Age = 57 AND author.Gender = 'Female' AND author.Author_ID = 1 AND author.Name = 'J.K. Rowling' AND author.Age = 57 AND author.Gender = 'Female' AND author.Author_ID = 1 AND author.Name = 'J.K. Rowling' AND author.Age = 57 AND author.Gender = 'Female' AND author.Author_ID = 1 AND author.Name = 'J.K. Rowling' AND author.Age = 57 AND author.Gender = 'Female' AND author.Author_ID = 1 AND author.Name = 'J.K. Rowling'
SELECT author.Name, author.Gender FROM author INNER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book)  
SELECT author.Name, author.Gender  
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT press.Name, press.Year_Profits_billion  
SELECT press.Name, press.Year_Profits_billion  
SELECT COUNT(DISTINCT author_name) FROM Authors; 
SELECT author_name FROM Authors; 
SELECT author_name, other_details FROM Authors; 
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'; 
SELECT COUNT(*) FROM Documents; 
SELECT author_name FROM Documents WHERE document_id = 4; 
SELECT author_name FROM Documents JOIN Authors ON Documents.author_name = Authors.author_name WHERE document_name = 'Travel to Brazil';  
SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'; 
SELECT document_name, document_description FROM Documents; 
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'; 
SELECT author_name, other_details FROM Documents JOIN Authors ON Documents.author_name = Authors.author_name WHERE document_name = 'Travel to China'  
SELECT author_name, COUNT(*) AS num_documents FROM Documents GROUP BY author_name; 
SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT author_name FROM Authors 
SELECT COUNT(*) FROM Business_Processes; 
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9; 
SELECT process_name FROM Business_Processes WHERE process_id = 9; 
SELECT COUNT(DISTINCT process_outcome_code) FROM Documents_Processes; 
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes; 
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'; 
SELECT COUNT(*) FROM Process_Status; 
SELECT process_status_code, process_status_description FROM Process_Status; 
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'; 
SELECT COUNT(*) FROM Staff; 
SELECT staff_id, staff_details FROM Staff; 
SELECT staff_details FROM Staff WHERE staff_id = 100; 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes 
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles; 
SELECT Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles WHERE Ref_Staff_Roles.staff_role_code = 'HR'; 
SELECT COUNT(*) FROM Documents_Processes; 
SELECT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents); 
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes); 
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes); 
SELECT Process_Outcomes.process_outcome_description, Process_Status.process_status_description FROM Documents_Processes JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE Documents_Processes.document_id = 0; 
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil')); 
SELECT process_id, COUNT(document_id) AS num_documents FROM Documents_Processes GROUP BY process_id; 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9; 
SELECT staff_id, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_id; 
SELECT staff_role_code, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_role_code; 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3; 
SELECT COUNT(DISTINCT agency_id) FROM Agencies; 
SELECT COUNT(DISTINCT agency_id) FROM Agencies; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT COUNT(DISTINCT client_id) FROM Clients; 
SELECT COUNT(DISTINCT client_id) FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id; 
SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(agency_id) DESC LIMIT 1); 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2); 
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac'); 
SELECT agency_details FROM Agencies 
SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id; 
SELECT Clients.client_details, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id 
SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code; 
SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code; 
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'; 
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT COUNT(*) FROM Invoices; 
SELECT COUNT(*) FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT client_id, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY client_id; 
SELECT client_id, COUNT(*) AS invoice_count FROM Invoices GROUP BY client_id; 
SELECT client_id, client_details FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY client_id ORDER BY COUNT(client_id) DESC LIMIT 1; 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT client_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2); 
SELECT client_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2); 
SELECT invoice_status, COUNT(*) AS num_invoices FROM Invoices GROUP BY invoice_status; 
SELECT invoice_status, COUNT(*) AS invoice_count FROM Invoices GROUP BY invoice_status; 
SELECT invoice_status, COUNT(*) AS invoice_count FROM Invoices GROUP BY invoice_status ORDER BY invoice_count DESC LIMIT 1; 
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id 
SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id 
SELECT meeting_type, purpose_of_meeting FROM Meetings; 
SELECT meeting_type, purpose_of_meeting FROM Meetings; 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings; 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings; 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')  
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')  
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT payment_id FROM Payments); 
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT payment_id FROM Payments); 
SELECT COUNT(*) FROM Payments; 
SELECT COUNT(*) FROM Payments; 
SELECT Payments.payment_id, Payments.invoice_id, Payments.payment_details  
SELECT payment_id, invoice_id, payment_details FROM Payments; 
SELECT DISTINCT invoice_id, invoice_status FROM Payments;  
SELECT DISTINCT invoice_id, invoice_status FROM Payments;  
SELECT invoice_id, COUNT(payment_id) AS num_payments FROM Payments GROUP BY invoice_id; 
SELECT COUNT(*) AS payment_count, invoice_id FROM Payments GROUP BY invoice_id; 
SELECT invoice_id, invoice_status, invoice_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id GROUP BY invoice_id ORDER BY COUNT(Payments.payment_id) DESC LIMIT 1; 
SELECT invoice_id, invoice_status, invoice_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id GROUP BY invoice_id ORDER BY COUNT(Payments.payment_id) DESC LIMIT 1; 
SELECT COUNT(*) FROM Staff 
SELECT COUNT(*) FROM Staff; 
SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS num_staff FROM Agencies INNER JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id 
SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS num_staff FROM Agencies INNER JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1); 
SELECT Agencies.agency_id, Agencies.agency_details  
SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome; 
SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome; 
SELECT client_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY client_id; 
SELECT client_id, COUNT(*) AS meeting_count FROM Meetings GROUP BY client_id 
SELECT meeting_type, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_type; 
SELECT meeting_type, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_type 
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id; 
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings; 
SELECT meeting_id, COUNT(*) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id; 
SELECT meeting_id, COUNT(staff_id) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id; 
SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(num_meetings) FROM (SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS t1); 
SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings GROUP BY staff_id);  
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings; 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings; 
SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.meeting_id IS NULL;  
SELECT COUNT(*) FROM Staff s 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn = 'Y' AND meeting_outcome = 'S' AND meeting_type = 'S' AND start_date_time >= '2019-01-01' AND end_date_time <= '2019-12-31' AND purpose_of_meeting LIKE '%s%'))))  
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn = 'Y' AND meeting_outcome = 'Success' AND meeting_type = 'Client Meeting' AND start_date_time >= '2019-01-01' AND end_date_time <= '2019-12-31' AND purpose_of_meeting LIKE '%S%')))) AND staff_details LIKE '%s%';  
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies
SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id 
SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id 
