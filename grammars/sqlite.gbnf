sql_stmt_list ::= [ sql_stmt ] ( ';' [ sql_stmt ] ) *
sql_stmt ::= [ EXPLAIN [ QUERY PLAN ] ] select_stmt

select_stmt ::= [ WITH [ RECURSIVE ] common_table_expression ( ',' common_table_expression ) * ] 
                select_core 
                ( compound_operator select_core ) * 
                [ ORDER BY ordering_term ( ',' ordering_term ) * ] 
                [ LIMIT expr [ ( OFFSET | ',' ) expr ] ]

common_table_expression ::= table_name [ '(' column_name ( ',' column_name ) * ')' ] AS '(' select_stmt ')'

select_core ::= ( SELECT [ DISTINCT | ALL ] result_column ( ',' result_column ) * 
                [ FROM ( table_or_subquery ( ',' table_or_subquery ) * | join_clause ) ] 
                [ WHERE expr ] 
                [ GROUP BY expr ( ',' expr ) * [ HAVING expr ] ]
                | VALUES '(' expr ( ',' expr ) * ')' 
                ( ',' '(' expr ( ',' expr ) * ')' ) * )

table_or_subquery ::= ( [ database_name '.' ] table_name [ [ AS ] table_alias ] 
                      [ INDEXED BY index_name | NOT INDEXED ]
                      | '(' ( table_or_subquery ( ',' table_or_subquery ) * | join_clause ) ')'
                      | '(' select_stmt ')' [ [ AS ] table_alias ] )

join_clause ::= table_or_subquery [ join_operator table_or_subquery join_constraint ]

result_column ::= ( '*' 
                  | table_name '.' '*' 
                  | expr [ [ AS ] column_alias ] )

join_operator ::= ( ',' 
                  | [ NATURAL ] [ LEFT [ OUTER ] | INNER | CROSS ] JOIN )

join_constraint ::= [ ON expr | USING '(' column_name ( ',' column_name ) * ')' ]

ordering_term ::= expr [ COLLATE collation_name ] [ ASC | DESC ]

compound_operator ::= ( UNION 
                      | UNION ALL 
                      | INTERSECT 
                      | EXCEPT )

expr ::= ( literal_value
         | bind_parameter
         | [ [ database_name '.' ] table_name '.' ] column_name
         | unary_operator expr
         | expr binary_operator expr
         | function_name '(' [ [ DISTINCT ] expr ( ',' expr ) * | '*' ] ')'
         | '(' expr ')'
         | CAST '(' expr AS type_name ')'
         | expr COLLATE collation_name
         | expr [ NOT ] ( LIKE | GLOB | REGEXP | MATCH ) expr [ ESCAPE expr ]
         | expr ( ISNULL | NOTNULL | NOT NULL )
         | expr IS [ NOT ] expr
         | expr [ NOT ] BETWEEN expr AND expr
         | expr [ NOT ] IN ( '(' [ select_stmt | expr ( ',' expr ) * ] ')' 
                           | [ database_name '.' ] table_name )
         | [ [ NOT ] EXISTS ] '(' select_stmt ')'
         | CASE [ expr ] WHEN expr THEN expr [ ELSE expr ] END
         | raise_function )

literal_value ::= ( numeric_literal
                  | string_literal
                  | blob_literal
                  | NULL
                  | CURRENT_TIME
                  | CURRENT_DATE
                  | CURRENT_TIMESTAMP )

numeric_literal ::= ( digit [ decimal_point ( digit ) * ] 
                   | decimal_point digit ) 
                   [ E [ '+' | '-' ] digit ]

raise_function ::= RAISE '(' ( IGNORE | ( ROLLBACK | ABORT | FAIL ) ',' error_message ) ')'
