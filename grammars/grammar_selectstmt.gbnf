root ::= ( with_clause?
    ( select_core | values_clause )
    ( compound_operator
      ( select_core | values_clause )
    )*
    order_by_clause?
    limit_clause? )

with_clause ::= "WITH" recursive? common_table_expression ( "," common_table_expression )*
recursive ::= "RECURSIVE"

common_table_expression ::= table_name column_list? "AS" "(" select_stmt ")"
column_list ::= "(" column_name ( "," column_name )* ")"

select_core ::= "SELECT" distinct_or_all? result_column ( "," result_column )*
                from_clause?
                where_clause?
                group_by_clause?
distinct_or_all ::= "DISTINCT" | "ALL"

from_clause ::= "FROM" ( table_or_subquery ( "," table_or_subquery )* | join_clause )
where_clause ::= "WHERE" expr
group_by_clause ::= "GROUP BY" expr ( "," expr )* having_clause?
having_clause ::= "HAVING" expr

values_clause ::= "VALUES" "(" expr ( "," expr )* ")" ( "," "(" expr ( "," expr )* ")" )*

compound_operator ::= "UNION" | "UNION ALL" | "INTERSECT" | "EXCEPT"

order_by_clause ::= "ORDER BY" ordering_term ( "," ordering_term )*
limit_clause ::= "LIMIT" expr ( offset | "," expr )?
offset ::= "OFFSET" expr

table_or_subquery ::= (
    ( database_name "." )? table_name table_alias? indexed_by_clause?
    | "(" ( table_or_subquery ( "," table_or_subquery )* | join_clause ) ")"
    | "(" select_stmt ")" table_alias?
)
table_alias ::= "AS" table_alias
indexed_by_clause ::= "INDEXED BY" index_name | "NOT INDEXED"

join_clause ::= table_or_subquery join_operator table_or_subquery join_constraint
join_operator ::= "," | ( "NATURAL"? ( "LEFT" "OUTER"? | "INNER" | "CROSS" ) "JOIN" )
join_constraint ::= "ON" expr | "USING" "(" column_name ( "," column_name )* ")"

result_column ::= "*" | table_name "." "*" | expr column_alias?
column_alias ::= "AS" column_alias

ordering_term ::= expr collation_name? ordering_direction?
collation_name ::= COLLATE collation_name
ordering_direction ::= "ASC" | "DESC"

# Non-terminals representing expressions, table names, column names, etc.

expr ::= literal | function_call | column_reference | "(" expr ")" | expr binary_operator expr | unary_operator expr

literal ::= numeric_literal | string_literal | boolean_literal | null_literal
numeric_literal ::= [0-9]+
string_literal ::= '"' [^"]* '"'
boolean_literal ::= "TRUE" | "FALSE"
null_literal ::= "NULL"

function_call ::= function_name "(" ( expr ( "," expr )* )? ")"
function_name ::= [a-zA-Z_][a-zA-Z0-9_]*

column_reference ::= ( table_name "." )? column_name

binary_operator ::= "+" | "-" | "*" | "/" | "=" | "!=" | "<" | ">" | "<=" | ">=" | "AND" | "OR"
unary_operator ::= "+" | "-" | "NOT"

table_name ::= [a-zA-Z_][a-zA-Z0-9_]*
column_name ::= [a-zA-Z_][a-zA-Z0-9_]*
index_name ::= [a-zA-Z_][a-zA-Z0-9_]*
database_name ::= [a-zA-Z_][a-zA-Z0-9_]*
collation_name ::= [a-zA-Z_][a-zA-Z0-9_]*

# Example expansion for ordering_term non-terminal
ordering_term ::= expr ( "COLLATE" collation_name )? ( "ASC" | "DESC" )?

# For completeness, here's how the other non-terminals might look:
ordering_term ::= expr ( "COLLATE" collation_name )? ( "ASC" | "DESC" )?
table_alias ::= "AS" identifier
column_alias ::= "AS" identifier

identifier ::= [a-zA-Z_][a-zA-Z0-9_]*
