# Root rule for a SELECT statement, including subqueries within FROM and WHERE clauses
root ::= select-statement [;]?

# SELECT statement with optional distinct, columns, FROM clause, WHERE clause, JOINs, GROUP BY, ORDER BY, and LIMIT
select-statement ::= "SELECT " distinct? columns from-clause where-clause? join-clause? group-by-clause? order-by-clause? limit-clause?

# Optional DISTINCT keyword
distinct ::= "DISTINCT "

# Columns to select, either all (*) or a comma-separated list of column names or functions
columns ::= "*" | column-or-function (", " column-or-function)*

# Column or function
column-or-function ::= column | function alias?

# Individual column name
column ::= (schema-name ".")? (table-name ".")? (column-name )
schema-name ::= [a-zA-Z_][a-zA-Z0-9_]*
table-name ::= [a-zA-Z_][a-zA-Z0-9_]*
column-name ::= [a-zA-Z_][a-zA-Z0-9_]* " "

# Function call, simplified to no arguments or single argument
function ::= ( "COUNT" | "AVG" | "MAX" | "MIN" | "SUM" ) "(" (column | "*" ) ")"

# FROM clause specifying the table(s) or subquery to select from
from-clause ::= ws? "FROM " (tables | subquery) (ws table-alias)?

# Tables, either a single table, a subquery as a table, or a comma-separated list of table names
tables ::= table (", " table)*

# Individual table name or subquery as table
table ::= schema-name "." table-name (ws table-alias)? | "(" select-statement ")" 

# Alias for a table or subquery, simplified
alias ::= " AS " alias-name
table-alias ::= " AS " alias-name-table
alias-name-table ::= [a-zA-Z] " "
alias-name ::= [a-zA-Z_][a-zA-Z0-9_]* " "

# WHERE clause with a condition, including subquery conditions
where-clause ::= ws? "WHERE " condition

# JOIN clause, including INNER, LEFT, RIGHT, and OUTER JOIN types
join-clause ::= ws? join-type "JOIN " table (ws table-alias)? " ON " condition

# Different types of joins
join-type ::= "INNER " | "LEFT " | "RIGHT " | "FULL OUTER " | "LEFT OUTER " | "RIGHT OUTER " | "FULL "


# Condition, allowing column comparisons, IN, EXISTS, and subquery conditions
condition ::= (
        column ws? comparator ws? (value | column)
        | column " IN (" select-statement ")"
        | "EXISTS (" select-statement ")"
    )

# Comparator, basic options
comparator ::= "=" | "<>" | "<" | ">" | "<=" | ">="

# Value, numeric, quoted string, or subquery
value ::= number | quoted-string | "(" select-statement ")"

# Subquery structure
subquery ::= "(" select-statement ")"

# Numeric value, including integers, floats, and scientific notation
number ::= sign? (integer | float )

# Optional sign for numbers
sign ::= "+" | "-"

# Integer, disallowing leading zeros except for zero itself
integer ::= "0" | ([1-9] [0-9]*)

# Float, ensuring the fractional part is specified
float ::= integer "." [0-9]+

# Quoted string, simplifying to anything between single quotes
quoted-string ::= "'" [^']* "'"

# GROUP BY clause, specifying columns for grouping
group-by-clause ::= ws? "GROUP BY " group-columns

# Grouping columns, either a single column or a comma-separated list
group-columns ::= column (", " column)*

# ORDER BY clause, specifying column sorting
order-by-clause ::= ws? "ORDER BY " order-columns

# Ordering columns, either a single column or a comma-separated list, with optional direction
order-columns ::= order-column (", " order-column)*

# Order by a single column, optionally with ASC or DESC
order-column ::= column (" ASC" | " DESC")?

# LIMIT clause, to limit the number of results, with optional OFFSET
limit-clause ::= ws? "LIMIT " integer (" OFFSET " integer)?


# Optional whitespace, for better readability in the grammar
ws ::= [ \t\n]*