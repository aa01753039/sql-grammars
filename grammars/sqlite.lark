/*
	https://www.sqlite.org/syntaxdiagrams.html
 */

sql-stmt-list ::= ( sql-stmt ( ';' sql-stmt )* )?

sql-stmt ::= ( 'EXPLAIN' ( 'QUERY' 'PLAN' )? )?
	(  
	select-stmt
)


select-stmt ::= 

	select-core ( compound-operrator select-core )* 
	( 'ORDER' 'BY' ordering-term ( ',' ordering-term )* )? 
	( 'LIMIT' expr ( ( 'OFFSET' | ',' ) expr )? )? 



common-table-expression ::= table-name ( '(' column-name ( ',' column-name )* ')' )? 'AS' '(' select-stmt ')'

compound-operrator ::= ( 'UNION' | 'UNION' 'ALL' | 'INTERSECT' | 'EXCEPT' )

join-clause ::= table-or-subquery ( join-operator table-or-subquery join-constraint )*

join-operator ::= ( ',' | 'NATURAL'? ( 'LEFT' 'OUTER'? | 'INNER' | 'CROSS' )? 'JOIN' )

join-constraint ::= ( 'ON' expr | 'USING' '(' column-name ( ',' column-name )* ')' )?

ordering-term ::= expr ( 'COLLATE' collation-name )? ( 'ASC' | 'DESC' )? ( 'NULLS' ( 'FIRST' | 'LAST' ) )?

result-column ::= ( expr ( 'AS'? column-alias )? | '*' | table-name '.' '*' )

table-or-subquery ::= 
	( qualified-table-name 
	| ( schema-name '.' )? table-function-name '(' expr ( ',' expr )* ')'  ( 'AS'? table-ailas )?
	| '(' ( table-or-subquery ( ',' table-or-subquery )* | join-clause ) ')'
	| '(' select-stmt ')' ( 'AS'? table-ailas )? )

qualified-table-name ::= ( schema-name '.' )? table-name ( 'AS'? table-name )? ( 'INDEXED' 'BY' index-name | 'NOT' 'INDEXED' )? 

window-defn ::= '(' base-window-name ( 'PARTITION' 'BY' expr ( ',' expr )* )? ( 'ORDER' 'BY' ordering-term ( ',' ordering-term )* )? frame-spec? ')'

frame-spec ::= ( 'RANGE' | 'ROWS' | 'GROUPS' ) 
	( 'BETWEEN' 
		( ( 'UNBOUNDEFD' | expr ) 'PRECEDING' 
		| 'CURRENT' 'ROW' 
		| expr 'FOLLOWING' )
		'AND'
		( ( 'UNBOUNDEFD' | expr ) 'FOLLOWING' 
		| 'CURRENT' 'ROW' 
		| expr 'PRECEDING' )
	| ( 'UNBOUNDEFD' | expr ) 'PRECEDING' 
	| 'CURRENT' 'ROW' )
	( 'EXCLUDE' ( 'NO' 'OTHERS' | 'CURRENT' 'ROW' | 'GROUP' | 'TIES' ) )?

expr ::= 
	( literal-value 
	| bind-parameter 
	| ( ( schema-name '.' )? table-name '.' )? column-name 
	| unary-operator expr 
	| expr binary-operator expr 
	| function-name '(' ( 'DISTINCT'? expr ( ',' expr )* | '*' )? ')' filter-clause? over-clause? 
	| '(' expr ( ',' expr )* ')' 
	| 'CAST' '(' expr 'AS' type-name ')' 
	| expr 'COLLATE' collation-name 
	| expr 'NOT'? ( 'LIKE' | 'GLOB' | 'REGEXP' | 'MATCH' ) expr ( 'ESCAPE' expr )? 
	| expr ( 'ISNULL' | 'NOTNULL' | 'NOT' 'NULL' ) 
	| expr 'IS' 'NOT'? expr 
	| expr 'NOT'? 'BETWEEN' expr 'AND' expr 
	| expr 'NOT'? 'IN' ( '(' ( select-stmt | expr ( ',' expr )* ) ')' | ( schema-name '.' )? ( table-name | table-function '(' ( expr ( ',' expr )* )? ')' ) ) 
	| ( 'NOT'? 'EXISTS' )? '(' select-stmt ')' 
	| 'CASE' expr? ( 'WHEN' expr 'THEN' expr )+ ( 'ELSE' expr )? 'END' 
	| raise-function )

raise-function ::= 'RAISE' '(' ( 'IGNORE' | ( 'ROLLBACK' | 'ABORT' | 'FAIL' ) ',' error-message ) ')' 

literal-value ::= ( numeric-literal | string-literal | blob-literal | 'NULL' | 'TRUE' | 'FALSE' | 'CURRENT_TIME' | 'CURRENT_DATE' | 'CURRENT_TIMESTAMP' ) 

numeric-literal ::= ( ( digit+ ( decimal-point digit* )? | decimal-point digit+ ) ( 'E' ( '+' | '-' )? digit+ )? | '0x' hexdigit+ ) 


select-core ::= 
	( 'SELECT' ( 'DISTINCT' | 'ALL' )? result-column ( ',' result-column )* 
		( 'FROM' ( table-or-subquery ( ',' table-or-subquery )* | join-clause ) )? 
		( 'WHERE' expr )? 
		( 'GROUP' 'BY' expr ( ',' expr )* ( 'HAVING' expr )? )?
		( 'WINDOW' window-name 'AS' window-defn ( ',' window-name 'AS' window-defn )* )?
	| 'VALUES' '(' expr ( ',' expr )* ')' ( ',' '(' expr ( ',' expr )* ')' )* ) 
 

column-name-list ::= '(' column-name ( ',' column-name )* ')' 

comment-syntax ::= ( '--' anything-except-newline* ( newline | end-of-input ) | '/*' anything-except-asterisk_slash ( '*/' | end-of-input ) ) 

filter-clause ::= 'FILTER' '(' 'WHERE' expr ')' 

over-clause ::= 'OVER' ( window-name | window-defn ) 