root ::= select-stmt ( ";" ws select-stmt )*

select-stmt ::= with-clause? select-core select-stmt_rest

select-stmt_rest ::= (compound-operator ws select-core select-stmt_rest)? ws ("ORDER BY" ordering-term ( "," ordering-term )* )? ("LIMIT" expr ( ("OFFSET" | "," ) expr )? )?

with-clause ::= "WITH" "RECURSIVE"? common-table-expression with-clause_rest

with-clause_rest ::= (", " common-table-expression with-clause_rest)? ws

common-table-expression ::= table-name ( "(" column-name ( "," column-name )* ")" )? "AS" "(" select-stmt ")"

compound-operator ::= "UNION" | "UNION ALL" | "INTERSECT" | "EXCEPT"

join-clause ::= table-or-subquery join-clause_rest

join-clause_rest ::= (join-operator table-or-subquery join-constraint join-clause_rest)?

join-operator ::= "," | "NATURAL"? ("LEFT" "OUTER"? | "INNER" | "CROSS")? "JOIN"

join-constraint ::= "ON" expr | "USING" "(" column-name ( "," column-name )* ")"

ordering-term ::= expr ("COLLATE" collation-name)? ("ASC" | "DESC")? ("NULLS" ("FIRST" | "LAST"))?

result-column ::= expr ("AS"? column-alias)? | "*" | table-name "." "*"

table-or-subquery ::= qualified-table-name | table-function-call | subquery | select-stmt-subquery

table-function-call ::= (schema-name ".")? table-function-name "(" expr ( "," expr )* ")" ("AS"? table-alias)?

subquery ::= "(" subquery-body ")"

subquery-body ::= join-clause | table-or-subquery tail-tail

tail-tail ::= "," table-or-subquery tail

tail ::= ("," table-or-subquery) tail | ε

select-stmt-subquery ::= "(" select-stmt ")" ("AS"? table-alias)?

qualified-table-name ::= (schema-name ".")? table-name ("AS"? table-name)? ("INDEXED BY" index-name | "NOT INDEXED")?

window-defn ::= "(" base-window-name ("PARTITION BY" expr ( "," expr )* )? ("ORDER BY" ordering-term ( "," ordering-term )* )? frame-spec? ")"

frame-spec ::= ("RANGE" | "ROWS" | "GROUPS") ("BETWEEN" (("UNBOUNDED" | expr) "PRECEDING" | "CURRENT ROW" | expr "FOLLOWING") "AND" (("UNBOUNDED" | expr) "FOLLOWING" | "CURRENT ROW" | expr "PRECEDING") | ("UNBOUNDED" | expr) "PRECEDING" | "CURRENT ROW") ("EXCLUDE" ("NO OTHERS" | "CURRENT ROW" | "GROUP" | "TIES"))?

expr ::= primary-expr expr-tail

primary-expr ::= literal-value | bind-parameter | ( (schema-name ".")? table-name "." )? column-name | function-call | parenthesized-expr | cast-expr | case-expr | raise-function | ("NOT"? "EXISTS")? "(" select-stmt ")"

function-call ::= function-name "(" ("DISTINCT"? expr-list | "*")? ")" filter-clause? over-clause?

expr-list ::= expr ( "," expr )*

parenthesized-expr ::= "(" expr-list ")"

cast-expr ::= "CAST" "(" expr "AS" type-name ")"

case-expr ::= "CASE" expr? ("WHEN" expr "THEN" expr)+ ("ELSE" expr)? "END"

expr-tail ::= (binary-operator expr expr-tail_rest | "COLLATE" collation-name expr-tail_rest | ("NOT"? ("LIKE" | "GLOB" | "REGEXP" | "MATCH") expr ("ESCAPE" expr)?) expr-tail_rest | (("ISNULL" | "NOTNULL" | "NOT" "NULL")) expr-tail_rest | ("IS" "NOT"? expr) expr-tail_rest | ("NOT"? "BETWEEN" expr "AND" expr) expr-tail_rest | ("NOT"? "IN" in-list) expr-tail_rest | ε)

expr-tail_rest ::= expr expr-tail | ε

in-list ::= "(" (select-stmt | expr-list) ")" | (schema-name ".")? (table-name | table-function "(" (expr-list)? ")")

table-function ::= table-function-name

unary-expr ::= unary-operator expr

raise-function ::= "RAISE" "(" ("IGNORE" | ("ROLLBACK" | "ABORT" | "FAIL") "," error-message) ")"

literal-value ::= numeric-literal | string-literal | blob-literal | "NULL" | "TRUE" | "FALSE" | "CURRENT_TIME" | "CURRENT_DATE" | "CURRENT_TIMESTAMP"

numeric-literal ::= ("0" | [1-9][0-9]*) ("." [0-9]+)? (("e" | "E") ("-" | "+")? [0-9]+)? | "." [0-9]+? (("e" | "E") ("-" | "+")? [0-9]+)? | ("0x" | "0X") [0-9a-fA-F]+

string-literal ::= "'" ("''"|[^'])* "'"

blob_literal ::= ("x'" | "X'") ("''"|[^'])* "'"

select-core ::= "SELECT" ("DISTINCT" | "ALL")? result-column select-core_rest | "VALUES" "(" expr ( "," expr )* ")" ( "," "(" expr ( "," expr )* ")" )*

select-core_rest ::= ("," result-column select-core_rest)? ("FROM" (table-or-subquery select-core_rest_tables | join-clause)? ("WHERE" expr)? ("GROUP BY" expr select-core_rest_group)? ("HAVING" expr)? ("WINDOW" window-name "AS" window-defn select-core_rest_window)?)?

select-core_rest_tables ::= "," table-or-subquery select-core_rest_tables | ε

select-core_rest_group ::= "," expr select-core_rest_group | ε

select-core_rest_window ::= "," window-name "AS" window-defn select-core_rest_window | ε

simple-select-stmt ::= "WITH" "RECURSIVE"? common-table-expression ( "," common-table-expression )* select-core simple-select-stmt_rest

simple-select-stmt_rest ::= ("ORDER BY" ordering-term ( "," ordering-term )* )? ("LIMIT" expr ( ("OFFSET" | "," ) expr )? )?

compound-select-stmt ::= "WITH" "RECURSIVE"? common-table-expression ( "," common-table-expression )* select-core compound-select-stmt_rest

compound-select-stmt_rest ::= (compound-operator select-core compound-select-stmt_rest)+ ("ORDER BY" ordering-term ( "," ordering-term )* )? ("LIMIT" expr ( ("OFFSET" | "," ) expr )? )?

column-name-list ::= "(" column-name ( "," column-name )* ")"

comment-syntax ::= "--" anything-except-newline* (newline | end-of-input) | "/*" anything-except-asterisk_slash ("*/" | end-of-input)

filter-clause ::= "FILTER" "(" "WHERE" expr ")"

over-clause ::= "OVER" (window-name | window-defn)

simple-function-invocation ::= simple-function-name "(" ("DISTINCT"? expr ( "," expr )* | "*")? ")"

aggregate-function-invocation ::= aggregate-function-name "(" ("DISTINCT"? expr ( "," expr )* | "*")? ")" filter-clause?

window-function-invocation ::= window-function-name "(" ("DISTINCT"? expr ( "," expr )* | "*")? ")" filter-clause? over-clause?

ws ::= [ \t\n]+

schema-name ::= [a-zA-Z_][a-zA-Z0-9_]*

table-name ::= [a-zA-Z_][a-zA-Z0-9_]*

column-name ::= [a-zA-Z_][a-zA-Z0-9_]*

index-name ::= [a-zA-Z_][a-zA-Z0-9_]*

column-alias ::= [a-zA-Z_][a-zA-Z0-9_]*

table-function-name ::= [a-zA-Z_][a-zA-Z0-9_]*

function-name ::= [a-zA-Z_][a-zA-Z0-9_]*

base-window-name ::= [a-zA-Z_][a-zA-Z0-9_]*

window-name ::= [a-zA-Z_][a-zA-Z0-9_]*

error-message ::= [a-zA-Z_][a-zA-Z0-9_]*

anything-except-newline ::= [^\n]*

anything-except-asterisk_slash ::= [^*]*

