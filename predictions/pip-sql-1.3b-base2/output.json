[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "SELECT COUNT(*) FROM club_table;"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": "SELECT COUNT(*) FROM clubs WHERE club_name  =  'Dynamo'\n \n    ORDER BY club_clubfeestdurant DESC;"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "SELECT name FROM clubs ORDER BY Club_Name ASC;"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "SELECT name FROM Clubs ORDER BY Name ASC;"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "SELECT All\n \n    WHERE OCTALLESBIDIBLERSSELBYTELLACAPTAINORRESULTS IN (SELECT c.club_name FROM club AS C WHERE TIME.sec = 3);"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": "SELECT mgr_tm1, mgr_a1 FROM table_club\n \nP\n   \n  \n \n\n\n\nLIMIT 2;"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": "SELECT DISTINCT \n    FROM table_name;"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "SELECT * FROM table_name WHERE club = 'club name without'\n  ORDER BY MANUFACTURE DESC;"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "SELECT DISTINCT player_names FROM (SELECT name, number) WHERE team = 15 ORDER BY win_count ASC\n  LIMIT 20;"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "SELECT player_name FROM (SELECT player_name, COUNT(*) AS WINNING_PLAYERS) ORDER BY Count DESC;"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "SELECT play.first_name, COUNT(*) FROM (SELECT first_name ORDER BY salary DESC) GROUP BY payer\n    ORDER BY FIRSTNAMES;"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "SELECT Players, MIN(Winnings)FROM TableNameOrderByWinningIncreasest;"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "SELECT COUNT(DISTINCT), country_of_residence FROM table WHERE income > 1200000\n    \n\n\n\n  \n\n\n\n\n   \n      GROUP BY ECONOMICOUNTRY;"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "SELECT Country FROM TableName WHERE Player_of = 754896;"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "SELECT T3.Country FROM (SELECT DISTINCT(SUBSTRING_INDEXERPLAYERSVIEWSDISINALMATCHESFROMHIGHESTEARNINGSORLIMITSEXISTSFORTHUSANDBARRENVOLTEMS)FROMplayers ORDER BY Earnings DESC LIMIT 20.54971368), TASK, INTERCEPTIONOBJETCTRYCREATEOFTHEFIRSTINSTANCE"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "SELECT answer.txt\n    FROM (SELECT team_name) AS t\n    WHERE team_name IN (SELECT name  \n      FROM Games G\n      JOIN Teams T ON G.team_id.Teams = T.id\n      JOIN games_players GP ON G.id = gp.game_id\n      GROUP BY team_name, id\n      ORDER BY sum DESC\n      LIMIT 1)  \n    ORDER BY max DES"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "SELECT Players.player_name FROM group_of_players;"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "SELECT Name, Club FROM Players;"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": "SELECT Club_Names, FROM \n    WHERE Player_Club_Result  > -3;"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "SELECT query.sql\n  LIMIT 10;"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "SELECT umpire_club, name FROM all_games WHERE manager = 'Sam Allen'\n    LIMIT 1;"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "SELECT Cl.Club_Name, HS.Player_FullnameFROM Clubs JOIN Members AS M ON CL.Club_ID = M.Member_idJOIN Player_Skills As ON CL.club_Id = sskill.portrain \n        ORDER BY SkillLevel DESC;"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": "SELECT Clu.club_name, AVG(Earnings) FROM members m JOIN Clubs Clu ON M.club_id = CLU.club_id ORDER BY avg_earnings DESC\n  LIMIT 1;"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "SELECT clb.club_name FROM (SELECT club_name, AVG() AS average_earnings FROM all_clubs) ORDER BY DESC;"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": "SELECT T2.Name, COUNT(T1.Club_ID) FROM Jockey AS TJOIN JOIN STADIUMA_SHCMANUFACTS_TB ON TJ.club_id = T2.Club_IDGROUP BY T2.Name\n \tORDER BY DESC;"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "SELECT count(DISTINCTClub_Manager)AS numberofclubsBYMANUFACTUREFORMCLUBS\n  FROM fitch AS a JOIN LIBRARY_BRANE ON NO.No_books = Clichieverify;"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": "SELECT T20_1365794, manufacturer FROM competition WHERE Club = 'Boromens Deuce'\n  ORDER BY COUNT DESC;"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "SELECT COUNT(*) AS number_of_clubs, DEFAULT_SETTLEMENT.CLUBS JOIN GROUP BY ON CONDITION\n<jupyter_outputs\n    GROUP BY TYPE ORDER BY DESC;"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": "SELECT name FROM (SELECT DISTINCT T1.manufacturerid, COUNT(DISTINCT) AS manufacturer_club\n  FROM CLUB)AS T\nORDER BY count DESC LIMIT 2;"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "SELECT Manufacturers.name FROM manufacturers WHERE id  >= (SELECT id FROM SELECT D \n         GROUP BY Manufacturers.name) GROUP BY name\n    ORDER BY count DESC;"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "SELECT count(player_id) FROM players GROUP BY country ORDER BY COUNT  \n     LIMIT 1;"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": "SELECT countryname, COUNT(*) FROM international_football_project WHERE country_r >  1\n  GROUP BY countryname;"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "SELECT uc_club, tuc_club FROM ClubsEXCHG ORDER BY clubname;"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "SELECT PRODUCT(club_name)FROM club_tableExCEPTSELECT t\n    ORDER BY rownum;"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "SELECT * FROM player\n    WHERE Income  >  (SELECT Income FROM employee e WHERE Position = 'Boss');"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "SELECT T.nation, MAX(Earnings) FROM table_name WHERE High_Winnigs = TRUE GROUP BY nation;"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "SELECT COUNT(DISTINCT) from_table WHERE type='country';"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "SELECT COUNT(DISTINCTCountry)FROMPlayerSchema\n    GROUP BY player.countryISO2b;"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "SELECT e.Player, ics.Club, e.Winner\n    FROM EARNINGS AS e JOIN LOCLINET AS l ON e.Player = l.player_name  \n \n     JOIN LOCATION AS lo ON NULL\n      = LOWERIER.club_name;"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "SELECT name FROM outhaifa_players WHERE country IN (SELECT DISTINCT national_enp)\n    ORDER BY Earnings DESC;"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": "SELECT order_id, customer_id FROM orders WHERE total_amount > 2;"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "SELECT order_count, name FROM (SELECT COUNT(*) AS total_orders, d.order_date)AS D\n    JOIN CUSTOMERS c ON o.customer_id = c.customer_id;"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "SELECT OID, status, COUNT(prod_id) FROM ORDERS WHERE ORDER_COMPLETED IN (SELECT prod_id FROM ORDERS GROUP BY prod_id);"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "SELECT OrderID, COUNT(Product), Status FROM Orders GROUP BY STATUS;"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "SELECT dstamp FROM orders WHERE order_count > 1;"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "SELECT DATEPART(year) AS Earliest_Order, MIN(DATEPART) FROM Orders WHERE Items  > 0\n    GROUP BY YEAR;"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": "SELECT customers WHERE o.customer_id IN (SELECT id FROM order_entry) ORDER BY o.customer_id\n  LIMIT 0;"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "SELECT T1.FirstName, MIN(T2.LastName) AS IntermediatingSurname FROM Customer AS TORDER BY IDCUSTOMERLIKE ASC\n  \n \n\n\n\n\n\n\n\n\n   \n\n\n\n\n    \n  \n\n\n\n\n   \n\n     \n      \n          \n           \n              \n               \n                 \n            \n                \n                  \n                   \n                    \n                      \n                        \n"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "SELECT * FROM product ORDER BY no_of_orders DESC;"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "SELECT orderid FROM sales_details WHERE producttype  = 'Product Type' GROUP BY YEAR ORDER BY PRODUCTTYPE, ORDERID;"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "SELECT o10756934, CURRENT_DATE FROM allOrders WHERE EXISTS (SELECT productID  \n        FROM myPurchasesInfo AS t)\n         ORDER BY purchaseDate DESC;"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "SELECT o.order_id, ao.invoice_date FROM pg_catalog a JOIN o AS ORCHESTRALATION ON EXCLUDE = ON ORDER BY ORDERING LIMIT 2036819754652082 OFFSET -1;"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "SELECT t3.product_id, p2.products.product_name, p2.products.priceFROM (SELECT id FROM products) AS o JOIN product_order_counter EXECUTE ON ERSULASchema\n<ProductOrderOrdersByListNameNonExistent;"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "SELECT p.product_id, GROUP_CONCAT(p.product_name) AS product_name, GROUP_CONCAT(DISTINCTTRANSACTIONID)AS transaction_ids   FROM orders o JOIN customers c ON customer_id  = c.customer_id  ORDER BY count  \n    LIMIT 25;"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "SELECT xt1, odr.get_orderid_and_productpricesum\n        FROM (SELECT *   FROM orders WHERE OrderID = 'XYZ') x;"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "SELECT COUNT(*), SUM(total_cost) FROM (SELECT T1.order_id, CASE \n    \tWHERE NULL <> ''  \n    ORDER BY company_id), T3 WHERE t2 = 'USA'GROUP BY order_id;"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "SELECT MAX(payment_method)FROM Payments\n  ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "SELECT TOP \n    FROM Customers ORDER BY PaymentMethods DESC;"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "SELECT number.gender, count(*) AS num_products\n  FROM (SELECT DISTINCT orderid)AS T JOIN CUSTOMERS ON TRUE IN (SELECT NOBALIGNOUSGENDEROFSMALLCUSTOMERS)\n   GROUP BY gendera;"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "SELECT xtra_type, count(*)FROM product GROUP BY type\n    ORDER BY gmt_create DESC;"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "SELECT GENDER, COUNT(*) FROM CUSTOMERS GROUP BY GENDER;"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "SELECT count(OrderId) FROM Orders WHERE Customers.gender IN (SELECT OCCUPANY GROUP BY NAMING ORDER BY SELLERS\n    \n   \n  \n     \n           LIMIT -1);"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": "SELECT CURRENT_DATE(), irstname \n    FROM customers;"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "SELECT c.first_name, uc.middle_initial, c.last_name, k.payment_method FROM (SELECT id FROM customer) AS t JOIN customer AS c ON c.id  =  t.customerid JOIN JSON_contains AS jt ON J.id  = CT.id JOIN customerdata AS cd ON CA.id = T.CA.id JOIN paymentmethods AS km ON K.id =  km.customerid;"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "SELECT invoice_id FROM invoices ORDER BY date DESC\n  LIMIT 5;"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "SELECT DATE(ShipDate) AS Date_of_Issue FROM Invoice;"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": "SELECT ProductName, ShipDate;"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "SELECT job_runs.next_nodeid\n        FROM (SELECT xtra1a.shipdate) AS T\n          WHERE shiptype = 'Product'\n            ORDER BY loadtime ASC;"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "SELECT xtrace.status, shipping_details.shipping_delay\n   FROM order_items o;"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "SELECT ALL\n  ORDER BY REQUEST_ORDERED DESC LIMIT 5;"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "SELECT item.product_name, order.order_status FROM Item AS I JOIN ORDERS AS O ON TENDERS.ID = ORDER.id;"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "SELECT this \n    FROM ship;"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": "SELECT NAME FROM Products WHERE DESCRIPTION  =  'product description' ORDER BY NAME;"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "SELECT product_description FROM basket_a384 WHERE customer_gender  =  'F';"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "SELECT InvoicesStatus, Orders.OrderId\n  FROM Order_Items O JOIN Orders ON dbo.Orders.OrderId = o.orderid;"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "SELECT Ordinary_Owner__c, Invoices__i.StatusName  FROM (SELECT a.Ordinary_Owner__c, o.Invoices__i FROM Account_bkOu WHERE bok.ID = ao.ID) AS a JOIN Billsink OUEREIBILITai ON Orders_.id = BLK.OrderID;"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "SELECT sum(o.cost) FROM orders AS O;"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "SELECT Ordinary_ID(), ORDER_DATE() AND  FROM ORDINALY_AMOUNT_PAID;"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "SELECT COUNT(DISTINCT) FROM Customers AS c JOIN Orders AS o ON ustomr.id = orders.customer_id\n\tGROUP BY id;"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "SELECT count(*) FROM orders;"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "SELECT COUNT(*) FROM order_items;"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "SELECT COUNT(*) FROM (SELECT DISTINCT LOWER(item) AS ItemStatusCodeFROM Orders)\n  as T;"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "SELECT COUNT(*)FROM payment;"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "SELECT ONLY \n    FROM Customers;"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "SELECT user_id, login FROM customer WHERE phone = icl88e9f0ac56dbeb7ec64c3eebfaeb\n   \n\n  \n  \n    \n  \n \n\n\n\n \n\n   \n     \n      \n       \n         \n        \n          \n             \n              \n               \n                 LIMIT 98021;"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "SELECT udp.displayname, udp.phonenumber FROM usrdb_acctmanagementclient WHERE LOWERAgg IN (SELECT LOWER(DISTINCTONREQUESTEDPHONENUMBERS) FROM phonenotifications);"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "SELECT * FROM Products WHERE Product_name  =  SELECT \n       \n   \n       \n   \n    \n      \n        \n        \n\n\n      \n     \n         \n          \n           \n             \n               \n              \n                \n                 \n                  \n                   \n                       LIMIT 30.78956241;"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "SELECT id, product_name FROM Products WHERE product_name  =  REPLACE\n  ORDER BY LENGTH DESC;"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "SELECT Product.Product_Price, PRODUCTS.productSize FROM Products WHERE CAREATEAVGDESCENDINGORDERTOHAVEACOLLECTIORTWOOTHEINSTANCEOFSETTINGSINTHEYOUROUGHCAUSEWHOEFAVESAVERANCEDRICELIEVEVALUENOGRADINGACTIVITYANDISSUECANDLORPERSONALIZATONSHOWCASESANDL"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "SELECT avg(price_range.upper)FROM product ORDER BY rownum;"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "SELECT COUNT(*) FROM Products WHERE product_status <> 'Not Sold';"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "SELECT COUNT(product_id) FROM orders WHERE product_status <> 'order ready'\n \nORDER BY status;"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "SELECT COUNT(DISTINCT) FROM CustomersExcludingNOPaymentCustomers\n    JOIN Payments ON Exclude_NONPaymethems.customerid = payments.customerid;"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "SELECT COUNT(customer_id)FROM customerEXTRA;"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "SELECT Status, Orders.order_date FROM orders JOIN status ON ORDERS = STATUS ORDER BY Order;"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "SELECT task.csv\n \n    FROM (SELECT status_code, to_timestamp(order_placed_at) AS order_date, order_id  \n     ORDER BY ordering_id ASC);"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "SELECT * FROM Customers WHERE Country  =  'USA'\n  ORDER BY addr;"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "SELECT * FROM geographic_usa WHERE country  =  'United States';"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": "SELECT name FROM Buyer_table ORDER BY irstname;"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": "SELECT question_id FROM questions WHERE substring_in     ='buy product';"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "SELECT number_of_shipped_items FROM ship;"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "SELECT COUNT(*) FROM ship WHERE product_id IN (SELECT id FROM PRODUCTS)\n    JOIN ORDERS ON ORDER_ID = orders.order_id GROUP BY Product;"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "SELECT AVG(product_price)FROM products;"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "SELECT avg(cost) FROM Products;"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "SELECT AVG(price) FROM orders;"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "SELECT AVG(price) FROM Products;"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "SELECT E.mail_address, T.city, B.county FROM CUSTOMERS AS A JOIN GEBORDOESA AS B ON A.borodoesid  =  B.bid JOIN LOCATIONS AS C ON A.location  =  C.locid  JOIN MAIL_ADDRESSE AS M ON A.mailaddress  =  M.aiAddressesid ORDER BY TOWN, COUNTY\n        LIMIT 1;"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "SELECT Email_Addresses, Cities, Counties FROM Customers WHERE Gender  = (SELECT g.Gender FROM customers AS g ORDER BY COUNT  \n \n\n\n\n   \n    \n\n \n\nLIMIT 1)\n      \nORDER BY city;"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": "SELECT c.date_order, o.orderid FROM CUSTOMERS AS C JOIN ORDERS AS O ON C.customerid = o.customerid GROUP BY c.creditmid ORDER BY firstname LIMIT 1;"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "SELECT DISTINCT TIMESTAMP(order_date) FROM orders WHERE number_of_methods >= 2\n    \n\n\n  \n   \n\n\n\n\n\nORDER BY number_of_methods, customer_id;"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "SELECT ALL\n  ORDER BY ORDER_STATUS DESC LIMIT 1;"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "SELECT minimum(order_status) FROM orders;"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": "SELECT ProductID   FROM Products WHERE Manufacturer = 'G' GROUP BY Desc;"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "SELECT ProductID, Description FROM Products WHERE ManufacturerID IN (SELECT ID FROM PRODUCTS)\n    ORDER BY productid;"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "SELECT date, invoicenumber FROM invoicedetalle WHERE ShipmentStage = 3 GROUP BY invoicenumber\n    ORDER BY count DESC LIMIT 0;"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "SELECT Shipments.InvoiceDate, InvoiceID FROM Shipments JOIN INVOICEID ON SHIPMENTS.SHIPMENT_ID = INVOICES.NUMBER ORDER BY DATES DESC;"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "SELECT ustn, ShipDt FROM shipments WHERE TrackingNum IN (SELECT Num FROM trackdb)\n     ORDER BY DestNexusID;"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "SELECT t.ship_id, l.class, sc.name, w.name\n    FROM Ship AS s JOIN Locker AS j ON s.ship_id = j.ship_id \nJOIN Type AS t ON j.class  =  TIME_EXTRACT3DtemyTimeEnlistmentType;"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "SELECT color_code, product_description, max_price\n    FROM product;"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "SELECT color_code, udev.product_name, dev.color_description\n     FROM Products p JOIN Keychron k ON keycord.products_id = product.product_id   ORDER BY Color DESC;"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": "SELECT avg(Age) FROM table AS M;"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": "SELECT Name FROM Director ORDER BY Birthday DESC LIMIT 1;"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "SELECT COUNT(*) FROM links WHERE text_search = TRUE\n    JOIN channels ON userid1=channels.channel_id \n  GROUP BY channelname;"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "SELECT number(*) FROM station;"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "SELECT name FROM programs ORDER BY start_year DESC;"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "SELECT directory WHERE Height = (SELECT MAX(HEIGHT) FROM PROGRAMS);"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "SELECT name, MIN(age)FROM program_db;"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "SELECT T218634_title FROM GRASP097;"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "SELECT channel_name, t.EXPLODURL\n    FROM channel AS t WHERE substring_indexes  = 1;"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "SELECT xtra_prog FROM (SELECT chanl, count(*) AS num_of_programs)AS c JOIN SCHEDULED_PROGRAMS p ON C.chanl = P.chanl;"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "SELECT * FROM Station WHERE station_name IN (SELECT name FROM Station)\n  JOIN Program ON STATION.ID = PROGRAM.ID;"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "SELECT crew_directors FROM dracula ORDER BY rownum DESC;"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "SELECT * FROM youtube_dataset WHERE channel_name = (SELECT channel_name FROM youtube_dataset ORDER BY length_direct DESC LIMIT 1)\n    JOIN youtube_dataset ON title IN (SELECT sub_title FROM video_titles FJOIN CATALOG_COMPARE_BY_NAME \tONrousers_userschannels_pairsSElinuetuNEggeTi20kBd3481"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": "SELECT operatorname(first_name) FROM people WHERE age  >= 59\n                LIMIT 1;"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": "SELECT cds.name, e.emp_name FROM production AS p JOIN employees AS e ON p.dept_emp_name = e.emp_name JOIN departments AS cd ON p.dep_no = cd.dep_id;"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": "SELECT * FROM STATION WHERE FARMER_ID  =  (SELECT id  FROM STATION WHERE VILKCORN = 'HANK')\n    ORDER BY number DESC LIMIT 1;"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "SELECT number_of_radios FROM schema\n    SGROUP BY sgroup.sgroup, rownum;"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "SELECT umber.Additionally, listings  \n        FROM (SELECT name FROM station ORDER BY network_code) AS T;"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "SELECT etsy.caaasdg1nx FROM sh\n    E\n      ORDER BY LOWEST_PRIORITY;"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "SELECT udo\n    \n    FROM station WHERE Station_Affiliation <> '\"ABC\"';"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": "SELECT radio\n   \n  \n\n   \n  JOIN radio AS r ON rt.transmitter = r.name;"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "SELECT max(Transmitters) FROM radios ORDER BY erp_kw DESC;"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "SELECT AVG(ERP) FROM station;"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "SELECT DISTINCT affilieaction, COUNT(*) AS num_citychannels FROM station ORDER BY Affiliation;"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "SELECT count(*) FROM station ORDER BY ico DESC;"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "SELECT a2_5081367, ivalid4\n\tFROM Favorite_stations ORDER BY channel DESC;"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": "SELECT TIME, DISTANCE FROM city_stations ORDER BY STATION;"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "SELECT channels, transmitters FROM station ORDER BY CHANNELS DESC\n  LIMIT 5;"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "SELECT radios, transmitters FROM radios WHERE radio_name = 'radio';"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "SELECT chattis16.Radio1_fm, xtreme.ShowChannels;"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "SELECT t2.operational_company, ountry\n  FROM (SELECT radio_station1   FROM stations) AS t GROUP BY country;"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "SELECT name, id FROM vehicle WHERE top_speed > (SELECT value FROM number_store ORDER BY RANDOM) LIMIT 1;"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "SELECT BY ORDER BY speed DESC\n    LIMIT 1;"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "SELECT name FROM USERS WHERE country  = \n    (SELECT country FROM USERS);"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "SELECT name FROM nyc_drivers WHERE Citizenship = 'US';"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "SELECT number_of_vehicles FROM race ORDER BY number_of_vehicles DESC LIMIT 1;"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "SELECT Option \n    FROM Rides GROUP BY Driver ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "SELECT MAX(power) AS max_power, AVG(power) FROM Becamevehi2649305\n    WHERE manufacturer = (SELECT id FROM manufacturers WHERE name = 'China')   ORDER BY maximum DESC;"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": "SELECT MAX(power) AS max_power, AVG(power) FROM Vehicles WHERE brand = 'Zhuzhou';"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "SELECT object_id  FROM (SELECT DISTINCT t1.the_id, oidc_column  \n    FROM table AS t) ORDER BY least_of_three DESC;"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": "SELECT oneof2_4(void)\n        Return \t\t\tORDER BY COUNT    \n           \n       LIMIT 1;"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "SELECT max_speed, power FROM BOM WHERE fuel_efficiency = 1 ORDER BY rank DESC LIMIT 2;"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "SELECT TOP_SPEED, POWER FROM production ORDER BY time_created LIMIT 2;"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "SELECT * FROM vehicles;"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "SELECT build_year, model, name FROM fleet_vehicles;"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "SELECT COUNT(*) FROM driver_races WHERE DATE = 2012\n    JOIN driver_races d ON a.driver = d.id;"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": "SELECT COUNT(DISTINCTDriver)FROM Rides WHERE YEAR = 2012\n    GROUP BY Driver;"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "SELECT COUNT(*) FROM race WHERE country = N\n \nORDER BY SCHOOL_NAME, ENDSINA;"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": "SELECT COUNT(*) FROM races WHERE year = 2018;"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "SELECT avg(top_speed) FROM vehicle\n  WHERE make = 'Chevrola';"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": "SELECT avg(top_speed) FROM race;"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "SELECT id, name FROM drivers WHERE hours_coursed  >  1.9;"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": "SELECT name FROM race_driver WHERE id IN (SELECT Id FROM vehicle WHERE Power > 5000)\n\t   ORDER BY name;"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": "SELECT DISTINCT T2.name FROM bm_284693_desc AS T JOIN (SELECT name, production, top_speed FROM bm_284693_desc) AS T2 ON t.model_name  =  T2.name\n  GROUP BY model_name ORDER BY total_production DESC;"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "SELECT ALL\n    ORDER BY creation_date, id;"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "SELECT DISTINCT \n    ORDER BY Modelyear, count LIMIT 2013685479.1;"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "SELECT model_year, built FROM inventory_fact WHERE manufacturer = 'DJ';"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "SELECT xtend.rdbms.ModelsStatement\n        FROM CLASSPATH r\n    WHERE CLASSPATH.TYPE = 'CLASS' GROUP BY TYPE ORDER BY NAME;"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "SELECT id FROM Vehicles WHERE status = 'unowned';"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "SELECT * FROM driver_history WHERE date IN (SELECT start_date FROM Vehicle)\n    JOIN driver_history ON vehicles.id = driver_history.vehicles_id;"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "SELECT * FROM vehicle_drivers WHERE driver_id IN (SELECT id FROM drivers ORDER BY name ASC LIMIT 2)\n     ORDER BY DRIVERS, NAME DESC;"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "SELECT DISTINCT T1.vehicle_id, V0.model FROM (SELECT t1.driver_name, row_number() OVER\n       \t  \t      \t    \t        \t\t   \t \t     \t   \t         \t           \t \t       \t\t\t            \t\t     \t              \t\t\t\t  FROM driver) AS T\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nORDER BY VEHICLE_ID;"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "SELECT one, dbo_driver.Driver_id, drvrdr.Driver_Name\n     FROM driver_table AS t JOIN vehicle_table ON T.vehicle_Id  =  DRV100384567.DRIVENEW    ORDER BY CALIFORNOWINJOB.driver_ID, LINESUCHEQUOEINDOUTPUTS ASC;"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "SELECT COUNT(*) FROM vehicle_revisions WHERE Top_speed = (SELECT max(Top_speed)FROM revision);"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "SELECT COUNT(*) FROM Vehicles WHERE top_speed = (SELECT MAX(top_speed) FROM Vehicles);"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": "SELECT name FROM drivers ORDER BY ASC;"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "SELECT ALL\n \n    FROM EMPTY;"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "SELECT Series, COUNT(*) FROM race_racing GROUP BY Series;"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "SELECT name, count(*) FROM race_results WHERE driver IN (SELECT id FROM drivers) GROUP BY track;"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "SELECT names, title FROM drivers WHERE driving_instructions = idesing LIMIT 305.274986;"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "SELECT People.name, People.date_of_birth FROM people WHERE date_of_birth = (SELECT MAX(date_of_birth)FROM driving_log WHERE driver IN (SELECT id FROM drivers WHERE model  =  'DJ1'));"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "SELECT COUNT(*) FROM Rides WHERE driver_id = (SELECT id FROM Drivers ORDER BY rider_status ASC)\nGROUP BY ractor_id;"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "SELECT COUNT(*) FROM driver WHERE has_not_driven = 1;"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "SELECT COUNT(*)FROM exam_table;"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "SELECT count(*) FROM exam WHERE subject_id = 2;"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "SELECT idesc\n    FROM exams ORDER BY subjcode ASC;"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": "SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC\n  LIMIT 20;"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "SELECT udata.exam_id1, data.Student.student_id249876503_, null\n    FROM Student JOIN Lecture ON student_id = id GROUP BY Subjects ORDER BY name LIMIT 2;"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "SELECT * FROM EXAMS WHERE SUBJECT_CODE  =  'D' \n        ORDER BY created DESC;"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "SELECT DISTINCT T1.test_date FROM examen WHERE substring = 'data' ORDER BY test_date DESC\n  LIMIT 2;"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "SELECT SUBSTRING(code_central_base.subjects.subject_code_id) FROM subjects WHERE SUBSTRINGUMLNSUBJECTS.SUBSTRING = 'DAT';"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "SELECT question_type, COUNT(*) FROM scraped GROUP BY qestion_type\n  ORDER BY count DESC LIMIT 10;"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": "SELECT t1_typecode, xt1COUNT FROM questions WHERE quesrion_type = '?'\n    ORDER BY T2_typecode ASC;"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "SELECT *FROM student_answer WHERE comment = 'Normal'\n    GROUP BY text  ORDER BY count DESC;"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "SELECT DISTINCT text FROM students WHERE comments = 'Normal'\n  GROUP BY id;"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "SELECT COUNT(comments)FROM students;"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": "SELECT commentator_nickname, COUNT(comment) FROM publications WHERE type_of_publication = 'student'GROUP BY commentator_nickname;"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": "SELECT T2, COUNT(*) FROM STUDIUM_PROJECTS AS A JOIN LINKEDLIST as B ON A.IDstudentcollaborated = B.idT2 GROUP BY T1;"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "SELECT all\n  FROM students ORDER BY gender DESC;"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "SELECT client._id, rownum(order) FROM student ORDER BY cliend;"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "SELECT name FROM students ORDER BY anwer_date DESC;"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "SELECT A_text, etsy.users_id FROM questionnaires WHERE question = 'Which food color would you like?' ORDER BY date DESC\n    LIMIT 1;"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "SELECT a2.given_name, uc.email_address, mina2.datefrompopulation WHERE should_be_answered = 'Yes' ORDER BY d.register_date DESC\n  LIMIT 10;"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "SELECT name, grade FROM class_management ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": "SELECT category, COUNT(*) AS num_assessments FROM table WHERE score = '14.3'\n  ORDER BY CASE  \n    \t      \t        \t        \t   \t    \t\t   \t   \t       \t         \t     \t \t          \t   \n       \n  \n \n \n  \n  \n  \n     \t                  LIMIT 1;"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": "SELECT person_name FROM answers\n \tWHERE record = 2 ORDER BY anserson_id DESC;"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": "SELECT name FROM student WHERE has_class_in_play_count  >1\n    ORDER BY birthdate DESC;"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "SELECT xtreme_clothing.com, on FROM makin1567823490 CORDER BY DESKTOP DESC;"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": "SELECT txt FROM Page WHERE title = 'Answer_text';"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "SELECT enr_firstname FROM students WHERE gender <> 'M'\n  LIMIT 2;"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "SELECT name FROM student WHERE gender <> 'm'\n  GROUP BY surnames.ORDER;"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "SELECT COUNT(gender) FROM table_name;"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "SELECT * FROM student WHERE gender = 'M'\n  GROUP BY sex_code;"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "SELECT T1.name FROM STUDENTS AS T JOIN GENDER AS T1 ON NULLIFX\n<any_varible_here ORDER BY name;"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "SELECT * FROM GENDER_DIPLOMA;"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "SELECT first_name FROM student WHERE studentIDNOT IN (SELECT T1.studentid FROM answer AS T JOIN classification AS T1 ON T.classificationid  =  T1.classid)\n               \n              \n          \n        \n            \n           \n      ORDER BY CLASSIFICATION_REASON \n                   LIMIT 0 OFFSET 75;"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": "SELECT xt129574683_athena.dbo_.studentID FROM table129574683_athena WHERE answer = ''\n    ORDER BY studentid;"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "SELECT t1.Text, COUNT(*) AS Total FROM STUDENTS_FEEDS JOIN REGISTRATIONS WHERE ON ID = ANY JOIN T1 ORIGINAL_STREAMING_EVENTS_WITHOUT_APP_DESCRIPTION_REFERENCE_TO_THE_ORIGINANOTIC_STREAMING_EVENTS_AND_WHICH_MORNING_IS_FOUND ON EVENT_ID"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "SELECT *FROM answers WHERE student_id IN (SELECT id FROM students) \n\t\t\tORDER BY comment_score DESC;"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "SELECT name, MIN(score), MAX(score) FROM players WHERE score < 90;"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": "SELECT Type_Code FROM Questions WHERE Num >= 3;"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": "SELECT * FROM Students ORDER BY total_credit DESC;"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "SELECT sid, pid FROM student;"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "SELECT COUNT(*) FROM address_book;"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "SELECT COUNT(addresses)FROM restaurants;"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": "SELECT AddressID, STAddress, City, StateProvince, Country, PostalPin FROM DimAdministrative GROUP BY rownum;"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "SELECT addr_id, stadium, city FROM station ORDER BY stadium ASC;"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "SELECT COUNT(*) FROM product_master WHERE ProductLine = 'how many';"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "SELECT COUNT(*) FROM Products;"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": "SELECT code  FROM product_master_indexes ORDER BY random_number;"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "SELECT T2.id, rownum, to_date(sysdate), prd_cnt, NULL FROM product_type_info;"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "SELECT t2.product_name, ounces FROM products AS t JOIN measurements AS t1 ON T1 = MONITOR GROUP BY PRICE;"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "SELECT SUBSTRING_INDEX(price_monitoring_products) FROM products\nORDER BY rownum;"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": "SELECT MIN(price) AS lowest_price, AVG(price) AS avg_price, MAX(price) AS highest_price FROM products;"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "SELECT Minimum_price, Average_price, Maximum_price FROM Products WHERE product = 'products';"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "SELECT avg(price) FROM Products WHERE product_type = 'Clothes';"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": "SELECT AVG(price)FROM clothes;"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "SELECT count(*) FROM product_master WHERE HardwareTypeProducts = 'Yes'\n  ORDER BY HARDWARETYPE;"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "SELECT COUNT(*) FROM product_type WHERE Type = 'Hardware';"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "SELECT t1.product_name, COUNT(t2.price) AS reviewscore FROM products AS t JOIN reviews AS t1 ON t.product_id = t2.product_id GROUP BY score;"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "SELECT Product, avg_price FROM (SELECT name, price FROM Products) AS t;"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": "SELECT hw_products.name, AVG(price) FROM HardwareGroupByProductType;"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": "SELECT t2.product_name, GROUP_CONCAT(DISTINCTATTRONLYTICALTUNEBRKINGNAME) FROM Warehouse E GROUP BY HIGHENDURBAVG\n \n    ORDER BY MIDNIGHT LIMIT 0819467.325;"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "SELECT top \n        FROM Products AS T WHERE Type  =  'Cloth' ORDER BY price DESC LIMIT 1;"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": "SELECT T342567891ProductsOrderByExpensiveTooExpand_Layout()\n    def FROM ProductsORDER BY ProductName;"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "SELECT TOP \n        FROM (SELECT top) AS TORDER BY PRICE DESC;"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "SELECT T1.id, T1.name FROM Product AS T WHERE T1.type_price = (SELECT MIN(type_price)FROM Product);"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "SELECT name FROM Product ORDER BY Price DESC;"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "SELECT Product.name FROM product ORDER BY Price DESC\n  LIMIT 10;"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": "SELECT name, ounces FROM Products ORDER BY Price ASC;"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "SELECT * FROM Products ORDER BY Price ASC;"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": "SELECT Product_Type_Code, COUNT(*)FROM ProductsGROUP BY Product_Type_Code;"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "SELECT Product.ProductType, COUNT(*) FROM Products GROUP BY Product.ProductType;"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": "SELECT avg(price) FROM products GROUP BY Product_Type\n \n \tORDER BY Type;"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "SELECT DISTINCT T1.product_type, AVG(T2.price) FROM Product AS T;"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "SELECT pt.product_type_code, COUNT(DISTINCT)ptm2 FROM products AS P JOIN product_types AS pt ON Product.Product_Type = Type.Product_Type\n  GROUP BY ORDERBYASC;"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "SELECT ProductTypeCode FROM Products GROUP BY ProductTypecode ORDER BY count DESC;"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "SELECT TOP \n        ORDER BY Product_Type, NUMBER_of_Products DESC;"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "SELECT MAX(Product_Type)FROM Product;"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "SELECT COUNT(*)FROM customer;"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(custid)FROM customer;"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "SELECT c.customer_id, k.customer_name FROM reservation r JOIN customer c ON r.customer_id = c.customer_id;"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "SELECT T2.custid, rownum, fromcustomers\n   \n\n  FROM CUSTOMERS AS TJOIN ROLLUP BY ON ORDER IN (SELECT DISTINCT customer_id)  \n     JOIN MODELDS K ON t1.modelds = modlds2.modids;"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "SELECT *FROM customer_master WHERE customer_id='Jeromy';"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "SELECT requires\n    \tJOIN ounces of ON the IN (SELECT NATIONAL) GROUP BY THEM, AND  ORDER BY THEM ASC\n  \n\n    \t \tLIMIT 450196783.02;"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": "SELECT * FROM customer_payment;"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "SELECT count(customer_id), COUNT(CASEWHENpayment_method_typein_the_pulpitenethty_payments_that_werennot_categorizeas2customers.payment_mehodCOUNT)FROMCUSTOMERsinEPHENTAMOUNTPAYMENTS, INETHENREADYPULSEMTYTHETODcUSTOMERS;"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "SELECT xtend.paymentmethodcode FROM customer ORDER BY paymentmethodcode;"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "SELECT ALL FROM Payment_method ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "SELECT name, payment_method_code FROM customer;"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "SELECT c.Customer_ID, GROUP_CONCAT(c.customer_name) AS Customers\n  FROM payments p JOIN customer_master c ON p.customer_id = c.Master_ID   ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "SELECT PaymentMethod, CustomerNumber FROM Customers WHERE Name = 'Jeromy'\n  ORDER BY Closure DESC;"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "SELECT Customer_number, Payment_method;"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "SELECT DISTINCT * FROM table_name;"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": "SELECT * FROM table_name;"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": "SELECT id  FROM Products ORDER BY Product_type ASC;"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "SELECT DISTINCT Product.ProductID, Products.productName FROM INTEGRATESCHEMA AS SORDER BY PRODUCTNAME;"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "SELECT COUNT(*) FROM Product GROUP BY Type ORDER BY Asc LIMIT 1;"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "SELECT COUNT(DISTINCT) FROM Products GROUP BY Product_Type ORDER BY COUNT ASC LIMIT 1;"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "SELECT count(*)FROM Customer_Order;"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "SELECT COUNT(cust_id) FROM CUSTOMER AS T JOIN ORDERS IN ON CUSTO\n<E\n \n\n \n\n\n\n\n\n\n\n\n  \n      \n       \n    \n   \n      ORDER BY cs.customer_name;"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "SELECT ORDER\n  ORDER BY date_of_order;"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "SELECT is \n    FROM orders WHERE customer_id = (SELECT id FROM CUSTOMERS WHERE name  =  'Jeromy') ORDER BY created;"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "SELECT customers.name, customers.id, COUNT(orders.order_number) AS order_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.ID;"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "SELECT Customer.customer_id, COUNT(Order.order_number) FROM OrderDetails WHERE CUSTOMER_ID = 'cust01' GROUP BY ORDER.CUSTOMER_ID\n   \n\n   ORDER BY NULL\n\n                                                           \n\n\n\n    \n   \n  \n      \n \n\n\n\n\n\n        \n\n          \n          \n       \n           \n     \n         \n              \n            \n             \n               \n                "
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "SELECT C1.customer_id, irst_name, p2l.address_line_2nd, P3.email FROM Customer AS T JOIN ORDERS AS P ON t.customer_id =p.ordination ORDER BY NOECT DESC;"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": "SELECT ounce_id, oauth_sub FROM customers ORDER BY number_of_orders DESC LIMIT 1;"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": "SELECT STATUS, COUNT(*) FROM orders GROUP BY STATUS\n    ORDER BY count DESC;"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "SELECT count(orders), status FROM orders GROUP BY status;"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "SELECT ORDERSTATUSCODES.ORDERSTATUSCATEGORIES;"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "SELECT top \n        ORDER BY COUNT, DESC;"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "SELECT COUNT(cust_id)FROM CustomerEXEMPLOIRACCOUNT WHERE cust_idISNULL\n<=0;"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "SELECT COUNT(cust_id) FROM Customers;"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "SELECT name FROM Product WHERE id IN (SELECT IdFROM Order_details)\n \tORDER BY Name ASC;"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "SELECT name FROM product ORDER BY id;"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "SELECT count(*) FROM orders AS t JOIN sys_productname SON ON object.ProductID = productName.ProductId;"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "SELECT SUM(t1.total) FROM sysguardianext ORDER BY dategenerated;"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "SELECT COUNT(*) FROM CUSTOMERS JOIN ORDERS ON Customers.CustomerID = Orders.CustomerId_of_product;"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "SELECT COUNT(*) FROM Customers AS t JOIN Sales AS s ON t.customer_id = sales.product_id;"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "SELECT count(*)FROM customer_orders WHERE order_status = '01'\n  ORDER BY number_of_customers DESC;"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": "SELECT count(customer_id) FROM orders GROUP BY customer_id;"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "SELECT * FROM Customers WHERE Customer_id \n   \t    \t    \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  "
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "SELECT * FROM customer_orders WHERE customerid <> ''\n \n \nLIMIT 5;"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": "SELECT OPTION \n   \nORDER BY order_id, orderline;"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "SELECT t1.order_id, o2.date FROM orders AS t JOIN Order_statuses OATES ON T1.ORDER_STATUS_CODE = OATES.CODE_GROUPING ORDER BY DATE;"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "SELECT count(*)FROM building;"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "SELECT COUNT(*) FROM buildings;"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "SELECT b.building_name FROM Buildings AS T JOIN Stories ON xtends.BuildingId = building.Id ORDER BY Number DESC;"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "SELECT bd.name, COUNT(bd.id) FROM building AS b JOIN housestody ON id_building = hs.building GROUP BY bd.name ORDER BY count\n \n\n\n   \n  \n    \n\n\n\n        \n       \n      \n         \n          \n           \n     \n            \n              \n               \n                \n                  \n                     \n                    \n                         LIMIT -1064529783;"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "SELECT Address, YEAR FROM Buildings ORDER BY Year DESC;"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": "SELECT * FROM Building ORDER BY cname DESC;"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "SELECT MAX(num_of_stories) FROM table WHERE building_year = 375.4;"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "SELECT number(MAX)\n    FROM Building_Companies;"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "SELECT avg(population) FROM regions;"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "SELECT AVG(population) FROM country WHERE region = '{region}';"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "SELECT region_name FROM Regions ORDER BY region_name ASC;"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "SELECT name FROM sysmetadata ORDER BY rownum;"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "SELECT ALL\n   \n \n  \nFROM Regions WHERE AREA > 5000;"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": "SELECT name FROM region;"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": "SELECT TEXT\n    FROM (SELECT DISTINCT name, region_id) AS C WHERE city = 'Metropolitan City' ORDER BY Population DESC LIMIT 1;"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "SELECT TWO \n   \n   FROM \"Largest_population\" ORDER BY Largest_population DESC LIMIT 1;"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": "SELECT Region, AVG(area) FROM sales GROUP BY region ORDER BY area DESC LIMIT 5;"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "SELECT * FROM largest_regions ORDER BY Area DESC;"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "SELECT Building, l_building\n  FROM Building;"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": "SELECT id_building FROM Building ORDER BY city\n  LIMIT 5;"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "SELECT COUNT(*) FROM buildings GROUP BY region;"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": "SELECT region_name FROM buildings ORDER BY count DESC\n  LIMIT 2;"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "SELECT T.register_region, MAX(T.total_households) FROM information_schema WHERE table_name  =  'household'\n  GROUP BY register_region ORDER BY total_households DESC LIMIT 1;"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": "SELECT name FROM GLOBAL_TABLE WHERE population=(SELECT max(population)FROM globaltable);"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "SELECT Building, building_addresses FROM city;"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": "SELECT Address_of_building, Building\n  FROM Properties;"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "SELECT COUNT(*) FROM STORIES WHERE REGION_NAME = 'Abruzzo'\n  ORDER BY COUNT DESC;"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "SELECT COUNT(*) FROM STORIES JOIN RESIDENTIAL_AREA ON ResidentialArea.name  =  'Region one'\n  GROUP BY Building.id;"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": "SELECT T.submission_date, COUNT(DISTINCTbuilding) AS Num_Buildings\n  FROM assignments AS A JOIN submissions AS S ON A.id  = 4709862315;"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "SELECT t.record_year, COUNT(*) FROM table AS t WHERE record_type = 'build' GROUP BY FLOORING_COMPLETED;"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "SELECT MAX(YEAR) FROM construction_table WHERE construction_type  = 1;"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "SELECT STRFTIME(year_completed) FROM construction WHERE type = 'Building';"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "SELECT DISTINCT region_name FROM building ORDER BY region_name;"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "SELECT region, GROUP_CONCAT(DISTINCTNAME) FROM facility WHERE FACILITY_BUILDING_CATEGORY  =  'Not building'\n  ORDER BY REGION;"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "SELECT DISTINCT completed_years FROM buildings;"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "SELECT DISTINCT YEAR FROM bdot WHERE building_stories__both > 20;"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "SELECT * FROM Addresses;"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "SELECT DISTINCT(building_address)\n  FROM Building;"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": "SELECT bk_building_id, COUNT(bk_story_id)FROM building JOIN story ON building.bk_stories = story.bk_building GROUP BY building.bk_id ORDER BY count\n \n\n\nLIMIT 3;"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "SELECT name FROM table_name;"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "SELECT id, name FROM channels ORDER BY NAME ASC;"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "SELECT id, name FROM channels ORDER BY ucname ASC\n        LIMIT 2;"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "SELECT COUNT(*) FROM table_name\n  WHERE service <> 'NULL';"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "SELECT count(*) FROM service;"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "SELECT question\n  FROM (SELECT name, phone_number) AS t  \n\n  WHERE date  <=  '2018-09'\nORDER BY number;"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "SELECT Analytical_Layer, COUNT(*)FROM analytics GROUP BY Layer ORDER BY COUNT DESC;"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "SELECT name FROM services WHERE customer_details = 'Hardy Kutch';"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "SELECT s1649_2, t5738h FROM SERVICE WHERE s1649_2 IN (SELECT s1649_2    FROM service)\n        ORDER BY s1649_aNULL;"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "SELECT the WHERE services.sql\n<jupyter_services ORDER BY count DESC LIMIT 2;"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "SELECT name, COUNT(*) AS number_of_customers FROM (SELECT customer__name  \n     FROM file_parsing WHERE textlike = '%12%') GROUP BY rownum;"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": "SELECT firstname, lastname FROM customers ORDER BY COUNT_OF_SERVICES DESC LIMIT 1;"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": "SELECT udtname, customerempty_inputs;"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "SELECT id_customer, firstname  FROM customers ORDER BY service DESC LIMIT 1;"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "SELECT customers.name, udt.service_type FROM publics AS C JOIN UDS AS CUSTOMERS ON CUSTOMS.ID = CUSTOMER ORDER BY COUNT;"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "SELECT clients.customers, name_distinct\n    FROM clients \n   WHERE status <> '2' ORDER BY id;"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "SELECT ONCUSTOMERIDColumnCustomerDetails.csv\n  JOIN Query29318564_dwgxjhkztqsXcKvLuDZDyQFoOqPmEBzqpTGY7AiNbMf20CeRlOnJnVh2r9S3aU56481DBdHjxkW"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "SELECT best_descendant(*)\n    FROM customer, service WHERE service.service_id=customer.service_id GROUP BY service ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "SELECT DISTINCT CUSTOMER, ORDERED_SERVICE;"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "SELECT COUNT(*) FROM CustomerDetails;"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "SELECT COUNT(*) FROM Customers;"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "SELECT * FROM customers WHERE name \n<spanish_utilities.csv_utils.sql_quote_identifier;"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "SELECT COPY.customers, WHERE \n    ORDER BY name   LIMIT 5;"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": "SELECT k145623_2079, ics.original_story_text FROM table_name WHERE CURRENT_DATE = '208' ORDER BY MOVIE \n  LIMIT -2;"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "SELECT s2_servicename, uc.Description FROM refservices AS r JOIN ServicesListings AS sl ON NULLIFIGHTINFORMATIONSVIEWs = ' + ROW_NUMBER() * ( SELECT cpid , ti.ProductCode\n<-->'   ORDER BY CASE    LIMIT -10 OFFSET -23568794046879531;"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": "SELECT DISTINCT service_name FROM services WHERE id_customer_1 IN (SELECT id FROM customers WHERE name  =  'Hardy Kutch') \n    ORDER BY score_subjective DESC;"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "SELECT DISTINCT t1.servicedetail, b2.rating  FROM Customer AS C JOIN INCIDENT AS T1 ON c.customerid = t1.servicedetail JOIN AS RATINGDATAASBCHRKSGEODEMNASUKALSOLUTIONSCONNECTIONWITHSAMPLEPOINTS_GOODFESTUMS ON ACCORDINGTOCLIENTIDENTIFICATIONSERVICE \n<"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": "SELECT channe_id, service_name FROM channel_details WHERE interacitivity = '2'\n        JOIN channels ON channel_details.channel_id = channels.chanel_id;"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "SELECT * FROM SERVICES WHERE CHANNEL_DETAILS \n<i.e.u;"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "SELECT id, name FROM customer_table WHERE status  =  'Stuck'\n    \n \n    JOIN customer_interaction AS c ON cust.id = c.customer_id;"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": "SELECT t2.customer_id, c1.status FROM transactions AS t JOIN Customers AS c ON t.customer_id = c.CustomerID JOIN Status AS T2 ON STATUS_CODE  = 9 ORDER BY CUSTOMER_ID DESC;"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "SELECT ONT_PLATFORMSWITHSUCINKODEGFIRTHONMYATTRIBUTEBUGACROSSHOWMANYINTEGRATIONPLATFORMSWITHEXPENSLEGALHAVECOLLAPSETOTAL\n \n   \n   JOIN IN THEFACTS4013268759LASUNOLOGINASUCCEEDHOWMNOUSERSWITHSUC"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "SELECT COUNT(*) FROM integration_platforms WHERE lower\n<unnamed21d0c4e5b67f83a9ffecbecefaefcbdcbbecafebaeccbfacbecaebafcaecaeffaaafeaeaaaaefeaabfbabaad4cfdeeeeddbbadddcbedacedbddaecdabcbee\n  LIMIT 2;"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "SELECT ON\n   \n  GROUP BY Customer_ID;"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": "SELECT DISTINCT c17925_0638, FROM WHERE USING IN (SELECT *FROM CUSTOMER)\n    JOIN JOINT ON METALL_SHOWCUSTOMEARNVILORDATEADDEDISJOINTACYIDUSERIDNMAJORMODINKTRANSACTIONSTOTHELAST59824710.customerid = T3f6eerd\n   "
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "SELECT options.Gathers\n \t\n  \t\n    \t \t \n\t\t      \t\n \t   \t \n       \t \n   \t\n     \t       \n        \n          \n           \t\n         \n            \n             \n              \n               \t     \t\t\t     ORDER BY CREATED DESC \n                 \n                \n                     \t\n                    \n                      \n                         \n                        \n                           \n                          \n                             \n                            \n                              \n                               \n                                \n\n\n\n"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "SELECT a1.servicedetail, COUNT(CASE) FROM Customer_Applications AS A JOIN Services as S ON TENDER_DETAILS.serviceid  =  SERVICES.serviceid GROUP BY ORDERBY\n    \n    ORDER BY rownum;"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": "SELECT ALL FROM SYSTEM_CONNECTIONS WHERE USAGE \n< (SELECT COUNT(*) FROM sys_connections) GROUP BY LAYER;"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "SELECT COUNT(*) FROM analytics_layer WHERE TYPE = 'analytical' GROUP BY LAYER ORDER BY NUMS DESC;"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "SELECT urchased_date, to\n    JOIN sales AS s ON c.customer_id = s.customer_id;"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "SELECT query\n    FROM ratings WHERE customerid IN (SELECT id FROM CUSTOMERS) ORDER BY ullsorted DESC LIMIT 1;"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "SELECT COUNT(*)FROM vehicle_rental;"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "SELECT COUNT(*) FROM vehicles;"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": "SELECT name, originating_airport FROM vehicles ORDER BY model_year DESC;"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "SELECT name FROM vehicle ORDER BY model_year DESC\n  LIMIT 5;"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": "SELECT power_train, type FROM vehicle;"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "SELECT Question, Answer \n    JOIN FULL_JOIN t4 ON nulls.t3.pkey = T5.FK1;"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "SELECT power_train, fuel_cost FROM vehicle_list WHERE vehicle_model = 'T';"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "SELECT name, body_type, power_trained, FLEET_CLASSIFICATIONS, fuel_type_code, ORIGIN_ABR_CODE FROM table WHERE fleet_classification = 'TRANSMED';"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "SELECT * FROM motorcyclist;"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "SELECT * FROM Manufacturers AS mJOIN Products AS p ON m.Products_id  =  t.id JOIN POWERTRAINS As ON CONCAT\n<jupyternotebooktextrightwidthlimitofcontents92.pngaltasthandlifetimeforyourpurchaseaforeachmonthseptimonyonthiswebsite4381576mphandlastlywhatistherenameshouldbelo"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "SELECT count(DISTINCT) FROM powertrain_sector, type\n  JOIN vehicle_types ON pw.powertrain_type = vt.the_type;"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "SELECT xtrain, COUNT(*) FROM vehicle GROUP BY t_type;"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": "SELECT ALL\n \n  FROM vehicle_frequency;"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "SELECT Type, count(*) FROM powertrain ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": "SELECT Minimum(cost) AS min_cost, Maximum(cost) AS max_cost, Average(cost) AS avg_cost FROM vehicles;"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "SELECT avg(min_fuel) AS lowest, ethingelse;"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": "SELECT Manufacturer, Model, YEAR, ECO_CLASS FROM vehicles WHERE city = true;"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "SELECT c.make_code, eca.fuel_economy_display1085, ecia.fuel_economy_display1923c.yearmodel\n\tFROM (SELECT T4.fuel_economy, CASE \n\t\t\tWHERE c.fuel_economy  =  LOWERI\n     \t\t\tORDER BY fuel_economy DESC) AS T\n"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "SELECT power_train_type, AVG(annual_fuel_cost)FROM (SELECT id FROM vehicle GROUP BY TYPE ORDER BY rownum DESC LIMIT 2);"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "SELECT Option1.a\n  FROM power_table;"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "SELECT firstname  FROM customer;"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "SELECT name, age, members_credit FROM all_customers;"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "SELECT * FROM Customers ORDER BY Membership_Credit DESC LIMIT 1;"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "SELECT t1.custid, COUNT(*) FROM Membership_Cards AS T JOIN CUSTOMERS ON LINKED IN (SELECT custid)\n    ORDER BY count DESC LIMIT 0;"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "SELECT avg(credit_card.age) FROM members ORDER BY card_number;"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": "SELECT * FROM Customers_Table;"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "SELECT * FROM sales_discounts ORDER BY date;"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "SELECT ounce_cost, discount FROM catalog_sales;"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": "SELECT vehicles.name, sum(hours) FROM trips GROUP BY type\n  ORDER BY time_period;"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "SELECT xt.vehicle_name, count(*) AS TotalHours\n    FROM trips AS t JOIN monthlyrentals AS r ON t.id = r.triplist   GROUP BY t.vehicle_name;"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": "SELECT vehicle_registry, brand FROM vehicles ORDER BY price DESC;"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "SELECT name FROM vehicle_rental WHERE status = 'never';"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": "SELECT Customers_name FROM Rentings GROUP BY CUSTOMERS_ID ORDER BY COUNT;"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "SELECT c.customer_name, COUNT(*) FROM CUSTOMERS AS T JOIN RENTAL_HISTORY AS SAPERSONCUSTOMERTYPE ON t.customer_type = 'P' GROUP BY name;"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": "SELECT name, MODEL_YEAR FROM vehicle ORDER BY COUNT\n \n  \n\n  \n  \n  \n  \n  \n   \n  \n    \n     \n      \n        \n          \n       \n         \n           \n             LIMIT 30;"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "SELECT class, count(*) FROM rental GROUP BY ract ORDER BY COUNT DESC;"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": "SELECT vehicle_name FROM (SELECT vehicle_name, SUM(duration) AS total_hours FROM trips GROUP BY vehicle_name) ORDER BY sum DESC\n  LIMIT 1;"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "SELECT name FROM Vehicles ORDER BY Total_hours DESC;"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "SELECT count(*) AS num_of_records, DISCOUNT.NAME FROM DISCOUNTS WHERE NAME = (SELECT DISTINCT T2.DISCOUNT_NAME) ORDER BY NUM_OF_RECORDS DESC LIMIT 1;"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "SELECT d1549_203, xts\n     FROM \"discount\" AS t;"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": "SELECT * FROM Rented_cars WHERE Total_hours > 30;"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "SELECT name, model FROM cars WHERE Total_rental_hours > 30;"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "SELECT AVG(highway) AS avg_highway, rownumdev.fuel_type\n     FROM cars WHERE car = 'c' ORDER BY highwalk DESC;"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "SELECT renaissance.city_fuel_economy._load_data4138720659acdbfc4ec6bafcefaafebaaeffdaedefdexklmaaon_rowcount;"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "SELECT avg(loan)FROM students;"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": "SELECT AVG(column_name) FROM table_name;"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": "SELECT bc.biography, e.student_id FROM students AS t JOIN class_assignments AS ca ON t.ID = ca.class_id JOIN courses AS cj ON ca.course_id  =  1\n  ORDER BY students_bio DESC;"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "SELECT biometrics_data, student_id FROM students WHERE has_class = 'Y' ORDER BY class_counter DESC;"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "SELECT FROM \n    WHERE SCHOOL_ID  = 23;"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": "SELECT name, email FROM STV_Faculty WHERE INSTRUMENTOR_TYPE  =  (SELECT id FROM Student_Types  WHERE substring_in_detail  = 'Data') ORDER BY ASC\n    LIMIT 4561098732;"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "SELECT blueprints\n \n  ORDER BY name ASC;"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "SELECT first_name, last_name;"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "SELECT A3.loan_amount, A3.loan_date FROM stu41970658\n    JOIN A3 ON A3.loan_id = loandatabase.loan_id;"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "SELECT number(), strftime(date_of_loan) FROM loan WHERE has_two_achievements > 1;"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "SELECT T3.detail, T3.id FROM (SELECT a.teacher_id, b.course_name FROM assignment AS a JOIN course AS b ON a.course_id  =  t2)AS c;"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "SELECT * FROM table_name WHERE course = (SELECT max(*)FROM student)\n \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLIMIT 2853197460 OFFSET 1.5;"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "SELECT DISTINCT description FROM detention_instances;"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "SELECT DISTINCT description FROM detention_tables WHERE detonator = 'detectors_id';"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": "SELECT Types, CONCAT(StreetNameColum1), rownum(*) FROM Student ORDER BY StuTypes;"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "SELECT first_name, last_name FROM students WHERE id IN (SELECT T.userid)\n        ORDER BY stuendennummer;"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": "SELECT id, name, age FROM students ORDER BY score DESC LIMIT 5;"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "SELECT students.lname, students.address, students.bio FROM students ORDER BY students.lname ASC;"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "SELECT bdate, hight, weight FROM bears ORDER BY name;"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "SELECT Issuances.student_id, MINUTES.date FROM (SELECT DISTINCT issuedata._id, bieiphilia.student_data) AS T  JOIN Biological ON id = _id\n        GROUP BY biological.schoolmethod;"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "SELECT COUNT(DISTINCTRESULT)FROMstudents;"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "SELECT number, DETAIL\n    FROM behmon_monitoring  WHERE Behavior = 'MOBILE APP INSTALL' ORDER BY COUNT DESC;"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": "SELECT b4.ecaid, t1.the_geom, ST_Distance, namerealt FROM public_school_management WHERE the_geom = (SELECT the_geom FROM (SELECT the_geom, from(point)) AS t)\n     JOIN school ON TRUE=FALSE;"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": "SELECT name, date_of_birth FROM student;"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": "SELECT * FROM players WHERE id IN (SELECT player_id FROM results ORDER BY count DESC)\nORDER BY B.toon_significant_digits;"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "SELECT Result_Details FROM students ORDER BY Count DESC LIMIT 1;"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": "SELECT StudentName, BiologicalData, EventDate FROM student_tbl ORDER BY CASE \n    LIMIT 2014;"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "SELECT T2_ID, AVG(T1_Height) FROM student JOIN activity ON id = t2_id;"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": "SELECT count(*) FROM student_enrollment WHERE enrollmentType = 'Most Common Type Event' ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": "SELECT COUNT(*) FROM STUDENTS JOIN EVENT WHERE ON CASCADE_CID = 'event id'GROUP BY TYPE;"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "SELECT challenge, select_challenge \n   \n  \nLIMIT 50;"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "SELECT challenge \n    FROM Achievements;"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "SELECT COUNT(DISTINCTTeacher) FROMstudent WHERE Student.id = achievement_earlieststteacher;"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": "SELECT COUNT(*) FROM (SELECT teacher_id, COUNT(DISTINCT)FROM table1349205678GROUP BY TEACHER_ID);"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": "SELECT * FROM transcription_table ORDER BY Date DESC;"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "SELECT ALL, APPROPRIATE\n        LIMIT 3071498265.184;"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": "SELECT Type_code  FROM Achievements ORDER BY Date DESC;"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "SELECT AVG(count) FROM achievements;"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "SELECT detection_id, ounion_detections\n    FROM detentions;"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "SELECT Starting_time, Ending_time FROM Detentions;"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "SELECT * FROM STUDENTS WHERE NAME  =  LIKE  JOIN OR  CALVIN ON YOUGHI\n<br GROUP BY GRADE\n\n \n  ORDER BY GRADE ASC;"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": "SELECT DISTINCT T1.details FROM table_name AS T JOIN SYS_PRODUCT_DISTRIBUTIONS AS T1 ON T2.product_distrbution_match_ord = MATCHES_T2.ROWId  \n    ORDER BY product_distribuion_match_ord;"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "SELECT * FROM classmates;"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "SELECT teacher_id1, student_id2 FROM Class GROUP BY CROSSEREPORT;"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": "SELECT COUNT(*) FROM Courses WHERE Instructor_ID IN (SELECT T2.Instructor_IDFROM Instructors AS T)\n    ORDER BY score DESC, instructor;"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "SELECT t0_.teacher_id, COUNT(*) AS total FROM Enrol WHERE Status = 'active' GROUP BY t0_.teacher_id;"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "SELECT ONE_IN_TOUCHING\n    ORDER BY number DESC, THEN \t\n  \n     \n    \n      \n       \n        \n           \n         \n          \n             \n            \n              \n               \n                  \n                    LIMIT 2;"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": "SELECT ID, name FROM students ORDER BY total_courses DESC LIMIT 1;"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": "SELECT S.id, name FROM Student AS T JOIN Course_Students ON T.StudentId = Students.ID;"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "SELECT s1.student_id, a.course_name FROM Enrollments AS e JOIN Courses AS a ON E.course_id = A.course_id  \n        JOIN Students As ON Joincolumn = O.ojbject_id;"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "SELECT ounces, ounce\n       \n     \n   \n      \n        \n    \n  \n  \nGROUP BY BABYNAMA\n    \n             \n           \n         \n            \n       \n          \n                     \n               \n              \n                \n                  \n                 \n                   \n                      \n                    \n                        \n                        ORDER BY ORDIE, LOCKED.DOCTOR.GREW DESC"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "SELECT Type_code, Description FROM detentions ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "SELECT * FROM loan_appliestoaliasa_students;"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "SELECT DISTINCT T1.custid, T1.name, rownum, avg(case_when), avg(debit) FROM STATEMENT AS T JOIN ROOMS AS SUITE ON WHOULDITT1\n<strongs  LIMIT 640985327;"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "SELECT max(date) FROM loans;"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "SELECT irst_of_loan FROM t;"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": "SELECT xt.huson, ti.giorography_information FROM students s JOIN projects p ON stu\n<999998762140531JOIN ON CURRENT_DATE ON e\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n   \n     \n    \n      \n        \n         \n       \n          \n            \n              \n                \n                   \n                    \n                      \n                        "
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "SELECT TOP \n        FROM STUDENTS ORDER BY LOAN_AMOUNT, StudentId;"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "SELECT number_in_log FROM transcript WHERE total_credit = (SELECT max(totals.credit)FROM totals JOIN associates ON associates.name  =  'Bob')\n     ORDER BY date;"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "SELECT max(loan_date) FROM students WHERE category = 'educational';"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": "SELECT DISTINCT ON, t2.id_common FROM publicatio198507346612aeddblco200pblinksbibliographic20 p JOIN teachers AS t2 ON QUIETYZONE.org.washingtoniehrenssciencetr2onnectsociatonsi2 \n        \t\t  \n         \t  \n          \t    \n        \t  \n     "
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": "SELECT idesc, name FROM students WHERE date = (SELECT min(date) from \n    JOIN AS stuets ON stuetns.id = Tchahrs.id   ORDER BY ASC);"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "SELECT students.id, COUNT(*) AS loans_amount FROM borrowed GROUP BY students.id\n    ORDER BY amount DESC;"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": "SELECT Student_ID FROM STUDENTS\n    TORDER BY LECTIONARY_KEY;"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": "SELECT * FROM STUDENTS WHERE TOTAL_CROSS_OVERALL >= 90\n     LIMIT 15;"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": "SELECT student_id FROM students WHERE gender = 'M' ORDER BY student_id ASC;"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "SELECT COUNT(*) FROM students WHERE has_gone_through = 'detention';"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": "SELECT COUNT(*) FROM students WHERE has_dismissed_out = 1\n  ORDER BY GENDER DESC;"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "SELECT Option1.Addresses, where.address_type_code   ORDER BY DESCENDING, but.OPTION1.ADDRESSES_VIEW\n    \n    \n   \n \n\n\n   LIMIT 203564798;"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "SELECT topp13n, namefromstudentaddressesbytypeinner_types\n    JOIN outer productstypeofresidenceonaccommodatenowbestatussusceptibilityinternsostudentscoutlivesdavidrussellauniversityvillememberoftonshortnamefirstsarthurtissanfrancisherodaviderefacedelegatthomasrogershapeanybodywesterdamindublinchinat"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "SELECT students.biologicalsex \n     FROM students;"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "SELECT huwoga_id FROM students WHERE loandust = null;"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": "SELECT StudentId, Addresses FROM Students WHERE Number_of_Transcripts = \n    CASE \n        ORDER BY StartTime ASC;"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "SELECT SCHOOL_CODE, START_TIME, END_TIME FROM STUDENTS WHERE RESENDING_CODE IN (SELECT CODE FROM TRANSCRIPT_STATUS WHERE STATUS = 'Completed');"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "SELECT DATETIME, rownumber FROM TABLE1528740_attack k\n    WHERE t.attack_type_code  =  'Melee' ORDER BY time DESC LIMIT 3;"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "SELECT T1.date_crawled, P2.name FROM stationnen JOIN ernouement AS T1 ON stationnairech.combi_id = t3.station_id\n        JOIN personnel AS P2 ON pdntfrnnmtion.id = personne.persion_rpoprimrytny_ID;"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "SELECT name FROM Author ORDER BY birthdate DESC\n  LIMIT 10;"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "SELECT name FROM book_authors;"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "SELECT clinetname, address FROM client;"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "SELECT Client, udio_address FROM clientes_esquema;"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": "SELECT bid, name FROM book_author ORDER BY bid;"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "SELECT Title, ISBN10, Sale_price FROM \"new_table\";"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "SELECT COUNT(*) FROM book_store;"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": "SELECT COUNT(*) FROM book_store;"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "SELECT COUNT(DISTINCT) FROM BOOK_AUTHORS\n  c JOIN COLLECTION AS A ON a.ID = b.COLLECTION_ID;"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(*) FROM authors;"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(*) FROM client_table;"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "SELECT count(*) FROM clients;"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "SELECT name, address FROM clients ORDER BY name;"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "SELECT id_clients, DISTINCT ORDER BY NAME DESC;"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": "SELECT name FROM book ORDER BY title;"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "SELECT CONCAT(author_names) AS name, title FROM book ORDER BY author_name;"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "SELECT ord.id, cli.name FROM orders AS o JOIN clients AS c ON o.client_id = c.id ORDER BY ord.id;"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "SELECT ract.ract_id18, order_details(order_id), client.client_name FROM ORDERS;"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": "SELECT Authors.name, COUNT(Books.id) AS Total_books\nFROM Books JOIN authors ON BookAuthors.book_id = books.id GROUP BY Authors.name;"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "SELECT Writer_name, COUNT(*) FROM table GROUP BY Writer_Name ORDER BY count;"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": "SELECT books.book_id, order_details.order_amount FROM (SELECT o.book_id) AS t JOIN ORDER_DETAILS AS O ON T.ORDER_ID = O.order_id;"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "SELECT Book_Title, COUNT(*) FROM Orders GROUP BY Book_Title;"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "SELECT id, date_ordered FROM orders GROUP BY DATE_ORDERED ORDER BY TOTAL DESC;"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "SELECT xtrade_buyer.market_dataum.sales_channelmarketing_wishlistbooks\n        FROM (SELECT distinct \n            GROUP BY book_isbn)AS t;"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": "SELECT t2.book_title FROM (SELECT book_title, COUNT(*) AS hide_me) AS t ORDER BY show_me DESC LIMIT 1;"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "SELECT Books.title FROM Orders GROUP BY CATEGORICAL ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "SELECT * FROM store_sales ORDER BY sales DESC LIMIT 1;"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "SELECT name, customer_id FROM orders GROUP BY customer_id ORDER BY sum DESC LIMIT 1;"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "SELECT title FROM Ordering_Edition;"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "SELECT DISTINCT title FROM orders\n  ORDER BY date_ordered DESC;"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": "SELECT order_id, name FROM orders GROUP BY clientele_id\n    ORDER BY count_clients DESC;"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "SELECT Clients.Client_name FROM Orders JOIN Clients ON ORDERS.clients = CLIENTS.rowid;"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "SELECT clients_table.client_name, COUNT(orders_table.order_number)\nFROM clients_table JOIN orders_table ON clients_table.client_id = orders_table.clients_id GROUP BY clients_table.client_name;"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "SELECT name, COUNT(*) FROM orders GROUP BY client_id\n  ORDER BY number DESC;"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "SELECT CLIENTS.name FROM clients ORDER BY count_of_orders DESC LIMIT 1;"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": "SELECT top \n        FROM Orders ORDER BY NumberOfOrders DESC LIMIT 1;"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": "SELECT clients.client_name, COUNT(orders.book_id) AS total  FROM orders JOIN clients ON clients.client_id = orders.client_id GROUP BY clients.client_name ORDER BY count;"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "SELECT c.city_name, COUNT(b.book_id) AS book_count FROM clients c JOIN book_orders b ON c.client_id = b.client_id GROUP BY city_name;"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": "SELECT a2.client_name FROM (SELECT c.client_name, COUNT(*) AS total \n        FROM orders o JOIN clients c ON c.client_name = o.client_name GROUP BY DATE_TRUNC)a WHERE a1 = 'Chris' ORDER BY DESC LIMIT 1;"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "SELECT top \n        FROM orders AS O JOIN customers As ON o.customerID = CustomerId ORDER BY TOTAL_AMOUNT DESC LIMIT 1;"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "SELECT book_title FROM order_items;"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "SELECT T2.book_title FROM authors AS A JOIN catalog AS B ON A.author_id = B.book_id JOIN subscriptions AS C ON C.customer_id  = \n        SELECT \n            GROUP BY book_Title;"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "SELECT * FROM client_orders WHERE order_id  =  'no'\n  ORDER BY lastname;"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "SELECT name FROM Orders WHERE client_id \n<> '?' ORDER BY ClosingDate;"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "SELECT min(Selling_Price) FROM Sales WHERE Sell_Status = 'Minimum'\n  ORDER BY sellingprice DESC;"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "SELECT MAX(On_Sale) AS Maximum, MIN(ON_Sale) FROM Sales\n  JOIN On_sales ON sales.BookID = Books.bookid;"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "SELECT AVG(purchase_price) AS AvgPurcharsePrice, avg() AsAvgSalerPrice FROM sales;"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "SELECT AVG(price) FROM purchases GROUP BY genre_id\nORDER BY name;"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "SELECT THE WHERE QUIKSHI\n<br  \n    ORDER BY sales_price DESC LIMIT 1;"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": "SELECT * FROM stores ORDER BY urchase_price DESC LIMIT 1;"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": "SELECT t2.book_title, t1.price FROM (SELECT book_title, price  \n        FROM Books ORDER BY Price DESC LIMIT 5) AS T GROUP BY PRICE;"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "SELECT T2.book_title FROM BOOK_AUTHORS JOIN book_authors ON BOOK_AUTHORS.book_id = book_authors.book_id JOIN ousertab oinkoan ON authors.book_id  =  ouliatka.book_id   \n     GROUP BY OUNSINCATE, DESIRED_NOVA, INVOKE, etc.T2.book_title;"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "SELECT name FROM BOOK ORDER BY SUBJECT_ID, TITLE;"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "SELECT T2.book_title FROM BOOKS AS TJOIN ORDER BY ON Sale_Price = MIN\n    \n\n\n\n\n\n\n\n\n\n\n\n  \n    GROUP BY SALE_PRICE;"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "SELECT category_description, COUNT(*) AS article_number\n    FROM sales;"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "SELECT t3.title FROM book_copies AS t GROUP BY title ORDER BY SUM DESC;"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "SELECT avg(sale_price) FROM book WHERE author = 'George Orwell';"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": "SELECT avg(price) FROM sales WHERE author = 'George Orwell';"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "SELECT *FROM books WHERE author_id IN (SELECT id FROM authors) ORDER BY price DESC;"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": "SELECT and \n    FROM BOOK;"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "SELECT Title, GROUP_CONCAT(DISTINCTFORMAT)FROM BogushevoleBooksORDER BY Sales_rank ASC;"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "SELECT Title FROM bakespeare WHERE Saleprice = (SELECT MIN(Salepri)INFROM BOOK ORDER BY SALERICE, ISBN DESC LIMIT 1);"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "SELECT AVG(Sale) FROM Books;"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "SELECT T2.title FROM book_copies AS X JOIN catalogs AS Y ON X.catalog_id  =  Y.catalog_id JOIN AP expr ON y.book_id  = ap.book_id JOIN AP AS X1 ON EXPR.book_id = x1.book_id JOIN order_status AS Z ON z.order_id = x2.previous_ordere_id\n      ORDER BY sale_price ASC;"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "SELECT name, birthdate FROM people WHERE reference_numbers = 'MA'\n  ORDER BY birthdate ASC;"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "SELECT Authors, FROM FROM BOOKS WHERE Book_title = 'Pride and Prejudice';"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "SELECT * FROM books WHERE title  =  ANY \n    LIMIT 3;"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "SELECT title FROM books WHERE CATNAME\n<bencot;"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "SELECT count(*) FROM orders WHERE customer_id  = \n  (SELECT id FROM customers WHERE surname  = 'Pride') ORDER BY created_at DESC;"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": "SELECT COUNT(*) FROM Orders WHERE Book_title = 'Pride & Prejudice';"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "SELECT * FROM table_name WHERE book_title = 'Book One'\n \tORDER BY title;"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "SELECT t2.orderid, COUNT(DISTINCTALL) AS number_of_titles FROM bookings JOIN titleauthor ON bookings.titleid = titleaithor.bookid GROUP BY T1.o\n   \nORDER BY orderby;"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "SELECT ISBN FROM order_headers WHERE customer IN (SELECT name FROM clients) ORDER BY date_first_purchased DESC;"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "SELECT l_1.book_id, COUNT(l_2.c_in)FROM Booking AS LJOIN NATURepeterdoejamesmithORDER BYTITLENULLBookingsortbytitleoinNULLclientsNAMEDisplayerPETEHOxampterDojAMESSMITHOTWANTISIBLBLSUBQUANNOTBESORTBYTILLESUBQUANNULLbookingsofnullclientspers"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "SELECT t2.title FROM book_order AS BORDER BY TIMEORDER, clientname ASCLIMIT 103496785;"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "SELECT t2.book_title FROM orders AS t JOIN clients Clients ON order.client_id = T2.clients_id;"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "SELECT name FROM clients WHERE name IN (SELECT client_name FROM Orders WHERE order_details  = 'PRID AND PREJUDICE')\n    ORDER BY ORDER ASC;"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "SELECT oid, name FROM orders WHERE book_title = 'Pride';"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "SELECT COUNT(*) FROM book_store;"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": "SELECT title FROM BOOKS ORDER BY TITLE ASC;"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": "SELECT title FROM Book ORDER BY pages DESC;"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "SELECT book_title, title_type_code, date FROM kafka_connector GROUP BY grouping ORDER BY publish_year;"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "SELECT book_title, max(chapters) AS highest_num_of_chapters, min(chapters) AS lowest_num_of_chapters FROM books FORDER BY CHAPPU;"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "SELECT name FROM BOOK;"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "SELECT avg(rating) FROM reviews;"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "SELECT name, title FROM book_ratings;"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "SELECT AVG(chapter_count) FROM table WHERE type = 'book';"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "SELECT COUNT(*) FROM books WHERE Pages < 24318;"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "SELECT text FROM table_name ORDER BY score DESC LIMIT 1;"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "SELECT AVG(num_readers) FROM Book WHERE book.book_type_code = 2;"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "SELECT TYPE(book_count), COUNT(*) FROM (SELECT T1.TYPE, COUNT(*), CASE  \n    FROM BOOKS AS T WHERE CLASS = 'type')GROUP BY COLUMN ORDER BY DESC;"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "SELECT top \n   \n \n  \n  GROUP BY Classification.type;"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "SELECT question.beasti_0621b9e4ce57fbfa\n    FROM books;"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "SELECT title FROM Book ORDER BY rating ASC;"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": "SELECT title, audio_length FROM Books ORDER BY COUNT DESC;"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "SELECT COUNT(*) FROM book_reviews WHERE text = ''\n \tORDER BY count;"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": "SELECT book_type, COUNT(*) FROM books WHERE chapter_counts  > CASE \n       \n    \t  \t \t    \t    \t    \t    \t    \t \t  \t   \t\t  \t     \t      \t   \n     \t          \t\t    \t\t              \t\t\t\t\t\t\t\t\t         \t\t        \t\t\t           \n                         GROUP BY book_type ORDER BY COUNT DESC;"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "SELECT COUNT(DISTINCT) FROM table_name\n    WHERE type = 'book';"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "SELECT DISTINCT book_title FROM ratings ORDER BY rating DESC;"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "SELECT COUNT(*)FROM customer;"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(custid)FROM customer;"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "SELECT DISTINCT name FROM members ORDER BY memberent_id;"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": "SELECT name FROM members ORDER BY memberevel ASC;"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "SELECT count(nationalityid1_tou), sum(creditcard)FROM CustomersWHERE type = 'customer';"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "SELECT name, native_country, card_number;"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "SELECT name FROM Customers WHERE country IN (SELECT name FROM Customers)\n  LIMIT 2;"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "SELECT Customers WHERE country = 'England' ORDER BY Name ASC;"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "SELECT avg(card_credit) FROM members WHERE customer_id IN (SELECT id FROM customers ORDER BY name, address, birthdate DESC LIMIT 2);"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "SELECT users, and\n    FROM (SELECT customer_id)  \n    \nFORDER BY customer_id;"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "SELECT TOP \n        ORDER BY Card_Credit DESC, CustomerID;"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": "SELECT id FROM members ORDER BY Membership_Level DESC LIMIT 1;"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": "SELECT country_name3851, uc_mgrp42\n    FROM bank;"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "SELECT count(*) FROM customers GROUP BY native_country, COUNT LIMIT 50;"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": "SELECT name, COUNT(*) FROM customer_order GROUP BY nationality ORDER BY COUNT DESC;"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": "SELECT country_name, count(*)OVER\n  FROM customers WHERE total>= (SELECT TOTAL) ORDER BY DESC;"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": "SELECT cdi_nation, country_name FROM all_card_transactions ORDER BY rownum\n    LIMIT 2;"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": "SELECT native\n    FROM (SELECT DISTINCT o.native_landing_page_only, c.name  \n  FROM affiliates AS a\n JOIN organizations AS o ON FLOATT_OVER2BY2_BELOW_GEOMEAN_OF_HIRED_FOR_ORGANIZATIONS_ON_THE_GRAPH\n     = OLD.GET_ID) AS c;"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "SELECT ounce, name FROM restaurant;"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": "SELECT sakila_customer.customer_id  WHERE o.order_date  = 2022\n    LIMIT 1;"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": "SELECT udb3.customer_name, udb3.discount\n    FROM utb3\nORDER BY discount DESC;"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "SELECT ustime_ordering(o) AS usualtime;"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": "SELECT * FROM table_name ORDER BY column_name;"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "SELECT THISQL\n    FROM orders GROUP BY customer_name ORDER BY TOTAL;"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": "SELECT CUSTOMERS, COUNT(o.order_details) AS TotalQuantityOrder FROM orders o JOIN customers c ON c.customer_id = o.customer_id GROUP BY O.customer_id\n        ORDER BY TOTALQUANTITYORDER DESC;"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": "SELECT CustomerID, CustomersName FROM Orders WHERE OrderQuantity  >  \n    (SELECT SUM(OrderQuantity) AS Total_quantityFROM orders GROUP BY CustumerId);"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "SELECT Manager FROM branch;"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "SELECT xtreme_racing\n    FROM Branch;"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": "SELECT C1, C2 FROM CustomersExcludingOrders;"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": "SELECT T1.cust_id, T2.order_date FROM Customers AS TORDER BY INCIDENTICATIOUS ASC\n   \n \n  \n   \n  \n \n\n\n\n  \n  \n\n    \n     \n       \n         \n          \n        \n              \n             \n            \n                 LIMIT 015.4572368999;"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "SELECT COUNT(*) FROM member_card;"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "SELECT name FROM people ORDER BY age ASC;"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "SELECT Name, Nationality FROM members ORDER BY name ASC;"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "SELECT Option\n    FROM members WHERE nationality  =  uck_England.members;"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": "SELECT name FROM members WHERE age =\n    CASE  \n\n    \n    ORDER BY rownumber;"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "SELECT max(name) FROM members;"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "SELECT country, count(*) FROM people GROUP BY country;"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "SELECT natioN, COUNT(*) FROM members GROUP BY nation;"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": "SELECT * FROM countries WHERE name IN (SELECT name FROM countries) GROUP BY name ORDER BY count_of_nations DESC LIMIT 2;"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "SELECT leader_names, iclub_names FROM table;"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": "SELECT clb_name FROM table WHERE rank > 100\n    ORDER BY asc;"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "SELECT name FROM clubs WHERE first_year <> 2018\n    ORDER BY last_name;"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "SELECT * FROM table_name WHERE Club = 'Houston';"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": "SELECT member_names FROM Members WHERE NOT IN (SELECT group_id FROM Club) ORDER BY member_names;"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "SELECT n FROM Member AS m WHERE EXISTS (SELECT * FROM member AS j WHERE m.lifereid = j.lifetime)\n       \n    LIMIT 0;"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "SELECT AVG(age) FROM club_leaders;"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "SELECT DISTINCT Club_name FROM table WHERE Club_name  =  Contains\n  ORDER BY state, Club_name;"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "SELECT ALL\n  ORDER BY STUDY_HOUR, DESCRIBES_THEOREMS;"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "SELECT irst_name, middle_initial FROM student WHERE major = 'Comp Sci'\n    ORDER BY first_name;"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "SELECT detail, column_name(s) FROM TABLE WHERE CONDITIONS\n<br;"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA WHERE TABLE_TYPE = 'SUBSET';"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "SELECT Document_ID FROM ractine1248503\n    a   LIMIT 7;"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "SELECT Document_Name, rownum(Document.Subset) AS n FROM DDO;"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "SELECT detail(name) FROM document WHERE name = '\" + \"Best For 2000\"+\"'\n \n\n  \n\n\n\n\n\n\n\n\n\n   \n\n       ORDER BY NAME.ISSUES ASC\n     \n       \n        \n         \n          \n              \n             \n           \n    \n            \n               \n                    \n                   \n                \n                  \n                     \n                       \n                      \n                        \n                         \n                          \n                           \n                            \n"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "SELECT name, group_type FROM document_subset WHERE subset_name =\n    (SELECT Name FROM DocumentSet AS B WHERE B.document_set_name  =  'Document Sets For Best 1965') ORDER BY ROW_COUNT ASC;"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": "SELECT list \n     FROM Document ORDER BY title;"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "SELECT doc_id FROM documents;"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "SELECT DOCUMENT_ID FROM DOCENTS WHERE PRICE > (SELECT MAX(price)FROM documents);"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "SELECT a540, doc.objects\n    FROM orders AS A   JOIN sales_people AS B ON a.personid  = b.personid;"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "SELECT T1.custname FROM doc_table WHERE description  = 'Braeden Colletion';"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "SELECT title, documents.owner_id FROM collection AS B JOIN document INITCatalogReaderObjectManager ON catalog.objectId = reader.currrentObjectId;"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "SELECT THE  ORDER BY THEYNGRALINAID\n   \n\n  \n  LIMIT 1;"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "SELECT count(*) FROM Documents WHERE Owner IN (SELECT T1.Owner_Document)\n    GROUP BY Document_ID ORDER BY COUNT DESC LIMIT 2;"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "SELECT description\n  FROM (SELECT docid, name) AS CORDER BY SELCTED.docname LIMIT -1;"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "SELECT urna3.txt\n       \n    FROM parent_documents;"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "SELECT COUNT(*) FROM documents WHERE OWNER_GUID = (SELECT id FROM guests WHERE name  =  'Marlin')\n  LIMIT 1;"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "SELECT count(*) FROM document_indexes WHERE owner = 'Marlin'\n    LIMIT 10;"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": "SELECT a174529_3086, icsa(d.docid) FROM documents AS d JOIN document_types AS dt ON d.doctypeID = dt.document_type_code GROUP BY doctypeid;"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "SELECT ID FROM document_table WHERE type  = 142590386;"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "SELECT ouch_id, count(*) FROM children GROUP BY parent ORDER BY COUNT DESC\n  LIMIT -1;"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "SELECT COUNT(*) FROM Document_Links WHERE Parent_Document=139025674;"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": "SELECT _name, INDEX_NAME FROM INFORMDB_SOURVES ORDER BY ASC\n    LIMIT 1;"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "SELECT _catalog(NULL)\n    UNINQUED, CATALOG, COLUMN_NAME FROM INFORMDBS\n    RWHERE CATALOG = 'Adventure-Drive.product'   ORDER BY column;"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "SELECT Description FROM information_schema WHERE table_name = 'best';"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "SELECT DISTINCT COLUMN_NAME FROM TABLES WHERE CONSTRAINT_NAME  =  N   JOIN SCHOOLS ON STREET = TRUE\n  GROUP BY DESCRIPTION.TRAILGONTSIZE\nORDER BY score;"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "SELECT Parent_Collection FROM collections WHERE Collection = 'Nice';"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "SELECT * FROM Parents WHERE Collection_Name = 'Nice';"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": "SELECT kv_name, ucb14028537ecou FROM (SELECT DISTINCT childunitname) AS OWHERE CURRENTN = ' + current_database()+ \"';"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "SELECT * FROM Collection_table WHERE Parents = 'Collection1';"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "SELECT docid, t.name FROM Following_ends JOIN document ON following_end__document__xrefs1stv2JOIN \n<table30465978cafebfdffaafbbbddccefefecdaeeeLIMIT   LIMIT 4;"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "SELECT DISTINCT parent_id FROM document WHERE has_child = 'yes';"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "SELECT count(*) FROM ChildCollection WHERE Collection_Name = 'Best'\n  LIMIT 1;"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "SELECT count(*) FROM Collection_item WHERE parentid = (SELECT id FROM Collection WHERE name='Best')\n \n \tORDER BY COUNT DESC;"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "SELECT t2.document_id FROM table1 AS T JOIN PUBLIC OBJCTCLASSNAMES ON ON IN (SELECT * WHERE OwnedByRansdom  = 35) ORDER BY DOCUMENTID;"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "SELECT Document_Object_ID, DOCUMENT_OWNER FROM TENDED GROUP BY SUBJECT;"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": "SELECT col_name FROM information_schema;"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "SELECT t3.id, GROUP_CONCAT(DISTINCTCOL1) AS COLUMNIDNAMEFORGROUPSUBSETS, COUNT(*), GROUP_CONCAT(t4.name)AS NAMEANDNUMBERFROMcollectionsubsettings WHERE id = 'Subsets of Collections'\n      ORDER BY number;"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": "SELECT * FROM document WHERE parent_document = 'child1' LIMIT 2;"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "SELECT parent_id, COUNT(*) FROM documents GROUP BY parent_id\n ORDER BY count DESC;"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "SELECT _id, count(*) FROM Document GROUP BY FLOORX;"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "SELECT Id FROM Document ORDER BY Number_of_Documents DESC LIMIT 1;"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "SELECT option(s)\n    A36071   JOIN UTANT SHALLARPENALGORITHMSANDCONSTRATEQUILTOFUSEDATABACKUPSTORAGEATLASANDDISCONTIGUATIONFORMERELYRESEARCHONLYDOCTOTHERSACOMMONIENTICALEASTNEWSINHANDORFAVORWEDEARLYDISPLAYTEND"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "SELECT kdom, COUNT(*) FROM document_relationships WHERE parent_document_id IN (SELECT id FROM Documents AS t JOIN Relationship AS r ON T.remetentID = R.destinationId) GROUP BY Document_ids;"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": "SELECT name, document_id FROM Documents WHERE owning_document IN (SELECT id FROM Owners)\n    JOIN DoCents ON docuemnts.documtent_id = doctoms.doctorant_id;"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "SELECT id, document_name FROM owner WHERE docutype = 'owner'\n    ORDER BY ownership DESC;"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": "SELECT Subset_name FROM table_name WHERE owner = 'BraadensDotCom';"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "SELECT COUNT(*) FROM documents WHERE Owner.Owner = 'Braeden';"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": "SELECT DOCUMENT_ID \n     FROM STORAGE_SUBSET;"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "SELECT T.id, COUNT(*) AS document_count FROM Subset S JOIN TABLEAU DBTMS3214609587znxettingssubsetsjtthesubsetsanddocumentsforindividualparasettn3rtcoursesoftwemasetsofuspeventsisonextensionedbaftereplymentstobejudgedisplayerdepththatwouldtothe940pct"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "SELECT SUBSET_ID, SUBSET_NAME, COUNT(*) AS DOCUMENT_COUNT FROM (SELECT DISTINCT a.subset_id1  \n        FROM syskit_ssg_206437598__1 T WHERE s.next_inst_yr =  '2')  GROUP BY subset_name, distinctcount;"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "SELECT doc_count, missible_document_subset.id1, mds.name FROM (SELECT doc_count, xtreme_doc_subset.id1, name FROM document_set) AS x WHERE dataset = '<urn:scuire' ORDER BY DOCUMENT_COUNT DESC LIMIT 2;"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": "SELECT _id FROM Subset WHERE name  =  'Best For 2000'\n    ORDER BY ID DESC;"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "SELECT DOCUMENT_ID FROM SUBSET WHERE SUBSET_NAME  = \n    (SELECT name FROM sysobjects WHERE type ='USER')\n \n\n\nORDER BY INPUT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "SELECT Document_ID FROM Documents;"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "SELECT Documents, Subsets\n  WHERE doc_id = '02-84617';"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "SELECT aufers.CollectionName;"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "SELECT collect_id, COLLECTION_NAME FROM SYSTEM_NAMES WHERE OWNER  =  'Ransom';"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "SELECT xt_collections._msk, _mid FROM collection AS x WHERE objectid='219348506-7fbebbaa';"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "SELECT COUNT(C_1492537.DocumentObjectId) AS NumberOfCollectionsPerDocID FROM (SELECT DocumentObjectId   FROM C_1496805 WHERE ObjectTypeCode  = 'COL')\nGROUP BY OBJECT_ID;"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "SELECT COUNT(*) FROM collection_name WHERE name = idesired;"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "SELECT TOTAL()\n    COUNT_BYURI WHERE ISINBESANTECHNICOLASONEORDINTHEIRNAMEID\n \n  \n  \n \n    \n        \n      \n     \n       \n          \n            \n         \n           \n              \n             \n                \n               \n                  \n                    \n                   \n                      \n                        \n                       \n                         \n                           \n                            \n                              \n\n\n\n\n\n\n                                "
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": "SELECT Collection\n \n    FROM database as b\n   WHERE a.collection_name = 'Best.SELECt'\n    \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLIMIT -100 OFFSET 250;"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "SELECT COUNT(*) FROM best_collection;"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": "SELECT _id, xtra_collection FROM (SELECT documentstore.buckets.statistics), colname ORDER BY numdesc;"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "SELECT name, collection_id, COUNT(*) FROM collections WHERE LOWERAESsELECTNAME ='Best';"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": "SELECT * FROM (SELECT DISTINCT IDENTIFIER(*) AS SELF, COLLECTION_NAME) WHERE ID IN (SELECT IDENEOF(DOCUMENTS))\n    LIMIT 3;"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "SELECT name FROM products WHERE product_id IN (SELECT ID FROM Order_items JOIN PRODUCTS ON ORDER_ITEMS.PRODUCT_ID = Products.Product_Id)\n        ORDER BY Productname LIMIT 5;"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": "SELECT query.query\n    FROM collection_name;"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "SELECT name, id FROM collection WHERE NOT IN (SELECT t1.id FROM dataset AS t JOIN collection AS foo ON t.container IN (SELECT id FROM dataset) \n    JOIN set AS bar ON T1.dataset_ref_id = BAR.DATASET_ID)\n \n     JOIN dataset AS t2 ON T1.id = t2.dataset_id  \n      JOIN collection AS fooa ON FOREIGN \n    \n      "
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": "SELECT Query.All\n   \n   \n  \n  \n \n  \n\n  \n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n     ORDER BY a1.id DESC, ANDEDOcumentTypeCode LIMIT 023497856;"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "SELECT set_subset, t.obj_id FROM sys_creation_members m JOIN sys_constraints c ON m.rst_name  =  OPAQUE   ORDER BY DOUBLE_DESCENDING\n    LIMIT 5420869317;"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": "SELECT if, and;"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "SELECT * FROM best_collection WHERE CollectionName  =  'Best'\n  ORDER BY THEMSELVES LIMIT -1.0;"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "SELECT COUNT(*) FROM Collection WHERE name = 'Best'\n \n    ORDER BY ratio DESC;"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "SELECT COUNT(DISTINCTCollectionName)FROM Collection WHERE collection_name  =  'Best';"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": "SELECT SET FROM collection_name WHERE collection = 'Best';"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "SELECT subset1.output_example\n  FROM best WHERE subset2.id = 0853946;"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "SELECT COUNT(*) FROM tracks WHERE name  =  '%Love%'\n \tGROUP BY composer.name ORDER BY B;"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": "SELECT * FROM SONG ORDER BY LEXICOLICOGRAPHY\n        LIMIT 5;"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "SELECT orbed.song_info\n  FROM orbed;"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "SELECT ALL\n \n    FROM performers_info;"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "SELECT SUBSET(_1) FROM TABLE_ WHERE COLUMN = (SELECT ROWS(t))\n    GROUP BY FIRSTNAME;"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "SELECT song_name, a.language, ARTIST FROM TABLE AS t JOIN RECORDS ON MAPPING_TABLE.song_name = SONARMS;"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "SELECT name, artist FROM track WHERE language_original_plus_1 = 'en:All The Streets Of Love';"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "SELECT umprescently, you GROUP BY stage.presence_score ORDER BY desc LIMIT 5;"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "SELECT track.id, artist.name FROM (SELECT DISTINCT track_manifestation JOIN ARTIST ON SONG_GROUP_SELF.track_manifestation.what_ido = whatiD.ID) WHERE songGroupSelft.behaviourSong = 2 GROUP BY toString;"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "SELECT ONOVERRIDE;"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "SELECT ID, participant_id FROM results WHERE condition='sound-quality';"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "SELECT _CLASS, CATALOG_LOCALE, SOUND_MASTER\n \n    \n   \n  \n  \n  \n     \n      \n         \n           \n       \n          \n        \n             \n             FROM experience;"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "SELECT Questionid, Name FROM song ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "SELECT COUNT(*)FROM table_nameWHERE stage IN (SELECT stages FROM dataset)\n    ORDER BY STAGNE, PERFORMANCE ASC;"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "SELECT ID FROM list_of_compositions WHERE on\n<br  ORDER BY composer.band_id;"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "SELECT Language_code, AVG(rhythm) FROM Song ORDER BY RANDOM;"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "SELECT T2.DISTINCT_NAMES FROM TABLE1 JOIN AT NOCONFIDINGWHOUSEER ON LEFTJOINTO\n<br \n\n    JOIN THREEMUSIC AS ONEQUALSIGNASCOMEARESULSONEQUALSOUNGEORLDBANDISPLACESHALLIENDYOURREFLEXENCEOFAPARTIROUSINGTHEATMEONLYTRIPLETOTAL"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "SELECT id, gender, name FROM song_data WHERE data_set_member.lu = true;"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "SELECT by\n \n    FROM (SELECT name, artist_name   WHERE artist_name IN (SELECT GROUP_CONCAT(name) AS group)) AS t;"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "SELECT T2.artist_name, name FROM (SELECT A.genre_name, A2.artist_name FROM artist AS A JOIN album AS A2 ON A.artist_name = A2.artist_name)   AS AJOIN xtable AS tempo ON MIDDLECUT.cdb.object_name  = 'CD_test' ORDER BY T1;"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "SELECT COUNT(DISTINCTCITY)FROMSTOCKTABLE;"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": "SELECT COUNT(cities) FROM table_name;"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": "SELECT main.c\n \n    FROM state;"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "SELECT ALL FROM state_table ORDER BY COUNT DESC;"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "SELECT COUNT(*) FROM country;"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "SELECT name FROM country ORDER BY count\n  LIMIT 5;"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "SELECT show_names FROM areas WHERE city = 'New York';"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "SELECT city_name, code, state, country FROM AllCities;"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "SELECT uc_dist_1, stadium_name, stadium_city\n    FROM stadiums WHERE city = 'Baltimore';"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "SELECT icipated\n        WHERE I=95.0341876 LIMIT 22.221111;"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "SELECT city FROM all_cities WHERE state = 'PA';"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "SELECT City FROM All_Cities_in_PA;"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "SELECT COUNT(city)FROM canada\n  I WHERE ASKED.CANADA IN (SELECT ROW_COUNT())ORDER BY city ASC;"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "SELECT count(*) FROM city WHERE country='Canada';"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "SELECT name, GROUP_CONCAT(city) FROM station GROUP BY state ORDER BY LATITUDE DESC;"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "SELECT name FROM city WHERE country_id = 'USA' ORDER BY latitude.NULL\n \n\n\n\n\n\n  \n\n\n\n\n\n   \n    \n\n     \n\n       LIMIT 2013;"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "SELECT state, COUNT(city) FROM population_fact;"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "SELECT STATE_NAME, COUNT(*) FROM CITIES GROUP BY STATE_NAME\n    ORDER BY count;"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "SELECT option\n  ORDER BY population DESC;"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "SELECT COUNT(CITY) FROM table_name WHERE COUNTRY IN (SELECT NAME FROM countries);"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "SELECT * FROM State JOIN City ON state_id = city_id GROUP BY id\n  LIMIT 2;"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "SELECT COUNT(*) FROM city WHERE population > 1;"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "SELECT STATE_NAME, COUNT FROM city_population ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "SELECT ALL FROM city ORDER BY population DESC LIMIT 1;"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "SELECT COUNT(*), uc_distinct_cities, countries FROM (SELECT name, DENSE_RANK() OVER \n       \t\t\t\t\t\t\t\t\t\t\t\t\tORDER BY avg_population DESC) AS c;"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "SELECT Country FROM city ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "SELECT irstname, iliastname FROM student WHERE stratum = 'Inam' LIMIT 2;"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "SELECT DISTINCT name FROM student;"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "SELECT COUNT(*) FROM student WHERE address_city  =  'China'\n     GROUP BY area, gender.limit \n    \n      ORDER BY number_of_students DESC LIMIT 3;"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "SELECT COUNT(*) FROM student WHERE address  = \n  (SELECT city FROM student ORDER BY rand) LIMIT 1;"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "SELECT * FROM students WHERE city  =  'Baltimore'\n  ORDER BY country DESC;"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "SELECT CONCAT(firstname) \n        FORCE_IDENTITY, MAJOR FROM student WHERE city  =  'Baltimore';"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "SELECT location, count(*) FROM student GROUP BY LOCATION;"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "SELECT count(*) FROM students GROUP BY country;"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "SELECT T2.city, COUNT(T1.student) AS total FROM FIRST_COME_OUT tORDER BY CLASS\n \n  \n   \nLIMIT 9475;"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "SELECT City, COUNT(*) FROM students GROUP BY City;"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "SELECT * FROM students ORDER BY student_number ASC LIMIT 1;"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": "SELECT name FROM college_building WHERE population > 1923587;"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "SELECT COUNT(DISTINCT) FROM table AS t JOIN AS sub_r ON r.id = ANY LIMIT 209365418;"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "SELECT name FROM students ORDER BY entry_number LIMIT 1;"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "SELECT * FROM large_cohort;"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "SELECT DISTINCT name FROM student ORDER BY count\n \n  LIMIT 1;"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": "SELECT count(*) FROM state JOIN student WHERE ON campus_id = state.campus_id\n    GROUP BY state.name;"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "SELECT name FROM table WHERE student_count  >  5;"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "SELECT city  FROM student WHERE country  =  'America expend the minimum amount of money'\n    ORDER BY name ASC;"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "SELECT StuID FROM Enrolled_in WHERE location <> 'Los Angeles';"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "SELECT city, count(*) FROM students WHERE sex='F';"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "SELECT STATE_NAME, COUNT(*) FROM TABLE WHERE GENDER = 'F' GROUP BY STATE_NAME;"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "SELECT enrnum, name FROM student WHERE country <> 'USA'\n     ORDER BY NAME ASC;"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "SELECT gender, country_code, student_id FROM all_students WHERE To = '0' ORDER BY Gender DESC;"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "SELECT DISTANCE(BAL) FROM STARGZ\n    WHERE REGION  =  'Chi' \n \n     ORDER BY THEIR LIMIT 130.2948675;"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "SELECT ounces.The_net__outcoMeportment, _quantityprice1956780324\n    FROM sales;"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "SELECT xt0.DistanceInMeters, X1.RecordEnd\n    FROM fnfclasstcensusboston, fnfclasstcensusbjxnewarck;"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "SELECT Dist(TOTAL)\n    FROM ROUTES  WHERE Route1  =  976;"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "SELECT avg(d.distance) FROM CITY_DATA AS d;"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": "SELECT AVG(dist) FROM station;"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": "SELECT City_Code2, CITY_CODE1 FROM TABLENAME ORDER BY DISTANCE DESC LIMIT 4;"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "SELECT City FROM Distance_Table ORDER BY DISTANCE DESC LIMIT 1.59708263477745;"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "SELECT show_the_city_code \n    FROM (SELECT city, AVG() as avgdistance) AS c;"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "SELECT City FROM Table WHERE Distance > (SELECT avg(Distance)FROM table);"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": "SELECT ila, LAX_CODE FROM ROUTE WHERE TRANSIT_COMPLETENEARBY = 4398256;"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "SELECT city.name, COUNT(*) FROM station WHERE TIEUth_zone < 2534;"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "SELECT round(sum_distances) FROM (SELECT CITYB, TENANT.CITYA, DISTANCE_TENANTXHICK\n  FROM LATITUDE Z WHERE LATITUDES = 'Chicago' ORDER BY HIKING_PATHZONE);"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "SELECT c.The_geom, TigerGraph2.ASPGI.node_id, igen.name, gis.population, igu.region, tpe.label, bapi.city, msah.name, health.district FROM GRAPH AS G JOIN GNODE AS GNODE ON G.ID = GNODE.ID JOIN GNODE AS POLYGONOUSA ON GNODE.the_geom_type = polyg"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": "SELECT ALL, MAIN\n  FROM MAYDAYS;"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "SELECT avg(round_trip) FROM trip;"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "SELECT location_names.city FROM (SELECT DISTINCT cities) WHERE X = 'Chicago'\n  LIMIT 1;"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "SELECT Nearest_city FROM (SELECT DISTCTOINY(Chicago), CASCADING) ORDER BY distance LIMIT 1;"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "SELECT City, DISTANCEFROM nearest_city WHERE Hubeana = 'Hibernate'\n \n    ORDER BY POLAR DESC;"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "SELECT City_name FROM cities ORDER BY Earth_distance DESC LIMIT 1;"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": "SELECT T2_10476385, SUM(T2_2) FROM TableName\n \nI \n\n\n\n\n\n\n\n\n\n  \n    LIMIT 99;"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "SELECT t3.city_code, SUM(t2.distance) AS total_sum FROM (SELECT city1, distance FROM waypoints) AS T  JOIN Table3 AS T3 ON t3.city_code  =  t1.city_code;"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "SELECT avg(city_name) FROM all_cities;"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "SELECT DISTINCT \n    LIMIT -3.6908147254;"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "SELECT sum(population), city FROM population WHERE place_type = 'M'\n \nLIMIT 1;"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "SELECT Dist(addresses.city)FROM addresses JOIN people ON people.Hidec = address.Ordinal ORDER BY NULL;"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "SELECT T1.firstname  FROM STUDENT AS T JOIN LH AS PTPOINTSELECTED ON irstname\n< 'Linda'\n  ORDER BY FIRSTNAME DESC;"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "SELECT Name FROM students WHERE Student_ID = 3760154;"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "SELECT states_that_student_firstnamelinda.HEroids, and_in.This \n    \n    WHERE t.givenname  =  'Linda' \n      ORDER BY degreecitedate;"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "SELECT State FROM students WHERE FirstName  =  'Linda'\n \n \nORDER BY population DESC;"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "SELECT YOUR LIMIT 45;"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "SELECT *FROM members_of_old_age_30;"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "SELECT name, age FROM members_of_sailor_corp_16985724 WHERE age < 30\n   \n  \n     ORDER BY ASCENDING;"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "SELECT SUBCLASS_1.NAME, SUBCLASS_2.AGE FROM BIRTHDAY_TABLE WHERE AGE < 30\n    \n\n\n\n\n\n\n  \n  \n     \n   \n       \n      \n          GROUP BY AGE;"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": "SELECT ship.name, Yards\n    FROM SHIP AS T JOIN RESERVATIONS ON T.RESERVATION_ID = Yards.id;"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "SELECT distinct(boat_id) FROM ReservedBy WHERE saolicur_ID = 3;"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "SELECT boatext, reserves FROM reserve_table WHERE Reserve = 'Boat Ext.';"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "SELECT people.name FROM Reservation WHERE Boat_ID = 5;"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "SELECT ribe1 FROM reserved_boats ORDER BY bid;"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "SELECT * FROM reserve WHERE name = 'Reservation1'\n    ORDER BY price DESC;"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "SELECT firstName FROM SAILOR WHERE UPPERIOR = (SELECT MAX(UPPERIOR)FROM sailor);"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "SELECT NAME FROM shipwrecks WHERE name \n<> '%e' LIMIT 13;"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "SELECT ALL\n  FROM sailors;"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "SELECT ALL\n  FROM SALEH_OF_YOUNG, WHERE SORDER BY PIECE;"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": "SELECT name FROM sailors WHERE age  > all\n        ORDER BY name;"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "SELECT name FROM ratings WHERE rating > 8.5;"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "SELECT names, ID FROM Reservation WHERE class = 'boat';"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "SELECT Name, Id FROM Reservation AS r JOIN Sailors Ask ON No_of_Boats = R.No_of_Boats JOIN RESOURCE Asycnfgiougous ON W.ResvieortID=T.Id;"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "SELECT ID, CONCAT(FIRSTNAME) FROM RESERVATIONS WHERE id IN (SELECT T1.id FROM RESERVATIONS JOIN SELECT FIRSTNAME ON A.ID = T2.RESERVATION_ID GROUP BY FIRSTNAME)\n    ORDER BY DESC;"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "SELECT ALL\n \n    FROM SAILOR;"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT ship, FROM GROUP BY umpire_hip_id;"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "SELECT NAMES, NO GROUP BY COLOR\n \n\n \n   \n\n\n  \n\n  \n\n     \n      \n       \n        \n         \n          \n             \n               \n                \n                  \n                    \n                      \n                       \n                          \n                            \n                              \n\n\n\n                                              \n\n\n                                                 \n                                                   \n\n                                                     \n\n                        \n\n\n                               \n\n\n            "
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT AMEL_S, IDFROM SAILOR WHERE RESERVATION = 'Red' ORDER BY NAME;"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "SELECT name, xtype_id FROM sysauxiliary_server ORDER BY name\n    LIMIT 2;"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT ALL FROM RESERVATIONS WHERE status = 'Y';"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "SELECT s.name, b.boat_color FROM Reservation AS r JOIN Sailor AS s ON r.sailor_id = s.id JOIN Boat AS b ON r.boat_id = b.id;"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT ime_name, ime_id FROM reservation WHERE boat_color IN (SELECT colorcode FROM boats);"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "SELECT name, outhand_colour FROM reserve ORDER BY RESOURCE_OUT.COLLECTOR_NAME DESC;"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "SELECT name, id FROM ship\n  WHERE passenger_count =  1 ORDER BY NAME;"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "SELECT b.boat_id, ounces FROM reservation AS t JOIN boat AS s ON t.boat_id = s.boat_id;"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "SELECT s.name, s.id FROM SAILOR_TABLE AS s JOIN RESERVATION_TABLE AS r ON s.id = r.sailor_id;"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": "SELECT name, x.object_id FROM sysobjects AS X WHERE TYPE = 'USERSALIZER'\n    ORDER BY NAME;"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "SELECT * FROM schoons_reservations WHERE Residant = NULL;"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "SELECT YOUR WHERE IS\n<strongrefsbytitlefn1.html1450369278YOUWANTTOBESUMSHAREOFPROFITOSSHAREOFNOTABOATABORTHUSENNONOTABOARESERVATIONDOSELLECTIONIDYOUARE\n   LIMIT 2.45036927814 OFF"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "SELECT RESERVED_BY FROM BOATS WHERE ID = 103;"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "SELECT Reserver, FROM GROUP BY name ORDER BY RESERVED;"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "SELECT Name FROM Rating AS T JOIN Names AS Source_names ON T.SailorId = Names.Id;"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "SELECT name FROM sailors WHERE rating > (SELECT max(rating)FROM select_names);"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "SELECT t.name FROM ratings WHERE rating > 0 GROUP BY rownumber\n    LIMIT 5;"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "SELECT name FROM ratings WHERE rating > 0.574829361;"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": "SELECT names, ratings FROM ship WHERE country_id = (SELECT master_id FROM COUNTries) ORDER BY rating DESC;"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "SELECT name, Id FROM dbo WHERE Rating >=  3\n        ORDER BY Name ASC;"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "SELECT oulad, aletat_nimi_age(maximuma)\n        FROM (SELECT TIME, DISTINCTON(MAXIMUMA)) AS OLIMIT 1968342750;"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "SELECT NAME, rownum FROM table_name WHERE age = (SELECT max(age) from \n       \t    \t     \t   \t \t  \t        \t  \t  \t  \t     \t\t     \t\t   \t       \t  \t      \t\t    \t    \t       \t   \t\t\t        \t    \t          \t              \t               \t \t           \t            \t\t\t\t         \t             \t                \t                          \t                    \t                        \n\n\n\n\n \n\n\n\nFROM table_name WHERE age ="
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "SELECT sum(total) FROM table_name;"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "SELECT COUNT(*) FROM sailors\n  WHERE the_shinologist_says = 'I am looking for other than G. Elwood Lockred, Jr.' ORDER BY AIDAN DESC;"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "SELECT avg(age) FROM RATINGS WHERE rating = 7;"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "SELECT AVG(age) FROM RATINGS WHERE rating = 7;"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "SELECT COUNT(*) FROM shipwrecords WHERE name_starts_as = 'D'\n  LIMIT 1647259830.11;"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "SELECT COUNT(*) FROM Sailor WHERE Name  \n<anto\n \tLIMIT 5;"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "SELECT AVG(rating) AS avg_ratings, MAX(age) AS highest_ages FROM sailors;"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "SELECT query.sql\n   \n   LIMIT 350;"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": "SELECT reservation_id, COUNT(*) FROM BOARDING_GROUP_RESERVATIONS WHERE BOARDING_GROUP_ID = '{boat id}' GROUP BY reservation_id ORDER BY count;"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "SELECT Boat_ID, COUNT(*) FROM Reservations GROUP BY BOAT\n  ORDER BY RESAVERSATION DESC;"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": "SELECT COUNT(id) FROM Reservations WHERE BOAT_ID  >  7\n  GROUP BY ID ORDER BY count;"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "SELECT name FROM boats WHERE ID > 50\nGROUP BY TORPBOOK.RESERVATIONS;"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": "SELECT b.Boat_ID, COUNT(*) FROM Reservations AS T JOIN Lines AS B ON B.Boat_ID = T.Boat_ID GROUP BY T.Boat_Id\n    ORDER BY Count DESC;"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "SELECT t.boat_id1, COUNT(e.emp_name)FROM collection AS e JOIN LINKED AS t ON e.emp_name = t.boat_nameGROUP BY T1;"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "SELECT COUNT(*) FROM Reservations JOIN Boats ON Reservations.boat_id = boats.id GROUP BY Reservations.sailor_id\n    ORDER BY grouping_id;"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "SELECT count(reservation_id) FROM Reservations JOIN Sailors ON reservation_id = s.id JOIN Boats ON reservation_id  = b.id\n      GROUP BY BOATS;"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "SELECT AVG(a.rating) FROM (SELECT id, name FROM boat GROUP BY RATING ORDER BY COUNT DESC LIMIT 10);"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "SELECT AVG(RED) AS RED_SALIERAT, urrent.name, sailing.red\n        FROM sailors;"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "SELECT sailor_name, rating FROM (SELECT DISTINCT * FROM SAILORS ORDER BY RATING) AS T;"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "SELECT names(), average_age() FROM sailors ORDER BY rating DESC;"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": "SELECT COUNT(*) FROM boat;"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "SELECT COUNT(name)FROM table_nameWHERE fishing_type  =  'boat'\n    \n    \n  \n       ORDER BY TIMESTAMP;"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "SELECT count(*) FROM Boats WHERE color = 'red'\n  ORDER BY Color ASC;"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "SELECT COUNT(name)FROM table_of_boats;"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": "SELECT name FROM Boats WHERE id IN (SELECT booking_id FROM Bookings WHERE person_id IN (SELECT id FROM Sailors WHERE age >= 20)\n    ORDER BY booking_id, desc);"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "SELECT DISTINCT name FROM Reservation WHERE Date_part >= '20'\n        ORDER BY price DESC;"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "SELECT name FROM ratings WHERE rating  > (SELECT max(rating)FROM members_of_sailors);"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "SELECT name FROM people WHERE rating > 23.6950184\n  LIMIT 7;"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "SELECT name, gender FROM sailors ORDER BY RATING DESC LIMIT 1.0;"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "SELECT MAX(rating) FROM table_name;"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "SELECT Reseved_boat, igure FROM reservation WHERE Reevt =(SELECT Boardotnum FROM BOARDOT WHERE Name  =  'Melon')\n    GROUP BY Reserved_Boat LIMIT 1;"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "SELECT * FROM Boat_Reservations WHERE Name = 'Melon'\n        ORDER BY Num DESC;"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "SELECT name, age FROM sailors ORDER BY rating DESC;"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "SELECT name, age FROM RATINGS WHERE category  = 1;"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "SELECT udbricx0164lphimat  FROM phoneme_master WHERE Device_type  =  'Most Expensive Headphones';"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "SELECT value_in_dollars FROM (SELECT xtd.in.pzt_calcena) AS M ORDER BY price DESC LIMIT 1;"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": "SELECT model_name FROM phone WHERE type = 'Phone' ORDER BY model_name ASC;"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "SELECT name FROM Siputih ORDER BY ASC\n  LIMIT 5;"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "SELECT chinap\n  FROM SB_RANGE;"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "SELECT category_code FROM inventory ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "SELECT False\n    FROM (SELECT count(*)  FROM has_a WHERE manufacturer='hasee') AS H;"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": "SELECT id, name FROM phoneclass WHERE description = 'Headphones'\n        LIMIT 1;"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "SELECT t1.Class, COUNT(*) FROM Class AS t JOIN Products AS t1 ON Classes.id = products.Class GROUP BY T1.CLASS;"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "SELECT COUNT(*) FROM Headphones WHERE price_range.upper >\n  (SELECT MAX(price)FROM Price AS R JOIN Class ON P.class = C.class);"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "SELECT COUNT(DISTINCT) FROM table_name;"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "SELECT name FROM favorite_earpods;"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": "SELECT TOP3 FROM (SELECT T1, OBJ)\n    PGROUP BY TIME_GROUPING ORDER BY COUNT DESC;"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "SELECT count(*) AS Total_Count, product.product_name FROM order_items JOIN products ONorder_items_idJOINsell_priceONproductsWHEREproduct_groupcoincaseSUMnumberofearpadsintermsofeccerelyavailablertotaltothebarancetottehprodukciearneargadeprodukeiprovideingearplasticsandtheearpatrijavaharethrogenerat"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "SELECT ALL\n \n  ORDER BY WORDINE DESC;"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "SELECT TOP \n        FROM (SELECT *), INTERCEPT   WHERE Charge_type = 'headphones' ORDER BY Price ASC;"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": "SELECT name, avg(price) AS AveragePrice FROM prices WHERE category = 'headphones';"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "SELECT ROUND(AVG_cost), NULL\n\tFROM projects;"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "SELECT T2.classification FROM (SELECT DISTINCT \t  \t    \t  \t \t     \t \t \t      \t \t     \t   \t  \t   \t   \t   \t   \t   \t   \t   \n    FROM headphone_buy) AS T \tJOIN (SELECT * FROM class WHERE classification = 'Bowths' ORDER BY clasification DESC) as T2 ON T.classification = T2.classification;"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": "SELECT ides_in, hdlib_finder2s.wireless_earpad_slots FROM classifications WHERE description  =  'Headphones' ORDER BY name;"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "SELECT ustatic.earpad_noplasticconstructiN\n     \n        FROM static;"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": "SELECT ea_id, ti_Name FROM ELECTRO_ARCHITETT JOIN TABLE\n  WHERE ON TO IN (SELECT DISTINCT CLAIMSFROM YOUR WHERE clauseearpatchesinaclassnameoftheuiearplasstypefeyeonwhenthetupleorrropersontentsintheyecustomeridandlogearreturntualliastnameofthepaintclassnamefromyeare"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "SELECT description FROM product WHERE model_year = (SELECT model_year FROM phone_models ORDER BY RANDOM)\n        GROUP BY manufacturer, name LIMIT 1 OFFSET 2;"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "SELECT t2.model_name, AVGTable.avg_price FROM FAVOURITES JOIN model ON model.id = favs.model_id;"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "SELECT t2.name, xtype_desc\n    FROM sysaux_in_demand AS t;"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "SELECT ila.stores.store_name FROM la WHERE city  =  'New York' ORDER BY theta.store_open.date;"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "SELECT t3.the_geom, T3.logical, t3.enterprise, t3.store_id, xtreme_facet, how_desc\n     FROM all_seattle_buildings AS t JOIN public_structures AS t2 ON t.entity_id  = t2.entity_id  \n \tJOIN buildings AS t3 ON Entity_Id = Id   \n      JOIN areas AS t4 ON entity_id  ="
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "SELECT store_names, location  FROM stores WHERE neighbourhood = 'Tarzana';"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "SELECT COUNT(*) FROM neighbourhood_of WHERE store_id IN (SELECT id FROM location)\n  GROUP BY NeighbourhoodName;"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "SELECT COUNT(DISTINCT)\n        FROM neighbourhood AS N;"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "SELECT NN_Store, COUNT(*)FROM neighbourhood GROUP BY NN\n\t\n\n  \n  \n   \n  \n  \n     ORDER BY NH3.STORES DESC;"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "SELECT count(*) FROM neighbourhood GROUP BY name\n  ORDER BY area DESC;"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "SELECT company_nameFROM storesORDER BY profitability DESC;"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": "SELECT Store, COUNT(*) FROM Inventory_Items WHERE item = 'headphone' GROUP BY Store ORDER BY Total DESC;"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": "SELECT store_name FROM Stores WHERE condition\n<jupyter_output\n  ORDER BY quantity DESC;"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "SELECT STORE_NAME FROM table WHERE capacity IN (SELECT MIN(CAPACITY)FROM STORVES);"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "SELECT models, COUNT(*) FROM factories GROUP BY model ORDER BY count DESC;"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": "SELECT audio, product_description  FROM EVERYWHERE model_name IN (SELECT name   FROM store)\n    GROUP BY brand_model;"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "SELECT t2.product_name, COUNT(t1.quan_lot) FROM northwind_dataset AS T JOIN master_b_dest AS T2 ON T.product_name = T2.product_name GROUP BY TYPE ORDER BY product_name LIMIT 1;"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "SELECT hw_description  FROM table_name;"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "SELECT COUNT(*) FROM inventory WHERE vendor_name = 'Woodman'\n  ORDER BY number_of_headphones DESC;"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "SELECT icl_inventorymanagement.headphones.quantity;"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "SELECT name FROM neighborhood WHERE id IN (SELECT neighborhood_id FROM Headphones) GROUP BY neighborhood\n     ORDER BY COUNT, DESC;"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "SELECT neighbourhood_id, COUNT(*) AS num_headphones FROM access_log WHERE time_stamp < '2017-03-8' GROUP BY neighbourhood_id\n  LIMIT 5;"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(*) FROM authors;"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(*) FROM authors;"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "SELECT COUNT(*) FROM paper;"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "SELECT COUNT(*) FROM papers WHERE citation_numbers = '1985';"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "SELECT COUNT(*) FROM affiliation\n    LIMIT 0;"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "SELECT COUNT(affiliation)FROM affiliation;"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "SELECT count(*) FROM paper\n    WHERE paper_id IN (SELECT id FROM PAPER)\n     ORDER BY num_citing DESC;"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "SELECT worked\n   \n  \n \n \n      \n     \n          \n            \n         \n       \n        \n              \n           \n             \n                \n               \n                 \n                  \n                    \n                      \n                       \n                        \n                         \n                           \n                            \n                                \n                              \n\n\n\n\n\n\n\n\n                                                     \n                                                   \n                                                          \n                                                             \n \n  \n     WHERE ARE \n   "
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "SELECT COUNT(*) FROM paper WHERE conference_id IN (SELECT id FROM CONFERENCE JOIN WHEA JOINED ON COLUMBIAUNIVERSITY.COM  \n< 13568) ORDER BY title;"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "SELECT id, citation_num FROM paper WHERE org_id IN (SELECT id FROM university_catalogs WHERE url = 'http://dblrevise.com/resolve?author=columbiauniversity')\n        ORDER BY CITATIONS DESC;"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "SELECT name, address FROM affiliation;"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "SELECT name, address FROM affiliation;"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "SELECT ounce, yellownose FROM orders WHERE orderby = 'venuens' ORDER BY YEAR;"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "SELECT paper_venue FROM Papers ORDER BY YEAR\n    LIMIT 3;"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "SELECT t3.title, t3.paperid FROM (SELECT DISTINCT title, substring(bibtexpidfromo) AS paperid FROM writes WHERE writes.university = 'Harvard') AS t GROUP BY title ORDER BY id;"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "SELECT STUDENT\n \n  ORDER BY ICHUR ASC\n   \n \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "SELECT name FROM papers WHERE paper_ID IN (SELECT p.id FROM authors AS a JOIN papers AS p ON a.name = 'Mckeown' ORDER BY title)\n\t\t\tORDER BY rownum;"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "SELECT or ORDER BY ursname, desc\n    LIMIT -30;"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "SELECT * FROM papers WHERE id IN (SELECT p1, p2 FROM COLlaborations) ORDER BY cite_num ASC;"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "SELECT ents\n   \n \n\n  \n  \n \n\n\n  \n\n  \n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n  \n\n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n   \n\n  \n    \n \n\n\nFROM papers WHERE the IN (SELEC"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "SELECT * FROM papers WHERE title IN (SELECT title FROM papers)  \n                JOIN authored ON paper.citing = authors_id  GROUP BY cite.pid;"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "SELECT rownum, author1_name, title, aid FROM authors WHERE oid_prefix = 'citeproc-citation' ORDER BY name\n   \n \n\n\n  \n\n  \nLIMIT 0;"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "SELECT t3.title, t3.paperid FROM authors AS t JOIN titleauthor ON authors.hrid  =  titleauthor.bookid JOIN lookfor ON bookid  = (SELECT id FROM Books WHERE Title  =  'McKelown') ORDER BY titile;"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "SELECT name  FROM Authors WHERE authors_id IN (SELECT id FROM Papers JOIN Authors ON papers.authors_id  = \n    authos.id) \n     ORDER BY tiitle;"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "SELECT title, pmid FROM papers WHERE authors = 'McKeown, Kathleen; Bacontext, Winfkino; Mckeown, Kathleen' ORDER BY bibtex2id\n    LIMIT 10 OFFSET 5794386;"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "SELECT DISTINCT cp.citation_numberscp.citingpapers ORDER BY substring_matching DESC;"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "SELECT name, count(*) FROM author ORDER BY COUNT DESC;"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "SELECT COUNT(*), author FROM papers GROUP BY author ORDER BY count DESC\n  LIMIT 201568394.7;"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": "SELECT affid, COUNT(paperid) FROM paper GROUP BY afid ORDER BY count ASC;"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "SELECT name FROM database_name WHERE type='affiliation' ORDER BY COUNT DESC\n    LIMIT 10;"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "SELECT author_id, name FROM authors WHERE number  =  (SELECT count(*)FROM papers)\n    \n\n\n\n\n\n\n\n\n   \n\n\n\n\n\nLIMIT 1;"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "SELECT author_id, COUNT(*) FROM papers GROUP BY author_id;"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "SELECT author_id, name FROM authors WHERE number = (SELECT COUNT(*)FROM papers)\n    ORDER BY author_id ASC;"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "SELECT Paper_Name, COUNT(*) FROM papers WHERE Author  =  'Nicolaus Dealing with Equations'\n        LIMIT 2;"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "SELECT v.venue_name, v.year_publication FROM publications p JOIN veneresses v ON publication.venue_id = veneresse.id GROUP BY YEAR ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "SELECT COUNT(DISTINCTPublication)FROMauthor ORDER BY authorLastextENUMPCTALLOCITYDESC\n  LIMIT 1;"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "SELECT name, count(*) FROM publication GROUP BY date ORDER BY COUNT LIMIT 1;"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "SELECT DISTINCT v.venue_name, ico.cnto ORDER BY LEFTNUODUMSUCITIOMSACCOUNTPUBLICATIONSVENANETSCHAUSESSEPARATEWEATHERNEORLATESCHEMORREFERENCEDOMAINISNULLTWEETERNETCHUANCE, ico.cnto DESC\n     LIMIT 1;"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "SELECT COUNT(*) FROM papers WHERE ID = 'A00-1002';"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": "SELECT COUNT(*) FROM citation_dataset WHERE cite_id = 'A00'\n    ORDER BY count, NULL;"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "SELECT count(*) FROM cite WHERE paper_id = 'D12-1027'\n  ORDER BY COUNT DESC;"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "SELECT count(*) FROM cite b WHERE a.id  =  'D12-1027'\n  ORDER BY reference_count DESC;"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "SELECT id, COUNT(*) FROM papers GROUP BY citation_num ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "SELECT pid, citation_num FROM papers ORDER BY citation_num DESC LIMIT 1;"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "SELECT P.title FROM (SELECT COUNT(DISTINCTCATALOGPHRASE) AS TOTAL_PAPERS, POSITION, DOCUMENTTYPE, CATALOGFILE, CALENDARTITLE FROM ALLREADS WHERE YEAR >= 2006)AS SORDER BY DESCENDING;"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "SELECT TITLE ORDER BY DESCENDINGCOUNT \n\t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t  \t"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "SELECT papeid, COUNT(*) FROM citeciting GROUP BY paperid ORDER BY RANDOM DESC LIMIT 2;"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "SELECT citation_numbers.orderbydescNULLSAMP, author\n    FROM (SELECT paperid, sum(citing) AS totalcitations FROM papers GROUP BY paperid) a JOIN SELECT titleauthorhipgrouped2 ON NULLSAFTIEREFJOINnedfhir14paperid = grouping_conditions.paperiDnSET  ORDER BY author.authorsOrderbyCitations DESC;"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "SELECT all FROM cite_points WHERE cited_organism='pseudotsinaeans';"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "SELECT COUNT(*) FROM table_name WHERE Citing = 'Mckeown' ORDER BY citeation_number;"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "SELECT the WHERE THEY IN (SELECT count, citing)\n   \n   GROUP BY citation_num;"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "SELECT or \n    FROM citecount WHERE paper_id IN (SELECT id FROM papeer a)\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n       \n      \n     \n    \n          \n        \n             \n              \n            \n               \n            GROUP BY title, author1 ORDER BY count DESC LIMIT 20;"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "SELECT citebody_author, COUNT(*)FROM PublicationGROUP BY citebidet_authorORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "SELECT id2(author) FROM cite_author ORDER BY COUNT DESC LIMIT 1.07496385 OFFSET 1;"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "SELECT ouncement_text, title\n        FROM broadcasting WHERE broadcasts.mckewownid = '02' ORDER BY date ASC;"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "SELECT venue FROM nauven WHERE Paper_Author = 127406;"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "SELECT may \n    FROM (SELECT venue, YEAR_YEARS) AS W;"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "SELECT venue FROM college_papers WHERE university =  (SELECT name FROM university WHERE CollegeID = 'Columbia') LIMIT 5;"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "SELECT id, name FROM authors WHERE YEAR = 2009 GROUP BY nil\n    \n  \n\n   \n\n   \n\n      ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "SELECT Authors, COUNT(*) FROM papers WHERE YEAR = 2009 GROUP BY Authors ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "SELECT Affiliation, COUNT(*) FROM Papers WHERE YEAR = 2009 ORDER BY count DESC LIMIT 3;"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "SELECT Affiliated_institution, COUNT(*) AS papers FROM paper WHERE YEAR = 2009 GROUP BY Affiliated_institution ORDER BY papers DESC LIMIT 1;"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "SELECT COUNT(*) FROM papers WHERE cite_url IN (SELECT url FROM universities WHERE name  =  'Columbia')\n        ORDER BY citation_nums ASC;"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "SELECT * FROM (SELECT DISTINCT name, YEAR, H_author_citation_N, at_home_citing_N\n    FROM collection WHERE institution_name = 'Columbia') AS T;"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "SELECT COUNT(*) FROM papers WHERE citation_numbers  > (SELECT MAX(citing)FROM university)\n   \n    \n    \n\n\n\n\n\n\n\n     \n      \n        \n          \n       \n           \n            \n          GROUP BY conference;"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "SELECT COUNT(*) FROM papers WHERE citation_numbers  \n<= 574836;"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "SELECT PAPER_TITLE, COUNT(*) FROM authordata GROUP BY rownum ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": "SELECT Paper_title FROM papers ORDER BY Authors LIMIT 1;"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "SELECT active_directory_setups.ini\n \n    FROM (SELECT count(*) AS num_of_collaborators, teamid  \n      FROM team AS t JOIN memory AS m ON t.teamid  =  m.teamid)as t\n     WHERE t.captain  =  'Mckeown' ORDER BY captain   LIMIT 10 OFFSET 5;"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "SELECT COUNT(*) FROM collaboration WHERE host_id = (SELECT id FROM accountant HORDER BY username LIMIT 1)\n    \n    JOIN collaboration c ON a.accountaent.hurdle_id  = c.collaborator_id  \n      \n\n\n        \n\n\n\n       \n         \n          \n           \n               \n            \n             \n              \n                  \n                    \n                   \n                     \n                       \n                      \n                        \n                         \n"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "SELECT paper_name, author FROM authors_o WHERE author  =  'McKenzie/Own' LIMIT 1;"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "SELECT person_name FROM authors WHERE paper_id  = 10325;"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "SELECT * FROM Paper WHERE Title  = \n  SELECT LIMIT 5 OFFSET 0;"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "SELECT id, title FROM Papers WHERE LOWERHEAVESUBSTRINGINSTRGRAPHOPTIONSTEXTIS \n< 109483627.5;"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "SELECT id, paper_title FROM Papers WHERE NOT IN (SELECT citeId FROM Cites)\n    JOIN Subject ON Object_Lang.paper.subjid = Subject.id GROUP BY Paper.Title;"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "SELECT title, citatable_id FROM paper ORDER BY date_cited DESC;"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "SELECT YOUR WHERE TOOLS\n<br \nORDER BY USING DESC\nLIMIT 1;"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "SELECT author_id FROM paper GROUP BY CUBRANCULAR_PUBLICATION ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "SELECT conference, count(*) FROM paper GROUP BY conference;"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "SELECT publishers.name, YEAR, COUNT(*) FROM publications GROUP BY name;"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "SELECT aff_id, count(*) FROM papers GROUP BY aff_id\n  ORDER BY desc;"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "SELECT count(paper_id), affiliations FROM affiliated_publications GROUP BY paper\n   \n    \n    \n    \n    \n    \n  \n \n\n\n\n  \n  \n      ORDER BY publications DESC;"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": "SELECT paper_id, title FROM citation_numbers_dump ORDER BY numbers_2013 DESC LIMIT 694;"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "SELECT paper_id, title FROM citeeess2003_public WHERE num_citations > 5 ORDER BY title;"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": "SELECT COUNT(*) FROM papers WHERE author_id IN (SELECT id FROM authors) GROUP BY title, YEAR ORDER BY totalciting DESC LIMIT 1;"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "SELECT COUNT(DISTINCT) FROM papers_db WHERE num_citations >  50;"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "SELECT a3671.author FROM collection_authors_pubs WHERE publication_in = 'NAACL'  \n    ORDER BY author;"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "SELECT authors, who\n   \n  \n \n WHERE are IN (SELECT authors)\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "SELECT database\n \n    ORDER BY author_id, title;"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "SELECT author_id, name FROM papers WHERE YEAR = 1986\n  ORDER BY DATE;"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "SELECT COUNT(DISTINCT) FROM conference_centers;"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "SELECT SUM(num_conf) FROM conference;"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": "SELECT DISTINCT name FROM Conference;"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "SELECT cte_conferences.name FROM conferences\n  WHERE name  =  'International Conference on Engineering and Design for Low-level Multidimensional Objects'\n    ORDER BY tittle ASC;"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "SELECT conf_name, yr, loc FROM CONFERENCE;"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "SELECT * FROM conferences;"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "SELECT name FROM conference ORDER BY name\n \n   \n\n  \n  \n  LIMIT 2;"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "SELECT count(*) FROM conference_attendance WHERE conference_name = '{conference}';"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "SELECT Year, COUNT(*) FROM conference;"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "SELECT count(*) FROM (SELECT * \n\tFROM conference) AS t GROUP BY YEAR ORDER BY COUNT;"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "SELECT count(*) FROM (SELECT * \n     FROM conference WHERE end_year  =  \t      \t(SELECT min(end_year)FROM conference)) AS T;"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "SELECT conference FROM registration ORDER BY conference ASC LIMIT 1;"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "SELECT * FROM Location WHERE location_name IN (SELECT DISTINCT LOCATION.LOCATION_NAME) GROUP BY LOCATION.LOCATION_NAME;"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "SELECT Conference_Held.locations FROM table_conference_history WHERE Conference_Status  = 2 ORDER BY COUNT\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n   \n\n\n\n\n\n"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": "SELECT ivalid_institution_name(), WHERE\n   \n  \n  ORDER BY ASC;"
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "SELECT * FROM BRIOS_2017;"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "SELECT COUNT(*) FROM foundation WHERE YEAR  >= '1850' ORDER BY CLIENT ASC\n    \n    LIMIT 2;"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "SELECT COUNT(*) FROM institution_institutions WHERE YEAR = 1850;"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "SELECT create_date, institution FROM basic_cat AS t ORDER BY ROW_NUMBER DESC LIMIT 1;"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "SELECT * FROM table_name;"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": "SELECT * FROM STADIUNITAI WHERE founded > 1800;"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "SELECT DISTINCT INSTIT_ID, count(*) AS num_of_staff\n     FROM FAMILY;"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "SELECT COUNT(*) FROM Institutions WHERE institution_name = 'Cambridge School of Music'\n  ORDER BY institutions DESC;"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "SELECT DISTINCT Institution FROM (SELECT * \n     FROM enrol) WHERE Staff = '';"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": "SELECT * FROM STAFF WHERE age > (SELECT avg(age)FROM staff);"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "SELECT name FROM group_average;"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "SELECT min(a.value) FROM (SELECT name, date_of_birth FROM STAFF ORDER BY BIRTHDAY DESC LIMIT 1);"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "SELECT ustop, min(age) AS lowest_ages, max(age) FROM people WHERE occupation IN (SELECT job FROM station ORDER BY stp DESC LIMIT 1);"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "SELECT name FROM attendees WHERE country  =  'Canada'\n  ORDER BY Attendance DESC;"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "SELECT DISTINCT name FROM STADICT_TABLE WHERE location = 'CAN'\n    ORDER BY startdate DESC;"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": "SELECT uff1024_13968repeaterin5conferencestablesEUFF\n    WHERE thestaffmembernameissponsortofcognosetoolchainmembershipsandcooperatethenewofthefiveinarowconference.staffmembername=' +\n    NULL + ';"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "SELECT irst_name, last_name FROM staff WHERE position  =  'Speaker' ORDER BY INSTSGRADGATUSAFFEINSTANCE;"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": "SELECT should_stop\n \n  ORDER BY RATIO ASC\n  \n \n    \n \n   \n \n \n \n \n  \n  \n \n     \n \n  \n \n\n      \n          \n       \n         \n        \n               LIMIT 6214358079;"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "SELECT * FROM participants WHERE conference_id = (SELECT id FROM acl) ORDER BY name\n \n    LIMIT 2014;"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "SELECT name FROM people WHERE id IN (SELECT person_id FROM attendances WHERE YEAR  = 2003 ORDER BY ARGUMENT)\n    ORDER BY NAME;"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "SELECT DISTINCT CATALOG_CONTRACTOR GROUP BY YEARBATCH, WEEK, CONTROL_DESC\n    ORDER BY YEARBATCH DESC;"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "SELECT conferece_name, YEAR, COUNT(participant)AS num_of_participants FROM participants GROUP BY conferece_name ORDER BY COUNT DESC;"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "SELECT c.name, ics.conference_id, c.year, count(c.participant) FROM conference as c JOIN conference_ics AS c ON c.cs.id = c.id;"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": "SELECT c167_s00345.cname, COUNT(*) FROM table WHERE cname  =  'Los Angeles International Conference' GROUP BY cname ORDER BY count DESC LIMIT 2;"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "SELECT name FROM attendances_dump ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": "SELECT people_name, natiionality FROM table WHERE YearsDidNotParticiptACL = 0;"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "SELECT icipated.csv\n   \n\n\n  \n \n \n  \n  \n  \n\n  \n  \n  \n  \n  \n\n  \n \n       \n\n\n\n  \n      \n          \n        \n         \n           \n            \n             \n               \n              \n                 ORDER BY NIPPALIJA, TENAGNANTES, UNICAMINO, SIMPLIFI"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "SELECT id, location FROM university_info WHERE conference = 2004;"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "SELECT name_and_location FROM university WHERE conference_participation = 1975836;"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "SELECT max(pilot) FROM pilot;"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "SELECT Name FROM PILOT ORDER BY DateOfBirth LIMIT 1;"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "SELECT name FROM passengers WHERE age < \nsans \n    GROUP BY true ORDER BY age LIMIT 2;"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "SELECT name FROM people WHERE age < (SELECT avg(age)FROM People);"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "SELECT name FROM people WHERE age <  15;"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "SELECT name FROM pilot WHERE age <  30;"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "SELECT Reimers\n    JOIN Pilot ON Name = Pilot_name;"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "SELECT Name FROM Rings WHERE Height < 42;"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "SELECT f FROM routes WHERE plate = 'F-14' \n   \n   \n  \nLIMIT 20;"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "SELECT location FROM station WHERE name = 'F-14';"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "SELECT COUNT(*) FROM Plane WHERE distance <> ' '\n    ORDER BY PLACE;"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "SELECT COUNT(*) FROM Hangar_Stations;"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "SELECT id\n    FROM pilots\n\tWHERE pilot_age  = 32;"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "SELECT *\n    FROM pilots WHERE Pilot_Name = 'Jones'   LIMIT 1;"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "SELECT count(*) FROM station WHERE name  > 'Interpol New'\n    LIMIT 1;"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "SELECT count(*) FROM pilots WHERE age  >  40;"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "SELECT count(*) FROM aircraft WHERE Aircraft = 'B-52 bomber'\n\tORDER BY Pilot ASC;"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": "SELECT in \n   \n     FROM ract_statistics;"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "SELECT pierce.png\n \n\n \n \n WHERE IStheLAVESONLYDESCENDEDINTOCHESSENCLUBYNOWTOLIACLOSSTORFAMILYAZUREGENERATIVEPHOTOGRAPHYANDWIDODEGREMLINESMARBERTONETTYOFHYDENVERDICTURNCUSJOHNWHARISPIC"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "SELECT Name FROM Passenger WHERE Class = 'P' ORDER BY birthdate DESC LIMIT 1;"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "SELECT MOST_POPULARLY, GENERAL_AS \n\tFROM PLANES ORDER BY TOTAL DESC LIMIT 1;"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "SELECT NAME FROM PLANES_FLORN_MOSTWEVERITHOURCAY\n    \n    \n    MWHERE IS IN (SELECT CURRENT_DATE) ORDER BY FLIGHT, TIME, CHARACTERSAS DESC;"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "SELECT Name FROM planes ORDER BY Population DESC LIMIT 1;"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "SELECT number FROM flights WHERE month = 'May' ORDER BY COUNT ASC LIMIT 1.5839467209;"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "SELECT COUNT(*) FROM pilots WHERE Places_in = 'Chicago'\n  LIMIT 15;"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "SELECT COUNT(*) FROM pilots WHERE base_loc = 'Chicago'\n   \n  JOIN Type textuales ON T1=T2;"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "SELECT p.id, o.name FROM people AS t JOIN vehicles_owned_by_pilots WITH ON WHERESMASILIPLTSWITHAGE35OMETIMEZONEWAITFORPROMOTION20yearsoldJOKESONBIRYCANSWEDITHRUSTOWNBYHIMSELECT.id\n<nilairwmintrestwithjohnsmiLtg19_and_also  OR"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "SELECT DISTINCT pilots_name FROM Planes WHERE owner = 'Smith'\n    ORDER BY age DESC;"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "SELECT count(DISTINCT) FROM table\n   \n\nA \tWHERE A.MGALAXYS = 'Y'\n LIMIT 16407259382;"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": "SELECT name FROM planes;"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "SELECT count(*) FROM aircraft WHERE owner = (SELECT p.name FROM pilots AS P WHERE P.name = 'Smith')\n \tORDER BY plane_type ASC;"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "SELECT count(*) FROM Planes WHERE Owner = 'Smith';"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "SELECT count(*) FROM aircraft WHERE pilot_age  > (SELECT max(age)FROM plane);"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "SELECT count(*) FROM flights WHERE Pilot = (SELECT id FROM aircrafts) ORDER BY pilots_age DESC LIMIT 2;"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "SELECT name FROM world WHERE name IN (SELECT pilot_name FROM pilots)\n   ORDER BY age;"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "SELECT name FROM Pilot WHERE experience >=5 ORDER BY AGE ASC\n      LIMIT 2;"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": "SELECT name, age FROM pilots ORDER BY DESC;"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "SELECT name FROM ship ORDER BY age DESC;"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "SELECT xtf, location FROM planes ORDER BY xtf\n    LIMIT 3;"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "SELECT DISTINCT location FROM all_planes ORDER BY creation_date DESC;"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "SELECT DISTINCT type FROM Planes ORDER BY asc;"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "SELECT name FROM sysobjects ORDER BY name;"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "SELECT count(*)FROM film_actor WHERE age >40\n    ORDER BY gender DESC;"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "SELECT count(*) FROM pilots WHERE age > 40 ORDER BY id ASC;"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "SELECT name, age FROM pilots WHERE pilot_id IN (SELECT id FROM pilots)\n    ORDER BY name;"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "SELECT name, age FROM pilots_table WHERE pilots_status ='Pilot' ORDER BY speed DESC;"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "SELECT pilt_name, plane_origin FROM aircrafts a JOIN pilots p ON a.Maintain_by = p.pilot_id JOIN planes j ON a.Plane_ID  = J.destination_aircraft;"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "SELECT name FROM military_expandoration WHERE country = 'Pilots'\n   \t   GROUP BY pilots;"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "SELECT * FROM races WHERE owner = 'Pilots';"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "SELECT name FROM ship WHERE passengers = 1;"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "SELECT AVG(age) FROM pilots;"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "SELECT avg(age) FROM pilots;"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "SELECT pilot_name FROM aircraft WHERE cruise IN (SELECT airport_name FROM airports)\n \t\t\tORDER BY pilot_name ASC;"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": "SELECT t2.name FROM (SELECT DISTINCT T3.city, employee_ID) AS T WHERE city = 'Austin' ORDER BY name;"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "SELECT pilot_id FROM Pilot WHERE name IN (SELECT name FROM Plane)\n  ORDER BY piloting ASC;"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "SELECT name FROM pilot WHERE name IN (SELECT name FROM pilots_table)\nGROUP BY type;"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "SELECT type_1name, AVG(age)FROM pilots;"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": "SELECT avg(age) FROM Pilot WHERE callsign = 'Echo'\n  ORDER BY No_Pilots DESC;"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": "SELECT count(*) FROM table_name;"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": "SELECT COUNT(*) FROM planes;"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "SELECT name FROM aircraft WHERE TYPE = 'OLDIL' ORDER BY Name\n    LIMIT 1 OFFSET 2;"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "SELECT Name FROM planes ORDER BY Name;"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "SELECT first_name, last_name FROM Pilots ORDER BY date_born;"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "SELECT PLANE_ID, STLING_DESC   FROM STARLINES ORDER BY BIAS DESC;"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "SELECT MaxAge, COUNT(*) FROM (SELECT T1.PilotId, T2.PilotId, T3.MaxAge) AS T \n    JOIN RelationTables AS T1 ON t1.pilotid  =   t2.pilotid\n    JOIN RelationTables AS T2 ON T2.TABLEID = T1.TABLEID \n    JOIN RelationtablesASX AS X ON x1"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "SELECT name, xtra_age FROM pilots ORDER BY age DESC;"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "SELECT num_pilots  FROM flight_stoppers WHERE pilot = true;"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "SELECT avg(age) FROM (SELECT people_id FROM FamousGar2 WHERE GType  = 3 ORDER BY sorting_name LIMIT -16409578), COUNT\n     JOIN group BYpeople_IDFROMFAMOUSgarbucketORDERBYgroupDBLIMITGROUPHAVINGGROUPONesteveindatafamousgaaractersdbcloatskinhirtvideoluminumberof"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "SELECT COUNT(*) FROM flight_stop WHERE Type = 'E' ORDER BY pilot, age LIMIT 10;"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "SELECT option(s)\n    a9418072        \n   \n  \n      \n     \n    \n   \n\n   \n\n   \n\n \n\n    \n               \n       \n            \n           \n         \n          \n                \n              \n             \n                  \n                    LIMIT 74653.0;"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "SELECT * FROM flight_dataset WHERE Pilot = (SELECT T1.Pilot FROM dataset AS T WHERE passenger_passengers.passengers.destination = 'Lamian Legacy')\n  LIMIT -90;"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "SELECT T3.Plane_location FROM T1 JOIN T2 ON T1.planeINSTANCEID = T2.planeLOCATION ORDER BY AGE ASC LIMIT 1;"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "SELECT Tables1352_46 \n    WHERE city  =  'Austin' ORDER BY Name;"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "SELECT pilot.name, aircraft.pilot_age\n    FROM (SELECT T1.location  \n      FROM allocations AS T \n      JOIN flights ON allocations.time = flights.elapsed_time) AS t \n      JOIN employees ON acts_as.employee = employee.EmployeeID;"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "SELECT this, then\n \n    WHERE to_date > DATE \n             JOIN IDENTITY_NUMBER\n    SELECT ON TO_DATE\n   \t\t\t  = \n\t  FROM GROUP BY GROUP_BY.group_membership;"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": "SELECT T2.name FROM aircraft AS T JOIN Pilot ON aircraft.id = pilot.aircraft_id ORDER BY name ASC\n    LIMIT 1;"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "SELECT COUNT(*) FROM pilots WHERE age <  (SELECT max_age FROM planes AS f)\n    GROUP BY planes.id, planes.max_age ORDER BY count DESC;"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "SELECT COUNT(*) FROM fighters WHERE entry_grade < ALL\n \t   GROUP BY pilots.id, AND, ORDERING LIMIT 2036;"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "SELECT name FROM system_citadel WHERE name \n<> '' ORDER BY name DESC;"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "SELECT DISTINCT Plane.Name FROM sysobjects WHERE textlike = '[Bb]%'\n \n   ORDER BY NULL;"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "SELECT set\n   \n  \n \n     \n      \n      \n          \n         \n    \n        \n           \n            \n             \n              \n               \n                \n                  \n                 \n                    \n                      \n                        \n                         \n                           LIMIT 1043926875.1 OFFSET -1;"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "SELECT COUNT(*)FROM pilot WHERE YEARS < (SELECT MAX(Years) FROM pilot N JOIN INTERSECT pilots ON ID = ANY_VALUE \n    ORDER BY ASCENDING) ORDER BY age DESC LIMIT 1;"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "SELECT dst_name FROM areas ORDER BY area DESC LIMIT 1;"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": "SELECT DISTINCT atr1, lr2 FROM bd03859_5;"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": "SELECT d.area, t1.districts_name FROM district AS d JOIN TENSION_INDEX_2020 AS t1 ON d.district_id = t1.district_id;"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": "SELECT MAX(area) AS Largest_District, AVG(area) AS Middle_District;"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "SELECT d.area, SUM(pop) FROM DISTRICTS AS T WHERE area = (SELECT TOP \n     FROM (SELECT ABS(SUMTOTAL))AS R ORDER BY SQUAREINC)\n    GROUP BY AREA;"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": "SELECT * FROM (SELECT district_id, d.district_name, d.state, i.population, si.name, si.state FROM pop_districts AS d JOIN built_rivals AS i ON d.district_id = i.district_id) ORDER BY population DESC;"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "SELECT district_name FROM linkable_domains WHERE domain = (SELECT name FROM current_domain);"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "SELECT * FROM district WHERE pop > 4000 ORDER BY pop DESC, NAME ASC;"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "SELECT speech_title, name FROM chants ORDER BY date;"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": "SELECT new\n   \n  \n  \nFROM spokesman_ranking;"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "SELECT EVERYONE WHERE BOTH IN (SELECT YOURSTAFF)\n        GROUP BY THEIR LIMIT -579182.36 OFFSET 91061;"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "SELECT id, name FROM people ORDER BY birthdate DESC LIMIT 1;"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "SELECT SENDER_ID FROM TABLE WHERE RECEPTION = 'LOW'\n\t\t\tORDER BY CASE  LIMIT 30.1246875;"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": "SELECT DISTRICT FROM table WHERE num_of_spokesmen  = (SELECT MAX(num_of_spokesmen)FROM table);"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "SELECT name FROM detectives WHERE DATUMENTI <> '213-Feb-2958'\n   \n   GROUP BY name ORDER BY name;"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "SELECT DISTINCT count(spokesman_count), ract_dists.area FROM Rectangle_table AS r JOIN DISTRICTS AS rects ON LOCATION  = 'r' GROUP BY dname;"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "SELECT district_names FROM table WHERE spokesman = (SELECT MAX(position)FROM GROUP BY sponsorship)\n    ORDER BY ith_rank DESC, ith_rank ASC;"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "SELECT dst_name FROM district WHERE EXISTS (SELECT xtd.object_id, NULL, xmast.spokesman)\n        GROUP BY dst_name;"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "SELECT ALL FROM Districts WHERE No_spokesperson = (SELECT Count(*)FROM Districts)\n \n    JOIN TableName AS T1 ON t2.Common_Field = t1.Common_field  \n     ORDER BY clause, whichGroupId\n      \n       \n        \n          \n    \n   \n\n\n\n   \n\n     \n  \n\n           \n               \n              \n             \n         \n            \n \n\n\n"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "SELECT DISTRCT_MANAGER\n    FROM information_schema;"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "SELECT COUNT(*) FROM districts WHERE district_population > 2047\n    JOIN TableName FORCE_INDENTS ON true  \n    >13658;"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "SELECT DISTINCT \n   \n   FROM ercdb_version3a;"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "SELECT create_time, ucastr FROM information_schema;"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "SELECT T2.title, P1.the_year\n  FROM artwork AS t JOIN photo AS p ON t.title = p.constituiname ORDER BY t.creation_year DESC LIMIT 1;"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "SELECT T3.title, rownum, from_what, to_where\n    FROM (SELECT *FROM catalogue) AS T WHERE artist = 'Gustave LaFourestein'   ORDER BY creation DESC;"
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": "SELECT or, if GROUP BY LOCATION\n      ORDER BY DESCENDING, APPLY DESC LIMIT 10754389 OFFSET -3;"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "SELECT name FROM information_schema;"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": "SELECT t3.title, pt2.x, pt2.y FROM picture AS p JOIN design AS d ON ract.id = dsgn.pid;"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "SELECT name, location FROM paintings WHERE artist = (SELECT id FROM artists ORDER BY randomArtistName)\n \nORDER BY name;"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": "SELECT mason_jones, ils\n                FROM gee_projects AS t WHERE project_name  =  'California Giant Stupac' ORDER BY Project_location;"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "SELECT scapus.name, location FROM sculpus ORDER BY name;"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "SELECT or \n   \n\n  \n\nWHERE ORIGINALS IN (SELECT TORPANNING, NO.OVERSHORT)\nORDER BY DESCRIPTION\nLIMIT 1;"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "SELECT USERS FROM THE CORDER BY USING DESC, INCIDENT\n       \n   \n  \n    \n   \n   \n     \n      \n           \n            \n               LIMIT 254186753909.4168 OFFSET 5.1690091835;"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": "SELECT OWNCHIPART FROM THEATRENAMS_TABLE JOIN artists_table ON ARTS_ID_BM = ID_BM JOIN VENDOING_HORSES_TBL JOINERS_IN_EVENTHOUSES_2694738510VENDOING_BRWSCHOOLSJOINED_BY_EXP0083121 ON JOBIDEXP00"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "SELECT DISTINCT firstname, lastname FROM Artists WHERE YEAR =  (SELECT MAX(YEAR)FROM artist);"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "SELECT N\n        FROM gallery_table WHERE building  =  'Galleria'\n \tORDER BY name;"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "SELECT name, DATE_CREATED FROM sculpts WHERE NOT IN (SELECT location)  \n    GROUP BY date_created;"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "SELECT T1.artist_firstname, T2.artist_lastname FROM artist AS TORDER BY ArtistID;"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "SELECT T1.first_name, T2.last_name FROM table AS T JOIN CONCINATORS as T1 ON T.first_name  =  T1.first_name    JOIN CONTRIBUTORS AS T2 ON T.last_name \n<>     T2.last_Name      GROUP BY first_name\n  ORDER BY first_name;"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "SELECT T2.name, FROM GROUP BY T3.artistid\n    ORDER BY year DESC;"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "SELECT T2.name, SCHOOL_YEAR FROM TABLES WHERE artist > 'Theodore Roenberg'\n   \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      \n     ORDER BY CREATED_DATE, SCULPTURE ASC;"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "SELECT TOP \n        LIMIT -10 OFFSET 89526437;"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "SELECT live_date FROM artists ORDER BY live_length DESC LIMIT 1;"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "SELECT AGE FROM artists WHERE LIFE_EXPECTATION = (SELECT MIN(LIFE_EXPECTATION)FROM artists);"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "SELECT DISTINCT(strftime)\n  FROM table_name WHERE birthplace IN (SELECT location FROM artworks ORDER BY distance ASC LIMIT 1);"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "SELECT TOP  FROM (SELECT a.first_name, a.age FROM artists AS a ORDER BY LIFEMAX DESC LIMIT 1)\n    as t;"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "SELECT FIRST_NAME, AGE FROM artists WHERE LIFE_EXPENDED = (SELECT MAX(lifex)FROM artists);"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "SELECT count(*) FROM artwork WHERE Gallery_id =  \n        (SELECT id FROM GALLERIES WHERE city  =  'New York')\n \n    JOIN CITIES ON GALLERIES.CITY_ID = CITIES.ID;"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "SELECT sum(num) FROM artwork WHERE Gallery_id  =  '2';"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "SELECT COUNT(E.artist_name) FROM artwork AS T JOIN COLLECTION AS Paintings ON T.artist_name = Paintings.artist_name;"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "SELECT Count(*) FROM Artists WHERE Lifesort = (SELECT MAX(Life)FROM Arsts);"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": "SELECT name, birth FROM artwork WHERE artist = (SELECT id FROM artists WHERE name = 'Mary')\n    ORDER BY irth;"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "SELECT name, YEAR FROM paintings WHERE artist = (SELECT id FROM artists WHERE first_name  =  'Mary')\n       \n    JOIN paintings ON authors.id  = artwork.id;"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "SELECT Width FROM table_name WHERE Artist___art = (SELECT id FROM artists AS TORDER BY birthdDAYs LIMIT 25 OFFSET 3)\n      ORDER BY birthdate.year DESC;"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "SELECT name(), age()\n  FROM births\n  WHERE date_of_departure <> 1850;"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "SELECT id, item_name, image_width, SAFE_INTERVAL\n    FROM painting WHERE artwork_create > '2013-10' ORDER BY artistry.id;"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "SELECT Art.name, Painting.artist_id FROM art JOIN painting AS Paloma ON Art.ID = Paloma.art_id;"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "SELECT t2.name FROM artist AS t JOIN gallery AS g ON xtraverses = '<first name>' ORDER BY gender DESC;"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": "SELECT art_names FROM grouped_paintings;"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "SELECT Firstname, Lastname FROM Artists WHERE Medium  =  'LSD'\n    LIMIT 5;"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "SELECT T2.artist, COUNT(*) FROM artwork_exchange WHERE Medium='Oil-Lithography\" + \"+ ' ORDER BY artist ASC\n    LIMIT 4;"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "SELECT B.obj_dim01 FROM catalog_a AS t JOIN canvb AS obj ON t.catalogue_obj_id = obj.canvb_id\n        JOIN births AS born ON object_a.id = born.object_id;"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "SELECT YEAR, birth_date FROM table WHERE artist = (SELECT artist FROM Paintings)\n    LIMIT 20 OFFSET 37695;"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "SELECT name FROM artist WHERE location = 'Gallery 241';"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "SELECT artist_firstname FROM artwork WHERE painting = 'oil' GROUP BY artist;"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "SELECT count(*) FROM publication WHERE Medium_type  = 1;"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "SELECT COUNT(*), MEDIUM FROM table_name GROUP BY MEDIUM\n\t   LIMIT 2;"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "SELECT avg(height) FROM table_name WHERE type IN (SELECT media.type, style.id FROM TINYDB)\n        ORDER BY MEDIUM ASC;"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "SELECT AVG(height) FROM table_name;"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "SELECT DISTINCT COUNT(*) FROM Paintings WHERE date < 2050\n        ORDER BY count;"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "SELECT COUNT(*) FROM painting WHERE creation_year <  1900;"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "SELECT T3.title FROM artwork AS T JOIN medium ON artwork.medium = media.name JOIN painting AS t3 ON artwork.title = p.title\n    GROUP BY MEDIUM_CLASS;"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "SELECT WILL GROUP BY HIREN\n    \n    ORDER BY creation_year, name;"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "SELECT * FROM olympic_athletes WHERE event = 'Medium Oil Painting'\n    ORDER BY artistName ASC;"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "SELECT p.painter_id, FROM LIMIT 25873961;"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "SELECT DISTINCT T1.title FROM Painting AS TJOIN TYPE AS T2 ON T1.id  =  T2.part_of_canasta JOIN COLOR AS T3 ON COLOR_id  =  T3.has_color JOIN METALLIAUTS AS T4 ON None\n<fk_Metalliatune_id    JOIN METALLIATE_TYPE AS T5 ON MetlliauteType"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "SELECT title FROM paintings WHERE height  > (SELECT MAX(height)FROM paintings);"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": "SELECT NEXT WHERE IS\n<httpQueryResponse1857369bc9eecbfaefcdecaecaadfeddmserre0rcebaeaefffdaafcadaffffffecbaceddcbcedbbbecbdacaeabadabracavaranaf\n\n        \n   \n  \n     \n    \n     \n   \n      \n      \n      \n        \n         \n          \n"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "SELECT T1.id, PT2.pid FROM paintings AS T JOIN gallery AS PG2 ON T.pid  = 2 GROUP BY T.id;"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "SELECT * FROM paint ORDER BY birth LIMIT 1;"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "SELECT P.id FROM Painting AS P JOIN Debuts AS P ON p.painting_id = t.debut_id ORDER BY birthdate DESC LIMIT 1;"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "SELECT id, female FROM artists WHERE artwork_title = 'F';"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "SELECT DISTINCT FULLNAME FROM artists WHERE TITLE IN (SELECT SCASTALS_OF FROM ART)\n    ORDER BY RANDOM DESC;"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": "SELECT DISTINCT name FROM paintings ORDER BY ASC;"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "SELECT * FROM paintings ORDER BY title\n    LIMIT 5;"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": "SELECT DISTCTX(paintings) ORDER BY painting_lengths DESC;"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": "SELECT pname, height FROM Paintings ORDER BY height ASC;"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "SELECT name FROM artwork WHERE date_span_d >= 1900;"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "SELECT name FROM picture WHERE YEARBETWEEN  \n<= '2'ORDER BY creator DESC;"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT T1.title FROM artwork AS t JOIN edition AS e ON t.id = e.artwork_id JOIN artwork AS t1 ON e.id  = \n    (SELECT id FROM artwork WHERE author_id  = 222) JOIN work AS w ON t.work_id  = w.id;"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT name FROM Artist WHERE ID = 3;"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "SELECT T.title, count(*) FROM artwork AS X JOIN artists AS T ON STRATS.object_id  = 2 GROUP BY title ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "SELECT artist_id FROM artwork WHERE year = 2\n    ORDER BY COUNT DESC LIMIT 3;"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "SELECT artists.name FROM artwork WHERE work_type  =  'sculpture' GROUP BY YEAR ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "SELECT scienTW.works_count, order FROM sciens ORDER BY woRs DESC LIMIT 1;"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "SELECT name FROM artwork WHERE Width < 600 ORDER BY Height LIMIT 3215;"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "SELECT name FROM paint_art WHERE Width < 524 ORDER BY width DESC;"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "SELECT locn, b.the_year, a.entry_desc FROM locations A JOIN location_years B ON A \n<BOTH   LIMIT 249767 OFFSET -1001798500;"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "SELECT T3.LOCATION, COUNT(*) FROM WORKS AS T JOIN PIECES AS T2 ON LIBPkgs.utils.toupperxsdnsnameORELMNTATESAFTJOINPIECSACTIVEONLIBPkgsJOIENTTOFILTPOLLIBLUNGSTU3BINDINGSOTHERWIREXSJBHAVELPaintedBefore1885orAfter1"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "SELECT t3.id FROM artwork AS t JOIN artwork AS t2 ON t.parent = t2.id JOIN gallery AS t3 ON t2.artwork_id = t3.id  \n  GROUP BY t3.height, orderbydesc;"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "SELECT DISTINCT painting_id FROM paintings WHERE height > 500;"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "SELECT DUPE.STUDIO_PROJECT_MEMUNA, location\n       FROM paintings WHERE medium = 'on-panel' ORDER BY STUDIO_PROJECT_MEMUNA;"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "SELECT T3.name, COUNT(*) FROM painting AS P JOIN painting INTERCEPTED ON T2.id = Painting.medium.canvas\n  GROUP BY T3.name;"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "SELECT * FROM catalog_database WHERE date_created  > '1884' ORDER BY location, title;"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "SELECT T1.location_code, L1.the_year, NULL, from \n    FROM locations AS T JOIN catalogs AS T1 ON location_code  =  T.the_code;"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "SELECT AVG(height) AS avg_hgt, AVG(width) AS avg_widt FROM paintings WHERE gallery = 241;"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "SELECT AVG(height) AS avg_heigh, AVG(width) as avg_wide FROM painting WHERE medium = 'oil' ORDER BY galleries;"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "SELECT MAX(id) FROM painting WHERE date_of_painting < 1900\n        ORDER BY desc LIMIT 2;"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "SELECT Height, Id FROM Paintings WHERE creation_year = (SELECT max(creation_years)FROM paintings);"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "SELECT name, painting_height(name) AS Height FROM table WHERE TIMESTAMP >= (SELECT max(timestamp)  ALL FROM mysql_db ORDER BY name ASC LIMIT 5);"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "SELECT YEAR, MAX(HEIGHT) AS Largest_Heights, MIN(HEIGHT) AS Smallest_Heights FROM paintings WHERE Subtype = 'Ink';"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "SELECT T1.painter_name, CASE \n   \tWHERE UPDATE\n  \t\t\t    \n       \n        \n          \n      \n         \n     \n           \n                \n                 \n              \n             \n            \n               \n                    \n                          \n                         \n                       \n                        \n                     \n                   \n                  \n                            \n                      \n                           \n                             \n                              \n                               \n\n\n\n\n\n\n\n\n                                          \n"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "SELECT your\n  ORDER BY name;"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "SELECT T2.name, COUNT(*) FROM artist AS t JOIN artwork AS pt ON t.id = pid GROUP BY name\n  ORDER BY num DESC;"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "SELECT ARTISTS.firstname\n        FROM artwork\n            WHERE artist IN (SELECT T1.artist_id) \n                GROUP BY artist_name ORDER BY artist_name ASC;"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "SELECT SET  \n    FROM artwork_artists WHERE artist_gender = 'F' GROUP BY death_year ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "SELECT count(*) from WHERE NOBILITYFILTEREDByArtistsWithDeathsBefore1890.txt\n<jupyter_codeith_did_each_artistwho_createdlessthan_fourty_paintings_die_in_201535764yearsoldestofrunconfiguD\n\n         JOIN urnAtheliaWilson2Theater"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "SELECT name, born FROM people WHERE native_born=(SELECT MIN(number)FROM scuptitudes);"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "SELECT THE WHERE CATHETANKYRHOCAUGHNIAOUGHTMOSTINIGEART.txt\n<empty_output.htmlfile2019647835textfilehttpsdoitmindestinBrazhenBataschaefersherefrei0thttpCataloguoutSchildkasto1pointandtheendoflifeartisbareventsinbl"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "SELECT t3.the_id, t1.height FROM TGALERVYI AS t WHERE tg.the_widtht = (SELECT max(t2.thi) FROM tablename as t)\n        GROUP BY g.longestwidth;"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "SELECT WIDGET  LIMIT 2388615970;"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "SELECT DISTINCT painting_id FROM GALLERY_HIERARCHY;"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "SELECT P.ID FROM GALLERY_CLOCK AS C JOIN LOWEST_Paintings AS P ON p.id = c.lowestpaintinginGallery\n   GROUP BY DESC;"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "SELECT DISTINCT p.id FROM painting AS p JOIN creation AS c ON c.date  =  'after'  ORDER BY p.height DESC;"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": "SELECT CHOOSE FROM THEATRE;"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "SELECT Artist.artist_name, COUNT(*) FROM artwork WHERE media_type_code  =  'oil' GROUP BY artist_name ORDER BY count DESC LIMIT 3;"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "SELECT ARTIST, count(*) FROM artwork WHERE medium  =  'oil painting' ORDER BY COUNT DESC;"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": "SELECT T2_013__47596   FROM T286A__SBCBKUPINDLTMAINTENANTLISTING286A__BTCT_CLI0LLMTNLISTINGARTIANSDELTA_TO_CHROMELOCALFILESYSTEMENVIRONMENTTOTALNUMRESULTSELEC  \n        TORDER BY year ASC;"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": "SELECT oid, xtimestamp, to_apid, locc, objname FROM catalog_tables WHERE objname = 'oil painting';"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "SELECT YEAR, LOCATION, TITLE FROM Paintings WHERE LENIOR = 253 ORDER BY TITLE\n    LIMIT 498;"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "SELECT rownum, location, name FROM paintings WHERE height  >  1000 ORDER BY name ASC\n \tLIMIT 5;"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": "SELECT DISTINCT T1.firstname, T1.lastname FROM artists AS T JOIN paintings ON artissts.id = paintings.artist_id;"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "SELECT sub_rate.sql\n \n  \n  \n  \n \n \n \n  \n   \n\n  \n     FROM artist;"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "SELECT l.location_id, GROUP_CONCAT(DISTINCTFORMAT) FROM LOCATIONS AS L JOIN IMG_EXPLOITS A ON L.EXPLOIT_ID = A.LOCATION_ID JOIN POLLUTANTS P ON A.PET_ID = P.PET_ID JOIN CHECKOUTS CHK ON OCCUPS.CHECKOUT_ID = CHK.CHECKOUT_ID JOIN LOCATION"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "SELECT COUNT(*) FROM Paintings WHERE painting_id IN (SELECT id FROM Painting)\n        ORDER BY year DESC;"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "SELECT COUNT(DISTINCTRace) FROM table_name;"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "SELECT COUNT(*) FROM races;"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "SELECT name, won FROM results ORDER BY CASE \n        LIMIT -1703248569;"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "SELECT * \n        FROM (SELECT DISTINCT driver_name, race.team) AS F  JOIN RACE ON DRIVER = FAULBORNINCIDO GROUP BY TEAM ORDER BY WINNING DESC;"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": "SELECT irst_in__year, horseman.poledrivers\n  FROM races AS o;"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": "SELECT firstname, lastname FROM race_result ORDER BY win DESC LIMIT 3;"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "SELECT DISTINCT ON, driver_0936.drivers FROM driver_0936;"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": "SELECT T0RD1NCTORES_BY_AGE;"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": "SELECT TYPES, UNIVERSAL\n        ORDER BY DRIVING LIMIT 3984.061573;"
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": "SELECT COUNT(DISTINCT)\n    FROM table_name;"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "SELECT min(age) FROM drivers GROUP BY gender;"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": "SELECT uremins_drivers, max(minimum) FROM driver;"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "SELECT count(DISTINCTEngine)FROMDriverHistoryWHERE driver_age__ > 30ORDER BY DISTINCTENGINE;"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": "SELECT COUNT(*) FROM drivers WHERE age >= 30 ORDER BY DESC\n    LIMIT 5;"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": "SELECT name FROM driver ORDER BY name DESC;"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "SELECT name FROM driver ORDER BY Name DESC\n \n    LIMIT -1627.58394;"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "SELECT name FROM Race_Motors GROUP BY driver\n  ORDER BY firstname;"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "SELECT Name FROM Race WHERE Class = 'Group'\n    GROUP BY Driver_names;"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": "SELECT driver_name FROM race_table ORDER BY count DESC;"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "SELECT COUNT(*) FROM races WHERE driver IN (SELECT id FROM drivers ORDER BY name);"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": "SELECT R.driver_id, COUNT(*)FROM Result GROUP BY R.driver_id ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "SELECT location, race_name FROM q4527819 ORDER BY max_pace DESC LIMIT 0 OFFSET 3;"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": "SELECT ALL\n  ORDER BY ract_results DESC;"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "SELECT driver_names, age FROM race WHERE ROUND = set1.round ORDER BY speed DESC;"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": "SELECT name FROM race WHERE driver_id IN (SELECT id FROM driver ORDER BY age DESC)\n    ORDER BY RACE, DATE ASC;"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "SELECT name FROM race_names WHERE driver_in_champions = '1';"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "SELECT name FROM constructors WHERE Constructor  =  'bugatti'\n  ORDER BY firstname DESC;"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": "SELECT udid, driver_name FROM driver ORDER BY driver_name\n    LIMIT 1;"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": "SELECT a, b;"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "SELECT CONSTR WHERE CATALOGUJIKAMYIKOUCH.X\n<-0219437658    ORDER BY t1, DESC;"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": "SELECT top \n        FROM (SELECT Engine_code, COUNT(*) AS NumberOfDrivers FROM NORTHWARE) ORDER BY numberofdrivers DESC;"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "SELECT T1.engine_nameFROM cars ORDER BY COUNT DESC\n    LIMIT 3;"
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": "SELECT allenginetypesfromdrivers\n        LIMIT 2;"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "SELECT engines_type, driver1.engines\n    FROM driver1;"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": "SELECT name FROM Race WHERE id IN (SELECT driver_id FROM participating_drivers)\n  GROUP BY nationality_id ORDER BY COUNT DESC;"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": "SELECT name FROM results WHERE finish = 'didnt see'\n   \n    ORDER BY COUNT DESC;"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": "SELECT name FROM race_driver WHERE driver_age  <  20 \n   \n    ORDER BY speed DESC;"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "SELECT YOUR LIMIT 4965178.3;"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "SELECT ANDA\n    WHERE THEY IN (SELECT TEAM, NO.I)\n \n  \n       \n      \n        \n          \n             \n                \n              \n               \n            \n                  \n                    \n                    \n                        \n                      \n                         \n                          \n                            \n                              \n\n\n\n\n\n\n\n                                          \n\n\n\n\n                                                 \n                                                   \n"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": "SELECT NIKL\n       \n    WHERE RACE_COUNT__YWEEK = 5;"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": "SELECT Drivers FROM Race_Table WHERE Driver IN (SELECT Name FROM Driver_Names)\nGROUP BY NAME ORDER BY NULL;"
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": "SELECT driverid, name FROM race WHERE year = 2017;"
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": "SELECT ions, count(*) FROM drivers JOIN locations ON drivers.to_office_id = locations.driver_id JOIN status AS unpivot ON LOES.driver_status IN (SELECT driver_ids) GROUP BY name;"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": "SELECT name, year FROM drivers WHERE NOT IN (SELECT name FROM all_games WHERE name = 'JAMES HINCHCLIFFE')\n  ORDER BY RANDOM;"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "SELECT COUNT(*) FROM table_name WHERE language <> 'NULL';"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": "SELECT name, count(*) FROM countries WHERE population < 2000000000;"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": "SELECT * FROM language ORDER BY Name ASC;"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "SELECT name FROM lang_alph ORDER BY name ASC;"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "SELECT id, name FROM language_listening_guitar WHERE name = '?';"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "SELECT name FROM languages_info WHERE LANGUAGES_TRADING_OPERATING_AREA6780264514.substring\n<jupytertyoe\n \n\nLIMIT 3;"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": "SELECT Name, Overall FROM countries ORDER BY Scores DESC;"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "SELECT Name FROM countries ORDER BY Score DESC\n \n   LIMIT 5;"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": "SELECT avg(justice_score)FROM country ORDER BY score DESC;"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": "SELECT avg(Justice_score) FROM Sterling_2143689057;"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "SELECT hd_max, ld_min FROM countries WHERE country <> 'Norway';"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": "SELECT ALL\n  FROM (SELECT DISTINCT max(health_score) AS max, min(health_score) AS min  \n    FROM country WHERE location <> 'Norway' ORDER BY score DESC);"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "SELECT COUNT(*) FROM countries WHERE Official_language  =  'Different language'\n \n  ORDER BY Language ASC;"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": "SELECT COUNT(DISTINCTLanguage)FROM Country;"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": "SELECT country, round(education_score) FROM country ORDER BY educational_score DESC\n  LIMIT 10;"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "SELECT name FROM countries ORDER BY EDUGIsc_order;"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": "SELECT COUNT(CASE), BOLTIGA, GRANDINAE\n     FROM PERCENTAGRIGDES;"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "SELECT name FROM Countries ORDER BY Political_score DESC LIMIT 1;"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": "SELECT name, official_language FROM countries;"
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "SELECT name FROM country;"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": "SELECT native_or_most_populous, name, country_name FROM countries WHERE population > (SELECT max(e.population)FROM states AS s JOIN COUNTRIES AS e ON EUROPE_HOUSTON_CODEU.country_name  =  E.name ORDER BY POPULATION DESC LIMIT 1);"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": "SELECT name FROM countries ORDER BY population DESC LIMIT 10;"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": "SELECT COUNT(DISTINCTLanguage), LANGUAGE FROM fivethoughtmostcountries;"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "SELECT top \n   \n \n  \n  FROM pop_data ORDER BY LANGUAGE DESC LIMIT 1;"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": "SELECT official_languages FROM table;"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "SELECT name, code FROM countries WHERE population <> ''\n  ORDER BY COUNTRIES.NAME\t\t\tLIMIT 2;"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "SELECT Country_name, AVG(Score) FROM table1 GROUP BY Country_name ORDER BY score DESC;"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "SELECT avg(score) FROM table_name;"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": "SELECT lang, ounit\n        FROM languages;"
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": "SELECT language_code, name FROM countries ORDER BY number ASC;"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": "SELECT avg(score) FROM table_name AS t JOIN COUNTRIES TABLE_JOIN ON NATURAL_LANGUAGES.countries_table_name = T.country_name;"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "SELECT uc_distinct_official_languages.csv\n     FROM (SELECT country_name, avg(score) AS average_score  \n    FROM official_languages GROUP BY country_name ORDER BY score DESC), cteko;"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": "SELECT DISTINCT Largest_of_official_languages FROM countries;"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": "SELECT Country_name FROM Languages ORDER BY CASE \n     LIMIT 0.236941875 OFFSET 0.236941875;"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": "SELECT name FROM Languages WHERE NOT IN (SELECT officelanguages FROM Countries);"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "SELECT name FROM countries WHERE native_language  =  'Ukrainian'\n    ORDER BY population DESC;"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": "SELECT name FROM country WHERE name  =  'United States'\n   \n \nORDER BY NAME ASC;"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "SELECT name FROM country WHERE NOT IN (SELECT official_language FROM kernel_installations)\n   \n\n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": "SELECT name FROM counties_table WHERE country IN (SELECT DISTINCT primary   FROM official_languages)\n    ORDER BY SUBSTRING_INDEX, xtraversed.componenent, BOTH DESC\n    LIMIT 2;"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": "SELECT name FROM country WHERE score < 90;"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answer": "SELECT t2.address_components, COUNT(*) FROM \n        FROM people GROUP BY address_components;"
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": "SELECT t3.the_geom, T2.the_address FROM ersda_all_points AS t JOIN points AS t2 ON t.the_x = t2.the_z_stretch_info\n        JOIN dallas_point AS t3 ON t2.the_point_ref_identity = t3.the_identity ORDER BY the_address;"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "SELECT location_name, state FROM table WHERE category = 'States';"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": "SELECT ALL FROM properties WHERE state_code IN (SELECT code FROM zones) ORDER BY owner_id, b\n \n  \n  \n  \n  \n  \n  \n    \n  \n   \n      \n       \n        \n          \n              \n            \n           \n         \n     \n             \n               \n                 \n                \n                  \n                    LIMIT 0518396742;"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA WHERE LOWER\n \n  \n  \n \n \n   =  'rooftop'\nORDER BY colname;"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": "SELECT id, name FROM features WHERE code ='feature:foote';"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "SELECT Property_Feature, BIOTENESS_FEATURES.short_feature_name, BIOTENESS_FEATURES.description FROM (SELECT distinct \n \tFROM sys_properties WHERE property_feature = 'Bio_Feat') AS B;"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": "SELECT fe_name, udt_comment(fe_name) FROM properties;"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": "SELECT T2.name, COUNT(*) FROM HAVING m\n  GROUP BY name ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "SELECT AVG(property_count) FROM properties WHERE location  =  'sandiego';"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "SELECT COUNT(*) FROM properties_rename WHERE city  =  'San Francisco'\n    ORDER BY numpickups DESC;"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": "SELECT COUNT(*) FROM properties WHERE LOWER_HORIZONTAL <> 'parking' ORDER BY FLOOR_ENTRANCE DESC;"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": "SELECT gender, COUNT(*) AS number_of_users FROM users WHERE DESCRIPTION  = 1;"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "SELECT category_a FROM descriptions WHERE lower_description IN (SELECT name FROM users)\n  LIMIT 5;"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": "SELECT FLOOR(COUNT_STAR) FROM property GROUP BY owner\n  LIMIT 1;"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": "SELECT t1.property_count, rownum, from\n    WHERE owner IN (SELECT property_count)ORDER BY DESC;"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": "SELECT avg(property_id) FROM property WHERE has_garden = 1\n    JOIN property AS p ON h.property_id = p.id;"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": "SELECT COUNT(*) FROM properties_with_garden WHERE has_garden = 1;"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "SELECT TOWN, COUNT(*) FROM Properties WHERE has_swimming_pool = 1;"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": "SELECT cty, ets_in\n     FROM Properties WHERE prop_id IN (SELECT id FROM PROPERTIES)   GROUP BY cty;"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": "SELECT vendor_id, min(price) FROM RequestedBy WHERE type = 'buy';"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "SELECT top_inspiration.property_id FROM properties ORDER BY price ASC LIMIT 1;"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": "SELECT avg(rooms) FROM properties WHERE city  =  'San Francisco'\n    ORDER BY avg DESC;"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "SELECT avg(rooms) FROM properties;"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": "SELECT Question, howmany\n \n\n\n  \n\n   \n\n  \n     \n    \n      \n       \n        \n          \n            \n              \n                \n                 \n                  \n                     LIMIT 32.04658719 OFFSET 2.1482;"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "SELECT COUNT(DISTINCT) FROM table_name;"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "SELECT questions.id FROM questions JOIN userids ON questions.id = userids.id JOIN LONGS ON urs.user_id=log.user_id\n      GROUP BY DISTINCT  ORDER BY count DESC LIMIT 5;"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": "SELECT question_id(Q678) AS SearchSequence FROM answer_logfile;"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "SELECT * FROM searches WHERE user_id = 2 ORDER BY timestamp DESC LIMIT 1;"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "SELECT MAX(date_of_search)FROM searches;"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": "SELECT TIME() AS search_time, U2.text  FROM users JOIN trails ON apps.id = users.trail_id ORDER BY traincnt DESC;"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": "SELECT SEARCH_STRINGS(UserID)\n        ORDER BY TIMESTAMP DESC;"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": "SELECT t3.property_id, COUNT(*) FROM property_ownership AS t JOIN tenants AS t2 ON LOWER \n<snippet10976548CASEWHENt1ISNOTNULLTHEnothingweshouldbeinwestonedayofthemonthpOXITLorem.i.propertiesT2ONETHOUSANDROWSBESYNCLOUDYHAVEANOTENOREWHO"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": "SELECT ctye, zctas\n  FROM properties_sca AS t WHERE property_id = 'pzne' ORDER BY desc;"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "SELECT User, COUNT(*) FROM searches WHERE user_id = 1 GROUP BY Category;"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "SELECT UsersWithOneSearch.sql\n         WHERE Search_Count = 1;"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "SELECT users.birth_year FROM searches ORDER BY id LIMIT 1;"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "SELECT avg(casewhen)\n  WHEN  FROM users u WHERE lower_bound <= unordered_table2354167908.age   ORDER BY first_name, last_name;"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": "SELECT T2.login_name FROM T1 WHERE T1.status='In' ORDER BY T2.first_name ASC;"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": "SELECT CONCAT(U1.firstname2_pseudo_anonnameCENNESCENTRINIKUSANDANONNAME) AS ANONLOGIN FROM CLASS as C JOIN CATALOG AS U1 ON u1.catalogueid = C.classid\n  ORDER BY lastname;"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "SELECT * FROM (SELECT count(*) AS Total_Search, CAST)\n    WHERE Buyer  =  'Buyer' \n  GROUP BY buyer;"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "SELECT date_part, COUNT(*) FROM search GROUP BY date_part ORDER BY count DESC\n     LIMIT 1;"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": "SELECT created_at FROM users WHERE login_name='ratione';"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": "SELECT regdat FROM users WHERE logname = 'ratione';"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": "SELECT option\n   \n   FROM (SELECT CAST(first_name_middle_name_family_name_as_required_by_the_login_and_others) AS LOGON, TAXPAIDFROM (SELECT DISTINCT firstNameMiddleNameFamilyNameAsRequiredByTheLoginAndOthersFromSellerValuation WHERE sellerValue = 1.208697354\n    ORDER BY FIRSTNAME"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": "SELECT CONCAT(first_name) AS First_Name, uc.given_name  \n     FROM employees e JOIN userprofiles up ON u.userid = ep.profileid JOIN usernamegen tempaliasgen ON u.userid = alias.usersid;"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": "SELECT Building_name FROM (SELECT DISTINCT *FROM Interview_data) AS T ORDER BY rownum;"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": "SELECT city.city_name4957 FROM city WHERE LENGTH2D=(SELECT CITY.CITY_NAME)\n  ORDER BY ROWS DESC;"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": "SELECT COUNT(*) FROM properties WHERE num_of_features  >=  2\n        ORDER BY type, num_of_features DESC;"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": "SELECT COUNT(*) FROM properties_rename WHERE property_name  \n<UICONTINUE \n\n    ORDER BY property_id;"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": "SELECT count(Photos) FROM properties WHERE Type = 'property'\n  ORDER BY Photo_Count DESC;"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": "SELECT COUNT(property_photos) AS num_of_property_photos, FROM\n   \t\t\tFROM properties WHERE id = '01';"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": "SELECT photo_id FROM property_photos WHERE prop_id IN (SELECT id FROM properties JOIN property_types ON properties.type_id = property_types.id) GROUP BY ue_id;"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "SELECT hd.census_population FROM census_data AS c JOIN demographics AS d ON ud.userid = p.userid;"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "SELECT T3.TOTAL_MAX_PRICE FROM properties AS T JOIN group_a AS U1 ON ucastie_broadcasting_as = id GROUP BY name ORDER BY maxprice DESC;"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": "SELECT t3.max_price FROM properties AS t JOIN (SELECT property_id, owner_type\n \tFROM properties WHERE owner_type IN (SELECT short_code FROM facilities)) AS t2 ON properties.property_id = t2.property_id;"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "SELECT PropertyName, ItemID FROM dbo WHERE Type  = 13960 ORDER BY ModificationStamp;"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": "SELECT timestamp(), prop_name FROM properties WHERE id IN (SELECT pid FROM property_history) GROUP BY DATESTAMP ORDER BY TIMESTAMP;"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": "SELECT id, name FROM properties ORDER BY CASE \n    LIMIT -1234567890;"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": "SELECT PROPERTY\n   \n  \n  FROM T1 JOIN T2 ON t1.property_type = t2.prop_type;"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": "SELECT detaildescription FROM agecodeconfigurationservice;"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": "SELECT Description FROM Classification WHERE Category ='G'\n    ORDER BY Desc;"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": "SELECT ROOMS_INFO.ROOMSIZES;"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": "SELECT COUNT(*) FROM BOM\n    WHERE ROOM_SIZE = 1;"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": "SELECT country.name FROM users WHERE first_name = 'Robbie'\n  GROUP BY country.name ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": "SELECT country FROM birthdays WHERE celebrate_last = 'Robbie'\n  ORDER BY county DESC;"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": "SELECT oidCatalogue.People.givenName, oidCatalogue.People.middleName, CATALOG_TABLE_NAME FROM WHERELYECTRLFK_ADDNINFO t JOIN MAIN_PROPERTYCTRL join ON T.PROPID = MAIN_PROPERTYCTRLJOB.OBJECT_ID \n  GROUP BY oidCatalogue.People.givenName, oidCatalogue."
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": "SELECT * FROM bk_property_owners WHERE Property_ID IN (SELECT id FROM property_master ORDER BY property_name)\n \nGROUP BY owner;"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": "SELECT OBJECT_ID, name FROM sysusers WHERE USER_NAME IN (SELECT user_name(*)FROM properties)\n \n\n\n\n  \n\n\n\nORDER BY OPTIONAL DESC;"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "SELECT LOWER(t.search_string) FROM properties AS t WHERE T1 = (SELECT id FROM properties WHERE property_management_team_id  = 23);"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": "SELECT uesrname, userid FROM users JOIN properties ON users.userid  = properties.userid GROUP BY properties.userid;"
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "SELECT name, LAST_NAME, MAX(ID) FROM Users WHERE HAVESCHIRRED >= 2 ORDER BY DESC\n  LIMIT 1;"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "SELECT Tag\n    FROM Favorite_Bike;"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": "SELECT name, weight FROM products WHERE type = 'bike' ORDER BY price;"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": "SELECT HEAT_IN_MILE, NAME_OF_YOUR_COKESTOMONES_GRAMMY\n        FROM GRANTS_TABLE;"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "SELECT min(weight) FROM bike_racing;"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "SELECT avg(price) FROM bike WHERE Made_of = (SELECT id FROM manufacture AS ALIMIT 0241);"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "SELECT country, sex FROM cycling_data WHERE country = (SELECT name FROM other_countries)\n  ORDER BY Freq DESC;"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "SELECT DISTINCT name, YEAR FROM table_name WHERE CATEGORY  = 3;"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": "SELECT T2.product_name, T1.id;"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "SELECT TOP \n        FROM (SELECT ID FROM CYCLESTNATIONTABLE) AS OWHERE id =(SELECT TOP   ORDER BY MODELNO DESC)     \n  ORDER BY BIKEMODELNO ASC, NEXTLAKEASC;"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "SELECT name FROM production AS p JOIN catalogue AS c ON p.product_name  =  c.fn_product_name \n    JOIN country AS co1 ON c.fn_origin =  'German' ORDER BY product_name DESC;"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": "SELECT CHANNEL, CYCLEPATHWITDISTRICTs.GRAPHICALPROCESSINGUNWINDEDNULL\n  ORDER BY LevelOfHeat;"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": "SELECT COUNT(*) FROM table_name WHERE Cyclist = 'No'\n  \n    ORDER BY YEAR DESC;"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "SELECT * FROM racing_bike WHERE price  = \n  (SELECT peak FROM best_race) ORDER BY DESC;"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": "SELECT * FROM bikes WHERE owner.name IN (SELECT oid_2p, oid_cb)\n        ORDER BY start_date DESC;"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": "SELECT udname FROM message_or_notifications WHERE msgcontent = 'Picked up a racing: /m/cyclists/{cId}'\n   \n   \n    ORDER BY RUCKSACH_RESULTS, PERIOD ASC\n  \n    \n      \n           \n \n      \n         \n\n      \n       \n        \n     \n             \n            \n          \n               \n              \n                  \n                    \n                   \n                     \n                      "
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": "SELECT name FROM bike WHERE MATERIAL  \n<  TIME_BUILDING.FIRST_SUBSTRINGS LIMIT 1402365897;"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": "SELECT COUNT(*) FROM trips GROUP BY user_id;"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer": "SELECT question, whats\n \n  \n    LIMIT 250;"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": "SELECT cakes.id, ounces FROM (SELECT id, AVG(flavor) AS average_flavor, APPROXIMATE_COUNT_SAMPLE() OVER \n        WHERE TOTAL_extrapolated = TRUE) ORDER BY value DESC LIMIT 1;"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "SELECT c.name, ounces FROM (SELECT name, A2B_OZ) AS t ORDER BY price ASC LIMIT 1;"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": "SELECT t2.ingredient_id, GROUP_CONCAT(DISTINCTINGREDIC)\n        FROM recipe AS r JOIN LOWESTCOOKIEAS p ON R1.recipeID = LowestCookieAssembly.cookies   GROUP BY T2.IngrediENT_Id;"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": "SELECT good_id FROM Goods WHERE flgTailor  =  (SELECT fkflgTailorFromGoodsTable)\n  JOIN Apple ON Apples.fkflgTailOR  = TAILoRIDColumnInAppleTable.appleId;"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": "SELECT t.continent, h.gdp, xtremefiltercolors\n    FROM (SELECT contintentname   FROM syssessioninfo) AS T JOIN sestrings ao ON stagic = 'Apple'\n            JOIN APPLEtaste AsTaOtehPurposelyAskWhatAreTheIdsWithAppleFlavor2017438956 ON t.id ="
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": "SELECT item_price FROM Inventory WHERE Warehouse_id = '09'\n    ORDER BY ASC;"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": "SELECT _id_ FROM goods WHERE price < 2;"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "SELECT DISTINCT t1.customer_id FROM database AS c JOIN tenents AS t1 ON C.id = Tent.CustomerId JOIN Items as ia ON Entrace.ItemsId  =  items.ID JOIN receipts  onEntrybELT1253480697telenfEBCAKIcakkCUKEflavoAmoEBOB2joandJOINEntriesasd"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "SELECT customer_id FROM Store GROUP BY CUSTOMER_ID\n  ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": "SELECT name FROM table_name WHERE condition\n<br;"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": "SELECT buyed.CUSTOMERS, COUNT(buyed)GROUP BY CLIENT\n  ORDER BY clients;"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": "SELECT id FROM Customer GROUP BY id ORDER BY count  \n    LIMIT 0;"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "SELECT DISTINCT c.customer_id FROM Receipt JOIN Customer AS C ON TempTable.customer_id = custemory_id;"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "SELECT Ship_name FROM customers WHERE Shopping = true ORDER BY LastName DESC LIMIT 2;"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "SELECT name FROM customers WHERE number  >10;"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": "SELECT umber_of_types\n        FROM tableName;"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": "SELECT COUNT(type) FROM baking_sell;"
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": "SELECT flavor FROM taster_database WHERE variety = 'Croissant';"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "SELECT * FROM Croissant_Order;"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": "SELECT DISTINCT item_code;"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "SELECT DISTINCT c.item_code\n        FROM (SELECT r.buyerid, e.eventdate) AS T  \n          JOIN customer AS b ON t.buyerid = b.customerid  \n          JOIN events AS e ON b.buyerid = e.buyerid \n          JOIN cartridge AS c ON B.BUYERID  = C.ITEMCODE      \n        GROUP BY t.buyerid, TIMEST"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": "SELECT ROW_COUNT() OVER\n    FROM (SELECT AVG(CASETYPE) AS TYPE_OF_FOODS, MAX(PRICE) as MAXIMUM_PRICE, MIN(PRICE) FROM FOOD WHERE IS_DISASTERTIC = 0 GROUP BY CASETYEOGOR) i;"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "SELECT DISTINCT FOOD_TYPE, AVG(price) AS avg_price, MIN(price) AS min_price, MAX(price) AS max_price FROM FOOD_FOOD_TYPE_VIEW GROUP BY FOOD_TYPE ORDER BY FLOOR;"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": "SELECT Receipt_num FROM receipt WHERE Item  = 'Cake' ORDER BY no.buyer.itemtype\n   \n  \n \n \n \n  LIMIT 50 OFFSET -1;"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": "SELECT Cake, Cookie FROM sales ORDER BY OrderDate;"
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": "SELECT number, date FROM purchase WHERE customer_id = (SELECT id FROM Customer ORDER BY last_name DESC LIMIT 1)\n    ORDER BY logannessettinhettel LIMIT 1;"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "SELECT RECEIVING_BANKRATS, ORDERS.BILLING_CREW, ORDERS.CROISSANT_SHOPS_ID FROM CUSTOMER_ORDH O JOIN ORD HAVES ON INSTALLATION \n<nulls\n \n\n\n     ORDER BY RECEIVING_BANKRATS;"
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": "SELECT TOP \n        LIMIT 2016397.4853;"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": "SELECT DISTINCT T2.date, t1.amount FROM Basket A JOIN basket_connection AS T1 ON T1.basketid = BASKETS.idJOIN cashflow AS CASH ON CASHOFLOWID  = 38745690    ORDER BY amount DESC;"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "SELECT ProductID, COUNT(ProductId) FROM sales_details WHERE Type = 'S' ORDER BY count ASC LIMIT 1;"
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": "SELECT best_selling_item FROM sales GROUP BY best_Selling_item;"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": "SELECT COUNT(name) AS num_of_goods, F.food_type FROM goodness JOIN classification AS F ON Goodness.id = Classification.fk\n  GROUP BY FoodType;"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": "SELECT t2.description, COUNT(DISTINCTGoodsEntered)\n  FROM Goods AS G JOIN LOTLIST AS T1 ON goodseuenceid = ID   GROUP BY DESCRIPTION;"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "SELECT t.food_type, AVG(f.price)FROM Food AS F JOIN FOODTYPES AS T ON ounces = 235;"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": "SELECT foods.food_type, AVG(orders.price) FROM orders JOIN Foods ON Orders.Food_ID = FLOOR JOIN Types ON ORDERS.Type_Id  = FLOAT JOIN IDS WHERE ON e\n<imgur.com\n  \nORDER BY price DESC;"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": "SELECT DISTINCT T1.id FROM good_offering AS X JOIN flavour AS AXI ON X.good = AXI.goods JOIN offer AS XP ON MAXFACOT.package = XP.packages GROUP BY T1.id;"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": "SELECT id, item_name FROM Goods WHERE flavor = 'Apricot' LIMIT 3;"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": "SELECT t3.name FROM cte_Produce AS C JOIN TABLES AS T3 ON CASE\n<WHEN ORDER BY DESKTOP DESC;"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": "SELECT *FROM table_nameWHERE price  > (SELECT MAX(price) FROM all_accessories);"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": "SELECT DISTINCT product_id, price FROM goods WHERE price < (SELECT avg(price) FROM goods);"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": "SELECT avg(distinctGoodPrice) AS Lower_than__avg, count()AS NumberofLowest__InStock FROM inventory WHERE goodprice<= (SELECT avg(cost)FROM INVENTORY);"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "SELECT Your \n    FROM Goods ORDER BY price DESC;"
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": "SELECT DISTINCT t2.id FROM (SELECT *FROM Goods ORDER BY price   LIMIT 1) AS M ORDER BY DESC;"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": "SELECT DISTINCT number_of_receipts, goods FROM table_name;"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": "SELECT T1.DISTINCT_RECEIPT_NUMBERS, WHERE\n   ORDER BY INVOICE_COST_EXPENDED   \n\n   \n  \n\n    \n\n\n      \n      \n        \n         \n      \n          \n       \n           \n      \n            \n               LIMIT 1;"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": "SELECT SCHOOL_DAY, COUNT(*) FROM z_cust WHERE CUST_GUIDE_HOME_RAN_OUT_EXACTLY = 'FALSE' GROUP BY YEAR\n    ORDER BY TOTAL DESC LIMIT 4;"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": "SELECT STR_AS_YYYYMMDD20KGHT FROM Customers JOIN Orders ON customers.customerid = orders.customerid;"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "SELECT T1.ID FROM GOODS_INFO WHERE T1.GOODS_CODE  =  'APP'\n  ORDER BY GOODS_CODE;"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "SELECT * FROM Goods WHERE id = 'APP'\n   \n  \n \n\n \n \n  ORDER BY QUANTITY DESC;"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": "SELECT TOP \n    GROUP BY GENERATION, PRICEHTMID   ORDER BY DESC;"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": "SELECT T2.goods_id, T1.price FROM Goods AS t JOIN DOCTRINELECTRAVE AS AP ON t.Goods_ID = ApothecarineletralletaeTROIODSdecimaleiAndOneGroupDecimalOneGroupDecimaFoEIdandMoertlenaLatinAmerikanusX2G \n      JOIN ResultofInterventionAsDemandedOFFoEIdANDMED"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": "SELECT last_name FROM Customers ORDER BY first_name ASC\n  LIMIT 3;"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": "SELECT T1.cust_id, uc.uin, lname FROM CUSTOMERS AS T JOIN USERS AS UC ON LTRIM  =  CASE   \n        ORDER BY LNAME DESC;"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "SELECT ALL FROM STUDENT ORDER BY CLASS, SUBJECT\n \t\t\t\tLIMIT -2015967384;"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": "SELECT ON GROUP BY GLOBAL_ID\n    ORDER BY COLMN   LIMIT 20;"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": "SELECT * FROM purchases WHERE purchaser_id = 'or'\n    ORDER BY product_name LIMIT -50;"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": "SELECT pd.order_details, po.purchase_order_number FROM warehouse_transactions AS w JOIN purchasing_orders AS po ON W.order_id = PO.order_id JOIN order_details AS od ON Po.order_id =od.order_id \n        GROUP BY customer_id ORDER BY receipts DESC;"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": "SELECT time(column) FROM table_name;"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "SELECT num, status FROM receipts ORDER BY updated DESC LIMIT 1;"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": "SELECT id, name FROM receipt ORDER BY date ASC;"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "SELECT t2.wholesaler_id, GROUP_CONCAT(t1.part_number) AS parts FROM part AS T  JOIN WHOLE_MACHINE AS T1 ON WHOTS.PART  =  PART.PartID    JOIN Parts AS T2 ON WholesAlmsIn.WholeselmId = t2.wholesaler_id GROUP BY YEAR ORDER BY earliest\n   \n    \n\n\n\n \n"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": "SELECT k10, name FROM cte_driver ORDER BY RANDOMIZE\n    \n\n\n   \n  \n   \n     \n\n   \n      \n       \n      \n        \n         \n           \n            \n              \n               \n                  \n                    \n                     \n                      \n                       \n                          LIMIT 2;"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": "SELECT ID FROM Recipe WHERE Cost  \n<= '$6' ORDER BY price DESC;"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": "SELECT DATE_FORMAT(visit_date_time_on_display_dbysfqycbmzgfuinpvnxhmjbkplwf0659472138aubgcuykxqaeyojrweynoawykz2lxjyiy9s9i9wibgyvyfyfgxtbfyljkxw7zvn9piz"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "SELECT CONCAT(e.firstname) AS full_name FROM Employees e JOIN Customer c ON rownum=c.CustomerId ORDER BY FirstName ASC;"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": "SELECT avg(price) FROM Goods WHERE color IN (SELECT *FROM goodsmysql_db1049273658OrbGuyNameColorBlackberrRYellowBertrandomarkcolorIsGrayblaebleBrightMillsFurnishingtonWomondstmaybeNothinhthecolorb)\n \n\n\n\n\n\n\n  \n   \n      \n       \n     \n    \n        "
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": "SELECT avg(price) FROM Goods WHERE LOWERI_BLACKERRY IN (SELECT T1.goodsid, C2.colorid) ORDER BY PRICE DESC;"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": "SELECT name FROM catalog_goods WHERE id IN (SELECT ID, ounces)\n    ORDER BY price ASC LIMIT 1;"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "SELECT top \n        FROM (SELECT * FROM Cheeses) AS c WHERE Taste_of = 'Good' ORDER BY price ASC;"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": "SELECT t2.Dessert, GROUP_CONCAT(t1.price) AS Flavors FROM fruit_ecommerce_sample AS T WHERE MODULUS = 'K' ORDER BY price DESC\n  LIMIT 4;"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": "SELECT t2.goods_name, xtmax(t1.price), xmin(t1.price)\n     FROM TOTAL_TABLE AS TJOIN T1 ON LEFT\n   =T1.goods_id;"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": "SELECT * FROM product GROUP BY price ORDER BY price\n  LIMIT 1;"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": "SELECT T1.food_goods_name, MIN(price) AS mininum_Price, MAX(price)AS maxmun_Price FROM tableName ORDER BY price DESC\n  LIMIT -3;"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": "SELECT oulk_dates, COUNT(*) FROM orders GROUP BY date ORDER BY count DESC;"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": "SELECT DATE(min_receipt_time) AS min, TIMESTAMP(max_receipt_time)AS max, AVERAGE(num_receipts)as mid FROM receipt;"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": "SELECT ustomer_id FROM CUSTOMERS GROUP BY Customer\n    ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": "SELECT TOP \n        FROM (SELECT c.customer_id, COUNT(*) AS num_purchases) AS T ORDER BY total DESC LIMIT 1;"
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": "SELECT COUNT(DISTINCTCustomerID) AS NumberOfCustomers FROM TABLEWHERE CustomerVisitDate = 2016;"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "SELECT COUNT(date), customer_id FROM visits GROUP BY DATE\n  ORDER BY count, orderby;"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": "SELECT c.firstname, uc.lastname FROM Customers AS c JOIN Customer_O_Archives AS coa ON c.customer_id = coa.customer_id JOIN Order_Items OI ON oi.order_id  =  ca.order_id JOIN Items IA ON ia.item_id  = oi.item_id  GROUP BY IA.Item_Id\n    ORDER BY item_Rank ASC LIMIT 1;"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": "SELECT DISTINCT h.firstname, l.lastname FROM customers AS c JOIN households AS h ON customer.customerid = h.customerid JOIN delivery_addresses As ON Appled.firstname <> 'Jimmy'\n               \n              \n  \n           \n   \n             \n            \n    \n      \n       \n     \n        \n          \n         \n                   \n                  \n                     \n                \n                      \n                 \n                    \n                       \n                        "
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": "SELECT DISTINCT T1.id FROM ria_croissant AS t JOIN cookie AS c ON t.expiration_date = CURDATE\n  JOIN cookies as s ON p.discounted_price  =  SUBSTRING_INDEX  ORDER BY price ASC;"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": "SELECT k2.id FROM (SELECT DISTINCT T1.TRUckelvArsOUeD, CAkOE FROM ernStdNBudgesTruKl cJOIN CALON dbnameGTOJoin ON connection.cake = true) AS p JOIN sysd3maNE AS s ON xt0\n<L4M25_upgrades LIMIT 19786;"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": "SELECT FROM ORDER BY PRICE ASC;"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "SELECT * FROM restaurant WHERE price = (SELECT avg(price)FROM tart_cake);"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": "SELECT Gds.Good_ID FROM (SELECT Goods.Price, avg(price) from \n    \t   WHERE Goods.Price > (SELECT avg(price))) AS T;"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": "SELECT urchase_id FROM purchases WHERE purchase_date = (SELECT MAX(purchase_date)FROM purchases GROUP BY puchase_id, item_id ORDER BY AVG\n     LIMIT 2504137986.5);"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": "SELECT item_id, o.orderbyprice FROM (SELECT name) ORDER BY customer_address;"
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "SELECT name_id(), flavor()\n  FROM TableName ORDER BY Price DESC;"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": "SELECT ID, FLVOR FROM cakes ORDER BY DESC;"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "SELECT Flavor, GROUP_CONCAT(id) AS uniqueSignificance FROM cake ORDER BY CAKES DESC;"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": "SELECT * FROM store_items WHERE item_name = 'Chocolo'\n    \n    ORDER BY popularity DESC;"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": "SELECT pbs, item_name FROM basket WHERE condition = (SELECT MAX(purchase) FROM basket GROUP BY purchase);"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": "SELECT Flavor.eatery, Sac\n     FROM eryflavors JOIN CTE\n   WHERE ON in   \n      \t  \t \t\t\t        \t \t\t\t  \t     \t \t     \n     \t \t          \t \t   \t       \n\n  > \t\t         \t  OR \t\t       \n    \t \t            \t \t\t\t\t\t\t\t\t\t               \n           \t  ORDER BY VALUE\t\t\t\t\t\t\t\t                   \n             \t   \t\t\t\t\t\t                               \n              \t \t \t\t   \t\t\t\t\t\t\t                \n      \t"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": "SELECT will, inconsistent_behavior\n  WHERE flavor = 'V' ORDER BY favorite_foods;"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": "SELECT rownumber, name FROM goods WHERE category = 'baking';"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": "SELECT item_code, name, quantity FROM orders ORDER BY quantity DESC LIMIT 3;"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": "SELECT t1.id FROM Customers AS t JOIN Orders AS t1 ON t.customer_id = t1.id GROUP BY t2.id, t3.amount  \n        ORDER BY count DESC;"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": "SELECT T1.customer_id FROM CustomersT1 JOIN OR RECORDSINCTOTALOVER150CUSTOMERST1JOINTABLEGROUPBYGROUPTRUSTHAVEREVER2COSTOVER170DOCKNOWHEREINOREVEROFTOTALOVERPOUSCUSTOMERSSELECTcustomer_idFROMCustomersT1WHEREGROUPbyStreetShippingCUSTOMERTotalSpentD"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": "SELECT * FROM Customers WHERE customer_id IN (SELECT DISTINCT TO \n    \t   FROM Orders) GROUP BY good, customer_id;"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "SELECT CustomerID, COUNT(*) AS NumDaysOver5 FROM CUSTOMER_GLOBAL_CHECKOUT WHERE CHECKOUT_VALUE  > (SELECT AVG3NADAYS\n     FROM CUSTOMERS) ORDER BY CUSTOMEI DESC;"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": "SELECT DatePart FROM sales WHERE Store_name  =  'The Crisis Arts Bureau';"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": "SELECT T1.date, T2.candy_bottle FROM sales AS T\n    JOIN calendar AS T1 ON T1.bakery = T2.name;"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": "SELECT COUNT(*)FROM driver_license;"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": "SELECT count(*) FROM driver_license;"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": "SELECT COUNT(*) FROM race_rudder AS R JOIN MAKE AS R ON M.ID = R.ID;"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": "SELECT number_of_drivers, bonus FROM employees WHERE status = 'driver';"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": "SELECT ION_ID, AVG(AVG) FROM DRIVES GROUP BY MAKE\n    ORDER BY INITCAPS;"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": "SELECT obj.avg_age, nyc2\n  FROM (SELECT avg(a.age) AS avg_age, a.make  \n  FROM fares a JOIN vehicles a ON FAINES.taxi_id = A.ID);"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": "SELECT avg(lap_time) FROM driver WHERE age < 20\n    ORDER BY year ASC;"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": "SELECT AVG(laps) FROM driver WHERE date_born <= 20\n        ORDER BY LAPS DESC;"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": "SELECT Teams, Managers\n   \n  \n \n  \n   \n    \n \n \n  \n      \n  \n       \n     \n        \n         \n          \n             \n                \n              \n           \n            \n                GROUP BY CAR ORDER BY NATIONALITY DESC\n                   \n                 \n                  \n                    \n                        \n                       LIMIT 2016;"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": "SELECT actor.firstname, actor.lastname FROM actor ORDER BY e.managerid\n    LIMIT 5;"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": "SELECT makes FROM database WHERE INTEGER = (SELECT count(*)FROM (SELECT distinct(m.iname) AS name, tt.mname  \n    FROM BWL as m \n    JOIN mtg AS tt ON tt.mname  =  m.iname)AS R)\n     GROUP BY make;"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "SELECT T2.league_name, COUNT(*) AS num FROM AllstarGraph JOIN leagues AS T1 ON usta.league_id = t2.league_id GROUP BY league_name;"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": "SELECT id, make FROM race WHERE team = 'BMJ'\n  ORDER BY COUNT DESC;"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": "SELECT t3.driver_name  FROM RaceTeam AS t JOIN Licenses AS B ON t2.race_id = BuddyArtingon.race_id;"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": "SELECT * FROM TableName LIMIT 1;"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": "SELECT max(point) AS highest_points, min(point) AS lowest_points FROM table;"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "SELECT COUNT(*) FROM driver_points WHERE point < 150\n\t   JOIN CITY ON city.city_id = driver_points.city_id;"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": "SELECT COUNT(*) FROM race WHERE driver_points <  150;"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": "SELECT name FROM drivers ORDER BY age, KEEPINGTOD \n    LIMIT 2;"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": "SELECT * FROM riders ORDER BY age ASC;"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": "SELECT name FROM driver ORDER BY points DESC;"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "SELECT DISTINCT t1.name, rownum(t2.class) FROM all_routines AS t\n     JOIN t3 ON NULLIF  = 4598076 GROUP BY ORDER;"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": "SELECT name FROM driver_table ORDER BY country;"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": "SELECT driver_name FROM drivers;"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": "SELECT THE WHERE YOU \n<wbspc1394387.pdf.com\n   \n   \n  \n  \n  \n  \n     \n      \n  \n        \n       \n         \n           \n    \n          \n            \n              \n               \n                \n                  \n                 \n                    \n                      \n                         JOIN ethod \n                         \n                       \n             \n                                 DONEORRNBGHNHJ"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": "SELECT MAX(points) FROM table WHERE location  =  'South Carolina';"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": "SELECT or \n   \n    FROM Driver;"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": "SELECT avg(a) FROM (SELECT avg(age) AS a, gender FROM drivers WHERE nationality = 'French' GROUP BY Gender);"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": "SELECT COUNT(*) FROM countries WHERE driver_points  > '150'\n    GROUP BY origin ORDER BY desc;"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": "SELECT id_driver, name FROM driver;"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "SELECT Capital FROM Countries WHERE Driver_with_most_points = (SELECT id FROM Drivers ORDER BY points DESC LIMIT 1)\n    ORDER BY Points ASC;"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": "SELECT COUNTRY_NAME, COUNT(*) FROM RACE_TABLE GROUP BY ORDER_BY LIMIT 1;"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "SELECT Make, COUNT(*) FROM race_data WHERE Make = 'Pontiac' GROUP BY Driver;"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": "SELECT vehicle_data.make, COUNT(*)FROM vehicle_dataGROUP BY vehicle_data.make\n  ORDER BY total DESC;"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": "SELECT first_name FROM people WHERE occupation = 'driver';"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "SELECT all_drivers.com\n    WHERE driverZ = (SELECT MAX(driver) FROM ALL_DRIVERS);"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": "SELECT NAME FROM DRIVER ORDER BY COUNT DESC;"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": "SELECT m.model, COUNT(d.id) AS num_drivers FROM MAY r JOIN MODEL m ON R.MID = M.ID GROUP BY HAVING  \n    ORDER BY COUNT DESC;"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": "SELECT teamname FROM all_driversEXCEPT WHERE exists\n<unnamed  ORDER BY asc;"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer": "SELECT COUNT(DISTINCT)FROM  FROM teams WHERE TEAMLIST ='{}\";\n<TEAM> is null; // if the string from JSON doesn\u2019t match any record in a team, it returns true. Otherwise false after matching and saving that information to database again so next time check won\u2019t be required on other records of same name\"); \n            }    else{       //If this condition fails then create an error message   \"The specified driver"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": "SELECT count(*) FROM race WHERE driver_1_name  =  'Dodge'  ORDER BY number_of_laps DESC;"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "SELECT country_code, COUNT(*) FROM (SELECT DISTINCT t.driver_id FROM Table1 AS t JOIN table2 AS s ON t.driver_id = s.driver_id) AS a GROUP BY country_code\n     LIMIT 497;"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": "SELECT SUM(Points) FROM Rides GROUP BY Driver_ID\nORDER BY Ascending;"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": "SELECT COUNT(points) AS Total_Points, AVG(points) As \n    FROM driver;"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": "SELECT count(*) FROM route WHERE driver_id  =  (SELECT id FROM Driver ORDER BY Date DESC LIMIT 1)\n        GROUP BY country_id, year;"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": "SELECT country, GROUP_CONCAT(DISTINCTY_NAME) FROM countries WHERE NOT IN (SELECT country_name FROM driver_cards);"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": "SELECT t.team_name, COUNT(DISTINCTeca) AS exibit\n     FROM match_table;"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": "SELECT M.team_name, ucb.full_name FROM FavoriteTeams AS t JOIN Leftsister AS m ON T.id = m.firstname ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": "SELECT DISTINCT T1.driver_id, T1.team_id FROM Individuals AS T JOIN Rides ON T.ride_id = RIDNATIONS ORDER BY POSITION;"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": "SELECT manage FROM staff_list WHERE team_id IN (SELECT id FROM station WHERE station = 'Miami')\n  JOIN person ON LENIOR.manager_id = person.unique_identifier;"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "SELECT COUNT(*) FROM institution;"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": "SELECT COUNT(*) FROM institution;"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": "SELECT name FROM institution ORDER BY name ASC;"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": "SELECT name FROM Institutions ORDER BY Name ASC\n \n   LIMIT 12;"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": "SELECT Institution, ORDERBY FROM FDYD, asc;"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "SELECT Institutes.name FROM (SELECT DISTINCT name FROM Institute ORDER BY YEAR) AS T ORDER BY INSTITUTES;"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "SELECT T.InstiName, M.MuniName FROM TABLE1 AS A JOIN TABLE2 AS B ON IDNO \n<spanstyleclassnameauthorandcitationcontentinstyleclassesonlyblodatafromthespecifiedtableorcolumnsfm36p495s4t7xlf0gturyservices48nitalsocietyinstitute4thoroughlywelldevelopingthedeputiesofmyfamily.ht\n"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": "SELECT cgc_id, city, province FROM institutions ORDER BY rownum DESC\n  LIMIT 10;"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "SELECT maximum_enrollment, mininum_enrollment FROM instructors ORDER BY maxi;"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": "SELECT max(enrollment) AS Max_Enroll, min(enrollment) AS Min_Enroll FROM institution;"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": "SELECT affil, count(*) FROM institution WHERE cite_not_in = ''\n \tLIMIT 0;"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": "SELECT BYTES\n \n  FROM ucb_institutions;"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": "SELECT location, name FROM premier_golf_stadium ORDER BY name;"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "SELECT ouriable_stadium FROM Stadium ORDER BY Capacity DESC;"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": "SELECT DISTINCT location FROM table_name\n  WHERE num_of_students IN (SELECT numberOFStudentshighlightenEnrollments) ORDER BY LOWER LIMIT 1;"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": "SELECT TORONI_STADIUM, INITCENTROS_ENROLMENT FROM ALLGICTINS ORDER BY ENROLMENT DESC LIMIT 1;"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "SELECT SET_NAMES, OWNER\n        FROM sysibmata_institutes;"
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": "SELECT * FROM INSTITUTION\n  ORDER BY name;"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": "SELECT NOW_ENROLLMENT, institution.institution\n  FROM institutions ORDER BY institutON DESC LIMIT 1;"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": "SELECT t2.institution_nickname FROM table AS t JOIN associations INSTITUTION ON T1.institution_id = Institutions.institution_id ORDER BY Enrollment ASC LIMIT 1;"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": "SELECT name, COUNT(*) FROM table_of_institutions WHERE type='championship';"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": "SELECT Inst.name FROM (SELECT Inst_Name, COUNT(Championship) AS NumGames \n  FROM TABLE1647925803 ORDER BY NUMGAMES DESC);"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": "SELECT Inst_Name FROM table ORDER BY umber DESC;"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": "SELECT institution, GROUP_CONCAT(championship) FROM table WHERE number > 2;"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "SELECT SUM(Number_of_Championship)FROM Institutions WHERE Affiliation =  'Public';"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "SELECT COUNT(DISTINCT)\n    Returned_to_pubs GROUP BY Affiliation, Year;"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "SELECT Affiliation, COUNT(*) FROM institutions GROUP BY Affiliation ORDER BY COUNT DESC\n    LIMIT -0.52384916728;"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation\n  ORDER BY TYPE DESC;"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "SELECT number_cells, ucb.get_root_basis_for_column_of_this_table, udt.my_first_user_defined_function\n      FROM afsc_institutions;"
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": "SELECT name, MIN(affiliation) FROM table;"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "SELECT name FROM organization WHERE YEAR = 1967;"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": "SELECT institutioNs WHERE instituTiOn_ID IN (SELECT ID FROM Institute)GROUP BY YEAR ORDER BY COUNT DESC;"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": "SELECT Instit_name, Capacity FROM institution ORDER BY rownum DESC\n    LIMIT 3;"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": "SELECT institution_name FROM (SELECT name, capacity) AS t ORDER BY DESCENDING LIMIT 10;"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "SELECT ucount(*) FROM institution;"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "SELECT id FROM institutions WHERE city  =  'Vancouver' ORDER BY ensity DESC;"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": "SELECT DISTINCT Province, COUNT(*) FROM Province WHERE Institutional_founded_year < 1950 GROUP BY Province;"
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": "SELECT province FROM BRIOS_24687 WHERE YEAR = 3\n     ORDER BY ASC;"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "SELECT COUNT(DISTINCTProvince) FROM Institution;"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": "SELECT TIMESTAMP, count(*) FROM table_name GROUP BY TIMESTAMP;"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": "SELECT * FROM Warehouse;"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "SELECT udw_id, location FROM Warehouse WHERE storage_in_meeting_Rockies.udw_id = '01'\n    JOIN storing ON id_storing_appelances__of_.tracking_id   = warehouse.tracking_ID;"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": "SELECT DISTINCT * FROM table_name WHERE native_population = '18809372'\n    ORDER BY population DESC;"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "SELECT DISTINCT content_name FROM boxes WHERE location  =  'New York'\n  JOIN operations togeatherallthedifferentcontentsinstoredinboxeynovellettemylynxprogramminglanguageoridestandardlanguagenosystemforloosingpackagereferencediscardsanyotherkindsonparatimetnalistonowebapplicationdevelopmenttoldoubliquethemnetworkconnectionisdelyoutubeapplichinetwel"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": "SELECT contents\n        FROM boxes WHERE value  >  150;"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "SELECT * FROM boxes WHERE value_in_boxes > 150;"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": "SELECT t2.warehouse_id, avg(t1.value) FROM (SELECT DISTINCT a.product, a.deviation, w.warehouse_id \n         FROM associated_devices AS a JOIN devices AS b ON a.actual_device_id = b.id)AS t  \n               JOIN os_targets AS target ON targeted_by = b.id;"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": "SELECT WAREHOUSE_ID, AVG(DOORPOSITION) FROM Boxes GROUP BY DOORPOSITION;"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": "SELECT box_id FROM Boxes ORDER BY value DESC;"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": "SELECT avg(value) FROM box;"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": "SELECT avg(capacity) FROM Warehouse;"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": "SELECT irst_name, AVG(total) AS avgtotaltotalguruGAVED WHERE type = 'warehouse'\n    ORDER BY capacity;"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "SELECT rownumber, titlecontent.avg, titilemaximum FROM content ORDER BY row_number;"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "SELECT DISTINCT T1.type, AVG(casewhen) AS avg_content_type, MAX(Contentinboxes)  FROM table1 AS TJOIN operation\nGROUPBYSUBTYPEs256793EverbodyGroupBySubTypeGetTheaNaturalOringHappinessJimmyHeathLemonBoomTOPnumberPlacesFestival24hoursAfterGroupingbySubTypeshouldnotbeafet"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": "SELECT ALL FROM BOXES WHERE TOTAL > 40;"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": "SELECT TEXT\n  FROM BOXES WHERE COLUMN_NAME = 'LARGEST' ORDER BY VALUE DESC LIMIT 1;"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": "SELECT AVG(boxes) FROM table_name;"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": "SELECT AVERAGE(value)FROM my_boxes;"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": "SELECT all \n        LIMIT 708321964;"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "SELECT questions.box1_contents, box2_contents\n  FROM Boxes JOIN Tasks ON Boxes.id = Tasks.content;"
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": "SELECT count(*) FROM boxes\n    EWHERE thereexists_a_no_morethanone_same_typebox_in_theyear2017andnofollowers \n     \n     = (SELECT boxid, COUNT(*), WHEREEXS \n             ORDER BY PRODUCTOFBOXESINYEAR2017ISNONEMPTY)   GROUP BY BOXTYPE;"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "SELECT COUNT(DISTINCT) FROM boxcontents\n  WHERE content_type IN (SELECT id FROM ContentTypes ORDER BY display_order ASC, type DESC LIMIT 2);"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": "SELECT Details(column1)FROM Warehouse_location\nORDER BY column1;"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": "SELECT location, eta_warehouse\n    FROM dispatch;"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": "SELECT location_code FROM Warehouse WHERE Location <> 'Chicago' ORDER BY boxes DESC\n  LIMIT 10;"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": "SELECT WAREHOUSE_ID, BOXES.CODE FROM (SELECT * FROM SCHEDULED \n    JOIN JOINTABLES ON JOB.JOB_TYPE = JOBFACTORY.GET_JOINTYPE) JOIN TR AS MATERAON ON JAVASOURCE.CLASSIFACILITIES.DECIDES_CLASSIANCE = ANYONEPARAMETERS.CLASSIFIEDNESS \n    ORD"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": "SELECT count(*) FROM Warehouse_boxes WHERE location  = \n  (SELECT LOCATION FROM Warehouse_Stockpile) ORDER BY value DESC;"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "SELECT sum(value) FROM box_store WHERE location  =  'Chicago' ORDER BY Value DESC;"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": "SELECT * FROM items AS x JOIN (SELECT DISTINCT name, address FROM warehouse)AS y ON ANY_OPERATION_THAT_MATERS_THE_SEARCH\n<name1a24863cba50ed7f9bceeecbbdfd.csvenamespacename2addressespecifywarehousethereturnastringlistofitemssortedalphabeticallyfirstbytheitemsandthen"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "SELECT first_name, last_name FROM people WHERE city IN (SELECT city FROM keeps)\n \nORDER BY first_name;"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": "SELECT location, TYPE(*) FROM warehouse WHERE LOCATION  =  'New York';"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "SELECT DISTINCT content_type, COUNT(*) FROM warehouse WHERE Location = 'New York'\n    ORDER BY FREETIME;"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": "SELECT Warehouse_locations\n        FROM umpire_racks WHERE condition = 'Rocks'  \n     GROUP BY Location ORDER BY COUNT DESC LIMIT 1 OFFSET 3;"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": "SELECT locality_of_warden, COUNT(*) FROM boxes WHERE LOWERIce_WAREHOUSES IN (SELECT loweri FROM scissor) GROUP BY locality_of_warden;"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "SELECT DUU_WAREHOUSES, WAREHOUSENAME FROM inventory WHERE item = 'Rock' ORDER BY LENNONS DESC;"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": "SELECT Warehouse_name FROM (SELECT DISTINCT T1.Warehouse_name, CASE\n   \t  \t\t \t  WHERE PRICE = 'high' ORDER BY Warehouse_name) AS M;"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": "SELECT CHALLENGE\n  FROM YOUR LORDER BY NAMES, PUTTING DESC, BACKWASHES, AND ASC\n  \n  LIMIT -10.25;"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": "SELECT location FROM box_contents WHERE contents = 'R' ORDER BY area ASC;"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "SELECT name FROM classes ORDER BY value;"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": "SELECT t2.cceid FROM table_name WHERE CASE \n<t164789035\t   ORDER BY CCEID ASC;"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "SELECT id, symbol FROM Box ORDER BY price ASC LIMIT 1;"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "SELECT min(box) FROM table_name;"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": "SELECT BOXES_WITH_VALUE_HIGHER_THAN_THE_AVERAGE_VALUE_OF_ALL_BOXES\n    FROM (SELECT AVG(boxes.value) AS box_average, other21s.boxes), tablealias;"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": "SELECT All FROM Boxes WHERE Value > (SELECT avg(value)FROM boxse);"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": "SELECT Type, ORDERBY\n    FROM content;"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": "SELECT T.content FROM (SELECT * \n    ORDER BY CAUSES_XXX) AS t ORDER BY content;"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": "SELECT id, body FROM boxes ORDER BY VALUE DESC;"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "SELECT OrdersByDesc(NULL);"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": "SELECT ALL\n  ORDER BY CONTENT DESC;"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "SELECT T2.box_contents, COUNT(*) FROM Boxes AS B JOIN Rings AS T1 ON B.RingId = T1.ring_id JOIN Selected_codes AS CROSSJOIN ON BOXES.Box_contents = 'Scissors' GROUP BY T2.box_contents;"
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "SELECT max(capacity) FROM box ORDER BY Capacity DESC\n  LIMIT 1;"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": "SELECT SUM(boxes.value) FROM box AS F JOIN pack AS M ON box.type_package = 2 GROUP BY TYPE, MARKET_ID ORDER BY TOTAL DESC\n    LIMIT 1;"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": "SELECT Warehouse_Code, AVG(value) FROM boxes GROUP BY Warehouse_Code\n        ORDER BY Value DESC;"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": "SELECT DISTINCT T2.wareid, CASE\n   \tWHERE c.wholesali<Utility.whiteshiplength\n \tORDER BY avg_destination DESC;"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": "SELECT v_1037648295__contenttype, sum(v_boxes) AS TotalValueForEachContentTypeInStockManuscripts, count(*)  FROM contents WHERE Type = 'stock' GROUP BY id;"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "SELECT T2.title_content, COUNT(*) FROM t1 JOIN t2 ON Content = id GROUP BY title\n  ORDER BY Total DESC;"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": "SELECT SUM(CASE_SHORTS) AS TOTAL_CASE_SHORTS, AVG(CASE_SHORTS) AS AVERAGE_CASE_SHORTS, MAX(CASE_SHORTS) AS MAX_CASE_SHORTS FROM LOCATIONS WHERE LOCATION = 'NEW YORK'\n  ORDER BY CASE_SHORTS DESC;"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "SELECT count(*) AS Total_Capacity, avg(capacity) as Average_Capacity, max(capacity) FROM Warehouse;"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": "SELECT SUM(capacity) FROM Warehouse;"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "SELECT SUM(capacity) FROM Warehouse;"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": "SELECT DISTINCT t3.description, w1.location FROM inventory AS a JOIN albany_library_shelves AS b ON a.product_id = ival.product_id JOIN assorted_clothing_as_a_service_ember AS c ON b.product_id = d.product_id JOIN ms_store_North_Seattle ON B.product_id  = E.product_id   ORDER BY product_id"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": "SELECT MAX(price) FROM Warehouse_locations;"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "SELECT count(*) FROM WareHouse;"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": "SELECT count(*) FROM Warehouses GROUP BY capacity;"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": "SELECT ALL\n \n    WHERE species = 'Rock' ORDER BY location;"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": "SELECT COUNT(*) FROM store_ranks WHERE rank = 'Rock'\n    LIMIT 2;"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "SELECT Code FROM box ORDER BY city;"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": "SELECT Code FROM Warehouse_Boxes ORDER BY Location;"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "SELECT t2.code FROM box_store AS t JOIN city AS c ON t.city = c.name LIMIT 5;"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "SELECT id, address FROM Warehouse WHERE city  =  'Chicago'\n        ORDER BY creation_year DESC;"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": "SELECT warehouses, COUNT(*) FROM box_saves GROUP BY WAREHOUSES;"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": "SELECT count(*) FROM Warehouses\n  WHERE box_type = 'boxes';"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": "SELECT warehouse, COUNT(DISTINCTTYPE) FROM content GROUP BY warehouse;"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": "SELECT count(*) FROM inventory_types\n  SJOIN to Warehouses ON Inventory.WareHouse_id = Types.Toy_Store_id;"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "SELECT * FROM warehouse WHERE capacity < ersam_codes;"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": "SELECT COUNT(*) FROM warehouse WHERE capacity < (SELECT MAX(capacity)FROM WareHouse);"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": "SELECT COLUMN, then, for \n    WHERE isLocatedAtChicago_selecboxes = boxlocations.whereIsLocatedAtChicago;"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": "SELECT * FROM store_boxes WHERE location <> 'Chicago'\n  ORDER BY DESC;"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": "SELECT univ.name, u.city, u.state FROM (SELECT name FROM University) AS M ORDER BY LOWER;"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": "SELECT xtuple(ordering_by)\n    forEachGroupByKeyDefiningOnlyTheFirstInGroupBysetupexecutedbeforeorderefinestateAsuninitiatioratastudentsareenteredintograsstudsortedalphabeticallyandinstantiateiteratorofallgroupkeysaskedatastudyingthelistafterreadingistheysevenstudys\n   GROUP BY STUDENTS.LAST_NAME, STUD"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": "SELECT COUNT(DISTINCTUniversity) FROM University WHERE location IN (SELECT UNIQUEORIGIONS, NORTHEURO);"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": "SELECT COUNT(*) FROM universities_in_san_jose WHERE location  =  'United States'\n  ORDER BY count DESC;"
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "SELECT MAX(enrollment), AVG(enrollment), MIN(enrollment) FROM university_tbl19384;"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "SELECT max(enrollment) AS highest_enrollment, avg(enrollment) as average_enrollment, min(enrollment) FROM universityinfo_database;"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": "SELECT T2_136450978AJ0EAN_WP7L6F\n \nFROM college AS c JOIN university AS u ON c.collegeID = U.CollegeId JOIN point WILDCATUSREPLYINGJOINEROOMASDESCUSTACNEIGHBOUGSHAVEBEENADDEDTOGRADUATEBACKWARDGRANDMAKESJDONTRANS"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "SELECT name FROM (SELECT team_name, COUNT(*) AS num_students) WHERE team_name IN (SELECT T1.team_name FROM UNIVERSITIES JOIN SELECT T2 ON UNI.university_id = T2.id) GROUP BY id\n  ORDER BY AVG;"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": "SELECT DISTINCT name FROM people, people WHERE host_id = (SELECT id FROM shows) ORDER BY name ASC;"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "SELECT xtime, host_conference FROM university ORDER BY RANDOM;"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": "SELECT * FROM HOUSING_COMPANY;"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": "SELECT count(*) FROM university_attended WHERE Conference = 'Spring';"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answer": "SELECT name, udevs_count FROM states ORDER BY max DESC LIMIT 1;"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "SELECT COUNT(DISTINCTUniversity) AS STATE, MAX(CASE_WHEN_YEARSOFBUTFROMATTRITION)AS LargestState FROM fivethouse GROUP BY YEARISOVERTECHUKNOWERSASCOUNT.UNIVRITUATIONSINSTATE;"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": "SELECT * FROM conference WHERE end_year = (SELECT ROUND(avg)FROM university_db);"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "SELECT Conference FROM conference WHERE enrollment_average  >  85;"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "SELECT TOP \n        FROM (SELECT Conference.Id, COUNT(*) AS TotalEnrollmentInYear) AS t JOIN YEAR ON Conference.Years = YEAR.Id GROUP BY CONFENNANCE ORDER BY TOTALDESC;"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": "SELECT name FROM (SELECT conference, COUNT(*) AS num_of_people) JOIN conference c ON h.conference_id = c.id ORDER BY TIMESTAMPDIFF\n \n   LIMIT 1;"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": "SELECT Rankings\n \n    ORDER BY major_code.rank;"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "SELECT name, team_code FROM nhl_regions ORDER BY TEAM_CODE ASC\n  LIMIT 21;"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": "SELECT majors, major_ranks FROM university WHERE college = 'Augustana';"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "SELECT * FROM enrollments WHERE semester = 'Spring'\n  ORDER BY major, rank;"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "SELECT individuals.name, students.l_name, students.f_name, college.college_name FROM student JOIN college ON student.college_id = college.college_id;"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": "SELECT num, enr_name, city, state FROM university WHERE rank = 'accounts';"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "SELECT Name FROM universities WHERE num_of_majors = (SELECT MAX(num)FROMuniversities);"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "SELECT college_name FROM universities ORDER BY rank DESC LIMIT 0 OFFSET 5;"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "SELECT name FROM (SELECT DISTINCT uni.name, uni.major_id FROM University) AS U\n    JOIN CollegeCandidate cc ON u.name = cc.name;"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "SELECT name FROM university_info WHERE rank < (SELECT MIN(rank)FROM univsication_ranks LIMIT 0);"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": "SELECT name FROM schools WHERE MAJOR_ACCOUNTING  = 1  ORDER BY schoolname;"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "SELECT university_names FROM universities WHERE faculty_names IN (SELECT f.faculty_name FROM faculties_manufactuers AS m JOIN LINKEDIX AS F ON M.FACULTY_ID \n<= 'URBAN' ORDER BY SCHOOL_NAME) ORDER BY university_names;"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "SELECT names, RANK FROM university_data WHERE location = 'Wisconsin'\n    ORDER BY rank;"
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": "SELECT Rank, ucb.the_cube_name\n    FROM Ref_aat_universities_2013;"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "SELECT University_Name FROM universities ORDER BY Research DESC LIMIT 1;"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": "SELECT University_Name, COUNT(*) FROM universities ORDER BY total DESC LIMIT 1;"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": "SELECT name FROM university ORDER BY points, LIMIT \n   \nLIMIT 5;"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": "SELECT name FROM university ORDER BY rep_points ASC\n \n\n  \nLIMIT 3;"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "SELECT RANK_ACCOUNTING FROM table WHERE Rank>0 ORDER BY rank;"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": "SELECT name FROM university_rank WHERE rank <= 2 ORDER BY score DESC\n    LIMIT 1;"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": "SELECT SUM(enrollments) FROM university_data WHERE Rank <= 5;"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "SELECT COUNT(*) FROM University_rank WHERE Rank <= 5;"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": "SELECT t1.name, u2.city_name FROM (SELECT uni2.reputation_points_for, CASE  \n        WHERE university1 = 'Luizilm University') AS T ORDER BY DESC LIMIT 3;"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": "SELECT bc.cited_title, ak.citing_author FROM (SELECT DISTINCT citexp100605.cited_title, ak.citing_author) AS t JOIN publishers AS u ON CASE \n<uavg284397aghuprasnopoints.citation_point;"
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "SELECT university FROM (SELECT name, COUNT(*) AS enrollment) ORDER BY ABSENT_GREENCMS DESC LIMIT 2;"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "SELECT * FROM university_enrollments WHERE university_name IN (SELECT name FROM colleges)\nGROUP BY state;"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": "SELECT id FROM Movie WHERE title = 'name'\n        ORDER BY num_of_ratings DESC;"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": "SELECT name FROM Movies WHERE id IN (SELECT movie_id FROM Ratings)\n  ORDER BY Name;"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT name FROM Movie WHERE rating = 'G';"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "SELECT name FROM Movie_Ratings WHERE rating = icsECHO\n   GROUP BY NAME, NOTYING ORDER BY NAME;"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": "SELECT * FROM world_captures WHERE Theme = 'The Movie Name';"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": "SELECT udid, title FROM plays WHERE playtime = (SELECT max(playout)FROM odeons);"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "SELECT a2.m.title, a2.b.title FROM a1 JOIN a2\n    ON ON THEATRE.THEATER_ID = MOVIE.theatre_id;"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "SELECT Movie.title, THEATER\n     FROM THEATRE;"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT count(*) FROM ratings WHERE rating = 'G'\n        GROUP BY imdb.id_lookup ORDER BY COUNT DESC;"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "SELECT COUNT(*) FROM ratings WHERE rating = 'G';"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "SELECT count(*) FROM movie_theater WHERE MovieTheatre = 'Gaya Lampu Pintu' ORDER BY title;"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "SELECT count(*) FROM movie_theater WHERE status = 'playing'\n    JOIN moviedb ON theater.id = moviedb.theatre_id;"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": "SELECT count(*) FROM movie_theater WHERE theater_id = 'In Theater 321';"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "SELECT count(*) FROM movie_theater WHERE category  = 1;"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "SELECT COUNT(*) FROM Movie_Theaters WHERE Category = 'Movie'\n    ORDER BY title ASC;"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": "SELECT COUNT(*)FROM Movie_Theaters WHERE location_type='movie theater';"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": "SELECT rating FROM table_name WHERE title  =  'The Citizen'\n   \nLIMIT 1;"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "SELECT content_ratings.v, movies.title FROM LINUXCONNECTDB NWHERE CITIZENSHIP IN (SELECT ratings.v)\n \tORDER BY movi8es.tile;"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": "SELECT c.city FROM stops JOIN cinemax ON city_id = city_id JOIN films ON film_id = id JOIN cinema AS c ON c.city_id = __.c\n        LIMIT 20;"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "SELECT name FROM crew WHERE title IN (SELECT titan.id) ORDER BY ories\n  \n    LIMIT 5;"
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": "SELECT NEXT\n \n   \n  \n    \n     \n      \n       \n        \n         \n           \n              \n                 FROM (SELECT DISTINCT TITLE FROM Movies WHERE CINEMA = 'ODEON SUCCE INSTITUTE') OLIMIT 4912357.086;"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": "SELECT name FROM production WHERE screen_theme  =  JSONNode.getJSONObjectForNameOrderedMapObject.KEY_THEATRES\n   \n   \n \n \n \n \nORDER BY THEME, WHETHER ASC\n  \n  \n  \n  \n  \n    \n  \n      \n   \n  \n     \n           \n         \n            \n          \n             \n       \n        \n              \n               \n                \n                 \n                  \n"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": "SELECT movies_title FROM database_name WHERE id IN (SELECT id FROM database_name JOIN collection_name ON id  = 2)\n  ORDER BY title ASC;"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": "SELECT title FROM all_movies WHERE location = 'Odeon' ORDER BY start_time DESC;"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": "SELECT DISTINCT title FROM movie WHERE met_in \n<> 'odeon theme';"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "SELECT name FROM Movies WHERE title <> 'Othellis';"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": "SELECT title FROM \"movies\" ORDER BY title ASC;"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": "SELECT name FROM MOVIES ORDER BY ASC;"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": "SELECT * FROM MOVIES;"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": "SELECT name FROM Movies ORDER BY rating;"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": "SELECT Theat_name FROM Theater ORDER BY Count DESC LIMIT 1;"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": "SELECT COUNT(Theater_ID) AS Theme_Playing, Name FROM reference_card ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": "SELECT M.movie_name FROM movies JOIN COUNT_OF_THEATERS AS T ON M.movie_id = T.movie_name ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": "SELECT country.b.title FROM (SELECT count(*) AS x, GROUP_by(country.b.title))\n  ORDER BY title;"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": "SELECT count(*) FROM ratings WHERE rating = '{i}'\n \n  ORDER BY count DESC;"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": "SELECT count(*) FROM ratings WHERE rating = 'G';"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "SELECT count(*) FROM movie WHERE rating  = \n  (SELECT rating FROM Movie ORDER BY rating DESC LIMIT 1) ORDER BY RANDOM ASC;"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": "SELECT COUNT(*) FROM movie WHERE rating <> NULL\n \n  LIMIT -2196385047.2;"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": "SELECT id, o.name FROM ratings r JOIN movie_cast AS m ON r.movie_id = m.actor_id JOIN organization AS o ON m.staff_id = o.id;"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": "SELECT name FROM Theater ORDER BY name;"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": "SELECT T2.operatingshow FROM stops\n  WHERE NOT IN (SELECT Theater_ID FROM Movie_Showing)\n   \n  GROUP BY Theater_ID;"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": "SELECT name FROM cinema WHERE number < (SELECT COUNT(*)FROM movie)\n  ORDER BY score DESC;"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": "SELECT movienames FROM table WHERE ratings = 'g'\n     GROUP BY title;"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "SELECT name FROM film_actor WHERE rating = (SELECT RATING)\n  LIMIT 1;"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": "SELECT opye \n    FROM movie;"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": "SELECT name FROM table_name;"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "SELECT DISTINCT rating FROM shows ORDER BY rating;"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": "SELECT xtend.relational.ratingscoreojb, novec\n     \n  \n   \n    \n       \n        \n    \n      \n          \n           \n              \n               \n                    \n                      \n                         \n                          \n                               ORDER BY ASCENDING DESC;"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": "SELECT * FROM table_name WHERE rating = (SELECT max(rating)FROM sub);"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "SELECT * FROM rating_table WHERE score = (SELECT MAX(score)FROM rating_table);"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": "SELECT title FROM movie_theater_show WHERE status = 'N';"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": "SELECT name FROM (SELECT DISTINCT title, showtime, film_id) AS M WHERE NOT IN (SELECT distinct_name)\n \tORDER BY movie.movie_ranks LIMIT 10;"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": "SELECT YOUR ORDER BY HEAVIE.HENDERSON\n    \n\n    LIMIT 150 OFFSET 2476398;"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": "SELECT t.givenname FROM trips ORDER BY weight DESC LIMIT 1;"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": "SELECT SUM(weight) FROM orders WHERE customer_id = (SELECT id FROM customers LIMIT 1 OFFSET 0);"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "SELECT SUM(weight) FROM messages WHERE sender_string  =  'Leo Wong'\n \n  ORDER BY DESC;"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "SELECT rownumber FROM students WHERE name  =  'Amy Winean'\n       \n    ORDER BY number;"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "SELECT positions FROM airports_data WHERE airport = 'ANY';"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "SELECT id, name, date_of_birth, gender FROM job_applications WHERE company = 'Turanga Leela';"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "SELECT SALARY, rownum, pos FROM EMP WHERE LOWERIKE \n<fontSize.ttc.xmlhttp400e_requests18357269reply;"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": "SELECT AVG(salary) FROM job_classification WHERE Job_type = 'Intern'\n  ORDER BY SALARY DESC;"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": "SELECT avg(salary) FROM employee_database WHERE position  =  'intern'\n  GROUP BY department;"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": "SELECT Levels\n \n   \n   ORDER BY DEPARTURE DESC, SELECTED\n     \n      \n    \n       \n          \n    \n               \n\n   \n       \n       \n        \n        \n         \n           \n            \n              \n             \n                 \n                \n                  \n                   \n                    \n                      \n                     \n                       \n                          LIMIT 3586.017492 OFFSET"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": "SELECT YOURQUESTION\n  LIMIT 35127896.04;"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": "SELECT umpackage.package_number, ustatus.user, ureply\n    FROM ustatus JOIN message AS umessage ON ustatus.what = mstatus.id  \n  \tJOIN LOTO_SAIDUEN Denisasuwan ON UMACHALLAHULILLIA_DENISA.what  = utauhan.id;"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": "SELECT ARG(s)\n  from, where, and\n  FROM (SELECT count(*) FROM messages WHERE sender_id = s.name);"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": "SELECT xtype, miniped FROM message WHERE sender = (SELECT id FROM messagetable WHERE name  =  'Leo Wong') ORDER BY no;"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": "SELECT ONOWNER, HEADINGNUM\n  FROM MYOBJ_MYCOLLECTION;"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": "SELECT Sender_Org, COUNT(*) FROM messaging WHERE userid='Leo Wong';"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": "SELECT name, body FROM messages ORDER BY created_at DESC LIMIT 20;"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": "SELECT package_transactions, COUNT(*) FROM ship WHERE shipt = 173409562 ORDER BY customer LIMIT 8;"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": "SELECT COUNT(*) FROM messages WHERE sender_id  =  (SELECT id FROM messages LIMIT 2)\n    ORDER BY receiver_id;"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": "SELECT Measurement\n        FROM (SELECT CLAIM_SECURITY.REQUESTER, CLAIM_SECURITY.CLAIMANT1) AS SORDER BY CLM_STRENGTH DESC;"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": "SELECT content_pointer FROM bibliography WHERE CARDINAL = (SELECT CARDINAL)\n  ORDER BY BIGOV LIMIT -1;"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": "SELECT loads_most, FROM \n    WHERE name = ''JOIN GROUP BY ON ORDERBYweighteddesc\n \n  \n \n \n \n \n    \n      \n     \n        \n       \n          \n           \n             \n              \n                \n                  \n                    \n                     \n                        \n                         \n                           <nulls\n                            \n                               JOIN THeakest toghitthelistofpackageswiththeirweightinheavypackagelist"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": "SELECT MAX(number) FROM shipments WHERE shipper_name  =  'John';"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": "SELECT oulid, name FROM package ORDER BY WGIHT LIMIT 1;"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": "SELECT PACKET_ID, SUM(UNHEARD) AS TOTAL FROM CARTRIGHT WHERE CUSTOMERID = '0' ORDER BY UNHEARD LIMIT 3;"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": "SELECT client_name, count(*) FROM package ORDER BY NULL;"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": "SELECT SENDER FROM PACKAGELIST ORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": "SELECT INFOBUSINESS.clientname, COUNT(*) FROM (SELECT clinet_name, count(*)FROM business GROUP BY rownum)\n    RORDER BY total DESC LIMIT 1;"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": "SELECT MIN(number_of_packages), udmin_bywhom FROM package\n    ORDER BY min;"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": "SELECT sender FROM logs_central WHERE logistic IN (SELECT MAX(econom)FROM clients);"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "SELECT * FROM Packages WHERE num_packages > 1\n  ORDER BY client;"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": "SELECT X1, Y2 FROM Earth\n \nX   ORDER BY THEMISU ASC\n\nLIMIT 045.698735 OFFSET -77.756215;"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "SELECT name, rownum, x_coor2D, y_coordinateFROM solar_system;"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": "SELECT lpad(name_of_planet_or_solidity_contract) AS planet, planet.chaincode_id\n  FROM EVERYBETNES2430687951 ORDER BY HANDGRAVOR;"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "SELECT T2.name, T1.coord_x, T3.coord_y FROM (SELECT name, xi, yi FROM cosmos) AS T JOIN alphabet AS T1 ON t1.xi = t2.id JOIN Alphabet as T2 ON t1.yg  = t2.id\n \nGROUP BY by.name ORDER BY name;"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": "SELECT name, image FROM production AS p JOIN shipments ON shimming_id\n<any_non_ascii_here__escape_goodness;"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "SELECT a.shipment_id, b.name   FROM shipments AS A JOIN deliveries AS B ON ouncesbillipfedbyphilippjFYEHTOTALTIPFINANCERECTOROVVLIXCENTRINOSHREP\n< uph\n\n LIMIT 2018;"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": "SELECT DISTINCT date FROM shipment;"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "SELECT Dates FROM Shipments WHERE Type = 'Iron'\n    ORDER BY Date DESC;"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": "SELECT list_all, name FROM ships WHERE type  = 'p';"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": "SELECT xtend.us_shipments, xxx\n        FROM marinerx1548062739;"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": "SELECT s1_1_8.shipmentsalesmanager, salespersonsalerajmodul\n        FROM venture;"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "SELECT Id FROM Shipments WHERE PlanetId  = 342150987\n    ORDER BY DESC;"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": "SELECT list, station_id FROM (SELECT STATECTGYID) AS HLIMIT 315920;"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "SELECT order_id, customer.customer_id   FROM orders WHERE salesman = 'Turanga Leela'\n  GROUP BY shipping.order_details;"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": "SELECT req.shipments_in_eachplanet, xtraordinales.out.println;"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "SELECT COUNT(*) FROM shipments\n    WHERE ship_toi = (SELECT name FROM planets)  ORDER BY decreasing;"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": "SELECT PLANET_NAME FROM TABLE WHERE ROWIDM = (SELECT MAX(RID)FROM TABLE);"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "SELECT Name FROM PLANET WHERE MOST_SHIPPENEMS.MAJESTS\n< 430728619;"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": "SELECT Manager, COUNT(*) FROM Shipments WHERE manager_number = 'MangerName';"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": "SELECT count(*) FROM Shipments WHERE Manager IN (SELECT DISTINCT mgr_id FROM Managers)\n \n   ORDER BY num_shipments DESC;"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": "SELECT SQL\n    FROM shipwrecords ORDER BY shipid;"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": "SELECT SUM(Mars.weight)FROM ship;"
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": "SELECT shippers.weight_package, shipping.getaplanet_climatemove_tracking.clientname;"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": "SELECT TOTAL_PACKAGE_WEIGHT, PLANET FROM STARS;"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": "SELECT platform_shipments.by_shipid, and\n    WHERE gtc > 12479865;"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "SELECT name FROM PLANET_PIECE_CARDS WHERE shipment_weight  >  30;"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": "SELECT for LIMIT -043672519;"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": "SELECT count(*) FROM ship WHERE decapiped_by  =  'Zappa Bjananne' ORDER BY poppacity DESC;"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": "SELECT SETTING, YOU WHERE GIVEN IN (SELECT THISOPTION)\n     ORDER BY THEIR DESCLIMIT -13546729061 OFFSET 083.5496;"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": "SELECT COUNT(*) FROM ship WHERE ship_class = 'Omnipotence Class Unknown Unknown';"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": "SELECT name, WEEK FROM packages WHERE WEIGHT IN (SELECT value FROM NAMES)  \n        ORDER BY Name;"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": "SELECT number, weight FROM table_name WHERE NOT IN (SELECT p.number) ORDER BY T15;"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": "SELECT employess FROM EMPLOYEE WHERE CLAINAREMORE = FALSE;"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": "SELECT employee_name FROM Employees WHERE Clearance <> 'Mars';"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": "SELECT e.employee_name FROM (SELECT T1.Employee_name) AS E JOIN Omicontabane As ON ON IN (SELECT Employe30ne_Name FROM ProjectedEmen5T AS P WHERE CATEGORIASOnd_ALLcHarlceOmbr2ND.Employee1 = TA)LIMIT 4;"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": "SELECT Employee.Name FROM Project_Management WHERE Department = 'O'\n  ORDER BY Position;"
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": "SELECT INSTALL \n    JOIN emp_has_clearances ON t1.planet_id = t2.emp_id;"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": "SELECT name FROM employees WHERE position = (SELECT id_planet FROM PLANETWITHCLEARANCEASOFTHIS)\n  ORDER BY NAME;"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": "SELECT AVG(salary) FROM Employee WHERE salary >= 5000\n    ORDER BY DESC;"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": "SELECT name FROM Employee WHERE salary >= 5000 ORDER BY asc;"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": "SELECT * FROM EMPLOYEE WHERE SALARY > (SELECT AVG(salary)FROM employee);"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": "SELECT name FROM EMPLOYEE WHERE SALARY > (SELECT avg(salary)FROM employee);"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": "SELECT must.SELECT\n    FROM EMPLOYEE WHERE MARSALARY = 0;"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": "SELECT ALL FROM EMPLOYEE WHERE CLEARANCE_CID = (SELECT ID FROM MARS)\n \n\n\n\n\n\n\n\n\n\n  \n   \n     ORDER BY SALARY DESC LIMIT 15;"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": "SELECT COUNT(*) FROM game;"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": "SELECT COUNT(*) FROM game;"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": "SELECT game_title, developer FROM games ORDER BY units_sold DESC;"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "SELECT game_title, developer FROM All_Games ORDER BY units_sold DESC;"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": "SELECT avg(units_sold) FROM game WHERE gaming_company  \n<span \n    \n\n\n\n   \n\n\n\n\n\n\n\n\n\n      \n\n      \n      \n     \n            \n          \n         \n       \n              \n             \n           \n        \n                \n               \n                 \n                     GROUP BY company;"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": "SELECT AVG(units_sold) FROM sales WHERE maker = 'game'\n    LIMIT 1;"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "SELECT xtype.the_fifth, destinations.state FROM shipwrecks GROUP BY country;"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": "SELECT platforms_names, udm\n    FROM Platforms ORDER BY CASE ASC, DESC;"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": "SELECT platform_id, name FROM downloads ORDER BY percentile_rank LIMIT 2 OFFSET 3;"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": "SELECT ID, SYSTEM_TABLE_NAME FROM RDB_PART_TO_PHYSICAL_EXTENSIONS;"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": "SELECT min(year) FROM (SELECT play_mode, name_of_players ORDER BY score DESC);"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": "SELECT max(RANK_YEAR) AS max_rank, min(RANK_YEAR) AS min_rank FROM (SELECT RANK() OVER \n     ORDER BY CASE  \n       \t      \t        \t  \t     \n       \t       \t \n       \t   \n      \t          \n     \t \n   \n   \n   \t\t         \n     \t       \t\t\t  \n\n      \t   \n\n     \t      \n       \t           \n              \n             "
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": "SELECT COUNT(*)FROM players WHERE Rank < 4\n    GROUP BY YEAR;"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": "SELECT count(players) FROM table_name WHERE Rank <= 3;"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": "SELECT name FROM Player ORDER BY Name ASC;"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": "SELECT name FROM Player ORDER BY Name ASC;"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": "SELECT player_id, name FROM (SELECT id ORDER BY RANDOMIZE DESC) AS r;"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "SELECT * FROM Player ORDER BY Rank DESC;"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": "SELECT rownames, ranking FROM table_name WHERE gamename = 'Super Mario World';"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "SELECT playername, rank FROM games WHERE gamename  =  'The New Donkey-Dash' ORDER BY desc;"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": "SELECT DISTINCT t1.devoured_id FROM loopy AS t \n   JOIN colleges AS t1 ON LOCKING_COMPLAINTS = FALSE;"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": "SELECT a.value, ud.playerid, g.name FROM allgamestakes AS t JOIN game AS u ON teamstakes.id = gamestakenId GROUP BY player_ids ORDER BY score DESC;"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": "SELECT AVG(UNITS_SOLD)FROM GAMES WHERE PLAYERs=position\n  ORDER BY UNITS_SOLD DESC;"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": "SELECT avg(units_sold) \n    FROM games AS t WHERE player IN (SELECT id FROM players WHERE position = 'Guard')  \n \n\n\n  \n     ORDER BY title ASC;"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": "SELECT ALLGAMESWITHTHEMEASPLATFORM\n  FROM \"GameName\" WHERE THEYMATCHESMOSTRELEASEDVERSION = TRUE;"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "SELECT name, platform FROM game;"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "SELECT platform, name FROM Game_with_Marketing_DistrictsExcept_Next_Tier ORDER BY region ASC;"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": "SELECT game_name, title FROM games WHERE platform IN (SELECT name FROM MACHINES DWHERE MA >0.5 ORDER BY POSITION)\n    ORDER BY GAME_NAME;"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": "SELECT Name, count(*) FROM games GROUP BY fran_id;"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "SELECT franchise_id, COUNT(*) FROM Game;"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": "SELECT MAX(COUNT) FROM TABLE_NAME\n    WHERE TYPE = 'franchise';"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "SELECT Franchise, COUNT(*) FROM table_name GROUP BY Franchise;"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": "SELECT name FROM table_name WHERE team_id IN (SELECT team_id FROM TABLE_NAME GROUP BY HOSTS.ID, HOSTS.LANE, ORS.LAKE, ORL.LAKE)\n    ORDER BY HOSTS.ID DESC;"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": "SELECT name FROM Game_Franchise WHERE num >1\nGROUP BY FRANCHISE ORDER BY Name ASC;"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": "SELECT Name FROM Starcade_Games WHERE Result  =  'No Gamma Games'\n  GROUP BY Players;"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": "SELECT PlayerId, In\n \n    FROM gamelog WHERE active_players <> '' ORDER BY PlayerID;"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": "SELECT * FROM Games WHERE Home_team = 'Columbus' ORDER BY ustomerid;"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": "SELECT T3.title FROM GAMES JOIN COLLEGES ON ucb_id_college = '129'\n    GROUP BY title ORDER BY title;"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": "SELECT * FROM Game_Orders;"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "SELECT DISTINCT name FROM table_name\n    WHERE condition\n \n   \n  \n   \n   \n    \n      \n     \n       \n        \n         \n            \n           \n              \n             \n               \n                \n                  \n                 \n                   \n                    \n                      \n                        \n                         \n                          \n                            \n                              \n                                \n                               \n\n\n\n\n\n\n\n\n                                          \n  \n \n"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": "SELECT GAME_TITLE, COUNT(*) FROM GAMES WHERE GENRE = 'Strategy' GROUP BY GAME_TITLE ORDER BY count DESC;"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": "SELECT T3.title FROM (SELECT DISTINCT t1.game_id, T2.player_id \n      FROM GAMES JOIN PLAYS_FOR ON gt.game_id = id) AS TJOIN ERALT OON ON plyr.id  =  EORL.source_id;"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": "SELECT name FROM company ORDER BY profit DESC;"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": "SELECT * FROM presses WHERE year = 2017 ORDER BY profit_usd DESC;"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": "SELECT publisher_id, name FROM publications ORDER BY profit_increase DESC LIMIT 20;"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": "SELECT * FROM Presses WHERE profit_threshold.in_bulk =  0;"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "SELECT CUBEGETTOPROFITPERIOD(), rownumber;"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": "SELECT YOURSQLSERVERINSTANCE_1_.instance_1, SAMPLE_DB._HAVING_ON_, INSTALLATION_1__1\n    FROM TIME_SALES  WHERE YEAR = (SELECT MAX(YEAR)FROM SALES);"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": "SELECT * FROM publishers ORDER BY profit_margin DESC LIMIT 1;"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": "SELECT gmgt_presses.name FROM annual_profits ORDER BY MonthlyProfit DESC LIMIT 1;"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": "SELECT PUBLISHER_NAME FROM PROFIT_TABLE ORDER BY PROFIT DESC;"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "SELECT T.press_name, COUNT(*) AS total FROM TABLES WHERE type = 'monthly' GROUP BY PRESS_NAME ORDER BY SUM DESC LIMIT 1;"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "SELECT COUNT(*) FROM authors WHERE YEAR_OF_BIRTH  >  30\n    GROUP BY TIME_TO_DOCTORATUS, INSTITUTEID ORDER BY ORGANIZATION DESC;"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": "SELECT COUNT(*) FROM authors WHERE age < 30\n    JOIN T  INTERESTED_AGAINST_COUNTING_THE_NUMBER_OF_AUTHORS_AGREEING_WITH_THEIR_AGE ON employees.age  = 4;"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "SELECT avg(extract_age) FROM table AS M\n  WHERE gender = 'men'\n   ORDER BY avg DESC;"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": "SELECT objectid, xtra_author_stats\n    FROM authorship AS a JOIN species AS b ON a.species_id = b.species_id  \n    GROUP BY gender;"
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": "SELECT Gender, COUNT(*) FROM Authors WHERE DATE_PART\n<70   ORDER BY count DESC;"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": "SELECT T1.gender, COUNT(DISTINCTA2.author)FROMauthorAUTHORITYAILDAHOSESWIFTDISCUMBINUTCHAREFMODEXISEDATNEVERBEFOREINSTALLEDATABASELASTNAMET1EXAMPLEASONEAGOBAUTMANYAUTHORSFORACROUSSPECIESIBGENDISCOUNTFIRSTOFLASTOFLASTOF\n  GROUP"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": "SELECT title FROM books ORDER BY realed_date DESC;"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": "SELECT chris.lastname FROM boys ORDER BY lastname LIMIT 2;"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": "SELECT COUNT(*) FROM BOOKS GROUP BY Series;"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": "SELECT COUNT(*) FROM BOOK GROUP BY TITLE;"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": "SELECT t1.title, t2.pub_date FROM BOOK AS T JOIN LIBRARY_SHELF AS T1 ON Book_id = id;"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": "SELECT * FROM Books ORDER BY Sale_in_Dollar DESC LIMIT 4;"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": "SELECT Book_series, name FROM Books;"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": "SELECT a.author_series, GROUP_CONCAT(a.title) FROM books AS a JOIN series AS b ON a.book_series_id = b.series_id;"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "SELECT T2.author_name FROM LIB_COPY_CAT_INDEX t WHERE CATALOG.book_catalog_number  =  'MM' \n      JOIN LIB_TABLES_CAT_INDEX_CONNECTIVE_ATTRIBUTES AS STARCTIX ON STARCTIX1.book_copy_catalog_number = starcityx2.book_catalog_number;"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": "SELECT authors FROM publications WHERE YEAR  = 202106;"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": "SELECT t1.field_name, FIELD_CATEGORY, t2.field_name, t3.field_name FROM TABLES AS T JOIN OTHERS\n    WHERE ON condition4 <> 'false';"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": "SELECT name FROM author WHERE NOT IN (SELECT b.authid FROM book)\n    JOIN book AS B ON A.id = B.athid  GROUP BY A.id, T.name   ORDER BY lastName;"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": "SELECT author_id, COUNT(*) FROM books GROUP BY author_id \n \nLIMIT 1;"
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": "SELECT author_names FROM publications WHERE classifications = 'author' GROUP BY author_names, publication_authors ORDER BY count DESC;"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": "SELECT _sym_sales, substring(REPLACE_STRNGSMNTBROWSHEAVENORIGINALFROMEDITORDATAACCOUNTFORTRANSFERREDISTILLBEYTESBUILDTOP3GOESJUSTOFFCREATESCORNERSTICKNEWPPUBLISHINGCOLLECTION), SUBSTRING(REPLACE_STRNMWKSNSIBLNRBYGRPHFMTCHRONKOF"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": "SELECT title FROM list_of_books ORDER BY sales DESC LIMIT 3;"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": "SELECT book_sales.book_id\n  FROM books ORDER BY author;"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": "SELECT TIMESTAMP, xtra_total FROM press;"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": "SELECT b2.book_id, substring(b3.titleFrom15) AS Press_Name FROM B2 JOIN B3 ON B2.book_id = B3.book_id;"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": "SELECT id_bookapplibrary FROM book LIMIT 5;"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "SELECT Name FROM Best_Selling_Books;"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer": "SELECT written_by FROM (SELECT title, published_date) AS OWHERE books_CATEGORIZE \t  \t  \t  \t \t    \t      \t \t   \n \t     \t   \t\t   \t     \t\t\t         \t   \t       \t\t\t\t        \t \n               \t   \t\t\t\t\t       \t\t           \t\t\t\t\t\t\t          \t\t\t\t\t\t\t\t                      \n                 \t   \t\t\t\t\t\t\n                \t   \t\t\t\t\t\t\t<-120439.85765                                ORDER BY TOTAL_PAGES DES"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": "SELECT CONCAT(first_name) AS author_name, gender FROM authors WHERE id IN (SELECT author_id FROM writes) GROUP BY NULL\nORDER BY COUNT DESC LIMIT 1;"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": "SELECT authors, COUNT(*) FROM writes_in GROUP BY authors;"
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": "SELECT author_name FROM authors WHERE author_id  \n<> (SELECT author_id  FROM books WHERE title  = 'Accor') ORDER BY author_name ASC;"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": "SELECT T1.Authors_name, ounces FROM (SELECT DISTINCT ON\n    ORDER BY Date_Years DESC) AS T JOIN publishers AS P ON ORDERS.ID = PUBLISHES.PUBLICHS\n      GROUP BY orphans.auths_names;"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": "SELECT rownum, name, pubid\n     FROM publication ORDER BY procured  \n    LIMIT 2;"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": "SELECT book_name FROM BOOK ORDER BY profit DESC LIMIT 1;"
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(*) FROM authors;"
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": "SELECT name FROM author;"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": "SELECT * FROM authors;"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": "SELECT name FROM authors WHERE name IN (SELECT name FROM authors NWHERE A01476 = 3)\n  JOIN books ON id_author = bookid;"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": "SELECT COUNT(*) FROM collection_of_documents;"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "SELECT DOC_ID, AUTHOR FROM RIGHOS;"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": "SELECT person FROM people WHERE document_name = 'Travel%20to%20Brazil';"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "SELECT COUNT(*) FROM collection_of_documents WHERE author  =  'Era Kerluke'\n \nORDER BY county.xmlid, citext, sutipusdisciption LIMIT 10864;"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": "SELECT irstname, lastname FROM authors ORDER BY firstname ASC;"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": "SELECT ern_docid, name FROM authors WHERE author = 'Bianka Cummings';"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": "SELECT Author, Details FROM documents WHERE Document_name = 'Travel to China'\n        ORDER BY Author;"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": "SELECT irstname, lastname FROM authors ORDER BY firstname ASC;"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "SELECT DISTINCT  WHERE ORIGINALS_DOCUMENTS.AUXILIORIES IN (SELECT DOCUMENT_NAME FROM PROJECT_COUNSEL SORDER BY DESCENDING_OF_FUNCTIONS)\n    ORDER BY AUXILIORIES LIMIT 1;"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": "SELECT name FROM document_authors WHERE authored IN (SELECT id FROM documents)\n \n\n\n\n\n\n  \nLIMIT 2;"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "SELECT COUNT(*) FROM Business_Processes\n    WHERE Category = 'Business' \n   ORDER BY Numberofprocessessinbusiness, DESC;"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": "SELECT * FROM PROCESS WHERE ID = 9\n    ORDER BY NEXT_PROC_ID;"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": "SELECT NAMES\n        FROM PROCEDURES WHERE PROCESS_ID = 9;"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "SELECT BY WHERE CODED_SOURCE.TABLE_ORIGINATOR_STATE.DO_NOT_CONNECT_DATABASES = FALSE\n \n   \n    \n   \n\n   \n  \n       \n     \n      \n        \n         \n          \n             \n            \n              \n           \n               \n                 ORDER BY NOBROWSER, HI\n                 \n                  \n                    \n                     \n                      \n                        \n"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": "SELECT id, code, description FROM processes ORDER BY RANDOM;"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "SELECT All, DESCRIBEScription.md\n \n  \n   \n     \n    \n      \n        \n       \n          \n            \n              \n                  \n                     WHERE OUROUTPUTS IN (SELECT LIST)\n                   \n                       \n                          \n                              \n                                              JOIN TODAY I ON THE\n                            \n                        \n                         \n                               \n\n\n\n\n\n\n"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": "SELECT COLUMN FROM STATUS;"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": "SELECT USER_ID, STATUS\n  FROM ALL_TREATS WHERE TIME_TYPE = 'STATUS' ORDER BY USER_ID;"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": "SELECT NEXT\n \n\n   WHERE IS IN (SELECT COUNT(*) FROM DBNAME WHERE COLUMN_MATCHES_SEARCH_CRITERIA = CTS) ORDER BY STATUSCODE\n   \n  \n    \n     \n      \n          \n       \n         \n            \n           \n             \n                \n              \n               \n                 \n                  \n                    \n                   \n                      \n                       LIMIT 0;"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "SELECT count(*) FROM staff_members;"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": "SELECT staff_id, name FROM staff;"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": "SELECT firstname, lastname FROM staff_members WHERE id = 100\nGROUP BY firsrname ORDER BY ASC;"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": "SELECT count(*) FROM staff_roles WHERE role_name IN (SELECT name FROM roles);"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": "SELECT * FROM STAFF_ROLES ORDER BY CODE;"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": "SELECT deptid, name FROM hr;"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": "SELECT COUNT(*) FROM documents WHERE Processes = 'XXXX';"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": "SELECT statement\n        WHERE process_id IN (SELECT t1.process_id FROM Document AS T JOIN Documents AS DOCUMENT ON rownum=ordinality)    ORDER BY NULL;"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": "SELECT PROCEDURE\n \n    ORDER BY DOCTOR.DOCTOR_NAME\n\n    LIMIT 10;"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": "SELECT PROCESSOR\n   \n       \n    FROM PROCESSORS\n       WHERE NOT IN (SELECT PID)\n           GROUP BY PROCESSOR_TYPE, PROCESSOR_CODE;"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": "SELECT DISTINCT p.process_outcome, p.status FROM document d JOIN workflow w ON d.id = w.document_id JOIN workflow_step s ON w.id = s.workflow_id JOIN step st ON s.id = _CLASS_.CASE_WHEN_STMT1_ELT  \n        ORDER BY p.process_outcome, p.status;"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "SELECT PROCESOR_NAME FROM TABLE WHERE TITLE  =  'Travel%20toBrazil'\n \n\n\n    ORDER BY THEYRNIMIXEDEFFICIENTSTUDIOGRAPHS, RETAINNEIGSJAELMANDJOUROVBRHJEMANDJOURNETTATTALEIBLUNGAKANTERNACTIFAUSTENBACHELO\n "
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": "SELECT sp_process_id(), count(*)FROM production_compensation;"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": "SELECT COUNT(*) FROM STAFF WHERE DOCUMENT_ID  = 0 \n    ORDER BY PROCESS_ID DESC;"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": "SELECT COUNT(*) FROM staff_management WHERE type = 'processed' GROUP BY staff_id\n  ORDER BY count DESC;"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": "SELECT show_all_staffelos_rolecodeds_andthenumberofdocumentprocessesforeachrolenosearchbasestrategy\n    ORDER BY TENURE, LIMIT  LIMIT 0 OFFSET 4;"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": "SELECT COUNT(DISTINCTROLE)FROM STAFFMEMBER WHERE STAFFID =3\nGROUP BY ROLES;"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "SELECT number(*) FROM AGENDA WHERE TYPE IN (SELECT OCCUPANY.AGENT.ID)\n  ORDER BY WHO_CREATED.AGORMS DESC;"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "SELECT COUNT(*) FROM AGENCY;"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": "SELECT agd.agency_id, xtype_cd, xtk_xmhd_ind, agd.agency_nm, agd.agency_dt;"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": "SELECT ID, date_start, eta FROM table WHERE AgencyID IN (SELECT T1.AgencyID\n     FROM AssociatedTo TJOIN JOIN AgencyTbl ON AssociaedTo.tblId = Aganciybt.id) GROUP BY t3;"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": "SELECT COUNT(*) FROM Client;"
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(*) FROM client_table;"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": "SELECT irst_name, last_name FROM Client;"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": "SELECT question_bank.client_id1, eroor._Qnobody\n     ORDER BY TIMESTAMP;"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": "SELECT agency_id, count(*) FROM flights GROUP BY agency_id ORDER BY COUNT DESC\n  LIMIT 10;"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "SELECT count(*) FROM client;"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": "SELECT agent.agency_id, COUNT(DISTINCT), MIN(agent.birthdate) AS age FROM agents ORDER BY count DESC;"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": "SELECT cid, name, num_clients FROM Agencies ORDER BY ROWS DESC LIMIT 1;"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": "SELECT agencys.id, COUNT(clients.id) AS num_clients FROM agencies ORDER BY RANDOMIZE;"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": "SELECT AGENCY_CODE, COUNT(*) AS NUM_CLIENTS FROM CLIENT_TABLE GROUP BY AGENCY_CODE;"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "SELECT * FROM TABLE\n  WHERE Client ='MAC';"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": "SELECT name, address\n  FROM agents;"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": "SELECT clients.name, agents.name FROM clients JOIN agents ON clients.id = agents.id;"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "SELECT uc.client_id, ct.contact_name, ca.phone\n   FROM clients AS c JOIN contracts_clients AS uc ON u.client_id  = CA.ID;"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "SELECT SIC_CODE, COUNT(*) FROM client GROUP BY SIC_CODE\n \tORDER BY count DESC;"
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "SELECT count(s.client_id), biz_sic FROM clients GROUP BY client_id;"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "SELECT c.Client_ID, c.Detail FROM Client AS C JOIN SYNONYM RESIDENTIAL_ADDRESSAJ ON C.Client_ID = AJ.Client_ID;"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": "SELECT ROLLING\n    ORDER BY BAD.GRANT_TYPE DESC;"
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": "SELECT GROUP\n \n \n  \n  \n\n  \n\n \n  \n\n  \n   \n     ORDER BY AGENCY\n    \n     \n      \n        \n          \n             \n              \n           \n                LIMIT 1234567890 OFFSET 1234567890;"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": "SELECT AGENCY.AGC_ID, AGENCY.AGENCY_DETAILS FROM AGENCY;"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": "SELECT query\n \n    FROM Client;"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": "SELECT count(*) FROM Agencies WHERE agency_id IN (SELECT DISTINCT t2.agency_id \n      FROM Contractors as t) GROUP BY location;"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": "SELECT COUNT(*) FROM invoice;"
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": "SELECT COUNT(*) FROM invoice AS a JOIN SELECT name ON first_name IN (SELECT first_name, second_name)\n    GROUP BY true;"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": "SELECT client_id FROM invoice ORDER BY invoice_date;"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": "SELECT i.id, o.status_code, ounit_id, o.currencyrencyID\n        FROM Invoice AS t JOIN OBJECT_DETAILS AsT ON T.UnitPrice = LINKEDSERVICESOBJECTNAME;"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": "SELECT clients.id, COUNT(invoices.id) AS num_of_invoices FROM clients JOIN invoices ON clients.id = invoices.client;"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": "SELECT xtend.runtime.collection_management2518490invoice \n     FROM client ORDER BY number;"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": "SELECT * FROM Client LIMIT 1;"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": "SELECT top \n        ORDER BY DATE, CREATED DESC;"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": "SELECT or \n    ORDER BY Client_ID DESC;"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "SELECT cl.Client_ID2, COUNT(cl.invoice_number) AS number_of_invoices FROM CLIENTS AS CLIMIT 2 OFFSET 19763450;"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status\n  LIMIT 10;"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": "SELECT count(invoice) AS total_invoices, from_api.get_statuses WHERE inovce_status = 201;"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": "SELECT NORMAL\n        FROM invoicing_table;"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "SELECT invoice_status, eta_invoicing ORDER BY count_of_invoices DESC LIMIT 1;"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": "SELECT invoice_status_code, icsd.client_id, icsd.agency_id, in.invoice_date, in.invoice_amount, etc\n      FROM invoices AS t JOIN clients AS c ON in.client_id = c.id\n       JOIN agendats AS a ON in.agency_id  = aid.id \n         GROUP BY invoice_status_code;"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": "SELECT DISTINCT * FROM invoices_schema;"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": "SELECT name, tpe2nmeessingcodes_processed FROM meetings;"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": "SELECT ounces, including \n    LIMIT 608951372.244;"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": "SELECT ON WHERE NAMES = 'Bernhardt' ORDER BY CLASS\n        LIMIT 3;"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": "SELECT ALL\n \n    WHERE SUBSTITUTED IN (SELECT TIME)\n  \n    \n      ORDER BY GUANTEES.MIRRORING DESC, SELECT LIMIT 1503469278 OFFSET -1;"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "SELECT pid, custid, date, method, amountUSD FROM invoice WHERE state ='W';"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": "SELECT *FROM payment_table WHERE InvoiceStatus='Working';"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": "SELECT invoice_id, paymetnt_date FROM invoices WHERE state = 'PAID';"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": "SELECT t2.invoice_id184, ALSE, because\n      \t        \t  \t \t     \t    \t    \t    \t    \t    \t    \t    \t \t    \t    \t \t   \n\n\n\n\n\n\n       \n        FROM invoice AS t JOIN merchants AS m ON t.merchant_id = m.tenant_id \n                     JOIN (SELECT invoice_id184, id) AS t2 ON T"
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": "SELECT COUNT(*) FROM payments;"
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": "SELECT COUNT(payments) FROM bank;"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": "SELECT T3245_1, INVOICE169780PAWNELIXSTREAMERESTCONFIRMATIONSINVOICENUMBER\n            FROM organization o  JOIN kvp ON o.organizationid  =  KVp.Organization  \n    JOIN membership olegs ON OLEGS.Memberof  =  members.memberId  \n    JOIN invoice i ON legs.invoiceid  = I"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "SELECT c.PaymentID, p.InvoiceID, a.Amount FROM public_dataset AS b JOIN Sales_Store_All AS ap ON b.Payments = AP JOIN Invoices as AI ON BI = 102\n  \n  JOIN SALES_STORE AllasappayJOINTbillingsaSALESHAVEONEALLANDpaymentdetailsinALllpaymnetdetailsinsallcategoriesSELECTCATEGOR"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": "SELECT * FROM Invoice WHERE InvoiceDate >= DATE_ADD_TIME_HOURS_MINUTES_SECONDS_TO_BE_PAID\n  ORDER BY Status ASC;"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": "SELECT count(*) FROM payments WHERE payment_method_code IN (SELECT code FROM payment_methods)\n  GROUP BY InvoiceId, Status;"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": "SELECT * FROM invoices WHERE payment_count = (SELECT count(id) from \n       \t\t\tWHERE payment_date >= '2019-04')  \n            GROUP BY id;"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "SELECT count(payments), payment_method FROM publications WHERE code = 'INV' GROUP BY cardholders;"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": "SELECT invoice_id5760892134__pmonotransactions \n        FROM invoices ORDER BY payment_number DESC LIMIT 1;"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": "SELECT ird.invoice_id, ira.status, iar.description FROM invoice_items AS i JOIN receipt_accounting AS ird ON i.invoice_id  = ird.invoice_id JOIN invoices AS ii ON ird.invoice_id  = ii.invoice_id  JOIN invoice_status_codes AS iscc ON I1.invoice_status  = ISC.invoice_status   JOIN"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "SELECT count(*) FROM staff_members;"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": "SELECT COUNT(*) FROM Staff;"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": "SELECT A056.AGENCY_ID, COUNT(A056.AGENT) AS NUM_OF_STAFF\n  FROM (SELECT T14378921StaffMembers.AgentId, StaffId   FROM STAR_DBC_FINANCE_SchemaName), SUBQUERYAS\nH WHERE STATE = 'OH'\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "SELECT id, count(*) FROM Staff;"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": "SELECT *FROM Agency ORDER BY Staff DESC LIMIT 1;"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": "SELECT TOP \n        FROM (SELECT Id, CAST(StaffCount1__2_46579830_.staffcountasof201lpersolibatemanageandcounted_20pMASCHF_C.StaffCountAsof2016personsolibaTENOTLOUMAINEBYAGENCYRATEOF) AS StaffCount, agencyname FROM AGENCY)"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": "SELECT personid FROM people WHERE LIFEQUALITY < 2104869537\n     LIMIT 2;"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "SELECT count(*) FROM outcomes WHERE meeting_id = 1;"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": "SELECT clnt_id, COUNT(*) FROM meetings GROUP BY clnt_id ORDER BY count DESC;"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": "SELECT COUNT(*) FROM meetings WHERE client_id = 1\n        ORDER BY count DESC;"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": "SELECT MEETING_TYPE_CODES, COUNT(*) AS NUM_MEETINGS FROM client ORDER BY CLIENT;"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "SELECT count(meeting_type), FROM \t\t\t\t\tWHERE meetings.id = 0;"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": "SELECT Meeting_ID, CASE \n        LIMIT 3065847921487;"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": "SELECT Client_name, COUNT(*) AS NumberofMeetings FROM Projectsaleematesbyme TORDER BY Meetingtype;"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": "SELECT MEETING_ID, COUNT(*) FROM daily_entries WHERE type='staff';"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": "SELECT count(*) FROM Staff_Meetings WHERE Meeting_id = 'mid1'\n \tORDER BY COUNT, DESC;"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": "SELECT meet_id, staf_attending FROM StaffMeeting ORDER BY Attendance DESC LIMIT 1;"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": "SELECT xtend.staff_entities.Attended_least_meetings, group_by\n     \n\n\n\n\n\n\n\n\n\n\n  \n      \n          \n       \n   \n     \n          GROUP BY AttenderId;"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": "SELECT count(*) FROM table_name;"
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "SELECT COUNT(*) FROM Staff_Attendance WHERE Attended = 1\n    LIMIT 5;"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": "SELECT COUNT(*)FROM Staff WHERE Attendance='No Meeting';"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": "SELECT COUNT(*) FROM Staff WHERE Attendance_Status = 'Not attended';"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "SELECT T2.client_id1, MENTS.meeting_id1\n     FROM CLIENTS AS M WHERE Clients.client_id1 IN (SELECT Meetings.meeting_id1)  \n    ORDER BY Client ASC;"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": "SELECT ract_clients(client)\n    INTERVAL FROM (SELECT cliend, IDENTIFY()) AS c;"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": "SELECT distinct(Person.person_id), Person.name, Detail FROM STARVETOCKETEERENCHOICE WHERE Attendance >=  1 GROUP BY PERSONID\n    ORDER BY NAME DESC;"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": "SELECT iD, STAFF_DETAILS FROM ATTEN_CHECK WHERE Staff.Attendance = '1' ORDER BY StaffDetails.Staff_id\n    LIMIT 50;"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": "SELECT clause;"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": "SELECT ALL\n    FROM client_meetings AS t JOIN companies ON ClientID = companyid JOIN Invoices APOINTES ON InvoiceId  =  INVOICENUMBERS.InvoiceNumber JOIN CITIES ON HighlightPlaceOfThe = CityRank ORDER BY ClientSector\n   \n    LIMIT 10;"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": "SELECT cti.start_time, ounce.end_time, cli.client_detail, sta.staff_detail FROM (SELECT start_time, END_TIME FROM OUTFIT_MEETINGS) AS o  JOIN CLIENT_INFORMATION AS CLI ON TRUE  \n<br;"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": "SELECT Client_Name1, xtype, duration, starttime, endtime, CAST(starttimeAScii.maketimeYEARMODELNYEAROFFSET.starttime), Client_Name2 ORDER BY starttime DESC\n     \n    LIMIT 5;"
  }
]