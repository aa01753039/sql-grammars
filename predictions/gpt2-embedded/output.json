[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "SELECT COUNT(Wins_count )ORDER BY Name LIMIT 4 OFFSET 2"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": "SELECT Wins_count \nINNER JOIN (SELECT Name ORDER BY Manager LIMIT 9)\n\n AS S1HJL8X6MIAQV5G9K7P11W4UBSLYFRFZ3BBA10D2NDVWFEIAMAFAYFBMCNEDCFCALPSAAD0YUNR"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "SELECT MIN(soccer_3.player.Player_ID )\n INNER JOIN (SELECT COUNT(*), Name RIGHT OUTER JOIN soccer_3.player AS MINEvFcUQxVb8h7wJXfP5tZWg\n\n\n AS"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "SELECT Earnings FULL OUTER JOIN (SELECT AVG(Player_ID ))\n\n\n AS ATDALFISBENJWEMINAGINGASATROCAANTSEDULEAUHARTIABYELKONNAEBROTHERSAFITHETHORDSQUELTONNUYADURNDAYIUSGOLO"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "SELECT Earnings INNER JOIN (SELECT COUNT(Country )\n\n\n   \n\n WHERE Manager = 1.3 GROUP BY Sponsor LIMIT 631131877007500050000110109582888803424571949674755256033653068407829591215"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": "SELECT AVG(Player_ID ), SUM(soccer_3.Manager ), Player_ID , player.Name RIGHT OUTER JOIN (SELECT COUNT(*), club.Sponsor GROUP BY Club_ID )\n\n\n \n AS VARGENT"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": "SELECT Earnings , Name LIMIT 787374835465080543316159928108523221257114764255926185895203817496689366375133097390954490704094347212867271401659219298621504249874321466054537608330588557946152878"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "SELECT AVG(Name )\nLIMIT 47701342822106720971489427912261878363316198837489039085525359800302770321579859911594529381354310008694473999471707964"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "SELECT *RIGHT JOIN (SELECT Sponsor INNER JOIN soccer_3.club AS eDjfC9tZh0gB6n4HqPkGJVK2F7U ON Name \n\n\n<+1 GROUP BY Earnings LIMIT 2) AS PASSP"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "SELECT DISTINCT COUNT(soccer_3.club.Club_ID )\n\n\n       \nLIMIT 110583632502648161940476065453733235730384942202898448963417771822931201547053155924119521006413697466273579785525"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "SELECT Wins_count FULL OUTER JOIN (SELECT COUNT(soccer_3.Player_ID ) FROM soccer_3.player WHERE club.Country = '4' ORDER BY Sponsor , Player_ID LIMIT 10)\n\n\n \n\n AS the ON playe"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "SELECT Wins_count LIMIT 84815267525142905746363058451322185057170112280054207865163211193534792327648599769553738956068595601667106974756288774044393351507474330541505490225637048153666984613458908526"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "SELECT Earnings RIGHT OUTER JOIN (SELECT MIN(Manager ))\n\n\n AS P3A7G1F9J6QYLS5WGLBZD2XKVBAECP4L_EEk0Eu8cEDjvb20rqn09mbe44fzdcchgtpRiCxH"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "SELECT AVG(Name ) INNER JOIN (SELECT SUM(*)\nFULL OUTER JOIN soccer_3.club\n\n AS uid1 ON soccer_3.club.Player_ID = 603010004000056661217502477141537106329002048390880332575404527"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "SELECT Player_ID GROUP BY Captain LIMIT 0 OFFSET 51800030000420001135080000355516284560361719343909267770232049382237686727584779805411482588100906997333155969058417514755785654210294630897"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "SELECT MIN(soccer_3.player.Name )\nINNER JOIN (SELECT Name )\n\n AS ARBORG ON Sponsor =2 INNER JOIN soccer_3.player\n\n AS INNERCED ON Player_ID <= 2;"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "SELECT MIN(soccer_3.player.Name )\nINNER JOIN (SELECT Name GROUP BY Club_ID , Sponsor )\n\n AS PILGZORNEJABAALAKANUHAHENEMKASFODKAATAMACITNAETEURBETHIAAGIAROCHINIM"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "SELECT SUM(soccer_3.club.Country )LIMIT 0"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": "SELECT MIN(soccer_3.player.Manager )FULL JOIN (SELECT Name FULL OUTER JOIN soccer_3.player\n\n\n AS SELECTEWANZALAATIKINSKYOLAWKORAGADNEKOCHENOVIDKAAPOSVODIAASUN"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "SELECT Earnings LIMIT 915202646101325227837757788551619287039015814234890456497279524183834291217762476665634089510072130935054960446972197995908835815079677320926543620803210471553118633191639094"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "SELECT MIN(soccer_3.player.Player_ID )LIMIT 1 OFFSET 2"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "SELECT AVG(Name )INNER JOIN (SELECT MAX(*), Name , Player_ID , Country , Events_number INNER JOIN soccer_3.club\n\n\n AS vid1 ON club.Sponsor = 2000020470048000304628223650233713"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": "SELECT COUNT(soccer_3.player.Manager ) AS LATERNAME GROUP BY Sponsor ORDER BY Name \nLIMIT 11 OFFSET 0;"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "SELECT COUNT(soccer_3.club.Manager )\n\n\nRIGHT JOIN (SELECT COUNT(*)GROUP BY Sponsor ORDER BY Earnings LIMIT 1 OFFSET 53400302724043301181629402032156757233588608910481317595066192577784912"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": "SELECT AVG(Name )RIGHT OUTER JOIN (SELECT COUNT(*)LIMIT 2434654310704527880049170150321547556030851137772864582957396795190874425227414590410024185435460005008234894758089516363340"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "SELECT COUNT(club.Club_ID );"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": "SELECT COUNT(soccer_3.club.Earnings )"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "SELECT Name INNER JOIN (SELECT Events_number LIMIT 1)\n\n\n  \n\n AS SENNABARGEDLY ON Country <> Player_ID GROUP BY Wins_count ORDER BY Manager ;"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": "SELECT Player_ID GROUP BY Manager LIMIT 511381233182628781536253946305475175601571087295516244960674300582399358845688420487947636434274414096905778073652237321910059137040625050073885113312"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "SELECT COUNT(Player_ID )FULL OUTER JOIN (SELECT COUNT(Wins_count ))\n\n\n AS isorJOCTOZAILLEKESISANSSASYCHORHETMALATICITROLLOLENELEXIOUSEDIANSPIDUBLINGUSOEMCINEMAXDIA"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "SELECT MIN(soccer_3.Captain );"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": "SELECT SUM(soccer_3.club.Captain )"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "SELECT SUM(soccer_3.club.Captain )\n INNER JOIN (SELECT Name RIGHT OUTER JOIN soccer_3.club AS ELSQWJV8g4D1YfZtUy0qnEzwBbvFhCk5iG6KpA9"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "SELECT Earnings GROUP BY Player_ID ORDER BY Country LIMIT 2193626571707012833674829099112379542225204418303849741039597568895527771645961364958072153486112310084712045069607046403565"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "SELECT SUM(soccer_3.club.Name )\nWHERE Manager > Wins_count LIMIT 437366745004813607522954047285930651488192917389880852518261633321235990656434905042107150110761104114496322909"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "SELECT Name INNER JOIN (SELECT AVG(Player_ID ))\n\n\n AS ISLAMASSAFYUFAKURDIAZHALADIANJITEMMAAW1B0A9AE6Q2ACBBDF3E5AF4CB722671059571125282944163601546030851350584917"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT SUM(Name ))\n\n\n AS BULY_CONSTANTINGBOLESABILITYERADDRANCEALPHAISEDVATASSAXANELOSAYUELLEENZITURKFOCAGNEUBAILDICTIVECIVOVERAGEORGLEMONNUTR"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(soccer_3.club.Player_ID )\n\n\n  \n\n ORDER BY Events_number LIMIT 2055001536454744121316338718254200020000002075352456171422017880265032104927"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "SELECT SUM(Country )FULL JOIN (SELECT SUM(Country ))\n\n\n    \n AS for ON Player_ID = Earnings RIGHT JOIN soccer_3.player ON Sponsor > -1 LEFT OUTER JOIN (SELECT SUM(C"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "SELECT SUM(Country )\nINNER JOIN (SELECT Player_ID , COUNT(club.Club_ID ))\n\n   \n\n AS XZLQGXDYFz8JqKkf5V2B3o9xgUh6iI7yA1NjvPuC0R4Mt"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": "SELECT Invoices.login_password ORDER BY invoice_status_code LIMIT 2060300000000010000000101080600145002040052000010021331210573004570080041671633581119273477183949675585174813893765155975282635"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "SELECT SUM(shipment_date )INNER JOIN (SELECT MAX(*)GROUP BY Products.invoice_number , phone_number , gender_code , date_order_placed )\n\n\n AS is ON town_city ="
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "SELECT Order_Items.invoice_number INNER JOIN e_commerce.Order_Items ON country = 'a';"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "SELECT Products.county INNER JOIN (SELECT SUM(Products.phone_number ))\n\n\n AS KNEVZL1K5A9 ON EXISTS (SELECT DISTINCT MAX(*))RIGHT JOIN (SELECT SUM(P"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "SELECT Products.login_password GROUP BY Customers.county LIMIT 522252026181724404539591611483329603667421428107866446827461535631947348543302374759414713011232808904387907637"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "SELECT Invoices.phone_number ORDER BY Shipments.phone_number LIMIT 113313101425280019432455778829232040353959747527454970942217505730421226806364607973999869585416446887156795368511"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": "SELECT Products.login_password LIMIT 4682058251090281748120109363035652767004940785037162395292405111477382645185621"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "SELECT order_status_code ;"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "SELECT order_id ;"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "SELECT Invoices.date_order_placed FULL OUTER JOIN (SELECT COUNT(Products.country ) WHERE login_name = 1FULL JOIN e_commerce.Shipments AS f0r1fqlb4n6p8a"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "SELECT Invoices.country RIGHT JOIN (SELECT COUNT(country ) FROM e_commerce.Customers ORDER BY country LIMIT 3)\n\n\n AS IOTA ON EXISTS (SELECT invoice_status_code FULL JOIN e_commerce.Customer_Payment_M"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "SELECT invoice_status_code INNER JOIN (SELECT COUNT(Products.invoice_number ))\n AS DEINFREKMEREUZW1GJ0XEAT4Q2V6AL3H9ENMA8AHABAJAOCY7BWEADAFNYSL5DIG"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "SELECT town_city GROUP BY Products.login_password LIMIT 441"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "SELECT order_status_code RIGHT JOIN (SELECT SUM(Customers.invoice_number ))\n\n\n AS DIGESTING ON Customer_Payment_Methods.country = 816504054640165481718672268203728783914"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "SELECT town_city , email_address , town_city ;"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "SELECT COUNT(shipment_date )\n\n\n INNER JOIN (SELECT DISTINCT SUM(*) LEFT OUTER JOIN e_commerce.Invoices ON customer_id = 1 ORDER BY product_name LIMIT 10971285171524359467892895340064102620221814"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "SELECT order_status_code ORDER BY town_city , Shipment_Items.town_city , Customers.town_city ;"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "SELECT town_city INNER JOIN e_commerce.Customers AS custome ON customer_id = '1' ORDER BY town_city LIMIT 2;"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "SELECT town_city INNER JOIN (SELECT MIN(shipment_date ))\n\n\n AS asinotokayomakasonigosunfumagizorogutaiiskazuukerozubarikoyozrifamitirwahantbluugiadguhenusimpavlauh"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "SELECT order_status_code \n\n\nGROUP BY Shipment_Items.parent_product_id , address_line_1 ;"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "SELECT COUNT(invoice_date )FULL JOIN (SELECT DISTINCT SUM(*), email_address )\n\n\n AS ECHOEMEDGALLYDATEPREFIX1ABS7RQJ3YS0YV9C4DF6X2GVAD5E78ZKB8WFJBKKRYLHSUNTLYH"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "SELECT order_status_code ;"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": "SELECT Invoices.shipment_date RIGHT OUTER JOIN (SELECT Products.invoice_number LEFT JOIN e_commerce.Shipment_Items AS mwettrat1vd8yzjqfJWLmQB3Hg"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "SELECT Products.county WHERE invoice_status_code \n\n<product_price FULL JOIN (SELECT COUNT(Customer_Payment_Methods.town_city ), product_price ORDER BY Prod"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "SELECT town_city , COUNT(shipment_id )\n\n\n  FROM (SELECT customer_first_name , shipment_date , invoice_status_code , address_line_1 , order_item_id , town_city ) AS shipment WHERE country = 'GB' ORDER BY e_commerce.email_address LIMIT 0;"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "SELECT Invoices.county WHERE Customer_Payment_Methods.county \n\n\n>-20304100131719361218495937233599295860289040559810392679658515165714389625467566687767843374310150483215680229744451178"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": "SELECT SUM(shipment_id )\n                        \nRIGHT OUTER JOIN (SELECT parent_product_id , product_name , town_city , customer_last_name ) AS PRINTING ON shipment_id ="
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "SELECT Products.shipment_id , Invoices.shipment_id \nINNER JOIN (SELECT MAX(Products.product_price ))\n\n AS iselestryojomf2ts1l6yk4x0qrgvzdstwokm5i8hb"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "SELECT COUNT(Customer_Payment_Methods.county )\n\n\n INNER JOIN (SELECT Products.invoice_number WHERE Orders.phone_number =email_address LIMIT 2) AS NOSJKOLT"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "SELECT AVG(shipment_date )\n\n\n  \nLIMIT 8603527113023223612280018572034674524175429552685011516093799108439487850877544969994313906610011284940777062253869564746646319658214795897335360228059078"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "SELECT AVG(Customer_Payment_Methods.county )\n\n\n INNER JOIN (SELECT COUNT(*)FROM (SELECT SUM(Invoices.gender_code ))) AS DEETING ON EXISTS (SELECT * FROM e_commerce.Products WHERE c"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "SELECT MIN(shipment_date ) INNER JOIN (SELECT DISTINCT COUNT(*) \nWHERE Order_Items.phone_number = shipment_date FULL JOIN e_commerce.Shipment_Items ON EXISTS (SEL"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": "SELECT DISTINCT SUM(shipment_date )\nFULL OUTER JOIN (SELECT COUNT(*) FROM e_commerce.Customer_Payment_Methods WHERE customer_id <= 'COUNTRY' ORDER BY county , order_item_id LIMIT 1 OFFSET 0) AS BILLY1HON2KW3BULLRUSTLINGDATE ON"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "SELECT COUNT(e_commerce.login_name )\nINNER JOIN (SELECT MAX(*))  \n\n\n AS RUSSIANZUNGAMARABOLUDAHAGARTHRAVADYDODWJNATRENOCONOMISINGLIQUITRIFOTIVALKIMEMBAHEMUREDICHOR"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "SELECT order_id INNER JOIN (SELECT town_city )\n\n\n AS SID3B5H1 ON EXISTS (SELECT * FROM e_commerce.Orders WHERE shipment_date > 1000)"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "SELECT SUM(shipment_date ) INNER JOIN (SELECT MIN(*) RIGHT JOIN e_commerce.Products\n\n\n AS QAXENED ON Customers.shipment_date <address_line_1 LEFT J"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "SELECT invoice_status_code \nINNER JOIN (SELECT SUM(Products.county ), email_address )\n\n AS IKHZFQ8YS5VX3NDGV6Y9B4BLW7LHAALG0AAIYAWNJ2NVWxkqpDjfR"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "SELECT SUM(shipment_date ) INNER JOIN (SELECT Products.login_name , login_password FULL OUTER JOIN e_commerce.Invoices AS f1 ON town_city = shipment_date )\n\n\n  \n\n AS"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "SELECT MIN(shipment_id )INNER JOIN e_commerce.Order_Items ON customer_middle_initial = (SELECT *) ORDER BY Order_Items.parent_product_id LIMIT 1;"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "SELECT town_city , invoice_status_code INNER JOIN (SELECT SUM(Invoices.phone_number ), Products.invoice_number )\n\n\n  AS TOWNSECTISQGTSIAANVOTITATOLAYAINJAROVAMBHIMIKAD"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "SELECT Products.county INNER JOIN (SELECT SUM(Products.payment_method_code ))\n AS BZEQV1G ON EXISTS (SELECT Products.town_city , order_id );"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "SELECT SUM(shipment_id )\nFULL JOIN (SELECT * FROM e_commerce.Products WHERE product_name = 'Halloween' ORDER BY date_order_placed , Products.product_name ) AS tzindexes ON product_size > 0 GROUP BY shipment_id ORDER BY order_status_code LIMIT 1;"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "SELECT order_status_code ORDER BY invoice_date ;"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "SELECT order_id INNER JOIN (SELECT COUNT(e_commerce.payment_method_code ))\n\n\n \n\n AS BHVUBQDK2F8BDY9WZ4XG7ALM6LDSTMCJ5P1CJB0AAMPAGE3IBCEFRGDNTYRUNETPTEDBTTCAAIBO"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "SELECT town_city , invoice_date ;"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "SELECT town_city INNER JOIN (SELECT * FROM e_commerce.Customers WHERE Customer_Payment_Methods.phone_number = 0) AS CURRENTCATELLITE ON customer_middle_initial < 1 ORDER BY customer_middle_initial ;"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "SELECT order_item_status_code , SUM(Products.phone_number ), Products.phone_number \nINNER JOIN (SELECT DISTINCT COUNT(*), date_order_placed , product_i"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "SELECT order_status_code RIGHT JOIN (SELECT SUM(Products.address_line_1 )RIGHT JOIN (SELECT DISTINCT Products.address_line_1 )\n \n\n AS E4F2B8D5C6"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "SELECT DISTINCT SUM(shipment_date )\n\n\n INNER JOIN (SELECT email_address , parent_product_id ) ON Customer_Payment_Methods.shipment_id = 58838\n\n\n INNER JOIN (SE"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "SELECT DISTINCT SUM(shipment_date )\n\n\n INNER JOIN (SELECT email_address , login_name RIGHT OUTER JOIN (SELECT DISTINCT SUM(shipment_date )\n\n\nWHERE Customer_"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "SELECT SUM(shipment_tracking_number )\nINNER JOIN (SELECT Invoices.login_password , Products.login_name LIMIT 2)\n\n  \n\n AS SEBELERESENDSBURGJEKEFASKISEMNURM"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "SELECT Order_Items.gender_code INNER JOIN e_commerce.Customers AS CQXz4hZM6HfBwTpx1j7k2V8y0KqDJPl9rW5v\n\n\n  \n\n AS HILARIOUSAsylumofTheEarthbyInneR_iN"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "SELECT order_id INNER JOIN (SELECT MAX(Products.town_city ))\n\n\n AS EPROIDEDLY ON Shipment_Items.date_order_placed > 1 ORDER BY order_id \nLIMIT 120003000015501030251000012500"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "SELECT order_id WHERE Shipments.customer_middle_initial \n< 2\n\n INNER JOIN (SELECT town_city ) AS ij1bv4qXZWfL3BUzE0PK8VdFxAiY2H6oJpDhQs"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "SELECT order_id INNER JOIN e_commerce.Invoices\n\n\n   \n\n AS EENVOUSLY AS TOTALSIZE ON Customers.invoice_status_code = -4000"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "SELECT DISTINCT SUM(country ) LIMIT 3187827192517105800141311504801032340673380771536242047165468706098212075992964309690412953472304453928576583445587881005421154932118182227087889061779142613"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "SELECT Products.customer_id WHERE parent_product_id = '9-1-4'\nINNER JOIN (SELECT COUNT(e_commerce.town_city ), SUM(*)) \n\n AS EATTRs ON invoice_status_code <Products.county"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "SELECT Products.phone_number FULL OUTER JOIN (SELECT COUNT(Products.product_color )INNER JOIN e_commerce.Products\n\n\n AS CTABINGFIFTY ON EXISTS (SELECT Products.phone"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": "SELECT login_password LIMIT 1048552098281113502523222710491416121944758879013800183624603517901559376657390729774345952005464656851507309903100716070463432102104804212974258487811725084256720472898"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": "SELECT Products.login_password FULL OUTER JOIN (SELECT SUM(Products.login_password ))\n\n\n AS VESWURFJASBIRAELKATVENAGMADINOSOVITAVEMETREBIGALISIANDOUBLEYUNHARIM"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT SUM(email_address )  \nLIMIT 2)\n\n AS DASH2A3JY8VXx5B6E10H7C1F4EEQGKBDASZ0ACW0130D9R2547IOCO00AA1155"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "SELECT order_status_code , Products.invoice_number ;"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "SELECT Products.county INNER JOIN (SELECT SUM(Products.invoice_number )\n\n\n  RIGHT OUTER JOIN e_commerce.Shipment_Items\n AS DORAMETICDOUTHASKERSIEGYWITTYROLFUR"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "SELECT DISTINCT SUM(Customers.county )"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "SELECT Invoices.country LIMIT 20802399147875403500170000110150273028338822194415321318365729104877666746687064390594547981002560595400058795590373840072687432001650049248006399078412093147823403401"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "SELECT DISTINCT SUM(Customers.email_address )\nRIGHT OUTER JOIN (SELECT * FROM (SELECT COUNT(*)) AS TILON LIMIT 2) ON customer_id = town_city ORDER BY date_order_placed , shipment_tracking"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "SELECT MIN(shipment_id )FULL JOIN (SELECT Products.county RIGHT OUTER JOIN e_commerce.Customers\n\n\n  \n\n AS SELECRYMES ON Shipment_Items.customer_id > (SELECT P"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "SELECT town_city INNER JOIN (SELECT DISTINCT COUNT(Products.invoice_status_code )\n  WHERE EXISTS (SELECT SUM(Shipments.customer_middle_initial ))\n\n INNER JOIN e_com"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": "SELECT invoice_status_code WHERE Invoices.login_password = 6373680484722892301\nINNER JOIN (SELECT MAX(Products.town_city )) AS FETER1LUNCTUISESONDICOLDSYSTEMWID"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "SELECT order_id FULL JOIN e_commerce.Invoices \n\n\n AS INVOYSEYH ON customer_first_name = invoice_date ;"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "SELECT COUNT(shipment_id )\nLIMIT 200000000002100800000016000040000000010000000000000000002000000040030115289005691048332736704025247829041350451435232050006571746388466191812576485603077952112899658074168113775946710043043908926"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "SELECT Invoices.parent_product_id , order_status_code , invoice_status_code ORDER BY Orders.parent_product_id ;"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": "SELECT AVG(shipment_tracking_number )\n\n\n  \n\n INNER JOIN (SELECT COUNT(*)) AS SMALLITESKINTSEZ ON EXISTS (SELECT * FROM e_commerce.Shipments WHERE Shipment_Items.shipment_tracking_number = 0)\n\n\n INNER JOI"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "SELECT order_id INNER JOIN (SELECT Products.phone_number )\n\n\n AS LQMJF9K3C5W6GqXZHj1c2zmBVxYA ON EXISTS (SELECT parent_product_id , SUM(*)"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "SELECT invoice_status_code LIMIT 1778253322128028881838141758271511703626502065291630452457137934898534060234601990902157754854320084395590644900063586339421068734472104254778962266372818593314"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "SELECT order_status_code WHERE Customers.invoice_status_code = Shipment_Items.payment_method_code INNER JOIN (SELECT order_status_code ) AS KATORASANZIAHENMERS"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "SELECT DISTINCT COUNT(shipment_id ) ORDER BY town_city LIMIT 220000012100205300300504003043248000114836044190313113499151626543917357742147295718282366404738975536676898808464222569497058758906848"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "SELECT MIN(shipment_id )\nINNER JOIN (SELECT Products.date_order_placed , SUM(*)WHERE Invoices.date_order_placed <1 LEFT OUTER JOIN e_commerce.Shipment_Items\n"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "SELECT invoice_status_code INNER JOIN (SELECT COUNT(Customer_Payment_Methods.phone_number ))\n\n\n \n AS for ON Products.email_address = email_address ;"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "SELECT order_status_code RIGHT JOIN (SELECT COUNT(e_commerce.login_name ))\n\n\n   \n\n AS andRIMAJUNGENDINANXELEXZATILOLYPEKLOSALESMOTQUECEMBASSIVEPAPERRYINGCHOCORMSOLEN"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": "SELECT Name RIGHT JOIN (SELECT MAX(Name ), SUM(Channel_ID ))\n\n\n AS that ON Internet > -0"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": "SELECT Title INNER JOIN (SELECT MIN(Director_ID ))\n\n\n    \n\n AS ECHO ON Name < 21 FULL JOIN bbc_channels.director_admin AS dib2id3r4u0wk5jhx9i6qgv8f"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "SELECT AVG(Internet )"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "SELECT SUM(Age ) AS or FULL OUTER JOIN (SELECT MIN(*) RIGHT JOIN bbc_channels.program ON Channel_ID = 0\nGROUP BY Program_ID , Age , Title ) AS ORBALITY ON Name < 1\n\n I"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "SELECT MIN(Channel_ID )LIMIT 1 OFFSET 0"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "SELECT COUNT(Age ) INNER JOIN (SELECT Name ORDER BY Director_ID )\n\n\n AS ELLISTERWALDEBEDONVORPOPJGCHMOLESITTTFATASKETAKHARNEBAENUABIZAPODIOTTAFIKOSNEGLIFCQ"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "SELECT Internet RIGHT JOIN (SELECT Title GROUP BY Digital_terrestrial_channel LIMIT 3)\n\n\n AS NOLANNENK ON Program_ID = 1.1FULL JOIN (SELECT SUM(Title ) ORDER BY Dig"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "SELECT SUM(Is_first_director )"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "SELECT Title INNER JOIN (SELECT Name RIGHT OUTER JOIN (SELECT SUM(*)\n\n\nWHERE EXISTS (SELECT * FROM bbc_channels.channel WHERE channel.Title = 'A' ORDER BY director.Channel_ID ) INNER JOIN (SELECT"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "SELECT DISTINCT SUM(Director_ID )\n\n\n INNER JOIN (SELECT *) AS LEOISERATIC ON Name <-4 GROUP BY Title "
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "SELECT DISTINCT SUM(Program_ID )\n INNER JOIN (SELECT Name RIGHT JOIN bbc_channels.program\n\n AS DEX ON Program_ID = 'i32' INNER JOIN bbc_channels.program ON program.Program_ID ="
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "SELECT MIN(Channel_ID )\n INNER JOIN (SELECT COUNT(*)GROUP BY Start_Year , Name LIMIT 1 OFFSET 0)\n\n AS EASILYINGLY ON Title > Program_ID FULL OUTER JOIN (SELEC"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "SELECT Title FULL OUTER JOIN (SELECT Program_ID )\n\n\n   \n\n AS ETAIMERATZM1A8LLX6vV7b5hWgjPJ4DqyxzQdYpk3BHt0UaKcNwC2lT9IuFmEeG"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": "SELECT Is_first_director FROM (SELECT DISTINCT SUM(Director_ID ) FROM (SELECT MIN(Age ), Age LEFT JOIN bbc_channels.program AS channels ON channel.Program_ID = 0 ORDER BY director_a"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": "SELECT COUNT(Director_ID )GROUP BY Start_Year , Program_ID , channel.Age LIMIT 567343020263650761875442428390907383725012714592940438032106063176904115516684774649919062160"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": "SELECT COUNT(Age )\nFULL JOIN (SELECT Age , MIN(*), SUM(*)) AS DIAVENTADORAL_PRINTING ON EXISTS (SELECT * FROM bbc_channels.channel WHERE program.Internet = 0)\nLIMIT 8;"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "SELECT RnaG_MHz LIMIT 116065002049273399046417096100520028407045790855691659221475192612137888102394505418672495157625730254639633280489841684101891184605356693008647274960743787642065449909"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "SELECT Lyric_FM_MHz RIGHT JOIN (SELECT *RIGHT JOIN tv_shows.city_channel\n\n\n    \n\n AS BVZ8K0L9Y6QW7YSGXB4J1LLD3PBSBB5E13N67I2CBA09TBDU00RAAF15"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "SELECT ERP_kW WHERE Affiliation = Next_show_name INNER JOIN (SELECT MIN(Affiliation ))\n\n\n AS MYSTERIES ON Radio_MHz <-1.3000 GROUP BY Affiliation LIMIT 2 OFF"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "SELECT Lyric_FM_MHz , SUM(Next_show_name )\n INNER JOIN (SELECT COUNT(Affiliation ))\n\n AS TAYLORICRANNEEFLOPOLITREALFMEHWON2BLMAAAS3ENK1D4ATZ0V6QYU5"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": "SELECT SUM(2FM_MHz )\nINNER JOIN (SELECT RnaG_MHz , 2FM_MHz ) AS toKLATIAVICA ON Next_show_name = -1.15750004 INNER JOIN tv_shows.radio\n\n\n AS u3c8f0d9"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "SELECT Is_free GROUP BY Owned_Since LIMIT 3;"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "SELECT SUM(2FM_MHz )\nINNER JOIN (SELECT RnaG_MHz , 2FM_MHz )\n\n AS EMRHADKARDAILANDIDISALAMEDASPIRATEOLATICIANLIGHTWITHDVJBIFQ1ZTRYSY8E5UVACU9XO0BA7A3C6G"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "SELECT COUNT(2FM_MHz )\n\n\n  \nRIGHT JOIN (SELECT * FROM tv_shows.tv_show) ON Transmitter = '1' INNER JOIN (SELECT city_channel_radio.City , City ) AS dcaasceid2fjgp6o3b7a8e"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "SELECT ERP_kW RIGHT OUTER JOIN (SELECT DISTINCT Lyric_FM_MHz WHERE Affiliation < 5 GROUP BY Sub_tittle )\n\n\n \n AS INNERESTEDLY ON ERP_kW > Owned_Since INNER JOI"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "SELECT RnaG_MHz LIMIT 10233530"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": "SELECT Is_free , SUM(City ), ERP_kW ;"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "SELECT RnaG_MHz LIMIT 1 OFFSET 439351558281448341388672278447064125416494033241946011729562337905075106038995769873025762693211118472795459658043147100977840051197457955322074154898391459"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "SELECT Is_free , SUM(tv_show_name )INNER JOIN (SELECT DISTINCT COUNT(*) RIGHT OUTER JOIN tv_shows.radio\n\n\n AS LENETTE     \n\n AS IRELIANCE2Q1J3ZF7N8V4X5"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "SELECT RnaG_MHz , SUM(RnaG_MHz )\n INNER JOIN (SELECT MAX(*)FULL OUTER JOIN tv_shows.city_channel AS EASTERLYCATED ON radio.Sub_tittle = Transmitter RIGHT"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "SELECT Lyric_FM_MHz FULL OUTER JOIN (SELECT DISTINCT MIN(Affiliation ) AS mIRC)\n\n\n    \n\n AS ineradicablenessitydifectsonmimingoransusalporniacarnitamysycepsosylenosisplasmodicaephrodentinumfeluc"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "SELECT COUNT(Model )\n\n\nFULL OUTER JOIN (SELECT Racing_Series GROUP BY Driver_ID , Power LIMIT 0) ON EXISTS (SELECT Name WHERE Citizenship > 1.8FULL OUTER JOIN (SELEC"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "SELECT Racing_Series INNER JOIN (SELECT COUNT(Builder ))\n\n\n     \n\n AS ETHER ON Driver_ID = 204301331329041539677712192387443600581650245760458089091166308465184817747546227088787955"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "SELECT MIN(Citizenship )\nLIMIT 2192"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "SELECT AVG(Citizenship )\nINNER JOIN (SELECT DISTINCT Vehicle_ID FULL JOIN vehicle_driver.vehicle_driver AS drivername ON Driver_ID = Citizenship RIGHT OUTER JOIN vehicle_driver.vehicle\n AS"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "SELECT SUM(Racing_Series )\nLIMIT 541127722893344162908011318252326007536553427432457155054641720698811076047704630874566941048902873357909410052854095196562117863808339127714863884169821470107"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "SELECT SUM(Builder )\n\n\nINNER JOIN (SELECT Builder LIMIT 2)\n\n AS TKALDONAWGJLAT1V2PRAF6ORY5H9R7Q0AK3ZSXECANM4U8E ON EXISTS (SELECT AVG(Builder )\n INNER JO"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "SELECT DISTINCT COUNT(Model )FULL OUTER JOIN (SELECT Racing_Series FULL OUTER JOIN vehicle_driver.vehicle\n\n\n AS PORTLAND ON Model = Driver_ID ORDER BY Citizenship LIMIT 2 OFF"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": "SELECT DISTINCT Vehicle_ID \nINNER JOIN (SELECT SUM(Driver_ID )) AS EXPRESSED ON Build_Year = Name RIGHT OUTER JOIN vehicle_driver.vehicle\n\n \n\n\n AS nanetooledjochennezqyngi"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "SELECT SUM(Racing_Series )\nGROUP BY Model ORDER BY Racing_Series , Vehicle_ID LIMIT 146039070027263618191708352909218957993033122814000566804310032472055659843816906747255964115034"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": "SELECT vehicle_driver.driver.Build_Year LIMIT 1"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "SELECT COUNT(Citizenship )\n\n\nGROUP BY Total_Production ORDER BY Vehicle_ID LIMIT 3561658309833"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "SELECT COUNT(Racing_Series )\nWHERE Builder > (SELECT Power , Racing_Series WHERE vehicle.Builder = 1409)\n\n INNER JOIN vehicle_driver.driver\n\n AS MASSATRONITAJIAN ON Builder > (SE"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "SELECT MIN(Citizenship )\nFULL JOIN (SELECT Power RIGHT JOIN vehicle_driver.vehicle\n\n AS inlandosusanforsenntetzaltekkeltereinjohnstespektneidems\n\n\n AS GUSTAVEZBEDMEMORDSKELV"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "SELECT Vehicle_ID INNER JOIN (SELECT COUNT(Builder ))\n\n\n    \n\n AS DYGHADJUIAURIANZUMLIMMENIGONUSEMEGORIZESELIPTHASISCHEALAZTECETOCARBACODIBOKRIFOLIINOSWITBVATCX"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "SELECT COUNT(Power )\nINNER JOIN (SELECT COUNT(Power ))\n\n   \n\n AS DEVOTEMAN_2K3J6xQHrY9b7gD5ejvFf0kEa8pWdGVyMnqs1zAoUIhBXwGtZRbmC4c"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": "SELECT Builder LIMIT 4494042180004228808907603748153800571422503023451636997570682754392810794612014490290850032014764261909216834172498210085811132520300906660701618762008887295333740946774151400772250"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "SELECT MIN(Citizenship )"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": "SELECT AVG(Builder )FULL JOIN (SELECT SUM(*))\n\n\n AS GRAVE_POWERINGORASALITESUPONLYNOCYPTICALLYARRANGEMENTLENGTHDIFFERENCEWITHOXYGENELIDIUMGLOBEACETAMPAGATE1IOUXENEUTRALEXPERFURTHERUDSILOXCERABLESOL"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "SELECT Racing_Series GROUP BY Top_Speed LIMIT 68727098693670894387833296075239917597712573988252898004401564049791908551126664516202432503058641522831347432472011046215066494214481873656327099373435"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": "SELECT COUNT(Citizenship )\n\n\nINNER JOIN (SELECT Racing_Series , Top_Speed INNER JOIN (SELECT SUM(*), Citizenship LIMIT 2) AS COUNTER ON Driver_ID = 1 INNER JOIN vehicle_driver.veh"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "SELECT COUNT(Racing_Series )\n\n\nGROUP BY Total_Production "
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": "SELECT vehicle_driver.Name INNER JOIN (SELECT Vehicle_ID )\n\n\n AS SELFWALKING ON Model > 47818"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": "SELECT Racing_Series INNER JOIN (SELECT SUM(Citizenship ))\n\n\n  \n\n AS EPTIMETERICAAESSAWYSENOSPEICLESASIANRACIALeirelyaicalxanacrallyasianrian_lk5ntf3zvgcj1q0wm8d2s6h"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "SELECT Racing_Series INNER JOIN (SELECT Name FULL OUTER JOIN (SELECT DISTINCT COUNT(*) AS KIND FROM vehicle_driver.vehicle WHERE Vehicle_ID = 0 ORDER BY driver.Vehicle_ID ) \n\n\n AS SELELECTORIAL ON Model"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "SELECT SUM(Citizenship )\nGROUP BY Name , Power LIMIT 1"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "SELECT vehicle_driver.Citizenship , MIN(Driver_ID )\n\n\n INNER JOIN (SELECT SUM(*), COUNT(*)) AS HANGZYUNWANBOVREKTEX ON Total_Production = 5.00001123200113033264045151339571736"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "SELECT SUM(Racing_Series ) INNER JOIN (SELECT Total_Production ) AS MOLIDATURADAMKITALASAIMDAANFEEPAPACREVASTARABINONISMAENAEDAGUBAHIGICDGUDDRUMBIRENYORAFRILIOCUSTAZLIFNOSHA"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "SELECT SUM(Racing_Series ) AS in RIGHT OUTER JOIN (SELECT Total_Production LIMIT 1)\n\n\n AS STATIONALLY ON Citizenship = 10.4 GROUP BY Vehicle_ID , Driver_ID ORDER BY Racing_Series ,"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "SELECT AVG(Citizenship )\n\n\n INNER JOIN (SELECT DISTINCT COUNT(*) WHERE Driver_ID = 1.143839897728461325352379321533205567746040490852952618486557754799459568583601\n\n\nLIMIT 5782710"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "SELECT vehicle_driver.Citizenship , driver.Total_Production ;"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "SELECT SUM(Citizenship )\nLIMIT 35221958103611"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "SELECT COUNT(Citizenship )\nRIGHT JOIN (SELECT Racing_Series , Vehicle_ID FROM vehicle_driver.vehicle_driver WHERE Model = 0 ORDER BY vehicle.Model ) AS daiplorjndcstbldrpfkjewnthntoa3o4auu1t2enmpti6z5qg"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "SELECT COUNT(Citizenship )\n\n\n  \nFULL JOIN (SELECT COUNT(Model ))\n AS YWJHALBATUVCHADRSTEN_LORDICZEWICKETY1EAAACXG4A8RAK7AFPIFQ2IT5APDR3F6IAAMONIECINCAS9"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "SELECT SUM(Racing_Series )\nFULL JOIN (SELECT * FROM vehicle_driver.vehicle) AS DRIVERIDINAL ON Vehicle_ID = vehicle.Vehicle_ID GROUP BY vehicle_driver.vehicle_driver.Name ORDER BY vehicle_driver.driver.Driver_ID LIMIT 1;"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT *) AS RUSCHZINYJOCAUNKUBAHASMIMPENCATIRDANVOLLEFETBOULXIBARABADOSQEDISMABOIJONACHTOTESITALICIATASTECEELPHENTERRISTOROGIKIWILSONOBLOBJAYAKU"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "SELECT COUNT(Racing_Series )\nFULL JOIN (SELECT Racing_Series , Driver_ID )\n\n AS SESKIRISONDEYGARDVENDALEMMAZINETIMULGAZAJOHANALARROPOULAHOLEDATUROSIASNANDAMPELUOCHBAL"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "SELECT vehicle.Total_Production FULL JOIN (SELECT Vehicle_ID ORDER BY Top_Speed LIMIT 3)\n\n\n   \n\n AS EMAILBOXMULTIPLYGEDAYESKANVJHINIALIGURUAZETTAASOLLBARFON"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "SELECT Racing_Series GROUP BY Builder LIMIT 4493725784517481815271236131439595860792870554098474433163856356989834308511227766549957245041"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "SELECT SUM(Citizenship )LIMIT 0;"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "SELECT COUNT(Racing_Series )\n INNER JOIN (SELECT Racing_Series )\n\n\n  \n\n AS BOBLEGATORPILOTYHOPFANDORUJKZUKRAYSVIMAISAYASAMQEMINROUETTEEDESMIDENEVIETHALAGOCONCAT"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "SELECT vehicle.Total_Production \nFULL JOIN (SELECT Vehicle_ID )\n\n AS B2A3B6AA7D63104664752876279042204817230129772230571174134435698836005950956560454079265625675539058"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "SELECT DISTINCT Vehicle_ID RIGHT OUTER JOIN (SELECT Driver_ID FROM vehicle_driver.vehicle WHERE driver.Driver_ID = driver.Vehicle_ID ) AS numberDeregisterdaterCancellationDateTimeToCurrentDay ON Vehicle_ID = 1;"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "SELECT SUM(Assessment )\nGROUP BY Date_of_Answer ORDER BY Date_of_Answer LIMIT 1 OFFSET 2"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "SELECT COUNT(Date_of_Answer ), Date_of_Answer , Assessment ;"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "SELECT Home_Phone , Satisfactory_YN , Middle_Name ;"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": "SELECT Type_of_Question_Code \nFULL JOIN (SELECT COUNT(Date_of_Answer )\n\n INNER JOIN online_exams.Exams AS innee2cnvhcntr ON Satisfactory_YN = 1 INNER JOIN online_exams.Exam"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "SELECT AVG(Date_of_Answer )\nWHERE Middle_Name = (SELECT * FROM online_exams.Exams WHERE Subject_Code = '10');"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "SELECT Exam_Date INNER JOIN (SELECT Home_Phone RIGHT OUTER JOIN online_exams.Exams AS hvndlzr\n\n\n AS cnnc3wp7d1f5qE9gDVy4xA2YC6ZQOiG8jbFJh"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "SELECT Last_Name INNER JOIN (SELECT Valid_Answer_ID )\n\n\n AS toYlrKVZUuDgM9cHF3h1pC8b5XvBjJPwT2xWQAAq7yfz6Gt4oOaNmLdCUiEtf0Rk"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "SELECT Home_Phone RIGHT OUTER JOIN (SELECT Exams.Date_of_Answer FULL OUTER JOIN online_exams.Exams AS IWXJm3M1F0NnZc4pjYb7dqkV9h5G\n\n\n     "
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "SELECT SUM(Question_ID ) AS R\nFULL JOIN (SELECT Exams.Student_Address )\n\n AS POCOLYCHEDRADORIAN ON First_Name <3 INNER JOIN online_exams.Questions\n\n AS RFULLJ"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": "SELECT online_exams.Home_Phone INNER JOIN (SELECT * FROM online_exams.Exams WHERE EXISTS (SELECT Home_Phone ) ORDER BY Email_Adress , Comments ) AS nONE ON Satisfactory_YN = 1 ORDER BY Type_o"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "SELECT Type_of_Question_Code INNER JOIN (SELECT COUNT(Last_Name ))\n AS EAST ON Date_of_Answer = 0.1 LIMIT 4902316889700060404801099772830649899272406368549182517674565128926117515"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "SELECT SUM(First_Name ) LIMIT 523583715782717097321613012211885020452925003475368530285724690547763977443879461903664912894062127141867483310090654552472670743553248643710942756152395176058"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "SELECT AVG(First_Name )LIMIT 2 OFFSET 3;"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": "SELECT DISTINCT SUM(Date_of_Answer )\n\n\n  \n\n INNER JOIN (SELECT Type_of_Question_Code , Question_Text FULL OUTER JOIN online_exams.Students AS uMVJiXoFf"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": "SELECT COUNT(Cell_Mobile_Phone )\n                      \nRIGHT OUTER JOIN (SELECT AVG(Assessment ), Exams.Satisfactory_YN , Satisfactory_YN ) ON Cell_Mobile_Phone = 0;"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "SELECT AVG(Assessment )\nFULL OUTER JOIN (SELECT Gender_MFU , Last_Name )\n\n AS ROLESISLEINCASTER ON Comments > Exam_Date INNER JOIN online_exams.Students\n\n AS SIDENSSEMECTA"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "SELECT AVG(First_Name ) RIGHT OUTER JOIN (SELECT Home_Phone , Valid_Answer_ID FULL JOIN online_exams.Student_Answers\n\n\n AS andeCptoniov ON EXISTS (SELECT Ho"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "SELECT COUNT(Date_of_Answer )\nINNER JOIN (SELECT *)\n\n AS IANNAH ON Students.Assessment > 2;"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "SELECT Home_Phone RIGHT JOIN (SELECT Exams.Exam_Date INNER JOIN online_exams.Exams ON Middle_Name <Assessment LIMIT 2)\n AS NndllwjgntpMIDtCf1BzGvQhqE"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "SELECT Home_Phone WHERE EXISTS (SELECT COUNT(First_Name ) AS _Y) RIGHT OUTER JOIN online_exams.Questions\n\n\n AS iDfv4cG7aKwLq3I2pJdH1gF"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "SELECT COUNT(Gender_MFU )"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": "SELECT AVG(Assessment )\nFULL OUTER JOIN (SELECT Exam_Date , Last_Name INNER JOIN online_exams.Questions\n\n AS IF ON Assessment = Middle_Name )\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": "SELECT AVG(First_Name ) RIGHT OUTER JOIN (SELECT Home_Phone INNER JOIN online_exams.Questions\n\n\n AS WYCHASADIMA AS DAGGAWGANHAONVAPMHOMABUKARBAOSNAIETCALAMB"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": "SELECT Home_Phone GROUP BY Assessment ORDER BY Exam_Date LIMIT 102067405025571360337565392200641811353080374832151638246946141778275862102301896192656299902127728744494348868457049"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "SELECT *\nINNER JOIN (SELECT Last_Name )\n\n AS MALFYGIAA ON Home_Phone = 1.4 GROUP BY Questions_in_Exams.Middle_Name ;"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": "SELECT Type_of_Question_Code WHERE Middle_Name =\n (SELECT COUNT(*) FROM online_exams.Questions WHERE EXISTS (SELECT Valid_Answers.Date_of_Answer ) ORDER BY Type_of_Question_Code LIMIT 4)\n\n\nLIMIT 10;"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "SELECT Home_Phone , COUNT(Home_Phone ), MIN(Cell_Mobile_Phone ), Last_Name ;"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT Home_Phone )\n\n AS OZHONAANASAMORIANANSJAYGUNUEDENACALATRICITBONEQUEAURAYNAXINGBAOXCUBEJAOGELISMETHICIAKAPODAIIDOOTILFUKHAIETLAKUTUMIMOSOCRINES"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "SELECT Exam_Date \nINNER JOIN (SELECT Home_Phone RIGHT OUTER JOIN online_exams.Exams AS LESSOR ON online_exams.Date_of_Answer = 1)\n\n\n  \n AS WERGENDEXAMELISQUELZWKVHJ"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "SELECT Gender_MFU LIMIT 1660640022253436144823755713557828805812339810292427697050386890261637541935961"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "SELECT Home_Phone FROM (SELECT * FROM online_exams.Students) AS t1;"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "SELECT AVG(Assessment )\nINNER JOIN (SELECT Exams.Date_of_Answer )\n\n  \n\n AS IANALIZED ON Type_of_Question_Code = Valid_Answer_Text FULL OUTER JOIN (SELECT Exams."
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "SELECT Gender_MFU INNER JOIN (SELECT First_Name RIGHT OUTER JOIN online_exams.Valid_Answers\n AS WOLLXIAZYD AS NONMETHUNDAELKW8GAAHHQC6P0I4N9B5F"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": "SELECT Exam_Date RIGHT JOIN (SELECT SUM(First_Name ) \nRIGHT JOIN online_exams.Students AS Students ON Last_Name = 'Yayy' ORDER BY Home_Phone , Middle_Name , Cell_Mobile_Phone , D"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "SELECT Last_Name RIGHT OUTER JOIN (SELECT MAX(Last_Name ))\n AS TEMPABLE ON Home_Phone = Satisfactory_YN ;"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "SELECT Home_Phone , Last_Name RIGHT OUTER JOIN (SELECT Email_Adress )\n\n\n  \n\n AS VOTE ON Satisfactory_YN = 4.503957642746014815117937134445877032161058763084122538145536"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "SELECT SUM(Home_Phone )GROUP BY Cell_Mobile_Phone ORDER BY Assessment LIMIT 1"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": "SELECT Valid_Answers.Valid_Answer_Text , Assessment , Exam_Name RIGHT JOIN (SELECT Last_Name )\n\n\n AS youkrijstleischesriftenhirfeigertzagrauswurfgenbeiordeiehrseittegendenre"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": "SELECT Gender_MFU WHERE Home_Phone = Exams.Exam_Date RIGHT JOIN (SELECT COUNT(Cell_Mobile_Phone )) AS fSELECTGTIMER1A0RdW5XKYQ2n6wfZV3c7U8Eq4B9"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "SELECT Home_Phone INNER JOIN (SELECT Last_Name )\n\n\n   \n\n AS EclatHemLpFnUVjvcDwQXl1f3yWJ9gz7M0Bq4o8GxA10CZPkbIhY2TdK5EiRtN"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "SELECT *\nINNER JOIN (SELECT MAX(Addresses.payment_method_code ) WHERE Addresses.payment_method_code > 800061008001412\nINNER JOIN (SELECT MAX(Addresses.payment_me"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "SELECT address_id , order_quantity INNER JOIN (SELECT *)\n  \n\n AS _VARIABLEIDDDRESAQx5H1Yj8KzMp3JFhcEaW6f4oZl2k_qXe0mwC9iPtGdR7bUu"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": "SELECT Products.customer_id WHERE address_id = (SELECT COUNT(address_id ) AS cCount, SUM(Addresses.address_id ) FROM customers_and_orders.Products)\nINNER JOIN customers_and_orders.Products ON Customers.product_name = Customers.product_"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "SELECT SUM(Customer_Orders.customer_number )\n\n\n INNER JOIN (SELECT MIN(Addresses.product_price ), address_id ) AS DEVJEMBERENGENSKETFORDEGAMMETHANODIMYCOPYRIGHTLIT"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "SELECT COUNT(Products.product_id )\nINNER JOIN (SELECT SUM(*)) \n\n AS LANDWATTSONGUSFREXRENEGUNZQUEANITARIANALEXEMOSURYHASISESNAPARTORIALTECIPLESYSOCENTRICOLVULATECAMIDONEIOM"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "SELECT COUNT(product_id )\n INNER JOIN (SELECT product_id , order_status_code FROM customers_and_orders.Order_Items WHERE Order_Items.order_quantity = 1 ORDER BY product_id LIMIT 15) AS COUNT1 ON EXISTS (SELECT customers_and_orders.Products.product"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": "SELECT address_id , Products.address_id ;"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "SELECT MIN(Customer_Orders.product_name )LIMIT 1 OFFSET 2"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT SUM(Addresses.product_id ))\n\n\n   \n\n AS SEZALESERXISOSYxASOLVELEXi4P1D2FRE3JBAAWQ7a6rf8q5N0nUdTbG9"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "SELECT Products.address_details WHERE Addresses.customer_name = 'D:\\Users\\bryce \\AppData%3A50~1st000\\.txt' RIGHT JOIN customers_and_orders.Customers\n\n\n AS CUTWORD AS wahltenhouttjn"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": "SELECT DISTINCT SUM(Customer_Orders.payment_method_code ) ORDER BY Customers.product_name LIMIT 3200000051006161180990027368004026000300016044754835290315557823543717191847884612205039077"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "SELECT DISTINCT SUM(Customer_Orders.customer_name )\nINNER JOIN (SELECT AVG(Products.address_id ), COUNT(*)) AS iDDRESSLATER ON EXISTS (SELECT SUM(Addresses.customer_name"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "SELECT AVG(Customer_Orders.customer_number )\nINNER JOIN (SELECT SUM(Products.order_item_id )\n\n INNER JOIN customers_and_orders.Customer_Orders ON order_status"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": "SELECT SUM(Customer_Orders.address_id )\n\n\n    \n\n INNER JOIN (SELECT COUNT(*)GROUP BY order_status_code , customer_phone ORDER BY Products.address_id )\n AS EKEDDELT"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "SELECT order_status_code RIGHT JOIN (SELECT SUM(Addresses.customer_name )RIGHT JOIN (SELECT DISTINCT Order_Items.customer_id , address_details )\n\n\n"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "SELECT order_status_code , COUNT(Customer_Orders.product_name )\n\n\n  ORDER BY product_name LIMIT 1"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "SELECT order_status_code  \nLIMIT 3333001216"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "SELECT AVG(Addresses.customer_name )\n\n\nRIGHT JOIN (SELECT SUM(*) INNER JOIN customers_and_orders.Products AS SELECT ON EXISTS (SELECT AVG(Addresses.customer_name ) FROM customers_and_"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": "SELECT address_id , address_id , address_id , order_id ;"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": "SELECT SUM(Addresses.customer_id )\n\n\nRIGHT JOIN (SELECT AVG(*) AS D2, COUNT(address_id ), MIN(address_details )) ON address_details = 0 ORDER BY address_details LIMIT 3;"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "SELECT SUM(Products.product_id )\nLIMIT 845252749330112170962822234615653730263220394047431824081357365855894834879959359897807816641405561910857742606325869844594488297324768509570457525"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": "SELECT COUNT(order_status_code )\n INNER JOIN (SELECT SUM(*) WHERE address_id > customers_and_orders.Addresses.payment_method_code LEFT JOIN (SELECT COUN"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "SELECT order_status_code ORDER BY Products.payment_method_code LIMIT 1 OFFSET 2100031232001123131514204055379900321946292701303324791857759843254465393889416064697890288870368049"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "SELECT DISTINCT SUM(customers_and_orders.product_price )\n\n\n   \nINNER JOIN (SELECT MAX(*) RIGHT OUTER JOIN customers_and_orders.Products ON Customers.product_price"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "SELECT MIN(Customers.payment_method_code ) LIMIT 0"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "SELECT MIN(Customer_Orders.product_id )"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": "SELECT SUM(Products.product_price )\n INNER JOIN (SELECT COUNT(Products.product_price ))\n\n    \n\n AS EASTEDINGKERSHIP ON address_details = 858803216231350403622141728"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "SELECT order_status_code \nGROUP BY Addresses.payment_method_code LIMIT 2100726330064774432271815204550232567795817363895653040541655842275194321014946246659281314693485390732011112"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": "SELECT *\nINNER JOIN (SELECT COUNT(Addresses.product_name )) AS PTRUCEBASE1Y8X7ET0V4L2Z3WGQJEKFPITP9H5NHSF6ASSPOCRPTEXATIRTYCADDRDRAKEFRTINDSECM"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "SELECT SUM(address_id )\nWHERE Addresses.customer_phone > 44910486713111777403912193225996526205750608022363489744235470882755167942157569688601337445005314381873\nRIGHT JOIN ("
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": "SELECT order_status_code INNER JOIN (SELECT COUNT(Addresses.product_id )) AS HIDDENEXTSYSTEMHENDSISSRFIFTEREXQW8gB1h2wPzZsV6o5cDbUJjkqOx9iRdSv3a0C7u"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "SELECT DISTINCT SUM(Addresses.product_name )"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "SELECT AVG(Addresses.address_id )\n INNER JOIN (SELECT MIN(*), SUM(Products.customer_id ))\n\n AS DYTHON ON Customer_Orders.order_id = 5784779\n INNER JOIN (SEL"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "SELECT Products.customer_id \nFULL JOIN customers_and_orders.Customer_Orders ON customer_name = 'Honeymoon' ORDER BY customers_and_orders.customer_id ;"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "SELECT SUM(Customer_Orders.address_id )\nINNER JOIN (SELECT Products.customer_phone , COUNT(*))\n\n AS NEGROLLANEDA ON EXISTS (SELECT SUM(Customer_Orders.add"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "SELECT order_status_code , address_id INNER JOIN (SELECT SUM(Addresses.payment_method_code )\n   \n\n GROUP BY Order_Items.order_status_code , address_id LIMIT 10498817148972218"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "SELECT MIN(Customer_Orders.customer_id )\n\n\n INNER JOIN (SELECT Order_Items.customer_id )\n  \n\n AS CUSTOMERALISTSCHIPFILLED ON EXISTS (SELECT Products.product_name FROM customers_and_orders."
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": "SELECT SUM(Addresses.address_id )\n\n\n   \n\n INNER JOIN (SELECT MIN(Products.customer_name ) AS ENCODERNAME, Products.product_name , product_price FULL JOIN customers_and_orders"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "SELECT SUM(Customer_Orders.customer_name )\nINNER JOIN (SELECT MAX(Customer_Orders.customer_id ))\n\n AS OLYDICJANITAIUSKOSATTOYSYASAKUCHSUVIDCULTTALOGARIZOLUMMADIOMONZHIMRIFBUL"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "SELECT order_id INNER JOIN (SELECT Products.payment_method_code ) AS LEOQFZJDA6Y ON EXISTS (SELECT payment_method_code FROM customers_and_orders.Customer_Orders ORDER BY Customer_Orders.product_id , Pro"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "SELECT order_status_code ORDER BY Products.payment_method_code LIMIT 21139131846804740732714236722979954704400263569191517371620321058496459607543258568555057797434657788294812"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "SELECT order_status_code ;"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": "SELECT Products.product_name LIMIT 53501131419081"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "SELECT order_id \nINNER JOIN (SELECT MAX(Products.payment_method_code ), Products.payment_method_code )\n\n AS for ON Customers.order_id \n\n<> customers_and_orders.payment_method_code INNE"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "SELECT order_status_code WHERE address_id = (SELECT * FROM customers_and_orders.Addresses WHERE order_id >= 1 ORDER BY Customer_Orders.customer_id );"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "SELECT COUNT(Customer_Orders.address_id )\nINNER JOIN (SELECT MAX(customers_and_orders.address_id ), SUM(*), MAX(*)) AS EXIF ON Customer_Orders.address_id = customers_and_orde"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "SELECT COUNT(Customer_Orders.customer_name )\nINNER JOIN (SELECT SUM(*) AS LENGTH, customer_id INNER JOIN customers_and_orders.Order_Items ON Customer_Orders.order_id = Customer_Orders.customer_id ORDER BY Order"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "SELECT COUNT(address_id )\n  \nINNER JOIN (SELECT MAX(customer_name )) AS SINGENLYDYLTHAMICARLSHIMESONKITTERPROOFATMAYRELLISJOHNSETRIDORQ2PADRIANUSUMNODUACCHAPALASIAVENTER"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "SELECT MIN(Customers.customer_id );"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "SELECT order_status_code , Products.payment_method_code , payment_method_code ;"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "SELECT order_status_code , address_id INNER JOIN (SELECT SUM(address_id ))\n\n\n AS toZz2pqx0lFyGQg5Ae6f8h3kDjXHYbPtKwvVuWn7E9sL1B4"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": "SELECT order_status_code ;"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": "SELECT COUNT(product_id )\n\n\n INNER JOIN customers_and_orders.Products AS customers ON Products.order_date = 1 ORDER BY Order_Items.customer_name LIMIT 500;"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "SELECT Order_Items.payment_method_code , order_item_id INNER JOIN (SELECT COUNT(product_name ) FROM customers_and_orders.Customer_Orders WHERE product_name = 'A' ORDER BY Order_Items.payment_method_code , or"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "SELECT order_status_code ORDER BY address_id , Customers.payment_method_code LIMIT 118840383918320136557824791123223380662316141720561049473446114468585974641213547542157745253526"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "SELECT COUNT(Customer_Orders.customer_number )\nINNER JOIN (SELECT MAX(*), SUM(*), AVG(*))\n\n AS EXAMPLES ON EXISTS (SELECT customers_and_orders.order_item_id , order_item_id )\nINNER JO"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "SELECT Products.product_name LIMIT 47601331846108898165728303722586085291327871936177965474966552638507720547542111534709632142544126782175487480730078842463257644539533583994043104633"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "SELECT AVG(Customers.customer_id );"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "SELECT DISTINCT COUNT(Customers.customer_name )\nLIMIT 10208050289040896070782979166817982160394501151399243619677577883800461087321112585966863057441448731833541009764558326000252722375006237356534202850"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT SUM(Addresses.product_id ))\n\n\n AS EXBLISHED ON Products.address_details >Customers.product_id INNER JOIN (SELECT SUM(Add"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "SELECT Addresses.address_id FULL JOIN customers_and_orders.Customer_Orders ON Customer_Orders.customer_id = Customers.product_name ORDER BY order_id LIMIT 1001;"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT COUNT(Addresses.product_name ))\n\n\n AS DIGGINISTAJONM3LLF1Q6l9j4mVZa5q0tfHXRzsx2bWkLYv7hC8u"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "SELECT MIN(Customer_Orders.address_id )\nINNER JOIN (SELECT SUM(Customers.address_id )) AS HUCEBONIDENDEUTER2NAMEX1FIFSCALEY0HELPURITATOLUNIXEULSALOCMEMORY3CHARSRADICHEIGHT4D"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": "SELECT DISTINCT COUNT(Customers.customer_name )\nINNER JOIN (SELECT DISTINCT MAX(Products.product_id ), SUM(Products.product_id ))\n\n  \n\n AS incelntcustomerJOCDUTNECTTENCTYWELKC"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": "SELECT Products.payment_method_code FULL OUTER JOIN (SELECT COUNT(order_id ) AS ORDERbyID, SUM(*) WHERE customers_and_orders.product_id = 'C:\\Users\\UserName\\<username>&PaymentOrderCount<1>\" , SERVER[ \"pq\" ], C"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "SELECT SUM(Customer_Orders.customer_phone )\n\n\n INNER JOIN (SELECT Products.customer_phone ) AS ENCONNTWOLFEDDINGLLLALPURCEUVTOXERADYMEMENISTSKUNJOSESC"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "SELECT COUNT(Customer_Orders.customer_id )\n INNER JOIN customers_and_orders.Products ON payment_method_code = (SELECT Products.product_name FROM customers_and_orders.Products WHERE product_type_code <= Customers.customer_id ) ORDER BY cust"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "SELECT Order_Items.customer_id INNER JOIN customers_and_orders.Customers ON product_name = 'Spicy' ORDER BY Products.product_type_code LIMIT 1;"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "SELECT MIN(Customer_Orders.customer_id )\n\n\n INNER JOIN (SELECT COUNT(*)GROUP BY Products.address_id , Customers.address_id , customers_and_orders.address_id )\n\n\n AS A"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "SELECT DISTINCT SUM(Addresses.customer_id )\nINNER JOIN customers_and_orders.Customer_Orders AS CustomerList AS ELSE ON address_id = customers_and_orders.Order_Items.address_id ORDER BY order_quantity ;"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "SELECT Addresses.address_id WHERE address_details < address_details ;"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "SELECT Products.payment_method_code \nINNER JOIN (SELECT SUM(Addresses.address_details ))\n\n AS DANETARES ON EXISTS (SELECT Products.payment_method_code \nINNE"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "SELECT DISTINCT SUM(Addresses.product_price )\n INNER JOIN (SELECT Products.product_price )\n\n AS THE ON Addresses.product_price = 2GROUP BY Customers.product_price ;"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT SUM(Addresses.address_id )\n\n\n  \n\nWHERE Order_Items.product_name > address_id RIGHT JOIN customers_and_orders.Products ON o"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT SUM(Addresses.address_id ))\n\n\n   \n\n AS VB ON Customers.address_details <-100000006344027182420504632162560293510331114132215"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "SELECT Products.payment_method_code GROUP BY Order_Items.customer_id LIMIT 154960503499280023421511193930223610671890683717895228785727551624741301389746145969449333754548762685296488582040"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "SELECT SUM(Products.product_id )\nINNER JOIN (SELECT Products.product_name )\n\n AS VESTIGATIONJOLITASVACZATYONBRIOSENKANOVLYSUNMOTODIAHURIANISPUBAUFETTOGIDIUSCULIMA"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": "SELECT Products.product_name , order_quantity ;"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "SELECT SUM(Customers.product_id )\nINNER JOIN (SELECT MAX(*)GROUP BY Products.product_id )\n\n AS DEBZONALSKIDENBERTATOSDUBSKUTIAJETTOKIOPVARMABAIMDAIADNACISEDRIGUEHEMM"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "SELECT DISTINCT SUM(Customers.product_name )\nINNER JOIN (SELECT Customers.product_name )\n\n  \n\n AS RENHOLSTAGGEDLINGJASMON1WUNKZXD6A2BQ0FU4V5C7Y"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": "SELECT Products.payment_method_code WHERE address_id = 1\nINNER JOIN (SELECT SUM(Addresses.product_id ) RIGHT JOIN customers_and_orders.Products ON order_item_id"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "SELECT MIN(Customer_Orders.payment_method_code ) ORDER BY Customers.product_price , Order_Items.order_date LIMIT 1;"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "SELECT AVG(Capital )\nLIMIT 23036292737234414262815337816138818121170355587170710257564570065476399031273845490460684069854801463472255673919096115669521505247225853208643730278090305265023162914"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "SELECT AVG(Address ) RIGHT JOIN region_building.region ON building.Building_ID = (SELECT *)RIGHT JOIN region_building.region AS hhjp1tkwc6oORFZUWAA3BJ4KGOC2PYQ0V"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "SELECT AVG(Address ) RIGHT OUTER JOIN (SELECT DISTINCT COUNT(*))\n\n\n AS STALFORDENKEEPEREDRYINGMANTACLESPONTIESYSTEMJUMPUNITERIDUSTSWATERPROPOSISODEUTRIZESTHIRSTONECRITEHOBOLINENUCILORINAT"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "SELECT COUNT(Address )\nLIMIT 11"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "SELECT AVG(Address )\n\n\nLIMIT 1120457525332214206501191855171310281226463635341606304050874437152902000274216070431003999574785246023797456640078113860052005966684856167675009099078778094223909553345"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": "SELECT DISTINCT COUNT(Address )\n INNER JOIN (SELECT Region_ID )\n\n AS STENZYXVANIAF3U8W5J1D6P9M13H4GQ16K2B0C7BL14EF194846E99015885ED5739A503664285329541067"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "SELECT COUNT(Population )INNER JOIN (SELECT COUNT(Region_ID )ORDER BY Name LIMIT 383218292715261388981028606534890416304067472025381944222468485421013617057743117537504908"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "SELECT Number_of_Stories \n\n\n INNER JOIN (SELECT SUM(Area ) ORDER BY Region_ID LIMIT 3012910493057362838432416192579205517231812443937776588335898266903114027875053146789062147"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "SELECT Region_ID LIMIT 30003816391219157829484030571023462513331714206445009828874401794909622907734695650759907908411542805559766766702789735821147686332182497607338587839431926164054256512"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "SELECT SUM(Name )\nRIGHT JOIN (SELECT Name , Population LIMIT 6187828) AS SOFOLISH_JOYTHYSHALADY1D7C4A5AC0B2E1665171038132742NAA013680394675496776255814331256115026557940"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "SELECT Region_ID INNER JOIN (SELECT COUNT(Address ))\n\n\n AS Tseleaalujaarulanjungisandhimlutriosatapolilopamtibumiarindiobotirfusacaschianbethunetgelenigitsturukinipmiknak"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "SELECT SUM(Address )\nFULL OUTER JOIN (SELECT Address , Building_ID FROM region_building.region WHERE Region_ID = 4678805001) AS name ON building.Building_ID = Capital GROUP BY Name LIMIT 3;"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "SELECT Name INNER JOIN (SELECT SUM(Building_ID ))\n\n\n  \n\n AS EPRJKZ1L3QWYS9DGR6F8X4P2HMC7VYEJBASC5T0AJPECRISTSKRNLYIAACRAONIOSUAVENIFBELADATALIT"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": "SELECT AVG(Name )RIGHT JOIN (SELECT COUNT(*) RIGHT JOIN region_building.region\n\n\n AS VIRACLES ON EXISTS (SELECT Number_of_Stories , AVG(Region_ID ), SUM(Address ),"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": "SELECT DISTINCT AVG(Area )\nFULL OUTER JOIN (SELECT SUM(*) ORDER BY Number_of_Stories , Capital , Population LIMIT 98800170114750007316047202629226764288025325044154836305810"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "SELECT COUNT(Population ) GROUP BY Address LIMIT 3180002 OFFSET 220000175401040463601137824232226641944687512155411421670990876967853250272957390320344758742549734572192143555873897602856187905"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": "SELECT DISTINCT COUNT(Capital ), SUM(Completed_Year ), Name RIGHT JOIN (SELECT MAX(*))\n\n\n AS LITTEREDRATIONSHIPETWIDTHATTEELPASTLEHADARTSONMECKALDOWNTCHAPTEMBAMMAYSYNDISCZJ"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "SELECT COUNT(Population ) RIGHT OUTER JOIN (SELECT Population ) AS TAIGALAURLASJENTAITORULYAMARIAVAGATZICACONOMODOPIPOSCISINUTIVOCIDOGAINOTTOEUCENTRICFACTORYHUBOQUETIOUTIGU"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "SELECT *RIGHT JOIN (SELECT Number_of_Stories )\n\n\n AS EAST ON Building_ID <Number_of_Stories FULL OUTER JOIN region_building.region AS oEENISANOIDWJASORIANGALSTREBINGCKFONT"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT SUM(Population ) RIGHT OUTER JOIN region_building.region\n\n AS lHjhndktr7c3q4dZ2mXBV5z0FKD1sJNxYvR9QfC"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "SELECT SUM(Capital ) AS if INNER JOIN (SELECT MAX(*) ORDER BY Completed_Year , Population LIMIT 2 OFFSET 3413362833012327673730446075554399185438391617507834204748122925"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": "SELECT COUNT(Capital ), SUM(Number_of_Stories ), Number_of_Stories , Population , Building_ID GROUP BY Region_ID ORDER BY Region_ID ;"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "SELECT COUNT(Capital )\nINNER JOIN (SELECT MAX(*) ORDER BY Name LIMIT 364001615305050020000000310093555432036754007442813321133806007007729015714084748229834464065896080045271817996784263879121907"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": "SELECT COUNT(Capital )FULL OUTER JOIN (SELECT MIN(Area ))\n\n\n AS SENTiDljfHUhLgPKZvdBpW3q7s5w6QzT_nXVkC8fr4JGt0x2m9Mhz1RbNbmAAoFrYaE"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "SELECT SUM(Capital ), Capital , Address LEFT JOIN (SELECT Population FULL OUTER JOIN region_building.region\n\n\n AS andGUHELSINGeAASh1YfBXZkKQC4qPt6zM5jE"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": "SELECT Building_ID INNER JOIN (SELECT * FROM region_building.region WHERE Region_ID = 'A1' GROUP BY region_building.Building_ID ) AS fds ON building.Region_ID = 0 ORDER BY building.Building_ID , Building_"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "SELECT Building_ID INNER JOIN (SELECT Number_of_Stories )\n\n\n   \n\n AS CHIEFEDONESA ON Capital < 1.5 RIGHT JOIN region_building.region AS member ON building.Region_ID = 0;"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "SELECT AVG(Area ), SUM(*)FULL OUTER JOIN (SELECT *)\n\n\n  \n\n AS WITH ON Population = 1.50040000404401222043100532100000081828704927009050348003RIGHT JOIN region_building.region AS"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": "SELECT COUNT(Address )\nFULL OUTER JOIN (SELECT Population , SUM(*) ORDER BY Region_ID LIMIT 0 OFFSET 1010418290914498828332265641525552775805750249899409570776694114516054885232044605813"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "SELECT AVG(Area )\nINNER JOIN (SELECT Region_ID , SUM(*) FULL OUTER JOIN region_building.region ON Completed_Year = 7117067771827106439129099087338521 RIGHT JO"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "SELECT DISTINCT COUNT(Number_of_Stories )\nINNER JOIN (SELECT Region_ID FULL OUTER JOIN (SELECT Population FROM region_building.region) AS p1 ON region_building.Building_ID = 1 ORDER BY Populatio"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "SELECT AVG(Name ) INNER JOIN (SELECT MIN(Building_ID ))\n\n\n  \n\n AS LETHARIAAIANHUJIMHAATISACKADAPATHANYAMOSABETASITDIPILFURTTALICXRQLMCMAZGRIYSAKAZNUTIOROLINOCBAGVIGC"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "SELECT COUNT(Number_of_Stories )\n\n\nRIGHT JOIN (SELECT * FROM region_building.region, region_building.region) AS cnt1 ON Region_ID = Region_ID ;"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "SELECT Building_ID INNER JOIN (SELECT SUM(Building_ID ))\n\n\n AS ZQHIAKJLVGZY4AM9WEN3A5AL6AS2AFFRXFAAATLYANC8AD7IOMEETISIFOLTOCUMOIRDJD0NEMITYSBARCHMUBA"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "SELECT SUM(Capital )\nINNER JOIN (SELECT Region_ID )\n\n AS SEYJODAEMUNDHAATADASANPILICANAAPRABAKHARTAAMAKWENZEDELLANDMAYBALAGCACAAFIRDAIYAARAIAKINIMOITAIOSULGONISUWAQ"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "SELECT Number_of_Stories WHERE Address =Name RIGHT JOIN (SELECT COUNT(Building_ID )RIGHT OUTER JOIN region_building.region\n\n\n AS DEVILESSLYASTERALE AS CONCEITEDABILITY ON Number_of_Stories >"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "SELECT COUNT(Capital )\n\n\nRIGHT JOIN (SELECT Population FROM region_building.region) ON Region_ID = 1 GROUP BY Name LIMIT 10;"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "SELECT Population FULL JOIN (SELECT COUNT(Population ))\n\n\n AS IEMI1K3D0YVQHFZ6FS9X4A8E7RYSG5B_lwgJbWvsM2pkdLzmjtxCqfMKhOuNUoPc"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": "SELECT COUNT(Address )\n\n\n    \nLIMIT 858377717671518283336120114102740793935851300347511642329574876452084305949654488508094221609089647190438259873249099921504321472856672192609517863774157770673318"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "SELECT Building_ID INNER JOIN (SELECT Number_of_Stories )\n\n\n   \n\n AS ENTRYBARHJANUIAESONLYSSORISINGWILLICITALSETIMATE1YOSENSOLV3A0NDG7KPTH2MAD9STRAZL4EALBA5DYS8RQ"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "SELECT COUNT(Customer_ID )\nFULL OUTER JOIN (SELECT * FROM government_shift.Channels) AS s1 ON Service_Details =government_shift.Services.Services_and_Channels_Details GROUP BY Analytical_Layer_Type"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "SELECT Integration_Platform.Status_Code RIGHT JOIN (SELECT MAX(*)FULL OUTER JOIN (SELECT COUNT(*), Pattern_Recognition FROM government_shift.Services INNER JOIN government_shift"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "SELECT COUNT(Integration_Platform.Integration_Platform_ID )\n\n\n INNER JOIN (SELECT COUNT(Analytical_Layer_Type_Code ), Analytical_Layer_Type_Code )\n AS ALBULGATION ON Status_Code = 1"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "SELECT Integration_Platform_ID INNER JOIN (SELECT *)\n\n\n  \n\n AS is ON government_shift.Analytical_Layer.Status_Code > 2GROUP BY Customers_and_Services_Details LIMIT 1"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "SELECT SUM(Analytical_Layer.Integration_Platform_Details )\n\n\n INNER JOIN (SELECT Pattern_Recognition , Analytical_Layer_Type_Code )\n\n AS TheAnalytical_LayerOnDemandPllpclonacxor1c3r"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "SELECT Integration_Platform_ID INNER JOIN (SELECT SUM(Analytical_Layer_Type_Code ))\n AS aFIFE0R2H1KYXQ6Ggj5f3J8kV7iqzZxO9oI4NhvbUuDtCpB"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "SELECT MIN(Customer_ID )\n INNER JOIN (SELECT SUM(Pattern_Recognition ))\n\n AS LANDEDGINGERZEROLLYTOADVANCESJOLTSIMMEDIAHOTONAPURANDAUKAACAMAGITENEISALIDOROSWATTELLIEQDYSINFREET"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "SELECT SUM(Integration_Platform_Details )\n\n\nGROUP BY Customer_Details "
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "SELECT Integration_Platform.Analytical_ID INNER JOIN (SELECT COUNT(Integration_Platform_ID ))\n AS SEDGENETERISANENBERG ON Pattern_Recognition = 1.813398827209321 INNER JOIN (SELECT C"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "SELECT Pattern_Recognition INNER JOIN (SELECT AVG(Analytical_Layer_Type_Code )\nWHERE Customers.Channel_Details < 1 GROUP BY Services.Pattern_Recognition LI"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": "SELECT DISTINCT COUNT(Analytical_ID )"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": "SELECT Pattern_Recognition GROUP BY Analytical_ID ORDER BY Channels.Analytical_Layer_Type_Code LIMIT 83677010004876994400881724805720388567227845337949282616343084131114122918"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "SELECT COUNT(Customer_ID )\nLIMIT 100000000060000106667128848360057100000003000000000000000868381875402635283345703901279829507946258944803478652004909066060015371777142052134743239799195330740005000072956785165848551064"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "SELECT Integration_Platform.Integration_Platform_ID LEFT OUTER JOIN (SELECT Services_and_Channels_Details , Integration_Platform_Details )\n \n\n AS BSAZORIOOLX1R7QHYV6GKWL8JN9F5"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "SELECT Integration_Platform.Integration_Platform_Details LIMIT 61536307810"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "SELECT MIN(Customer_Details )\nINNER JOIN (SELECT Integration_Platform.Analytical_Layer_Type_Code LEFT OUTER JOIN government_shift.Analytical_Layer\n\n\n AS"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "SELECT Integration_Platform.Analytical_Layer_Type_Code , Integration_Platform_ID ;"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "SELECT AVG(Customer_Details )\nLIMIT 10485840886701141028178907312550494533877027307557111619594778665522263879242569808539356886007715371846"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "SELECT COUNT(Customer_Details )\n\n\n INNER JOIN (SELECT COUNT(Pattern_Recognition ))\n AS RITANIAVICLESURFOLKAOPADALUHASIMACBISONAGHAYGBAXAFGHATDIGINOGABEIARAMMEL"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "SELECT AVG(Customer_Interactions.Status_Code )\n INNER JOIN (SELECT Pattern_Recognition , Service_Details )\n\n  \n\n AS aBHESECISTEREURSCHREISTENKIMSSZERLANDIDEGDRELMEMORIANWIFJUNGALIAS"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "SELECT MIN(Analytical_ID )"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "SELECT SUM(Integration_Platform.Services_and_Channels_Details )\nRIGHT OUTER JOIN government_shift.Analytical_Layer AS uesignationistapathy2c1b3rm0xzhVdMZ5QEjYXkvW4FgC9f"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": "SELECT Pattern_Recognition , MIN(Analytical_Layer_Type_Code ), COUNT(*)\n\n\n INNER JOIN (SELECT AVG(Services.Pattern_Recognition )) ON EXISTS (SELECT S"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "SELECT AVG(Analytical_Layer_Type_Code )\n\n\nINNER JOIN (SELECT Integration_Platform_Details , SUM(*)ORDER BY Customer_Interaction_ID LIMIT 3265284930231701507810481226252033"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": "SELECT SUM(Integration_Platform_Details )"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "SELECT COUNT(Integration_Platform_Details )\n\n\n INNER JOIN (SELECT COUNT(Analytical_Layer_Type_Code ))\n\n  AS ELISSA ON Status_Code = -1.000FULL JOIN government"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": "SELECT SUM(Customers_and_Services_ID ) INNER JOIN (SELECT MAX(*) AS CLOSERS, COUNT(*) AS SEF ORDER BY Pattern_Recognition LIMIT 1 OFFSET 2321867172334647380224816603513251439331257"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "SELECT Pattern_Recognition INNER JOIN (SELECT COUNT(Analytical_Layer.Pattern_Recognition ))\n\n\n AS THE ON EXISTS (SELECT Pattern_Recognition ) INNER JOIN (SELEC"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "SELECT Integration_Platform.Integration_Platform_Details , Pattern_Recognition , Customers_and_Services_ID "
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": "SELECT Integration_Platform_ID LIMIT 30009150036103909041101339908528163746251912182950472048385970654217602389354467345424277757742110084955267314649768500610432308314745584076009413889539077"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "SELECT SUM(Analytical_Layer.Integration_Platform_Details )GROUP BY Customer_ID LIMIT 439123350551317882234302316295760792620644899182447194321013625694965147567117815"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "SELECT DISTINCT SUM(Customer_Details )\n\n\n  \n\nRIGHT OUTER JOIN (SELECT * FROM government_shift.Integration_PlatformLIMIT 0) ON EXISTS (SELECT DISTINCT MAX(Customer_Details ) WHERE Customers_and_"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "SELECT Integration_Platform.Customers_and_Services_Details RIGHT JOIN (SELECT Analytical_Layer_Type_Code INNER JOIN (SELECT Analytical_Layer_Type_Code INNER JOIN (SELECT"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": "SELECT COUNT(Customer_Details )\n\n\n INNER JOIN (SELECT COUNT(Analytical_ID ))\n  AS OVRAINNEJOSUIAZURHIANYOLPIEPSULKANISADOTATCILOCOGICARMYAMIMPUBACONUTFOMMUMALIODN"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "SELECT *\nINNER JOIN government_shift.Customer_Interactions AS nytrolerechungenkulturbeztehenblichtenstehungstagieren\n\n AS ISTABANGRAITHJORDENCHEKISTUSELMAYUNDEUTWICHALLINGHUOIDETHEISDATAAS"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "SELECT SUM(Customers.Analytical_Layer_Type_Code )\nINNER JOIN (SELECT COUNT(*) RIGHT JOIN government_shift.Services ON government_shift.Pattern_Recognition = 0 ORDER BY Analytica"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": "SELECT SUM(Customer_ID )\n\n\nRIGHT JOIN (SELECT COUNT(*) FROM government_shift.Analytical_Layer INNER JOIN government_shift.Services AS cinclacidarvaluciulumemphilisimtriscentiaelicetesur"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "SELECT Integration_Platform_ID , Services_and_Channels_Details , Integration_Platform_ID , Channel_ID RIGHT JOIN (SELECT AVG(Analytical_Layer.Service_Details ), Pattern_Recogniti"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT SUM(Analytical_Layer.Status_Code ) INNER JOIN government_shift.Services ON EXISTS (SELECT Analytical_ID FROM (SELECT DISTINCT SU"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "SELECT Pattern_Recognition INNER JOIN (SELECT AVG(Analytical_Layer_Type_Code ), COUNT(*) RIGHT OUTER JOIN government_shift.Services AS cteqirsezkonnenntwf"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "SELECT vehicles_id LIMIT 2014;"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "SELECT Highway_fuel_economy_rate WHERE EXISTS (SELECT Vehicles.Model_year INNER JOIN vehicle_rent.Discount AS tesnetsaet\n\n\n   \n\n\n\n\n AS WELLINGWOODBELTISKURU"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": "SELECT Renting_history.membership_credit , SUM(Renting_history.total_hours ), Highway_fuel_economy_rate GROUP BY total_hours LIMIT 18011437292044004050321357121175251527"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "SELECT Renting_history.vehicles_id FULL OUTER JOIN (SELECT Notes WHERE total_hours < 9GROUP BY Type_of_powertrain LIMIT 1)\n\n\n AS ISINGLW3FZXV8QM0YS1U5J9B"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": "SELECT COUNT(City_fuel_economy_rate )\nLIMIT 1 OFFSET 0"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "SELECT total_hours INNER JOIN (SELECT SUM(Annual_fuel_cost ), Highway_fuel_economy_rate )\n\n\n  \n\n AS SELTIAKHARANYAGEVOC ON EXISTS (SELECT SUM(Annua"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "SELECT SUM(City_fuel_economy_rate )\n\n\n INNER JOIN (SELECT Renting_history.vehicles_id , id LIMIT 1385)  \n AS SELECTYCALATASCEZTEESPEWEEKJUYSX6F8VQW9"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "SELECT Renting_history.age GROUP BY Customers.Combined_fuel_economy_rate LIMIT 310042646403564111730671488122944451655776689032518130159104849226815474300763250285778657960541909639"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "SELECT Vehicles.Notes FULL OUTER JOIN (SELECT SUM(Annual_fuel_cost ))\n\n\n AS DUNGEONSHIPYCHESDAMPOURALFINGCAMPTIMELISTSRENDIANVOCUSMEASURESTEBODEDEKUYSIDEXIOSATLNIT"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "SELECT Renting_history.membership_credit GROUP BY Model_year ORDER BY Discount.Model_year LIMIT 1 OFFSET 4"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "SELECT SUM(Renting_history.customer_id )\nINNER JOIN (SELECT Renting_history.customer_id )\n\n AS TECHZOLFELPUNGVANCHAURKTAULENERIKWUDROSONARQUELLYETRIADNITMOVROD"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "SELECT Vehicles.Combined_fuel_economy_rate INNER JOIN (SELECT Highway_fuel_economy_rate LIMIT 6)\n\n\n \n\n AS CERTIFICATE ON Vehicles.Combined_fuel_economy_rate = 10500100051002"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": "SELECT Renting_history.customer_id , id ;"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "SELECT Renting_history.Notes GROUP BY Type_of_powertrain LIMIT 1080609037251601148955390470671326007822296435406524543875171110777630594874683645431900044125857662042509518282315"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": "SELECT vehicles_id RIGHT OUTER JOIN (SELECT Vehicles.vehicles_id WHERE Discount.name = 0)\n\n\n  \n\n AS EQ1x10V2B4J20F3XM60D5P9Y16A8G00AA11C0O6N7"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "SELECT Notes GROUP BY Model_year ORDER BY Type_of_powertrain LIMIT 1000"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": "SELECT vehicles_id FULL OUTER JOIN (SELECT Renting_history.name ) AS SEDAIDENZFYCHBAGANONISRADAMASINDEALVACIONIANUSGARATKLODMIRULOGIAHUROSPINABIOIETOCDIPTOLICUNAX"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "SELECT COUNT(Annual_fuel_cost )"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "SELECT SUM(City_fuel_economy_rate )\n\n\n INNER JOIN (SELECT membership_credit , MAX(Highway_fuel_economy_rate )\nFULL OUTER JOIN vehicle_rent.Discount ON id ="
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "SELECT SUM(Annual_fuel_cost )FULL OUTER JOIN (SELECT Notes ORDER BY Annual_fuel_cost )\n\n\n AS INZCOPEASTRIMUSS1KONATANUH2B10D8VACHE4EOCMOL9F6A151778JOI5YQ"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "SELECT COUNT(age )\n\n\nGROUP BY Renting_history.membership_credit "
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "SELECT Highway_fuel_economy_rate WHERE Annual_fuel_cost \n> (SELECT DISTINCT name FROM vehicle_rent.Vehicles)\n\n INNER JOIN vehicle_rent.Vehicles ON name < 1FULL JOIN vehi"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "SELECT COUNT(age )\nINNER JOIN (SELECT age FROM vehicle_rent.Customers)\n\n AS ILLUMINSENAMEABSHUTKOPMATZERFRAISETTRASLURADDRYSJUNDALVIFNECX2IGRANTABAGEACBQGORCHEDTARIMP1E"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "SELECT MIN(City_fuel_economy_rate )\nINNER JOIN (SELECT Renting_history.customer_id , SUM(*) WHERE City_fuel_economy_rate < Model_year GROUP BY Type_of_powe"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "SELECT Vehicles.Combined_fuel_economy_rate , id \n\n\n INNER JOIN (SELECT Highway_fuel_economy_rate ) AS WELCOMEJODA ON EXISTS (SELECT Vehicles.Combined_fuel_economy"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": "SELECT Vehicles.membership_credit , id GROUP BY Model_year LIMIT 0;"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "SELECT Highway_fuel_economy_rate GROUP BY Customers.total_hours LIMIT 1 OFFSET 0"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "SELECT Notes FULL JOIN (SELECT Highway_fuel_economy_rate ) AS LHQVZJ3pjbA6v8R4z2Wk7qE0MmD1lXFUYGdNtLxMAIEEegC5hOaKfPgB9u"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": "SELECT total_hours GROUP BY Highway_fuel_economy_rate LIMIT 133712101378221858190215994077338801892860463027509069762048751670631735445943116485240634256714568086211868390049"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "SELECT COUNT(Annual_fuel_cost )\nLIMIT 3200 OFFSET 20006000082700295030458049354043263837474639251157366063708701137876647788162820521733595312518106002113147155812954866671903225523"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": "SELECT Renting_history.customer_id ;"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "SELECT AVG(Annual_fuel_cost )"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": "SELECT Notes LEFT OUTER JOIN (SELECT Highway_fuel_economy_rate )\n\n\n AS BHILmQjJqDp3b1lLW6h7vAcV5K8dxG2UXM9PYzsTkF4RtNgIaCfE"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "SELECT AVG(City_fuel_economy_rate )"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": "SELECT SUM(Renting_history.vehicles_id )"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "SELECT Renting_history.discount_id , discount_id , id , customer_id , id , membership_credit , membership_credit , total_hours , customer_id , vehicle_rent.discount_id , discount_id"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": "SELECT Vehicles.Notes WHERE Discount.Annual_fuel_cost > Notes LIMIT 20002 OFFSET 202824552217332748141557384516298864773625111823210140326098390919065073204412043568007576139958"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "SELECT COUNT(Vehicles.id )LIMIT 578282555182230382040887060577701078048983316233547261744761123000300009451399390421102789797142412340029971164100321271915863742106365909467587256578285055"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "SELECT Vehicles.discount_id INNER JOIN (SELECT * FROM vehicle_rent.Vehicles)\n\n\n AS LESS ON Type_of_powertrain = 0 ORDER BY total_hours , name ;"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "SELECT AVG(Annual_fuel_cost )\n\n\nLIMIT 2255035304633283713147899081809120171101164819231788972055853836408922671060862457490600044454770397750076680962112073215932017529008410058593554274650"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": "SELECT COUNT(Renting_history.discount_id ) RIGHT OUTER JOIN (SELECT * FROM vehicle_rent.Discount ORDER BY Vehicles.Model_year , Vehicles.City_fuel_economy_rate ) AS Renter ON Model_year < 30 GROUP BY vehicles_id LIMIT 3;"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "SELECT SUM(Highway_fuel_economy_rate )\nINNER JOIN (SELECT Notes LIMIT 1)\n\n AS CUNGALOSYSTEMKATIKOUBANUSEMASHVETUBAHISUKUMAKENEDRAJOHOKAIPSUSHASHAWILCHIGAMADAWIKKUR"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "SELECT Type_of_powertrain FULL JOIN vehicle_rent.Customers ON customer_id = 1028017744132278337916 RIGHT OUTER JOIN (SELECT id FROM vehicle_rent.Vehicles WHERE discount_id = 100) AS nrf1"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "SELECT Notes WHERE age \n\n\n= (SELECT Type_of_powertrain ) RIGHT OUTER JOIN vehicle_rent.Vehicles ON customer_id = Customers.customer_id ORDER BY Vehicles.vehicles_id ;"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "SELECT COUNT(Ref_Detention_Type.class_id )\n INNER JOIN (SELECT MIN(Teachers.teacher_details ), Detention.detention_type_code , Teachers.teacher_details )\n\n  \n\n AS TENDAILFOLKETEERD"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": "SELECT SUM(student_id )\nWHERE Achievements.transcript_id = 0"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": "SELECT Ref_Achievement_Type.student_loan_id INNER JOIN cre_Students_Information_Systems.Detention AS MNOF\n\n\n AS SOEZKOVSKAELISULEcMEMOSYNEXCTIVALCECJtLHjBvY"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "SELECT AVG(Addresses.bio_data )\nLIMIT 0;"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "SELECT DISTINCT SUM(student_address_id )\nINNER JOIN (SELECT student_address_id , event_id , cre_Students_Information_Systems.transcript_details , date_to )\n AS BINJANOEN O"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": "SELECT Achievements.student_id \nGROUP BY Classes.detention_type_code LIMIT 0"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "SELECT *\n\nFULL OUTER JOIN (SELECT * FROM cre_Students_Information_Systems.Classes WHERE Classes.class_id = 'D-011033') AS octor1d ON class_id = 1;"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "SELECT Transcripts.transcript_details ;"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "SELECT COUNT(Detention.detention_summary )\nINNER JOIN (SELECT SUM(Ref_Detention_Type.detention_id )\n\n INNER JOIN cre_Students_Information_Systems.Detention AS MENTALISTS\n"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "SELECT achievement_id , event_type_code ;"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "SELECT Behaviour_Monitoring.achievement_details GROUP BY Classes.amount_of_loan , Achievements.address_details ORDER BY Detention.achievement_details LIMIT 4391043"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "SELECT SUM(Achievements.detention_type_description )\nINNER JOIN (SELECT Ref_Detention_Type.datetime_detention_start , event_type_code )\n\n AS LITERALAATUDEISVULTIDIANALISTICS ON EXISTS (SELECT"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "SELECT Ref_Detention_Type.bio_data GROUP BY Transcripts.bio_data ORDER BY Classes.behaviour_monitoring_details , Ref_Detention_Type.bio_data LIMIT 1 OFFS"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "SELECT Achievements.achievement_details , achievement_details , bio_data LIMIT 71048173347013075705713261835238966416124079243727002250861123284468678899081959143625743896117846156560"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": "SELECT DISTINCT SUM(Classes.teacher_id )\n\n\n              \nINNER JOIN (SELECT DISTINCT MAX(*)ORDER BY amount_of_loan LIMIT 6342829011718215038402310221211"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "SELECT COUNT(Detention.student_loan_id )\nINNER JOIN (SELECT event_id )\n\n AS EATIERRISTIE ON Students.behaviour_monitoring_details = Classes.behaviour_monitoring"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": "SELECT DISTINCT SUM(Classes.other_details )RIGHT OUTER JOIN (SELECT * FROM cre_Students_Information_Systems.Student_Loans WHERE Classes.other_details > 1) AS dt ON cre_Students_Information_Systems.Student_Loans.class_id"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "SELECT COUNT(Detention.detention_id )\n\n\nFULL JOIN (SELECT Transcripts.behaviour_monitoring_id ) ON Ref_Achievement_Type.behaviour_monitoring_details > event_id LEFT JOIN cre_S"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "SELECT Ref_Detention_Type.datetime_detention_start \nLIMIT 200003200234815290004220404539571300384311369827285070229909353426174914690518163025448712904774661903"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "SELECT COUNT(event_id )\nGROUP BY Detention.student_id , event_id , cre_Students_Information_Systems.datetime_detention_start \n\nLIMIT 4671066001134570003"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "SELECT Achievements.achievement_type_description FULL JOIN (SELECT COUNT(Ref_Detention_Type.datetime_detention_end ))\n\n\n  \n\n AS INFOERVATIONHIKALISTSYSTEMSOLITESPEKEINELWANBACHATLASEMORECONDSPOTENAME"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "SELECT Behaviour_Monitoring.achievement_type_description , event_type_code GROUP BY other_details ORDER BY Detention.achievement_details ;"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": "SELECT COUNT(student_id )\nINNER JOIN (SELECT COUNT(cre_Students_Information_Systems.bio_data )) \n\n AS NEGATIVE1JYVAL5X3U9CVW2C4QEOT7ZKAAT8NFPGEDVD6B0ADGVXYDETTYFDEYS"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": "SELECT Behaviour_Monitoring.detention_id GROUP BY Classes.address_details , Achievements.datetime_detention_start LIMIT 81739501867302833161946203638494440555864997813271559240763211122901"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": "SELECT COUNT(student_id )\n\n\n  \n\n INNER JOIN (SELECT COUNT(*) AS RUSK, amount_of_loan , transcript_id ORDER BY transcript_details )\n AS NEECARDANTS ON Transcripts.datet"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "SELECT MIN(student_id )\nLIMIT 1102350432248271349281520461617253657390722456955981230294570474059630077856089865903579044167643876211158141918444280349632149083288235610092401732687138837754910"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": "SELECT COUNT(student_id )\n\n\n  \n\n INNER JOIN (SELECT SUM(*)GROUP BY Ref_Detention_Type.date_from , student_id , Achievements.class_id )\n \n\n AS U1S3AJEV9NQ4K8"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "SELECT DISTINCT AVG(student_details )\nINNER JOIN (SELECT COUNT(cre_Students_Information_Systems.Behaviour_Monitoring.bio_data ), SUM(*), Detention.detention_type_code )\n\n AS TOTIENALIS"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": "SELECT SUM(student_id )\n INNER JOIN (SELECT Ref_Event_Types.detention_id , Detention.achievement_type_description , Ref_Detention_Type.detention_id )\n AS JVHUJZ ON EXISTS ("
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": "SELECT Transcripts.date_to GROUP BY Students.datetime_detention_end \n\n\n LIMIT 5390023881036671420291117781237684048807097752616571825321530658964274554287400081909026063014455473550"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "SELECT Achievements.student_id \nRIGHT OUTER JOIN (SELECT Transcripts.transcript_details )\n\n AS ENABLE ON Ref_Achievement_Type.bio_data = 3 ORDER BY Classes.achievement_id \n"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "SELECT SUM(student_loan_id )\n\n\nGROUP BY Detention.detention_id \n\n LIMIT 1;"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "SELECT Ref_Detention_Type.student_id ;"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": "SELECT Achievements.teacher_id INNER JOIN (SELECT COUNT(Achievements.transcript_id )\nWHERE amount_of_loan = 1GROUP BY behaviour_monitoring_details ORDER BY Ref_Achieve"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": "SELECT Behaviour_Monitoring.class_details INNER JOIN (SELECT Transcripts.achievement_id )\n AS NEGETIMED ON Classes.address_type_code >1 INNER JOIN cre_Students_Information_Sy"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "SELECT AVG(student_id )\nINNER JOIN (SELECT DISTINCT Teachers.detention_type_description GROUP BY Students.bio_data ) ON EXISTS (SELECT COUNT(Achievements.transcript_id ))\nINNER JO"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": "SELECT Behaviour_Monitoring.detention_id LIMIT 112020"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "SELECT Achievements.student_address_id \nINNER JOIN (SELECT COUNT(Behaviour_Monitoring.other_details ) AS nx, SUM(Classes.amount_of_loan ), MAX(Students.datetim"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "SELECT Achievements.achievement_id WHERE Classes.bio_data = 0 GROUP BY Teachers.class_details LIMIT 2070236412606733106828240720483680664514164027116939095732000749783079431729001002117185059131901"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "SELECT MIN(student_loan_id )\nLIMIT 10;"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "SELECT COUNT(student_id )\nINNER JOIN (SELECT Ref_Achievement_Type.address_type_code , event_type_description ) AS nterpsistrojtecltrv1gjeepwirac2nrcs3mqld6id7f0c5l"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": "SELECT COUNT(Detention.class_id )LIMIT 633991 OFFSET 1"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "SELECT Achievements.teacher_id ORDER BY Teachers.transcript_details LIMIT 250"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "SELECT SUM(student_loan_id )\nINNER JOIN (SELECT Ref_Detention_Type.bio_data , Behaviour_Monitoring.class_id , COUNT(*)) AS SUELLINGALVADORONGAUNAXATUNCTIOSAOLOCUSHIMCYRIT"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": "SELECT Ref_Detention_Type.class_id , SUM(teacher_id )\n\n\n  \nFULL OUTER JOIN (SELECT COUNT(*)RIGHT JOIN cre_Students_Information_Systems.Classes AS SELECT ON s"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "SELECT AVG(Classes.event_id )\n\n\nFULL JOIN (SELECT COUNT(*)WHERE EXISTS (SELECT DISTINCT Behaviour_Monitoring.detention_summary )) AS FOUNDATELEZARDVOTICIANABILANDGITARIYASUJ"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "SELECT Achievements.student_id INNER JOIN (SELECT Behaviour_Monitoring.student_details ORDER BY Ref_Detention_Type.class_details LIMIT 1) AS KAKEASSAKINBORROWENIHOANSVETZUCHN"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": "SELECT Achievements.achievement_id INNER JOIN (SELECT Transcripts.transcript_id )\n\n\n    \n\n AS MYSELFISTS ON Classes.transcript_details = 1;"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": "SELECT SUM(student_loan_id )\n\n\nRIGHT JOIN (SELECT Ref_Detention_Type.detention_type_description ) AS tesstitriatische ON EXISTS (SELECT SUM(student_loan_id ))\n\n\n INNER J"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "SELECT COUNT(achievement_details )\nINNER JOIN (SELECT COUNT(*))\n\n AS LUCIANNEJANNOUNKMONTHALVIAAQHAGACHTBELOSURXROCPYDUMGITAMPSUTCIFLEWOPEGATEZAVIGNAETCHOOTOGN"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "SELECT Behaviour_Monitoring.transcript_details , achievement_details GROUP BY Students_Addresses.bio_data LIMIT 9330123002544000410012031020904588200117040584835602855151813"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "SELECT DISTINCT SUM(Classes.detention_summary )\nINNER JOIN (SELECT MAX(*) ORDER BY datetime_detention_end , other_details , student_id LIMIT 10552960402501321336123916331557"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "SELECT Achievements.class_id FULL OUTER JOIN (SELECT COUNT(*) FROM cre_Students_Information_Systems.Classes) AS InfoSecDataSLAM1ID ON student_loan_id = 1;"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "SELECT COUNT(student_id )\nINNER JOIN (SELECT DISTINCT Transcripts.date_achievement , event_id , achievement_type_description , bio_data )\n\n \n\n AS MURITUDEFETISHAJIENALIMORIAMUSICISC"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "SELECT MIN(student_details ) INNER JOIN (SELECT Teachers.bio_data )\n\n\n AS ANSWERED ON Behaviour_Monitoring.behaviour_monitoring_details <5 INNER JOIN (SELECT"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "SELECT Achievements.student_address_id \nRIGHT JOIN (SELECT * FROM cre_Students_Information_Systems.Achievements WHERE Classes.class_details > 0) AS dndNecessaryDateSessionsCFROMA3D8122590340001103733853555E1B5"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": "SELECT COUNT(student_id )\nINNER JOIN (SELECT COUNT(class_details )) AS cldrID ON detention_id = teacher_id GROUP BY event_id , detention_id ORDER BY student_id ;"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "SELECT Transcripts.achievement_details \nRIGHT JOIN (SELECT * FROM cre_Students_Information_Systems.Student_Loans WHERE Classes.date_of_transcript = 0 ORDER BY datetime_detention_end ) AS DEVOCATOR ON transcript_id = (SELECT"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "SELECT AVG(Behaviour_Monitoring.detention_summary )\nLIMIT 1125671516050014015039303687252289131177108599451778359534371855276086337068562112795420769190464668043752938404788"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "SELECT AVG(student_details ) INNER JOIN (SELECT Behaviour_Monitoring.bio_data ) ON Detention.datetime_detention_start > 1230221260890100073678114035174937161418342346190499002524"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": "SELECT Achievements.achievement_details FULL JOIN (SELECT COUNT(Ref_Detention_Type.class_id ) GROUP BY Ref_Detention_Type.class_id )\n\n\n  AS LIFESGARTSLOTSKEEPSEYSELPUSONVORNEGATIS"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": "SELECT Ref_Detention_Type.datetime_detention_start INNER JOIN (SELECT DISTINCT MAX(teacher_id ))\n\n\n  \n\n AS OZBASa1KfLgMcDVp9TzWm8oHJ2Qn6vq3iYbC"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "SELECT Behaviour_Monitoring.bio_data INNER JOIN (SELECT Transcripts.datetime_detention_end RIGHT OUTER JOIN cre_Students_Information_Systems.Behaviour_Monitorin"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": "SELECT DISTINCT SUM(Classes.event_date )\n\n\n INNER JOIN (SELECT Ref_Detention_Type.class_id , class_id ) ON transcript_details > 0 ORDER BY Transcripts.event_date ;"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": "SELECT Achievements.detention_id , achievement_id , class_id , datetime_detention_start , event_date , event_date , behaviour_monitoring_details INNER JOIN (SELECT COUNT(Behaviour_Monitoring"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": "SELECT Behaviour_Monitoring.bio_data \nINNER JOIN (SELECT MAX(transcript_details ) ORDER BY Detention.bio_data , Behaviour_Monitoring.bio_data \n\nLIMIT 1)"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "SELECT AVG(Achievements.detention_id )"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": "SELECT Behaviour_Monitoring.datetime_detention_start INNER JOIN (SELECT AVG(Detention.detention_id ), COUNT(*) WHERE Students.bio_data = 154700000\nFULL JOIN cre_S"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "SELECT SUM(Classes.bio_data )\nFULL OUTER JOIN (SELECT COUNT(*)LIMIT 10233964165834261428254215240540221935003720607770483211856750571217447627135610098339046296696014955690338591806320110"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "SELECT MIN(student_details )\n\n\nLIMIT 10602300111533441213011718104330543414092048223935574028876438762426294977992769035058376521016255546164753457066321571906100615599907908978086152388605912"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "SELECT COUNT(student_id ) AS elif1A3D6NQGKZB0P5VXJ4HZX2fwYLFjhMv9z7kIoNsRxgOuUqlUlbWpEVDe8CcTnRFtSUJV_OKsIFSdCBaD6Qr1mK3N0ZV"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "SELECT COUNT(student_id )\nRIGHT JOIN (SELECT Ref_Detention_Type.class_details )\n\n     \n\n AS IZMEMBOURNE123A6H11TH10JK4VCHN8WG18Y0ECP16CE5F9AD62DEE39FB7C60"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": "SELECT address_type_description FULL OUTER JOIN (SELECT * FROM cre_Students_Information_Systems.Detention, (SELECT class_id , transcript_details ), cre_Students_Information_Systems.Detention) AS COUNT ON d"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "SELECT Ref_Detention_Type.bio_data , Behaviour_Monitoring.student_id \nWHERE Achievements.class_details = -1;"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "SELECT Behaviour_Monitoring.bio_data LEFT OUTER JOIN (SELECT SUM(student_loan_id ))\n\n\n   \n\n AS ea0mzLkD1fGi3PXWYZqb4ycQhB7dv9rR6uV"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "SELECT MIN(student_id ) INNER JOIN (SELECT Ref_Detention_Type.datetime_detention_start GROUP BY Students_Addresses.datetime_detention_start ) AS EFINGERUILIATOALZUNITIMISMELT"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "SELECT Orders.NumCC , COUNT(Author_Book.Title )\nINNER JOIN (SELECT MAX(*), Author_Book.DateOrder RIGHT JOIN (SELECT Orders.NumCC , COUNT(Author_Book.Tit"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "SELECT MIN(Client.Author ), amount LIMIT 1 OFFSET 6091"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "SELECT DISTINCT SUM(Books_Order.Author )\n\n\nGROUP BY Name ORDER BY IdOrder LIMIT 95816646022782314795719242917364070904515131130531277463554253895995096012855873497268875333909"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "SELECT AVG(Client.amount ) LIMIT 2111504314223329012049162327122539554637771"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": "SELECT MIN(Client.PurchasePrice )\n\n\nINNER JOIN (SELECT PurchasePrice )\n  AS NOSBESLINGMOVEDFILTSDAMENTALERAS_IMPORTANTLYTHUNDERSTANDYPRICEOUTOFWEEKENDIDELAYIFYOUORDERSHEREISOLATEDENETUALLYFORGETTO"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "SELECT COUNT(DateExped )\n\nWHERE ISBN > 901.000718"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "SELECT AVG(Book.DateOrder )LIMIT 33112536991"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": "SELECT SUM(NumCC )\n\n\n INNER JOIN (SELECT COUNT(*) FROM book_1.Books_Order WHERE Books_Order.Author = 'Koharama' ORDER BY Author , Title LIMIT 1 OFFSET 202518783400303317871119493845147544108940551315473648356712373957"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "SELECT IdOrder , SalePrice RIGHT OUTER JOIN (SELECT PurchasePrice )\n\n\n    \n\n AS isinDzwXsKx0k7pQFiN2V3qf_4nBmP5MtYlA1JgH6IyUaWjZ"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(amount )\n INNER JOIN (SELECT * FROM book_1.Client, book_1.Books_Order AS Book) ON amount = Author LIMIT 1;"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "SELECT Orders.IdOrder FULL JOIN (SELECT NumCC INNER JOIN (SELECT COUNT(*)) AS NUM_DIFFERENTALIZED ON book_1.Book.amount = 0) AS SELECT ON EXISTS (SELECT * FULL JOIN (SELECT"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "SELECT PurchasePrice INNER JOIN (SELECT MIN(Books_Order.DateOrder )\nGROUP BY DateExped , amount LIMIT 1 OFFSET 86050102777128800170133000500000020267857156410002911191844706530229099097"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "SELECT SUM(Author_Book.amount ) AS aqs1bj2c6d9e074ac89f49391657be0eb846ee1455305054\nRIGHT JOIN (SELECT Name INNER JOIN book_1.Book AS aqs1bj2c"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "SELECT Book.DateOrder RIGHT OUTER JOIN (SELECT COUNT(*) FROM book_1.Books_Order WHERE Orders.Name = 'K' ORDER BY Name LIMIT 2)\n\n\n   \n\n AS ELSE ON SalePrice < 1600031001380203464153055001101392848375085146033"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": "SELECT COUNT(idAuthor )\nRIGHT JOIN (SELECT * FROM book_1.Books_Order WHERE Book.Author = 'My Borrowed Text' ORDER BY book_1.Book.Title LIMIT 1) ON book_1.idAuthor > 0;"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "SELECT AVG(Name ) INNER JOIN (SELECT SUM(*)\nRIGHT OUTER JOIN book_1.Books_Order ON book_1.Books_Order.Title = 'Wonders of the Dark One' INNER JOIN book_1.Books_Order ON book_1.Books_Order.Title <="
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "SELECT DISTINCT SUM(DateOrder )\nRIGHT OUTER JOIN (SELECT * FROM book_1.Book WHERE idAuthor = 0) AS dTPLOADCASTOR2 ON idAuthor < 1 ORDER BY Books_Order.IdOrder ;"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "SELECT Orders.IdOrder INNER JOIN (SELECT AVG(DateOrder ))\n\n\n AS DESCENDER_PREFIXeset0BpMfHJn8qcxzQ5mhb6s3jZkF9XwKd7lRuS1W4LvAiUYVgE"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": "SELECT IdOrder LIMIT 220050750148285799588916236725193340551537273526474510431385361130889841006073246486290711252297390856204904327072185977176551129568421974469037593307387901842396990957254616"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "SELECT AVG(Book.IdOrder )\n\n\n INNER JOIN (SELECT Books_Order.PurchasePrice , amount FULL JOIN book_1.Author ON Title <-163710385470252035486780493099341408420033135040"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": "SELECT COUNT(Author )\nLIMIT 1 OFFSET 0"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "SELECT IdOrder LIMIT 21"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "SELECT MIN(DateOrder )INNER JOIN (SELECT PurchasePrice , DateOrder INNER JOIN (SELECT PurchasePrice ) ON EXISTS (SELECT * FROM book_1.Books_Order)\nGROUP BY Title ORDER BY Client.SalePrice ,"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "SELECT NumCC LIMIT 1 OFFSET 101112095189065147599232557271328332926645077854574405530631907847686739872400368909221246497615344483211617791060522474843135883766561196365010566056554993597259813"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": "SELECT COUNT(Author_Book.DateOrder )\nINNER JOIN (SELECT Books_Order.PurchasePrice )\n\n AS SIRISTAJUANAUSONNAEORDSTADYGODCHOSZENARRYAAMETRIYA1B2DTHANTSIOMETHATNOC"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "SELECT Orders.IdOrder INNER JOIN (SELECT MAX(DateExped ))\n   \n\n AS EONMIAHJWEGYFYSBALKISU1QPAS4V7NDOPAA6G8E9AG2IAMSAHSZ3SCNMCAPL5CZEAFIFRADAAC0D"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "SELECT Books_Order.DateExped RIGHT JOIN (SELECT DISTINCT PurchasePrice FROM book_1.Books_Order WHERE Orders.idAuthor = 1) ON Book.idAuthor < 2;"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "SELECT AVG(NumCC )\n\n\n INNER JOIN (SELECT Name RIGHT OUTER JOIN book_1.Book AS SETHARDASiZKfA9PqF7xdvCQrXhp3b5Smj2E8MlYWg\n\n\n AS TAYLORI"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "SELECT ISBN INNER JOIN (SELECT COUNT(PurchasePrice ))\n\n\n    \n\n AS BONZOR ON EXISTS (SELECT COUNT(PurchasePrice ) GROUP BY Client.IdOrder , SalePrice LIMIT 3200"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "SELECT IdOrder ORDER BY Author LIMIT 3 OFFSET 12"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": "SELECT DISTINCT SUM(Author )\nFULL OUTER JOIN (SELECT * FROM book_1.Books_Order) AS FULTY ON book_1.Book.Address = 1;"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "SELECT SUM(Client.amount ) \nRIGHT JOIN (SELECT * FROM book_1.Books_Order) AS OrderAmsNcListed ON Orders.Name = Books_Order.Title ORDER BY Name LIMIT 5;"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "SELECT amount , SUM(Client.NumCC )\n INNER JOIN (SELECT COUNT(*) AS to LIMIT 0 OFFSET 11000000032160025806448674034123515142037395970386022175546133029776833456626890582328471174994478273650"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "SELECT AVG(Book.amount )"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "SELECT NumCC , PurchasePrice WHERE Title = 5.00\n\n\n       \nINNER JOIN (SELECT * FROM book_1.Orders WHERE Orders.IdOrder <= 100000 ORDER BY IdOrder LIMIT 1) AS NUMEGOTES ON idAuthor < 10;"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": "SELECT COUNT(Client.PurchasePrice )\n\n\n   \nINNER JOIN (SELECT PurchasePrice )\n\n AS EMAILED ON SalePrice = DateExped INNER JOIN book_1.Books_Order AS epricesdtaonidboi\n   \n\n  \n\n\n"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": "SELECT Orders.DateOrder WHERE Author \n<-0.10FULL JOIN (SELECT Book.Author GROUP BY Title )\n\n AS ATREALOUSNESSes2x1d3b04c6a22eb4ec00f06af8ce9343038904097171478"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "SELECT COUNT(amount )INNER JOIN (SELECT Title , Book.DateExped RIGHT JOIN book_1.Book\n\n AS IZWAGFENAADITUNCALYSTIFTTHAAHAaORIAMAYMEXIDATUQ2XP4RK5N6"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": "SELECT PurchasePrice \nGROUP BY DateOrder , Books_Order.Author ORDER BY Name LIMIT 7250011484528385089182927751336607714205564441057011739031940853210096574266843163599112866307879094125"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "SELECT Orders.IdOrder INNER JOIN (SELECT PurchasePrice )\n\n\n  \n\n AS EURYMUSIAJOSA_AMENORKONOVICVIRALIZER ON Book.amount = 1 ORDER BY Title ;"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "SELECT DISTINCT Books_Order.ISBN LIMIT 616187829005033703940271210235730556501243513116436371744462667664514207788384868436099542872247254780497521190410059021574304345006322984127690316790971858"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "SELECT AVG(Client.Title ) \nFULL OUTER JOIN (SELECT COUNT(*) FROM book_1.Books_Order WHERE Book.Name = 'selent' ORDER BY Book.DateExped , Author.Title )\n\n AS BOOK ON book_1.Book.NumCC > 2 ORDER BY Address ;"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "SELECT Address INNER JOIN (SELECT * FROM (SELECT MIN(*), PurchasePrice GROUP BY Title ORDER BY Title ) WHERE Title = 0) AS SERVERNAME_SERIALSENET1 ON ISBN < 2;"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "SELECT IdClient FULL OUTER JOIN (SELECT Book.Author LIMIT 1)\n\n\n AS CHEADFORDYWATERKILLNIARVAPARAMBJALDASZISONHOTRAEMELOVATENIMEDiTIFIRLSIEQOSUMETUNAYUMAOCTOMACINLIPAOLI"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "SELECT MIN(Book.DateExped )\nLIMIT 64560881"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "SELECT Books_Order.DateOrder \nINNER JOIN (SELECT Books_Order.DateExped )\n\n AS EXPRESSORSYCHICLESHIPBOOKGENDERIDVARIATIONPICKUPWEEK1FORJUNE2013THREADPRINTINGSTOREABOVE5pqt2vQszb3cXN8yBjgF4f"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "SELECT COUNT(IdOrder )\nGROUP BY SalePrice ORDER BY NumCC LIMIT 100000039990003500502009900101109526142924753330371310083890231757459749882739181247226746805625785460866515204868897908958591907"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "SELECT Books_Order.amount WHERE PurchasePrice = book_1.idAuthor INNER JOIN book_1.Book\n\n\n\n AS DATE ON Books_Order.PurchasePrice <= 25000 RIGHT OUTER JOIN (SELECT amount , Orders.idAuthor ) AS iDATABASEBOOKTITLE"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "SELECT COUNT(Book.PurchasePrice )\nFULL JOIN (SELECT COUNT(Books_Order.idAuthor ))\n\n AS inaetlskulcq1au6j2xJWv3n8pctr0yHU5mzfMwQ9gLbN7YZF4V"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": "SELECT COUNT(Author )\nWHERE ISBN = 0FULL JOIN (SELECT idAuthor , Books_Order.PurchasePrice FROM book_1.Orders INNER JOIN book_1.Orders ON book_1.SalePrice >= 1 ORDER BY amount LIMIT 10)\n\n\n AS COUNTFULLJOIENCATEL"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": "SELECT COUNT(book_1.Books_Order.DateOrder )\n\n\n  \n\n INNER JOIN (SELECT SalePrice , Book.PurchasePrice ) ON EXISTS (SELECT book_1.Books_Order.DateOrder FROM book_1.Books_Order WHERE book_1.Book.Sale"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "SELECT AVG(Author.amount )\nFULL JOIN (SELECT Books_Order.DateExped , Name LEFT OUTER JOIN book_1.Books_Order\n\n AS SELECTFA2iYhjF3a9lx8d5qg6"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "SELECT MIN(DateOrder )\nINNER JOIN (SELECT IdOrder , SalePrice )\n\n AS EXPLANATORYBOOK_1STPARTIALISTSFEDERALJARLYLIFE2ndpartialisitsartistsforwomenstealjournalsandarticlesfromgiraffeanofeminismasadventureesgenderissuesfeministusabilitybiascoursesonmenstru"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "SELECT COUNT(idAuthor )\n\n\nGROUP BY Name LIMIT 2 OFFSET 9133151789102212503828997421187845001148292532195898351630596908140109744436057649447887093248555274049682084754637772326"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "SELECT amount INNER JOIN (SELECT AVG(Author.DateOrder )\nWHERE Client.PurchasePrice <-0.05207585114945809960840133304064001044181735583414269022556516285743278713390772412"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "SELECT AVG(Name )"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "SELECT IdOrder LIMIT 20000564008850000112527230157256048671533181619554947457913983022205439291799432465973828773711267542146341246358336591489732129093105448311085888072505440027942387647867155860"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": "SELECT SUM(amount ), amount , MIN(*)\nLIMIT 1;"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "SELECT IdOrder RIGHT JOIN (SELECT Book.Author LIMIT 2)\n\n\n\n AS KADAREDASKUIAAN_BETISV1k0N5jYhQxb7JzqsWZg9F8n6aMpv4LwRrOiD2eIfH3lCmE"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": "SELECT AVG(Books_Order.NumCC )"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "SELECT IdOrder RIGHT JOIN (SELECT Book.PurchasePrice ORDER BY Name )\n\n\n AS GRAPHICOSAURUSIAANISM ON EXISTS (SELECT ISBN INNER JOIN book_1.Orders AS BOOKISTONIASUALITESC"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "SELECT Name INNER JOIN (SELECT AVG(Author ))\n\n\n   \n\n AS SETHIANISKOVICHEYANTHEWARTITZ ON Books_Order.SalePrice = 100001"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "SELECT AVG(PurchasePrice )\nINNER JOIN (SELECT amount INNER JOIN book_1.Book ON EXISTS (SELECT Books_Order.DateOrder , PurchasePrice )\nINNER JOIN (SELECT amount INN"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "SELECT ISBN INNER JOIN (SELECT SUM(DateExped )\nWHERE Address = Books_Order.Address ORDER BY amount , Client.SalePrice LIMIT 2)\n\n AS inCELETSOOPINATIONCOULDNATHEWEATLESUDSYTHETERIOL"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "SELECT ISBN INNER JOIN (SELECT AVG(PurchasePrice ))\n\n\n  \n\n AS THEWILLINGLY ON EXISTS (SELECT Title ORDER BY Client.idAuthor LIMIT 1);"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "SELECT IdOrder RIGHT JOIN (SELECT MAX(Books_Order.PurchasePrice )RIGHT OUTER JOIN book_1.Book\n\n\n AS KYETVANNEKZOLGALADAREHEDIKATTAYAIONNHAXWITDORABEN"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "SELECT Orders.PurchasePrice , amount \nINNER JOIN (SELECT PurchasePrice )\n\n AS COSMILACEZJUSES ON Title >DateOrder ;"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "SELECT IdOrder , Book.IdOrder RIGHT JOIN (SELECT PurchasePrice ) ON EXISTS (SELECT MAX(*)FULL JOIN book_1.Book\n\n\n AS IjndiBpG9QZnqAIJWVt7Yv6Lg4D"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "SELECT SUM(Name ) LIMIT 110011252027241160903926254515332216102375289936190217763048290614551847321338943465374959005467668801648051505691207844625096708636535462584072135275860632484267768455725"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": "SELECT AVG(Name ) LIMIT 100000200001000010102460454850100000017000005000000080000002010224098118023803001236151835891329851904283908272549023099709740959751637141172125345884169333853444319901079763158457724576460"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "SELECT COUNT(PurchasePrice )\nRIGHT JOIN (SELECT DISTINCT Name LIMIT 2)\n\n       \n\n AS MULTIPLE ON EXISTS (SELECT PurchasePrice , Orders.DateExped WHERE SalePrice > 100 RIGHT JOIN b"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "SELECT Name LIMIT 8093"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "SELECT NumCC WHERE Books_Order.Name <3"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "SELECT AVG(Book.PurchasePrice )\nINNER JOIN (SELECT COUNT(*), PurchasePrice , Book.PurchasePrice )\n\n AS LIVINGMOVEMENTSJOSEPHANDAUZTACGISQX7CVIGWETAAY8BAM5AD9E3F1D"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "SELECT COUNT(PurchasePrice )INNER JOIN (SELECT DISTINCT Title LIMIT 223 OFFSET 11714165077122300281113019919481775360003898406425443218353758682210307063)\n\n\n \n\n AS COUNTSECT"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "SELECT COUNT(idAuthor )WHERE SalePrice = Book.ISBN INNER JOIN (SELECT Name )\n\n\n AS OF ON Title > 31 INNER JOIN book_1.Books_Order ON book_1.Author = 0;"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "SELECT DISTINCT PurchasePrice GROUP BY Name LIMIT 2 OFFSET 1;"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "SELECT NumCC LIMIT 31;"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "SELECT SUM(Book_ID ) INNER JOIN (SELECT COUNT(*)FULL JOIN book_review.book\n\n\n AS INVASIONSA AS MANYTHES ON Rank = 433554400404827871388361924227860675854163917742050237570492925"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": "SELECT Book_ID INNER JOIN (SELECT SUM(Chapters ))\n\n\n      \n\n AS iflxvnfgbzq8y7maf2p6r1e9iw0djcipak5a3u4ioo00eliaajkxcirmsyp11tcp_okasinhpn13scext"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": "SELECT AVG(Audio )ORDER BY Title LIMIT 2 OFFSET 1"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "SELECT Book_ID FULL JOIN (SELECT Book_ID )\n\n\n  \n\n AS IJKV7B5W4Z2Q1XF8G3IA9ROCP6HMCYEWAOTFPDSMISECMPUSETCOPTIMSPLACTPALSHNTFYCFLUNCFUADIYAYSCHEIDEGDAABA"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "SELECT COUNT(*)\nLIMIT 6107049402055"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "SELECT AVG(Book_ID )\n INNER JOIN (SELECT DISTINCT Book_ID )\n\n AS TheoryOfTheArtofScienceAurorZoomISQKP0H7FjmW1e6Uxq5G9bg4dXwfVuM8nzYJhRlO3NrB2L"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "SELECT Rating INNER JOIN (SELECT SUM(Book_ID ))\n\n\n        \n\n AS E5V1D9U3A7HZQAT8XG0JK4M15P6WAA64TBAEADF09AC2C7719DB177975104370B4625135837284026181478"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "SELECT Rating INNER JOIN (SELECT Title ORDER BY Chapters LIMIT 2)\n\n\n \n\n AS FORCE ON Pages = 5.6FULL JOIN book_review.review AS HOCKEY1HJTRBQPXO3DBAZEFA2N4TBL7Y9K8R5"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "SELECT AVG(Book_ID )\nWHERE Pages = 0.089900250009374936011710952785233948165460403378121115775855344628223898757044653230578063258664567897261006246973247188856\nINNER JOIN (SELECT A"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "SELECT AVG(Book_ID )\nLIMIT 71597125728278945674818791333771678268720756901469925192270291735763938941064246850444063665860590574490773655302100546542160378541143280571112534586322979153313"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "SELECT AVG(Audio )"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT Title INNER JOIN book_review.book ON EXISTS (SELECT MAX(*), Book_ID FULL OUTER JOIN book_review.book ON Chapters = 30000)\nFULL JOIN (SELECT"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "SELECT Book_ID FULL JOIN book_review.book AS nnidt1r0d9zv5e4w8c7h3pjm42lgprq2sx6i\n\n\n AS of ON Pages > 2"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "SELECT Book_ID INNER JOIN (SELECT Title LIMIT 2)\n                     \n\n AS BOOKIESHERE ON EXISTS (SELECT Book_ID ) INNER JOIN book_review.book ON Title <"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "SELECT AVG(Book_ID ) INNER JOIN (SELECT Book_ID ) ON Title <>Audio GROUP BY Chapters LIMIT 21 OFFSET 10810"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "SELECT Review_ID INNER JOIN (SELECT Book_ID ORDER BY Chapters LIMIT 10) AS NINEVILATION ON Rating                                              "
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": "SELECT Readers_in_Million \nFULL OUTER JOIN (SELECT * FROM book_review.book) AS reid2d0x1 ON book_review.book.Book_ID = 1 ORDER BY Book_ID , Readers_in_Million \n\nLIMIT 63638571328004918"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "SELECT Review_ID INNER JOIN (SELECT SUM(Pages ))\n\n\n AS BRIEFING ON Title <0.01;"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": "SELECT COUNT(Chapters )\nFULL OUTER JOIN (SELECT DISTINCT SUM(*) FULL OUTER JOIN book_review.review\n\n AS BRIEFBOOKISBN1Z5DSD7C3B9LL8WXYJVQEALGYSKKKV4CHRMEF0\n\n AS I"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "SELECT AVG(Audio )FULL OUTER JOIN (SELECT SUM(Pages )\n\n\n INNER JOIN book_review.book ON review.Book_ID = 0 INNER JOIN book_review.book ON Review_ID = -1 ORDER BY R"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "SELECT Rating INNER JOIN (SELECT Title LIMIT 2)\n\n\n      \n\n AS ETCOSMITHICALISTS ON Pages < Chapters FULL OUTER JOIN book_review.book AS fcntrlpgsrfw6gfrd1pql5x2v\n\n\n  "
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "SELECT Branch_ID , SUM(customer.Quantity )\n\n\n INNER JOIN (SELECT Customer_ID RIGHT OUTER JOIN restaurant_bills.branch\n  AS SELECCT1BJ9E AS ETC2KV0F8I ON cust"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": "SELECT SUM(Dish_Name )\n INNER JOIN (SELECT *) ON customer_order.Customer_ID = Customer_ID ORDER BY Branch_ID ;"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "SELECT COUNT(Customer_ID )\nINNER JOIN (SELECT customer_order.Customer_ID , Customer_ID FROM restaurant_bills.customer) AS custome ON customer_order.Name = 'name' ORDER BY customer_order.Quantity ;"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": "SELECT COUNT(Customer_ID )\nGROUP BY Location_of_office ORDER BY Name , Dish_Name ;"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "SELECT Nationality LIMIT 812"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "SELECT Location_of_office \nGROUP BY Nationality ORDER BY Manager , Dish_Name ;"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "SELECT COUNT(customer.Customer_ID )\n INNER JOIN (SELECT MAX(*)FULL OUTER JOIN restaurant_bills.customer_order AS schuldenreichstienetatfahljanggungrenverchendigkeitvruppelnbeiertw"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Manager ))\n\n\n     \n\n AS ETS ON Manager <+1FULL JOIN restaurant_bills.customer AS auswfbrqgct0dpr7j2hzpk3u6v9m"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "SELECT MIN(Card_Credit )\nFULL JOIN (SELECT SUM(*))\n\n              \n\n AS KITZERANNYHOLESWILLAASCHELLKETHSBORUMATLIEMALVARIAYAVTAMCONADELAYAGENIGPOPULUDSFACTORYLOBEIDG"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "SELECT Years_opened INNER JOIN (SELECT Location_of_office RIGHT OUTER JOIN restaurant_bills.customer\n\n\n AS ishreci1strqf0lf8a4o00d3ee7maf9i5ed137899013089096"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "SELECT AVG(Location_of_office )\n\n\n INNER JOIN (SELECT SUM(*)) ON Name =1.1317779410262736233911190514168895445745258973766012050796718478599240787815564043305964752212"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": "SELECT AVG(Dish_Name )\n\n\nRIGHT OUTER JOIN (SELECT * FROM restaurant_bills.customer) AS name ON customer.Quantity = 0;"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": "SELECT COUNT(*)\nRIGHT OUTER JOIN (SELECT * FROM (SELECT DISTINCT SUM(Nationality )) AS SELLING INNER JOIN restaurant_bills.customer ON EXISTS (SELECT Name ) ORDER BY customer_order.Location_of_office"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "SELECT Name RIGHT JOIN (SELECT SUM(Years_opened ))\n\n\n  AS OBJESVNALQZCKENISOLDBAULPUNTSATIAFILTIYAASITARIKNIACROVIELIPAOSORAVLIAMEDOCINAZAKUHADOKAYAGOCHGURANL"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": "SELECT Name FULL OUTER JOIN (SELECT SUM(Dish_Name ))\n\n\n             \n AS TIEONAISRXBZANENIDYASATARAMITETADALPIABLAYUJINVANGTRAPIODRAOLMIGAWHWIKNOSCARDORUSLINGKULIMG"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": "SELECT COUNT(customer.Customer_ID )\n\n\n INNER JOIN (SELECT MIN(*), SUM(Customer_ID )) AS BOSSATIANIAAALBINOISCAOLANDABIOSEXACTUSASCHOOLSWELCOMINGMANITESACQUERDONLYHOMURICLIGAMORROWE"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": "SELECT Location_of_office \nRIGHT JOIN (SELECT Name )\n\n AS CIFIAFINGUANESASKURAENEXCHUNKIZONUSEATIRYINEGOTJOCARTHODIMISMELITPROBICDANGXGORALLOVOPHAGIOUMAULNADETTQUE"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": "SELECT Location_of_office FULL JOIN (SELECT Nationality ORDER BY Dish_Name )\n\n\n AS KMAKARAEALENETZEMTAXELJEDNEIMATISONANCHFARESGARDUNDHAPHOMILIADURABALITAMMOLIAB"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "SELECT MIN(Customer_ID )\n\n\n  \n\n INNER JOIN (SELECT SUM(*)GROUP BY Nationality LIMIT 6464979258981326783688686716223734241218771729451114209465284890356976150157435063303844605540"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": "SELECT AVG(Card_Credit )\n\n\nWHERE Branch_ID = 'B-1F5E4A' INNER JOIN restaurant_bills.customer ON branch.Location_of_office <Card_Credit LIMIT 4360000031203935123075487090"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": "SELECT AVG(Dish_Name )\nINNER JOIN (SELECT AVG(Branch_ID ))\n\n AS DECKER1X2ASCELLINE ON Location_of_office = Card_Credit FULL JOIN restaurant_bills.customer ON customer_order.Name = Customer_ID ORDER"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "SELECT DISTINCT SUM(Years_opened )"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": "SELECT SUM(Customer_ID ) FULL OUTER JOIN (SELECT COUNT(*) AS DICONBIS, MAX(*) INNER JOIN restaurant_bills.branch\n\n\n AS SELECT ON customer_order.Location_of_office = (SELECT COU"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "SELECT COUNT(Dish_Name )\nRIGHT JOIN (SELECT DISTINCT SUM(Customer_ID )) AS s1 ON Customer_ID = 1 ORDER BY Name , Quantity ;"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": "SELECT MIN(Customer_ID )\n INNER JOIN (SELECT Branch_ID )\n\n AS PICTURES ON Dish_Name = 'MIMETER' ORDER BY customer_order.Quantity , branch.Branch_ID ;"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": "SELECT COUNT(Customer_ID )\n\n\n INNER JOIN (SELECT MIN(*) RIGHT OUTER JOIN restaurant_bills.customer ON Nationality > Dish_Name LEFT OUTER JOIN restaurant_bills.customer ON restauran"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "SELECT Branch_ID , SUM(branch.Branch_ID ), Dish_Name ;"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "SELECT AVG(Customer_ID ) GROUP BY Manager ORDER BY Name LIMIT 3933284857114434141739433029544038492360781279743727193532247716221347761864954667256586212755755026879903151098317536"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": "SELECT Name , SUM(restaurant_bills.Branch_ID )\n\n\n INNER JOIN (SELECT * FROM restaurant_bills.customer) ON customer_order.Customer_ID = 0 ORDER BY Customer_ID LIMIT 2;"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": "SELECT SUM(Customer_ID )\n\n\n  \nINNER JOIN (SELECT Name RIGHT JOIN restaurant_bills.branch ON branch.Branch_ID = customer_order.Branch_ID ORDER BY Name )\n\n\n  AS gidlec2np1f5j6d"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "SELECT SUM(Club_Name )ORDER BY Name \nLIMIT 1 OFFSET 21"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT AVG(Age ) AS H)\n\n\n          \n\n\n\n     \n\n    AS VEGF_ALOGPEDIMEINGINJOBITESYCLICIADERLYCITYISKEEPATROLIRAXOSMILTENIANA"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "SELECT MIN(Club_Name )INNER JOIN (SELECT Name )\n\n\n      \n\n AS FLEEDENJOYGUILAM1V6aW8P7DZ4sYSfQdLwTbXlCjtKqcx_2HzgOpF3hIoN9yE5Yv"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "SELECT Overall_Ranking LIMIT 92314338913304538403418293916222501574878779027995912586764105565669537421749369615873500932660432484100619115088906207986732159767052109084125694446403323143038"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": "SELECT Team_Leader LIMIT 10254918602688232436303822137827752028805700294411355901991916557910471733944589431240543777951476210415563462170704890394613567973213942506886609200082636664969183888257513"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "SELECT SUM(Age )\nLIMIT 220101275018256037191677339928267813302329397548388517904958409720350046444780731079112224096666370578905688414156545342112690456495954558855095606425940198367728997813"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "SELECT COUNT(club_leader.member.Age )\n\n\n    \n\n INNER JOIN (SELECT MIN(*) AS SENTONALID RIGHT OUTER JOIN club_leader.member ON member.Member_ID = '%s' INNER JOIN"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "SELECT COUNT(Year_Join )RIGHT OUTER JOIN (SELECT Nationality ) AS EHISQDZMETXKcB0G6Vj3vb5hW7kA4gE1fYSzYFmwC2pPd_J9quNUiRnL8r"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": "SELECT Overall_Ranking RIGHT JOIN (SELECT SUM(Age ))\n AS THEVYARDLYFULLISHINGGODZAFREADPITJARAMONIMALOGHELLSOLDERBYUSENETLATURATIONRUNEDEVENDANBASTISHTULHUMORKOTEMIUQNACIN"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "SELECT MIN(Club_Name )LIMIT 12783823881130264028102722251657125814002939671706752050643619014973457902"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": "SELECT MIN(Club_Name )LIMIT 1148571477003836221809732121625332815672959442765305820536035174790234668114078191354649876370187341009926397555248350564900043106942"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "SELECT Overall_Ranking GROUP BY Club_Name LIMIT 1"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "SELECT Team_Leader INNER JOIN (SELECT MIN(Member_ID ))\n\n\n AS CERTIFICATE ON EXISTS (SELECT * FROM club_leader.club, club_leader.club WHERE Club_ID = 6021513208901234048421234567890651627551110252635"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": "SELECT AVG(Age )\n \n\n INNER JOIN (SELECT * FROM club_leader.club WHERE Club_Name = 'Member' LIMIT 1) AS membershipID ON member.Club_Name = 'MembershipID' ORDER BY Member_ID ;"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "SELECT Team_Leader LIMIT 1502280290412272375366401104057307820280060631858761689061148654426173556336884387059375534456643141588544667993909824100520173215071925425050062131227809879366490407701"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "SELECT AVG(Age )\nRIGHT OUTER JOIN (SELECT MIN(Member_ID ))\n\n AS ISALJANHAFISATYARAMUCHAPADIATheiZalibH4DvP8C3aqw7QW5KBj2bAz1RhGtg9sXoLcEu6MkV"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "SELECT SUM(Age )\nINNER JOIN (SELECT * FROM club_leader.club) AS d2nstrjqp ON member.Club_Name = 1;"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "SELECT AVG(Collection_ID )\nLIMIT 1"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "SELECT AVG(Collection_Name )INNER JOIN (SELECT SUM(*)WHERE Collection_Description = Description INNER JOIN cre_Doc_and_collections.Collection_Subset_Members ON EXISTS (SELECT S"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "SELECT Related_Document_Object_ID , Document_Object_ID ;"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "SELECT DISTINCT SUM(Collection_Description )\n\n\n INNER JOIN (SELECT COUNT(cre_Doc_and_collections.Collection_Subsets.Parent_Collection_ID )) \n AS INPUTsEFRONTUOUSLY ON cre_Doc_a"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "SELECT Parent_Collection_ID FROM (SELECT *) WHERE cre_Doc_and_collections.Parent_Collection_ID = 1 ORDER BY Collection_ID , Documents_in_Collections.Related_Collection_ID ;"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "SELECT SUM(Collection_Name )\nLIMIT 1 OFFSET 0"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "SELECT *\nINNER JOIN (SELECT *) AS PILOTISDALVIAUZABAHADIMABOLGICANPRICEKOMMAYBASJIRRAENSLESWAMAGMORONDEFEQATAYUNEDIGPITLARRUSSELINTEACHNAOIDINGFAMEOUTTAIUKETOBEALISNURU"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "SELECT SUM(Collecrtion_Subset_Details )\nINNER JOIN (SELECT Other_Details , COUNT(*)WHERE EXISTS (SELECT MAX(Parent_Collection_ID )) FULL JOIN cre_Doc_and_collection"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": "SELECT Parent_Collection_ID ;"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "SELECT Other_Details , Description RIGHT JOIN (SELECT * FROM cre_Doc_and_collections.Document_Objects WHERE Documents_in_Collections.Description = 0)\n\n\n AS ElapsedTimeForCachingAndRefreshTheHistoryDataToViewOnItemClickHandler ON EXISTS (SELECT * FROM c"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "SELECT MIN(Description )\nWHERE Parent_Document_Object_ID = 0\n\n ORDER BY Description , Parent_Document_Object_ID ;"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "SELECT Parent_Document_Object_ID , Document_Object_ID , SUM(Parent_Document_Object_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collections WHERE Collection_Subset_Name = 'X' ORDER BY Collection_Subsets.Collection_"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "SELECT MIN(Collection_Name )\n\n\nFULL JOIN (SELECT Related_Document_Object_ID , Collecrtion_Subset_Details LEFT JOIN cre_Doc_and_collections.Collection_Subset_Members"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "SELECT Related_Document_Object_ID ORDER BY Description \n\n\nLIMIT 613112510221829408823421439774536550035906717373865693057121626805928893197191585475410084633937563509524609901"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "SELECT Other_Details \nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collection_Subset_Members WHERE Collections.Other_Details = 'Marlin') AS d2nd ON Document_Subset_Members.Parent_Document_Object_ID >= 4;"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "SELECT COUNT(cre_Doc_and_collections.Collection_ID )\n\n\n INNER JOIN (SELECT DISTINCT Related_Document_Object_ID , cre_Doc_and_collections.Collection_ID )\n AS TIFED ON Collection_ID = 'M'\n\n I"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "SELECT Related_Document_Object_ID , Documents_in_Collections.Description WHERE EXISTS (SELECT COUNT(*)FULL JOIN (SELECT * FROM cre_Doc_and_collections.Collection_Subsets, cre_Doc_"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "SELECT SUM(Collection_ID )\n\n\n INNER JOIN (SELECT Other_Details WHERE Collections.Related_Document_Object_ID =542234929) AS LIGAOSANENEDEVINGJAPPATUONDEVAICOQYGODI"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "SELECT Related_Document_Object_ID , Parent_Collection_ID WHERE Related_Document_Object_ID > 5.2"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "SELECT SUM(Document_Objects.Parent_Document_Object_ID )\n\n\n  \n\n INNER JOIN (SELECT Other_Details LIMIT 1)\n AS DEKUMENTJOSISLHOT1EENSSM2RNDCEMOCOLON3ESZET4F0U8D"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": "SELECT Other_Details GROUP BY Description LIMIT 0;"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "SELECT DISTINCT COUNT(Description )"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "SELECT *\nINNER JOIN cre_Doc_and_collections.Document_Objects ON cre_Doc_and_collections.Description = (SELECT *) ORDER BY Related_Collection_ID , Collection_Name LIMIT 6362501031432102723181628"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "SELECT COUNT(Description )\nFULL OUTER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Subset_Members) AS _id ON Document_Object_ID = 0;"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": "SELECT Related_Document_Object_ID INNER JOIN (SELECT MAX(Parent_Document_Object_ID ))\n\n\n  \n\n AS E0HF9C8E6B702275231588271399764526255517384895289836183377"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "SELECT *LIMIT 59917335516302744182047674549153589371340393801093258227795605876255600757964191457"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "SELECT Related_Document_Object_ID LIMIT 0;"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "SELECT SUM(Collecrtion_Subset_Details )"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "SELECT MIN(Collection_Name )\nINNER JOIN (SELECT COUNT(*), SUM(Parent_Collection_ID )) AS DIFFERENCES ON cre_Doc_and_collections.Collections.Related_Collection_ID = 1\nFULL OUTER JOIN cre_Doc_and_collections.Co"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "SELECT SUM(Collection_ID )\nGROUP BY Description LIMIT 2 OFFSET 141"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": "SELECT COUNT(Collections.Parent_Collection_ID )\nFULL JOIN (SELECT * FROM cre_Doc_and_collections.Collection_Subset_Members) AS CollectionsByType ON Collection_ID = 1 ORDER BY Description ;"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "SELECT Other_Details FULL JOIN (SELECT COUNT(*), Description ) AS ENCODE1 ON cre_Doc_and_collections.Parent_Collection_ID = 2 ORDER BY Parent_Collection_ID ;"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "SELECT DISTINCT SUM(Description )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Objects) AS Document ON Collections.Collection_ID = '1' GROUP BY Documents_in_Collections.Collection_Description , Documents_in_Collections.Collection_Description ORDER"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "SELECT Related_Document_Object_ID , COUNT(Related_Collection_ID );"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "SELECT AVG(Related_Document_Object_ID ) RIGHT JOIN (SELECT COUNT(Parent_Collection_ID ))\n\n\n  \n\n AS MULTIPLEBYSTARTINGFULLYMAJORBEDELINEERUPSS1A4CATZ9V6X7G8"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "SELECT SUM(Collection_ID )\n\n\n INNER JOIN (SELECT * FROM cre_Doc_and_collections.Collection_Subset_Members) AS CollectionNumberILKPTHATALYSLEDAINDRFLLLARDEISABTJHUADDAIDELWNTAPOLSECMDSLEEETCUTITICNODIASIFD"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "SELECT DISTINCT COUNT(Description )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Objects) ON Document_Objects.Description = 'An object with a name of the author/author-name or all title fields in an array, each containing one element within this document.' GROUP BY Description ORDER BY Collections.De"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "SELECT Other_Details LIMIT 1809031278334410342560393057751317155800140620474616055540355445670149732488972329597726703868842218043653100464652769521948665600089850094180953350321187122837757817"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": "SELECT AVG(Document_Objects.Collection_Description )\nINNER JOIN (SELECT Other_Details LIMIT 6)\n\n AS SELFFACTORAUSAGEES ON EXISTS (SELECT AVG(Document_Objects.Collection_Description )\n"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "SELECT COUNT(*)\nLIMIT 5642558111829206840509612794928702775781322162357461089619430177003095991745669344726067903698835940004855345420073245988390860076904214037114214065641558961853251238754913"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT DISTINCT Parent_Document_Object_ID FROM cre_Doc_and_collections.Documents_in_Collections) AS oid ON Document_Object_ID = Collection_Subset_Name ORDER BY Other_Details , Parent_Document_Ob"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT AVG(Related_Document_Object_ID ) AS DTOF FROM cre_Doc_and_collections.Collections WHERE Collections.Description = 'Bucumber' ORDER BY Collections.Description LIMIT 1)\n\n\n  \n\n AS toJobsDocumentObject"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "SELECT Other_Details LIMIT 52240"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "SELECT Parent_Document_Object_ID ;"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "SELECT Parent_Collection_ID ORDER BY Related_Document_Object_ID , Collection_Name ;"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "SELECT SUM(Collections.Description )\nINNER JOIN (SELECT MAX(*), COUNT(*))\n\n AS KORGZAMAZLAVATICYEJEDKRACHITALEMELUNANOLMUHBAWNENKIREETIANWYNINGDETHERVOSIKEIDIANQIMBARON"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": "SELECT COUNT(cre_Doc_and_collections.Parent_Collection_ID ), Description , Related_Document_Object_ID INNER JOIN cre_Doc_and_collections.Collections ON Collections.Parent_Co"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "SELECT AVG(Collection_ID )\n\n\n INNER JOIN (SELECT COUNT(*)) AS HIRINGITOSABILIAN ON EXISTS (SELECT * FROM cre_Doc_and_collections.Collections) LEFT OUTER JOIN cre_Doc_and_collections."
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": "SELECT Related_Collection_ID INNER JOIN (SELECT SUM(Parent_Collection_ID ))\n\n\n  \n AS TARACLEVINGHONESGENSATENCHISIGOLASAIDOSEODOCAPELUTIZETTEALJEWAWNEMOFLIRWANZKLUNU"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "SELECT MIN(Collection_Name )"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": "SELECT AVG(cre_Doc_and_collections.Parent_Collection_ID )\nINNER JOIN (SELECT Other_Details )\n\n   \n\n AS WORD1LWCH01V2HJOCATYXORISED3Q7ZENOSCOLA15TAYP5M4G8"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "SELECT SUM(Collection_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collection_Subsets) ON cre_Doc_and_collections.Collection_Subsets.Parent_Collection_ID = Collections.Collection_ID ORDER"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "SELECT Parent_Document_Object_ID INNER JOIN (SELECT * FROM (SELECT cre_Doc_and_collections.Document_Objects.Parent_Document_Object_ID ), cre_Doc_and_collections.Document_Objects)\n"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "SELECT DISTINCT COUNT(Description )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Subsets) AS doc_subset ON cre_Doc_and_collections.Documents_in_Collections.Collection_Name = 'document' INNER JOIN (SELECT DISTINCT COUNT(D"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": "SELECT Related_Document_Object_ID ORDER BY Description LIMIT 112812130029581401207045374619114055274918644724164878669025228057106815357779425054000414898609917953894100632306539"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "SELECT DISTINCT SUM(Documents_in_Collections.Document_Subset_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collections WHERE Documents_in_Collections.Parent_Collection_ID = 1)\n\n AS SELECTED ON EXISTS (SELEC"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "SELECT DISTINCT COUNT(Documents_in_Collections.Related_Document_Object_ID ) RIGHT OUTER JOIN cre_Doc_and_collections.Collections AS document AS in ON EXISTS (SELECT COUNT(Documents_in_Collections.Related_Document_Object"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "SELECT DISTINCT COUNT(Description )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Objects WHERE Document_Object_ID = 1) AS listOfQueryableFieldedInOrderIdParsing1d7g2f4b3A0D6E00C50582232AD8B5F3574DE1067360120"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "SELECT COUNT(Collection_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collections) ON Collections.Collection_ID = Collection_ID ORDER BY Collection_ID LIMIT 3;"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "SELECT Other_Details RIGHT JOIN (SELECT AVG(Parent_Document_Object_ID ))\n\n\n  \n\n AS inanntdgkirbikfallrvatelchommehteiwremakolaprozavryyazisheaevneivetpoyottleq"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "SELECT COUNT(cre_Doc_and_collections.Collections.Related_Collection_ID )\nINNER JOIN cre_Doc_and_collections.Collections ON cre_Doc_and_collections.Collections.Description = Collections.Description GROUP BY Collection_Name ORDER BY Documents_in_Collections.Collection"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "SELECT DISTINCT SUM(Description );"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "SELECT SUM(Collection_ID )\n\n\n INNER JOIN (SELECT COUNT(*) FROM cre_Doc_and_collections.Collections WHERE Related_Collection_ID = 88036376764172800010822752588388958208570654479079\n\n\n INNER JOIN"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "SELECT Document_Objects.Collection_ID ORDER BY Parent_Document_Object_ID , Collection_Description LIMIT 538583343231035705055202214122545194817266093804727295711561537774250718248921152101391354758864991"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": "SELECT Document_Objects.Parent_Document_Object_ID , Document_Objects.Parent_Document_Object_ID , Document_Object_ID ;"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "SELECT SUM(Collection_ID )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN cre_Doc_and_collections.Collections AS oid ON Related_Collection_ID = -1 ORDER BY Collection_ID )\n AS ZOIZANTAAASLACUISOL"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": "SELECT MIN(Collection_ID )\nINNER JOIN (SELECT COUNT(*)) AS c1d2c4f8e67504834a07556064222057b0bd25661279281042B11D173218A2640952429C9F279914780053AC73976365444E5AD0923CF3DB59473890"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "SELECT AVG(Parent_Document_Object_ID )\n INNER JOIN (SELECT *FULL OUTER JOIN cre_Doc_and_collections.Collections AS ouenlztrvp3ng7s5k6oq1h4t9b0n8fj2"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": "SELECT cre_Doc_and_collections.Related_Collection_ID RIGHT JOIN (SELECT *)\n AS EHEDP ON Parent_Document_Object_ID <-0 ORDER BY Document_Objects.Collection_Name , Collection_Description , R"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "SELECT DISTINCT SUM(Document_Subsets.Related_Collection_ID )\nINNER JOIN cre_Doc_and_collections.Collections ON cre_Doc_and_collections.Parent_Collection_ID = 'SELECT SUM(Doct"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": "SELECT MIN(Collection_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Subset_Members) ON EXISTS (SELECT MAX(*)) ORDER BY Collections.Document_Subset_Details ;"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "SELECT SUM(Collection_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collection_Subset_Members) AS Collision_Class ON EXISTS (SELECT COUNT(*), Document_Object_ID , Other_Details ) GROUP BY cre_Doc_and_co"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": "SELECT cre_Doc_and_collections.Parent_Collection_ID , Parent_Collection_ID , COUNT(Related_Collection_ID )\nFULL JOIN (SELECT Related_Collection_ID FROM cre_Doc_and_collections.Collections"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "SELECT Related_Collection_ID LIMIT 15152720954067502217095100611185713122436386800882910973726281670322544543935453419332343213048996462177470178140410196542120310007189558380581527632066405075672217"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": "SELECT *\nINNER JOIN (SELECT Parent_Document_Object_ID , SUM(Parent_Document_Object_ID ), COUNT(*) LIMIT 1000000010000000564451400405865277555132816342211306344122646247976171548322070386757182329"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "SELECT MIN(Collection_Name )\nINNER JOIN (SELECT MIN(Collecrtion_Subset_Details )) ON EXISTS (SELECT SUM(Collection_Name ))"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "SELECT Collection_ID , SUM(cre_Doc_and_collections.Owner )\nINNER JOIN (SELECT COUNT(*) FULL OUTER JOIN cre_Doc_and_collections.Collections AS lte_DAENNERJOSljH ON EXISTS (SELECT * FROM cre_"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "SELECT MIN(Related_Document_Object_ID )\n            \nLIMIT 1075251058000617351657288814891224992918495532"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": "SELECT COUNT(Collections.Document_Object_ID )\nLIMIT 30000500000101104020306075254547004411553543125850953437885003322143928985729906517261004664704878160710141887785200277973196984132318809766996776013815"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "SELECT Parent_Collection_ID INNER JOIN (SELECT Related_Collection_ID LEFT JOIN cre_Doc_and_collections.Collections\n\n\n  \n\n AS N ON EXISTS (SELECT Parent_Collection_ID FROM cre_Doc_and"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "SELECT COUNT(songs_id ) LIMIT 100001 OFFSET 399999163025170014011213153399343667691868262839504575278931672079372940462465239060521195838421594722571144863578666324749051056147000859096497409167054259814"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": "SELECT COUNT(songs_id )\nINNER JOIN (SELECT songs_id FROM sing_contest.songs WHERE id <= 0 ORDER BY id LIMIT 1) AS iNNLONG01LLYSTOPPEDSEARCHDATECASEID1A3X0007B2E4PRIMEMILDB10SOCODT0220F00N06222340WZ0RJ"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "SELECT original_artist , songs.songs_id ;"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "SELECT MIN(sing_contest.rhythm_tempo )\nINNER JOIN (SELECT MAX(*)FROM sing_contest.songs, sing_contest.songs)\n\n AS inErected ON EXISTS (SELECT name FROM sing_contest.songs WHERE id = 1 OR"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "SELECT SUM(songs.songs_id )\nINNER JOIN (SELECT COUNT(*))\n\n AS EXEMPTEDCYCLESVIRONISSAWANDABENIMATUNXASKADOSAKERMELDUZURPIXAROKKIJULIJAYNAAMNODIKEITIDOOTALHAGT"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "SELECT MIN(sing_contest.participant_id )\n\n\n INNER JOIN (SELECT AVG(*)FULL OUTER JOIN sing_contest.participants ON sing_contest.participant_id = 'mok' INNER JOIN sing_contest"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "SELECT COUNT(id )"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "SELECT AVG(songs_id ) LIMIT 215718707812293667871119010973217153328133788486055274322143097992316758535107324594489587611207747254906669350576445209226548072158463902180021127940567074116595177829"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "SELECT original_artist , popularity LIMIT 1;"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "SELECT COUNT(songs.name ) AS Rank\nINNER JOIN (SELECT DISTINCT SUM(*) INNER JOIN sing_contest.participants ON participants.id = ' iNSELE COUNT(songs.name ) A' ORDER BY english_translat"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "SELECT SUM(sing_contest.language )\nLIMIT 102010252312"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "SELECT *\nINNER JOIN (SELECT COUNT(sing_contest.name ))\n\n AS HADANMALIA ON EXISTS (SELECT COUNT(rhythm_tempo )) INNER JOIN (SELECT * FROM sing_contest.songs WHERE language = ' -1"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "SELECT COUNT(songs.language )\nWHERE id <2 LIMIT 3 OFFSET 2"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "SELECT voice_sound_quality , songs.rhythm_tempo \nINNER JOIN (SELECT SUM(english_translation )\n\n INNER JOIN sing_contest.participants ON original_artist <original"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "SELECT voice_sound_quality WHERE EXISTS (SELECT AVG(id ))\n\n\nINNER JOIN sing_contest.participants AS THE ON original_artist <-500001 INNER JOIN sing_contest.participants ON EXISTS (SE"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "SELECT original_artist INNER JOIN (SELECT AVG(english_translation ) AS CINFORTAL)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n AS EOI"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "SELECT SUM(sing_contest.participants.english_translation )\nINNER JOIN (SELECT AVG(*) RIGHT OUTER JOIN sing_contest.participants\n\n\n AS LUCYERPONSUSJURICHUHANBORSHEUNZDALI"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "SELECT AVG(english_translation )\nINNER JOIN (SELECT SUM(*) AS LAYETTE, voice_sound_quality , songs.popularity RIGHT OUTER JOIN sing_contest.participants\n AS"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "SELECT voice_sound_quality , english_translation , language INNER JOIN (SELECT COUNT(english_translation ) RIGHT OUTER JOIN sing_contest.songs\n\n \n\n AS SELECTvos"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "SELECT voice_sound_quality ORDER BY original_artist LIMIT 1 OFFSET 0"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "SELECT COUNT(LName ), LName , Fname ;"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": "SELECT address_1.country INNER JOIN (SELECT city_name FROM address_1.City) AS CityName ON country = 1 ORDER BY country LIMIT 0;"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": "SELECT *\nINNER JOIN (SELECT * FROM address_1.Direct_distance WHERE state = 'R' ORDER BY distance ) ON state <= 1;"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "SELECT LName \nINNER JOIN (SELECT COUNT(Direct_distance.longitude ))\n\n AS iNDMEREBODDSZWALYVQHON7P1K0LLA2N6JXWN8G4NGSW5IOSRpYS3C9mjzUaFqcD"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "SELECT COUNT(Fname )\n\n\nWHERE City.LName <1"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "SELECT city_code , address_1.City.Sex ;"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "SELECT LName WHERE City.LName = longitude RIGHT JOIN (SELECT SUM(state )RIGHT JOIN address_1.Direct_distance AS dist AS TURTEEOS ON City.LName = LName GROUP BY Major OR"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "SELECT LName INNER JOIN (SELECT MIN(*)GROUP BY Direct_distance.state )\n\n\n AS aHiaDizkXJoMlg1hjKTv8aQfFWZ9AINx3pLu0C6Vw2O4q7BbG"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "SELECT COUNT(state ) RIGHT OUTER JOIN (SELECT LName , SUM(*)RIGHT OUTER JOIN address_1.City AS city ON state = 0 ORDER BY longitude LIMIT 1 OFFSET 12675001234544353314893785125560321904252700577542306436408816"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "SELECT AVG(state )LIMIT 10000000508020702004090040010050000100080000000110600010300257577373703530363938336080025045115612135844146728463459579976110292217471823866424746903160895007987272655421510074320405401"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "SELECT COUNT(state ), SUM(state )\nLIMIT 0;"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "SELECT LName RIGHT JOIN address_1.Direct_distance\n\n\n AS ISiBr0fv8h9xw3qmLkXAjQg7Vb4FlR6SJoK5p2uYEaZGIgaWyAAeTnC1UEEygPzDdHs\n\n"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "SELECT COUNT(Fname )\n\n\nRIGHT OUTER JOIN (SELECT DISTINCT COUNT(*)) AS INTELLIGENTAISTSMADREEDWYGODLYJIMBHANGANKUNZAFELITUENNCHIRALONNAPFARMAESAMRAHYDURASILAYEMEHAUMOIDR"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "SELECT DISTINCT AVG(state )\nRIGHT JOIN (SELECT city_name FROM address_1.City WHERE City.city_code = 1) AS name ON state < 10 GROUP BY distance , city2_code ;"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT longitude )\n\n\n AS PAABAYYAAMABACATANFARIENADZASDHAQARDAWAWIAYABAAPEDURANGISNOCALMOPHIMKUMARAUGMAOFLETRODIASTJUDICONEOLAGID"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "SELECT LName INNER JOIN (SELECT AVG(Age ) AS COLLABORATOR)\n\n\n   \n\n\n \n\n AS COLDLIGHTEDJESSEWCHALANCALLINKATFZENBANKPOLAMDUBAHONAPURRUPIMRAYUNAGREYAJAIARADOPISTHAVANGELAYE"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "SELECT COUNT(state )\n\n\n INNER JOIN (SELECT country FROM address_1.City WHERE city_name = 'WALMINGTON, ORANGE STATE: NO' ORDER BY City.city2_code LIMIT 2) ON state < 1 GROUP BY City.state , Age ;"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "SELECT AVG(Major )FULL JOIN (SELECT COUNT(*) FULL JOIN address_1.Direct_distance\n\n\n AS ISKALEDIATE ON EXISTS (SELECT state FROM address_1.City WHERE longitude = 1 ORDER BY City.Fname )"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "SELECT MIN(state )\nINNER JOIN (SELECT DISTINCT COUNT(*) INNER JOIN address_1.Direct_distance AS SECTOR2AASEMORY3ADMINITZERATOR4BANHAT5ACYMP6GHT0KR8C7WYSCHFQT9NX"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "SELECT LName \nINNER JOIN (SELECT COUNT(Major )LIMIT 1)\n\n AS RANKINGHISKOPASHABORATTAJALURAGIANDAMBAFUNAWAYMAFLYADABUKAZAAQRANAGCIFVOLICELIACHLIAWAOSNIKOJAIGIZLAFKAITZT"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "SELECT COUNT(state )\nINNER JOIN (SELECT DISTINCT SUM(*)GROUP BY LName ORDER BY Fname , state )\n\n AS orORADOCATECOUNTRY_1A81422011527355832E6F0BD4BE206712253665293479557828423054265723133718"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "SELECT AVG(Major )\n\n\nFULL OUTER JOIN (SELECT MIN(*) FULL JOIN address_1.Direct_distance ON StuID = 1 INNER JOIN address_1.Student ON state = City.Fname LEFT OUTER JOIN (SELE"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "SELECT AVG(Age )\n  \n\n INNER JOIN (SELECT COUNT(*)RIGHT OUTER JOIN address_1.Direct_distance ON Direct_distance.country = 6582212131178671829018540332734390675163625\n\n\nORDER BY C"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "SELECT COUNT(address_1.country )\n INNER JOIN (SELECT DISTINCT LName ORDER BY Major )\n\n AS SACAURKONDAIDFJDADITEMALISBHARHAIMVILANDORMUTOLANOVWATLASQAMULUMAOIZP"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "SELECT COUNT(country ) AS ZENURALY\nRIGHT OUTER JOIN (SELECT COUNT(*)ORDER BY Sex LIMIT 478151228262513143919078494099643327202360633058809767115043018546175516052989090870774518"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "SELECT DISTINCT AVG(Advisor ) GROUP BY Sex LIMIT 1"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "SELECT DISTINCT AVG(Major ) INNER JOIN (SELECT MAX(*)\nWHERE address_1.state = 1 ORDER BY Sex LIMIT 2 OFFSET 3240025000320000000300500500003089553628602080015337540906599081735277039"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "SELECT MIN(state )\n\n\n INNER JOIN (SELECT AVG(country )) ON EXISTS (SELECT SUM(state ) ORDER BY LName , address_1.longitude );"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "SELECT LName WHERE EXISTS (SELECT COUNT(Major ) RIGHT JOIN address_1.City\n\n\n AS Nrjullokolomh ON Major >state INNER JOIN address_1.Direct_distance ON distance = (SE"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "SELECT DISTINCT SUM(City.Age ) INNER JOIN (SELECT COUNT(*) AS BESIS, MAX(Fname )) ON LName <LName ;"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "SELECT AVG(state )"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "SELECT LName , SUM(country ), COUNT(*)\nINNER JOIN (SELECT *WHERE Fname =1.93433162449390422FULL JOIN address_1.Student ON EXISTS (SELECT *LIMIT 74800)\nINNER JOIN (SE"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT COUNT(LName ))\n\n\n  \n\n AS CHEANGERED ON Direct_distance.longitude = 1RIGHT OUTER JOIN address_1.Direct_distance ON longitude <"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "SELECT SUM(Age )\nLIMIT 1 OFFSET 2032509021"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "SELECT COUNT(state ) AS for\n INNER JOIN (SELECT SUM(longitude ), SUM(longitude )) AS LONGIG_GROUPIFIER ON longitude = 0;"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "SELECT LName FULL OUTER JOIN address_1.Direct_distance\n\n\n  AS rvkj3p2f9o7b97ac4ae78605418bd72da81334102567a5af162348391942fd6df75178843d77156528763632cc1bb06"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "SELECT AVG(City.Major )\n INNER JOIN (SELECT COUNT(*)FULL JOIN address_1.Direct_distance\n\n AS iyvacntxevicr0mcc9lj4f2en5bqs10h7o\n AS eu8zkajp6e3gct"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": "SELECT address_1.latitude FULL JOIN (SELECT SUM(Age ))\n\n\n AS MARTINEDY ON City.Major > city2_code GROUP BY LName ORDER BY Direct_distance.state ;"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "SELECT COUNT(LName )"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT MAX(LName ))\n\n\n  \n\n AS CHEECHKETZISESACHIA ON City.Major = Direct_distance.Fname LIMIT 66955164826392440642878304787133375583618"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "SELECT LName INNER JOIN address_1.Direct_distance\n\n\n  \n\n AS E0X2B7J8C4 ON StuID = 454FULL JOIN (SELECT * FROM address_1.Direct_distance AS ADDRESS, address_1.Dire"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "SELECT AVG(Fname )INNER JOIN (SELECT SUM(*))\n\n\n\n AS LOUISVILLE ON Direct_distance.country <2 FULL OUTER JOIN address_1.City AS ROLEBACONFVQ0NDJK3IWO8R7M\n\n\n"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": "SELECT MIN(state )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN address_1.Direct_distance AS SCTAOLOCODE\n\n AS IISTROSET ON state = 1 ORDER BY Major LIMIT 2 OFFSET 5012027225048"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "SELECT COUNT(Direct_distance.state )"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "SELECT DISTINCT SUM(state )\nFULL OUTER JOIN (SELECT Fname , COUNT(*) FROM address_1.Direct_distance INNER JOIN address_1.Student AS SELLERS AS IOUROIDEMAEDEURACEBHISENRADIAGOTTAJAYUATIN"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "SELECT Fname INNER JOIN address_1.Direct_distance\n\n\n AS vntm6rh5pqk9j4uXlFpuM2VJZUzWLb8P7YBxCgQwBLa0HKTfNyRngo1v3AOeDnI_cG"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "SELECT AVG(Advisor )RIGHT JOIN address_1.Direct_distance\n\n\n AS mslp918109803450784221f3ac2e711012820334638b229975576026121625431947236976173032d4031be836882454c5cf6ca4"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "SELECT AVG(state )\n\n\nFULL JOIN (SELECT LName , Sex GROUP BY City.longitude ORDER BY Major LIMIT 923) AS YOUCLYTERED ON Age = 2 ORDER BY Direct_distance.country LIMIT 31"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "SELECT LName WHERE City.LName = Student.Age RIGHT JOIN (SELECT address_1.Direct_distance.Fname ) AS OJXojkNfMhUKv2Tx0Rm8Lw6C9VpQPz4qZgE"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "SELECT AVG(state )\n\n\nINNER JOIN (SELECT LName ORDER BY Major , address_1.city2_code ) AS ISKP3Zqj4XhkHvF0Q7o5pEbNzBW8lwJgVnMx6LfRmD"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "SELECT AVG(Fname )\nLIMIT 625;"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "SELECT Fname RIGHT OUTER JOIN (SELECT MAX(Major )FULL JOIN address_1.Direct_distance\n\n\n AS foringershikisulchonkohtajouf3paiusnal5gutas2m4ntxivu9qj6r"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT COUNT(Age ))\n\n\n AS e ON Fname < 1 INNER JOIN address_1.Direct_distance ON distance = 'b' ORDER BY state ;"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "SELECT SUM(state )\nLIMIT 250 OFFSET 6403370430004"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "SELECT DISTINCT COUNT(state )\nFULL JOIN (SELECT country FROM address_1.Direct_distance WHERE city_name = 'NONE' ORDER BY city_name , state LIMIT 60) AS DistanceCountERFROMCOUNTRYNAMEELSEWHERECityIDANDcityidbidsIFFULLSCREENGROUPLENGTHSENDINGcounts"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": "SELECT SUM(state )RIGHT OUTER JOIN (SELECT LName RIGHT OUTER JOIN address_1.Direct_distance\n\n\n AS iJBwYcPVKLXZ3FQn2g0kzqjC4oOuW5M9NhGpI8U"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": "SELECT DISTINCT COUNT(Direct_distance.longitude )\nINNER JOIN (SELECT distance ORDER BY Major LIMIT 0)\n\n            \n\n AS NUDEOUSLKALJURGARF_UNIXEDDISTINCTCCROLOTICZN"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "SELECT AVG(state )\nLIMIT 10002 OFFSET 3200001"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "SELECT City.Age INNER JOIN (SELECT SUM(Fname ))\n\n\n  \n\n AS UHLYPIAJARONANASURAYBANKIDKAMUNALATWITBAIMOSHAADDHIBIGYENACHZRODAPRILLIOINISAIMAQNUPAOKULCIRAGLASHV"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "SELECT AVG(Major )"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": "SELECT DISTINCT COUNT(City.state )LIMIT 210010500000305020403001000200040002000000040000000000001000030005000900999999913251114151245247547550018782319223766604858596854998867174621010736808564659538537039058323097277789095710"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "SELECT LName INNER JOIN (SELECT MAX(Age )LIMIT 1)\n\n\n AS WATJOLFOSZYGBABKWAMBERTA_ARDANCHIANVESPURSUBSUBIENYSIZALISUSMACHEADUNETRABLOIDOUNIEUMIOMAEMODTASRINHIFOR"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "SELECT SUM(Advisor )GROUP BY LName ORDER BY Major , Direct_distance.country ;"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "SELECT SUM(Advisor )ORDER BY Major , Age , City.LName ;"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": "SELECT *\n\nINNER JOIN (SELECT AVG(City.Advisor ))\n\n AS OLYMPICS ON Fname = -1;"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "SELECT SUM(state ) AS I LIMIT 10500023205002500010200406090703045752506363815581188354746221719596744741814292639081"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "SELECT COUNT(LName )\n\n\n INNER JOIN (SELECT DISTINCT SUM(*)WHERE Age = 10.35502827311139332268261053203437321345406698463675444976185723252985148899432471905972404257161517866090676496017912"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "SELECT DISTINCT AVG(Advisor )RIGHT OUTER JOIN (SELECT COUNT(*)WHERE country =\n''' ; O-D ' LIMIT 13431901504973802940678937482055167938271110456557142539096090352677187828"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "SELECT COUNT(Advisor )\nWHERE Major = Age INNER JOIN (SELECT Student.Major ORDER BY longitude , City.Sex LIMIT 811)\n\n AS DINhnewnrVy7Gf3J0pjW8PvF4"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "SELECT LName RIGHT JOIN (SELECT MAX(Fname ))\n\n\n     \n\n AS tlndfjk3s9r2o6vbm7g4pqz5tcxh0yi_b1u8wlnKVYIiiWdBZMkaJQXLnHmNrcGiaU"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": "SELECT SUM(state )\n\n\nRIGHT OUTER JOIN (SELECT AVG(Advisor )) ON City.Fname = 0 RIGHT OUTER JOIN address_1.Student AS bkndcntaXORjBARASQ0LLZw6JN2bLHgKpD5q"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "SELECT DISTINCT SUM(Direct_distance.distance )\nINNER JOIN (SELECT DISTINCT state , MAX(Major ), city2_code , AVG(City.state )) ON City.latitude = Student.distance ORDER BY Direc"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "SELECT address_1.country RIGHT OUTER JOIN (SELECT AVG(Age )FULL JOIN address_1.City ON EXISTS (SELECT address_1.Direct_distance.state FROM address_1.City) INNER JOIN (SELECT AV"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "SELECT AVG(Major )WHERE City.LName \n\n\n> Major INNER JOIN (SELECT city1_code RIGHT OUTER JOIN address_1.Direct_distance AS BASICEVITYKITESIAHEDARABANGUNADIMAL\n\n\n \n\n"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "SELECT LName RIGHT JOIN (SELECT COUNT(*), SUM(Fname ) ORDER BY Major , Fname LIMIT 4163850105800702344903540348847981433990109041357379780497954396532185517763695114660754567"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "SELECT DISTINCT AVG(Advisor ) LIMIT 37522283640782034291710886048112677015413006714554619581638854470963037337908254798669027646953"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "SELECT MIN(state )\nLIMIT 3187174548505830985510708977883933202327403579294768789599011259094"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "SELECT MIN(state )\nLIMIT 36745471240583430902820490961723273957160159194670378750252907781136146375247499653576339760"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "SELECT LName RIGHT JOIN address_1.City\n\n\n AS eMtRnxBXkDyPq8vVzFQYK7E5jb6hf9WLZg2UYSw3uNl4Ly0rTmIaGpOeoJ1sHc\n\n\n AS eM"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "SELECT MIN(state )\nRIGHT OUTER JOIN (SELECT SUM(*), LName RIGHT OUTER JOIN (SELECT AVG(StuID ) INNER JOIN (SELECT DISTINCT COUNT(state ))\n\n\n    \n\n AS MINTEKJANIMAL_POWER"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "SELECT AVG(sid )\nLIMIT 10209060472336164538282529307033634037125710674650548048997917116439771524873559531475190853213851002"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "SELECT Reserves.sid INNER JOIN (SELECT DISTINCT MAX(Boats.bid ), Boats.color WHERE boat_1.name < sid )\n\n\n AS TENJE ON EXISTS (SELECT SUM(*), age , day );"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "SELECT Boats.age INNER JOIN (SELECT MIN(Boats.bid ))\n\n\n  \n\n AS TOYGIEABABIASTAKOROKALAYITUNJOLVIADHAFIRADUJAEDAFZATANNAHILACCHELIDEMENIOSETAMOTAKTARIMOVCASHELEXOCTOB"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "SELECT MIN(sid ) AS TENTA RIGHT JOIN (SELECT SUM(*)RIGHT OUTER JOIN boat_1.Boats\n\n\n AS KETTAHVJWAAKTHUVXQBAOTSSPIAYEZLAPGAYATTEISDIFLSACAGONLYFITUNCEARUIMOLECAS"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": "SELECT age , Sailors.color GROUP BY Reserves.age LIMIT 220050454400011600051001040011120000090000600144048676034173009064702680098245813221815749923354337277795756696253955846554361903305907"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "SELECT Boats.age RIGHT JOIN (SELECT SUM(Boats.bid )RIGHT OUTER JOIN boat_1.Boats\n\n\n \n\n AS NALVADORATIKAJAMAGABKHAWARANCHIAHGACAYELIZTAASMAEDELECODESONUBOTITMUN"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "SELECT COUNT(sid )\nINNER JOIN (SELECT SUM(*) RIGHT OUTER JOIN boat_1.Boats AS boa_2 AS gullboat ON color = age ORDER BY sid , day )\n AS PASTERTYNORINGCOUNTEDFORJOUISTSIENESH"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "SELECT MIN(sid )\n\nGROUP BY Reserves.color , Sailors.day LIMIT 16304510222350"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "SELECT age , Sailors.color INNER JOIN boat_1.Boats\n\n\n AS forboatmannigaliajokatmagimakarrandbawelpkukammaeisirwapiouilenyasvadavusanemzayivgulkaetnekehfikryestutinogdotu"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "SELECT Reserves.day LIMIT 113627131018202905923167050480125263580583379286790383054227517461005737681940889812640076201078653432"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT AVG(Boats.day ))\n\n AS LISCHFENKURDERS ON EXISTS (SELECT COUNT(*))"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "SELECT MIN(Reserves.day ) AS BO ORDER BY Reserves.color LIMIT 2170008231043121838503439422022242913583357884816373569496027304065631475015632190421157655366400879966784589082577"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "SELECT AVG(sid )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN boat_1.Boats AS mnf ON age = color INNER JOIN boat_1.Boats ON sid = name GROUP BY name ORDER BY day , sid )\n \n AS INNER ON"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "SELECT *RIGHT JOIN (SELECT Reserves.day INNER JOIN boat_1.Boats AS DAYiAATaDh0jGaeKgVxM5b8X9fU2yP4JpCk\n\n\n  \n\n AS TOWARDERFULNESSY ON EXISTS (SELEC"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": "SELECT Reserves.sid , Sailors.day WHERE age \n\n<-1\n\n INNER JOIN (SELECT MIN(Boats.bid ), AVG(Sailors.name ), Boats.rating , Sailors.name RIGHT OUTER J"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "SELECT Reserves.age WHERE rating > name LIMIT 11 OFFSET 230005322901382730234845253314592640803499773560581178951213754631"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "SELECT Reserves.day GROUP BY Sailors.sid ORDER BY day LIMIT 154225241700022506744882300397036386480570160202913777433272610537518283740355614191298541665669060531305515687621100743115849"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "SELECT AVG(Boats.color )INNER JOIN (SELECT COUNT(*)FULL JOIN boat_1.Reserves ON color = age RIGHT OUTER JOIN boat_1.Boats\n\n AS MENALEXVEVEZOROSQAITLONXG"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "SELECT Boats.color , Sailors.day RIGHT OUTER JOIN (SELECT COUNT(age )INNER JOIN boat_1.Boats ON sid = age INNER JOIN boat_1.Boats ON color = 1.0133272387249021\nLIMIT 1046123057187816"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "SELECT COUNT(Boats.name )\nGROUP BY Reserves.bid ;"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT AVG(sid )\n\n\n    \n\n INNER JOIN boat_1.Boats ON Sailors.bid = Boats.name RIGHT JOIN (SELECT rating , MAX(*), AVG(rating ), name )\n\n\n    \n\n AS oqt_1 ON sid"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "SELECT SUM(Reserves.age )INNER JOIN (SELECT MAX(*)FULL OUTER JOIN boat_1.Boats AS Boatssktrfspjxg6cKHmVbYoQwC3fUATdSq0eG2n4rz8PZR7l9uN5iJ"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT AVG(sid )\n\n\n INNER JOIN boat_1.Boats ON age = 1;"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "SELECT AVG(Boats.age )\n\n\n INNER JOIN (SELECT COUNT(*) ORDER BY Reserves.bid , Sailors.day )\n\n AS PORESINISJOHKAYiTjLHn9Bkq0m8lE1xwVvQX2cC5pFh7"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT AVG(sid )\n\n\n INNER JOIN boat_1.Boats ON Sailors.rating = 420000050704043"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "SELECT AVG(Boats.age )\n\n\n INNER JOIN (SELECT COUNT(*)FULL OUTER JOIN boat_1.Reserves ON color = 4000634280113502637770046643860458878223665140424668907\n\n\n INNER JOIN (SELECT COUNT(*"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT AVG(sid )\n\n\n    \n\n INNER JOIN boat_1.Boats ON color <boat_1.Boats.day RIGHT OUTER JOIN (SELECT age , AVG(sid ) WHERE Sailors.color = ' -u' ORDER BY name LIMIT 1"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "SELECT COUNT(age )GROUP BY Reserves.color , age ORDER BY Sailors.bid LIMIT 1143416;"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "SELECT Boats.sid ORDER BY Reserves.day LIMIT 3;"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "SELECT AVG(sid )\nWHERE Sailors.day = 2 INNER JOIN (SELECT COUNT(*) INNER JOIN boat_1.Boats ON rating > 0 ORDER BY Reserves.bid , name ) AS uyddfrythwcjonvakpstjehngt"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "SELECT Reserves.age LIMIT 1904104325132912672722184833283037004755265063176501577597246077497340594214454488158739208364169899951007114636962013854213043652366563472125251335807467290727127818"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": "SELECT Boats.age INNER JOIN (SELECT AVG(Boats.bid ))\n\n\n AS RACEHOLD ON Sailors.color = age ;"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "SELECT Boats.day INNER JOIN (SELECT AVG(Boats.name )\nINNER JOIN boat_1.Boats\n\n AS YURIDKADHASHIAISATSUAYMALIMSSPENANAMEYAPUSHITUNARANDEDRACOLAGFANTUNAVICODAIRAGLEBASTIK"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "SELECT Reserves.age INNER JOIN (SELECT SUM(Boats.bid ) AS EQWV WHERE Boats.color = -2\n\n\nLIMIT 54510573498737304815705518384724121475774226132717006590222050330140"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "SELECT MIN(sid ) AS LATER, name INNER JOIN (SELECT SUM(*), Boats.name RIGHT OUTER JOIN boat_1.Boats\n\n\n AS ouwn5J6Q2V8p7FbjP3lxhcv4rqXiKdZD9gW"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "SELECT AVG(Boats.name )\nRIGHT OUTER JOIN (SELECT * FROM boat_1.Boats WHERE Boats.age <= 1 ORDER BY Boats.rating LIMIT 30) AS kwABAHASLIMITEWALLSKEDSHIPMAJORPATRICISCURVEBOATS ON boat_1.bid = 0 ORDER BY Rese"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "SELECT Boats.sid \nINNER JOIN (SELECT MAX(Boats.age ))\n\n AS SIEUTENANCE ON Reserves.color < 1 LIMIT 4389839471318205097297817572515872223445554114070774380273033851042162688604535"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "SELECT MIN(sid ) AS BANNERJAMESHILLPITYKOVISKOFATOBABOTZMOSCALNEXRASSCOTTSAURVIMMAUSCHIREVOLLONLYUACQWADDAVIDSKULAVTAKER\n\nLEFT JOIN (SELECT MIN(sid )) AS BANNERJAMESHILLPITY"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "SELECT Boats.sid \nINNER JOIN (SELECT MAX(Boats.age ))\n\n AS RONOLASZWYGUNDIMANZEALANDENETERVARISIAUNAIDULADAMEXILODAZELORATICHARBACUSOSUBANTIYAFEDIFDAKURINBAYSWEBISHTOBJAY"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "SELECT Boats.sid RIGHT JOIN (SELECT AVG(Boats.bid ))\n\n\n   \n\n AS STOLEN ON EXISTS (SELECT SUM(age )) FULL OUTER JOIN boat_1.Sailors ON color = Boats.sid ORDER BY age , s"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": "SELECT Boats.name RIGHT OUTER JOIN (SELECT Sailors.color LIMIT 1)\n     \n\n\n\n AS NINE ON EXISTS (SELECT DISTINCT COUNT(age ) INNER JOIN boat_1.Boats AS BOAT2 ON age = Boats.bid GROUP BY boat_1"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "SELECT Boats.age RIGHT JOIN (SELECT Sailors.bid ) AS LORRADONUSANZERAFASTBATOSDUJOCAFACQOTMAYGKUNTHLXBAVY3AMPLUTTOEW1ASILP5BLINALI7ELLEMYMAH4CID0SA2NYS6TIM"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "SELECT AVG(Boats.rating )\n\n\n INNER JOIN (SELECT COUNT(*), SUM(*)) ON Boats.bid  < 2 GROUP BY Reserves.day ;"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "SELECT AVG(Reserves.rating )"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "SELECT COUNT(sid )\nINNER JOIN (SELECT SUM(*) ORDER BY Reserves.age , sid , rating LIMIT 3000431302636454125283860874820402216354633104329771578190413727571734557923125049087"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "SELECT AVG(Reserves.rating )INNER JOIN (SELECT COUNT(*)FULL OUTER JOIN boat_1.Boats AS BOATSHUTTER ON age = 1 INNER JOIN boat_1.Boats AS BOTSTOCKTSSASBOATHUCCONDSASSIFCACHEVICTIMAJ"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "SELECT AVG(sid )\nWHERE Sailors.day = 2187242848474933"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "SELECT AVG(sid )\nWHERE Sailors.day = 0.0006151822333814"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "SELECT COUNT(sid )\nINNER JOIN (SELECT SUM(*) ORDER BY Reserves.name , name LIMIT 44832141310362542123849303399377870222835271805119584600162450887467264039762087154780642360"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "SELECT MIN(sid ) \nINNER JOIN (SELECT COUNT(*)GROUP BY Reserves.name LIMIT 2 OFFSET 4275037394535672513243633308542117717571658461022406679603899644768261228976576194914157848"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "SELECT Boats.color ORDER BY Reserves.color LIMIT 71701131018203428587723504925223675332738746440566035247926461157761"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "SELECT Sailors.name , age ;"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": "SELECT Boats.age , age INNER JOIN (SELECT COUNT(name ) ORDER BY name LIMIT 2)\n\n\n AS ESSENCE_MONDAY ON Sailors.day = 1;"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "SELECT Boats.color \nINNER JOIN (SELECT AVG(Boats.color ))\n\n AS ANGRYWALKER ON Reserves.day <-82377497600990995737338539271835871329384479154764229767167545209830583680554025"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": "SELECT DISTINCT COUNT(sid )\nLIMIT 1125489070353730331250782518170040278813340155852844809523241075774621"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "SELECT SUM(sid )\nINNER JOIN (SELECT Boats.name , MAX(*) AS NATIONALBORBS RIGHT OUTER JOIN (SELECT COUNT(boat_1.rating ), boat_1.rating )\n\n\n AS INNER ON name = 0 INNER JOIN (SE"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": "SELECT Boats.color , age RIGHT JOIN (SELECT SUM(Reserves.day )\n\n\nORDER BY age \nLIMIT 93590652537261715364599161839209775402748287764336743440157307929428049098742476148846103850"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "SELECT Boats.color \nINNER JOIN (SELECT AVG(Boats.color ))\n\n AS VHILPANDAASIAKARAJOSAMONISSPALATARTAHAENIMARIODSURITUQAKLORFISHEDOCYTAYCUBEAVEMAGOTIYANOVETECRICEDIGBAC"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "SELECT Reserves.sid FULL JOIN (SELECT MIN(color )RIGHT JOIN boat_1.Boats\n\n\n AS MAHFOSQDATASJ ON EXISTS (SELECT sid FROM boat_1.Boats WHERE age = 1 ORDER BY rating , day ) ORDER BY"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "SELECT AVG(sid )\nINNER JOIN (SELECT Boats.age , age RIGHT OUTER JOIN boat_1.Boats\n\n AS MOLMATITAMALAHADARAZARANKADURANAI\n AS ABIDBAIRYARDORGASNASHEDENISIMANSKIEMAK"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "SELECT Boats.rating LIMIT 62737146629121047283633577513772578224630654317595526234880641654680011725045354440983109421858887431000539190761296779637083155634243210084901062973603820471410"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "SELECT AVG(Boats.rating )\n\n\n INNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN boat_1.Reserves ON age = 0 RIGHT JOIN boat_1.Boats ON boat_1.Sailors.rating < rating )\n\n\n AS HANDSONLENFORDJOSEPHIS"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "SELECT AVG(sid )\n\n\n     LIMIT 21135042 OFFSET 1125251710403900232899145778164537272660321918597620543100049994855343665664433708540907221330496797128068941176498902987167150150963553753888112558"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "SELECT Boats.sid LIMIT 6144567895 OFFSET 80112252785"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": "SELECT DISTINCT COUNT(sid )\nINNER JOIN (SELECT COUNT(day ))\n\n AS KADYNAUJITISHAHANDARAGASADALANGARAPATAMALAKASHMURISHYAANADAVAGIDIMENELANDACABILIJAYAWAVINDACHODIBAKCHIRGAINPOTBRAZ"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "SELECT Boats.age LIMIT 735261709948602915678847163627403918011211506675346414762300774944332565873819210005167305869456832205737797225524134610953207427083201552274269380482917903597994767162839"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "SELECT AVG(Reserves.bid )\n INNER JOIN (SELECT Boats.bid ) AS LIVEDY ON Sailors.bid =2FULL JOIN boat_1.Boats ON age = color INNER JOIN boat_1.Boats ON day = 1;"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "SELECT SUM(sid )INNER JOIN (SELECT COUNT(*))\n\n\n AS EYHZWCHFUNVJYSNDQX2KL3PFE9AHS6B1LY7RYGFRETAA4ED0PRANATUE8MUCDACYDQBJJRVOEC5MEIAIAMCKRJVHLUVNVMCVDBAY"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": "SELECT AVG(Boats.name )\n\n\n  LIMIT 317134546144419160110881222302757288737356933422049602440771850637538560039482311802654"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "SELECT AVG(Boats.color )\nWHERE Boats.color  IN (SELECT COUNT(*) ORDER BY Sailors.name , name LIMIT 2);"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "SELECT Boats.color LIMIT 3"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "SELECT Boats.rating LIMIT 12012814098343024363770234838405727441813203910677912786816009977608833221798542989762675589515871143356625565560032504719084367647410046309658669455300082859032485373038273640"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "SELECT AVG(Reserves.color )\nLIMIT 10 OFFSET 5103099013300408089769572777365511143515257598493795387064295090224432191778586684281648186772138846348612687360500039088100450004201200103033"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "SELECT Boats.age LIMIT 8552878232677104054008837302216586033151727190311573218805929753499360148854744843898649535763969725049071283458971008462113209641871405972463"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "SELECT COUNT(sid )\nLIMIT 1025121849203213394475105816781537142833272622462938541768304036790761911634543459555023473587606673705788957621017780486561"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "SELECT MIN(sid )RIGHT JOIN (SELECT SUM(day )LIMIT 1 OFFSET 10000013202560357050011280000824063055174501141829200330075396004001005675090102726657888124879447480407799732246155919093120"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "SELECT Boats.age INNER JOIN (SELECT AVG(Boats.age ))\n AS WY1H2W6LJ3KD9ZAC7QF8P0U5APX4CH14AAECTBAASCIAYDALTYPHINOAAMUNGAATOSITOISIHAILOKARNELGRAV"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "SELECT Reserves.color LIMIT 317026780037163817151377273375183670431045992819295820643522602374303487246748791298396573015780902275544258974688597650621204069021104125269537560096163847274917"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "SELECT Earpads FULL OUTER JOIN (SELECT MIN(Price )RIGHT OUTER JOIN (SELECT SUM(Headphone_ID ), Headphone_ID ) AS DIOKEYSIZE ON Construction = 0.0FULL OUTER JOIN (SELECT * FROM headphone_store.headphone WHERE"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "SELECT MIN(store.Date_Opened )"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": "SELECT MIN(stock.Headphone_ID )LIMIT 3500416812503219216486424962098362704407204710338049302534726099395523443575791354666717787042135381829011100056974210081546100316614745591487285312775716098"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "SELECT MIN(stock.Model )\nWHERE Headphone_ID = (SELECT SUM(*), Earpads LIMIT 2) RIGHT JOIN headphone_store.headphone AS CODEL AS tockjouipolkteilenchopriflheinbeldnwgntf"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "SELECT MIN(store.Headphone_ID )\n                      \n INNER JOIN (SELECT COUNT(*) GROUP BY Name LIMIT 2 OFFSET 858325078229930331040871570384823161425"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "SELECT MIN(stock.Quantity ) AS of LIMIT 3125;"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "SELECT MIN(store.Headphone_ID )\n\n\nGROUP BY Driver-matched_dB \n\n ORDER BY Class LIMIT 1;"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": "SELECT MIN(stock.Model )\n                          \n\n\nINNER JOIN (SELECT Neighborhood ORDER BY Headphone_ID )\n\n AS WKNDaDjE2QrFq5JpV"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "SELECT Earpads \nINNER JOIN (SELECT Headphone_ID )\n\n AS LOUXJYNGHOTVATBACALGONDS ON Store_ID = 0"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "SELECT Earpads WHERE Store_ID = 1006"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "SELECT SUM(Headphone_ID ), Headphone_ID , Model GROUP BY Driver-matched_dB LIMIT 2192118822290818482317095770476727581043803416192877650139754532203059249655257915875084133699492637"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "SELECT Price INNER JOIN (SELECT SUM(Construction ))\n\n\n AS HOMESTARANUS ON Name < 31 FULL JOIN headphone_store.headphone AS ckirby0137229973126675332878497470395734171077"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": "SELECT MIN(stock.Model )WHERE Store_ID = Date_Opened INNER JOIN (SELECT Headphone_ID GROUP BY Name )\n\n\n AS The ON Model <-1.000032106498366857003350421847111344125822"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "SELECT Earpads LIMIT 715221343"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "SELECT MIN(store.Headphone_ID )\n\n\nRIGHT OUTER JOIN (SELECT AVG(*) AS DICTIONAL WHERE Headphone_ID = 0 LIMIT 1 OFFSET 2000431343555606540221648709050285344203719090332105725647500453927331413"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "SELECT Earpads RIGHT JOIN (SELECT Headphone_ID )\n\n\n   \n\n AS SOUNDBOX ON Parking > 4RIGHT OUTER JOIN headphone_store.headphone AS mwpn3t1nz4vWgjfGxUoM6P8C"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": "SELECT MIN(stock.Price )\nINNER JOIN (SELECT Earpads , SUM(*))\n\n   \n\n AS PICKED ON Date_Opened > 84801021617090652000024904733304037104510000063488300936290723894FULL OUTER JOIN ("
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "SELECT Earpads WHERE Store_ID = 113070671448803565.6GROUP BY Headphone_ID \nLIMIT 400008500332297642538117827172960472834455499770026165842133988211740240955687615185710075593630961"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "SELECT Earpads LIMIT 54537012318581230709025172895167513402027221934604906159821053697333500298738775439786555676410432150724688052201461114578810176973125000532103995610084701762686253779131812"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": "SELECT MIN(Class )\nINNER JOIN (SELECT Earpads ORDER BY Date_Opened , Quantity LIMIT 72490443211364810890319461316343958571518141749654029376785239943006300083501794569306022203870"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(Model ))\n\n\n       \n\n AS EADJKF4A5B2ND9XAT7Y3Z8HV0LSU6P1SLCQWjE_yqwchTgvpGuOiRfbNdLmIeMz"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(Headphone_ID ))\n\n\n AS MCELLATAANIABANKING ON Name = 0 INNER JOIN headphone_store.headphone ON store.Class <= (SELECT DISTINCT Price FROM headphone_"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "SELECT Earpads FULL OUTER JOIN (SELECT MIN(Price )FULL OUTER JOIN headphone_store.store\n\n\n AS and AS Theses ON Headphone_ID = store.Name ORDER BY Store_ID , Price LIMIT 4 OFFSET 1) ON Earpads >"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "SELECT SUM(Headphone_ID )\nGROUP BY Model ORDER BY Class LIMIT 1220482360751501307280240018387450127037115527464067959917359080843141619076311022896521"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "SELECT *\nINNER JOIN (SELECT Price RIGHT OUTER JOIN headphone_store.store AS tjv1tfratioaALV9W2PJ5A10K8G7UNEQ4M3DzZBfIbC0uOyx6HgqrkLnXFdY"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "SELECT Name INNER JOIN (SELECT Name RIGHT OUTER JOIN headphone_store.store\n\n\n      \n AS TheEndermanFrog2AiQdG6mwvVqZ1bI3uKMJf7YXDyC5gP8T4Hz9nR"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "SELECT Name LIMIT 112036283037483960973824135823335714552617115090990045407022791098927421916884489818687329542576935490511286566566415953462105472512010963203096200000437947510032135960432387393611503855"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "SELECT DISTINCT SUM(stock.Price )"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "SELECT COUNT(Headphone_ID ) INNER JOIN (SELECT Headphone_ID )\n \n\n AS LENGLYKONNEVOLEWSTARTRODANZATAIMAMADJISCOREELMAYETALBOPHASMAIFQUVAFITNAHAOCHNAPOTHEGULIANEKIOL"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "SELECT DISTINCT AVG(Model ) GROUP BY Parking LIMIT 1;"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "SELECT COUNT(store.Model )\n                          \nWHERE EXISTS (SELECT * FROM (SELECT headphone_store.Name , Headphone_ID ) WHERE Name = 0 ORDER BY Name LIMIT 2)"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "SELECT COUNT(Construction )ORDER BY Parking LIMIT 2 OFFSET 1"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "SELECT AVG(stock.Headphone_ID )"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": "SELECT Headphone_ID INNER JOIN headphone_store.store\n\n\n AS ishebumelzf0v4r5ZkXL6Fg7iW9aYxC1PlwAQcJqyKV2TU8RhMpGjIoO3mHdBtNu"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": "SELECT DISTINCT SUM(stock.Store_ID )\n\n\nLIMIT 4380150336049363700785764487069586514181535222516204230870161059454439239904210008475597807540961167931777345632124626953299277909762443190811283313"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "SELECT Headphone_ID INNER JOIN headphone_store.store\n\n\n AS OFHIGCZL1R4G8vUqlM3Q0KW9xuXfBkrT6g2hEegNbIdz5DYpAcJ7joVuhsP_mOi"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "SELECT AVG(stock.Quantity )\n\n\nINNER JOIN (SELECT SUM(*) LIMIT 9500 OFFSET 1080040006346099975036336432140023678912001219381316152501782439376598407769266843175518052066293088454958"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": "SELECT AVG(Construction )INNER JOIN (SELECT Headphone_ID )\n\n\n AS BRADENZAASJUATEMLIMMAONIABETTERIANY1 ON Model < 12.6GROUP BY Driver-matched_dB , Store_ID , Pa"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "SELECT MIN(store.Headphone_ID )\n\n\nGROUP BY Date_Opened ORDER BY Name LIMIT 1010220133194830373913442038351277477525572364672616271778721540596902114632245621504914877084453489411860"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "SELECT AVG(Construction ) RIGHT OUTER JOIN (SELECT Earpads , Parking FULL JOIN headphone_store.headphone\n\n\n AS WORDEDMEMBERIDELAYS ON Construction = Model ORDER BY Name LIMIT 1 OF"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "SELECT Earpads FULL OUTER JOIN (SELECT COUNT(Date_Opened ))\n\n\n AS isumdungesfuhllmnggakthogelitenlohjtldnolodegkofzamukcwauhntonndphexacqsadomneusbvltirseasimpsotrtsi"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "SELECT Headphone_ID , Name RIGHT JOIN headphone_store.stock AS FVJfvrLqK5QN\n\n\n  \n\n AS MESSAGES ON Store_ID = 1 INNER JOIN (SELECT Headphone_ID , Name R"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "SELECT MIN(store.Quantity )INNER JOIN (SELECT Price )\n\n\n AS NOLAN ON Date_Opened > 811401260963 RIGHT JOIN headphone_store.store AS wlan2 ON store.Quantity = (SELECT * FROM hea"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(Model ))\n\n\n     \n\n AS WALLORLD ON Name = 124050553625442043155835959917290897660128221627091FULL JOIN (SELECT COUNT(Model )"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "SELECT aan_1.year INNER JOIN (SELECT * FROM (SELECT email ) AS t WHERE EXISTS (SELECT Author_list.name ORDER BY name , name ))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(author_id )\n\n\n INNER JOIN (SELECT author_id FROM aan_1.Author) AS IDENTITYID ON name = 'Author';"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "SELECT COUNT(cited_paper_id ), aan_1.email , COUNT(*), cited_paper_id , email , name ;"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "SELECT DISTINCT SUM(Author_list.venue )\n\n\n    \n\n INNER JOIN (SELECT AVG(Citation.cited_paper_id ))\n AS BANNERPOTBARKDUASEMYOLITEFORDEALERSIAWACAAHBAJOSTEXFITXQSZ"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "SELECT MIN(Author.title )GROUP BY Citation.cited_paper_id , aan_1.name ;"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "SELECT venue WHERE name <= 1GROUP BY paper_id ORDER BY author_id LIMIT 3;"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "SELECT Paper.paper_id INNER JOIN (SELECT MIN(Paper.paper_id ))\n AS KIAKURAAJAMISSAUHARIREENAN ON EXISTS (SELECT MAX(*), email )\n\n INNER JOIN aan_1.Paper AS VEDICATONIOSO"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "SELECT Paper.venue RIGHT OUTER JOIN (SELECT MAX(email ))\n \n\n AS LESVANJEMETTEKATREENISUMRUNUSFALIFADITILUTIMPAPODEXLASBACIDEDNICELAYSLAMOTERMANDINGHOMOBSUFTOLINIAAORG"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "SELECT COUNT(cited_paper_id );"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "SELECT MIN(Citation.name )\nFULL JOIN (SELECT Paper.cited_paper_id , name WHERE Citation.title =1)\n\n AS BULLETICUS ON EXISTS (SELECT MIN(Citation.name )\nFULL JOIN (SELECT Paper.cited_pap"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "SELECT SUM(Citation.email )\nWHERE Citation.paper_id = 1\n\n INNER JOIN (SELECT Paper.author_id ) AS MESSAGE1G4A8IONAAV6FJUAM2QXMEXC3IA5CET9D7ADHETBKYZN0"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "SELECT MIN(Citation.venue )   RIGHT OUTER JOIN (SELECT Citation.venue )\n\n\n AS VITAALORIANISIABOLASMIDLEWATERGUTVESTREYZJETSAATRIXIFEDIRINPESENOTTIMUUNICHEFEMOONNOS"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "SELECT SUM(Citation.cited_paper_id )"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "SELECT SUM(author_id )FULL JOIN (SELECT MIN(*)RIGHT JOIN aan_1.Paper\n\n\n    \n\n AS RUMORAUNYJACKETON ON EXISTS (SELECT * FROM aan_1.Paper AS pipername, aan_1.PaperWHERE name = 'a' OR"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "SELECT MIN(Citation.venue )\nFULL OUTER JOIN (SELECT MAX(*)RIGHT JOIN aan_1.Author AS R010030A80006D6020231047285827295315B224062EC9C4BA2FF3JW4543F2521EF7785194918503632E746338939"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "SELECT AVG(Author.paper_id )\n\n\nFULL JOIN (SELECT SUM(*)LIMIT 0 OFFSET 23193029138912141040229715904770237824007520331101574217881934942760954466541626255312580390828776745"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "SELECT MIN(email )\n\n\n    \n\nGROUP BY Citation.cited_paper_id ORDER BY Author_list.venue LIMIT 1134010902;"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "SELECT MIN(Author.author_id )"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "SELECT Paper.paper_id GROUP BY Citation.email "
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "SELECT SUM(Author.email )RIGHT OUTER JOIN (SELECT MIN(*)FULL JOIN aan_1.Paper\n\n\n \n\n AS INITIALITY ON EXISTS (SELECT * FROM aan_1.Citation, aan_1.Author_list LIMIT 2 OFFSET"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "SELECT Paper.paper_id GROUP BY Citation.email LIMIT 2 OFFSET 3"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "SELECT COUNT(Paper.email ), author_id , cited_paper_id , email ;"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "SELECT DISTINCT SUM(email )"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "SELECT MIN(Author.author_id )FULL JOIN (SELECT SUM(*)GROUP BY title , Citation.cited_paper_id LIMIT 54738205518393075191617111036971337602449335765644869281527855090262979091128"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "SELECT SUM(Citation.cited_paper_id )"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "SELECT AVG(Paper.name )"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "SELECT address , address RIGHT OUTER JOIN (SELECT SUM(Author_list.cited_paper_id ))\n\n\n  \n\n AS SELECTSERICIENTISATIONEUROPEUSPENSESCEOLATEDACONDAADOIDOCASKAMARANITIOSU"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "SELECT SUM(Author.paper_id ) LIMIT 0"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": "SELECT MIN(Citation.email ) RIGHT JOIN (SELECT SUM(cited_paper_id )) AS CITERIAYZEDRIGUDE1FID0HOCB6E9A7DAD1913184950302620C2SENOVATECXIS01PVAAIYSLSJNQUEACIPG3K8W5"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "SELECT COUNT(Citation.title )\n\n\nGROUP BY Author_list.paper_id ORDER BY Citation.cited_paper_id , cited_paper_id , email ;"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "SELECT aan_1.title LIMIT 1 OFFSET 0"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "SELECT AVG(Author.email )LIMIT 5471267455718483310360150342035385575242790404916882326178954328762219144430462596667958985963377715991365100632147448846480732972155394712064583186078367057"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "SELECT address , aan_1.name ;"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "SELECT MIN(Citation.cited_paper_id )\nWHERE Affiliation.email > Citation.year ORDER BY aan_1.venue LIMIT 1 OFFSET 3"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "SELECT SUM(Author.cited_paper_id )\n\n\nFULL JOIN (SELECT MIN(author_id ))\n\n \n\n AS OTAZURGYJOLPICITORIAFAWSAUNRUKATLAVVAMETONRABOSNAULOGOTAHALOMIDABANTILIMADAS"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "SELECT AVG(aan_1.cited_paper_id )\nINNER JOIN (SELECT SUM(*), author_id , cited_paper_id )\n\n  \n\n AS ISHINGONSENALA ON EXISTS (SELECT * FROM aan_1.Citation WHERE name = 'Kel"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "SELECT MIN(aan_1.year )INNER JOIN (SELECT SUM(*)FULL JOIN aan_1.Paper\n\n\n AS DADBEN ON EXISTS (SELECT Paper.paper_id , email ) INNER JOIN (SELECT SUM("
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "SELECT MIN(Author.author_id ) AS BORNEAUN, COUNT(*)\nINNER JOIN (SELECT SUM(email )) ON EXISTS (SELECT * FROM aan_1.Paper WHERE name = 'Womens' GROUP BY title ORDER BY email )\n\n INNER JOIN aan_"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "SELECT Paper.venue GROUP BY Citation.author_id ORDER BY venue LIMIT 2 OFFSET 1"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": "SELECT MIN(Author_list.name ) ORDER BY Paper.cited_paper_id , cited_paper_id ;"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "SELECT Paper.paper_id \nFULL OUTER JOIN (SELECT SUM(Paper.title ) INNER JOIN aan_1.Author AS fhcn ON email = 1 INNER JOIN aan_1.Paper AS daeon ON paper_id > 0 LIMIT 6)\n\n \n\n\n"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "SELECT Paper.paper_id INNER JOIN (SELECT * FROM aan_1.Author) AS name ON aan_1.name = Author_list.venue INNER JOIN (SELECT paper_id ) AS idp ON aan_1.title = Paper.cited_paper_id INNER"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "SELECT venue LIMIT 567;"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "SELECT Paper.paper_id INNER JOIN (SELECT COUNT(Paper.name ))\n \n\n AS ELWJHATQFZMOCU7IAGV9X6K1ASCE3B5A17E4C2D0CBAAFA3953BD8385042BF44776085403688953389555846"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "SELECT AVG(affiliation_id )INNER JOIN (SELECT author_id )\n\n\n\n AS LITTERYJUERTAIMAN1H8M7B0F2SH9DQEIDOC6V3C4CAZKJVBRGHGWISAAVAHAIAMNETROOLOIABAAASP"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "SELECT AVG(Author.email )\n\n\nRIGHT JOIN (SELECT COUNT(*)WHERE Paper.paper_id = 469462560431711671827223874392340480154261619373093121020907093657991\n INNER JOIN (SELECT"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "SELECT SUM(cited_paper_id )\n INNER JOIN (SELECT COUNT(*) FROM aan_1.Author, aan_1.Paper, aan_1.Citation, aan_1.Paper, aan_1.Citation, aan_1.C"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "SELECT AVG(cited_paper_id ), Citation.author_id , MIN(*), SUM(venue )\n INNER JOIN (SELECT * FROM aan_1.Author, aan_1.Author) AS ntolle ON venue = 1;"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "SELECT Paper.paper_id GROUP BY Citation.venue LIMIT 1"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "SELECT aan_1.Author_list.year ;"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "SELECT MIN(Author.email ) WHERE Paper.venue =1\nINNER JOIN (SELECT MAX(Paper.name ), COUNT(*)FULL OUTER JOIN aan_1.Citation ON cited_paper_id = email INNER JOIN aan_1.C"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "SELECT venue RIGHT OUTER JOIN (SELECT name )\n\n\n\n      \n AS ctlrkjzgvf4o9d11q6u3hx5b39w8i2ndc1s0e33ac57bb8894ab7aa62ae0712161417786789183613376050"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "SELECT venue WHERE EXISTS (SELECT COUNT(Paper.cited_paper_id )LIMIT 2)\n\n\n INNER JOIN aan_1.Author AS MEXTERED ON Citation.name >6 LIMIT 958011518342836121088133727"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "SELECT AVG(affiliation_id )LIMIT 0;"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "SELECT AVG(Citation.email ) INNER JOIN (SELECT Citation.paper_id RIGHT OUTER JOIN aan_1.Paper\n\n\n\n AS LOVINGLY AS ELLAVEERED ON title < name ) ON email > (SELECT"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "SELECT DISTINCT AVG(title ) INNER JOIN (SELECT MAX(*))\n\n\n\n AS KUNDIA ON Citation.paper_id = 43770;"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "SELECT MIN(Author.venue ), SUM(author_id )\nINNER JOIN (SELECT COUNT(*)LIMIT 60500103304616271511251417362938504740340049790855581098334559889580482660932356193975784470"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "SELECT MIN(Author.venue ), aan_1.paper_id INNER JOIN (SELECT venue LIMIT 2)\n\n\n AS inludesiaiutriesienaeiiuljnsummitusasimniandrisomueguiisiniloguncivystosikizdohkodalat"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "SELECT MIN(author_id )FULL JOIN (SELECT COUNT(*)GROUP BY name ORDER BY email LIMIT 3211939338921331377247817368897452616231812902898608780253510224495273057654779405870557529"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "SELECT AVG(Author.title )INNER JOIN (SELECT Paper.paper_id , paper_id INNER JOIN aan_1.Paper\n\n\n\n AS LUCIFTERCASKES AS toAurYmAAVcW3Ux4HgjNtFhDv8Z"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "SELECT COUNT(cited_paper_id )\n\n\n INNER JOIN (SELECT COUNT(*) FULL OUTER JOIN aan_1.Author AS NONCHOLARZWEDLYUH2CQm4DtGbFgMfqz3jYB8IhX7N0s"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "SELECT MIN(Author.author_id )\nWHERE Affiliation.cited_paper_id = 569392800229710302638125719072516474478187535433788361317238564405099721565662473175277714067200204534602908"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "SELECT COUNT(name )\nINNER JOIN (SELECT COUNT(*) AS EMAIL, MAX(*)) AS WITNESSES ON Paper.paper_id = 0 RIGHT JOIN aan_1.Paper ON year = cited_paper_id INNER JOIN (SELECT C"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "SELECT Paper.paper_id \nLIMIT 904192528135835441709112030209050278926291122183215483970650057248034778737883879336860999523456469633614014616753112762196135678500066080584710531397255978405417"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "SELECT COUNT(cited_paper_id );"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "SELECT COUNT(name )\n WHERE name = 100000"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "SELECT AVG(Author.author_id )\nINNER JOIN (SELECT MAX(*) LIMIT 5274850255734674533117097648038376063177826854323282066478913161218359399155903367565874083247391401562969190555306822"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": "SELECT Paper.paper_id GROUP BY Citation.name LIMIT 1 OFFSET 81613291038202539455536019944773758508800114875786902802746281943305722173394124904211031447742453"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "SELECT DISTINCT MIN(Citation.email ) INNER JOIN (SELECT Affiliation.paper_id ) ON name >Paper.cited_paper_id ;"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "SELECT venue ;"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "SELECT COUNT(Author.cited_paper_id )\nINNER JOIN (SELECT Paper.name INNER JOIN aan_1.Paper\n\n AS RKBARENCHVJALHANZYDYSQFETAAIDG8X9bx6g0tjW3vU5d4"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "SELECT MIN(Author.venue )ORDER BY Paper.cited_paper_id LIMIT 18063 OFFSET 22011337234860392810851538123543013329074975302726162080554565791"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "SELECT MIN(name )\nLIMIT 468183638483440723058506497255720274613163328352679886776015600236098757077193215118424593922990696643451754372150749124710443112878851001"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "SELECT venue LIMIT 311118341238162729305745772511671322287909715332026647847953902607550802301175943990666889844853576402472190549741254214550065699470973218931090210005468457727861287294858223615"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "SELECT Paper.paper_id ORDER BY Citation.cited_paper_id LIMIT 1"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "SELECT SUM(Author.paper_id )INNER JOIN (SELECT Paper.paper_id )\n\n\n AS ELLIGENTIALBUNDERSKETTINGFORDICJACKSON1hHVU4C2ADZ3WGBAY9c8nx6PfAaOj7IqR5"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "SELECT SUM(Citation.name )\nINNER JOIN (SELECT MAX(*)FULL OUTER JOIN aan_1.Paper AS ci2 ON paper_id = 1 ORDER BY email LIMIT 0 OFFSET 200003000438402850571133276713456025012363180566419071722"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "SELECT SUM(Citation.email )WHERE author_id = -1;"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "SELECT aan_1.paper_id , name ;"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "SELECT COUNT(name )\nLIMIT 2193637382046221050332927890112309913403218118025432428265879151744634570963975479816904934842360785440856006555149599904678630413935941005"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "SELECT aan_1.name , SUM(Author.venue ), Author.title RIGHT JOIN (SELECT COUNT(*) FROM (SELECT DISTINCT * ORDER BY title LIMIT 1), aan_1.Author, aan_1.Paper, aan_1.Auth"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "SELECT COUNT(email )\nWHERE Author.venue <email LIMIT 1"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": "SELECT SUM(Author_list.cited_paper_id )\n\n\n       \nLIMIT 15077013323496789074845751119552290402047448714172960639936163918287410355934321238856466431513277310054269570583730"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "SELECT SUM(Author.paper_id )\nWHERE Citation.cited_paper_id = 5111227203368772836646057009944239543307829374054144576381726321476655252216478419155989241367804665861\nINNER JOIN (SEL"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": "SELECT SUM(cited_paper_id )\n \n\n INNER JOIN (SELECT COUNT(*) ORDER BY Paper.title LIMIT 21600112519372801504732242933132514791530388897125899757094114027653495173577104918"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "SELECT COUNT(author_id )\n\n\n INNER JOIN (SELECT MAX(*)LIMIT 214748364838786536403533306832175744462820631218557564393711421558790334740125590932354547147083192687297321102213985466891)\n\n\n "
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "SELECT SUM(Author_list.email )"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "SELECT AVG(Author.paper_id )\nRIGHT JOIN (SELECT COUNT(*), Paper.paper_id , SUM(cited_paper_id ), MIN(Paper.paper_id ), AVG(Author.paper_id )\nRIGHT JOIN (SELECT"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "SELECT COUNT(cited_paper_id )\nINNER JOIN (SELECT SUM(*) INNER JOIN aan_1.Author AS fnltrb ON name = -400000007000000022281420481702161038320015394433782101131857244588290953419"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "SELECT AVG(Author.email )\nINNER JOIN (SELECT SUM(*)WHERE EXISTS (SELECT DISTINCT * ORDER BY Citation.name ))\n\n AS name_to_title ON cited_paper_id =\n1;"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "SELECT Conference_ID INNER JOIN (SELECT conference.institution.staff_ID )\n   \n\n\n AS ECONOMIC ON Conference_Name = -1 RIGHT OUTER JOIN conference.conference AS nameEXPLICITIALISTridNEXTURBEROCREATEnameEXPANDSC"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "SELECT Conference_ID \nWHERE Age < 13.15162429371022256038341249097110130559928892035644065140813191845862659437557708836488069421008689024747231700276753\n\nRIGHT JOIN (SELECT conference_participation.sta"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": "SELECT institution.Conference_Name RIGHT OUTER JOIN (SELECT COUNT(Founded ))\n AS DZKM ON EXISTS (SELECT MAX(*)) LIMIT 103250343645483364113095132316603801551227221828"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "SELECT COUNT(staff_ID ) AS CONGRESSEDHUBCONSCIENCE, SUM(*)WHERE Location > 1.1FULL JOIN (SELECT * FULL JOIN conference.conference ON Nationality <\n2.0GROUP BY Confere"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "SELECT MIN(staff_ID )\n INNER JOIN (SELECT Nationality LIMIT 6)\n\n AS of ON institution.Institution_Name = 1 RIGHT JOIN conference.conference ON conference.institution.Conferenc"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "SELECT Conference_ID \nLIMIT 905153336132610670119232930903740205427161150395898257844005645285579778817763175757322895426097149953804865434786185734126996215766721954936461310095152633631070356490272459"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "SELECT AVG(Age )\n INNER JOIN (SELECT Nationality LIMIT 2)\n\n AS WILHOLYONIABENEDINUWANGINGASLANDESACRETSDALFOSXISLUTKNSADIANCELTATTOVODPAMBRANJICANSORBITROCAUMEAPETZGARUNN"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT COUNT(Location ))\n\n\n AS VEDICJOURNEALITEMISTIANFOCUSISINGINFORMATIONASWITHEXAMPLIFIEDYAUTHORSHIPAsserealitemistsandexaminantsPURPOSEWHATIOWEREHELPFATIROMENUATIONPROTECT"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "SELECT MIN(staff_ID ) INNER JOIN (SELECT Founded , Nationality RIGHT OUTER JOIN conference.conference AS eiivneiairhvaiymkeinleimnyveitnaiiidosoujavatamadaciechtsuilov"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "SELECT COUNT(Location )\nGROUP BY Nationality LIMIT 2 OFFSET 1"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "SELECT COUNT(institution.name )"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "SELECT COUNT(Institution_Name )"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "SELECT COUNT(Conference_ID )\n\n\n INNER JOIN (SELECT Conference_ID )\n\n AS EYFVQXLJ8M4E7G1B3FLZ6MTD2UW9AFKAAISBAHASAMMAED5AADCALPSTETSUVWOTTLOCVDMWRSGVYS0NUNDFOLRMSPOWDSI"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "SELECT COUNT(staff.name )FULL OUTER JOIN (SELECT DISTINCT COUNT(*)\nGROUP BY Nationality , Location LIMIT 0 OFFSET 10003181000001152002555161040010000000071177483002957000050352610181417071399884460274533"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": "SELECT Location INNER JOIN (SELECT institution.role RIGHT OUTER JOIN conference.institution AS HENNA AS BULZIMOSAUNVLOBANONINITASORBISAROMUSATIKOPKARAISTOCEURESIDPYOLACELIANT"
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "SELECT COUNT(Institution_Name )"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "SELECT COUNT(institution.role )\nINNER JOIN (SELECT Founded , institution.staff_ID LIMIT 1357275025482623133955113064161910633324173718356600583899891)\n\n\n AS EYERMANNOIHONJUNG"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "SELECT institution.Location WHERE Location \n\n<1\n\n INNER JOIN (SELECT DISTINCT MAX(role ), SUM(*) AS for INNER JOIN conference.conference ON institution.Location \n < 1 LEFT OUTER"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "SELECT Location , institution.role RIGHT OUTER JOIN (SELECT Nationality ) AS TEMPSIANOSKIIELEISMOVYJAIMETROALOGANATIKOPIRIDZOLBADNIVOONFOMAGABASOVORAMIFURMAYIWOCAFRUNDAHILIT"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "SELECT AVG(Conference_ID ), COUNT(Location ), MIN(Location ), Nationality , SUM(Nationality ), MAX(Age ), Year GROUP BY institution.Founded LIMIT 113118"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": "SELECT COUNT(staff_ID ) LIMIT 2192183336132438162512761417221527294511409622496039486500750135667079632637785958996497313057808972157475034674941109846211274486690856200288813321895331912553616"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "SELECT AVG(Age )\nFULL JOIN conference.conference_participation  AS bh2ecctywelatiaeva1bnetmavijasacalabetiiqesumurvjeducca8sogdgbe7l5efldkxau9leksu6cip\n AS ESSENTIAL_"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "SELECT COUNT(Conference_ID )LIMIT 2 OFFSET 3"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT COUNT(Founded )\nINNER JOIN conference.conference_participation\n\n   \n\n AS isaDenAedBdHcWrMb7oKQ6x4w0hZjgYUJ3qF1v"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": "SELECT Location RIGHT JOIN (SELECT MAX(Founded ))\n\n\n      \n AS DEVNEXALY_PITTSMICKEISUNCHESLUCIFORCE1SHAMANELIA ON Institution_ID > role FULL JOIN (SELECT MAX(Founded"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "SELECT institution.role ORDER BY Founded LIMIT 121"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "SELECT MIN(staff.name )\n\n\n INNER JOIN (SELECT COUNT(*) LIMIT 3999640128234816503627571060674631182658123063146580471711758521131578253216838449902166227084359542190433694500405437205329"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "SELECT Nationality GROUP BY Location ORDER BY Age \nLIMIT 345332635255857277849074"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "SELECT Location , MIN(Age )WHERE institution.Founded \n\n<-0.1 FULL OUTER JOIN (SELECT * FROM conference.conference WHERE Conference_ID = 0) ON role < 1;"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "SELECT COUNT(institution.staff_ID )"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": "SELECT SUM(staff_ID )\nLIMIT 45433574577463816361809619062526008850290008421428303512482744907589785864246520591087684901376972236717791347621556703250539115322432795557408310054337734361905"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "SELECT Location ORDER BY Nationality , Year , Founded ;"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": "SELECT SUM(staff_ID )\n\n\n INNER JOIN (SELECT AVG(*)LIMIT 211112146411473748368832103360497738906528134622302524508701075576807816394054258354534697029269627430008585794665617081518057"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "SELECT SUM(Nationality )FULL OUTER JOIN (SELECT Year , Founded ORDER BY Location , Age LIMIT 3)\n\n\n\n AS NACCLITIZERSHIPKATIAXSOSPOTIONALISTOCCODELICAJONFADOISVANLOL"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "SELECT MIN(staff_ID )\n\n\n  \nLIMIT 66750542400221214133318011615463648682043261037496075254758293580772311883070459866652764797210544175909617878389731123194083215042573907841"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "SELECT Nationality RIGHT OUTER JOIN (SELECT Location FULL JOIN (SELECT MAX(*) AS BEGIN, MAX(Nationality ) FROM conference.conference_participation\n AS ROLs\n\n INNER JOIN (SELECT Location FULL JO"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "SELECT SUM(staff_ID )\n INNER JOIN (SELECT MIN(staff_ID ))  \n\n AS ifinformalistsFoolishElevationJiggedABSYSTEMEDISLOWESTIMERPROMISEGIRLSHOP1DATEALBOWSETIMEBIZKENDORNAMOUSOFTONIOSCURSE"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "SELECT Institution_ID \nORDER BY Conference_Name LIMIT 10 OFFSET 3"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": "SELECT Location , Founded GROUP BY Nationality ORDER BY Conference_ID ;"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "SELECT Conference_Name , SUM(Institution_Name ), Nationality LIMIT 41036"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": "SELECT Nationality RIGHT JOIN (SELECT Founded INNER JOIN conference.conference_participation\n\n\n  \n\n AS OLEMIDIARUEDONZAKORACIOCALANOSYNEFELPIRICOASAMILOTADISJEIMGQVARDOLTIN"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "SELECT AVG(Age )LIMIT 0"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "SELECT AVG(Age )\n INNER JOIN (SELECT Nationality RIGHT OUTER JOIN conference.institution \n\n AS MNOBARETIQUEOSENDSORIANASES AS CHEJONADEXAATIMY1CHIANOALITUS2COTPQN"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "SELECT AVG(staff.role )\nFULL JOIN (SELECT COUNT(staff.name ), SUM(staff.name ), Founded , Nationality RIGHT JOIN conference.institution\n AS ofHlcAveBqEkRgLh"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "SELECT MIN(Hangar.location ), age ;"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "SELECT MIN(Hangar.age )\nLIMIT 21584867452838352326185714013317291315116077445816803039224054122764740059687079759025490788417537697620062504765784631195556"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "SELECT AVG(PilotSkills.pilot_name )\nLIMIT 2035104817002513403033609075342722012024802878671423181159449906372650461915290441353938647320057164536972016598219218947953112631254979558315968487769253033"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "SELECT DISTINCT AVG(Hangar.plane_name )\n INNER JOIN (SELECT DISTINCT Hangar.plane_name ) AS BUDDYUNAK ON PilotSkills.plane_name = 1;"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "SELECT AVG(PilotSkills.pilot_name )\n \n\n INNER JOIN (SELECT COUNT(*) FULL OUTER JOIN pilot_1.Hangar ON pilot_1.Hangar.age = 1 ORDER BY PilotSkills.pilot_name LIMIT 4000000 OFFSET 0"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "SELECT SUM(age )\nINNER JOIN (SELECT MAX(PilotSkills.pilot_name ))\n\n AS IZBYHJD5G3AA4V9F6WQAFACDF8DEFC709962BA0BB09404822451860542874112679082C103537253827557739"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "SELECT Hangar.pilot_name ORDER BY PilotSkills.plane_name LIMIT 32213000250134751711771514001664704943262340302024398032191850582150929274610486360656798537384213541120993655863385285435459047"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "SELECT AVG(PilotSkills.pilot_name )\nFULL JOIN (SELECT PilotSkills.plane_name FROM pilot_1.Hangar AS HANGAR)\n\n AS FOLLOWING ON PilotSkills.plane_name = 'Captain' INNER JOIN (SELECT AVG(PilotSkills.plane_name ) GROUP BY"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "SELECT SUM(age )FULL OUTER JOIN (SELECT AVG(*)RIGHT JOIN pilot_1.PilotSkills\n\n\n AS TO ON Hangar.pilot_name = age LEFT JOIN pilot_1.PilotSkills ON EXISTS (SELECT AVG(*)R"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "SELECT DISTINCT AVG(Hangar.pilot_name )\n\n\n    \n\n INNER JOIN (SELECT Hangar.pilot_name RIGHT OUTER JOIN pilot_1.PilotSkills AS VAMMAHINQKOLIS\n AS LIFTHASFRIENDAYO"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "SELECT COUNT(age ) AS ifaceofc_count\n\n\n  LIMIT 2133102313261701111809900022804516542912785875771535832724905036406030642095421471470852008928574825885300478721201393886219217719058564497333779134617"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "SELECT age INNER JOIN (SELECT SUM(PilotSkills.pilot_name ))\n\n\n AS onrstoakvivschomnddrijntbngfutmprftogtskumtharcgghhwrduoktsgnllkltudaodglzyldflop3l4in6p5"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "SELECT MIN(Hangar.location )FULL JOIN (SELECT Hangar.pilot_name , pilot_name )\n\n\n AS IWONKORUVESKIYENKOPOKROVATINMONGARAMGILICANBOGJEDULIADIMELDACALASOCHEZ"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "SELECT SUM(Hangar.age )\n\n\n INNER JOIN (SELECT MIN(*)GROUP BY Hangar.pilot_name , location LIMIT 89020802901271824392633121036671478384645778895375876115516506587222870254815"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "SELECT COUNT(age ) INNER JOIN (SELECT COUNT(age ))\n\n\n   \n\n AS WILSHENHAGKASWATABANGHAADURDALJAYGAROLISHANAMIDELACMAUBAEZPKKIMCISODIGOLETHONTAGAYNITQLIPVULMIRIRA"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "SELECT Hangar.age LIMIT 0;"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "SELECT AVG(PilotSkills.pilot_name ) INNER JOIN (SELECT Hangar.plane_name , SUM(*)LIMIT 10000000027302326104049077093190108155888141328251802177564448906833245467229955876079781238572039"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": "SELECT DISTINCT COUNT(age )\n\n\n                        \nINNER JOIN (SELECT Hangar.location WHERE PilotSkills.pilot_name = 937109826)\n\n AS VANGUARDIAN ON E"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "SELECT COUNT(age )\nFULL JOIN (SELECT DISTINCT AVG(location ))\n\n  \n\n AS ILLUSIONALLY ON EXISTS (SELECT * FROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'Elan')\nFULL JOIN (SELECT DIST"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "SELECT AVG(Hangar.location )\n\n\nRIGHT JOIN (SELECT COUNT(*) RIGHT OUTER JOIN pilot_1.PilotSkills AS KISSINGBASES ON Hangar.location = 1 INNER JOIN pilot_1.Hangar ON PilotSkills.pilot_name = 0 R"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "SELECT MIN(Hangar.location )INNER JOIN (SELECT COUNT(PilotSkills.pilot_name ))\n\n\n  \n\n AS RANKING ON Hangar.location = 1"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "SELECT SUM(age )\nRIGHT JOIN (SELECT MAX(Hangar.pilot_name ))\n\n    \n\n AS CEREMYASONALBJUNKULOSIAFORDWICHITOURSILVANDOLAPOTPATLANTAELEISIKKUTCHUENDAGNAADAMARANIKIMBAHIRTURRID"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "SELECT SUM(age )\nINNER JOIN (SELECT SUM(age ))\n\n           \n\n AS ELLEFJERDISYEMONOSHATANAALUMHAIRENELUSSSENTIANASUNABKURGIFAYNEVIMEDESOUBAIYAAMICZMORPINITRIO"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "SELECT AVG(PilotSkills.plane_name )\n INNER JOIN (SELECT PilotSkills.plane_name )\n\n     \n\n AS SITE ON EXISTS (SELECT MAX(*) FROM pilot_1.PilotSkills WHERE pilot_name = 0 INNER JOIN pilot_1.PilotSkill"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT PilotSkills.pilot_name )\n\n AS BXJENMUNKFORDYWATSONAQSSARDIEVONTHGOLANDLACQUIDIANANDAELTAIRIETEAS1N6OUKEHIGNSEROT5C4BBA0DS2PZ8T3"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "SELECT Hangar.age , age RIGHT OUTER JOIN (SELECT COUNT(Hangar.age ) ORDER BY PilotSkills.pilot_name LIMIT 2)\n\n\n AS forlornlytahtsasrvakkutyavhnaiaamalagolnoyitbogatieoapfomneihej"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "SELECT SUM(age )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN pilot_1.PilotSkills \n\n AS GYRADIANCASJABSALOSUNZANVENGAFAGUARGADOVKAYORAKEMBACKAIMAPOTN\n\n AS TECMATIKIELH"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "SELECT AVG(PilotSkills.pilot_name )"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "SELECT MIN(Hangar.pilot_name )\nGROUP BY PilotSkills.plane_name ;"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": "SELECT PilotSkills.pilot_name FULL OUTER JOIN (SELECT * FROM pilot_1.PilotSkills WHERE PilotSkills.age > 0 ORDER BY pilot_1.PilotSkills.age ) AS UNAVAILABLE ON PilotSkills.pilot_name = 'FULGLASS' INNER JOIN (SELECT * FROM pilot_1.PilotSkill"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "SELECT MIN(Hangar.pilot_name )FULL OUTER JOIN (SELECT COUNT(*) FULL OUTER JOIN pilot_1.PilotSkills AS ctrlkeysword2 ON location = 3000001\nRIGHT JOIN pilot_1.PilotSkills\n\n AS LATISCOFITESCOUNTED"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "SELECT COUNT(pilot_name )\n INNER JOIN pilot_1.PilotSkills ON PilotSkills.plane_name = 0 GROUP BY pilot_name ORDER BY PilotSkills.plane_name LIMIT 10;"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "SELECT MIN(Hangar.location ), age FULL JOIN (SELECT COUNT(PilotSkills.plane_name ), location , PilotSkills.plane_name )\n\n\n \n\n AS for ON EXISTS (SELECT MIN(Hangar.loca"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "SELECT Hangar.age INNER JOIN (SELECT SUM(Hangar.pilot_name ), age GROUP BY PilotSkills.age ORDER BY plane_name LIMIT 21)\n AS KAPELOSAALARNANDESIATRVAGOISANADASIAK"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "SELECT SUM(age ) AS ELFJ\n INNER JOIN (SELECT COUNT(*) RIGHT JOIN pilot_1.Hangar ON PilotSkills.pilot_name = 1 ORDER BY PilotSkills.pilot_name LIMIT 31002001500040000406720303329280125"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "SELECT AVG(PilotSkills.plane_name )\n INNER JOIN (SELECT SUM(*))\n\n AS XZHXDJYQBAC6FIF4C8CA7BE1FA6745789515164813E3BA2EA5DE7062607742BBAA7919497611654469282774223325"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": "SELECT MIN(age ) LIMIT 2182019165813003738257801362339271033702628403530227948674317321115478775295765739934846054459512695068512414462100660566644955762858085777214718888195637167825630096393620383340"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "SELECT MIN(Hangar.location ) \nLIMIT 547273319161748287078257700202699070104136034155855503618238030357622453864105411683214574974649662412447588415946398745929658320051108479840532794166737709525"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "SELECT *\nINNER JOIN (SELECT COUNT(PilotSkills.pilot_name ))\n\n AS and ON age > Hangar.location RIGHT JOIN pilot_1.Hangar\n\n AS OR AS LOBISONOIDZIETGARRJAMVOLCKEENFAT"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "SELECT MIN(Hangar.pilot_name ) RIGHT OUTER JOIN (SELECT Hangar.plane_name , MIN(Hangar.plane_name ) LEFT OUTER JOIN pilot_1.PilotSkills ON EXISTS (SELECT COUNT(*)) GROUP BY PilotSkills.pilot_name ORDER BY Pil"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "SELECT age INNER JOIN (SELECT location ) AS TOCHALAINFASTAIREVARBAN ON EXISTS (SELECT COUNT(age ), SUM(*) AS BOSS_CODE, MAX(pilot_name )) GROUP BY location ;"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "SELECT *LIMIT 52829132611141046184512347530542277190139278907936255840561550321668490020594467179876389987604779706580559648856469742015211835245788710005267665004304331190507453095461206221026143727"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "SELECT COUNT(age )\nINNER JOIN (SELECT DISTINCT COUNT(*) AS EYJIS RIGHT OUTER JOIN pilot_1.PilotSkills\n\n AS HAYMOURIBANKABSAAFBAGASHAIF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n A"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "SELECT DISTINCT AVG(Hangar.location ) RIGHT JOIN (SELECT SUM(*)RIGHT OUTER JOIN (SELECT * FROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'Earl' ORDER BY PilotSkills.plane_name , pilot_1.plane_name ) AS"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "SELECT Hangar.pilot_name WHERE age = 40FULL OUTER JOIN (SELECT COUNT(age ))\n AS EMAILADOSAVETOGUNTERiRONISSAYATBULLWALKSANDERSTAXCODESDVJMKBAUMZ1mPANETTUHOM4lF2IQ6N"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "SELECT COUNT(age )\nWHERE Hangar.location >1 LIMIT 6 OFFSET 2;"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "SELECT MIN(PilotSkills.plane_name )\nRIGHT JOIN (SELECT MIN(PilotSkills.plane_name ))\n\n\n\n AS KALENDUYANFENBRAISKIVATKABAEONDUNTKOLLOVASTAITERAIDAFREAVINGHURADAPOSODNOCAMARGOT"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "SELECT AVG(Hangar.age )\nWHERE EXISTS (SELECT SUM(PilotSkills.plane_name ))\n\n INNER JOIN pilot_1.PilotSkills AS KANjBVJGQYJVL5vbzZ2mHKkFgDc7u8Xr9aW"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "SELECT AVG(Hangar.location ) RIGHT JOIN (SELECT AVG(PilotSkills.pilot_name ))\n\n\n AS IKOVOSDEMICZJIABUNYENSSWELFUORIDEDVOCATIOOLISE ON PilotSkills.age = (SELECT A"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "SELECT SUM(Hangar.pilot_name ) AS OASERJIT RIGHT JOIN (SELECT Hangar.pilot_name )\n\n\n    \n\n AS FOLLOWS ON PilotSkills.plane_name = 1RIGHT JOIN pilot_1.PilotSkills ON EXISTS ("
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "SELECT COUNT(age )\nINNER JOIN (SELECT AVG(*)\n\n INNER JOIN pilot_1.Hangar ON Hangar.location = 22001033750148352908132670541828127839441517307432146095996321\nINNER JOIN (SELEC"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN pilot_1.Hangar ON Hangar.plane_name = PilotSkills.pilot_name ORDER BY location , pilot_1.PilotSkills.pilot_"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "SELECT SUM(age )\nINNER JOIN (SELECT PilotSkills.pilot_name RIGHT JOIN (SELECT * FROM pilot_1.PilotSkills WHERE PilotSkills.pilot_name = 'El-Qa' ORDER BY PilotSkills.plane_name )\n AS SELECT ON"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": "SELECT DISTINCT AVG(PilotSkills.location )\nWHERE age  = (SELECT COUNT(pilot_name ))LIMIT 1;"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\nLIMIT 4957047164810570033000420049885045679775771122302327158940906935202546186029645437172409561003"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "SELECT COUNT(age ) AS for LEFT OUTER JOIN (SELECT Hangar.location INNER JOIN pilot_1.PilotSkills\n\n\n\n AS of ON age <= PilotSkills.age ) AS forLIFITEENORAUHYROLTKMZVI"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "SELECT PilotSkills.pilot_name LIMIT 11938000564503545402513234615362055003908165780488775180129371217606847884322241159789933542586927659045415910587026989314497625517544856053842105647735734594132846157909"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": "SELECT COUNT(PilotSkills.location ) AS IMAX RIGHT OUTER JOIN (SELECT *) AS LITTREXISYDEXASUSCHUNKTHAMAVALAYENOSAVANTAGLJARLYORONGRAZELOMBACENTIFIKCURVERICHULMOLFUTICOGUDRADIANH"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": "SELECT AVG(age )\nLIMIT 2 OFFSET 4;"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": "SELECT DISTINCT COUNT(*) RIGHT JOIN pilot_1.PilotSkills AS PILOTCLERTS ON pilot_1.PilotSkills.pilot_name = PilotSkills.plane_name ORDER BY plane_name ;"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "SELECT *\nINNER JOIN (SELECT MAX(PilotSkills.pilot_name ))\n\n AS BKNBSBGATJYASLAKAREDZAMEMETDHAQF1H0IM5V3ADRIYD9U4N8FRW2AFENNAEYSBLIOPLYC6MPROODP7ALXAAIF"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "SELECT AVG(PilotSkills.plane_name )\nRIGHT JOIN (SELECT COUNT(*) FROM pilot_1.HangarFULL OUTER JOIN pilot_1.Hangar ON pilot_1.Hangar.pilot_name = PilotSkills.location GROUP BY PilotSkills.plane_name )\n\n\n"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "SELECT MIN(Hangar.age )\nFULL OUTER JOIN (SELECT COUNT(*)LIMIT 100040104901021903253926360011432440671835284630346054210152370586364125575274432177880966533995020746616131584379545898488822"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "SELECT PilotSkills.pilot_name , PilotSkills.pilot_name , PilotSkills.plane_name , PilotSkills.plane_name , PilotSkills.pilot_name , PilotSkills.plane_name , PilotSkills.pilot_name ;"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "SELECT SUM(age )\nWHERE PilotSkills.plane_name = 'pilots' INNER JOIN pilot_1.PilotSkills ON PilotSkills.location > 1;"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "SELECT AVG(PilotSkills.plane_name )\nFULL JOIN (SELECT COUNT(*) FROM pilot_1.HangarLIMIT 30000299924010006192303219323181239293564105620363770956788753327556948406690257227846194574172625855096167757440065"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "SELECT COUNT(age )FULL OUTER JOIN (SELECT COUNT(*)RIGHT JOIN pilot_1.Hangar AS k2p3j6q4dctvk11h5lx8c7bffr9i\n\n\n   \n AS SEVERALY ON PilotSkills.plane_name = 'Myrmidon'"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "SELECT AVG(age ) LIMIT 11530462237785058112319171025451601571827205112609933807036758835671387553898742848659040632456105663904321602100082900776214091125682644942273127643750531186317723254617"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\nRIGHT JOIN (SELECT COUNT(*) FROM pilot_1.Hangar AS AIRPLAN ORDER BY PilotSkills.location , PilotSkills.pilot_name ) ON pilot_1.PilotSkills.pilot_name = 'AIRPLAN' ORDER BY PilotSkills.p"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "SELECT COUNT(age )FULL JOIN (SELECT PilotSkills.location , age )\n\n\n AS BACONIAZA ON Hangar.pilot_name = 2  INNER JOIN pilot_1.Hangar ON EXISTS (SELECT PilotSkills.location ,"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "SELECT SUM(age )\nRIGHT OUTER JOIN (SELECT PilotSkills.pilot_name )\n\n AS ELIXEURORANAASESIABRAFZALONINGODJOECHOSENETELGAACUSUNAHOLAIAMKOMAYTAIMISABIBIYABAYATIKTOVITMETHADICN"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "SELECT AVG(PilotSkills.plane_name )\n INNER JOIN (SELECT SUM(*))\n\n AS LAJLZFXBQWKK3HGH5Y9EF1GGK0FP7D4ASADDF6E8GV17DJBA2274EE7854677081DD2FA49696564771875481655"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "SELECT COUNT(PilotSkills.pilot_name )\nINNER JOIN (SELECT PilotSkills.pilot_name )\n\n AS Inevitably ON EXISTS (SELECT COUNT(PilotSkills.plane_name )) RIGHT OUTER JOIN (SELEC"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "SELECT MIN(Hangar.location ), age INNER JOIN (SELECT COUNT(*)ORDER BY PilotSkills.plane_name , Hangar.plane_name LIMIT 153637432874171342107260332048751434161524274039"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "SELECT COUNT(PilotSkills.location )\nLIMIT 3999"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": "SELECT SUM(age )\nFULL JOIN (SELECT COUNT(location ))\n\n    \n\n AS with ON Hangar.pilot_name = location ;"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "SELECT SUM(Hangar.pilot_name )\nWHERE EXISTS (SELECT COUNT(*) FROM pilot_1.PilotSkills, pilot_1.PilotSkills) FULL JOIN (SELECT PilotSkills.age FROM pilot_1.PilotSkills WHERE PilotSkills.age <= 1 ORDER BY Pilot"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "SELECT SUM(age )FULL JOIN (SELECT Hangar.pilot_name , AVG(Hangar.pilot_name ))\n\n\n    \n\n AS ALOTESKARANATALPENGINEERAQZISENIELUASIAEYOSWIZHAUNXFIMAYOJINONADCURLYTVEDB"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "SELECT *\nINNER JOIN (SELECT PilotSkills.age )\n\n AS LITUANIANALIA ON EXISTS (SELECT SUM(Hangar.pilot_name ), Hangar.pilot_name FROM pilot_1.PilotSkills WHERE PilotSkills.plane_name = 1)\nINNER JO"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "SELECT Hangar.pilot_name FULL OUTER JOIN (SELECT MIN(Hangar.plane_name ))\n\n\n AS in ON age > 4 RIGHT OUTER JOIN pilot_1.PilotSkills AS PILOT ON Hangar.pilot_name = pilot_name ORDER BY locat"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "SELECT SUM(Hangar.location )"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "SELECT AVG(Hangar.age )\n\n\n INNER JOIN (SELECT COUNT(*)FULL JOIN pilot_1.PilotSkills AS skillPoints ON PilotSkills.pilot_name = 'Jockeonee' INNER JOIN pilot_1.PilotSkills AS skillsOnXP\n\n\n AS SELEC"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "SELECT AVG(spokesman_district.Government_website )\n\n\n            \nWHERE Name < 3153947702037805512343045461901407866482718771636956438884469606587287632103317052149114959256775"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": "SELECT Government_website , Rank_position , Name WHERE Speach_title = (SELECT Population FROM district_spokesman.district WHERE district_spokesman.Government_website > 0 ORDER BY District_ID , Name , Rank_p"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": "SELECT Name RIGHT JOIN (SELECT DISTINCT MAX(Name ))\n\n\n  \n\n AS ELFINGENZUEWALDKANMNEYLETTVONNAULBHAWESEMBAJAYASTEBRIDGEUNDETOCIOLIAACARLADIFITORAGHATRESSPECCAMINOCTE"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": "SELECT AVG(spokesman_district.Population )\n\n\nINNER JOIN (SELECT Government_website RIGHT OUTER JOIN district_spokesman.district AS gewannntigteckunget\n\n\n AS LESK"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "SELECT DISTINCT AVG(spokesman_district.Density_km )\nINNER JOIN (SELECT Rank_position , SUM(Area_km ), Name RIGHT OUTER JOIN district_spokesman.district AS avgrjntl"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": "SELECT DISTINCT COUNT(spokesman_district.Name )\nFULL JOIN (SELECT * FROM district_spokesman.district WHERE spokesman.Population > 1 INNER JOIN district_spokesman.district ON district_spokesman.Spokesman_ID = District_ID )"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "SELECT Government_website RIGHT JOIN (SELECT Name FULL OUTER JOIN district_spokesman.district\n\n\n   \n\n AS theinhirrellabzetkalcjaatjemandertsleifntimurfakteckesplenitivnacom"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "SELECT COUNT(spokesman_district.Age ) RIGHT OUTER JOIN district_spokesman.district ON spokesman.District_ID = 5 ORDER BY Spokesman_ID LIMIT 502;"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "SELECT Government_website WHERE Rank_position \n> (SELECT SUM(Population )INNER JOIN district_spokesman.district\n\n AS EASCHOOLWALTERSTADJONEETIMISENBIDLACDIGENTHURK"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": "SELECT COUNT(spokesman_district.Density_km )\nWHERE Age = (SELECT *) RIGHT OUTER JOIN district_spokesman.district ON spokesman_district.Points > 1;"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "SELECT MIN(spokesman.Rank_position )\n\n\nINNER JOIN (SELECT Rank_position )\n\n AS SELLERJUNIOR ON Government_website <3 INNER JOIN district_spokesman.district\n AS TELAINEHALMIS"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "SELECT Rank_position LIMIT 25606745773685225816482839273337403401541235241708212523477855154432117072105920997946196463261368769213049006569000743758425814985660500742545676680863"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "SELECT SUM(spokesman.Government_website )\n\n\n  \nINNER JOIN (SELECT Name RIGHT OUTER JOIN district_spokesman.district\n AS DISTRICTEASISENTSOLJOHANNESBRAWKLATTLAINEVOTEPOPUET"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": "SELECT Name RIGHT JOIN (SELECT DISTINCT COUNT(District_ID ))\n\n\n    \n AS aaaiqnakanadarjahaincntkuratapaviraynaajidujaonpataiaagtudhridamasraafmuhgokimantisrvijhaifacumilfikinb"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "SELECT Name RIGHT JOIN (SELECT DISTINCT Government_website )\n   \n\n\n AS BERVESTON ON Population = 1 LIMIT 6191"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "SELECT AVG(Age )LIMIT 3;"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "SELECT MIN(spokesman_district.Name )\n\n\nLIMIT 1041101318272817097111920372358390211833229724255750683065321229779936670079694416474648566040781406"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "SELECT Rank_position LIMIT 11201029140250491137124828994023251327306639553416543618264546191700972078732238676959084117310115434472505656079076605357085409328068861096147337714942404642895992912"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "SELECT COUNT(Density_km )INNER JOIN (SELECT DISTINCT MAX(*), Name LIMIT 1 OFFSET 24435042281422451213295764582627016532804740352588687515389966604498481956163317873684182369781110"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "SELECT Name RIGHT JOIN (SELECT DISTINCT Points GROUP BY Spokesman_ID LIMIT 955)\n\n\n AS and ON EXISTS (SELECT * FROM district_spokesman.district, district_spokesman.district, district_spoke"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "SELECT AVG(spokesman_district.Rank_position )"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "SELECT COUNT(sculptorID )\n  INNER JOIN (SELECT DISTINCT SUM(*)ORDER BY width_mm , Paintings.medium LIMIT 646373550651028481733742726986043157597224032161225668847704589412857"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "SELECT COUNT(sculptorID ) INNER JOIN (SELECT SUM(*)RIGHT OUTER JOIN art_1.Paintings AS colors2dcolor3rj6vLmKn5F9ZaAJ4iYqs7f0e\n\n\n   \n AS isthefaceofkomainasseldin"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT DISTINCT Paintings.paintingID )\n\n AS MESSENGANIANAISJOCERIAVARAESKIODHATITADAMENNAICMETHYLALCHRIELORTHIOLOMUMBETATEPHOBENTYROPAPACINNOSIDESMICPRIMIPHYLUTEG"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "SELECT MIN(art_1.birthYear )\n\n\n INNER JOIN (SELECT SUM(*), art_1.birthYear ) \n\n AS NIEHALJKAEMIDISCHATARUSESZIBAEBIAWOLTOMAYRADECGQ7V9CELTA8DAAETF3N"
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": "SELECT COUNT(sculptureID )\nINNER JOIN (SELECT COUNT(sculptorID )) AS toZEROJOSDICOLYREHARDOUSEDFACTSMILLERUDRIVEPODBOMBAKERAUSNEMBLESSIMMONITESKANNYEARIESLATRINGINSTRUCTIONISABOUTILL"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "SELECT MIN(sculptorID ) \n\nLIMIT 7093;"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": "SELECT art_1.birthYear INNER JOIN (SELECT SUM(Artists.medium ), fname )\n\n\n  AS VICTORY ON EXISTS (SELECT Paintings.title , Artists.artistID FROM art_1.Artists WHERE paintingID = 'birthY' ORDER BY"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "SELECT AVG(sculptureID )\n\nWHERE Sculptures.height_mm = (SELECT height_mm , COUNT(*) RIGHT OUTER JOIN art_1.Artists AS cntlte0dw5oT3vqzUY4pFcBJ6gXhjH"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": "SELECT lname LIMIT 4"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "SELECT AVG(sculptureID )\n\nFULL JOIN (SELECT MAX(sculptorID ), art_1.title , medium FULL OUTER JOIN (SELECT MAX(Sculptures.title )) AS EYLLISEDTOEVEFULLKALNEMBOLTES"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "SELECT DISTINCT COUNT(sculptorID )\nRIGHT JOIN (SELECT deathYear , birthYear FROM art_1.Artists WHERE year >= '00' ORDER BY height_mm LIMIT 1) AS rTraitType ON sculptorID = mediumOn ORDER BY title , deathY"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "SELECT SUM(Artists.painterID ) \nWHERE art_1.artistID = 85801472909273633996034394045421155653750496712787719532528008086751057309718321776238444267094644300081316669610053859083\n"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": "SELECT COUNT(Paintings.deathYear )"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "SELECT MIN(sculptureID )\n\nFULL OUTER JOIN (SELECT DISTINCT COUNT(*) FULL JOIN art_1.Artists\n\n AS IJANCHEMGIANNEISBORNLANDRENEWALYELKURAMANDICANSHAGEAUITUBAIRE\n AS LITTLELY ON"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "SELECT MIN(sculptorID ) AS CHILDJAMEMICRITORIAA\nLIMIT 1 OFFSET 3;"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "SELECT MIN(sculptorID ) AS RUYWHZK INNER JOIN (SELECT Paintings.artistID ORDER BY medium )\n\n\n AS VANAALIEAUBENEDELLAMATINON ON EXISTS (SELECT MIN(sculp"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "SELECT AVG(Artists.deathYear )\n\nRIGHT JOIN (SELECT MIN(*) AS DIAAS, MAX(*) ORDER BY medium \n\n LIMIT 6151637231839226909319281736795557607899143054333885132558883446123547012911"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "SELECT COUNT(artistID )LIMIT 4411725892900781667271801131548790957553924203675703526339069116563605859233022993897284096104214804905845215064667334376886211512812771784299832010861618"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "SELECT COUNT(sculptureID )GROUP BY Paintings.height_mm , artistID LIMIT 2"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "SELECT AVG(sculptureID )"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "SELECT AVG(Artists.medium )"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "SELECT COUNT(lname )"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "SELECT COUNT(height_mm )GROUP BY Sculptures.sculptureID , Paintings.paintingID LIMIT 477702543406418223658742048305750326065472480784568290500282627791935147534161033"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "SELECT SUM(sculptureID )ORDER BY art_1.medium \nLIMIT 318 OFFSET 1"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "SELECT AVG(Artists.deathYear )"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "SELECT SUM(sculptureID )\n\n\nWHERE Artists.height_mm = 'f-o;' GROUP BY Paintings.width_mm ;"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "SELECT AVG(sculptorID )\nORDER BY Sculptures.deathYear , lname ;"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "SELECT COUNT(title )\n\n\nWHERE Sculptures.medium >deathYear ;"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "SELECT COUNT(lname )\nFULL OUTER JOIN (SELECT DISTINCT * FROM art_1.Artists WHERE Artists.artistID = 'A' GROUP BY Artists.artistID , artistID ) AS ARTISTS ON width_mm > 1 ORDER BY deathYear ;"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "SELECT AVG(Artists.artistID )\nLIMIT 3999"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": "SELECT MIN(sculptorID )RIGHT OUTER JOIN (SELECT AVG(sculptorID ))\n\n\n  \n AS THEYONOSMORRYALITYLATESTIMATEDWILDHOLESASZAZAMANELISJEFFREYSPANTAGESCOUNSURECHURGERINGTHRESISTANCEICONNECTIONE"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "SELECT COUNT(Paintings.painterID )"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "SELECT AVG(Artists.lname )LIMIT 648781101191727131615141223705440352053002822985725187559393797105624383034297697955886866843326656067828077951008745998544621683658644330447509627011115"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "SELECT MIN(sculptorID )ORDER BY Artists.deathYear , artistID ;"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "SELECT COUNT(Paintings.paintingID )\nWHERE height_mm = (SELECT * FROM art_1.Artists WHERE Artists.artistID <= 9999)\n\n INNER JOIN art_1.Artists AS tbxPRINTed3CvBZaSc8AiNnMq9fYQoL"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "SELECT MIN(Paintings.medium )\nINNER JOIN (SELECT Paintings.deathYear FULL JOIN art_1.Artists ON sculptorID = 1002077)\n\n AS orMINESGELFREAKLERSTADVATITOSROLKODDENIS"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "SELECT COUNT(paintingID )\nORDER BY Sculptures.title LIMIT 106034703058140128134027004743192335151139375077255610036173824684955162218486978448093"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": "SELECT COUNT(paintingID )\nORDER BY Sculptures.deathYear LIMIT 23"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "SELECT MIN(sculptorID )GROUP BY Sculptures.mediumOn , medium ;"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "SELECT AVG(Artists.deathYear )\nINNER JOIN (SELECT SUM(height_mm ))\n\n AS ITHBRISJEMALEDFITZIMERAMAAKHELEKTEGPVBQCAURXTOT0G7BA1ECEF8D9FB7846CE3AE4BE6"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "SELECT AVG(sculptorID )\n\nFULL JOIN (SELECT SUM(*))\n\n     \n AS VINEYARDHOLDERINGJOYCEPONEASWAYERBOTNICATORLYPHEDIANLORDUSSCANTSEKRYISONSWEIGHDROPTHIRSTIFZENROBARDEGUENTIMABAG"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "SELECT MIN(sculptureID )\n\nLIMIT 15403422302720782917233336391913281615793789641807110155632458143896354454105949506098487631"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "SELECT MIN(Artists.deathYear )\n\nLIMIT 2 OFFSET 1"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "SELECT MIN(sculptorID ) LIMIT 3231620464054321858363533271539551465115072178764122299497725889775793478452967247613988085268919008460574428702101690652453768831052104163840863043203690333559"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "SELECT COUNT(title )LIMIT 1 OFFSET 5100437339070505000009200006030204829121399013218142744234036116924779719497908543155467641746808434551678255942108895687345268728931472239576321017373398315575"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "SELECT art_1.medium GROUP BY Sculptures.deathYear LIMIT 0 OFFSET 1"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "SELECT MIN(sculptorID )RIGHT OUTER JOIN (SELECT SUM(title )\nGROUP BY Paintings.artistID LIMIT 1125202833150050042000000143729098271813451248000243840231005032049081601781043172299118857"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "SELECT MIN(sculptorID )\nWHERE Sculptures.medium = (SELECT mediumOn , sculptorID ORDER BY birthYear LIMIT 0) RIGHT JOIN art_1.Paintings\n\n\n AS and AS arentriemofssefteoj"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "SELECT AVG(Paintings.lname )ORDER BY Sculptures.paintingID , art_1.height_mm ;"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "SELECT AVG(sculptureID )INNER JOIN (SELECT COUNT(sculptorID )\nFULL JOIN art_1.Artists AS RASTESTARTERRANDARDERSJOPIEBOWLESTAASWATCALVISENNEURESTERKENTRILLGILBERYNUADDIMITPEDIAH"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "SELECT AVG(sculptureID )"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "SELECT COUNT(Artists.lname ), artistID INNER JOIN (SELECT Sculptures.lname , lname WHERE deathYear > title RIGHT OUTER JOIN art_1.Artists AS TRITTEREDlDKLdGJWO"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "SELECT MIN(sculptorID )FULL OUTER JOIN (SELECT COUNT(*), SUM(*) FROM art_1.Artists ORDER BY Artists.title )\n\n\n AS CONJURALIZATION ON sculptorID = 0 FULL JOIN art_1.Paintings AS painterListFULLOUTERHISTORICE ON Sc"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "SELECT AVG(sculptorID )\n\n\nWHERE Paintings.paintingID = 1;"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "SELECT COUNT(deathYear )LIMIT 3 OFFSET 2"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "SELECT MIN(sculptureID )"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": "SELECT AVG(Artists.sculptureID )\nLIMIT 590231514162701171312104038987088008739190830296036263211588537757864453548686695258911236555572049777399462874649073264240325818790947976905734271401"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "SELECT AVG(Artists.lname )LIMIT 554163318481547252714571326242906439342345225560751749430099666744205330881165966412077793362858370146690811203472017085000615841103840321959507847185416"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "SELECT AVG(Artists.deathYear )\nLIMIT 0;"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "SELECT SUM(Artists.deathYear )\n\n\nINNER JOIN (SELECT AVG(sculptureID )) AS BONUSYMABOUIS_FALLS ON Paintings.fname  IN (SELECT SUM(Artists.deathYear ) AS BONSINGLE)"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "SELECT AVG(Artists.deathYear )INNER JOIN (SELECT SUM(*)FROM art_1.PaintingsWHERE Paintings.deathYear = sculptorID ORDER BY height_mm , artistID LIMIT 2 OF"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "SELECT MIN(sculptorID )"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": "SELECT *\nINNER JOIN (SELECT Paintings.lname RIGHT OUTER JOIN art_1.Paintings\n\n AS thedAonatvitVikurFjBakZ4KJ2N6uMfWX7R8z5YD9Q\n\n        AS"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "SELECT AVG(Artists.lname )"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": "SELECT COUNT(sculptureID ) AS VARCHAR_MULTIPLY LIMIT 2999000100003100832161812291499771745443611133700223053253890243926355087153449087422079676048190788966423475884274670896693105901858069754028556533"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": "SELECT SUM(sculptureID )\n\n\n LIMIT 214748364842;"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "SELECT COUNT(deathYear )"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "SELECT AVG(sculptorID ), artistID INNER JOIN (SELECT SUM(*), painterID , MAX(height_mm ), medium INNER JOIN (SELECT AVG(sculptorID ), artistID INNER JOIN"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT COUNT(art_1.location )\nLIMIT 31118161583121333140831332529341745462230472655278780597549606440887865489866585767905076920283701234219368621"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT COUNT(lname )LIMIT 433006783"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "SELECT COUNT(fname )FULL JOIN (SELECT Paintings.title , fname FULL OUTER JOIN art_1.Sculptures\n\n\n AS ELDAURYLLCYNASIANA ON Sculptures.artistID = 642GROUP BY Paintings.t"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "SELECT AVG(sculptorID )\n\n\nWHERE Paintings.paintingID = 1;"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "SELECT SUM(sculptorID )\nRIGHT JOIN (SELECT MAX(deathYear ), art_1.birthYear , fname GROUP BY Artists.medium , medium ORDER BY deathYear )\n\n\n AS LISSAFIEKIOSAHU"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "SELECT AVG(Artists.medium )\nINNER JOIN (SELECT MAX(*) FULL JOIN art_1.Paintings ON medium = 0 GROUP BY height_mm , year LIMIT 1025189017111513480012010933231028"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "SELECT SUM(sculptureID )\nRIGHT OUTER JOIN (SELECT MIN(lname ))\n\n AS BAYLINGED ON Paintings.deathYear = medium FULL JOIN art_1.Paintings\n\n AS RUSHUJOIDLEFOUNDATIONRIGHTOUTERj"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "SELECT COUNT(lname )LIMIT 20703710232908282718481667142513155039447530684024190157997826173569887973004549042238116643100898931505341289742107602095589380902056572160372329032896104877363327"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "SELECT COUNT(title )INNER JOIN (SELECT MAX(*)WHERE EXISTS (SELECT DISTINCT SUM(Paintings.deathYear ))FULL OUTER JOIN art_1.Sculptures ON sculptorID = lname ORDER BY Artist"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "SELECT COUNT(title )FULL OUTER JOIN (SELECT COUNT(*))\n\n\n    \n\n AS EYEZINGAKELESKONATURHIRBISHITARISMOLOSIKAMALINORIDOXVOCUBAXOTYENGIANIMRIGPOPETOGNICIKKAPCQTASFIFO"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "SELECT COUNT(sculptureID )\nINNER JOIN (SELECT COUNT(deathYear )) AS NITVASEM_JOB3A2D6WQXOC0F8K4M1PTS9BZGDSBA5HAD7LMCATEFAPDRSTSECTABLANLYEOLIEDACONICOLLUHCAL"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "SELECT COUNT(deathYear )LIMIT 3147755400141045506048349917121333298840658974739162738013036676811208564233735775719245328257622431004"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "SELECT AVG(Paintings.year )ORDER BY Sculptures.deathYear LIMIT 10750118081072"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "SELECT AVG(Paintings.sculptureID )"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "SELECT AVG(Artists.deathYear )\nLIMIT 3013023008070502060409639041007500029273315142213163644882569461224551149281074991767586005445485909575006377631120389542186332190871556586317735476401"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "SELECT AVG(sculptorID ) INNER JOIN (SELECT COUNT(*) RIGHT JOIN art_1.Artists ON fname <height_mm FULL OUTER JOIN art_1.Sculptures AS PYBJ3PvEcKlMf"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "SELECT AVG(Artists.mediumOn )\nINNER JOIN (SELECT MAX(*) ORDER BY width_mm , artistID , fname LIMIT 0 OFFSET 104226672701121823371629149934174097648078253600706063205433113530"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "SELECT AVG(Artists.paintingID )\nFULL JOIN (SELECT COUNT(*))\n\n AS IRELAND ON Sculptures.height_mm = 0;"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "SELECT COUNT(deathYear )"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "SELECT AVG(sculptureID )\n\n\nWHERE artistID = (SELECT * FROM art_1.Artists) ORDER BY deathYear , medium ;"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "SELECT COUNT(sculptorID )\nWHERE Sculptures.height_mm = 1RIGHT JOIN art_1.Artists AS lFQ ON fname <-4 INNER JOIN (SELECT COUNT(location ) AS b) AS p ON sculptorID > 0;"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "SELECT SUM(Artists.deathYear )"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "SELECT COUNT(paintingID )\n\n\nWHERE Sculptures.height_mm = 0 LIMIT 130005"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "SELECT AVG(sculptorID )\nRIGHT OUTER JOIN (SELECT art_1.artistID FROM art_1.Artists WHERE deathYear = 0 INNER JOIN art_1.Artists ON Artists.deathYear > 1) AS lpLfHVBAEADCULGESTORBALLSOLUT"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "SELECT COUNT(paintingID )\nORDER BY Sculptures.deathYear LIMIT 23 OFFSET 3"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "SELECT MIN(art_1.medium )"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "SELECT COUNT(deathYear )\n\n\nLIMIT 568371045704036"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "SELECT MIN(sculptureID )FULL OUTER JOIN (SELECT COUNT(*)GROUP BY Sculptures.deathYear , paintingID ORDER BY deathYear , Paintings.deathYear LIMIT 437104120332818382944122230394616"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "SELECT COUNT(sculptorID )\n\n\n INNER JOIN (SELECT COUNT(*)FULL OUTER JOIN art_1.Artists ON sculptorID = 4692848361220388816290921352389182446112632154480332217343747408730554560"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "SELECT MIN(sculptorID )FULL OUTER JOIN (SELECT MAX(sculptorID ))\n\n\n  \n\n AS CULTIVATIONALAN ON Sculptures.birthYear <height_mm ;"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "SELECT MIN(Artists.deathYear )\nFULL OUTER JOIN (SELECT * FROM art_1.Artists WHERE artistID = 'B6c9f0bd8' LIMIT 1) AS mOzISHEET ON Artists.artistID > 0;"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "SELECT COUNT(lname )\nLIMIT 3247870182315891"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "SELECT MIN(sculptureID ) AS eleric_encrOfQJ9jv6iBx8uYz3o1w0dUa4V5L\n\n\nGROUP BY artistID LIMIT 5763489077221636231215113565288849779942131057484524275837013039"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "SELECT AVG(sculptorID )"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "SELECT AVG(Artists.fname )\n\nFULL JOIN (SELECT SUM(*)\n\n INNER JOIN art_1.Paintings AS EPLISTRYPRINTINGBODYHEREpOTSOLVERjETc3JOC2VECsAASgATl0Wvzw4LZOaQhI8YU6"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": "SELECT DISTINCT AVG(Artists.deathYear )\nRIGHT JOIN (SELECT DISTINCT MAX(Paintings.painterID ))\n\n     \n\n AS ILLUSIONISTS ON Artists.deathYear = 1753185817853638483767141213"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "SELECT MIN(sculptorID )RIGHT OUTER JOIN (SELECT MAX(sculptorID ))\n\n\n AS IHANMARFAMOUMAKARAADYENNAUNRAVATEAOSKAEDIAISASBQGURDABIKKOLORAGAYODOMUBAJWACCHIZLAAIMR"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "SELECT COUNT(location )\nLIMIT 3000041000118118900052002857003617122054502660086878332767451416605624779075884419066390965374034237215610483055587313474321198384680984219315011874296311496499079"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": "SELECT art_1.lname LIMIT 800073680291925181310993316204814153411607900897027283890304095432677100015524585732124794371754458399909844397592506587421490622632004110908564668074131935369918"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": "SELECT SUM(sculptureID )RIGHT OUTER JOIN (SELECT COUNT(deathYear ), fname INNER JOIN art_1.Artists\n  AS uvJerQyUwFbfZBp8uH4W9MmVzDlOtEgL3cR"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "SELECT art_1.sculptorID GROUP BY Paintings.artistID LIMIT 1 OFFSET 1033753020366024000819052201582717502928993908382600677832151040490906441348349655180422010380257716876494145954114535"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "SELECT DISTINCT AVG(Artists.birthYear )RIGHT JOIN (SELECT SUM(*), sculptorID )\n\n\n AS MYSELF_NAME1W ON EXISTS (SELECT DISTINCT AVG(Artists.birthYear )RIGHT"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": "SELECT COUNT(artistID )"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "SELECT AVG(sculptorID )\nORDER BY Sculptures.lname LIMIT 8;"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "SELECT COUNT(paintingID )\nGROUP BY Paintings.deathYear LIMIT 3166101735"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "SELECT COUNT(lname )\nINNER JOIN (SELECT AVG(*))\n\n AS HENRY ON EXISTS (SELECT * FROM art_1.Artists WHERE birthYear = 1040361716462339083FULL OUTER JOIN art_1.Artists ON art_1.Artists"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "SELECT SUM(Constructor ) WHERE Age = 6.4 RIGHT OUTER JOIN (SELECT COUNT(*) ORDER BY Pole_Position , Entrant , Fastest_Lap LIMIT 23108090205035488933141628792634406423273929"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "SELECT COUNT(Race_Name )\n INNER JOIN (SELECT race.Fastest_Lap FULL JOIN car_road_race.race ON race.Fastest_Lap <= 0) AS mfqrcount ON EXISTS (SELECT AVG(Age ) INNER JOIN car_road_race.race ON"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "SELECT SUM(Race_Name ) RIGHT OUTER JOIN (SELECT Engine GROUP BY Winning_team LIMIT 9)\n\n\n   \n\n AS CUENAZAASISTEURKATTOONRJANDAALAPARABETACHCHDUELVOYMIGORITGUNNAM"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "SELECT MIN(Race_Name )\n\n\nFROM (SELECT COUNT(*), SUM(Race_Name ), Race_Name );"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": "SELECT AVG(Race_Name )\nFULL OUTER JOIN (SELECT Race_Name )\n\n AS IYONHARADINKA2SO5WAN8JQD1LY3SHALP4Z0DJM9V7G6GGBYSSPEKRFIA10SEGAPRUBABLESSEXOOMIODC"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": "SELECT AVG(Age ) RIGHT JOIN (SELECT Pole_Position , SUM(*)\nFULL JOIN (SELECT DISTINCT race.Race_Name FROM car_road_race.race WHERE driver.Driver_ID = 2 INNER JOIN (SELECT Pole_P"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "SELECT SUM(Chassis )LIMIT 11207024363746503225182030384840341060649733008023561217786788132839762907983575454426651406667957990474215271905778311690862105224953169324636590184322458378984625"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": "SELECT Pole_Position , SUM(Driver_ID )\nLIMIT 20005 OFFSET 100000004000020800101000110100010040030600200000001000000000000000000000020000701038145536187844583433231512081177161748562860274798137524594315825882985506822261907739"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": "SELECT *\nINNER JOIN (SELECT Pole_Position LIMIT 5)\n\n AS EJAYYRETTEN ON Chassis < 1.92446374839490571140471043275722146079858360123959988296467187500595480253589312334131915783816"
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": "SELECT SUM(Fastest_Lap ) FULL JOIN (SELECT Report , Engine LIMIT 9) AS VOCALORING ON Pole_Position = 1RIGHT JOIN car_road_race.race\n\n\n  AS SELECTLALLENCURFOLK"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "SELECT Engine GROUP BY Chassis LIMIT 47240774613781536751617015533235030542928853500473439371860981248665726241158384599809727657973000619062522500524769878870909954984200205914961127156489415517"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": "SELECT DISTINCT SUM(Constructor )\n\n\nLIMIT 4310005000010500400000001005022708010084745151377482040800463327763660781437381829043917083556992557191607746430669475626542112842197118812692385445868554906"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "SELECT AVG(Age )\nWHERE Chassis > 7.4"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": "SELECT AVG(Age )\nFULL OUTER JOIN (SELECT COUNT(*) GROUP BY Race_Name ORDER BY race.Chassis LIMIT 5160811202267263400882827705077204310063835114432121517071347255848577536"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": "SELECT MIN(Constructor )\nLIMIT 1 OFFSET 0;"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "SELECT MIN(Constructor )\nGROUP BY Chassis LIMIT 2 OFFSET 330416363411576054172630856799482329373919258769752744389546013335551394141232"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "SELECT Winning_team \nFULL JOIN (SELECT race.Driver_ID FROM car_road_race.driver WHERE car_road_race.Race_Name = 'R-28' ORDER BY car_road_race.Race_Name , Driver_ID ) AS RaceDateMATCH ON driver.Driver_ID <= 50000 INNER JOIN car_road_"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "SELECT AVG(Constructor ) LIMIT 10061578000911105717190109410053729252297164835503933141218598947777624403879267075885003027549972201760368049463652065985631"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": "SELECT MIN(Constructor )\n\n\n  \n\nINNER JOIN (SELECT Race_Name LIMIT 3)\n AS SESGINGMAY2V4H6B9A7ADQ1KWIFE5F3D0DF8BAECAB11BBEF254942DD0946AAED62EB40FA37C5539"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "SELECT AVG(Constructor ), SUM(Pole_Position ), COUNT(*)\nINNER JOIN (SELECT DISTINCT * FROM car_road_race.driver WHERE driver.Driver_ID > 100000 ORDER BY driver.Driver_ID ) AS dee1 ON Driver_ID = 0;"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": "SELECT MIN(Age )"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "SELECT AVG(Age )\nWHERE Winning_driver = 18.5;"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": "SELECT MIN(Constructor )\n\n\n  \n\n INNER JOIN (SELECT Race_Name , Fastest_Lap LIMIT 8) ON Age = 0FULL JOIN car_road_race.driver ON race.Constructor = Constructor ;"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "SELECT MIN(Constructor )\n\n\n INNER JOIN (SELECT SUM(*) RIGHT OUTER JOIN car_road_race.driver AS KFOSVATELGLEDALAINJITEXZENTOPQCADIA\n\n\n AS INERRAEUNKWETCHASM"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": "SELECT MIN(Race_Name )LIMIT 2032602400025408075007050021605090303002001000400001401367828800173727168849552685297739151938335974995745344364481867121198585435732454469632076295132360534042106895757909"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "SELECT MIN(Race_Name )FULL OUTER JOIN (SELECT Race_Name , Race_Name )\n     \n\n\n AS ELGATORYNAMELEAGUECLUB1MILLAENNAESIAWELCOMEWEAKLANDJAMUCCOSCAITOROBALLOCAPEXONZANDALYSTIMFUNTCHDURANDA"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "SELECT AVG(Chassis )\n                              \nRIGHT JOIN (SELECT Report , Pole_Position LEFT OUTER JOIN car_road_race.driver AS car_xl1h ON car_"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": "SELECT AVG(Constructor )\n\n\nORDER BY Pole_Position LIMIT 2;"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": "SELECT *\nINNER JOIN (SELECT *) AS VORBES_JOBTYPE1A0V2PADD5W4STX3QG7H8Y12ALU14NDK6AS9DSZGLAR16FHSTSLLRBCYSNSLSOLVSRLISSIEDIVRLCRCTJSDRLTRSINBODYNAMDEATOMET"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "SELECT MIN(Constructor )\n\n\n INNER JOIN (SELECT COUNT(*), SUM(car_road_race.driver.Driver_Name ), Race_Name , Pole_Position ) AS WINDOWWORD ON Fastest_Lap \n\n\n= (SELECT *)RIGHT JO"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": "SELECT Entrant INNER JOIN (SELECT SUM(Fastest_Lap ))\n\n\n AS and ON driver.Age = 1;"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "SELECT Engine INNER JOIN (SELECT Entrant LIMIT 4)\n\n\n       \n AS DEVICIA ON Fastest_Lap > 8.1GROUP BY Report ;"
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": "SELECT Pole_Position INNER JOIN (SELECT * FROM car_road_race.driver) AS EMAILTEX ON EXISTS (SELECT SUM(*)) INNER JOIN car_road_race.driver ON race.Road = Pole_Position RIGHT OUTER JOIN"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "SELECT Driver_ID LIMIT 2500419160531000020344087703538606410221317335036184625290415000710061287530285843240920044142699575577897345277949721562388981267531159766932164796112612539078210190405438134810"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": "SELECT COUNT(Constructor )\n INNER JOIN car_road_race.driver AS driver ON car_road_race.driver.Driver_ID = Driver_ID ORDER BY Driver_Name , Winning_driver , Constructor , Entrant , Engine , Fastest_Lap ;"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": "SELECT AVG(Constructor ) RIGHT OUTER JOIN (SELECT SUM(*)\n\n\nFULL OUTER JOIN (SELECT * FROM car_road_race.driver WHERE Driver_ID = Constructor GROUP BY driver.Driver_ID ORDER BY race.Driver_ID ) AS R"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": "SELECT COUNT(Constructor )\nWHERE Winning_team = 1;"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "SELECT COUNT(Age )\n\n\nFULL OUTER JOIN (SELECT COUNT(Entrant ))\n\n \n\n AS DIGGENDAHUWNSALPOURYMURJADKATNAICOLASBOROGZINVOCRACELOSLAPMAYSITFOMETEXPRIMNAMBAHYLSOTTABSOLLI"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "SELECT SUM(Fastest_Lap ) GROUP BY Pole_Position ORDER BY Driver_Name ;"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": "SELECT SUM(Constructor ) LIMIT 310 OFFSET 648"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": "SELECT SUM(Race_Name )ORDER BY Winning_team , Pole_Position "
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": "SELECT MIN(Constructor )\n\n\n INNER JOIN (SELECT Pole_Position )\n\n AS NOXJUNHZM1FG9Yv6f7z3u4dh0pWQaU5Vb8swDmBKiCxl2yNWjLqeNsbTgRkIo"
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": "SELECT AVG(Constructor ) LIMIT 89801256029231719043100827181215493937442890451146267822163466555042304700546477339631"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": "SELECT SUM(Constructor )\n\n\n INNER JOIN (SELECT Race_Name )\n AS ZHIJXJYWKZQLsP0oF5G7A9hjn4g6dxm3qf1pkmvwDuM2Bc8tzUiRtlEeyCkNlVy"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "SELECT official_languages.country_id FULL JOIN (SELECT SUM(economics_score )) AS NOSlANGK ON EXISTS (SELECT overall_score )\nFULL JOIN (SELECT language_id FULL JOIN (SELE"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": "SELECT language_id INNER JOIN country_language.countries AS eakatteilneirhviliiaasinolamieenjeapembajmaacalarauiturahnuljompraiponheutkoroviszediagdrutpumimwetrif"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": "SELECT COUNT(*)\nLIMIT 100000000040000104812100203632001318800100000008281601111714336815552908700442588605898407842803084193577678937455447572765246321105649039266006200959995310996685411203848005002129094279281312"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "SELECT AVG(id )LIMIT 13;"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "SELECT AVG(id )\nWHERE id = -1.4FULL JOIN (SELECT id , SUM(*) GROUP BY name LIMIT 909664292713880108845809099307847240028261648981849363779575043126595392533694638672255607044"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "SELECT health_score , language_id INNER JOIN (SELECT id GROUP BY economics_score )\n\n\n   \n\n AS slechtenstokdeutungenhilbrichtrumpettofangaugefrandtteklopkeldwesigheren"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": "SELECT AVG(name )\n  LIMIT 205015604536000220123750033000071005191030482913901718642620359978141639694777964037495928542787422557654346678055881289732456322008631606054483201603401986304155023003670"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "SELECT SUM(countries.justice_score )\n\n\nFULL JOIN (SELECT COUNT(*) LEFT JOIN country_language.official_languages ON name =0GROUP BY justice_score )\n\n\n AS EHUZO"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": "SELECT AVG(countries.education_score )\n\n\n INNER JOIN (SELECT COUNT(*) FULL JOIN country_language.countries ON EXISTS (SELECT AVG(countries.education_score )\n\n\n INNER J"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": "SELECT MIN(countries.name )\n\n\nWHERE id > 31007000 RIGHT JOIN (SELECT COUNT(*)FULL JOIN country_language.countries AS SELECUTMORETZINiABAHITAABQDAPALISUANVADYK"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "SELECT SUM(id )\nWHERE id = 4.67371664114329463433471438152830759835106313595860482365185744692297315025760026961190003100417733988405527249401490653789978872062139457712\nRIGHT OUTER JOI"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": "SELECT COUNT(name )\nRIGHT OUTER JOIN (SELECT COUNT(*)ORDER BY official_languages.health_score , countries.justice_score LIMIT 100001000000800051008002501142448346040350055454615200600300400500"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "SELECT official_languages.country_id INNER JOIN (SELECT SUM(economics_score ))\n\n\n AS BONLY ON EXISTS (SELECT * FROM country_language.countries WHERE economics_score > 0 ORDER BY id , politics_scor"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": "SELECT languages.country_id , official_languages.country_id , economics_score , country_id , justice_score , health_score , languages.country_id , official_languages.pol"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": "SELECT languages.country_id RIGHT JOIN (SELECT COUNT(education_score ))\n\n\n    \n\n AS toEASTREN ON EXISTS (SELECT COUNT(name ), SUM(*)) LIMIT 20000120002"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "SELECT COUNT(politics_score );"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": "SELECT MIN(name )\nWHERE health_score = 1 RIGHT OUTER JOIN (SELECT MIN(justice_score ), SUM(*) LEFT OUTER JOIN country_language.countries AS HREGOLSTWON\n\n AS inhvnechtekon"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "SELECT MIN(name )\nLIMIT 156048105718117830232289384098202627375025361315775829476517856414794470490134632400944546339067431208687616955552175357588395417719041002115990769789380571110732256186026402527"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT *)\n\n AS isthenameofacountryasidtokaijinotokukomakuunjiusouharaamagashiiutachiibenshinkonnageeikankemiadirimanogitakaariguikukabahizatettooborikooshitsuifukuichijiteishairodariyaideki"
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "SELECT COUNT(health_score )INNER JOIN (SELECT countries.justice_score , health_score )\n\n\n  \n AS LADHJUNAISIECHCOUNTAIAFETDURSAKASKAENAFETHIUNGIANPARMAEALYNEV"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": "SELECT AVG(economics_score )"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": "SELECT AVG(countries.country_id )"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": "SELECT COUNT(countries.country_id ) AS FORMAT INNER JOIN country_language.languages ON justice_score = 1 GROUP BY country_id LIMIT 8;"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "SELECT AVG(countries.health_score )\n\n\n INNER JOIN (SELECT MAX(politics_score ) AS HEMITY) \n\n\n\n\n\n\n\n\n\n\n AS EASILY ON EXISTS (SELECT SUM(*), countries.health_sc"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": "SELECT COUNT(health_score )FULL OUTER JOIN (SELECT SUM(*) ORDER BY health_score , education_score )\n\n\n AS HEMELLAJASLACOSWVETALANTIFPATHELSTICOCOORTHONCOU"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "SELECT AVG(countries.economics_score )\n INNER JOIN (SELECT economics_score )\n\n  AS TESMOBILISIAJORDUENGABALITIMOSPELASKATURONNAEINTOIRVETUNMBAXAHANEMAAARADOLAYSAPO"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "SELECT COUNT(name )\n  \n\n INNER JOIN (SELECT COUNT(name )) AS English ON EXISTS (SELECT COUNT(name ), SUM(name ), MIN(name )) RIGHT OUTER JOIN country_language.languages AS counterr ON n"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "SELECT AVG(economics_score )"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": "SELECT AVG(countries.language_id )\n\n\nFULL JOIN (SELECT SUM(overall_score ))\n   \n\n AS NISROCESSORIAHASTAQUEAARBAIJJKALIKATAKZADAAANRAILGULOSAMHAETTEBOLOBODESIMACOYPOT"
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": "SELECT COUNT(id )GROUP BY name ORDER BY overall_score LIMIT 1000"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": "SELECT SUM(countries.country_id ), COUNT(*), MIN(*)\n\n\n    \n\n INNER JOIN (SELECT * FULL OUTER JOIN country_language.official_languages ON official_languages.overall"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "SELECT COUNT(name )\nFULL JOIN (SELECT COUNT(name ))\n\n AS ILLUSTRATIONS ON EXISTS (SELECT * FROM country_language.countries WHERE languages.country_id = 1 ORDER BY language_id LIMIT 9363820302700641090373323161848"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": "SELECT COUNT(countries.country_id )\n\n\n  \n\n INNER JOIN (SELECT COUNT(countries.country_id ))\n\n AS NEGARABADATGANNAKUYAYASRAFHAJEONWITHCOUNTRYIDENTABACOLHOTIMAORITRIOSALAMISCHIAPELVESIBAO"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": "SELECT COUNT(languages.politics_score )\n INNER JOIN (SELECT COUNT(languages.country_id ), id , language_id GROUP BY justice_score LIMIT 91014152546296734281617003740492089112313"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": "SELECT COUNT(*)\nLIMIT 100000000100000018001190216203313000002000000000011111137402345178825907078682846242726144415225599396765981059755879090785495736546903504812602996315530763101100340005320108818836432161189352037"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "SELECT COUNT(languages.politics_score )LIMIT 0"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": "SELECT COUNT(*)\nLIMIT 1 OFFSET 22;"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "SELECT COUNT(name )FULL OUTER JOIN (SELECT MAX(*))\n\n\n AS EZMICHOLBEMUDATJOSBAWALVITTOASYUTIAHONIKISGULMABILIMIOTELMARIRTAKUNTILVAKEZAKIREKOCHENESKAOULYNAMOOPFANGLIARAGANTHA"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": "SELECT SUM(name )LIMIT 21663017481419573467153718383945331346273540605512240198652529756477165974209969508949702244787666805868564784361097265413523960051104119599530210102814179330467903815485718"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": "SELECT AVG(countries.education_score )\nFULL JOIN (SELECT SUM(*), country_language.justice_score , COUNT(*)) AS VARIANTIALSEXPRESSESCOUNTRYIDORATORSCOMPLAINEDRANDSETWEBASICISSUPITIANSCOREELE"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answer": "SELECT is_seller RIGHT OUTER JOIN (SELECT Properties.search_string ) AS SYSISCELLERZ1Y4ASBJ6F2P3MVXQWGODATD5K8EUNH0NDBLEDTUZZLAMSAI9CKEKKAFNDSAD7ABA"
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT Features.search_datetime )\n  \n\n\n AS DATETISTRYKANSASBAYAMUNDAUADALANDAPRILJAHOLDHABANNAWOMENIMEIDULANOPARTAURIHINLAKEDAYGRIZPIT"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "SELECT is_seller , SUM(line_2_number_street )\n INNER JOIN (SELECT line_3_area_locality LIMIT 2) AS latte1LUNER0 ON town_city = first_name ;"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": "SELECT AVG(search_datetime )\n\n\n  INNER JOIN (SELECT COUNT(town_city ))\n AS auiponemfecanenvitioAegisaponeaeInseporeeHouneurFocorheiAsaileGibilinAnumineSigutiaIg"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": "SELECT vendor_requested_price , is_buyer ;"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": "SELECT is_seller GROUP BY Rooms.first_name LIMIT 1 OFFSET 23;"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT * FROM real_estate_rentals.Ref_Property_Types WHERE search_datetime = 150000)\n\n\n   \n\n AS ENSULTATABLES ON datestamp > 1 RIGHT JOIN (SELECT * FROM real_estate_"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": "SELECT vendor_requested_price INNER JOIN (SELECT Rooms.age_category_description )\n AS NERDINISEALIANOSAUNTOIAWASUBAHADESYGOTAROCZFODANNYREVENJOHRULBQPXKL"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "SELECT SUM(Rooms.vendor_requested_price ) RIGHT OUTER JOIN real_estate_rentals.Addresses ON country = Property_Photos.county_state_province LIMIT 1;"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "SELECT is_seller , search_seq ;"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": "SELECT AVG(search_datetime )\n\n\nINNER JOIN (SELECT * INNER JOIN real_estate_rentals.Users ON EXISTS (SELECT town_city , zip_postcode , country , room_type_description ) ORDER BY line"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "SELECT town_city , search_datetime ;"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": "SELECT Property_Features.search_datetime RIGHT JOIN (SELECT MAX(property_feature_description ) ORDER BY Users.other_user_details \nLIMIT 20203350372690304917456064251289278813"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": "SELECT is_seller , SUM(county_state_province ), SUM(property_name )\nINNER JOIN (SELECT AVG(*) RIGHT JOIN real_estate_rentals.Ref_Property_Types ON search_datetime = room_number )\n "
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": "SELECT is_seller , address_id WHERE search_string = '1'\n INNER JOIN (SELECT *) AS LEEJY ON Rooms.county_state_province = 2000000001 LIMIT 1 OFFSET 3"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": "SELECT Rooms.zip_postcode FULL OUTER JOIN (SELECT COUNT(Features.first_name ) AS NAMES, User_Property_History.datestamp ORDER BY town_city , garage_yn LIMIT 4) ON country = other_property"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": "SELECT is_seller , SUM(Rooms.price_max ), Rooms.datestamp ;"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "SELECT COUNT(price_min )\nINNER JOIN (SELECT MIN(town_city ), town_city , MAX(town_city )) AS ciTYARDWIDTHDIMENSIONALITEMETRYDROPPERBOLTESTEDSELECPENDINGVODERASMSEPATHsLLIFYCALLFREQUENCYEVERGENT"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": "SELECT is_seller , SUM(property_name )\n\n\n  \n\n INNER JOIN (SELECT Rooms.room_type_description ) AS NOHOOOLBINZENYPODROISFULLEDELABENTIFORTHANETKDINGALDRAPIDEREMATRIACONGUNTOARXRADUBAVAS"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "SELECT User_Property_History.date_registered INNER JOIN (SELECT Rooms.date_registered ) ON Properties.datestamp \n< -8281039306070584840852677203501889534132215892945127823991418"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": "SELECT is_seller RIGHT OUTER JOIN (SELECT * FROM real_estate_rentals.Ref_User_Categories WHERE country = '12') AS xSEP2 ON garage_yn > 1 ORDER BY datestamp ;"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "SELECT is_seller INNER JOIN (SELECT * FROM real_estate_rentals.Rooms WHERE is_buyer = 0) AS joltsl3n2EALJOLTSL4MVB0C6TfXDQ8F5FRWGZcwYzKHbmOiA1vI7hRk9uN"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "SELECT is_seller , search_datetime INNER JOIN (SELECT is_seller )\n\n\n AS NOS ON Rooms.country = country GROUP BY password LIMIT 1"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT * FROM real_estate_rentals.Ref_Age_Categories)\n\n\n AS TEWANZENNER ON EXISTS (SELECT search_datetime ) ORDER BY Properties.price_max LIMIT 1"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "SELECT is_seller INNER JOIN (SELECT User_Property_History.date_registered )\n\n\n  \n AS EY2F5AD0B9A6E7FB75FC842AA152590D7422493595232632284827591750886087C371051ED5547408516"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": "SELECT is_seller , search_datetime ;"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": "SELECT DISTINCT COUNT(search_string )\nINNER JOIN (SELECT * FROM real_estate_rentals.Users WHERE first_name = 'John' ORDER BY date_off_market , User_Searches.search_string )\n AS ENSURVIVETES ON Rooms"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": "SELECT is_seller \nINNER JOIN (SELECT Rooms.datestamp )\n\n AS LOUISVILLE ON Property_Features.date_off_market = 84470421310492964393616252830452312243222178835576589726276620982\nINNER"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": "SELECT is_seller INNER JOIN real_estate_rentals.Addresses\n\n\n AS areaiversiafosstoogycezasafomorrohvumuirajpkamodecinopciejgrycznyxurufrulciutofaracipiigelenatikimtakm"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "SELECT is_seller ORDER BY town_city , Property_Photos.password ;"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "SELECT is_seller , address_id ;"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "SELECT COUNT(search_datetime )\nLIMIT 30006;"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "SELECT is_seller INNER JOIN (SELECT * FROM real_estate_rentals.Addresses WHERE date_on_market = '1' LIMIT 2)\n\n\n   \n\n AS for ON address_id < 10210004 ORDER BY country LIMIT 818272050;"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": "SELECT Rooms.is_buyer LEFT OUTER JOIN (SELECT User_Property_History.user_address_id FULL JOIN real_estate_rentals.Users AS TURBESRJASSSSAKATIMOSSPECEISNACV1C0L2A3"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "SELECT is_seller , SUM(user_id )\n\n\n   \nINNER JOIN (SELECT Rooms.date_registered LIMIT 1)\n AS ALTERNATIVE ON Features.login_name = 0;"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "SELECT is_seller , SUM(town_city ), Properties.photo_description \nINNER JOIN (SELECT AVG(*) INNER JOIN real_estate_rentals.Users AS ReSourceID ON is_buyer = search_string )"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": "SELECT Rooms.room_number ;"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": "SELECT vendor_requested_price RIGHT JOIN (SELECT * FROM real_estate_rentals.Rooms WHERE address_id = 'C' ORDER BY search_string ) AS TENORSEWHEREiMEMIDx1cltd3vHN2PJ8rGQWVgTpE5SX9Y"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": "SELECT User_Property_History.login_name LIMIT 350071423302057174059330125481046605837183215272667751328546812509324785595297619030006223565563888163400775345646902129391172197147288497909053666208914573059"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": "SELECT is_seller , SUM(owner_user_id ), MAX(owner_user_id )\n\n\n INNER JOIN (SELECT age_category_description ) ON User_Property_History.country = 1;"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT Features.user_category_description WHERE age_category_description = is_buyer )\n AS CATEGORYAAN1H5ZK8JB3OI4U6L0T9Q2F7C"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": "SELECT is_seller , address_id INNER JOIN (SELECT datestamp FROM (SELECT login_name ) AS name) ON search_datetime > 2015.011021;"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": "SELECT is_seller , SUM(middle_name ), COUNT(property_id )\n\n\n INNER JOIN (SELECT MIN(*) RIGHT JOIN real_estate_rentals.Property_Features AS sstettyfltmikldlkndzpvevqejwg"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": "SELECT is_seller \nINNER JOIN (SELECT COUNT(Addresses.town_city ))\n\n AS EASIERAL ON EXISTS (SELECT COUNT(Addresses.town_city )\nINNER JOIN (SELECT COUNT(address_id ))"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": "SELECT is_seller , SUM(county_state_province )\n\n\n    \nLIMIT 1;"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": "SELECT is_seller , SUM(last_name )\n\n\n INNER JOIN (SELECT login_name ) AS DANZAVARAFDAQBALPADLHACHLATGXWETGLDYLLK0FLAABL1GGBBUIFIT5AMTL8M4SSRNS7IOC6EJ"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "SELECT is_seller , search_datetime INNER JOIN (SELECT vendor_requested_price )\n\n\n   \n\n AS eAESVEDiRjK8uYf7QkH4h1XnwGJzcTbFt5aU9vBd3I6ZmE2N"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "SELECT COUNT(Users.last_name )\nINNER JOIN (SELECT COUNT(user_id )RIGHT OUTER JOIN real_estate_rentals.Features AS ETCEZ0B2UYC1JN4BLPQG3BAXO6A9D8V"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": "SELECT is_seller GROUP BY Rooms.is_buyer LIMIT 200000005200005020483533302325583717161157121355432488986460223670293959654727678980630128187844861"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "SELECT COUNT(search_datetime )\n\n\n  \n\n INNER JOIN (SELECT COUNT(*) ORDER BY Properties.country , other_address_details , user_id , real_estate_rentals.county_state_province"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": "SELECT is_seller , SUM(date_off_market ), Properties.date_registered ;"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": "SELECT is_seller , search_seq ;"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": "SELECT Properties.age_category_description GROUP BY Rooms.age_category_description ORDER BY Features.age_category_description ;"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": "SELECT DISTINCT COUNT(search_datetime )\n \n\n INNER JOIN (SELECT SUM(*) LEFT OUTER JOIN real_estate_rentals.Ref_Age_Categories ON country = search_datetime LIMIT 1230 OFFSET 7159843928184416"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": "SELECT is_seller FULL JOIN (SELECT MIN(Rooms.first_name ) RIGHT OUTER JOIN real_estate_rentals.Features\n\n\n    \n AS TENZVATELIAGUMAURNITIMAMUJIIDRAABYLQEK"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": "SELECT is_seller GROUP BY Rooms.vendor_requested_price LIMIT 90863600973318132637270178704935584060289923504767553057222454805917204839731564444632163485454200081210847566190621472577"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": "SELECT Rooms.vendor_requested_price FULL OUTER JOIN real_estate_rentals.Ref_Room_Types AS TRINGLEAVERBAN\n\n\n AS USED ON date_on_market = (SELECT Rooms.vendor_requested_pric"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": "SELECT is_seller , address_id INNER JOIN (SELECT Rooms.photo_seq )\n\n\n AS ELLEEMASHIRISESZCHMOSKVWITABAQANTHORGOVYF4D9E ON EXISTS (SELECT Properties."
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": "SELECT is_seller \nFULL JOIN (SELECT COUNT(age_category_description ) FROM real_estate_rentals.Ref_Property_Types) AS cvarchar ON age_category_description = '%0x' GROUP BY datestamp , country ;"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": "SELECT is_seller \nINNER JOIN (SELECT Properties.search_datetime RIGHT OUTER JOIN real_estate_rentals.Addresses AS TEASENERES\n\n \n\n AS WELLESTLYAsWellestlyaswelllyhaseliterighstlectp"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT * FROM real_estate_rentals.Ref_User_Categories)\n\n\n AS forlivespersonsThefullnameOfUsersThisUserNoSubmissionNameIfAllModificationInASiteIsValidYesToDeleteWhenPeriodicRestrictionsSetYouAreNotAdminFeeStoredForSecondsAfterRe"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": "SELECT is_seller , SUM(county_state_province ), Features.photo_filename ;"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "SELECT is_seller , search_seq , search_seq ;"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": "SELECT * FROM real_estate_rentals.Features WHERE town_city = 1 ORDER BY date_off_market , is_buyer \nLIMIT 5276748984246439171133795815361057204312785563704728971809504035773499051"
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "SELECT is_seller , search_datetime ;"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "SELECT COUNT(purchase_year )\n\n\nFULL JOIN (SELECT COUNT(purchase_year ))\n\n AS BORONRYZESCEJOCARALAYMEREVIAKADAWASUQENGAKEEHURANAMAZUKATNAFLOYDACMAIDECOGAHAIAPPIGBISAKNAAG"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": "SELECT COUNT(cyclists_own_bikes.price )\n\n\nLIMIT 300000010003200003005006000000021594857619161426603717297925462150404439287578247620575554669735361058649499091268802223533042105454901431895151170386789"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": "SELECT AVG(name )\nWHERE weight \n\n>1"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "SELECT MIN(bike_id )\nINNER JOIN (SELECT COUNT(*) ORDER BY id , cyclist.purchase_year , id LIMIT 50000000505500707536673550010404580025400100072300000400000003000000001111110100010102112322144413100200"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "SELECT MIN(cyclist.result )"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "SELECT DISTINCT COUNT(heat )\nRIGHT OUTER JOIN (SELECT SUM(*) RIGHT OUTER JOIN bike_racing.cyclists_own_bikes\n\n AS EENASYDIANVEMETERSHIPANBALOZOLITEL\n\n AS ILLUM"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "SELECT COUNT(bike.weight )\nGROUP BY bike_id , id ;"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": "SELECT AVG(id )RIGHT JOIN (SELECT DISTINCT COUNT(*)LIMIT 21913644818543628144046110149783477584537386022882975191217475532125232730394486333598696825996610509316098730076157970592657"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "SELECT AVG(id )"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "SELECT AVG(cyclist.cyclist_id ), SUM(material )\n\n\n       \nINNER JOIN (SELECT COUNT(*)) AS CYCLISTOCRYAS ON EXISTS (SELECT AVG(cyclist.cyclist_id ), SUM(material"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": "SELECT AVG(name )\nLIMIT 1120"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": "SELECT AVG(bike_id )\nINNER JOIN (SELECT DISTINCT SUM(*)WHERE EXISTS (SELECT * FROM bike_racing.bike WHERE material > 1 ORDER BY bike_id LIMIT 2 OFFSET 10))\n\n\n AS DEADLY ON id = 3;"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "SELECT SUM(id )\nINNER JOIN (SELECT DISTINCT MAX(*) RIGHT OUTER JOIN (SELECT * FROM bike_racing.bike, bike_racing.bike AS BIKES2GROUP BY bike_racing.bike_id )\n AS VASTELLOZDOTCHEVJIELA"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": "SELECT COUNT(*)\nINNER JOIN (SELECT *)\n\n AS DOUBLEHULLED ON EXISTS (SELECT COUNT(*)) ORDER BY name LIMIT 1215486728272617244501123639389510232916576520464090339146449476688587813322587187904227577"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": "SELECT SUM(cyclists_own_bikes.result )\n\n\n  \n\nLIMIT 4372812685714394888271858241907847982330652978402050750090774416605449809517552511631346458632109766227470386715736443265906327936"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": "SELECT COUNT(bike.name ) AS BELOIR\nFULL OUTER JOIN (SELECT COUNT(id ))\n\n AS EASTISETTABOCALYPSAVERIANOSITACAMONESCHILDs1st5th3rd4th2nd25m45l55o80a7c95g01f15h0p9"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": "SELECT MIN(cyclists_own_bikes.purchase_year )\n\n\n                \nRIGHT OUTER JOIN (SELECT AVG(*) AS CYCLE, SUM(id ), MIN(cyclists_own_bikes.purchase_year )\n\n INNER JOIN b"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer": "SELECT SUM(CustomerId )\n\nFULL JOIN (SELECT Price INNER JOIN bakery_1.goods\n\n AS ECHOODOREVANTS ON FirstName =-4GROUP BY Receipt ORDER BY LastName , goods.Price )\n AS INC"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": "SELECT MIN(Item ) LIMIT 2175"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "SELECT Ordinal FULL JOIN (SELECT MIN(Date ) RIGHT JOIN bakery_1.goods\n\n\n AS Efthlygigeltehntsbjekerjeldahettirtvielekeqkreemitummjaorwandonnnezivikovdiaenetalu"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(items.Price ))\n\n\n   \n\n AS EJETUANTAHENZIAONIANUSINGASATICFREEMERGIZESCHEAP ON LastName > Date INNER JOIN (SELECT COUNT(items.P"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": "SELECT DISTINCT AVG(Item )WHERE EXISTS (SELECT COUNT(*)RIGHT OUTER JOIN bakery_1.items\n\n\n     \n\n AS ILLUSTS ON LastName = 2 RIGHT OUTER JOIN (SELECT receipts.Id , customers"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": "SELECT MIN(Item )"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": "SELECT Id , SUM(Receipt )FULL OUTER JOIN (SELECT DISTINCT COUNT(*)GROUP BY Receipt LIMIT 209070222325243034574416122937192717391815215077494364758926013280403860463387351178993610"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": "SELECT Price INNER JOIN (SELECT SUM(Date ))\n\n\n AS EAST_BARGUMENISTICATZANIANEMASKISETIKYOSPULEHOMONIMOGODFANGCALORITXUTQAELTIAUSJAMRAAOTIUNAYNUKCHUOIDIGSUILVINTHIRULS"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "SELECT SUM(CustomerId )\nFULL JOIN (SELECT COUNT(Date ))\n\n AS OTLINGYASKULISKIHURUNAJONAGALAIJAWATBODAMENNAGAHEIDANARUMACOOBIGIMUMAUSHAIKEOLEIKORABINAMEAAOZAKUKSUPAVAPIRNIAQ"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "SELECT MIN(CustomerId )"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": "SELECT Id , SUM(items.Id )\n\n\nWHERE Price = (SELECT items.Receipt );"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": "SELECT DISTINCT SUM(Food )\nRIGHT OUTER JOIN (SELECT DISTINCT COUNT(*) INNER JOIN bakery_1.receipts\n\n AS for ON EXISTS (SELECT * FROM bakery_1.customers WHERE customers.Item = '^3&4' ORDER BY custome"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": "SELECT DISTINCT AVG(Date )\n \n\n INNER JOIN (SELECT COUNT(*) INNER JOIN bakery_1.customers ON EXISTS (SELECT * FROM bakery_1.customers WHERE customers.Id = 0 ORDER BY bakery_1.customers.Id )\n\n\n IN"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Date ))\n\n\n AS TUYPADATITAUNTAKASAKLIMBOLGAALAGULJAMBAGANLAHANGiWELCHEMURAYARVIAQAPEVMMAFLIGEDIONLIHABLENNUTRUGACUBINDAIFEBIO"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "SELECT MIN(Id )"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "SELECT Price ORDER BY LastName , CustomerId , customers.LastName ;"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": "SELECT MIN(Item ) INNER JOIN (SELECT FirstName , items.FirstName , SUM(bakery_1.Date )) AS toAISHATZANKLAKSHALIMPAGNIELASVARIAETJOROVAYTAINADOTROBESYNAMAZILOMIACCITOID"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": "SELECT SUM(CustomerId )\nGROUP BY Receipt "
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": "SELECT LastName ORDER BY Receipt , Date \nLIMIT 10503040"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Price )FULL JOIN bakery_1.items\n\n\n AS RANKING ON EXISTS (SELECT *) INNER JOIN (SELECT Price FROM (SELECT DISTINCT COUNT(*), MAX(Date ), COUNT(Cus"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Date ))\n\n\n     \n\n AS FORCELY ON EXISTS (SELECT SUM(Price ), Price , Date );"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "SELECT Receipt ORDER BY Price LIMIT 473237512"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": "SELECT MIN(CustomerId )\nFULL OUTER JOIN (SELECT SUM(Date ), Date , Date ) ON CustomerId = customers.Receipt ;"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "SELECT Id RIGHT JOIN (SELECT Ordinal WHERE Date =0.5)\n\n\n AS EUVYNITDIAKOR_MOLTDB2F3Q6AJACW1NGXAGLYPZ9G4AUH7ASADETCISMABSAMELIENOINNEIGEIF8RIMT"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": "SELECT DISTINCT COUNT(CustomerId )WHERE EXISTS (SELECT DISTINCT SUM(*) FULL JOIN bakery_1.goods\n\n\n AS TAYOLANESKOVZORA ON Price <4882498602635756499069021927303638375058"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": "SELECT Id GROUP BY LastName ORDER BY Price LIMIT 1;"
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": "SELECT Id LEFT OUTER JOIN (SELECT * FROM (SELECT COUNT(*) AS c_name, items.LastName ) WHERE CustomerId = 'John' INNER JOIN (SELECT COUNT(CustomerId )) ON Item < 3 ORDER BY LastName LIMIT 499010611453094336789204044232746252628"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "SELECT SUM(CustomerId )"
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": "SELECT DISTINCT AVG(CustomerId )"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": "SELECT DISTINCT AVG(Date )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN (SELECT items.Id FROM bakery_1.receipts WHERE customers.Date = 1 GROUP BY receipts.Date , Id ) AS ontecertdcta3rCATIEXECTA"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "SELECT AVG(Receipt )\nINNER JOIN (SELECT items.Date , Receipt )\n\n AS TURTLEDY_1 ON Id < 6000 INNER JOIN bakery_1.items AS elempntonntrlcomma\n AS MACHUSETTESZPQEASN2D4"
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": "SELECT Price INNER JOIN (SELECT MIN(FirstName ) RIGHT OUTER JOIN bakery_1.goods\n AS TALCZERYKATORAIAENDOGWANTSUNBVELISADQ0L9r3XE4f8tGb6vz2Fj"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": "SELECT COUNT(CustomerId ) LIMIT 1508036179027607046163057452825260023145922377715431939118938751320630167666535128878471053345840854472159641824790893290455421263387128989721505417943673607068455716"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": "SELECT MIN(Price ) AS LENGTH, SUM(Price ) AS MIXER\nLIMIT 2;"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "SELECT COUNT(Date ) ORDER BY Receipt LIMIT 32000100"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": "SELECT MIN(CustomerId )\n\n\nORDER BY Price LIMIT 1 OFFSET 2"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": "SELECT COUNT(Food )INNER JOIN (SELECT Receipt , LastName WHERE receipts.LastName \n= 3)\n\n AS KATUSDAMAS_GUTYWATER ON EXISTS (SELECT COUNT(Food )INNER JOIN"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": "SELECT SUM(Price )\nWHERE Item <1LIMIT 3 OFFSET 4"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": "SELECT MIN(Food )\nRIGHT OUTER JOIN (SELECT SUM(Price ))\n\n\n AS KANDAURKAARYATRAVAGIDADGIADASENBODIANCHICINE2x5CrW_6C4FQzZf7djhXH9kpJq1eEtU3n8rL"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": "SELECT AVG(CustomerId )\nRIGHT OUTER JOIN (SELECT COUNT(Flavor ), SUM(Price ))\n\n AS ANNOYINGDIESMADE ON Date <bakery_1.goods.CustomerId FULL OUTER JOIN (SELECT AVG(C"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": "SELECT Id \nINNER JOIN (SELECT LastName )\n\n AS BAKERKANJUISHER_A8BACD7F0BA4AAQ166083DF3DE6CC1CE543CB08928493711E2C3942LNjOnxZqhcvPzfVHsGdRXrWg"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": "SELECT Id , SUM(Receipt ) LEFT JOIN (SELECT Price RIGHT OUTER JOIN bakery_1.customers\n\n\n AS DANBALONISESVASKIDEDELUMENZITAATULJAYYWALLMOSAVAKSKAMUQDOTONADIMFURCHI"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "SELECT FirstName INNER JOIN (SELECT AVG(Date )RIGHT OUTER JOIN bakery_1.goods ON receipts.CustomerId = items.ReceiptNumber INNER JOIN bakery_1.goods ON customers.CustomerId = 0)\n       "
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": "SELECT LastName RIGHT JOIN (SELECT DISTINCT COUNT(CustomerId )\n\n\n INNER JOIN bakery_1.customers ON customers.Receipt = -155085641475203628274988484789160871718213063233924254037"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": "SELECT DISTINCT SUM(Receipt ), Receipt , Item , MIN(CustomerId ) ORDER BY Price LIMIT 3999285714495025321906608527306434792316361733972275457068260169109055395818883796325877124815"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(Date ) RIGHT OUTER JOIN bakery_1.customers AS SLEEPYBALLSMONDONDEHOLVETTACH\n\n\n AS THE ON LastName = 0) ON customers.Food <-0;"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": "SELECT SUM(Receipt )"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": "SELECT Id , SUM(items.Ordinal )"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "SELECT items.CustomerId , Item ;"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "SELECT COUNT(CustomerId )\nINNER JOIN (SELECT * FROM bakery_1.items WHERE items.Item = 'b') AS list ON items.Item = customers.Receipt ORDER BY Item LIMIT 1;"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": "SELECT Price INNER JOIN (SELECT Receipt ORDER BY Date LIMIT 1)\n\n\n AS THEMSLOPCHES ON CustomerId = 844.300004341648392280555714783388503699358570272960385675150125896 INNER JOI"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": "SELECT MIN(Receipt )\n\n\nLIMIT 87848552817576040221226185800234520903775490167771314474636253432155966891135993064502497331669063254327390419299370885625740938761491050080557909446884606528781258"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": "SELECT items.LastName LIMIT 65716782858686973180976612012777131924290011378079222620993917761004748856049256564346759877040363872247441545508855090830432110904053353104167857962397149555187512"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": "SELECT DISTINCT SUM(Id )RIGHT JOIN (SELECT COUNT(*) FROM bakery_1.customers WHERE customers.Date = '11-02-2013' LIMIT 1096019906999910951722252735305878321634293789574020888098267049506418098560014753323486577"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "SELECT DISTINCT Receipt ;"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": "SELECT LastName RIGHT JOIN (SELECT Id )\n\n\n\n AS SESVETTEBOURNEANASKERFALLS_2ndQDrU6wq3cY4Mzvk5CnWyhX1Rj9AJp7a0NmPxuIgZsGt8iHdEfV"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": "SELECT LastName RIGHT JOIN bakery_1.goods\n\n\n      \n\n AS BajunbukkitrLlDxZnhRVpQFfYkj7B2AACiKz5C4oNv6u3aPt8TXJ1qO0W9GdUw\n\n"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": "SELECT SUM(Date )\nLIMIT 21040674522161115231319339957883712011827206539604617955028309070360058743854201802634697905778742295559894300066435787580076693999321025734562199481115634024335723146716"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": "SELECT COUNT(CustomerId )\n\n\nFULL OUTER JOIN (SELECT SUM(Price )) AS QTY_ADDRESSEDIAQYB1A0DEZ3BA2E6CE9EE4DFG10D1345540158C7FA55625065357529007834159566361657773874190847281746"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "SELECT DISTINCT COUNT(Date )\nLIMIT 100001123011789442514675028114913232233753529123045694816580047604096652470722054269027374638539955987984661557363906941888861353687780421900021471701763463142895675064"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": "SELECT DISTINCT AVG(LastName )\nRIGHT JOIN (SELECT COUNT(*) LIMIT 21400220001000015444501072858123217887730334035240860251839348929571055756003159386885647819277631502616694680594767489979"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "SELECT COUNT(LastName )\n  \nINNER JOIN (SELECT SUM(*)RIGHT OUTER JOIN bakery_1.receipts AS tseltpwgjnrb4lsnf ON customers.FirstName = 8192012100457089000\nLIMIT 1 OFFSE"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": "SELECT AVG(Date )LIMIT 26"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": "SELECT LastName INNER JOIN (SELECT SUM(Id )LIMIT 1)\n\n\n AS for ON EXISTS (SELECT Receipt ORDER BY CustomerId , customers.ReceiptNumber );"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": "SELECT DISTINCT Date LIMIT 21231878123614262946374868232725177611886728221902105889740860993945203313790300157324653096165440872101779566621097559088351006389732159558570504280491857432656143748276425"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "SELECT Price INNER JOIN (SELECT SUM(CustomerId ))\n\n\n   \n\n AS QA ON LastName > Receipt RIGHT JOIN bakery_1.receipts ON customers.Id = Id ORDER BY CustomerId ;"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": "SELECT MIN(CustomerId )\nLIMIT 7179863760392820"
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": "SELECT Id , SUM(customers.LastName )\n\n\n  \nINNER JOIN (SELECT MAX(*))\n AS QDQJ1iW7mGnKvZgBtb5qHr_xVf2h9oPzUcwF8y3MkLpY0jd6Rl4sE"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": "SELECT MIN(Price )\nGROUP BY Date , LastName , Price ORDER BY Food ;"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "SELECT Receipt WHERE CustomerId =Ordinal ORDER BY Date LIMIT 316024306418011137462520381043275914174835605440794770390977761"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": "SELECT DISTINCT SUM(Food )\nWHERE Item = 5.1 GROUP BY LastName ORDER BY Price ;"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": "SELECT COUNT(Receipt )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN bakery_1.receipts\n\n AS KUNGEDRYLINGYFDAZZBALZORON2A6UWjKb9cwk4a8oQv7zD3hV"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(Price ))\n\n\n     \n AS FULLERING ON Date <20400000000FULL JOIN bakery_1.goods AS fd ON customers.Id = (SELECT items.CustomerId FROM bakery_1.goods WHERE customers"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": "SELECT DISTINCT COUNT(Date )\nLIMIT 112525"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": "SELECT LastName GROUP BY Ordinal LIMIT 1;"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": "SELECT COUNT(Receipt ) RIGHT OUTER JOIN (SELECT COUNT(Receipt ) LEFT OUTER JOIN bakery_1.receipts\n\n\n  \n\n AS EYINGETHERFREEMENBKHONCHATAMISDGLEIDESJOHNDROLGEZPUNIWEL"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": "SELECT Id FULL OUTER JOIN (SELECT AVG(Date )\nLIMIT 2)\n\n      \n\n AS MULTISTRY_MOUSEED ON customers.CustomerId = 0;"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": "SELECT COUNT(CustomerId )\nINNER JOIN (SELECT DISTINCT COUNT(*)FULL JOIN bakery_1.customers ON Price = 2LIMIT 10807810794877203028890870635029221924145755395435402617389946251537014916"
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": "SELECT Ordinal GROUP BY LastName LIMIT 1"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "SELECT SUM(CustomerId )\nGROUP BY ReceiptNumber , Item ORDER BY Price LIMIT 41002"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": "SELECT SUM(Price )"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT MAX(Price ))\n\n AS LYM ON Item = 6.073000516507700547036229623171575994939351946118845438027552613188737\n LIMIT 1 OFFSET 7572501"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": "SELECT Ordinal LIMIT 11605800341500030000100304829592299121075403955365044791878981756011319262445163368500211520274664388914663002557478741194652870372340078820063805843006072000848296001123990715754908"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": "SELECT SUM(Date ) AS CZ GROUP BY LastName ORDER BY Date , Id ;"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": "SELECT Id LIMIT 4547039181279001113194022273046241526164701143725773695292387178549335734643575698067386220555978998945848890654310"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "SELECT SUM(Receipt )"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": "SELECT Ordinal FULL JOIN (SELECT Item RIGHT JOIN bakery_1.customers\n AS BKIRENBACHRINGMECHANICJOURSCAPES\n\n      \n\n AS IS ON EXISTS (SELECT Ordinal FULL JOIN (SELECT Item"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": "SELECT LastName INNER JOIN (SELECT Receipt GROUP BY Price ORDER BY CustomerId )\n\n\n AS isgstMlhFwD9kXVb5yj8fQ1WB7Z0aOJG_CsqR2pNxT4KvLzP"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": "SELECT DISTINCT AVG(Id )\nORDER BY Price LIMIT 2 OFFSET 1"
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "SELECT Id , SUM(Food )INNER JOIN (SELECT COUNT(*)GROUP BY Ordinal ORDER BY Price LIMIT 310070 OFFSET 0)\n\n\n AS forsaforpikdjhv1lyi4b_7f2x0JW5g3RnH6LQFzV"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": "SELECT Price INNER JOIN (SELECT SUM(Food ))\n\n\n AS NERVE ON Date = 12"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "SELECT DISTINCT AVG(Id )FULL JOIN (SELECT COUNT(*))\n\n\n AS ILLUMINATELY ON Receipt = 1.621159237414543417786526584575251566874420486022907092436375767271095189801552816463902133511123329"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Date )\nFULL JOIN bakery_1.goods AS SONLYSTICERUCEPODLESLAMBENIANMANDRYSPARCITY2AINVENTESEQUALATIONISSUIT4YKARATUS5MONCEDRIAHEMANO"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": "SELECT Price INNER JOIN (SELECT Receipt WHERE EXISTS (SELECT COUNT(*), LastName GROUP BY Ordinal ORDER BY Date )\nORDER BY Date , customers.LastName LIMIT 41) AS TINI"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": "SELECT SUM(Date )    \nINNER JOIN (SELECT AVG(Food ))   \n\n\n\n    \n\n AS IRELANDESE ON Date = 16.25 FULL JOIN bakery_1.customers ON goods.CustomerId < 1;"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": "SELECT DISTINCT Price INNER JOIN (SELECT MAX(Date ))\n\n\n AS BOTCHON ON EXISTS (SELECT LastName ORDER BY CustomerId )"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": "SELECT AVG(CustomerId )\nFULL OUTER JOIN (SELECT Item , Price RIGHT JOIN bakery_1.customers\n\n AS KITKORAMOURiSINGASMALOCUS AS MUNOSONNEDURAYIWITHALIFOLICISUESQEYGANLAMAT"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": "SELECT MIN(Price )\nRIGHT OUTER JOIN (SELECT Price )\n\n AS SONGS ON EXISTS (SELECT CustomerId WHERE receipts.FirstName = Date GROUP BY bakery_1.ReceiptNumber );"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": "SELECT Price INNER JOIN (SELECT Ordinal GROUP BY Receipt LIMIT 2)\n\n\n AS EHESLKENDORVADIANIA ON CustomerId = 1.083720236710574066152722389958127926895391716462886215955336036"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": "SELECT Ordinal LIMIT 206038"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": "SELECT items.Item INNER JOIN (SELECT Price RIGHT OUTER JOIN bakery_1.items\n\n\n AS MTHLBM4K2F6XVJET7QD9EE0A5Z8YYSWgvPmjbhNuzCf3tEpIiGcHd"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "SELECT Receipt LIMIT 0"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": "SELECT LastName INNER JOIN (SELECT MIN(FirstName ))\n\n\n   \n\n AS FORREST ON Food <919240010343314388030202348250136588850408516.6499056043702278793942197182857321789122926274947"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": "SELECT LastName INNER JOIN (SELECT SUM(LastName ))\n\n\n  \n\n AS EWINGHANDANGJI ON Date = CustomerId ;"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": "SELECT SUM(Regoin )\n\n\n INNER JOIN (SELECT Official_native_language ) AS BAKENVRABHJALABIGLEITDHAANISAYWADUAGEAS1Y3ZAAIGC5CH2LL0QF4SSIOSN7T6LX"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": "SELECT SUM(Driver_ID )\nWHERE Age > 1 GROUP BY Driver LIMIT 4411029502801703818128979077869364023751698225765002737997310033173955486619143080762515976094304113413543584455846204467"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": "SELECT AVG(Country_Id ), COUNT(Driver_ID ), Driver_ID , SUM(Age );"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": "SELECT SUM(Driver )\n\n\n INNER JOIN (SELECT Driver )\n\n AS TOLANJKPATTYFISHEN_GURYAMVILONSHADORZETHOSUNTHULAYAUSISIRAPIMUHAASITCHMARKAZOHAABQAFWASHINGIKKARUKEUTRIDCALTAC"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": "SELECT Regoin , Sponsor GROUP BY Team ORDER BY Points LIMIT 3243066"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": "SELECT Regoin LIMIT 210"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": "SELECT MIN(Manager )FULL JOIN (SELECT MIN(Manager ) FULL JOIN (SELECT MAX(Manager ))\n\n\n \n\n AS STEROLRITZ_HOPBALLSDELUNDERGATEVATICANANIMAORINGENUALLYEVILABLEONLYREQUIRESEDEACHPOWERFULF"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": "SELECT Regoin INNER JOIN (SELECT DISTINCT MAX(Make ))\n\n\n    \n\n AS SESCEBOLFREATURDELECCHAEHASGON_182217898496785EZ1JnQKjwgR0W4tO2vVyNb6YU9sL"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": "SELECT team_driver.Age WHERE Age = Regoin FULL JOIN (SELECT Sponsor ORDER BY Driver LIMIT 3)\n\n\n     AS ETCP2LISTSiZVQ4M6k9WjAH1b0XtfJ8FnhI5Sx7qE"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": "SELECT MIN(Country_Id )"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": "SELECT AVG(Country_Id )\n\n\n   \n\n INNER JOIN (SELECT SUM(*)) AS TQDGLFZY3H2B5ED9PASK8W7A4JOCLYLS1NDDS17ALX6V0CBSEISKKOVIDGVRENACKEZZS_RANETROOTDRYSATTIM"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "SELECT AVG(Country_Id ), COUNT(*)LIMIT 2;"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": "SELECT Official_native_language FULL JOIN (SELECT Regoin )\n\n\n  AS EATASICISTSAALLETZARANDAINONVACORIZGRAJAYKEDUNITYDAMF1M8EXaR7j3mhB9fqc0Ng5bWQ"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": "SELECT Official_native_language , Team GROUP BY Regoin LIMIT 472"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": "SELECT COUNT(Driver_ID )\n                        \nWHERE Make = Driver_ID ;"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": "SELECT Laps INNER JOIN (SELECT SUM(Driver_ID ))\n\n\n    \n AS iflnds1st4a2b3m8zth0p7j6v5iAin9cWBKfCJgRvaQdHwXqLVnOIhFZxMVsUoYyGk"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "SELECT MIN(Manager )\nLIMIT 55730402975134501140044502322366715171625488911254627095577107988331849432465743811609664479968732858193783321239058699770985972255358641795310090872874020547534133617"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": "SELECT SUM(Driver_ID )\nINNER JOIN (SELECT * FROM car_racing.country WHERE country.Points > 1) AS curriderid ON driver.Regoin = 0;"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": "SELECT COUNT(Country_Id )\n\n\n INNER JOIN (SELECT * FROM car_racing.driver) ON team_driver.Age = 25 ORDER BY Team_ID LIMIT 10;"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT SUM(Driver_ID ) LIMIT 2) AS UG2ZQ ON Manager <0.000436151733893 RIGHT JOIN car_racing.team\n\n\n    \n\n AS hp1jhprxo8l5s9q"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": "SELECT DISTINCT SUM(Country )\n\n\n INNER JOIN (SELECT Regoin ORDER BY Age LIMIT 1) ON Winnings = Car_# INNER JOIN car_racing.country AS pcsortdwlmxbcljpocci\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "SELECT DISTINCT Points RIGHT OUTER JOIN (SELECT AVG(Regoin ) FROM car_racing.driver WHERE Capital = 1 GROUP BY car_racing.driver.Laps ORDER BY driver.Capital LIMIT 2)\n \n\n AS TORTORYBODY1 ON Regoin < 3;"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": "SELECT MIN(Country_Id )\nGROUP BY Winnings , Sponsor LIMIT 7092 OFFSET 1"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": "SELECT SUM(Age )\nRIGHT JOIN (SELECT AVG(*) AS g_1 FROM car_racing.driver WHERE Country > 1 ORDER BY driver.Driver , car_racing.Car_Owner LIMIT 0) AS efqdasigatimazapomagiralogahajeilikhaessektumadhav"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": "SELECT Regoin LIMIT 122578145701360001350472275248028482733171226103723874054100842113034885518165956390595672064387769298540904156694431254935897462471958008690721463683446050570002597012870992748"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": "SELECT Regoin INNER JOIN (SELECT Regoin ORDER BY Driver LIMIT 2)\n\n\n AS EATPESCOPEASINANDREJENCHISAEDONADETARIAVANCAGMIRACHALF1R4QIX3GU5CNOD6N7DS0BAK2E8YZ"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": "SELECT Laps INNER JOIN (SELECT MAX(Make ) RIGHT JOIN car_racing.team\n\n\n AS einformaletfernsjeltebeftragungenwirderreichtigkeitbiernichtendazuestembrtsgebenstellweilcheidzeugendesch"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": "SELECT DISTINCT SUM(team_driver.Points )\nINNER JOIN (SELECT Regoin , Laps INNER JOIN car_racing.team_driver\n\n AS klechnerjahtnejeldetesenmakterpilboktsdennie"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": "SELECT Official_native_language FULL JOIN (SELECT Regoin )\n\n\n AS DALMMABASA ON Points <-0.1 LIMIT 117050263537243325404817762211387743185588239919094100492954142830360027"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": "SELECT COUNT(Make )\nWHERE Winnings >1FULL OUTER JOIN (SELECT DISTINCT MAX(*) LIMIT 12001320210005118818672870241401603280748121623228068753044476527265935746978361798729254034336499"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "SELECT AVG(Regoin )\n\n\n INNER JOIN (SELECT Team , SUM(Driver ))   \n\n AS LADEEBALAGUNJAYAYATARRAIDURAMISFALLOSANIMGASINAWEKIANGILOPHIROMVCHIAKIENAPTHCELPOTNONR"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": "SELECT Official_native_language FULL OUTER JOIN (SELECT DISTINCT Make RIGHT JOIN car_racing.driver\n\n\n AS NOABANZARVOLOVIAFISSAKIDULOSNIERUATIVAMONNAASOVEYENIT"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "SELECT Official_native_language LIMIT 33214012217151827122811302326587837341698381039502400405469883385441946351359207556804847798768652545606721128705324520129047361005577890743146315490885727"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": "SELECT DISTINCT SUM(Country_Id )\n\n\n FROM (SELECT * FROM car_racing.country WHERE car_racing.country.Country = 1);"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": "SELECT DISTINCT SUM(Regoin )\n\n\n INNER JOIN (SELECT Regoin ) AS INGOSISETRAJAN1H_2YAS7AU5F4Z9DQKM0B3PVCSXV6CATBAW8ALUC10NDELTAFLAFUSEITROPHYSTOONADIAMN"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "SELECT COUNT(driver.Laps )"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": "SELECT DISTINCT SUM(Driver_ID )\n INNER JOIN (SELECT Regoin FULL OUTER JOIN car_racing.country\n\n AS EQPLLORHALGIAARAKOLANVILLAINEDESASEMIR\n AS MASTISENETICDAMATR"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": "SELECT *\nINNER JOIN (SELECT *)\n\n AS DELLHATENJUDEZKAOSCHALLSERGEETLENDORISYSSBOLGUS_WILLOGVIABSHAFTSQ8IG5P6EFCONM4D1RND7OBAANECN0IAMGNHSX3COP9CTHUIFJTZ"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": "SELECT Regoin FULL OUTER JOIN (SELECT MAX(Laps ))\n\n\n   \n\n AS E2K1F8M0D5W7N12Q3B6VJ9_uG4dRHwqfEgjlYcxbkZmOevnCzUvcIaPXsLpA"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer": "SELECT AVG(Country_Id ) FULL JOIN (SELECT Regoin , Make ORDER BY driver.Laps LIMIT 0 OFFSET 2)\n\n\n AS inelvl1i5enx8f2a9t7rqnXlKUJEmVjFbAegSzc6uZ"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": "SELECT AVG(Country_Id ) GROUP BY Sponsor LIMIT 5370104"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "SELECT AVG(Country )\nWHERE Winnings = Country ;"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": "SELECT DISTINCT SUM(Regoin )"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": "SELECT Official_native_language FULL OUTER JOIN (SELECT AVG(Age ))\n\n\n AS HANATOLESIA4x5s8h0rXDjFQzkv6f3qBW2RnHtZg_7EdYcUeLKpJw1b9"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": "SELECT Winnings FULL OUTER JOIN (SELECT Team INNER JOIN car_racing.driver\n\n\n AS ELGESTOREFUCKINGBODYPANACEUNLIFEDIMENTALYHUBMOSIANCAMEDAROTZERTHONCETENNELATEXADIACIDASJOH"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": "SELECT Regoin , Points \nWHERE Age >18.2LIMIT 47250431901162878120636223713422514572988261749042476959773085381035466564153468864129482058558079459532127279854338431"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": "SELECT Official_native_language GROUP BY Team LIMIT 1"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": "SELECT AVG(Country )\nINNER JOIN (SELECT Sponsor )\n\n     \n\n AS OFLINE ON EXISTS (SELECT * FROM car_racing.country WHERE Country = 'd8b9df7f70-1ec3e4-50cb0-$6F5'\nRIGHT OUTER JOIN car"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": "SELECT MIN(Country_Id )\n\n\n  \nLIMIT 7382915111058160108812132877872639502756233357486700174476608974304919471470379869641834903685420409525795246566636878994213540853754536732294113585161529"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": "SELECT Official_native_language FULL OUTER JOIN (SELECT Regoin INNER JOIN car_racing.team\n\n\n AS SONHENGAGGERASANJOBKM1ZVYQ4gEa0xm8qb5BnF3fzU7cD2sL6"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "SELECT institution.Founded INNER JOIN (SELECT COUNT(Affiliation )\nGROUP BY Team ORDER BY Championship.Institution_ID LIMIT 1 OFFSET 2200000009181632506043014800884429361240371133"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": "SELECT Endowment FULL OUTER JOIN (SELECT DISTINCT Team )\n\n\n AS IOSALESWAGENIAGANASAIDETISACODEAITRICADBULVILIGATURGADAIZMETHOCARBONGLYNNKRAEDHIMOBENDEIOTUMAOREGAMELFJAPL"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": "SELECT Province ORDER BY City LIMIT 2010263319182025291327120128403230220017075038397824551637877570761"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": "SELECT Endowment , SUM(Affiliation ), Province ORDER BY Name LIMIT 3;"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": "SELECT SUM(City )INNER JOIN (SELECT Joined ORDER BY Number_of_Championships , Enrollment LIMIT 0)\n\n\n AS foraalwarriakkamatraangiravahajivadasunniyanastiagurumulpukhindanjim"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "SELECT Number_of_Championships INNER JOIN (SELECT SUM(Affiliation ), institution.Joined ) \n\n\n AS LKH2ND8V5Fj0rQq4ThC7XDkWvPZzb3g1EeN9xL6cG"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "SELECT Number_of_Championships , Name  \nWHERE Affiliation <3\n\n INNER JOIN (SELECT Team ) ON Stadium >(SELECT * FROM institution_sports.Championship)LIMIT 1;"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": "SELECT DISTINCT SUM(Affiliation )RIGHT OUTER JOIN (SELECT COUNT(*) ORDER BY Name LIMIT 314242700256020704844378816557868802217104064741377457976154950676663122329043585390931259959"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "SELECT COUNT(Province )LIMIT 31"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": "SELECT COUNT(Affiliation ) RIGHT JOIN (SELECT Affiliation , SUM(institution_sports.institution.Number_of_Championships ), Founded ORDER BY Number_of_Championships LIMIT 50000) AS cOUNT1C ON City = Affiliatio"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": "SELECT Institution_ID GROUP BY City LIMIT 10981"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": "SELECT Institution_ID , Endowment ORDER BY Affiliation LIMIT 110354660274513163634402328183215509301142455112220561001726884942201582537004759443889707419065432008573930876668786598112864"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": "SELECT COUNT(institution_sports.Joined )LIMIT 1 OFFSET 2"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "SELECT Number_of_Championships , Province FULL OUTER JOIN (SELECT Endowment )\n\n\n AS inmwntlvqszxlt1j4kls7y5gf8ed2b0u_n9oVWHdYhcDrF3CJ6Q"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": "SELECT COUNT(Affiliation )\nINNER JOIN (SELECT DISTINCT Founded , Team LIMIT 3)\n\n     \n AS THEATRE ON Stadium < 5.833581916187825352214234488478917551159056385724794915390853401"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": "SELECT Founded INNER JOIN (SELECT Endowment ORDER BY Nickname )\n\n\n AS and ON Institution_ID = 32794812283525603678683839153724342633110120631709776566182387107467161907409780492946134714"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "SELECT Endowment FULL OUTER JOIN institution_sports.institution\n\n\n AS for AS IFAWMENTEN ON Stadium >+1 INNER JOIN (SELECT Number_of_Championships ) AS FOR ON Endowment <> 1"
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": "SELECT COUNT(Joined )LIMIT 10887840778049608710973379071"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": "SELECT COUNT(Affiliation )LIMIT 30001;"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": "SELECT COUNT(Joined )\nGROUP BY Province LIMIT 1;"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": "SELECT SUM(Affiliation ) RIGHT JOIN (SELECT Number_of_Championships ORDER BY Institution_ID )\n\n\n AS PASJBUNNOLEAMDANUELAITNAILKMODUKATZURADPIGIETIMMUHAICINGISLUTT"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": "SELECT Number_of_Championships LIMIT 64519061250222801391617290963658373800205626153389481057709834654218303546407978688424276967636499555414887444787432474904808534777254575721253191350591617"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": "SELECT COUNT(Affiliation )LIMIT 112500030334036181545171613372028571435105601483212806750384478550059437588731009073970652347421160902983211209954257941552669874546458971920084272218853663306898409516"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": "SELECT COUNT(Founded )\n\n\n INNER JOIN (SELECT Enrollment LIMIT 8) AS STOLENZERUJEGPERS ON Team = Stadium ORDER BY Founded , Province ;"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "SELECT Number_of_Championships \nGROUP BY Stadium LIMIT 2 OFFSET 11"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "SELECT Team , institution_sports.institution.Affiliation , institution.Founded INNER JOIN (SELECT Number_of_Championships ) AS fjdvflykbbe6w5p0a11z4e1m3gf8rq7c"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "SELECT Number_of_Championships , Number_of_Championships , Championship.Number_of_Championships , Championship.Number_of_Championships , Enrollment ORDER BY Stadium LIMIT 20402245783888181716091489271239231115"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "SELECT institution.Founded INNER JOIN (SELECT COUNT(Joined ))\n     \n\n\n\n AS N ON EXISTS (SELECT MIN(*), SUM(*)) FULL JOIN institution_sports.Championship AS mfr1sslmngrvj"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "SELECT Number_of_Championships , Founded INNER JOIN (SELECT Province INNER JOIN institution_sports.institution\n\n\n AS TEMPTIONESKENZELAUNKERGIANSKIDFONIKBADWODDALYSLOGETIANOSOLATIC"
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": "SELECT Endowment , SUM(institution_sports.institution.Number_of_Championships )\n\n\n  RIGHT OUTER JOIN (SELECT Number_of_Championships )\n AS forcenetnurimoracemonikulat"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "SELECT institution.Founded INNER JOIN (SELECT Endowment WHERE Capacity > Number_of_Championships ) \n\n\n AS BESPANIES ON Founded <3 RIGHT OUTER JOIN institution_sports.Championship ON Stadium ="
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": "SELECT COUNT(Institution_ID );"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": "SELECT Endowment FULL OUTER JOIN (SELECT COUNT(Founded ) RIGHT JOIN institution_sports.Championship\n\n\n AS TAKRICHGALAZANIANHAVILIKWARTUATNABAGOLIJNAPIMAMMAYPASYO"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": "SELECT COUNT(institution.Team )ORDER BY Endowment LIMIT 21 OFFSET 9232;"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "SELECT Number_of_Championships , institution.Name LIMIT 1"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "SELECT AVG(Name )\nINNER JOIN (SELECT Enrollment , Number_of_Championships LIMIT 5)\n\n AS invegeldinworngkfogynehstigytnnejbviejeelonthlymndohltndokitgbezglpwnnmcklxr"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": "SELECT Enrollment "
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": "SELECT Number_of_Championships ;"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "SELECT COUNT(Founded )\n\n\n INNER JOIN (SELECT Endowment , Founded ORDER BY Number_of_Championships )\n AS WONGOLUNNUWJHODGALKIALENAOTVAPPEIATOAMADCQUEANBENGM"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": "SELECT SUM(Affiliation )INNER JOIN (SELECT Enrollment ORDER BY Number_of_Championships , Affiliation , City LIMIT 2)\n\n\n AS ISKIAWBALNAIWAIDUHJOBOLANNAFUNDASIS"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT Value FULL OUTER JOIN warehouse_1.Boxes AS PSAZHILISDAMFYPEPASIAMADEINGWITHJUNKUKCITRIPSADIOSOCRIVICONLYNORVIPOCHALUENL"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "SELECT Location GROUP BY Capacity ORDER BY Value , Warehouses.Warehouse ;"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": "SELECT AVG(Capacity )\n\n\n INNER JOIN (SELECT Location ORDER BY Capacity , Capacity , Value ) ON Warehouses.Location = 0 RIGHT OUTER JOIN warehouse_1.Warehouses ON EXISTS (SELECT SUM(Capacity ), SUM(Value )) ORDER B"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "SELECT Warehouse INNER JOIN (SELECT Boxes.Location RIGHT OUTER JOIN warehouse_1.Boxes ON Code = 'A' ORDER BY Location , Warehouse )\n\n\n  AS TABLESELIFIERINGCODESOIDEDATORGIS"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": "SELECT COUNT(*)\nFULL OUTER JOIN (SELECT * FROM warehouse_1.Warehouses WHERE Warehouse = 'A') AS tbHOURDOLNEXISTS ON Value > 1 ORDER BY Value ;"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT COUNT(*) LIMIT 2 OFFSET 10450170500000414749041003009992878262037469920013116024230067309736221725272976151864956833806310779631603954759414790563855"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": "SELECT Location , SUM(Boxes.Location ), COUNT(*), MIN(Capacity )\nINNER JOIN (SELECT * FROM warehouse_1.Warehouses WHERE Warehouses.Value <= 80000) AS SIZE32 ON EXISTS (SELECT Location , SUM(Boxes.L"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": "SELECT AVG(Boxes.Value )\nINNER JOIN (SELECT COUNT(*))\n\n     \n\n AS THE ON EXISTS (SELECT * FROM warehouse_1.Warehouses WHERE Warehouse = 'A' ORDER BY Value , Contents ) LIMIT 1 OFFSET 2"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT MAX(*) INNER JOIN warehouse_1.Warehouses ON warehouse_1.Warehouses.Contents = 10000000 GROUP BY Warehouses.Value )\n\n\n \n AS COUNT3 ON EXISTS ("
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": "SELECT COUNT(Boxes.Location ), Boxes.Value , Boxes.Warehouse GROUP BY Value LIMIT 214748364819213471101227833882846603216255537666717261520956419081050363034756954272314894543245849125918"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": "SELECT Value LEFT OUTER JOIN (SELECT COUNT(Boxes.Location ))\n\n\n \n\n AS for ON Boxes.Location = 1;"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": "SELECT Boxes.Value ORDER BY Location , Capacity ;"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT DISTINCT COUNT(Location ) AS LOSEST_DIMENSION) ON Boxes.Contents > 1 ORDER BY Warehouse ;"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT MAX(Boxes.Value ))\n\n AS STILLING ON Value > 200000 LEFT OUTER JOIN warehouse_1.Warehouses\n\n AS WAVENONICDYLITEELHONEINNERjA"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": "SELECT Location GROUP BY Value , Code \n\n\n ORDER BY Warehouses.Capacity ;"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": "SELECT SUM(Location )RIGHT OUTER JOIN (SELECT * FROM warehouse_1.Boxes WHERE Warehouse = 1 ORDER BY Code )\n\n\n AS ifWaiHwaThelleGfthauDgwAqXbL5zvCjM2OpQ8Rd9nUi4FZs"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": "SELECT Value LIMIT 225"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": "SELECT AVG(Boxes.Value )\nINNER JOIN (SELECT Boxes.Value )\n\n  \n\n AS IF ON EXISTS (SELECT COUNT(*) FROM warehouse_1.Warehouses WHERE Warehouse = 'C' LIMIT 2);"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": "SELECT SUM(Warehouses.Contents )\nLIMIT 489001312338814184878174499603775642847105811460136508568303566952645385524290421151607398469795770405464949678777321925421295643273459862072132398331214"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "SELECT SUM(Location )INNER JOIN (SELECT AVG(*)FULL JOIN warehouse_1.Boxes\n\n\n AS DEWASPECTS ON Location = 1 INNER JOIN warehouse_1.Boxes ON Contents <-2 RIGHT OUTER JOIN warehouse_1.Boxes ON"
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": "SELECT Value LIMIT 83114812991823224539077555013625781530371028163326981125431380604067644700272042194677793570346568148788691704211971006249538448250853213500072005629668311481299182245390952315"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "SELECT SUM(Location ) LIMIT 4641;"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT AVG(Location ))\n\n   \n\n \n\n AS MINE_DISTINGUMSIS2x3n1l4dv9f0gQqZ5J6hpWXCuS8PtKBrFjYMmTzcHVbG"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": "SELECT Location INNER JOIN (SELECT SUM(Contents ))\n\n\n  \n\n AS EA ON Capacity = 0.138319392211671538473514123468542616105775666045879964782900369410082858897469798840774625"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": "SELECT Value INNER JOIN (SELECT DISTINCT MAX(Boxes.Location )\n  \n\nFULL OUTER JOIN warehouse_1.Warehouses\n\n AS FINDING ON Warehouse = Code LIMIT 311184529011714393464282055233313"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": "SELECT COUNT(Contents )\nINNER JOIN (SELECT COUNT(*))\n\n     \n\n AS EACH ON Boxes.Value > 8 LIMIT 1 OFFSET 9091"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": "SELECT AVG(Capacity )\nINNER JOIN (SELECT COUNT(*)FULL JOIN warehouse_1.Boxes\n\n AS anevrirementisheresniziebendraektivszcijmjeelalomjaklepemas\n AS inverstvoordenworke"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "SELECT SUM(Capacity )\nINNER JOIN (SELECT COUNT(*)WHERE Warehouse <1.00 GROUP BY warehouse_1.Boxes.Contents LIMIT 1 OFFSET 2483613122042162655332322406450321746181425"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": "SELECT AVG(Capacity )\nINNER JOIN (SELECT Location LEFT OUTER JOIN warehouse_1.Boxes\n\n AS FOURTH ON Boxes.Contents = 4894940485088443218672585\nINNER JOIN (SELECT Location LEF"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "SELECT AVG(Capacity )\nINNER JOIN (SELECT COUNT(*)FULL JOIN warehouse_1.Boxes ON Location = 1 FULL JOIN (SELECT AVG(Capacity ) AS ftexprr, SUM(Location )) AS c"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": "SELECT COUNT(Contents )"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "SELECT AVG(Capacity )"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": "SELECT DISTINCT COUNT(Location )\nWHERE Warehouse = (SELECT Location LEFT OUTER JOIN warehouse_1.Boxes AS Hb6A2J0QEsY7xPV8gjLrkW5qmKH4XvZl9"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": "SELECT Location FULL JOIN (SELECT Value ORDER BY Contents )\n\n  \n\n AS forlornyreihegutvigulmhteetfonkpafomdaupeerektrjbruchofsbeatirunnvewilumarimneuukzikalovaskeltiv"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "SELECT DISTINCT COUNT(Location ) AS in LIMIT 214748364737891"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": "SELECT Location , SUM(Boxes.Value )\nINNER JOIN (SELECT COUNT(*))\n\n  \n AS EJAMKARAOPYOSHAICANDS ON Value > 35006 GROUP BY Warehouse LIMIT 143382280050608000119148318114088"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": "SELECT DISTINCT Boxes.Warehouse RIGHT OUTER JOIN (SELECT SUM(Location ))\n\n\n    \n\n AS ELPENA_DST1X15Y2FJ0130H0E8B5522204321BF5BB48573738189039117599463629174725"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": "SELECT Location INNER JOIN (SELECT COUNT(Location ), SUM(*)FULL OUTER JOIN warehouse_1.Boxes\n\n\n AS PARAILING ON Location <> -10 RIGHT JOIN (SELECT COUNT(Location ),"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "SELECT Location ORDER BY Capacity \nLIMIT 888991;"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": "SELECT AVG(Boxes.Warehouse )\nRIGHT JOIN (SELECT COUNT(*) ORDER BY warehouse_1.Location , Warehouse LIMIT 1000001190011232224441329043250251538309547172616495734331066123655"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "SELECT Boxes.Location \nWHERE Warehouse > Code INNER JOIN (SELECT SUM(Boxes.Location ) GROUP BY Location , Value ORDER BY Contents LIMIT 0 OFFSET 30003)\n\n AS BXeujKfWwEJi"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT * FROM warehouse_1.Warehouses)\n\n AS jooie2jwas9vndqg3k6x8l10b4n0ngr7f5d17frc01y21ac11t49162744a0915380084508520374030"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": "SELECT Location WHERE EXISTS (SELECT COUNT(Boxes.Warehouse )\n\n\n INNER JOIN warehouse_1.Boxes AS cvjyndstqpf7c6 ON warehouse_1.Value <= Location RIGH"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": "SELECT AVG(Boxes.Location )\n\n\n INNER JOIN (SELECT SUM(*) ORDER BY Boxes.Location , Location , Capacity )\n\n AS ASADIAAARCABORATYSELEVEHEMOCAPENETECOOLALONEIDOLBODYZAMMALOCHITESINF"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": "SELECT Location ORDER BY Contents , Warehouse \n\nLIMIT 2;"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": "SELECT COUNT(*)RIGHT OUTER JOIN (SELECT Boxes.Warehouse )\n\n\n   \n\n AS EF ON Location = Value INNER JOIN warehouse_1.Boxes ON Warehouse = Capacity RIGHT JOIN (SELECT Boxes.W"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": "SELECT *\nINNER JOIN (SELECT *)\n\n AS DEARLY ON Capacity <> 1LIMIT 48910004"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "SELECT Value LEFT OUTER JOIN (SELECT COUNT(Value ))\n\n\n   \n\n AS EOLERING ON Warehouses.Warehouse = 0"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT SUM(Location ))\n\n\n  \n\n AS TOEBS ON Boxes.Value =1;"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "SELECT Boxes.Code LIMIT 22551227333540571110885800890821332423172822152032187847164419482650603825758537461673029143477594943254015563100931756713546480611206568969041253454212957103976270573569363399"
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "SELECT Location INNER JOIN (SELECT COUNT(Code ) FROM warehouse_1.Warehouses WHERE Boxes.Location = 0) AS cnodeID ON Warehouse < 1 ORDER BY warehouse_1.Boxes.Code ;"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": "SELECT AVG(Boxes.Contents )FULL JOIN (SELECT SUM(*))\n\n\n AS INFLAMMATICS ON EXISTS (SELECT Boxes.Warehouse )"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT Boxes.Value RIGHT OUTER JOIN warehouse_1.Warehouses ON warehouse_1.Location = 1) AS lucasianoffertnrfpzng3jg2o0i4t7l6a"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": "SELECT COUNT(Capacity )\n\n\nRIGHT JOIN (SELECT MIN(Boxes.Location )) AS EAGENING ON Location = Boxes.Contents RIGHT JOIN warehouse_1.Warehouses\n\n\n AS ILLUMINAULTiMOUSLYUOUS"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": "SELECT Location WHERE EXISTS (SELECT COUNT(Warehouses.Value ))\nFULL JOIN warehouse_1.Boxes ON warehouse_1.Boxes.Contents > 1;"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT * FROM warehouse_1.Warehouses WHERE warehouse_1.Boxes.Contents = 0) AS ctrID ON Warehouse = Boxes.Capacity INNER JOIN (SELECT COUNT(Capacity ) GROUP BY"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": "SELECT AVG(Capacity )\nINNER JOIN (SELECT Boxes.Location , Value RIGHT OUTER JOIN warehouse_1.Boxes ON Warehouse = 3 INNER JOIN warehouse_1.Boxes ON Warehouses.Location = (SELECT"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "SELECT AVG(Boxes.Location ) LEFT OUTER JOIN (SELECT Boxes.Location )\n\n\n   \n\n AS NODOLAS_MULTIPLYESJONESONA3PIA9X1Q4S16V7WG12B0AD2BA15F5D482835AAE104614C"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": "SELECT Location INNER JOIN (SELECT AVG(Boxes.Location ))\n\n\n   \n\n AS WELLaswelllocateThetotalcapacityofalltableswithinAVEEATALIGNEDROAR1stHospitalIncomeAsweillcomputesinlinewithDOUBLECURRENCYAssumesthatthehospitalholdingshareholdersaresoldoutata"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "SELECT DISTINCT SUM(Contents )"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": "SELECT Location \nINNER JOIN (SELECT DISTINCT Boxes.Contents FULL OUTER JOIN warehouse_1.Warehouses AS WYFz6BgXmPV8ZpJ7y9KGcIqDlE\n\n  \n\n AS NICELEAUSNITES"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": "SELECT AVG(Capacity )\n\n\nWHERE Boxes.Location = Location RIGHT JOIN (SELECT * FROM warehouse_1.Boxes WHERE warehouse_1.Boxes.Contents > 1) ON Warehouses.Warehouse > 6\n\n\n INNER JOIN wareh"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "SELECT Location , SUM(Location ), COUNT(Capacity ), Boxes.Warehouse FULL OUTER JOIN (SELECT Value RIGHT JOIN warehouse_1.Boxes\n\n\n AS SESTERALMICOLORATIONDIFFERENCEFINALIZED ON"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": "SELECT AVG(Contents )\nINNER JOIN (SELECT SUM(*)FULL JOIN warehouse_1.Boxes ON Boxes.Warehouse > 3 LEFT OUTER JOIN warehouse_1.Boxes AS VXGAETZHENDE\n\n\n\n AS EASTORIA"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": "SELECT Warehouses.Warehouse GROUP BY Contents LIMIT 1"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": "SELECT SUM(Boxes.Warehouse )INNER JOIN (SELECT COUNT(*)LIMIT 0 OFFSET 103911280148241090245184026288899335084191764806345131660251295112389744929659420962130672705368622988587909"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "SELECT Value WHERE Boxes.Value > Capacity ORDER BY Location , Capacity ;"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": "SELECT COUNT(Warehouses.Contents )\n\nLIMIT 400000010122234317332545275730131773216990319145049151335387560532028266788804498834007837762003955774079661847654224588930906054110641286112036851117097"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "SELECT Location INNER JOIN (SELECT Warehouses.Location FULL OUTER JOIN warehouse_1.Warehouses\n\n\n AS NEEROETERIANYSTISESACHIEFBECATZHEXHOSAFENIGBAKALANINONIZAMACELUASM"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "SELECT Value INNER JOIN (SELECT Warehouses.Location LEFT OUTER JOIN (SELECT DISTINCT SUM(Warehouses.Location ) FROM warehouse_1.Boxes) AS PATCHYAMIDELSELLORATE ON Warehouses.Locatio"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT DISTINCT SUM(Location ) AS d, MAX(Value ))\n\n\n AS is_repr1fdf3d6ed9ba4ef22cc7afec114916b78c09646728847066152760954834102636323087134437182555"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": "SELECT Value "
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": "SELECT Location , SUM(Boxes.Location ), COUNT(*), MIN(Capacity )\nINNER JOIN (SELECT * FROM warehouse_1.Warehouses WHERE Warehouse = Boxes.Contents ORDER BY Code , Location LIMIT 10) AS MOUSEHOU"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": "SELECT AVG(Boxes.Value )\nINNER JOIN (SELECT Value WHERE Contents <> 100)\n\n AS BXLON3K7CH5D1M8A6UBAY4P0EDT2C9BJ25QWqdhZjzNuwVmF_SFLGxIgRp"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "SELECT COUNT(Capacity )\n\n\n  \nLIMIT 4;"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": "SELECT Location INNER JOIN (SELECT MIN(Contents ))\n\n\n   \n\n AS EETPALOSISANTSASHEDAYZULENITARIANAVERYPRIMELYJEWELWADDERUKATUNBAGOLESIDTNIBRAKIOBEINFOURRXLIKLEVONM"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": "SELECT *\nINNER JOIN (SELECT Boxes.Location GROUP BY Location ) AS IBNBBAA ON Capacity = -1 GROUP BY Value ;"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": "SELECT DISTINCT AVG(Location )INNER JOIN (SELECT Boxes.Warehouse WHERE EXISTS (SELECT Location FULL OUTER JOIN warehouse_1.Boxes\n\n  \n\n\n AS JOSEPHYEONIAJO"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": "SELECT University_Name INNER JOIN (SELECT COUNT(City ))\n\n\n AS EAST ON Major_ID > State ORDER BY Home_Conference LIMIT 422981030880048421139553499404464368066121816093370372560203517"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": "SELECT Enrollment RIGHT JOIN university_rank.university\n\n \n\n AS eaqpzf4o2dprxg1e6c5j9b3edh57us7r0lwutm8mnquijtavarimkiajvapaktaobii_iiknokk"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": "SELECT Rank FULL JOIN (SELECT COUNT(Affiliation ) LIMIT 1)\n\n\n AS ELDERLY ON Team_Name > 4.6"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": "SELECT Enrollment WHERE State = (SELECT Total )\nINNER JOIN (SELECT DISTINCT COUNT(*) RIGHT JOIN university_rank.university AS mcw2d1rjh7qg5zpn4u0vWyCJUYSb8Y6B9RQ"
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "SELECT Enrollment RIGHT JOIN (SELECT MAX(Rank ))\n\n\n  \n\n AS UFUCMUY ON Team_Name >-0.25;"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "SELECT Enrollment RIGHT OUTER JOIN (SELECT University_Name INNER JOIN university_rank.overall_ranking\n\n\n AS ELEAULIEAUEANNEENCHAUMITRYWALSHEMBANKUNIELUOYORHGIAVEGL"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": "SELECT University_Name RIGHT OUTER JOIN (SELECT Total GROUP BY Home_Conference )\n\n\n AS SESAATISFRITENASUNDERCOVERPICKERSJOURSCALEANARCHISTREVIEWMENTALURITYTHBACONTOCHROMATAUNUCLAYLYHEMPLOYMENTC"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "SELECT Total GROUP BY Major_Code ORDER BY Enrollment LIMIT 3422305857011127781828376410493414263555395945659075257960867023171916506977885432129082168389768368972004446203348156700"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": "SELECT Enrollment WHERE Home_Conference =\n(SELECT MAX(*)WHERE Total <-0 LIMIT 2 OFFSET 0);"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "SELECT COUNT(Affiliation )INNER JOIN (SELECT COUNT(Home_Conference ))\n\n\n    \n\n AS DEPTJETROCUCHALDYSZYEONIMESISKURCASCIQFjql8GcVkNf6g0iIy5x1d9"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": "SELECT Home_Conference FULL OUTER JOIN (SELECT * FROM (SELECT DISTINCT Rank ) AS ctl)\n\n\n AS IF ON Major_ID < 2 ORDER BY Total LIMIT 0;"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": "SELECT University_Name FULL OUTER JOIN (SELECT Enrollment LIMIT 1)\n\n\n AS ofJHt1A4FfXdRs2BgYh0GZPkQjVKw5q3u6oCc7E_8LrMiI9bWyNnUzOaTm"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answer": "SELECT AVG(Rank )\n\n\n INNER JOIN (SELECT Rank )\n\n AS LOUISVILLE ON State = 1.174815141032 INNER JOIN university_rank.overall_ranking AS nnndh1wqz\n AS NUKOSITAJYANIAS"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "SELECT AVG(Affiliation )\nINNER JOIN (SELECT Rank FULL OUTER JOIN university_rank.major\n\n AS DALTONKHENNERANITMISSAZEDICOLASCHEUNITEDAUSBECWJTADATOBXCQDULV9G6R1UY"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": "SELECT Home_Conference FULL JOIN (SELECT SUM(Major_ID ), MIN(Rank ))\n\n\n AS UFILDEK ON EXISTS (SELECT Rank INNER JOIN (SELECT COUNT(Affiliation )) ON university_rank.major"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "SELECT University_Name INNER JOIN (SELECT University_ID RIGHT JOIN university_rank.major\n\n\n AS SEENLY ON State = 183500305767371918011709493312104524255070268979271416463695391160205540"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "SELECT Enrollment ORDER BY City LIMIT 30001"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": "SELECT Home_Conference RIGHT OUTER JOIN (SELECT MIN(Rank ))\n\n\n   \n\n AS ALANAHAUNKYMEMIDICENIKASAMIMBADOSALAHOURAJAPOLATOMARISDETORZAKUMFLETEHAYSHUTTRPURGONNAEEDIELIAUWIT"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": "SELECT *\nINNER JOIN (SELECT Enrollment INNER JOIN university_rank.university ON University_Name <University_Name GROUP BY Rank LIMIT 0)\n AS ISLENEASTYESOLERISTSH"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "SELECT AVG(Affiliation )"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": "SELECT COUNT(Enrollment ) FULL JOIN (SELECT MIN(*), SUM(Citation_point ) LIMIT 2 OFFSET 317503567443658252946232824455499221639181579092748986374904138765331101708890647569554714"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "SELECT Home_Conference RIGHT JOIN (SELECT Total GROUP BY Major_ID ORDER BY City LIMIT 1220)\n\n\n AS FOLGEDZESkiyV3gxj4r1tAa6mX0CqOQlvF5hH7nU2JzEk"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "SELECT Enrollment WHERE Affiliation <-6.1;"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": "SELECT Rank INNER JOIN (SELECT Total )\n\n\n    \n AS SESV ON EXISTS (SELECT COUNT(Affiliation ), MIN(Major_Code )) GROUP BY Rank LIMIT 1;"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "SELECT University_Name ORDER BY Citation_point LIMIT 61050581719040113289516991"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "SELECT University_Name LIMIT 16232748202936285049582657112517894194131577120178442298919756914889909637005624707345656495606818875585168066621053540791054247334786211072734432942196393650932696318828591315"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "SELECT Enrollment INNER JOIN (SELECT MIN(Major_ID ))\n\n\n AS KISVATvPJFxgZfqA3uz9G6cWYb4kX1s5ySdCnQiMCU2Dl0B7OwAwh8IjrEJMmRngKLp"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "SELECT Rank INNER JOIN (SELECT MIN(Enrollment )\nWHERE State > Home_Conference GROUP BY Enrollment LIMIT 1 OFFSET 2081800031004200431034157875011336407742125033882335391427002928"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": "SELECT SUM(Citation_point )\nINNER JOIN (SELECT Major_ID , COUNT(*), Reputation_point , Home_Conference WHERE EXISTS (SELECT SUM(Citation_point )))\n\n\n AS ISLANDOI ON Major_ID = (SE"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "SELECT University_Name ORDER BY Major_ID LIMIT 42000050403948012880551399158879164737252226607527460005733763664679020500430732111077347300009171907706007388924871405800316910085909021885441208003550"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "SELECT Rank INNER JOIN (SELECT COUNT(University_ID ))\n\n\n           \n AS Rankthru ON State >-5.6111543143901555036171937421702316571838321248347087275876286888132625542966226760353077"
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": "SELECT Home_Conference WHERE Affiliation = City RIGHT OUTER JOIN (SELECT DISTINCT Total FULL JOIN university_rank.major\n\n\n    \n AS INTRIGUES AS WKNTANJWYPOTONHOSZUALA"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "SELECT COUNT(University_Name )\nINNER JOIN (SELECT COUNT(University_Name ))\n\n  \n\n AS YUBIA ON State = university.Research_point ;"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": "SELECT University_Name LIMIT 3303182328341022015088363060394727331340571180494569256838587859350017466577648612195554159826841003"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": "SELECT COUNT(City )\nINNER JOIN (SELECT Major_ID , Enrollment WHERE University_Name = 'Erevolst Klozgazd' LIMIT 634) AS A0LLW1U2B30S5LKI3YOLZsLYX4CAT9M8QJ6DV"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": "SELECT Enrollment INNER JOIN (SELECT Home_Conference RIGHT OUTER JOIN university_rank.university\n\n\n AS LADIEShrolecEaMthCynb1PVz5Lr7F9lQWwDm3sRf"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "SELECT Home_Conference ORDER BY City LIMIT 9893310504857011812131488451560651776993958952320409879384497647570687735366902252759223280304947163783262408004219065100542582855785003158105633295048"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": "SELECT Rank INNER JOIN (SELECT MIN(Affiliation ))\n\n\n  \n\n AS aeZmJzgjQsKP2GrX9WU6v3dhLqpE ON overall_ranking.Team_Name = Rank INNER JOIN (SELE"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": "SELECT University_Name RIGHT JOIN university_rank.university\n\n\n AS ifumnaerasanaiwaatinenetalkaurigadneedelinaeolipudilungesiautroffechennietlikfekimgotstommedebaponnuertaegodavpkvahtit\n"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "SELECT Rank INNER JOIN (SELECT COUNT(University_ID ))\n\n\n           \n AS LADYJOYHOPANESEEDICUSMISSIONERLYPARK1FUNDSYSLEAKERSCALLINGGIA2KIISAFEBIQ3FA7B6A0TREXNOLU8D"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": "SELECT AVG(Citation_point )\n\n\nINNER JOIN (SELECT Home_Conference , Citation_point ) ON EXISTS (SELECT SUM(Enrollment ), Major_ID FROM university_rank.university WHERE major_ranking.Uni"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": "SELECT University_Name RIGHT JOIN (SELECT Total WHERE City = State )\n\n\n AS or ON Home_Conference <> 1.1FULL OUTER JOIN university_rank.university AS onametrixwherd ON overall_ranking."
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "SELECT University_Name ORDER BY Enrollment LIMIT 1;"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "SELECT Rank FULL JOIN (SELECT SUM(Major_Name ))\n\n\n      \n\n AS ELDERLY ON Major_ID <0.1 INNER JOIN university_rank.university ON major_ranking.University_Name ="
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": "SELECT Rating LIMIT 32833195734"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": "SELECT *RIGHT JOIN (SELECT * RIGHT JOIN movie_2.Movies\n\n\n AS LOUISIANA AS FURYRELLAD ON Movies.Rating >-0.7LIMIT 612850122293960671809857553615246495163344373476115817594579005499254026"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT *\nLIMIT 64988363311120974330507870874079582700254728171657133989296765264638181944205514991"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "SELECT MIN(Code )"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": "SELECT Rating LIMIT 3277 OFFSET 0"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": "SELECT Rating LIMIT 3264;"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT MAX(Movie ))\n\n\n\n AS PEWLOSALISTA ON Name > 1872;"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Movies.Name ))\n\n\n       \n\n AS EINBACHISHASENZITRAIMFIFTERERVIGORLAGEDDEUSKADREICANHEYTUNDUEUELPICTCUROOLGIKELEWETSTEINSEGONROBEALN"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT *\nLIMIT 949882333142737180752601774512292213395700355515283611"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "SELECT AVG(Code )INNER JOIN (SELECT Rating , Name INNER JOIN movie_2.Movies\n\n\n AS FORTHEMEIDALYUCHENOSAFFZUNDHAITSOUKHARANAMAKIMBANGUSTAINAAFULUMATSUJAWVIFEETWISQC"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "SELECT AVG(Name )\nFULL JOIN (SELECT Title FULL OUTER JOIN movie_2.Movies\n\n AS LYNNTHIS ON EXISTS (SELECT COUNT(*) FROM movie_2.MovieTheaters WHERE Rating = '-')\nORDER BY Title , Name ) ON"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "SELECT MIN(Movies.Movie )\nWHERE Code = 10"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": "SELECT Name INNER JOIN (SELECT Rating GROUP BY Movie LIMIT 1)\n\n\n AS njtneenatrteeldernanisitntetpaparwietueglauptivcifschutbimbeilngusummekheeepiklefhortkienaedinnacom"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "SELECT SUM(Code )LIMIT 12"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Movies.Movie ))\n\n\n       \n\n AS EANCEY_ZAKEK1DEX9t2jhf4u3mUdVxHzG7CJ8LDvW0qyFkcRiTQ6sPnIaMgEeB"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": "SELECT AVG(Code )INNER JOIN (SELECT Name RIGHT JOIN movie_2.Movies\n\n\n AS SEXUALIZEDZENIAfemalesofpornstarsassextantiesmenandarensfwcntswafenznisvehmpltouesdewgatuhekrzejyv"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": "SELECT *\nINNER JOIN (SELECT AVG(Title ), SUM(*)LIMIT 2 OFFSET 8019036000499918111022266034782348175520652877582427704459042957994907461933476696211675308310081325873586112045893916"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT SUM(*))\n\n AS IHON ON EXISTS (SELECT COUNT(*)) ORDER BY Rating LIMIT 4;"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": "SELECT Rating FULL JOIN (SELECT SUM(Rating )\nFULL OUTER JOIN movie_2.Movies AS ukonews1rjhfr7vL9tWVzH6ZiA3d4y0b5pqnkhgQS\n\n AS OTMUSISERUITO ON Title <>\nT"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "SELECT MIN(Code )\nFULL JOIN (SELECT Title LEFT JOIN movie_2.Movies\n\n AS YOSEMITERIDGE3KONORGATEXY7LYUZBHILISQC9V6ES\n\n AS CELESTE ON Movies.Code <-1LIMIT 2"
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": "SELECT Rating GROUP BY Movie LIMIT 3"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": "SELECT *INNER JOIN (SELECT Rating LIMIT 4)\n\n\n AS POTATORY ON Title >2.9FULL JOIN movie_2.MovieTheaters ON EXISTS (SELECT *INNER JOIN (SELECT Rating LIMIT 4)\n\n\n A"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": "SELECT Name INNER JOIN (SELECT Rating FULL JOIN movie_2.Movies\n\n\n AS eenkfaktoklagellmekasstaertrudhnecveiiketzrekaanjapeljeorbavpazurnkoitamutniijeindlebeiligimatalu"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": "SELECT *INNER JOIN (SELECT Rating )\n\n\n\n AS ESSENTIALISTS ON Title >Movies.Title INNER JOIN (SELECT Movie , COUNT(movie_2.Movies.Rating )) \n\n AS THE ON EXISTS (SELECT Rating )\nI"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": "SELECT AVG(Code ) RIGHT OUTER JOIN (SELECT MIN(*)RIGHT JOIN movie_2.Movies\n\n\n AS DEFINITELYFANOUSrstjngntlpv4y8f7tgJU1C3ZoD6Wb0BhxwHQ5iYa9PzEuNkX"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "SELECT MIN(Code )"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": "SELECT *\nINNER JOIN (SELECT *) AS ANIMATED ON EXISTS (SELECT *) LEFT OUTER JOIN movie_2.Movies ON Movies.Movie = Movies.Name ;"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": "SELECT Rating GROUP BY Code LIMIT 32411366040444565011733131658471223204964192755302628577590663887292237890879359430434257085411846151039055600140400099073307689329567245942111009066366045"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT Title FULL JOIN movie_2.Movies\n\n\n AS SESTABIASBUDZAN AS LITIMATE1QKV7EOSWJY8C5AT3HGOCDSUYSUS6EDAM4D9LAACIFFONIAXLIS"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": "SELECT Rating INNER JOIN (SELECT SUM(*)GROUP BY Title LIMIT 799224003739171407291328114740558875234860387020891064167850761123151201796918194632177352287339410084927085796365865453426"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": "SELECT COUNT(Name ) AS LENUCE INNER JOIN (SELECT *) AS ELEMENT ON EXISTS (SELECT SUM(*) FROM movie_2.Movies WHERE Movie = 1 ORDER BY Name );"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": "SELECT MIN(Code ), AVG(Rating )\n\n\nINNER JOIN (SELECT Name , Rating ORDER BY Title LIMIT 3)\n AS OF ON Code > 11.2310181711 INNER JOIN movie_2.Movies\n\n AS YAZUJIH"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": "SELECT Name RIGHT JOIN (SELECT DISTINCT Title LIMIT 5)\n\n\n AS IBSHOTLE ON Code >-0"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": "SELECT MIN(Code )\n\nINNER JOIN (SELECT SUM(*))\n\n     \n AS aaikouji_lilioi3stu2ngxj7k8r9qv0f5n01y6s1gz11dhm14o4e44b1674c09556695fe351754acbd77"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": "SELECT AVG(Movies.Rating )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN movie_2.MovieTheaters ON movie_2.Rating = 1 ORDER BY Movie LIMIT 10 OFFSET 0)\n\n  \n AS DENTING ON Title > (SELECT COUNT(movie_2"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": "SELECT Name INNER JOIN (SELECT AVG(Movies.Movie ))\n\n\n AS THE ON EXISTS (SELECT Name RIGHT OUTER JOIN movie_2.MovieTheaters ON movie_2.MovieTheaters.Title = 'A Night Out' ORDER BY Code , Movie LIMIT 1)\n\n\n"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "SELECT AVG(Code ) LIMIT 11280149274825509070232028954054131099161908241114381807361278773730577568985874452629055332263"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": "SELECT AVG(Rating )\nWHERE Code = 8.25 LIMIT 4861"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": "SELECT DISTINCT SUM(Rating )ORDER BY Title LIMIT 1 OFFSET 243"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": "SELECT Rating GROUP BY Title LIMIT 47323330116"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": "SELECT AVG(Code )\nLIMIT 200031100006377030052750082213485033280020400261008002901021218600193614160680783543607555541524584968909905657466641776254032103895995649043196459470907908691123394477504770"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": "SELECT AVG(Code )\nRIGHT OUTER JOIN (SELECT COUNT(*) FROM movie_2.MovieTheaters WHERE Movie = 'LITTLE BUCKET' ORDER BY Movie , Title LIMIT 1 OFFSET 0) ON EXISTS (SELECT * ORDER BY Rating )\nFULL JOIN (SELECT AVG(Code ))\n\n AS"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": "SELECT *\nLIMIT 71511361367482028378910783859004045173350461201391814586949649527976099888023305747732434842290658719062563607661668562008544757055268007321510077359874377211848203694454317896387909"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "SELECT SUM(Code )\nLIMIT 463"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": "SELECT AVG(Code ) LIMIT 10;"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": "SELECT MIN(Code ), SUM(*), COUNT(Rating )WHERE Title = (SELECT *)\n\nINNER JOIN movie_2.MovieTheaters\n\n AS VASFONTEKED ON Movies.Code >movie_2.Rating RIGHT JOIN movie_"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "SELECT DISTINCT COUNT(*)\nFULL OUTER JOIN (SELECT * FROM movie_2.Movies WHERE movie_2.Code = 'English') ON movie_2.Name > 1 GROUP BY Movie ORDER BY Name LIMIT 3;"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": "SELECT SUM(Code )\nWHERE Code >\n\n-0.01 RIGHT OUTER JOIN (SELECT Title GROUP BY Name )\n\n AS DALFETTI ON EXISTS (SELECT * FROM movie_2.Movies WHERE movie_2.Movie = 2 ORDER BY Movie )\n\n IN"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": "SELECT DISTINCT Rating INNER JOIN (SELECT MIN(Movies.Rating ))\n\n\n \n AS ae_joe1h9r8iHx7kZm2F4Lg0uQs6dAzW5DvYPJbKwf3cNpUBqEoTXOyVtCnR"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "SELECT SUM(Rating )INNER JOIN (SELECT MAX(*)FULL JOIN movie_2.MovieTheaters\n\n\n AS DIABLICOLISZASLINGGUNWICKDYSTERSHAVEREURTENEGKATANCHUSAMORUADNEPETHIACRYSOSIANCODEXVENTA"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": "SELECT SUM(Code )"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": "SELECT MIN(Code )"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Level )\n\n\n       \n\n WHERE Manager = Position ORDER BY Date LIMIT 8421410392275452778110189193777293524174834790470253316463093126065185536"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": "SELECT Name INNER JOIN (SELECT Level RIGHT OUTER JOIN (SELECT COUNT(*), Has_Clearance.Name FROM planet_1.Planet)\n\n\n AS SELECTSYS ON Planet = 1 ORDER BY Name LIMIT 7010902102522"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": "SELECT Name LIMIT 1;"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "SELECT Recipient WHERE Has_Clearance.Recipient <Level LIMIT 0 OFFSET 1"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "SELECT Remarks INNER JOIN (SELECT COUNT(Planet.Level ))\n     \n\n\n\n AS in ON Name > Level GROUP BY Has_Clearance.Manager ;"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "SELECT COUNT(Position )"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "SELECT Name LIMIT 3155275040541800"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "SELECT AVG(Manager )\nINNER JOIN (SELECT Employee.Date RIGHT JOIN planet_1.Shipment ON Manager <176050273746286789804829021523109862239203632135384025667755141158181916"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": "SELECT COUNT(Weight )\nRIGHT OUTER JOIN (SELECT MIN(Manager ), Remarks , Weight )\n\n  AS NUKYFONDURAALL1P2E0ENXG3B4H20K9W11AT5Q10U15YS8J6OBAASV7ZCADN"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": "SELECT COUNT(Weight )\nRIGHT OUTER JOIN (SELECT COUNT(Has_Clearance.Date ))\n\n  \n\n AS OFYNE ON Remarks > Has_Clearance.Employee ORDER BY Salary , Date LIMIT 1029331650893 O"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": "SELECT SUM(Position )\nFULL JOIN (SELECT MIN(Has_Clearance.AccountNumber ))\n\n AS COSRCHISYMALICATION ON EXISTS (SELECT Position RIGHT OUTER JOIN planet_1.Planet ON planet_1.Pla"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": "SELECT Level GROUP BY Has_Clearance.Manager ORDER BY Coordinates LIMIT 5483635851218385049154217007524114714556546164501709977402322283219055700058782989278610082613689580593933305425"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": "SELECT Sender INNER JOIN (SELECT Level ORDER BY Weight )\n\n\n    \n AS SentenceNameTheSentenceEmailSubjectMessageDateInBoxTextNumberYouCanUseThisAddressForMyPodcastIfOnlyToSeeThatLikingListPackageID_HintEDIFENEWNDELIMITWonLineOfServiceInnerJOINYV"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": "SELECT Sender INNER JOIN (SELECT Recipient )\n\n\n  \n\n AS CIDA_8584569102350330177882517264919488027573046127514654211163764546735394055707629287444631324439990247152047842150718073C6B"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": "SELECT Employee.Employee \nRIGHT OUTER JOIN (SELECT MIN(Coordinates ) RIGHT OUTER JOIN planet_1.Planet AS ALTERNATE ON Planet.AccountNumber = 0 INNER JOIN planet_1.Planet ON planet_1."
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": "SELECT Sender FULL OUTER JOIN (SELECT Level GROUP BY Date )\n\n\n\n AS PICTUREOFIENJINGWANGZFENTEXHESEAASBALNITMIAESADANVIDYAHAEDEETUDEFRISCUNICXDAGLIOSUBODGKATILQAABAYARAMOLO"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": "SELECT Employee LIMIT 478881635009928904857225067102320394064141829473336981178581330792601175943247076277745194946258700094480532475595116075699612688425871105371005367201353816669048005450890464"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": "SELECT Sender FULL OUTER JOIN (SELECT Employee LIMIT 5)\n\n\n\n AS CHILDJESUSATENALAMURANASVATHGORHYKARHRABAPYPEVARADHAUMETUPIDAMONUYAAGUNPOKWINDITHROCHAVAYNICOLPHOCELLINFUDDIAE"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": "SELECT Employee \nINNER JOIN (SELECT MAX(Employee ))\n\n AS CULTIVATELY ON Salary = 1 ORDER BY Has_Clearance.Date ;"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": "SELECT Has_Clearance.Manager ORDER BY Sender \nLIMIT 2"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": "SELECT Position INNER JOIN (SELECT * FROM planet_1.Client)\n\n\n    \n\n AS EA ON Date <planet_1.Planet.Date INNER JOIN planet_1.Planet ON planet_1.Planet = '0' GROUP BY Planet.Name ORDER BY Name"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": "SELECT MIN(Coordinates )\n\n\nLIMIT 5343650474601"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": "SELECT Recipient FULL JOIN (SELECT Sender FROM planet_1.Planet)\n\n\n  \n\n AS vrZGJf9bFqKYp8kL5zR7vXmhjW6uAw4Q3CxeUgTVB0NtIdGVyH2nYSZXcE1PWMvc"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": "SELECT SUM(Has_Clearance.Level )\n\n\n INNER JOIN (SELECT Position , COUNT(*)) AS DEVILABLE ON AccountNumber  IN (SELECT COUNT(AccountNumber )) ORDER BY Has_Clearance.Level"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": "SELECT AVG(Client.Level )\nRIGHT JOIN (SELECT COUNT(*) FROM planet_1.Planet WHERE Planet > 0 ORDER BY Name , Weight ) ON Remarks = 1 GROUP BY Name ;"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": "SELECT Has_Clearance.Manager ORDER BY Coordinates LIMIT 12128153628126078321788750122992057339023454770490953559291638988066552546115069403079120118546519531008271073009614240773739"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": "SELECT COUNT(Client.AccountNumber )\nINNER JOIN (SELECT Recipient ) AS EBRASMIAANERUATISHA_CHESTRAZING1HG4Q0X3D7KL5CJ8Vq9PjrfYbvNwcF2hxlkW6aRzB"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": "SELECT MIN(Contents )\nINNER JOIN (SELECT COUNT(Manager ))\n\n  \n\n AS INITIALITY_IDJOSLATORYTOX2ENDSHIFTYWEDDHAONTHORISALICIANTIMBANAMUSKUNVOTECHAETIFACENTELIADESIRINEQCOUNUTR"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT DISTINCT Level FROM planet_1.Planet WHERE Planet = 0) AS SEND ON AccountNumber < Name ;"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": "SELECT Position , COUNT(Coordinates )\nINNER JOIN (SELECT MAX(*) ORDER BY Employee.Position , Remarks LIMIT 11011811354532000923133310471630897097272979266780255717097838755855403660"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": "SELECT Sender \nINNER JOIN (SELECT Level GROUP BY Has_Clearance.AccountNumber )\n\n AS MURPHISEIDLOR2JOCBARHOLICUS6U1KGATTRZD9F5UNX7OVxQEvNdf8hCpMbI3rRgY"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "SELECT Position , COUNT(*)\nINNER JOIN (SELECT COUNT(*), MAX(*))\n\n AS fora_foran1i4p2s0in9m01e8j10fzd1411q3xb30dfc7l6nbcg09yldgt5k42viv13r20h31ss34t3500u3315"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": "SELECT AVG(Manager )\n\n\nLEFT OUTER JOIN (SELECT Employee , Level WHERE Recipient > -100) ON Manager = Planet.Sender FULL OUTER JOIN planet_1.Client AS aerstuematette"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "SELECT Recipient LIMIT 0;"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": "SELECT COUNT(Client.PlanetID )\nINNER JOIN (SELECT Recipient FULL OUTER JOIN planet_1.Planet AS MISTANTICPACE2rMESORTHONFHULISYLAPOLASILAMETHADAAIRBATEAZEPRODI\n\n\n AS BANDAWN"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "SELECT Recipient GROUP BY Employee LIMIT 112 OFFSET 235"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": "SELECT AVG(AccountNumber )INNER JOIN (SELECT Name RIGHT OUTER JOIN planet_1.Shipment\n\n\n AS TKQFjw0f5YDn6q2h8A7WxoMgBb4zk9v3SdEZcXJmV"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "SELECT Recipient ORDER BY Has_Clearance.Manager LIMIT 1"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": "SELECT COUNT(Client.Date )\nINNER JOIN (SELECT DISTINCT Level FROM planet_1.Planet) AS dateTime ON PlanetID = 0 ORDER BY Date ;"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "SELECT AVG(Client.Date )\n\n\n INNER JOIN (SELECT COUNT(*)) AS NINETY_KILLEDIMENTS0002A1JOCDZ8AM5EOS3Q0P9H7UIFF6SAAHAACB4VXWTOOLMUSIAEFTRABLISMGFLGADIBOBSMCATLARMSROP"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": "SELECT Has_Clearance.EmployeeID INNER JOIN (SELECT COUNT(AccountNumber )\nWHERE Sender = Weight FULL OUTER JOIN planet_1.Shipment AS PLEASANTS ON Date >= 0 ORDER BY Level , EmployeeID , M"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": "SELECT MIN(Manager )\n\nINNER JOIN (SELECT MAX(Manager ))\n\n\n AS ishiteaesarvara_kimboja154216292878672622991g00x2s7A10D8F9E02B3b6025d0C5cc20f4e403364c5055394718"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": "SELECT Level GROUP BY Name , Salary ;"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "SELECT Remarks LIMIT 701671700053150202916782328372510403314303635191575590095121122555818574474459902807764887097606832242709136219225539063245288478746167790761256542104174901732093503438259814"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": "SELECT Level GROUP BY Recipient , Client.Date ;"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "SELECT Level GROUP BY Recipient , Employee.Date ORDER BY Date ;"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": "SELECT SUM(AccountNumber )LIMIT 322721748142345677516012028331812792600245950361511291909279810644399498838405439346360259569320005100420058943037962119944655007147571378179780861"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "SELECT Level GROUP BY Has_Clearance.Name , Name , Position ORDER BY Manager ;"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": "SELECT SUM(AccountNumber )LIMIT 322145035482560309713231217104058115749277624182665998828676819389420343390374615432470116547083166457755360072297584475664695320162126397959634487354880253095"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "SELECT COUNT(Has_Clearance.Recipient )\nINNER JOIN (SELECT COUNT(*) ORDER BY Recipient LIMIT 205536332530262439643428178838157827141657892375857043203765115645131058005946016097127718"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": "SELECT DISTINCT AVG(Date )LIMIT 22"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT Has_Clearance.Date WHERE Level <Level GROUP BY Name LIMIT 0)\n\n\n AS YRSVAMEROUE ON Sender = 2333;"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": "SELECT Position , Date RIGHT JOIN (SELECT COUNT(Date )RIGHT JOIN planet_1.Package\n\n\n \n\n AS thePackageSizeofpackageShippingNameID3To8ThenameOfCustomer0B2F5E77A6EC103022DE1513CE58C4BA574434D749461836"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": "SELECT COUNT(Manager )                              \nLIMIT 1055331039072155978285045777516359049172948346940271101606837238944763099656463247261857794680541238137036"
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": "SELECT Level , Sender RIGHT JOIN (SELECT Employee )\n\n\n                   \n AS teslaarasatikljeulacketotivliisitenjoscepokiladajelcqaopanakolgaponoduagetalinav"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": "SELECT DISTINCT SUM(Name )\nGROUP BY Level , AccountNumber ;"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": "SELECT DISTINCT COUNT(Client.Date )\nFULL JOIN (SELECT COUNT(*)LIMIT 0)\n\n AS LOUGHTONIAH_WESTTHURRENESS ON EXISTS (SELECT COUNT(AccountNumber )) LIMIT 1;"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "SELECT SUM(Name )\nRIGHT JOIN (SELECT Employee , Remarks LEFT OUTER JOIN planet_1.Planet\n\n AS PARAJLAMKAQELADHAVANAGUNAKIYONDANGIS\n\n AS NANDICATOZILHRITARBALUNG"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": "SELECT Employee , AVG(Employee ), Name INNER JOIN (SELECT SUM(*), Has_Clearance.AccountNumber )\n\n\n  \n\n AS DYNNINZELPATENXKUNJVOCSETTELLACOMBALUDAISAAQF4D6G"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": "SELECT Package.PackageNumber \nINNER JOIN (SELECT Level GROUP BY Manager ) AS SEBENISEMERZATSKAJIMESASUNIKGONALETHAPITFORTTAKWIFICHLEVXCODLYTACHTOMLOLOKEDCHIVIELNAAHAVEMEGROUPPY"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": "SELECT PackageNumber INNER JOIN (SELECT COUNT(Date ))\n\n\n            \n\n AS VH1VXM6UJV5FZ4Y7QAIA9B2KFPP3CJ8GPRLAAFLSAEFE ON Manager = 1.10751167890949\n\n"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": "SELECT Has_Clearance.Manager WHERE EXISTS (SELECT COUNT(Weight ) GROUP BY Position LIMIT 0)\n\n\n INNER JOIN planet_1.Client AS eF9Q5rGmfVqEeIk4pZ3R8"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": "SELECT DISTINCT Sender LIMIT 20000312025141624113637505401125722382028303527754318190210954913446478451733854865730060347499079667210087906944789723555983269869961753909532563304113650930156152946162412"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": "SELECT COUNT(Name )\n\n\n INNER JOIN (SELECT * FROM planet_1.Planet) AS mbjndrpf ON Manager = '&' ORDER BY Planet LIMIT 1;"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": "SELECT COUNT(Has_Clearance.Name )\nLIMIT 449891;"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": "SELECT MIN(Client.Manager ) AS and INNER JOIN (SELECT Name RIGHT OUTER JOIN planet_1.Planet\n\n\n AS VONDEKOVENVASSIDIANAANASINOUFETTERMANNOBOSIRGINGWELCOMESITOLYARIFATIMAL"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": "SELECT DISTINCT SUM(Name )\n\n\n INNER JOIN (SELECT MAX(PackageNumber ))\n AS LYVOCUS ON Recipient < 911.3 ORDER BY Has_Clearance.Weight , Name ;"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": "SELECT Name INNER JOIN (SELECT Has_Clearance.Manager GROUP BY Employee )\n\n\n AS OAUETIAVASFJACH1CHZQ8WOCAL4B5D3RY9XIODYS7E11TBRAT6G0LYLGNKCx2Og"
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": "SELECT DISTINCT SUM(Name )\nGROUP BY Level , AccountNumber ;"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": "SELECT Has_Clearance.AccountNumber FULL JOIN (SELECT COUNT(Position ))\n\n\n AS EKWENGRAULINGFURTHERLYTheodore1gvj0bZ6JfY3BrXQx_aM8DkcwV9hHpO2NlR4C"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": "SELECT DISTINCT COUNT(*)\nFULL JOIN (SELECT Employee FROM planet_1.Planet) AS planetELETEs ON planet_1.Planet.Recipient = 1;"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": "SELECT SUM(AccountNumber )\n\n\nGROUP BY Has_Clearance.Date ORDER BY Manager LIMIT 2028226750"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": "SELECT DISTINCT SUM(AccountNumber )\nLIMIT 400003"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": "SELECT Name RIGHT JOIN (SELECT SUM(Coordinates ))\n\n\n    \n AS for ON Date < 0.00014192322804310363733274077571518358905472613882529341158244459553866457649171416569968287978486739"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": "SELECT Remarks , Employee.Weight LIMIT 835234615252858141322187826407748491768103875374550573324791969885567471189112721302765806210736013412075964952042146397432169310084360834454990821281513"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": "SELECT Weight INNER JOIN (SELECT MIN(AccountNumber ))\n\n\n AS SELLERIANISMSLITZDETVJXCHUEDUNPWF5H2B8BA6Q3SUTFRG7K1MIDR9AMBRIFY_AL4ECMDIELCIGLYNEAT0AFLOEM"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": "SELECT SUM(If_active ) INNER JOIN (SELECT Units_sold_Millions , game.Franchise WHERE video_game.Player_name > 2)\n\n\n  AS VENTABOSYtUGIFVNQxKqZ3LJ8W"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": "SELECT AVG(Rank_of_the_year )\nINNER JOIN (SELECT DISTINCT Rank_of_the_year )\n\n   \n\n AS IFJOB ON Game_ID = 5 ORDER BY If_active , Player_name ;"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": "SELECT COUNT(College )\nFULL OUTER JOIN (SELECT Units_sold_Millions )\n\n AS NUITATIONS ON EXISTS (SELECT DISTINCT SUM(*))"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "SELECT AVG(Franchise ) RIGHT OUTER JOIN (SELECT * LIMIT 1)\n\n\n    \n\n AS IF ON Franchise = College ;"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": "SELECT MIN(Market_district )\n\n\nFULL JOIN (SELECT DISTINCT Rank_of_the_year , Franchise INNER JOIN (SELECT DISTINCT SUM(Download_rank )\n\n\nFULL JOIN (SELEC"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": "SELECT AVG(College ), SUM(*)ORDER BY Title LIMIT 1;"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "SELECT Rank_of_the_year INNER JOIN (SELECT COUNT(Franchise ))\n\n\n AS ALJARGIANA ON EXISTS (SELECT SUM(Download_rank ) FROM video_game.platform)"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": "SELECT video_game.platform.Platform_name RIGHT JOIN (SELECT Units_sold_Millions )\n     \n\n\n AS IOSDYVODAITTAISKORENFORTESEURUASTROVIAIJOMIRANGINZULALBADIONLAYOJHIMRAT"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": "SELECT SUM(College )\nINNER JOIN (SELECT Rank_of_the_year ) AS TREEKANOSAISESZENJOHBOLATIRIANHURTAXFALSHAYAMASIMDVIPMADONYAGOVSKCOGOCETEACTONORGANIZATIONINAICERGAREDIAIDU"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": "SELECT Rank_of_the_year LIMIT 9484611643414897817581224181325165539309626321943290136674028579966657093229560382059796902271598975843577504788621068971004544904090856258643714062373177834114925"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": "SELECT DISTINCT AVG(Franchise ) WHERE If_active < 1LIMIT 2 OFFSET 3;"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": "SELECT Units_sold_Millions INNER JOIN (SELECT Rank_of_the_year )\n\n\n AS CephaloniaLion2Husbandi4aJOBb3jU8e9Fp7vQ5GuK0B6VhdZcqmw1EIyzsYXgWlkPxNfDn"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": "SELECT Game_ID INNER JOIN (SELECT SUM(Franchise ))\n\n\n AS for ON video_game.platform.Game_ID <-1 RIGHT JOIN video_game.platform\n AS ltJZXcR7CwM0hW3sQF"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": "SELECT Game_ID INNER JOIN (SELECT * FROM video_game.game)\n\n\n      \n AS OZ4H2F8V3QDW7XAT5JGBAYM6LNDLYBALYSEBBSRKP1EAFTOCAAISSS9AFCEFFA10CAD0NKKZXEEAEIAACECU"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": "SELECT COUNT(*)\nLIMIT 100000000040000800010000000000001000000090001000008120113104211100320030484749146750900234425293517184085243787392758903877996459795546288634266065451666667886863996222084703212857003393304258123698136601"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": "SELECT AVG(College )FULL OUTER JOIN (SELECT MAX(*))\n\n\n AS ILLUSIONALALLY_HASINGLYIOWAYYUITOUISTYFULBODYJUDGEDIMOSHEENKEEPSMAVESNAPOLATSUEDGONIFADAMOBSTOILIGRAPHICIDELINTINEUMFEMALE"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": "SELECT AVG(Download_rank )INNER JOIN (SELECT Game_ID , Developers FULL OUTER JOIN video_game.player\n\n\n AS WELLESTED AS SELECTAVEASBERSHIPANTHAIOLIONNIMVORGIANZYCAL"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "SELECT AVG(Market_district )WHERE If_active = 0.2FULL JOIN (SELECT COUNT(*) GROUP BY Title , Market_district LIMIT 33144027460178448923990380882634506538203717762935154800755560"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": "SELECT DISTINCT SUM(Download_rank )\n\n\nLIMIT 81481204978335818481228108974193687164526172550652957379538674260222330644744686690277599021253213351511004024089799039064670622490179559399943140746694818"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "SELECT COUNT(Rank_of_the_year )\n INNER JOIN (SELECT COUNT(Game_ID ))\n\n AS LISDJANNEFOUNTEREDARESZWEGYPOPERTOSHAVASQUSIAUHAGKAMILCADIMBABLAACETM1ENXR3ONELEALBOTL2N"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": "SELECT COUNT(Market_district )\n\n\nGROUP BY Market_district ;"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": "SELECT If_active LIMIT 1 OFFSET 48847292601461667289525171218202385143089716939153766385857457050542583433786477993656497619224462147752759095551"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": "SELECT SUM(College )GROUP BY Game_ID ORDER BY Title LIMIT 725422615404717131946121624643979077829583522485799093627608959343049651838941475432100089854288768454400532074335588102370"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": "SELECT COUNT(Rank_of_the_year )\nWHERE Market_district = 0;"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": "SELECT Units_sold_Millions INNER JOIN (SELECT SUM(Developers ))\n\n\n AS Erebratystrtsgiftyschirgelefuslturkevhiiouraumuikonjuhc1pogiaiisen2edokkopaqomaszal3d6b"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "SELECT Rank_of_the_year WHERE If_active =Player_ID FULL OUTER JOIN (SELECT Units_sold_Millions )\n\n\n AS ofNuB3nt0v1g4qV9xKrjWZaXGtQ5hb7oC8lFzU"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "SELECT video_game.game.Title INNER JOIN (SELECT Title RIGHT OUTER JOIN (SELECT COUNT(*)) AS FOOASTSLITZ2DONETIC1POWERMENTPRIVATE_FINALSCORE3BITAL10GAMESEVERAGEYFROM0201X1400NOSCALE4"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": "SELECT SUM(College )"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": "SELECT AVG(College )\nWHERE If_active <Player_name RIGHT JOIN (SELECT Units_sold_Millions FULL OUTER JOIN video_game.platform AS ZAALONBACD\n\n\n\n AS OFFORMED ON Downl"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "SELECT SUM(If_active ) INNER JOIN (SELECT Units_sold_Millions , game.Franchise RIGHT JOIN (SELECT Units_sold_Millions , Game_ID ORDER BY If_active )\n\n\n AS S"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": "SELECT AVG(Developers )\nINNER JOIN (SELECT Game_ID , Developers )\n\n \n\n AS RUSSIANJONESESSKAOSLISKAZUITADOLASALAYUEATYAMENZAKAPARTHOUSSAVGONEBEGIRNINILEXICELIZOQRIM"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "SELECT AVG(Market_district )\n INNER JOIN (SELECT Rank_of_the_year )\n\n AS STADIUM ON Game_ID = 4790034133698221648581910897321557552523990701333054184680402814246068297838204717"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": "SELECT AVG(College )\n INNER JOIN (SELECT Title )\n\n AS THE ON Game_ID = 810779940221258268898703678209739302948683528555096006717110119795725497610092447\nFULL JOIN (SELECT Ti"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": "SELECT SUM(Rank_of_the_year )FULL OUTER JOIN (SELECT Rank_of_the_year )\n\n\n AS BHWTSVATvJXKfZbDw5iY9sqc2QzC6yG3pMdP8oUhgFjEtIvyN7lR0L"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": "SELECT *\nINNER JOIN (SELECT If_active RIGHT OUTER JOIN video_game.player AS NURRRFJOLWDYSARKYLSTBANX4jbV6lg7hZpQGTY5R9ImN3A2NDP1M0aAMiCnTzEf"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": "SELECT MIN(College )INNER JOIN (SELECT Game_ID )\n\n\n    \n\n AS ITHISYKONNAVANGAABAZXHQF2D0JUNAL9B7WFLAC4C8E5SA1U3PAOC6PVTATITENIEGRLPSKRT_ASNPCM"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": "SELECT video_game.College FULL OUTER JOIN (SELECT Units_sold_Millions )\n\n\n    \n\n AS ROUNDUP1v2t4m8yY3pEdB6FQ5fhGkqcx9PuDrzZWgHXwVbKJ7L"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": "SELECT AVG(Franchise )\nWHERE If_active <Title RIGHT JOIN (SELECT SUM(Download_rank ))\n\n  \n\n AS WELL ON Developers = 8.8GROUP BY Market_district LIMIT 23000"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": "SELECT *\nINNER JOIN (SELECT COUNT(Position ))\n\n AS MARTINEZ ON Developers = Position LIMIT 0"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "SELECT SUM(College )\n\n\nWHERE If_active =If_active LIMIT 3 OFFSET 4"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": "SELECT COUNT(College )\n INNER JOIN (SELECT * FROM video_game.platform WHERE platform.Platform_ID = 'J7V5Q9W3F1A8' ORDER BY College LIMIT 100)\n\n\n AS ELSE ON EXISTS (SELECT * FROM video_game."
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": "SELECT AVG(Franchise )\nLIMIT 11"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": "SELECT Name INNER JOIN (SELECT Release_date )\n\n\n       \n\n AS DEBIDGE ON Title < Book_Series LIMIT 927780115233777891128162095263660346717290751459113918542800755044125725"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": "SELECT SUM(Book_ID ) AS PRIMARYHANDLE FROM book_press.press WHERE Book_ID = '''.join('', 1) ORDER BY NONE DESC LIMIT 10; SELECT (1+DISTINCTS - DISTINATED + FEDERATION / 10000000001)/10000000010, HOSTNAME AS AADDRESS AND CAST(Book_ID).value FROM books WHERE BOOK"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": "SELECT Name INNER JOIN (SELECT Press_ID LIMIT 2)\n\n\n      \n\n AS EGYPTIAN ON Title <Press_ID LEFT OUTER JOIN book_press.press AS eg1Eb4QvHz0f3qdJk6Vj7WZ"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": "SELECT SUM(author.Author_ID )\nFULL JOIN (SELECT Name RIGHT OUTER JOIN book_press.book AS auregneEcheseNmYerljBwLc5f1qxsAuG2zvFnJKU7hP9yZ4"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "SELECT COUNT(Press_ID ), Press_ID , Sale_Amount ;"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": "SELECT COUNT(Author_ID ) INNER JOIN (SELECT Author_ID FROM book_press.book WHERE Book_ID = 'BOOK') AS eLSTREET1 ON author.Sale_Amount < 2;"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": "SELECT Gender WHERE Name <1809153628306437190145172789907835751639445078553866796048245899135932802631"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": "SELECT Name INNER JOIN (SELECT Release_date )\n\n\n  \n\n AS LIEVERLY ON Gender > Book_Series LEFT OUTER JOIN book_press.book AS iBOOKPRINTOR ON Title < 3000 INNER JOIN (SELECT Rel"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": "SELECT DISTINCT COUNT(Author_ID )\n\n\nRIGHT JOIN (SELECT Name RIGHT OUTER JOIN book_press.book AS HOOLLORINGLY ON Title = Book_Series FULL OUTER JOIN book_press.book AS cjf1\n\n\n\n\n\n"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "SELECT COUNT(Name )\nWHERE Author_ID > 9.01 LIMIT 657007825290434162238170682726246039285063143559756720442358126497371879498546304880554794339070969451072197432159913534042117766017636"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "SELECT Name LIMIT 0"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": "SELECT SUM(Name )\n \n\n INNER JOIN (SELECT Name ) AS EZAVORONDEJAYHALADUNANBARRANDPENDSASGIRREYCHINGAHLINGKULAHNAFLISUETEHALECQWOCOMFACTHIFACTUTIOLAMIMIDOBODICLESLOPT"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "SELECT Title RIGHT JOIN (SELECT AVG(Release_date ))\n\n\n          \n AS SELECTION ON Press_ID = Book_ID INNER JOIN book_press.book ON press.Press_ID = Author_ID GROUP BY author"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": "SELECT author.Name GROUP BY Release_date LIMIT 1 OFFSET 7181689131690961477221726879965889823334547751229443625374667697901105728684840665400135074240897274955946073193570649539"
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": "SELECT AVG(Author_ID )"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": "SELECT Release_date GROUP BY Sale_Amount ORDER BY Month_Profits_billion LIMIT 1036701539093;"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": "SELECT SUM(author.Title )INNER JOIN (SELECT MAX(*)FULL OUTER JOIN book_press.author ON book_press.press.Book_Series = 1 INNER JOIN book_press.press AS BOOKPRESS AS BOOKSER"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": "SELECT Release_date FULL JOIN (SELECT Title , COUNT(press.Press_ID ), Press_ID ) AS SELECTtits ON press.Book_Series = '1' ORDER BY Title ;"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": "SELECT AVG(Book_Series )LIMIT 232;"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Year_Profits_billion ) RIGHT JOIN book_press.press\n\n\n AS DEMARKED ON Year_Profits_billion < 0 GROUP BY Month_Profits_billion L"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": "SELECT Release_date \nRIGHT OUTER JOIN (SELECT AVG(Author_ID ))\n\n AS BANDYENHALMSTJONNZEDANWURTHLOLESUCEBULADAPASAMORMON1P2T3FIF6R9XATQ7E5OBA4C8YS0CHKGFRVGLI"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Year_Profits_billion )LIMIT 20)\n\n\n  \n AS ENCALABLYDSING ON EXISTS (SELECT Release_date , Book_Series WHERE author.Book_Series = Sal"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": "SELECT Book_Series INNER JOIN (SELECT Name ORDER BY Release_date )\n\n\n AS DATEENINGAISES2HJACKBADLEEDONUS3UHSG1P9CHC6QXZWAA5KFETASI7UNNEXUM4L8DSM10Y0RVTYS"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": "SELECT Release_date INNER JOIN (SELECT MIN(Year_Profits_billion )GROUP BY Name LIMIT 3)\n\n\n\n  \n\n AS EONM0NDT1L3HYSJE8KBQXR6NEOC4V5O9W7DUNZ2C"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "SELECT Release_date LIMIT 63680953978298927490988581337257501181415221042177798118535204700452316708499076769302464193848764628576594755315054604079532127314610086863"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": "SELECT AVG(Book_ID )\n INNER JOIN (SELECT Book_ID )\n\n AS CHIMERAONAIRENKARHAGUYORIGADATBAIJANAMMALIAJOUQUNGABIELAFETHAISABOLFUKCULBOYSANDGITDAILAPSINNEGAKSHOPBEDACROCD"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": "SELECT Release_date WHERE Title >\n30992319159814113918481289437204050973210459517657075774746011655562660763633356929052766740028249668534425385834821367548895743496472125993059843903\nINNER J"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": "SELECT Book_ID \nFULL JOIN (SELECT COUNT(Month_Profits_billion ))\n\n AS ispwjgCZGWc3xK4QVqkH1Y7yh6fX5BI9Jv0A8EFzmOuD2eLBAaMngoNU"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": "SELECT AVG(Name )LIMIT 2000010112342078306713750064286022162318335066141090278919391110055704097999588050000043777445745796846175429954399590782642152456215043648941272135253878963576134967002860"
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT DISTINCT Press_ID FROM book_press.book WHERE Book_ID = '1' GROUP BY press.Book_ID ORDER BY press.Press_ID ) ON author.Title <-0;"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": "SELECT author.Month_Profits_billion FULL JOIN (SELECT MIN(Gender ))\n\n\n  \n\n AS REROUTINEABILITJOEURIANESISDALLRICHELBANDSE ON EXISTS (SELECT MAX(Month_Profits"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": "SELECT Book_ID INNER JOIN (SELECT SUM(Press_ID ))\n\n\n    \n\n AS ELITEURIAFISADIOVICITASTRACITYANSPARENTIMATRAPEDAMINTHESETONEZORABIOCOLIDALERIFNIGGAYSICHUHUNTOYAMELTRAJIEN"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": "SELECT AVG(Name ) RIGHT OUTER JOIN (SELECT Press_ID , Name LEFT OUTER JOIN book_press.book\n\n\n AS SENSORFINDED ON press.Book_Series = 1 ORDER BY Book_Series LIMIT 600000100022453499176789077"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": "SELECT SUM(Release_date ) RIGHT OUTER JOIN (SELECT COUNT(*)LIMIT 80330570036221210344023281170376050010000848204616082475252944795988273301358414496796000324543188086178972003250647865135839"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": "SELECT Release_date FULL JOIN (SELECT Gender LIMIT 2)\n\n\n AS BKB2bJn6fwX8zPj3qhk7aGVp1c4sA5ZyHgDYpbGUvFV9WRlEtO_d0GmTmkUoCuQMAAiNxSlt"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": "SELECT AVG(Author_ID )FULL OUTER JOIN (SELECT Book_Series LIMIT 9) \n\n\n AS WONDERFULASAMENDS3YZ2W4X5PJK1R0BAB8CQA9ALG7MUNDFVNBLHMCODD6FDREOFLTTFUVWL"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "SELECT MIN(Author_ID )\nWHERE Name <3.2\n\n INNER JOIN (SELECT Release_date LEFT OUTER JOIN book_press.author AS TgCiF8ZWfXl5wJjYB2zG3aD6P"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer": "SELECT MIN(Author_ID )\n INNER JOIN (SELECT Name RIGHT OUTER JOIN book_press.author\n\n AS SIDAN AS DEEJAMMAATUNALABABASAKINGAGANGORDADEMARAYDAKLIMAPUTGABIONCHURPIT"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": "SELECT AVG(author.Book_ID )LIMIT 0;"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": "SELECT AVG(Name )\n\n\nINNER JOIN (SELECT Release_date , Name ) AS IJANAKAMHARASFULLYHAESCHMANDLERZINGBACRADIANWITHCOMCATONNELHEIMEEDOROLISSEGOTIDABUNAIFLETODOHLERDIGG"
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": "SELECT COUNT(Book_ID ) INNER JOIN (SELECT Release_date , Name LIMIT 1340)\n\n\n AS EMAILED ON Month_Profits_billion <Year_Profits_billion GROUP BY Year_Profits_b"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": "SELECT Release_date INNER JOIN (SELECT Press_ID )\n\n\n AS SENSITIVEZANNERMARKER ON Month_Profits_billion = Name GROUP BY Title LIMIT 3 OFFSET 1"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": "SELECT Release_date \nRIGHT OUTER JOIN (SELECT Title LIMIT 2)\n\n AS iuJH3YjDhF9nLf2kBxc8PZ6U7sKrv1WbzAa5pVgw4_oTXqMssQOIAyEtI0eCdRlGm"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": "SELECT Release_date GROUP BY Sale_Amount , author.Book_Series \n\nLIMIT 71350"
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": "SELECT SUM(staff_details ) AS SMELLIN RIGHT JOIN (SELECT DISTINCT COUNT(*)WHERE Business_Processes.other_details <0\n\n\n INNER JOIN (SELECT * FROM cre_Doc_Workflow.Staff, ("
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": "SELECT DISTINCT COUNT(staff_id )\nINNER JOIN (SELECT * FROM cre_Doc_Workflow.Business_Processes) AS stecclq ON next_process_id = 0;"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": "SELECT AVG(Authors.date_from )\nINNER JOIN (SELECT MAX(Business_Processes.date_from ))\n\n   \n\n AS SOONETHERTHFISHEDYHADICASGJELOVANATUNMAACKALAEBAAGIOLISNUQ"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": "SELECT author_name ORDER BY Ref_Staff_Roles.date_to LIMIT 10111216484034006055572846193918252378333765750126388921391710278897243098649367090209344149913742995647768155045"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": "SELECT author_name RIGHT OUTER JOIN (SELECT AVG(Authors.process_description )\n INNER JOIN cre_Doc_Workflow.Business_Processes\n\n AS INNERSCORE ON EXISTS (SELECT A"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "SELECT Process_Status.document_description FULL OUTER JOIN (SELECT COUNT(process_status_description )\nLIMIT 55850)\n\n AS ejrtslvA1RVmqBzX9wHf3FxhYbQsJ5u"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": "SELECT MIN(staff_id )\n                          \nFULL JOIN (SELECT AVG(*)LIMIT 0 OFFSET 200000002245141101184844352329136088403775789066255700191580203610392855"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "SELECT SUM(staff_details )INNER JOIN (SELECT MAX(*)FULL JOIN cre_Doc_Workflow.Business_Processes ON Ref_Staff_Roles.process_id = next_process_id INNER"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": "SELECT COUNT(Documents_Processes.date_from )"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": "SELECT COUNT(staff_details )"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": "SELECT Process_Outcomes.document_description WHERE Staff_in_Processes.process_outcome_code =Documents.document_id LEFT JOIN (SELECT Process_Outcomes.document_description WHERE S"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": "SELECT DISTINCT COUNT(staff_details )\nLIMIT 20000000004000000070000000000000001000000000000000000011027118950200100000010102544704820455723379821044059359038774218228819562936176033268715990769661234951410024134928938074163075554700"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "SELECT COUNT(Ref_Staff_Roles.next_process_id )\n\n\n       \n\n INNER JOIN (SELECT * FROM cre_Doc_Workflow.Documents WHERE Documents.document_name = 'Maurice Croundom' INNER JOIN (SELECT * FROM cre_Doc"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": "SELECT COUNT(Documents_Processes.document_description )\n\n\n INNER JOIN (SELECT COUNT(Documents_Processes.document_description )\n\n LIMIT 1000083223113888001033997860221903133718"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "SELECT author_name ;"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": "SELECT process_id , Process_Status.process_id , Process_Status.process_status_code ;"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": "SELECT SUM(staff_id )\nGROUP BY Process_Status.process_status_description , author_name ;"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "SELECT SUM(staff_id )\n\n\n  \n\n INNER JOIN (SELECT Ref_Staff_Roles.next_process_id , next_process_id , COUNT(*), MIN(Staff_in_Processes.next_process_id )\n\n\nINNER JO"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": "SELECT COUNT(staff_id )\nINNER JOIN (SELECT * FROM cre_Doc_Workflow.Process_Status) ON staff_id = date_to ;"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "SELECT SUM(staff_id )\nWHERE Business_Processes.process_name = staff_id ;"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": "SELECT COUNT(staff_id )\n\n\n INNER JOIN (SELECT * FROM cre_Doc_Workflow.Process_Status, cre_Doc_Workflow.Process_Status) ON staff_id = 0 ORDER BY next_process_id ;"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": "SELECT Business_Processes.process_id , Process_Outcomes.process_id , Process_Status.process_description , Ref_Staff_Roles.process_name , Documents_Processes.document_description , COUNT(Staff_i"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": "SELECT DISTINCT COUNT(staff_id );"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "SELECT *INNER JOIN (SELECT Ref_Staff_Roles.process_description INNER JOIN cre_Doc_Workflow.Process_Status AS ALAN\n\n\n   \n\n AS GOBRAHENMANNEPGLEKISESR1A4E3B8"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": "SELECT DISTINCT Business_Processes.process_name , author_name ;"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": "SELECT Process_Outcomes.author_name , author_name , next_process_id ;"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": "SELECT AVG(staff_id )\n\n\n  \nLIMIT 43415886048125722171636183326642044872366352837783038131959756795015839081120459856002589034610071170406553145032000212729689029522909624869980604979551048"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": "SELECT DISTINCT SUM(Documents_Processes.date_to )\n\n\n INNER JOIN (SELECT Process_Status.date_to )\n AS OCEUTY ON Staff.process_outcome_description = 1;"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": "SELECT SUM(staff_details )\nINNER JOIN (SELECT Ref_Staff_Roles.staff_details ) ON EXISTS (SELECT Business_Processes.staff_details ) INNER JOIN cre_Doc_W"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": "SELECT SUM(staff_details ) INNER JOIN (SELECT Ref_Staff_Roles.next_process_id , Process_Status.next_process_id , SUM(Staff_in_Processes.next_process"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": "SELECT process_name INNER JOIN cre_Doc_Workflow.Process_Status\n\n\n AS is ON next_process_id = Process_Outcomes.process_status_code ;"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": "SELECT document_id , document_name , COUNT(document_id )\nINNER JOIN (SELECT * FROM cre_Doc_Workflow.Documents, cre_Doc_Workflow.Process_Status) ON Documents.process_status_description = document_id ORDER BY document_"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT DISTINCT SUM(staff_details ) FROM cre_Doc_Workflow.Process_Status AS COUNT1, cre_Doc_Workflow.Business_Processes WHERE staff_details = 1\n\n\n INNER J"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": "SELECT Process_Status.document_id INNER JOIN (SELECT * FROM cre_Doc_Workflow.Documents WHERE process_name = 'Ongoing' ORDER BY date_to , other_details ) AS mpcommodity ON staff_id = 0 ORDER BY date_to ;"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "SELECT AVG(Ref_Staff_Roles.document_description )\n\n\n INNER JOIN (SELECT Ref_Staff_Roles.document_description )\n \n AS ETCECTUVQHLBJY7AVEETZD1BL6DSK5W4G8"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": "SELECT Process_Outcomes.staff_id LIMIT 0"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": "SELECT MIN(staff_id )\nINNER JOIN (SELECT * FROM cre_Doc_Workflow.Ref_Staff_Roles WHERE cre_Doc_Workflow.Ref_Staff_Roles.next_process_id = 0) AS _ID1 ON EXISTS (SELECT MIN(staff_id ) ORD"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": "SELECT Process_Status.document_description RIGHT OUTER JOIN (SELECT *)\n\n\n AS VARIABLES ON Staff.process_status_description <Process_Status.document_description RIGHT OUTER JOI"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": "SELECT Documents_Processes.document_id RIGHT JOIN (SELECT * FROM cre_Doc_Workflow.Ref_Staff_Roles WHERE Staff_in_Processes.process_status_code >= Documents_Processes.date_to ORDER BY Process_Status.date_from LIMIT 1)\n"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": "SELECT SUM(staff_id )\n\n\n INNER JOIN (SELECT AVG(*)LIMIT 14 OFFSET 21723161445292233576520479818127877483539678538404626634411554901089713885450990715686493258286025760096277510372459"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "SELECT invoice_status INNER JOIN (SELECT Payments.meeting_id )\n \n\n AS ETCGITBACETXES ON Clients.payment_details > end_date_time RIGHT JOIN (SELECT Payments.meeti"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "SELECT DISTINCT SUM(sic_code ) AS TO RIGHT OUTER JOIN (SELECT * FROM advertising_agencies.Agencies) AS datatype2ID ON billable_yn = 1;"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": "SELECT agency_id , sic_code INNER JOIN (SELECT SUM(Invoices.purpose_of_meeting ) AS id, invoice_status WHERE client_details = 'Cannot provide or confirm information' ORDER BY sic_code , other_details \nLIMIT 593010513121609"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": "SELECT invoice_id , end_date_time , meeting_type , agency_id , invoice_status , other_details , sic_code RIGHT JOIN (SELECT invoice_id )\n\n\n AS weblatiedpolicieABSCOPBISMEMOCLATIOS"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": "SELECT invoice_status ;"
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": "SELECT Invoices.purpose_of_meeting WHERE EXISTS (SELECT SUM(Invoices.purpose_of_meeting ), SUM(Invoices.purpose_of_meeting )) INNER JOIN advertising_agencies.Payment"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT AVG(Agencies.agency_details ) AS DYNAMIC) ON Meetings.client_id = 1 ORDER BY Staff.purpose_of_meeting , meeting_outcome ;"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": "SELECT Invoices.client_details WHERE invoice_details = (SELECT * FROM advertising_agencies.Agencies, advertising_agencies.Clients)\nINNER JOIN advertising_agencies.Clients ON end_date_"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": "SELECT invoice_status , SUM(purpose_of_meeting ), Payments.invoice_status ;"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "SELECT COUNT(end_date_time )\n\n\n  \nINNER JOIN (SELECT Invoices.billable_yn , end_date_time )\n\n AS YJOYDZLANISEKVYMMABETHQENFRAUNN2ATUBAIACPECCAAIFXW1"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": "SELECT COUNT(agency_id )\n\n\n  \nINNER JOIN (SELECT Invoices.end_date_time , end_date_time , meeting_outcome )\n\n AS ELIJAN ON EXISTS (SELECT MAX(Meetings.invoice_id ))\nINNER J"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": "SELECT COUNT(Meetings.meeting_id )\nINNER JOIN (SELECT MAX(*))\n\n  AS INTJHW8U4YVLZ6MSG7DYS5R9KAAASQUEVAHABOAT1B3NOP2MBSUVJBBAIFKKBLNSDFFETCQBEURLS0NDDSTOT"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": "SELECT MIN(sic_code )\n INNER JOIN (SELECT * FROM advertising_agencies.Agencies, advertising_agencies.Agencies) AS ADVENTRIES ON agency_id = Agencies.meeting_type INNER JOIN (SELECT * FROM advertisin"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": "SELECT COUNT(Invoices.staff_id )\nRIGHT JOIN (SELECT SUM(*))\n\n AS EZAUSYJOCSAUGOS ON Meetings.billable_yn =1 RIGHT JOIN advertising_agencies.Staff_i"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "SELECT Invoices.purpose_of_meeting WHERE EXISTS (SELECT SUM(end_date_time )\nINNER JOIN advertising_agencies.Staff AS LASELESSLY AS CITED ON Invoices.purpose_of_mee"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": "SELECT invoice_id , Invoices.purpose_of_meeting \nINNER JOIN (SELECT MAX(Meetings.agency_details )) AS TOCELBONFANZCOMGICTICSIGUILISTENOLOTISIMETYPHYDEALDIAVIT"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": "SELECT DISTINCT SUM(staff_details )\nWHERE Clients.meeting_id = 0 \n\nINNER JOIN (SELECT end_date_time , Invoices.meeting_outcome , Agencies.staff_details )\n\n AS E"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "SELECT Invoices.meeting_id , SUM(agency_details )\nINNER JOIN (SELECT AVG(*)) AS VIML1RXZ5Y9FSK3S8DNW2FQ4HB6DBA22CF7JADP3933E0A502874159901111636"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "SELECT invoice_status \nINNER JOIN (SELECT SUM(Clients.invoice_status ))\n\n AS IANEDiBjyFnVzGdHkK9QxEhP2gq1DWJv5Yw6e0ZIbmRf8o3X7bA4cC"
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "SELECT COUNT(sic_code )\nFULL JOIN (SELECT client_id , end_date_time )\n\n AS initalizedThesesInformativeCountOfAllFilesSubjailTypeOnlyIfNeededToStartWithFirstCaseCheckingNoIsHiddenJOBsOnA1andThenGetOrSetNumberOfInstancesAndProblemsForEachFileCodeWhenRunningItTestsPerUserId"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "SELECT invoice_id INNER JOIN (SELECT DISTINCT MAX(agency_id ) FROM advertising_agencies.Agencies WHERE meeting_type = 'Upper' ORDER BY Agencies.billable_yn \nLIMIT 7574222488070409717441134161436011812"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": "SELECT invoice_status , SUM(meeting_outcome )\nINNER JOIN (SELECT Invoices.invoice_status )\n\n AS tovokonka1lyakfjelkxunr4pctalh0w8zlqn3a6m5b7d9e"
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": "SELECT Invoices.end_date_time RIGHT OUTER JOIN (SELECT invoice_status )\n\n\n AS toberjatiermigliafiairaclazionaivinizarinaiologiebauvioriamstatiorendnaemasniogradiioszotomodiatimetri"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": "SELECT COUNT(Invoices.billable_yn )\nWHERE Invoices.billable_yn > invoice_id LEFT OUTER JOIN (SELECT agency_details , AVG(meeting_type ), COUNT(Invoices."
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": "SELECT other_details GROUP BY Clients.invoice_id ORDER BY Meetings.start_date_time LIMIT 31029033045431427252404204837449750490122173346131275887909219118780404716346558365723185955"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": "SELECT invoice_status INNER JOIN (SELECT COUNT(Meetings.invoice_id ))\n AS ETSLASUITVADOSHIDKANAETZFQAAOTXG2EVEATDY8B6AB7BA3DEEF1DF01854954C5AC097923672288772757"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": "SELECT invoice_status \nINNER JOIN (SELECT SUM(Agencies.payment_details )\n\n INNER JOIN advertising_agencies.Payments AS DIVESTIDASISDESSING\n  \n\n AS MULTIPLAYETEUREDAEGN"
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": "SELECT invoice_status GROUP BY Payments.invoice_details LIMIT 54900222825180917131636454627344029583037705078542414775574675715121147962664958094331975989743103560834484398876019979"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": "SELECT AVG(sic_code )\nINNER JOIN (SELECT * FROM advertising_agencies.Clients) AS CtlENID ON client_id = sic_code ;"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": "SELECT COUNT(Clients.meeting_id )"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": "SELECT other_details GROUP BY Clients.agency_id LIMIT 1 OFFSET 0;"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": "SELECT Invoices.client_id , end_date_time \nINNER JOIN (SELECT COUNT(agency_details ), Payments.end_date_time , end_date_time )\n\n AS FETTERINGIDLUDEZERPELKEDAATIHAS"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": "SELECT invoice_id , sic_code ;"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": "SELECT Clients.client_id \nINNER JOIN (SELECT * FROM advertising_agencies.Agencies) AS AGEAN1ID2ENJOSETIMALITORIES ON client_details = Clients.client_id ORDER BY Staff_in_Meetings.meeting_"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": "SELECT invoice_id , SUM(client_id ), COUNT(*)\nLIMIT 314748364726891;"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "SELECT Invoices.client_id ;"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": "SELECT AVG(sic_code )\n\n\n  \nLIMIT 467828238858321664132033273040394650443699178737012590295500149811234719157738787907457624573595"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": "SELECT Invoices.invoice_status RIGHT OUTER JOIN (SELECT Invoices.agency_id )\n\n\n AS SESHEWARDENISJUICE ON Payments.invoice_status = 0 ORDER BY Meetings.client_details , agency_deta"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": "SELECT Invoices.sic_code \nINNER JOIN (SELECT Invoices.invoice_id ) AS inVOICE ON EXISTS (SELECT * FROM (SELECT invoice_id , SUM(*)), advertising_agencies.Invoices, advertising_agencies.A"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "SELECT invoice_status , end_date_time , invoice_id , payment_id , meeting_outcome ;"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": "SELECT advertising_agencies.staff_id INNER JOIN (SELECT invoice_status ) AS NOSENIGISVEDUIAZONOVIEAICIFJEPSLIPXHALBANYUNKINDIBOUMBAHAIRSACHIMFITTAADIANASGURIETO"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": "SELECT SUM(sic_code )\nLIMIT 112312602720885725221310281400331623011546505565674329584587643917796811404218543698218819308434993759903477548387895368446976229532670722471288527355796127325490781410"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": "SELECT AVG(sic_code )\nINNER JOIN (SELECT *) AS SESCECLERTS ON sic_code = client_id INNER JOIN (SELECT COUNT(*) FROM advertising_agencies.Staff WHERE invoice_id = 'bba-beac' ORDER BY Meetings"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": "SELECT Invoices.end_date_time GROUP BY Payments.sic_code ORDER BY Clients.invoice_status LIMIT 10 OFFSET 0"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": "SELECT COUNT(Clients.purpose_of_meeting )\n INNER JOIN (SELECT AVG(*)WHERE Payments.meeting_id =31474836471913FULL OUTER JOIN advertising_agencies.Clients ON clien"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": "SELECT COUNT(Payments.staff_id )\nINNER JOIN (SELECT SUM(payment_details ))\n\n AS DORINGEDIALICJONALIZATIONURRISEVANCELAYYSENDSHOT ON Agencies.client_id > payment_i"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "SELECT advertising_agencies.meeting_id GROUP BY Clients.purpose_of_meeting ORDER BY end_date_time LIMIT 1024480108784200441467892820290683465223964233743161517041099332658115713"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": "SELECT Payments.invoice_details INNER JOIN (SELECT SUM(Agencies.purpose_of_meeting )WHERE Invoices.invoice_id \n< 1 ORDER BY Meetings.invoice_details LIMIT 2 OFFSET 31) AS"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": "SELECT Invoices.staff_id FULL JOIN (SELECT * FROM (SELECT *) INNER JOIN (SELECT other_details ) AS eftelterp1 ON client_details = 1 ORDER BY billable_yn , meeting_id LIMIT 15015048309775338906316022"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": "SELECT COUNT(Agencies.agency_details )\n\n\n INNER JOIN (SELECT COUNT(Meetings.invoice_status ))\n \n AS for ON Meetings.invoice_status <> 2 RIGHT JOIN advertising_age"
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": "SELECT Payments.sic_code INNER JOIN (SELECT SUM(Payments.purpose_of_meeting ))\n\n\n AS ELPEQ ON EXISTS (SELECT DISTINCT Payments.client_details , agency_id INNER"
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": "SELECT Invoices.sic_code INNER JOIN (SELECT Payments.purpose_of_meeting )\n\n\n AS LATEVIAHICAURISIESGARBAGEALJOBASKETUZESBONELDSITCXAMYOSAFIACRIVORUSLADIUYSIFD"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": "SELECT *\nINNER JOIN (SELECT SUM(Meetings.meeting_outcome ), MAX(*)FULL OUTER JOIN advertising_agencies.Agencies AS ECONNECTIONES ON start_date_time = Clients.billable_yn"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "SELECT COUNT(sic_code )\n\n\n INNER JOIN (SELECT SUM(*) RIGHT OUTER JOIN advertising_agencies.Agencies AS fname2rkqo6fjp1mch3c9nty5x\n\n\n  AS COUNTPENENDATESINGJ"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT *) AS PENTADIANUJAYACHARRABHATANAIDALAPENADAONTRAMASTHYGODUNDRIGETPROBOCOMMURACOLLANTIAKUMVUTEVITIMAGNELHAISAFIRILAVICAREXORBITUSPADIINESHIJAYACHARRA"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": "SELECT invoice_status , SUM(purpose_of_meeting )\n\n\n INNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN advertising_agencies.Agencies AS lauptet2acrntricepnaijoueqneatuingutciv"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": "SELECT invoice_id INNER JOIN (SELECT advertising_agencies.Agencies.billable_yn ) AS davteen1JX6Z9L8DVFfPQK0mz3C2B7e4YxOI5NwSUZXhEqkTdHgGjRv"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "SELECT Payments.agency_id \nLIMIT 3272660493936121725571833295815011137551369674819445023160988759541308535982159456486241400893212710657040346280906663258225442104286147277826932094603828251812"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": "SELECT Invoices.agency_id , sic_code , invoice_status , payment_details , payment_details , Payments.payment_details ;"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": "SELECT Invoices.purpose_of_meeting FULL JOIN (SELECT SUM(Meetings.meeting_id )FULL JOIN advertising_agencies.Payments\n\n\n AS SEALING AS BRIANESTERED ON Payments.purpo"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "SELECT invoice_status , COUNT(client_id )\n INNER JOIN (SELECT invoice_status )\n\n AS tstudlalienenigesetiszirimfelonasparbaziehteilichtjnemperaarjeuthevaanntyssedertinacadempach"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": "SELECT agency_id ;"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": "SELECT COUNT(agency_id )\n\n\n INNER JOIN (SELECT SUM(Agencies.client_id ))\n AS EENGEOYETTOVITASANJOCESKAICOSCHKIPDIMALONISHANNELLASTACBINAROMEUMENTOIDIRAILUSUMAIAAOLIAN"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "SELECT COUNT(Agencies.purpose_of_meeting )\n\n\n INNER JOIN (SELECT Payments.billable_yn , end_date_time LEFT OUTER JOIN advertising_agencies.Staff\n\n\n AS"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT * FROM advertising_agencies.Agencies) ON advertising_agencies.Agencies.billable_yn = invoice_id ;"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": "SELECT Invoices.payment_id FULL JOIN advertising_agencies.Agencies AS iLcjX7KQP6B4l1ZW0DJf5zxnHV8hMssv2T9E3uqGiUoCbOyIaRdFwY"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": "SELECT advertising_agencies.staff_details GROUP BY Payments.end_date_time LIMIT 5462"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "SELECT invoice_status INNER JOIN (SELECT MAX(Meetings.invoice_details )FULL OUTER JOIN advertising_agencies.Agencies\n\n\n AS IJZANEKALIKOVASSAVYIONORIZNENOLOOSHA"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT COUNT(Meetings.meeting_id ) AS m, Meetings.meeting_type FROM advertising_agencies.Agencies WHERE meeting_type = 'SELE' LIMIT 2)\n \n\n\n AS and ON client_details <-1;"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": "SELECT Invoices.meeting_type ORDER BY Clients.meeting_outcome LIMIT 112057013049102860872280771848405026231567347817190670981"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": "SELECT Invoices.sic_code INNER JOIN (SELECT * FROM (SELECT sic_code ) AS c1) ON billable_yn = end_date_time ORDER BY invoice_id ;"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "SELECT invoice_status \nFULL JOIN (SELECT SUM(Payments.billable_yn ))\n\n AS LYBBAQRCEAALLATVKMHAENNAHAAAMIS1GJ2D8 ON Payments.invoice_status \n<"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": "SELECT Payments.purpose_of_meeting WHERE Agencies.billable_yn > agency_details RIGHT JOIN (SELECT SUM(invoice_status ) LIMIT 1) ON client_id = 4\nRIGHT JO"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": "SELECT AVG(Agencies.invoice_details )\nINNER JOIN (SELECT SUM(*))\n\n AS PEPPERMANFJENSTEK ON EXISTS (SELECT COUNT(meeting_id )) GROUP BY meeting_id , end_date_time , meeting_type , end_date_time ,"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": "SELECT COUNT(Clients.purpose_of_meeting )\n\n\n INNER JOIN (SELECT MAX(*) LIMIT 1 OFFSET 324231248292264272066303344112638785760253979074194587177569378599554049430132106747181528"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": "SELECT AVG(sic_code )\nINNER JOIN advertising_agencies.Agencies AS bhccasid ON sic_code = end_date_time INNER JOIN advertising_agencies.Agencies ON staff_details > (SELECT In"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": "SELECT COUNT(sic_code )\n\n\n INNER JOIN (SELECT DISTINCT SUM(*) FROM advertising_agencies.Agencies, (SELECT sic_code RIGHT OUTER JOIN advertising_agencies.Staff AS BEGIN AS c"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": "SELECT COUNT(Meetings.end_date_time )INNER JOIN (SELECT Payments.end_date_time )\n\n\n   \n AS OQVHALYNDAMENDEDEZATJOLCIEAUNDAAHAELDEKFETESONITUAYOIISR"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": "SELECT invoice_status \nINNER JOIN (SELECT DISTINCT SUM(Clients.end_date_time ))\n\n AS CUTAENDIAHGATBOTTAKITARAKESCHEISZAGSIANONIKELiNQOSFOBLIYJOBINDSALPILMURU"
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "SELECT COUNT(invoice_id )INNER JOIN (SELECT COUNT(invoice_id ))\n\n\n AS with ON Staff.client_details = 0FULL OUTER JOIN advertising_agencies.Agencies ON sic_code > 1;"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": "SELECT Meetings.meeting_id \nINNER JOIN (SELECT MAX(Agencies.invoice_details )\n\n INNER JOIN advertising_agencies.Invoices AS euoviniklemaeldedoradit \n\n AS VOLENTASOIOSA"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": "SELECT SUM(sic_code )\n\n\n INNER JOIN (SELECT Payments.purpose_of_meeting , Meetings.payment_id RIGHT OUTER JOIN advertising_agencies.Payments AS GITKOLA\n\n\n"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "SELECT COUNT(Meetings.meeting_id )INNER JOIN (SELECT SUM(*))\n\n\n AS FORRESTYHORTHIC ON EXISTS (SELECT * FROM advertising_agencies.Agencies) ORDER BY Payments.payment_id ;"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": "SELECT AVG(Agencies.invoice_id )\nINNER JOIN (SELECT SUM(agency_id ))\n\n AS HARDFUCKYZENSTEINGHAGANDAIDISTAEDIAJOEOPASSARAMADORAASAFBELGRV2D3DFKSEGGOLI5P9C4XQR6"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": "SELECT COUNT(sic_code )\nRIGHT OUTER JOIN (SELECT COUNT(sic_code )\nGROUP BY Staff.staff_details , invoice_id \n\nORDER BY Meetings.billable_yn LIMIT 0) AS ROGERJO"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": "SELECT Payments.purpose_of_meeting FULL OUTER JOIN (SELECT MAX(Meetings.staff_id ), SUM(Agencies.purpose_of_meeting )\n\n\n LIMIT 1) AS MEETTING O"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": "SELECT Invoices.invoice_id , invoice_id ;"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": "SELECT agency_id , client_id , end_date_time , end_date_time , payment_id , other_details , other_details ;"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": "SELECT Invoices.sic_code , Staff.agency_details ;"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": "SELECT invoice_status \nINNER JOIN (SELECT SUM(Agencies.meeting_id ))\n\n AS MEETTEDONi3YXD2HW5xlB1c6oPqFdQjnEa9ybGZK8LNfJhkIwVpv4Uu"
  }
]