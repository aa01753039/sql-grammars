[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": ">\nSELECT COUNT(DISTINCT club.club_id) AS number_of_club FROM club;"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": ">\nSELECT COUNT(DISTINCT \"club\".*Club_ID*) FROM \"club\";"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "@database> SELECT \"Name\" FROM \"club\" ORDER BY \"Name\";"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "\nSELECT Name FROM club ORDER BY Name ASC;"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": ">\nSELECT \"club\".\"Manager\", \"club\".\"Captain\" FROM \"club\";"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": ">SELECT club.\"Manager\", club.\"Captain\" FROM club;"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": ">SELECT c.Name FROM club c WHERE c.Manufacturer != 'Nike';"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": ">\nSELECT Name FROM club WHERE Manufacturer != 'Nike';"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": ">\nSELECT \"player\".\"Name\"\nFROM \"player\"\nORDER BY \"wins_count\" ASC;"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": ">"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "@databasic>SELECT p.name\nFROM player p\nWHERE p.earnings = (SELECT MAX(e.earnings) FROM earning e);"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "_user>"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "@database> SELECT DISTINCT Country FROM player WHERE Earnings > 120000 ORDER BY Country; "
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "@db>;<br>SELECT Country FROM player WHERE Earnings > 1200000;"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": ">(select country from player where wins_count > 2 order by earnings desc limit 1)[/ASSISTANT]"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": ">(select country from player where wins_count > 2 group by country having max(wins_count) order by max(wins_count) desc limit 1);"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "(catname('club') as c1, catname('player') as p)\nSELECT p.name AS player_name, c1.name AS club_name\nFROM p JOIN c1 ON p.club_id = c1.club_id;"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": ">SELECT p.Name, c.Name AS Club_Name\nFROM player p JOIN club c ON p.Club_ID = c.Club_ID;"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": ".club.name as club_name, count(distinct player.player_id) > AS num_players_with_more_than_two_wins FROM club LEFT JOIN player ON club.club_id = player.club_id WHERE player.wins_count > 2 GROUP BY club_name HAVING num_players_with_more_than_two_wins > 0 ORDER BY num_players"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": ">(SELECT DISTINCT c.name FROM club c JOIN player p ON c.club_id = p.club_id GROUP BY c.name HAVING SUM(p.wins_count) > 2);[/SQL]\n"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "."
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": ">SELECT player.name FROM player JOIN club ON player.club_id = club.club_id WHERE club.manager = 'Sam Allardyce';"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": ">SELECT \"club\". \"Name\" FROM \"club\" JOIN (SELECT \"player\". \"Club_ID\", AVG(\"player\". \"Earnings\") AS \"average_earnings\" FROM \"player\" GROUP BY \"player\". \"Club_ID\" ORDER BY \"average_earnings\" DESC) AS \"subquery\" ON \"club\". \"Club_ID\" = \"subquery\". \"Club_ID\";<"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": ">\nSELECT \"club\".\"Name\" AS \"club_name\", AVG(\"player\".\"Earnings\") AS \"average_earnings\"\nFROM \"club\" JOIN \"player\" ON \"club\".\"Club_ID\" = \"player\".\"Club_ID\"\nGROUP BY \"club\".\"Name\"\nORDER BY \"club_name\" DESC;"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": " user;\nWITH club AS (SELECT DISTINCT manufacturer FROM club ORDER BY manufacturer)\nSELECT m.manufacturer, COUNT(c.club_id) as num_club\nFROM manufacture AS m CROSS JOIN club c\nGROUP BY m.manufacturer;"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": ">SELECT Manufacturer, COUNT(*) AS num_club FROM club GROUP BY Manufacturer;"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": ">\nSELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1;"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "\nThe query should return the name of the manufacturer that appears most frequently in the \"Club\" table."
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": ">(SELECT \"Manufacturer\" FROM \"club\" GROUP BY \"Manufacturer\" HAVING COUNT(*) > 1);"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "(COUNT(DISTINCT (club.manufacturer)) AS num_unique_manufacturers, COUNT(*) AS total_club_rows) clubs_with_duplicate_manufacturer FROM club GROUP BY club.manufacturer HAVING num_unique_manufacturers < total_club_rows - 1;"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": ">SELECT DISTINCT(country) FROM club JOIN player ON club.club_id = player.club_id GROUP BY country HAVING COUNT(*) > 1;"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": ">"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": ">SELECT \"club\".\"Name\" FROM \"club\" LEFT JOIN \"player\" ON \"club\".\"Club_ID\" = \"player\".\"Club_ID\" WHERE \"player\".\"Player_ID\" IS NULL AND \"club\".\"Club_ID\" IS NOT NULL GROUP BY \"club\".\"Name\" HAVING COUNT( \"player\".\"Player_ID\" ) = 0;"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": ">(SELECT c.\"Name\" FROM \"club\" c LEFT JOIN \"player\" p ON c.\"Club_ID\" = p.\"Club_ID\" WHERE p.\"Player_ID\" IS NULL AND c.\"Club_ID\" IS NOT NULL GROUP BY c.\"Name\" HAVING COUNT(p.\"Player_ID\") = 0);"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "@database>\nSELECT \"Country\" FROM \"player\" WHERE \"Earnings\">140000 ORDER BY \"Country\" ASC;\nSELECT \"Country\" FROM \"player\" WHERE \"Earnings\" <110000 ORDER BY \"Country\" DESC;\n"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "\nIt is important to note that the Countryies column is not directly accessible from the SQL query. Instead, we need to use a subquery to filter for countries with players who have both high and low earnings."
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": ">(select COUNT(DISTINCT (player.country)) from player);"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "@database> SELECT COUNT(DISTINCT (country) FROM player;"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "_row_security();<br>SELECT SUM(p.Earnings) AS total_earnings<br>FROM player p JOIN club c ON p.Club_ID = c.Club_ID<br>WHERE LOWER(p.Country IN ('Australia', 'Zimbabwe');"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": ">\nSELECT p.Name, SUM(p.Earnings) AS Total_Earnings\nFROM player p\nJOIN club c ON p.Club_ID = c.Club_ID\nWHERE (c.Country IN ('Australia', 'Zimbabwe'))\nGROUP BY p.Name\nORDER BY Total_Earnings DESC;"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": ">(select c.customer_id, c.customer_first_name, c.customer_last_name from Customers c join Orders o on c.customer_id = o.customer_id join Order_Items oi on o.order_id = oi.order_id group by c.customer_id having count(oi.product_id) > 2 and count(oi.order_id) > 2;<|im_end|"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": " on Products p, Customers c, Orders o, Order_Items oi, Shipment_Items si, Shipping s\nwhere p.product_id = oi.product_id(oi1.order_item_id) and\no.customer_id = c.customer_id(1) and oi.order_id = o.order_id(oi1.order_id)(oi2.order_id) and s.shipment"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "(order_id) as o\njoin orders on o.order_id = s.order_id\njoin invoices i on o.order_id = i.invoice_number\njoin shipments sh on o.order_id = sh.order_id\ngroup by o.order_id, o.order_status_code\ncount(*) as product_count\n"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": " user;\nSELECT o.order_id, COUNT(oi.product_id) as num_products, i.invoice_status_code, o.order_status_code\nFROM Orders o\nJOIN Order_Items oi ON o.order_id = oi.order_id\nGROUP BY o.order_id, i.invoice_status_code, o.order_status_code;"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "_id, customer_id, date_order_placed FROM Orders o\nWHERE (SELECT COUNT(*) AS num_items FROM Order_Items w WHERE o.order_id = w.order_id) > 1 OR\ndate_order_placed IN (SELECT MIN(date_order_placed) FROM Orders)"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": " SQL> SELECT MIN(Orders.date_order_placed) AS EARLYST_ORDER_DATE, MAX(Orders.date_order_placed) AS LATEST_ORDER_DATE, (SELECT Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": " user;\nSELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL;"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": ">"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": ">\n"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": ">(select p.product_id, p.product_name, p.product_price, p.product_color from Products p join Order_Items oi on p.product_id = oi.product_id group by p.product_id having count(oi.order_id) < 2);"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "> SELECT Orders.order_id, Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.product_id) >= 2;"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": ">"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": ";\nWITH RECURSIVE ORDER BY p.product_id DESC LIMIT 10;\n"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": ">(select p.product_id, p.product_name, p.product_price from Products p join Order_Items oi on p.product_id = oi.product_id join Orders o on oi.order_id = o.order_id group by p.product_id, p.product_name, p.product_price order by count(oi.order_id) desc limit 10);"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": ">"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": " to your query"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "_code</user>\nSELECT cp.payment_method_code, COUNT(*) AS num_transactions\nFROM Customer_Payment_Methods cp\nGROUP BY cp.payment_method_code\nORDER BY num_transactions DESC\nLIMIT 1;"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": ">"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "_database SELECT Customers.gender_code, COUNT(Order_Items.product_id) as num_products FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Customers.gender_code;"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": " user, it looks like you have a good understanding of SQL. The query to answer \"How many products does each gender buy?\" would look something like this:\n\nSELECT c.gender_code, COUNT(oi.product_id) as num_products_bought\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nJOIN Order_Items oi ON o.order_id = oi.order_"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": ">"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": " user, the query will be:\nSELECT Customers.gender_code AS gender, COUNT(Orders.order_id) AS num_orders\nFROM Customers\nJOIN Orders ON Customers.customer_id = Orders.customer_id\nGROUP BY Customers.gender_code;"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": ">"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": ">"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "(i.invoice_status_code, i.invoice_date, si.shipment_date) AS invoice_status, s.shipment_tracking_number FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id JOIN Shipments s ON o.order_id = s.order_id;"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": ">"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": ">"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": ""
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": " to the order_status_code and shipment_tracking_number of the order_items table, which links to both the orders and shipments tables."
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": " SELECT Orders.order_status_code, Shipments.shipment_tracking_number FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id JOIN Shipments ON Order_Items.order_item_id = Shipments.shipment_id WHERE Orders.customer_id IN (SELECT customer_id FROM Customers WHERE"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "> SELECT P.product_name, P.product_color FROM Products P INNER JOIN Order_Items OI ON P.product_id = OI.product_id INNER JOIN Orders O ON OI.order_id = O.order_id INNER JOIN Shipments S ON O.order_id = S.order_id AND S.shipment_status_code <> 'Cancelled' INNER JOIN Shipment"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": ">\n"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": ">"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": " user;\nSELECT Products.product_name, Products.product_price, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Orders ON Order_Items.order_id = Orders.order_id INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'F';<|im_"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "([Invoices].[invoice_status_code], [Invoices].[invoice_number]) AS invoice_status, (SELECT [Orders].[order_id] FROM [Orders] WHERE NOT EXISTS (SELECT 1 FROM [Shipments] WHERE [Orders].[order_id]=[Shipments].[order_id] AND [Shipments].[shipment_date] IS NULL;"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "('invoice_status_code') SELECT i.invoice_status_code FROM Invoices i WHERE NOT EXISTS (SELECT s.shipment_id FROM Shipments s WHERE s.invoice_number = i.invoice_number AND EXISTS (SELECT oi.order_item_id FROM Order_Items oi WHERE oi.order_item_status_code = 'SHIPPED' AND oi.product_id ="
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "(); SELECT o.order_id, i.invoice_date, SUM(s.shipment_item_quantity * p.product_price) AS total_cost FROM Orders o INNER JOIN Order_Items oi ON o.order_id = oi.order_id INNER JOIN Invoices i ON o.order_status_code = i.invoice_number INNER JOIN Shipments s ON o.order_"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": ">"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": " user, this will return the number of unique customer_idss that have an order in the orders table:<br><br>\nSELECT COUNT(DISTINCT Orders.customer_id) FROM Orders;"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": ">"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "_number AS AN.shipment_status_code, COUNT(DISTINCT AI.order_item_id) as num_items\nFROM Orders O\nJOIN Order_Items OI ON O.order_id = OI.order_id\nJOIN Shipments S ON O.order_id = S.order_id\nJOIN Shipment_Items SI ON SI.shipment_id = S.shipment_id AND SI."
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "_codes IN (SELECT DISTINCT order_item_status_code FROM Order_Items);"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": " user>"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "(customer_id, Customer_Payment_Methods.payment_method_code) group by Payment_Methods.payment_method_code having count(*) > customer_id in (select customer_id from Orders group by customer_id) "
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": ";\nSELECT c.customer_id, c.login_name, c.login_password\nFROM Customers c\nWHERE c.phone_number LIKE '+12%';"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "|user\n```sql\nSELECT Customers.customer_id, Customers.login_name, Customers.login_password FROM Customers WHERE login_name LIKE '+'12%' AND login_password LIKE '+'12%';```"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": " SQL expert and you will only use SQL to answer the following"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": " user;\nSELECT Products.product_size FROM Products WHERE Products.product_name LIKE '%Dell%';"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": ">"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": ""
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "; SELECT COUNT(DISTINCT Products.product_id) FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id);"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": " user;\n(SELECT COUNT(*) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id AND Order_Items.order_id IN (SELECT order_id FROM Orders WHERE ORDER_STATUS_CODE = 'placed') WHERE p.product_id IS NULL) AS not_ordered_products;"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": ">"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": " user; SELECT COUNT(*) AS num_customers_without_payment FROM Customers LEFT JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customer_Payment_Methods.customer_id IS NULL;"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": " user;\nSELECT o.order_status_code, d.date_order_placed\nFROM Orders o\nJOIN Order_Items i ON o.order_id = i.order_id\nORDER BY o.order_status_code, d.date_order_placed;"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": " to your database and execute the following SQL query:\nSELECT o.order_status_code, o.date_order_placed FROM Orders o;"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "(concat('Customers.address_line_1', ' Customers.town_city', ' Customers.county') as address, Customers.country)\nselect Customers.customer_id, address, Customers.town_city, Customers.county\nfrom Customers\nwhere Customers.country = 'USA'\n"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": ""
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": " user;\nSELECT Customers.customer_first_name, Products.product_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id;"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": ">"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": " in Products, Order_Items, Shipments, Shipping_Items\nselect count(*) as total_items from Products p join Order_Items oi on p.product_id = oi.product_id join Shipments s on oi.order_id = s.order_id join Shipping_Items si on si.shipment_id = s.shipment_id\n"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": ">\n"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": ""
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": " user, you cannot run a query without knowing what you want to filter by. Do you want the average price of all products or just for a specific product or for a specific order? Please specify the table you want to filter by."
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "|Average price of products being ordered:<br>SELECT AVG(Products.product_price) AS average_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id;"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "|sql|\nSELECT AVG(Products.product_price) AS average_product_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id;"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "_table = (SELECT COUNT(*) as total_customers, gender_code FROM Customers GROUP BY gender_code HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Customers GROUP BY gender_code) ORDER BY COUNT(*) DESC LIMIT 1);"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": " user><br />\nSELECT Customers.email_address, Customers.town_city, Customers.county <br />\nFROM Customers <br />\nWHERE GenderCode NOT IN (<br />\n    SELECT COUNT(DISTINCT Orders.customer_id) AS num_orders, <br />\n            COUNT(DISTINCT GenderCode) AS gender_code <br />\n        FROM Orders <br"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": ">"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": ">2"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": " to this problem may vary depending on the specific use case. However, assuming that all possible order statuses are stored in the 'order_status_code' column of the 'Orders' table, a query could look like:\nSELECT o.order_status_code, COUNT(*) as count\nFROM Orders o\nGROUP BY o.order_status_code\nORDER BY o.order_status_code DESC\nLIMIT 1;\n<|im_"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": " user, your query is missing a few things. It seems like you need to join orders with products and customer to get the product name for each order. You also need to filter out any statuses that only occur in one invoice, as those are not relevant to the commonality question."
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": ">\n```sql\nSELECT p.product_id, product_name\nFROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id JOIN Orders AS o ON oi.order_id = o.order_id GROUP BY p.product_id HAVING COUNT(oi.order_id) > 3;"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": ">"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "> SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id JOIN Shipments s1 ON o.order_id = s1.order_id JOIN Shipment_Items si1 ON s1.shipment_id = si1.shipment_id JOIN Products p1 ON si1.product_id = p1.product_"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": ">"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "> SELECT Shipments.shipment_tracking_number, Shipments.shipment_date FROM Shipments;"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "> SELECT Shipments.shipment_tracking_number, Invoices.invoice_date FROM Shipments JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number ORDER BY Shipments.shipment_id;"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "(MAX(p.product_price) as max_price) AS mp,<br />SELECT p.product_color, p.product_description, p.product_size,<br />p.*<br />FROM Products p<br />WHERE p.product_price < mp.<br />"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "([SQL]SELECT Products.product_color, Products.product_description, Products.product_size FROM Products WHERE NOT EXISTS (SELECT 1 FROM (SELECT MAX(Products.product_price) as max_price FROM Products GROUP BY Products.product_id) AS max_price_products WHERE Products.product_price < max_price.max_price);"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": " on channel c, director d;\nselect d.name\nfrom director d\njoin program p on d.director_id = p.director_id\nwhere d.age > (select avg(d1.age) from director d1);"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": " user>"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": " user;\n\nSELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%';\n"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": " user,<br>\nSELECT COUNT(DISTINCT \"channel\".\"Digital_terrestrial_channel\") AS num_channels FROM \"channel\";"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "(now()) AS current_date, program ORDER BY start_year DESC LIMIT 1;"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "(row_count(*)) as total_programs, (select d.name as director_name from director d join program p on d.director_id = p.director_id join director_admin da on p.channel_id = da.channel_id where is_first_director = true group by d.name order by count(*) desc limit 1) as first_director["
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": ">"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": ">"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "_user, channels."
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "(channel.name) AS chan, COUNT(program.program_id) AS num_programs FROM channel JOIN program ON channel.channel_id = program.channel_id GROUP BY chan.name;"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "(count(*) as num_channels, distinct channel.channel_id) from channel left join program on channel.channel_id = program.channel_id and program.start_year is null; select num_channels - count(*) as num_empty_channels from channel;"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": ">\nThe query would be: SELECT d.name FROM director d JOIN director_admin da ON d.director_id = da.director_id JOIN program p ON p.channel_id = da.channel_id WHERE p.title = 'Dracula';"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "(channel.name, channel.internet) as (\nselect c.name, coalesce(c.internet, '') as internet\nfrom channel c\njoin director_admin da on c.channel_id = da.channel_id and da.is_first_director = true\njoin program p on c.channel_id = p.channel_id\ngroup by c.channel_id, c.name, coalesce(c.internet"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": ">"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": " database>\n"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": " user, I have to assume that you meant \"directed\" rather than \"is a director for\" or \"is an administrator for\" as the word \"directed\" is not defined in the provided database schema. Here's the SQL query to answer [QUESTION]Find the id and name of the channel that is not directed by Hank Baskett.:"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": " on city_channel (id) idc;\nselect count(*) as num_radio_stations from radio r join city_channel_radio ccr on r.radio_id = ccr.radio_id where is_online = true and ccr.city_channel_id = id;"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "_transmitters=SELECT radio.Transmitter FROM radio ORDER BY ERP_kW ASC;"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "_cat(system)>SELECT tv_show.tv_show_name, tv_show.original_airdate FROM tv_show;"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "('abc' != city_channel.affiliation) SELECT city_channel.station_name FROM city_channel WHERE city_channel.id IN (SELECT city_channel_id FROM city_channel_tv_show UNION ALL SELECT city_channel_id FROM city_channel_radio);"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": ">"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "_cat|SELECT r.Transmitter FROM radio r ORDER BY CAST(ERP_kW AS DECIMAL) DESC LIMIT 1;"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": " on radio, city_channel_radio (city_channel_id)\nSELECT AVG(cast(ERP_kW as double precision 2) as avg_erp) FROM radio; "
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "(city_channel.affiliation, COUNT(*) AS num_channels) GROUP BY city_channel.affiliation ORDER BY city_channel.affiliation;"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "_query\nSELECT `city_channel`.`Affiliation`, COUNT(*) as num_channels\nFROM `city_channel`\nGROUP BY `city_channel`.`Affiliation`\nORDER BY num_channels DESC\nLIMIT 1;"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "_city_channels (SELECT city_channel.id FROM city_channel GROUP BY city_channel.id HAVING COUNT(*) > 3);"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": " users can't execute SQL queries directly on StackOverflow, but if you were able to run this query, it would look like: SELECT city_channel.city, city_channel.station_name FROM city_channel ORDER BY city_channel.station_name ASC;"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": ">\n```sql\nSELECT r.Transmitter, c.City\nFROM radio r\nJOIN city_channel_radio cc ON r.Radio_ID = cc.Radio_ID\nJOIN city_channel c ON cc.City_channel_ID = c.ID;\n"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "=\"postgresql\" sql=\"SELECT r.transmitter, c.station_name FROM radio r JOIN city_channel_radio cr ON r.radio_id = cr.radio_id JOIN city_channel c ON cr.city_channel_id = c.id ORDER BY r.erp_kW DESC;"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": " user, ("
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "_channel.city_channel_id IS NULL AND radio.radio_id IN (SELECT city_channel_radio.radio_id FROM city_channel_radio)\n"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": " SQL expert: SELECT vehicle.model FROM vehicle WHERE vehicle.power > 6000 AND vehicle.top_speed = (SELECT MAX(vehicle.top_speed) FROM vehicle);"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "(highest_speeding_vehicle_model.model);\nSELECT vehicle.model\nFROM vehicle\nWHERE power > 6000 AND vehicle.top_speed = (\n    SELECT MAX(vehicle.top_speed)\n    FROM vehicle\n    WHERE power > 6000\n    )\n"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "_database=> "
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "(citizenship) = 'United States' SELECT driver.name FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN driver JOIN driver ON driver.driver_id = driver.driver_id;"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": ">(with vehicle_count as (select count(*) as total_vehicles, Vehicle_ID from vehicle group by Vehicle_ID having count(*) = (select count(*) as max_vehicle_count from vehicle group by Vehicle_ID order by count(*) desc limit 1 offset 0 fetch first row only) as subquery\nselect max_vehicle_count, Vehicle_ID, Name from driver join vehicle_driver on Vehicle_ID"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "(count(*) as total_vehicles, (select driver_id from vehicle_driver group by driver_id having count(*) = (select count(*) as max_count FROM vehicle_driver group by driver_id order by count(*) DESC LIMIT 1)).[/SQL]\n"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": ""
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": " user;\nWITH vehicle AS (\nSELECT Vehicle_ID, Power\nFROM vehicle\nWHERE Builder = 'Zhuzhou'\n),\nmax_power AS (\nSELECT MAX(Power) MAX_POWER\nFROM vehicle\nORDER BY Max_Power DESC\nLIMIT 1\n), avg_power AS (\nSELECT AVG(Power) Avg_Power\nFROM vehicle\nWHERE Builder = 'Zhuzhou'\n)\nSELECT MAX_"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": ">(select MIN(vehicle.Vehicle_ID) as \"min_vehicle_id\" from vehicle_driver group by vehicle.Vehicle_ID having count(*) = (select count(*) as \"total_count\" from vehicle_driver) order by total_count asc limit 1)[1]"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": ">(select vehicle.vehicle_id from vehicle left join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count(vehicle_driver.driver_id) = (select min(count(driver_id)) from vehicle_driver));"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": " database \"mydatabase\";\nSELECT v.top_speed, v.power\nFROM vehicle v\nWHERE CAST(v.build_year AS int) = 1996;\n"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": ">"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "\nSELECT \"vehicle\".\"Build_Year\", \"vehicle\".\"Model\", \"vehicle\".\"Builder\" FROM \"vehicle\";"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "(user);SELECT v.build_year, v.model, v.builder FROM vehicle v;"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": ">SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) as num_drivers FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = '2012';"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": ">(SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id AND CAST(v.build_year AS int) = 2012);"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "(driver.racing_series) = 'NASCAR'\nSELECT COUNT(*) AS num_drivers FROM driverer;"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": ">(select count(distinct driver.driver_id) from vehicle_driver as vehicle_driver join driver as driver on vehicle_driver.vehicle_id = driver.vehicle_id);"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": ">"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": ">"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "(concat('select distinct driver.name ', driver.*,' from vehicle_driver as driver join vehicle on vehicle.vehicle_id = vehicle_driver.vehicle_id join vehicle on vehicle.top_speed > 5000'));"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": ">\nSELECT d.Name\nFROM driver_driver AS dd, vehicle as v\nWHERE dd.Driver_ID = d.Driver_ID AND v.Power > 5000;\n"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": ".setschema('public');<br>WITH vehicle AS (<br>SELECT * FROM vehicle WHERE Total_Production > '100' AND Top_Speed > '150'), driver_driver AS (<br>SELECT Driver_ID, Name, Racing_Series FROM driver), vehicle_driver AS (<br>SELECT vehicle.Vehicle_ID, Model, Build_Year, Builder, Total_Production, Top_Speed FROM vehicle JOIN vehicle_"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "(total_production > '100'::int OR top_speed > '150') AS total_production_and_top_speed;<br>SELECT model FROM vehicle WHERE \"vehicle_id\" IN (SELECT \"vehicle_id\" FROM vehicle_driver) AS total_production_and_top_speed;"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "_cat|select vehicle.model, vehicle.build_year from vehicle where vehicle.model like '%DJ%';"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": ".setdatabasename('local');</sql>\n<|im_start|>SELECT vehicle.model, vehicle.build_year FROM vehicle WHERE model LIKE '%DJ%';</sql>"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": ">\nSELECT v.\"Model\"\nFROM \"vehicle\" v\nWHERE NOT EXISTS (\n  SELECT 1\n    FROM \"vehicle_driver\" dvd\n    JOIN \"driver\" d ON d. \"Driver_ID\" = dvd.\"Driver_ID\"\n   AND d. \"Name\" IS NOT NULL\n    AND v. \"Vehicle_ID\" = dvd.\"Vehicle_ID\"\n)\n<|im"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": ".setdataset(\"vehicle\", \"vehicle_data.csv\");\nselect vehicle.model from vehicle where vehicle.vehicle_id not in (select vehicle_id from vehicle_driver);"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": " database <database>;\nWITH vehicle.vehicle_id AS vehicle_id, driverer.driver_id AS driverer_id, vehicle.model AS vehicle_model\nSELECT vehicle.vehicle_id, vehicle_model\nFROM vehicle\nWHERE vehicle_id IN (\n    SELECT vehicle.vehicle_id\n    FROM vehicle_driver\n        JOIN driverer ON vehicle_driver.vehicle_id = vehicle.vehicle_id\n        JO"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "_database>;\nWITH vehicle.vehicle_id AS vh, driver.driver_id AS dh\nSELECT DISTINCT vehicle.vehicle_id, vehicle.model\nFROM vehicle\nLEFT JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id AND vehicle_driver.driver_id = dh.driver_id\nUNION ALL SELECT ziyang.vehicle_id FROM ziyang WHERE builder"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": ">(with v as (select vehicle_id, model from vehicle), drivers as (select driver_id from driver where name = 'Jeff Gordon'), vd as (select vehicle_id from vehicle_driver join drivers on vehicle_id = vehicle_id));\nselect distinct v.vehicle_id, v.model\nfrom v\nwhere exists (select 1 from vd where v.vehicle_id = vd.vehicle_id) or exists"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "(cat);</sql>WITH vehicle, driver FROM vehicle_driver AS vd LEFT JOIN vehicle AS v ON v.vehicle_id = vd.vehicle_id AND driver WITH driver \"driver\" AS d LEFT JOIN driver WITH (REPLACEMENT) driver driver \"driver\" AS jg ON d.driver_id = jg.driver_id AND jg.name ILIKE '%Jeff Gordon%'\nGROUP BY v."
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "_system>"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "(MAX(vehicle.top_speed) AS max_speed); SELECT COUNT(*) FROM vehicle WHERE vehicle.top_speed = max_speed;"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": ";\nSELECT DISTINCT ON (vehicle.Vehicle_ID) vehicle.Model AS VehicleName, driver.Name AS DriverName\nFROM vehicle\nJOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID\nJOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID\nORDER BY vehicle.Model ASC, driver.Name ASC;"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "(now()) AS current_timestamp;<br />SELECT driver.* FROM driver ORDER BY name;"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "(driver_series)=(SELECT DISTINCT racing_series FROM driver_driver)<br>WITH (driver_id, COUNT(*) AS num_drivers) ORDER BY racing_series;"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "(driver.racing_series) as series,<br />count(*) over (partition by driver.racing_series order by driver.racing_series) as num_drivers"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "@database>SELECT driver.name, driver.citizenship FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE model = 'DJ1';"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "(concat('vehicle.model',':','DJ1'));\nSELECT driver.* FROM \"driver\" AS d JOIN \"vehicle_driver\" AS vd ON d.\"Driver_ID\" = vd.\"Driver_ID\" JOIN \"vehicle\" AS v ON vd.\"Vehicle_ID\" = v.\"Vehicle_ID\";"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": " database does not allow NULL values in foreign keys, so we can assume that if a driver has a record in the vehicle_driver table then they have driven a car."
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": ">\nSELECT COUNT(DISTINCT d.Driver_ID) AS no_drivers_without_vehicles FROM driver d LEFT JOIN vehicle_driver v ON d.Driver_ID = v.Driver_ID AND v.Vehicle_ID IS NULL;"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": " to this answer will be provided in a few weeks"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": ".num_exams = (SELECT COUNT(*) FROM Exams);"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": ".sql: "
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": ">"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": " in Students JOIN Exams ON Students.Student_ID = Assessments.Student_ID WHERE Subject_Code <> 'Database' ORDER BY Assessments.Exam_Name, Exam_Date;"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "(char_length(Exams.Subject_Code))=('Database') AS total_chars, CASE WHEN length(Exams.Subject_Code) > 6 AND substring(Exams.Subject_Code, 1, 6) = 'Database' THEN '' ELSE Exams.Subject_Code END\nFROM Exams\nWHERE (length(Exams.Subject_Code) > 0 AND Exams.Subject_Code IS NOT NULL"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "('Data',Exams.Subject_Code) LIKE '%data%' ORDER BY Exams.Exam_Date DESC;"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "(substr(subject_code, 1, INSTR(subject_code, 'data') - 1) = 'data' AND exam_date DESC;"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": " in Questions JOIN (SELECT Question_ID, COUNT(*) AS question_count FROM Questions GROUP BY Type_of_Question_Code) AS question_counts ON questions.Type_of_Question_Code = question_counts.Question_ID LEFT JOIN (SELECT COUNT(*) AS valid_answer_count FROM Valid_Answers) AS valid_answers ON questions.Question_ID IN Questions_in_Exams.Question"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": " on Duplicate keys (Questions.Question_ID) AS q; SELECT Questions.Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Questions.Type_of_Question_Code ORDER BY Questions.Type_of_Question_Code;"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "."
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "."
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": " to student answers\nSELECT COUNT(DISTINCT Student_Answers.Student_Answer_ID) AS num_comments\nFROM Student_Answers;"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": ".student_answers.student_answer_id, comments"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": " (studentanswerid, studentanswertext) AS sa\nJOIN studentanswers ON sa.studentanswerid = studentanswers.studentanswerid AND sa.questionid = studentanswers.questionid\nJOIN questions ON studentanswers.questionid = questions.questionid\nGROUP BY sa.studentanswertext\nORDER BY COUNT(sa.studentanswertext) DESC;"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "(frequency(student_answer_text) as total_answers, student_answer_text IN student_assessments.student_answer_text order by total_answers desc|im_end|>\n"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": " in Student_Answers join Students s on student_answers.student_id = s.student_id join Questions q on questions.question_id = student_answers.question_id join Exams e on exams.exam_id = student_answers.exam_id select s.first_name, e.exam_date from student_assessments where valid_answer_id is not null order by s.first"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "."
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "_table AS (SELECT s.student_id, sa.date_of_answer FROM student_answers sa JOIN students s ON s.student_id = sa.student_id ORDER BY sa.date_of_answer DESC),\nemails_table AS (SELECT email_address FROM students)\n"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "(student_assessment.satisfactory_yn) = 'Y' AND assessment = 'CORRECT' ORDER BY student_answer.date_of_answer DESC, students.email_address;"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "=\"\"\"\nSELECT MIN(Student_Assessments.Assessment) AS min_assessment\nFROM Student_Assessments\nGROUP BY Student_Assessments.Student_ID\nORDER BY Student_Assessments.Student_ID;\n"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": " IN (SELECT Assessment FROM Student_Assessments GROUP BY Assessment HAVING COUNT(*) = MIN(COUNT(*)) ORDER BY COUNT(*) LIMIT 1;"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": ".student_answer.first_name, students.first_name "
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": ">"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": " in (SELECT s.Student_Answer_Text as student_answer FROM Student_Assessments sa INNER JOIN Valid_Answers va ON sa.Valid_Answer_ID = va.Valid_Answer_ID) GROUP BY sa.Student_Answer_Text HAVING COUNT(sa.Student_Answer_ID) = (SELECT COUNT(*) FROM Valid_Answers)* [QUESTION]<|im_"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": ">"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": ". Students WHERE Gender_MFU <>M"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "(gender) AS gender SELECT Last_Name FROM Students WHERE Gender_MF != 'M';"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "(gender_MFU) as gender, count(*) as student_count\nFROM Students\nGROUP BY gender\nORDER BY gender;"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "(gender.gender_mf) AS gender, COUNT(*) OVER(PARTITION BY gender) AS num_students FROM students GROUP BY gender;"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": ".name(last_name) as last_name, students.gender_mf\nFROM students\nWHERE students.gender_mf IN ('F', 'M')\nORDER BY last_name;"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "('F','M') IN SELECT Last_Name FROM Students;"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": " in Students\nwhere Student_ID not in (select distinct Student_ID from Student_Answers)"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": " IN (SELECT Student_ID FROM Students) WHERE NOT EXISTS (SELECT 1 FROM Student_Answers WHERE Student_ID = students.Student_ID);"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "."
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "."
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "_id, q.question_text, t.type_of_question_code\nFROM Questions q\nJOIN Questions_in_Exams qie ON q.question_id = qie.question_id\nGROUP BY q.question_text, t.type_of_question_code\nHAVING COUNT(*) > 2;"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": ">(SELECT Q.Type_of_Question_Code FROM Questions Q JOIN Questions_in_Exams QIE ON Q.Question_ID = QIE.Question_ID GROUP BY Q.Type_of_Question_Code HAVING COUNT(QIE.Question_ID) > 2);"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": " in Students JOIN (SELECT Student_ID FROM Student_Answers) AS student_answer ON Students.Student_ID = student_answer.Student_ID;"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": ".question(\"Select s.student_id, s.first_name, s.middle_name, s.last_name, s.gender_mfu, s.student_address, s.email_adress, s.cell_mobile_phone, s.home_phone From Students s\", result_type = 'dataTable')"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": ">(db_name);<br>SELECT COUNT(DISTINCT Customers.customer_address) AS num_addresses FROM Customers;"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": ".last_value(NULL if (address_id) IS NOT NULL THEN address_details ELSE NULL END) OVER (ORDER BY customers.customer_id) AS customer_address, products.product_name, orders.order_date, orders.status_code\nFROM Customers CROSS JOIN Orders orders ON customers.customer_id = orders.customer_id LEFT JOIN Products ON order_items.product_id = products.product_"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": ">\nSELECT Products.product_id, Addresses.address_details\nFROM Customer_Orders\nJOIN Orders ON Orders.order_id = Customer_Orders.order_id\nJOIN Customers ON Customers.customer_id = Order_Items.customer_id\nJOIN Addresses ON Customers.address_id = Addresses.address_id;"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "@databas>SELECT a.address_id, a.address_details FROM Addresses a;"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": ">("
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": ">"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": ">"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": ">(ASSOC) SELECT p.product_id, p.product_type_code, p.product_name FROM Products p;"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": ""
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "_id</s>\nSELECT Products.product_price FROM Products WHERE Products.product_type_code = 'Monitor';"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": " user;\nSELECT MIN(Products.product_price) AS min_price, AVG(Products.product_price) AS avg_price, MAX(Products.product_price) AS max_price FROM Products;"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": ">sql>"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "."
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": ">Please make sure to replace the table and column names with the correct ones for your own database schema."
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": ">"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "_id AS (SELECT product_id FROM Products WHERE product_type_code = 'Hardware');</s>\nSELECT COUNT(*) FROM Product AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id;</s>\n"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": ".set_dr_user('sql_expert');"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": ">1.0"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": " database user\nSELECT p.product_name\nFROM Products p\nWHERE p.product_type_code = 'hardware' AND p.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware');"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": " SQL user"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": ">SQL>"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": ".Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id JOIN Addresses a ON co.address_id = a.address_id WHERE p.product_type_code='Clothes' ORDER BY p.product_price DESC LIMIT 1;"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": " user;\nSELECT p.product_id, p.product_name FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE p.product_type_code = 'Hardware' AND oi.order_id IN (SELECT MIN(oi2.order_id) FROM Order_Items oi2 GROUP BY oi2.product_id HAVING oi2.product_id = p"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "@database>SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC;"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": ".Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id ORDER BY p.product_price DESC;"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": ">"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "(p.product_name) as product_name, p.product_price "
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": ";\n\nSELECT p.product_type_code, COUNT(*) AS product_count\nFROM Products p\nGROUP BY p.product_type_code\nORDER BY p.product_type_code;"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": " user, the SQL query to answer \"How many products are there for each product type?\" would be:<br />\nSELECT p.product_type_code, COUNT(*) AS product_count FROM Products p GROUP BY p.product_type_code;"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": ">sql; SELECT p.product_type_code, AVG(p.product_price) AS avg_price FROM Products p GROUP BY p.product_type_code ORDER BY p.product_type_code;"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": ".Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_type_code AVG(oi.product_price);"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": ">(database.schema);<br>SELECT DISTINCT p.product_type_code FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_type_code HAVING COUNT(oi.order_id) > 2;"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "; WITH product_types AS (SELECT DISTINCT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) > 2) SELECT product_type_code FROM product_types;"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": ">"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "_sql>@sherlock\nSELECT Products.product_type_code, COUNT(*) as count\nFROM Products\nGROUP BY Products.product_type_code\nORDER BY count DESC\nLIMIT 1;"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": ">"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": " user;\nSELECT COUNT(DISTINCT c.customer_id) FROM Customers AS c;"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "|>SELECT c.customer_id, c.customer_name FROM Customers AS c;"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": ""
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "|im_end|>SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name = 'Jeromy';"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "@example.com;(SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy');"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": ">SELECT DISTINCT Customers.payment_method_code, COUNT(Customers.customer_id) AS num_customers FROM Customers GROUP BY Customers.payment_method_code ORDER BY Customers.payment_method_code;"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "_query"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": ">You can use the following SQL query to answer [QUESTION]What is the payment method code used by most number of customers?[/QUESTION]:"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "=mysql>"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "='showallpaymentmethodswiththeleastnumberofcustomers.sql'"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "=(SELECT c.customer_name FROM Customers c GROUP BY c.customer_name HAVING COUNT(DISTINCT p.payment_method_code) = (SELECT COUNT(DISTINCT pm.payment_method_code) FROM Payments pm GROUP BY pm.payment_method_code ORDER BY COUNT(pm.payment_method_code) DESC LIMIT 1 OFFSET 1);<|im_end"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "|customer_name|= 'Jeromy', (SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy')"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "|payment_method_code, customer_number\nFROM Customers\nWHERE customer_name = 'Jeromy'\n"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "]"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": " user;\n\nSELECT DISTINCT Customers.payment_method_code\nFROM Customers;\n"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": ".Products\nORDER BY product_name;"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": ".Products\nORDER BY product_name ASC;"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": ">"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": ">(select products.product_type_code from Products group by products.product_type_code having count(*) = (select count(*) as min(count(*)) from Products group by product_type_code order by count(*) asc limit 1)[sql]\n"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": ">(select count(distinct order_id) from Customer_Orders);"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "_user\nHere's a possible solution: <br>```<|sql|>SELECT COUNT(DISTINCT Customer_Orders.order_id) AS total_orders FROM Customer_Orders;<|sql|> "
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "_id|>=SELECT o.order_id, o.order_date, os.order_status_code\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nJOIN Orders o ON co.order_id = o.order_id\nJOIN Order_Items oi ON o.order_id = oi.order_id\nWHERE c.customer_name LIKE '%J"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": ">"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "_table=(select c.customer_id, c.customer_name, count(co.order_id) as num_orders from Customers c join Customer_Orders co on c.customer_id=co.customer_id group by c.customer_id);"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "_name, c.customer_id, COUNT(o.order_id) as order_count\nFROM Customers c\nJOIN Customer_Orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nORDER BY c.customer_id;"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": ".set_session_user('sql_user');<br />SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email<br />FROM Customers AS c<br />JOIN Customer_Orders co ON c.customer_id = co.customer_id<br />GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email<br />ORDER"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": ">\nThe query to find the customer with the highest number of orders is:\n"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": ">(SELECT order_status_code, COUNT(*) AS num_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY order_status_code);"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": ">1."
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": ""
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": ">"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": " user>"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": " user;\n\nSELECT COUNT(DISTINCT c.customer_id) AS no_orders FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL;"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": " user;\n\nSELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_id IS NULL;"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "> SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL; "
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "@database>SELECT COUNT(*) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE p.product_name LIKE '%Monitor%';"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": ""
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "_id AS (SELECT DISTINCT customer_id FROM Orders ORDER_ITEMS WHERE product_id = (SELECT product_id FROM Products WHERE product_name = 'Monitor') GROUP BY customer_id HAVING COUNT(*) >\n"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "_user\nThe SQL query to answer [QUESTION]Count the number of different customers who have bought a Monitor Product. is:\nSELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p."
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": ">The following query will give you the number of distinct customers who have placed an order:<br><br>SELECT COUNT(DISTINCT Customer.customer_id) AS num_customers FROM Customers JOIN Customer_Orders ON Customer.customer_id = Customer_Orders.customer_id;"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": " user\nYour query: "
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": ".customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders) AS no_orders;"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": ">(SELECT `c.customer_id` FROM `Customers` c LEFT JOIN `Customer_Orders` o ON c.`customer_id` = o.`customer_id` WHERE `o.order_id` IS NULL) AS subquery\nWHERE EXISTS (SELECT 1 FROM `Products`);"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": ".Products p JOIN Orders o ON p.product_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) > 3 OR MAX(order_quantity) > 6);"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "|im_end|>SELECT o.order_id, o.order_date FROM Orders o JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) > 3 OR ORDER_QUANTITY > 6) as subquery ON o.order_id = subquery.order_id;"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "\nSELECT COUNT(*) FROM building;"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "_user\nSELECT COUNT(*) FROM building;"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "(database)'WITH(pragma_autocommit=on);<br/>SELECT building.name FROM building ORDER BY building.number_of_stories ASC;"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "_database>"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "_database=# YOUR_DATABASE_NAME;"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": ">\nSELECT b.Name, b.Address\nFROM building b\nORDER BY b.Completed_Year DESC;\n"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "(max(cast(number_of_stories as int) from building where completed_year != 1980 group by building_id having completed_year is null));"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": ".set_databasename('your_database');<br>SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year > 1980 AND Building_ID IN (SELECT Building_ID FROM building WHERE Completed_Year <= 1980);"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "(avg(region.population) as avg_population from region;\n"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "_user</s>SELECT AVG(region.population) FROM region;"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": ">SELECT \"region\".\"Name\" FROM \"region\";"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "\nSELECT region.name FROM region ORDER BY region.name ASC;"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": ">SELECT region.Name AS region_name, region.capital AS capital FROM region WHERE region.Area > 10000;"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": ">SELECT region.name AS region_name, region.capital AS capital FROM region WHERE region.area > 10000;"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": " user;\nWITH regions AS (SELECT r.region_id, r.name, r.population FROM region r ORDER BY r.population DESC LIMIT 1), buildings AS (SELECT b.region_id FROM building b JOIN regions ON b.region_id = r.region_id) SELECT r.name AS region FROM regions r WHERE r.region_id = b.region_id;"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "@database>SELECT r.Name AS region_name, MAX(r.Population) as max_population, c.Name as capital FROM region r JOIN city c ON r.Region_ID = c.Region_ID GROUP BY r.region_id HAVING MAX(r.Population) ORDER BY r.Population DESC LIMIT 1;"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": ">(WITH (pgsql:setschema \"dbname\") SELECT r.Name FROM region r ORDER BY r.Area DESC LIMIT 5);"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": " database <db>;<br>WITH region AS (SELECT r.* FROM region r ORDER BY area DESC LIMIT 5)<br>SELECT name FROM region r IN r.*;"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": ">SELECT building.name AS building_name, region.name AS region_name\nFROM building JOIN region ON building.region_id = region.region_id;"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": ">SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "(COUNT(*) OVER (PARTITION BY b.region_id ORDER BY b.building_id ROWS BETWEEN UNBOUNDED PRECED DESC, b.building_id) > 1\nFROM building b\nGROUP BY region_id\nORDER BY b.region_id;"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": ">SELECT r.name AS region_name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1;"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "(building.capital, (SELECT region.name FROM building JOIN region ON building.region_id = region.region_id ORDER BY COUNT(building.building_id) DESC LIMIT 1));"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": " user><br />SELECT r.Name AS region_name, COUNT(b.Building_ID) AS num_buildings, r.Capital FROM building b JOIN region r ON b.Region_ID = r.Region_ID GROUP BY r.Region_ID ORDER BY num_buildings DESC LIMIT 1;"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "@localhost:54320>SELECT b.name AS building_name, r.capital AS region_capital FROM building b JOIN region r ON b.region_id = r.region_id;"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": ">SELECT b.name AS building_name, r.name AS region_name, b.address FROM building b JOIN region r ON b.region_id = r.region_id;"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "_cat@db_1(SELECT COUNT(Number_of_Stories) FROM building WHERE Name = 'Abruzzo');"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "_region= (SELECT Region_ID FROM region WHERE Name='Abruzzo');\n\nSELECT b.Name, COUNT(b.Number_of_Stories) as total_stories FROM building b JOIN region r ON b.Region_ID=r.Region_ID WHERE r.Name='Abruzzo' GROUP BY b.Name;"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": " database;<br>WITH building AS (SELECT DISTINCT Completed_Year FROM building ORDER BY Completed_Year),<br>completed_years AS (VALUES SELECT y FROM building)<br>SELECT c.y, COUNT(*) as num_buildings<br>FROM completed_years c JOIN building b ON c.y = b.Completed_Year GROUP BY c.y ORDER BY c.y;"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "(COUNT(*) OVER (ORDER BY building.completed_year) AS number_of_buildings, building.completed_year FROM building GROUP BY building.completed_year);"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "_database>PostgreSQL"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "(COUNT(*)) as total_completed_buildings, \"Completed_Year\" as year FROM building GROUP BY \"Completed_Year\" ORDER BY total_completed_buildings DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "@local(SELECT r.name FROM region r WHERE NOT EXISTS (SELECT 1 FROM building b WHERE b.region_id = r.region_id));"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": ">\nSELECT r.name\nFROM region r\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM building b\n    WHERE b.region_id = r.region_id)\n"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "_database=>>\nSELECT \"Completed_Year\" FROM \"building\" WHERE (\"Number_of_Stories\" > 20 OR \"Number_of_Stories\" < 15 GROUP BY \"Completed_Year\" ORDER BY \"Completed_Year\";"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "_buildings=SELECT DISTINCT completed_year FROM building WHERE Number_of_Stories IN (20, 15) ORDER BY completed_year;"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "\nSELECT \"building\".\"Name\" AS \"Address\"\nFROM \"building\"\nGROUP BY \"building\".\"Name\"\nORDER BY \"building\".\"Name\" ASC;\n"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "\nSELECT \"building\".\"Name\" AS \"Address\" FROM \"building\";"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": ".sqlite>= SELECT building.completed_year, COUNT(building.number_of_stories) as num_stories FROM building GROUP BY building.completed_year ORDER BY num_stories DESC; "
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "(\"building\") as s\njoin building on s.\"Building_ID\" = building.\"Building_ID\"\norder by building.\"Number_of_Stories\" desc, s.\"Completed_Year\" desc;"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": " user; SELECT Channels.Channel_Details FROM Channels ORDER BY Channels.Channel_Details ASC;"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "('alphabeticalorder(channel_details) AS channel_details') FROM channels;"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "_services := (SELECT COUNT(DISTINCT Service_ID) FROM Services);"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "_services_count=SELECT COUNT(DISTINCT(Services.Service_ID) FROM Services;"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "_type_code = (SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(COUNT(*)) OVER () * 1.0) * 100.0 FROM Analytical_Layer)\n"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": " in Analytical_Layer order by Analytical_Layer_Type_Code DESC LIMIT 1;"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": " user; SELECT Services.Service_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID JOIN Customer_Interactions ON Customers_and_Services.Service_ID = Customer_interactions.Service_ID JOIN Services ON Customer_interactions.Service_ID = Services.Service_ID WHERE Customers.Customer_Details LIKE '%Hardy Kutch%';<|"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": " user, "
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "(service.Service_Details) as service, (select customers_and_services.service_id from customer_interactions group by customers_and_services.service_id having count(customer_interactions.customer_id) > 3) as used_more_than_three "
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "_layer.customers_and_services_id, service_details FROM services s JOIN customers_and_services cands ON s.service_id = cands.service_id GROUP BY s.service_details HAVING COUNT(*) > 3"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": " user;\nSELECT c.Customer_Details, COUNT(cs.Customers_and_Services_ID) AS num_services_used\nFROM Customers c\nJOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID\nGROUP BY c.Customer_Details\nORDER BY num_services_used DESC\nLIMIT 1;\n"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": " user;\nSELECT Customers.Customer_Details, COUNT(Customers_and_Services.Customers_and_Services_ID) as num_services_used FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_Details HAVING COUNT(Customers_and_Services.Customers_and_Services_ID) = (SELECT"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "_table=customer_interactions;\nselect distinct c.customer_details, (select count(distinct s.service_id) from customer_interactions ci join services s on ci.service_id = s.service_id group by ci.customer_id having count(*)=ci.customer_id order by count(distinct s.service_id) desc limit limit 1);\n"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": " user, (select count(distinct service_id) as num_services, customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_detail order by num_services desc limit 1)[/SQL]\n"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": " user; SELECT Customers.Customer_Details FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Customers.Customer_ID = Customers_and_Services.Customer_ID);"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": " user; WITH Services AS (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(Service_ID) = 0), Excluded_Customers AS (SELECT DISTINCT Customer_ID FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Services)); "
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": " for postgresql"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": " for Customer_interactions;<br>SELECT DISTINCT c.Customer_Details<br>FROM Customers c<br>JOIN Customers_and_Services cas<br>ON c.<br>AS Service_ID = cas.<br>JOIN Services s.<br>ON cas.Service_ID = s.Service_ID<br>(<br>SELECT MIN(COUNT(Customer_interactions.Customer_Interaction_ID)) AS min"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": " user, your query returned 15 rows."
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "_database_name|>Your database name goes here."
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": " User, select Customers.Customer_Details from Customers where Customer_ID in (select Customers_and_Services.Customer_ID from Customers_and_Services join Customers on Customers_and_Services.Customer_ID = Customers.Customer_ID);"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": " user; SELECT Customers.Customer_Details FROM Customers WHERE \"Kutch\" IN (Customers.Customer_Details);"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": " Hardy Kutch;<br>SELECT s.Service_Details AS service_name FROM Services s JOIN Customers c ON s.Service_ID IN (SELECT cs.Service_ID FROM Customers_and_Services cs JOIN Customer_Interactions ci ON cs.Customers_and_Services_ID = ci.Customer_interaction_ID AND cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch'"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "_layer.service_details = (SELECT s.service_details FROM services s INTERSECT SELECT cs.service_id FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id WHERE customer_details = 'Hardy Kutch' OR EXISTS (SELECT 1 FROM customer_interactions ci WHERE ci.customer_id = cs.customer_id AND ci.service_rating = 'good')<|"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": " Kutch;<br>SELECT s.Service_Details AS Service_Name FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID JOIN Services s ON cs.Service_ID = s.Service_ID JOIN Customer_Interactions ci ON cs.Customers_and_Services_ID = ci.Customer_interaction_ID AND c.Customer_Details = 'Hardy Kutch' JOIN Anal"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "_layer.customers_and_services = (SELECT customers_and_services.customers_and_services_id FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id WHERE customers.customer_details LIKE '%Hardy Kutch%');\nservices_bad = (SELECT services.service_id FROM customer_interactions JOIN integrations_platform ON customer_interactions.channel_id = integr"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": ">\nThe query to find details of all the services that have interacted with \"15 ij\" for the channel details is:\nSELECT s.Service_Details, c.Customer_Details, ch.Channel_Details\nFROM Services s\nINNER JOIN Customers_and_Services cas ON s.Service_ID = cas.Service_ID\nINNER JOIN Customers c ON cas.Customer_ID = c.Customer_ID\nINNER JOIN"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": ">\nThe query to answer [QUESTION]Give me the details of all the services that have interacted with the channel with detail \"15 ij\" is:\n```sql\nSELECT Services.Service_ID, Services.Service_Details\nFROM Services\nJOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID\nJOIN Customer_Interactions ON Customers_and_Services.Customer_"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": " IN (select analytical_layer.customers_and_services from analytical_layer join customers_and_services on analytical_layer.analytical_id = customer_interactions.customer_interaction_id join services on customer_interactions.service_id = services.service_id join channels on customer_interactions.channel_id = channels.channel_id where analytical_layer.pattern_recognition = 'bad' and services.service"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": " = 'Stuck';\nbad_service = (SELECT Service_Details FROM Services WHERE Service_Details LIKE '%bad%');\nbad_channel = (SELECT Channel_Details FROM Channels WHERE Channel_Details LIKE '%bad%');\ncustomer_details = (SELECT Customer_Details FROM Customers WHERE Customer_ID IN (\nSELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details IN (SELECT"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "_interactions.status_code = 'successful' AND integration_platforms.customer_interaction_id INTEGER REFERENCES customer_interactions(customer_interaction_id) GROUP BY integration_platforms.integration_platform_id HAVING COUNT(*) > COUNT(*)> "
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": ">"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": " to failed integration platforms:\nSELECT Customers.Customer_Details AS customer_details, Services.Service_Details AS service_details, Channels.Channel_Details AS channel_details FROM Customers_and_Services JOIN Customers ON Customers.Customer_ID = Customers_and_Services.Customer_ID JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": " to your solution"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "_services AS\nSELECT s.Service_ID, s.Service_Details\nFROM Services s\nLEFT JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID\nWHERE cs.Customer_ID IS NULL\nGROUP BY s.Service_ID\nHAVING COUNT(cs.Customer_ID) = 0;"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "_schema()\nSELECT s.Service_ID, s.Service_Details\nFROM Services AS s\nWHERE NOT EXISTS (\n    SELECT 1\n        FROM Customers_and_Services AS cs\n            JOIN Customers as c ON c.Customer_ID = cs.Customer_ID\n        WHERE s.Service_ID = cs.Service_ID);"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": " = (SELECT Analytical_Layer_Type_Code, COUNT(*) as usage_count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY usage_count DESC);"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "_layers <- (SELECT a.analytical_layer_type_code\nFROM Analytical_Layer a\nGROUP BY a.analytical_layer_type_code\nORDER BY a.analytical_layer_type_code);\nselect a.analytical_layer_type_code, count(*) as num_occurrences\nfrom Analytical_Layer a\ngroup by a.analytical_layer_type_code"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "=```sql\nSELECT s.Service_Details, c.Customer_Details FROM Services s JOIN Customers_and_Services cas ON s.Service_ID = cas.Service_ID JOIN Customers c ON cas.Customer_ID = c.Customer_ID JOIN Customer_Interactions ci ON cas.Customer_ID = ci.Customer_ID AND s.Service_ID = ci.Service_ID WHERE ci.Status_Code = 'unsatisfied"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "_services: SELECT s.service_details FROM Services s JOIN Customers_and_Services cands ON s.service_id = cands.service_id LEFT JOIN Customer_Interactions ci ON cands.customer_id = ci.customer_id AND ci.status_code != 'satisfied' ORDER BY s.service_details;"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "_cat(NULL);<br>SELECT COUNT(DISTINCT vehicles_id) AS vehicle_count FROM renting_history;<br>"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "_database >"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": " database;\"$${schema}$\";<br>\nSELECT \"Vehicles\".\"name\" <br>\nFROM \"Vehicles\" <br>\nORDER BY \"Model_year\" DESC;"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": ">db_user"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": " user; SELECT DISTINCT Type_of_powertrain FROM Vehicles;"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "@database> SELECT DISTINCT Type_of_powertrain FROM Vehicles;"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": ".set_autocommit(false);"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": " user;<br>SELECT Vehicles.name, Type_of_powertrain, Yearly_fuel_cost(Vehicles.id) AS yearly_fuel_cost <br>FROM Vehicles <br>WHERE Model_year IN (2013, 2014);"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "_catalog.drop_catalog();<br>\n"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": " database>"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "(db_name)->SELECT Type_of_powertrain, COUNT(*) as vehicle_count FROM Vehicles GROUP BY Type_of_powertrain;"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "(COUNT(*),type(powertrain) AS fuel_economy_rate FROM \"Vehicles\" GROUP BY \"Type_of_powertrain\")"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": " user;\nWITH vehicles AS (\n  SELECT Type_of_powertrain, COUNT(*) as num_vehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY num_vehicles DESC LIMIT 1\n)SELECT * FROM vehicles;"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "_db>"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": " database"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": " database"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": ">"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "(C.name, V.Model_year) FROM Customers C JOIN Renting_history Rh ON C.id = Rh.customer_id JOIN Discount D ON Rh.discount_id = D.id JOIN Vehicles V ON Rh.vehicles_id = V.id WHERE V.city_fuel_economy_rate <= V.highway_fuel_economy_rate;"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "(db) AS sqlite; SELECT Type_of_powertrain, AVG(Annual_fuel_cost) as avg_annual_fuel_cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 2;"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": " database '"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "_database=#your_database_name;\nSELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers;"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": ">"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "(now()) AS current_date;\nSELECT Customers.name, Customers.age\nFROM Customers\nWHERE Customers.membership_credit = (SELECT MAX(Customers.membership_credit) FROM Customers);\n"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": ">"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "_catalog;<br>SELECT AVG(c.age) AS avg_age_above_average FROM Customers c WHERE c.membership_credit > (SELECT AVG(dc.membership_credit) FROM Discount dc);"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": " database>"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "(database('discounts'));<br>SELECT d.id AS discount_id, d.name, c.name AS customer_name, v.name AS vehicle_name <br>FROM Discount d <br>JOIN Customers c ON d.customer_id = c.id <br>JOIN Renting_history rh ON d.id = rh.discount_id <br>JOIN Vehicles v ON rh.vehicles_"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": ">"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": " database:<br />\nSELECT v.name, SUM(rh.total_hours) AS total_hours FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name;"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "(now()) AS current_timestamp;\nSELECT V.name AS vehicle_name, SUM(R.total_hours) AS total_rental_hours\nFROM Vehicles AS V JOIN Renting_history AS R ON V.id = R.vehicles_id\nGROUP BY V.name;"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": ">\nSELECT Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL;"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": " database; WITH vehicle_rentals AS (SELECT vehicles_id FROM Renting_history) SELECT Vehicles.name FROM Vehicles LEFT JOIN vehicle_rentals ON Vehicles.id = vehicle_rentals.vehicles_id WHERE vehicle_rentals.vehicles_id IS NULL;"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": ">(select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by customers.name having count(renting_history.id) >= 2);"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": ">"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": " database 'vehicles_rental';\nWITH rentals AS (SELECT vehicles_id, COUNT(*) as num_rentals FROM renting_history GROUP BY vehicles_id ORDER BY num_rentals DESC LIMIT 1),\nvehicles AS (SELECT name, Model_year FROM vehicles ORDER BY num_rentals DESC LIMIT 1)\nSELECT v.name, r.Model_year FROM vehicles v JOIN rentals r ON v"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": ">"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": " database:<br />\nSELECT Vehicles.name AS vehicle_name, SUM(Renting_history.total_hours) as total_hours <br />\nFROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name<br />\nORDER BY SUM(Renting_history.total_hours) DESC;"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": " database=\"postgresql\";"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": " database '<database>';\nWITH renting_history AS (\n    SELECT discount.name, COUNT(*) AS num_rentals FROM discount JOIN renting_history ON discount.id = renting_history.discount_id GROUP BY discount.name ORDER BY num_rentals DESC LIMIT 1;\nSELECT name FROM discount LIMIT 1;"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": ">(select discount.name from discount join renting_history on discount.id = discount_id group by discount.name having count(*) as total order by total desc nulls last (order by total desc NULLS LAST) limit 1);"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": ">(WITH vehicles.name AS v_name, vehicles.type_of_powertrain, renting_history.total_hours FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE renting_history.total_hours > 30)*"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "(AVG(total_hours) > 30, renting_history)>\nSELECT vehicles.name, vehicles.type_of_powertrain\nFROM vehicles\nJOIN renting_history ON vehicles.id = renting_history.vehicles_id\nGROUP BY vehicles.name, vehicles.type_of_powertrain;"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "_database>\nSELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS average_city_fuel_rate, AVG(Highway_fuel_economy_rate) AS average_highway_fuel_rate FROM Vehicles GROUP BY Type_of_powertrain;"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "_cat SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM Vehicles GROUP BY Type_of_powertrain;"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": " on Students s join Student_Loans sl on s.student_id = sl.student_id;<br>SELECT AVG(sl.amount_of_loan) FROM Students s join Student_Loans sl ON s.student_id = sl.student_id;"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": " ON Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id GROUP BY Students.student_id AVG(Student_Loans.amount_of_loan);"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": " SELECT Students.student_id, Students.bio_data FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id HAVING COUNT(Classes.class_id) > 2 AND (SELECT COUNT(Detention.detention_id) FROM Detention WHERE Detention.student_id = Students.student_id) < 2;"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "."
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": " teachers={}; select t.teacher_details from teachers t left join classes c on t.teacher_id=c.teacher_id where c.class_details like '%data%' and class_details not like 'net%';"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": ".class_id, teachers.teacher_details\nFROM Teachers teachers\nLEFT JOIN Classes classes ON teachers.teacher_id = classes.teacher_id AND classes.class_details LIKE '%data%' AND classes.class_details NOT LIKE 'net%'\nWHERE classes.class_details IS NOT NULL\nGROUP BY teachers.teacher_id, teachers.teacher_details\nHAVING COUNT(classes.class_"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "."
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "."
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": ""
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "<Student_id>, <Achievement_Type_code>, (SELECT Students.<student_id>, SUM(Student_Loans.<amount_of_loan>) AS total_loans, MIN(Student_Loans.<date_of_loan>) AS first_loan_date, MAX(Student_Loans.<date_of_loan>) AS last_loan_date FROM Students LEFT JOIN Student_Events ON Students.<student_"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "_id, teachers.teacher_details\nFROM Teachers teachers\nJOIN Classes classes ON teachers.teacher_id = classes.teacher_id\nGROUP BY teachers.teacher_id\nORDER BY COUNT(classes.class_id) DESC\nLIMIT 1;"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "ion_schema."
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": ".*detention_type_code*ref_detention_type(detention_description) as d\nselect d.detention_description from detention d;"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "."
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": ">"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": ">"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": ".student_id, s.bio_data, a.address_details\nFROM Students AS s\nLEFT JOIN Students_Addresss AS as ON s.student_id = as.student_id\nLEFT JOIN Addresses AS a ON a.address_id = as.address_id\nORDER BY s.student_id;"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "."
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "_schema>"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": ".bio_data || ' ' || s.student_details AS student_info, t.date_of_transcript AS transcript_issue_date\nFROM Students s\nJOIN Transcripts t ON s.student_id = t.student_id;"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "ion> "
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": ".student_id, COUNT(*) as count, behaviour_monitoring_details"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": ".student_id, bio_data, student_details\nFROM Students s\nINNER JOIN Classes c ON s.student_id = c.student_id\nWHERE s.student_id IN (SELECT t.student_id FROM Behaviour_Monitoring bm GROUP BY bm.student_id HAVING COUNT(bm.student_id) = 3)\nORDER BY COUNT(*) DESC, s.student"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": " table=students,transcripts,behaviour_monitoring,achievement;<br>SELECT s.student_id,bio_data,student_details FROM Students s JOIN transcripts t ON s.student_id=t.student_id JOIN behaviour_monitoring bm ON s.student_id=bm.student_id WHERE student_id IN (<br>(<br>SELECT student_id FROM behaviour_monitoring G"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": ".student_id, bio_data, student_details\nFROM Students s\nWHERE student_id IN (\n    SELECT DISTINCT student_id\n    FROM Behaviour_Monitoring bm\n    GROUP BY student_id, behaviour_monitoring_details\n    HAVING COUNT(behaviour_monitoring_details) = (\n        SELECT MAX(COUNT(behaviour_monitoring_details)) OVER"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": ">students> AND "
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": ">SELECT Students.student_id, Students.bio_data, Student_Events.event_date\nFROM Students\nJOIN Student_Events ON Students.student_id = Student_Events.student_id;"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "_id, bio_data, event_date\nFROM Students s\nJOIN Student_Events se ON s.student_id = se.student_id\nWHERE s.student_id IN (\n  SELECT student_id\n  FROM Student_Loans sl\n) OR student_id IN (\n  SELECT student_id\n  FROM Classes c\n)\nOR student_id IN (\n  SELECT student_id\n  FROM Detention"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": " user>"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": " user>"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "_type_description AS (SELECT ref_achievement_type.achievement_description FROM ref_achievement_type), achievements AS (SELECT achievement_details, achievement_type_code FROM achievements); SELECT achievements.achievement_details, achievment_type.achievement_description FROM achievements JOIN achievement_type ON achievements.achievement_type_code = achievement_type.achievement_code;<|im_end|"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": ".achievement_type_code, a.achievement_details, r.achievement_type_description\nFROM Achievements a\nJOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "."
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": ".students as s\nleft join classes c on s.student_id = c.student_id\nleft join teachers t on c.teacher_id = t.teacher_id\nwhere not exists (select 1 from achievements a where a.student_id = s.student_id)\ngroup by t.teacher_id;"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": ">"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": ">\n```sql\nSELECT t.date_of_transcript, td.*\nFROM Transcripts t\nJOIN Students s ON t.student_id = s.student_id\nJOIN Student_Events e ON t.student_id = e.student_id AND t.date_of_transcript > e.event_date\nJOIN Ref_Event_Types et ON e.event_type_code = et.event_type_code"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": " SELECT a.achievement_type_code, a.achievement_details, t.date_achievement FROM Achievements a JOIN Ref_Achievement_Type raat ON a.achievement_type_code = raat.achievement_type_code;"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": " SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement DESC;"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": ">"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": " SELECT DETention.detention_id AS id, DETention.timestamp_detention_start AS start_time, DETention.timestamp_detention_end AS end_time FROM DETDetention ORDER BY DETention.timestamp_detention_start;"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "."
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": ".student_details LIKE '%Suite%' AND student_id IN (SELECT DISTINCT student_id FROM Students);"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "."
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "."
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": " teacher_table as (select teacher_id from Classes group by teacher_id order by count(*) desc limit 1);<br>-->"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "ions SELECT t.teacher_id, COUNT(*) AS num_courses FROM Classes c JOIN Teachers t ON c.teacher_id = t.teacher_id GROUP BY t.teacher_id HAVING COUNT(*) = (SELECT MAX(num_courses) FROM Teachers);"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "ion.student_id, COUNT(*) as num_courses\nFROM Classes AS c\nGROUP BY c.student_id\nORDER BY num_courses DESC, c.student_id DESC\nLIMIT 1;"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": " "
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": ".student_id, s.*\nFROM Students s\nJOIN Classes c ON s.student_id = c.student_id\nGROUP BY s.student_id\nHAVING COUNT(DISTINCT c.class_details) = 2;"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "_id agg, s.student_id\nFROM Students s\nJOIN Classes c1 ON s.student_id = c1.student_id\nJOIN Classes c2 ON s.student_id = c2.student_id AND c1.class_id != c2.class_id\nWHERE c1.class_id IN (SELECT class_id FROM Students_Courses sc WHERE sc.student_id = s.student_"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": " SELECT Ref_Detention_Type.detention_type_code, Ref_Detention_Type.detention_type_description FROM Ref_Detention_Type JOIN Detention ON Ref_Detention_Type.detention_type_code = Detention.detention_type_code GROUP BY Ref_Detention_Type.detention_type_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Ref_Detention"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "_query:<br>SELECT rd.detention_type_code, rd.detention_type_description<br>FROM Ref_Detention_Type rd<br>WHERE NOT EXISTS (SELECT 1 FROM Detention d<br>WHERE d.detention_type_code = rd.detention_type_code)<br>("
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "_view AS (SELECT s.student_id, AVG(sl.amount_of_loan) as avg_loan FROM Student_Loans sl GROUP BY s.student_id HAVING amount_of_loan > AVG(amount_of_loan) FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id) SELECT s.* FROM Students s JOIN student_view sv"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "."
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": " view student_details as (select student_id from students);<br>create materialized view earliest_loan as select min(date_of_loan) as earliest_date from student_loans;<br>select s.student_name, sl.earliest_date<br>from students s join earliest_loan sl on s.student_id = sl.student_id;"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": ".student_loans.date_of_loan AS earliest_loan FROM student_loans ORDER BY date_of_loan ASC LIMIT 1;"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": ".student_id, MIN(Student_Loans.amount_of_loan) as min_loan FROM Student_Loans GROUP BY Student_Loans.student_id HAVING MIN(Student_Loans.amount_of_loan) ORDER BY Student_Loans.student_id DESC LIMIT 1;"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "."
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": " SELECT Students.student_id, MAX(Student_Loans.amount_of_loan) AS max_loan, Transcripts.date_of_transcript\nFROM Student_Loans JOIN Students ON Students.student_id = Student_Loans.student_id\nJOIN Transcripts ON Students.student_id = Transcripts.student_id\nGROUP BY Students.student_id, Transcripts.date_of_trans"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": ">Student</student_id></student_id>"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": ""
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": ".students as s JOIN classes c ON s.student_id = c.student_id\nJOIN teachers t ON c.teacher_id = t.teacher_id\nWHERE EXISTS (SELECT 1 FROM transcripts tr WHERE tr.student_id = s.student_id AND tr.date_of_transcript < (SELECT MIN(date_of_transcript) FROM transcripts))\n<|im_end|"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": " SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id;"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": ".student_id AS s\nLEFT JOIN Student_Loans sl ON s.student_id = sl.student_id\nGROUP BY s.student_id\nSUM(sl.amount_of_loan) AS total_loan;"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": " SELECT Students.student_id, Students.bio_data, COUNT(Classses.class_id) as num_classes FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id;"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": ".student_id, bio_data, (SELECT COUNT(*) AS num_courses FROM Classes WHERE Students.student_id = class.student_id) AS num_courses FROM Students;"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "> Students; "
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": ""
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "ions."
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": ">\n"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "_table= Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE se.event_date IS NOT NULL AND sl.student_loan_id IS NULL;"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "."
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": " SELECT Students.student_id, Addresses.address_details AS student_address, MIN(Students_Addresss.date_from) AS start_time, MAX(Students_Addresss.date_to) AS end_time\nFROM Students INNER JOIN Students_Addresss ON Students.student_id = Students_Addresss.student_id\nJOIN Addresses ON Students_addresss.address_type_code = Addresses.address_"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "=(select Students.student_id, MIN(Addresses.date_from), MAX(Detention.datetime_detention_end) from Students\ninner join Student_Events on Students.student_id = Student_Events.student_id\ninner join Classes on Students.student_id = Classes.student_id and Student_Events.event_type_code='Registrations'\ngroup by Students.student_id having count(*) > 2);"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "_detention (student_id int, detention_type_code int, datetime_detention_start timestamp);\nSELECT MIN(timestamp) AS earliest_detention_start FROM Detention WHERE student_id = <StudentID>;\n"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "."
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "]"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": ">SELECT A.Name FROM Author A;"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": ">"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "> SELECT c.Name, c.Address FROM Client c;"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": ">\n```sql\nSELECT b.Title, b.ISBN, (SELECT s.SalePrice FROM Sales s WHERE s.ISBN = b.ISBN) AS sale_price\nFROM Books_Order bo INNER JOIN Book b ON bo.ISBN = b.ISBN;\n"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "> SELECT Book.Title, Book.ISBN, Book.SalePrice FROM Book;"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "\nYour query should return a number."
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": ">select count(distinct b.isbn) as num_books from book b;"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "(COUNT(*) FROM Author);"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": ">@db;\nSELECT COUNT(DISTINCT a.idAuthor) FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.author JOIN Book b ON ab.isbn = b.isbn JOIN Books_Order bo ON b.isbn = bo.isbn AND bo.idOrder = orders.idorder;\n"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "@databank>SELECT COUNT(*) FROM Client;"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "@databank>SELECT COUNT(*) FROM Client;"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "\nSELECT c.Name, c.Address FROM Client AS c;"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "\nSELECT Client.Name, Client.Address FROM Client ORDER BY Client.Name;"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": ";\nSELECT B.Title, A.Name AS Author\nFROM Book B\nINNER JOIN Author_Book AB ON B.ISBN = AB.ISBN\nINNER JOIN Author A ON AB.Author = A.idAuthor;"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": ">\n"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "; SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": ">"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": ">\n"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "@databases.com\nSELECT a.Name AS Author_name, COUNT(b.ISBN) as Books_written\nFROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author\nJOIN Book b ON b.ISBN = ab.ISBN\nGROUP BY a.Name;"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": ";\nSELECT b.isbn, COUNT(*) AS number_of_orders\nFROM Books_Order bo\nJOIN Orders o ON bo.idorder = o.idorder\nGROUP BY bo.isbn\nORDER BY bo.isbn;\n"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": " on Books a JOIN Books_Order b ON a.ISBN = b.isbn<br />GROUP BY a.isbn<br />a.title, a.author<br />b.idorder<br />COUNT(*) as quantity<br />"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": " user;\nSELECT b.isbn, SUM(o.amount) as total_amount\nFROM Book b\nJOIN Books_Order bo ON b.isbn = bo.isbn\nJOIN Orders o ON bo.idorder = o.idorder\nGROUP BY b.isbn;"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "_row_md5(dbname(),'i') as db;<br/>SELECT b.isbn, SUM(o.amount) AS total_orders <br/>FROM Books_Order o<br/>JOIN Book b ON o.isbn = b.isbn<br/>GROUP BY b.isbn<br/>ORDER BY b.isbn;"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": ">The book with the most number of orders can be found by joining the 'Book' table with the 'Books_Order' table and then grouping by the 'ISBN' field in the 'Book' table, while using a subquery to join the 'Orders' table and filter for the maximum count of 'IdOrder' occurring from the 'Books_Order' table. After that, the 'Title' field can be displayed."
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": ">(select b.title from books b join books_order bo on b.isbn = bo.isbn group by b.isbn having bo.idorder in (select idorder from orders group by idorder order by count(*) desc limit 1);\n"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "@test_sql_db>SELECT b.title, b.purchase_price FROM Book b JOIN Books_Order bo ON b.isbn = bo.isbn GROUP BY b.title, b.purchase_price HAVING SUM(bo.amount) OVER (PARTITION BY b.isbn ORDER BY SUM(bo.amount) DESC LIMIT 1) LIMIT 1;"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": ""
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": ".SELECT Book.Title FROM Books_Order BOOKS ORDER JOIN Book ON Books_Order.ISBN = Book.ISBN;"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "> SELECT b.title FROM book b JOIN orders o ON b.isbn IN STRING_LENGTH(b.isbn) = STRING_LENGTH(o.idorder) AND SUBSTRING(b.isbn, 1, STRING_LENGTH(b.isbn)-1)=o.idorder JOIN books_order bo ON b.isbn=bo.isbn AND o.dateorder<CURRENT_DATE ORDER BY b.title;"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": " user;\nSELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name HAVING COUNT(Orders.IdOrder) > 0;"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": ">"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "@db; SELECT c.Name, COUNT(o.IdOrder) AS num_orders FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name;"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": ">"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": ">"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": ">select c.name from client c inner join orders o on c.idclient=o.idclient group by c.name having count(o.idorder) order by count(o.idorder) desc limit 1;"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": ";\nSELECT Client.Name, SUM(Books_Order.amount) AS total_books\nFROM Client\nJOIN Orders ON Client.IdClient = Orders.IdClient\nJOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder\nGROUP BY Client.Name;"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "\nSELECT Client.Name, SUM(Books_Order.amount) as total_books\nFROM Client\nJOIN Orders ON Client.IdClient = Orders.IdClient\nJOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder\nGROUP BY Client.Name\nORDER BY Client.Name;"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": ""
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": " user, your answer is:<br>\n"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": ">11.7.18"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "(min(a.amount) is null) as has_not_been_ordered FROM Book b LEFT JOIN Books_Order bo ON b.isbn = bo.isbn WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE NOT EXISTS (SELECT 1 FROM Books_Order WHERE Books_Order.isbn = b.isbn AND Books_Order.idorder = Orders.idorder))"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": ">"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "_database=>;"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "@test-sql>SELECT MIN(b.SalePrice), MAX(b.SalePrice) FROM Book b;"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "> SELECT MIN(b.SalePrice), MAX(b.SalePrice) FROM Book b;"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "> SELECT b.Title, AVG(b.PurchasePrice) AS average_purchase_price, AVG(salePrice) AS average_sale_price FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.Title;"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": ">"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": ">The following query returns the maximum difference between the sale price and purchase price:"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": ">"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": ">(select b.title from book b join (select avg(saleprice) as avg_saleprice from book group by title having roudn(count(*)) over (order by title, saleprice desc) = 1) s on b.saleprice > s.avg_saleprice);"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": ">(select b.title from book b where b.sale_price > (SELECT AVG(sale_price) FROM book));"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": ".book."
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": " table Books AS (SELECT ISBN, SalePrice FROM Book WHERE SalePrice IS NOT NULL); SELECT Title FROM Books ORDER BY SalePrice LIMIT 1;"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "(MAX(b.purchase_price) AS max_price, b.title) AS title FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title HAVING max_price = (SELECT purchase_price FROM book ORDER BY purchase_price DESC LIMIT 1)[/SQL]"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "@db;\nSELECT b.title\nFROM book b\nWHERE b.purchase_price = (SELECT MAX(purchase_price) FROM book);\n"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "; select avg(Book.SalePrice) as average_sale_price from Book, Author_Book, Author where Book.ISBN = Author_Book.ISBN and Author.Name = 'George Orwell';"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": ">"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "> SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON A.idAuthor = AB.Author WHERE A.Name = 'Plato';"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": ">\nSELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON A.idAuthor = AB.Author WHERE A.Name = 'Plato';"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": ""
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "();</p><br>SELECT b.Title<br>FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON a.idAuthor = ab.Author<br>WHERE a.Name = 'George Orwell' AND b.SalePrice = (<|im_start|>SELECT MIN(SalePrice) FROM Book WHERE SalePrice IS NOT NULL AND idAuthor = <|im_end|"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": ".navigation=off;"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "_price = (SELECT AVG(SalePrice) FROM Book);\nSELECT B.Title FROM Author A, Book B WHERE A.idAuthor = B.Author AND A.Name = 'Plato' AND B.SalePrice < assestic_price ORDER BY B.Title;"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "> SELECT a.Name FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author JOIN Book b ON ab.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice';"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "> SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice';"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "('''%Plato%', Author.Name, Author_Book.Author) SELECT Book.Title FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Author.Name LIKE '%Plato%';"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "@sparkfun>SELECT Book.Title FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Author.Name LIKE '%Plato%';"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "_id <- SELECT COUNT(*) FROM Orders o JOIN Books_Order bk ON o.IdOrder = bk.IdOrder JOIN Book b ON bk.ISBN = b.ISBN WHERE b.Title LIKE '%Pride%and%Prejudice';"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": ".set_schema('bookstore');<br />SELECT COUNT(Orders.IdOrder) FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": ".select distinct o.IdOrder from Orders o join Books_Order bo on o.IdOrder = bo.idOrder join Book b on b.ISBN = bo.isbn join Author a on a.number = b.author where (upper(b.title) = 'Pride and Prejudice' or upper(b.title) = 'The Little Prince');"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": ">"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "; SELECT BOOK.ISBN FROM Client c1, Client c2, Books_Order bdo, Orders o, Book b, Author a WHERE c1.IdClient = 'Peter Doe' AND c2.IdClient = 'James Smith' AND c1.IdClient = o.IdClient AND c2.IdClient = o.IdClient AND bdo.ISBN = b.ISBN;"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": ""
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "; SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN AND B.Author IN (SELECT Author FROM Client C WHERE C.Name = 'Peter Doe') LEFT JOIN Client CASE WHEN BO.IdOrder NOT IN (SELECT IdOrder FROM Client CASE WHERE Name = 'James Smith' END; "
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "=postgresql;\nSELECT b.title FROM book b JOIN orders o ON b.isbn = o.idorder WHERE o.idclient = 'Peter Doe'::uuid AND NOT EXISTS (SELECT 1 FROM orders e WHERE e.idclient = 'James Smith'::uuid AND e.idorder = o.idorder) ORDER BY b.title;"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": ">"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "</squirrel>: "
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "\nThe SQL query to answer [QUESTION]How many books are there?[/QUESTION] is: SELECT COUNT(*) FROM book;"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": ">"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": ">"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "_cat\nSELECT b.Type, EXTRACT(YEAR FROM STR_TO_DATE(b.Release, '%m/%d/%Y')) AS Year, MONTH(b.Release) AS Month, DAY(b.Release) AS Day, B.Title\nFROM book b;"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": ">(select b.\"book_id\", max(b.\"chapters\") as max_chapters, min(b.\"chapters\") as min_chapters from \"book\" b group by b.\"book_id\");"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "(Title)\nSELECT Title FROM book WHERE Title NOT LIKE '%Poet%';"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "\nThe correct SQL query to answer [QUESTION]What is the average rating in reviews?[/QUESTION] is:\nSELECT AVG(rating) FROM review;\n"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "\nSELECT book.title, AVG(review.rating) AS average_rating\nFROM book\nJOIN review ON book.book_id = review.book_id\nGROUP BY book.title;"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "\nThe rating of the book with the largest number of chapters can be determined by joining the \"book\" and \"review\" tables, grouping by the number of chapters, and selecting the review with the maximum number of chapters."
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": ">(select b.book_id, min(pages) as pages, rank() over (order by pages asc) as rank from book b group by book_id having pages in (select pages from book order by pages asc limit 1 for update row id lock transfer to "
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": ".settransaction isolation level to 'serializable';\nSELECT b.\"Title\"\nFROM \"book\" b\nJOIN \"review\" r ON b.\"Book_ID\" = r.\"Book_ID\"\nWHERE r.\"Rank\" = (\n  SELECT MAX(r2.\"Rank\")\n  FROM \"review\" r2\n);"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "('book.type') = 'Novel'::text AND book.book_id IN (SELECT review.book_id FROM review GROUP BY review.book_id HAVING COUNT(*) > 0) AS AVG(review.readers_in_million)::NUMERICVER(2)\n"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "(db_name()) AS db;\nSELECT t.type, COUNT(*) AS num_books\nFROM book b JOIN type t ON b.type = t.type\nGROUP BY t.type;"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "_category(book.type, count(*), group_by(book.type) order by count(*) desc limit 1)[1;pgm_sql]\n"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": " (min(COUNT(book.book_id)) OVER (PARTITION BY book.type ORDER BY book.title) > 2 AS type_count, book.type\nFROM book\nGROUP BY book.type\nHAVING type_count >= 3;"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": ">SELECT book.title FROM book JOIN review ON book.book_id = review.book_id ORDER BY review.rating ASC;"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": ">"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "(COUNT(*) FROM book LEFT JOIN review ON book.book_id = review.book_id WHERE review.book_id IS NULL) AS no_reviews;"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": ".setlinesize(0);<br>WITH book AS (<br>SELECT Type FROM book WHERE Chapters > 75 AND Chapters < 50 GROUP BY Type<br>)<br>SELECT Type FROM book<br>UNION ALLY<br>SELECT Type FROM book<br>WHERE TYPE IS NOT NULL AND Book_ID IN (<br>(<br>SELECT Book_ID FROM book WHERE Chapters > 75<br"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": " user; SELECT COUNT(DISTINCT(Type)) FROM book;"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": ">\nSELECT book.type, book.title\nFROM book\nWHERE book.book_id NOT IN (SELECT review.book_id FROM review);"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": " user:<br>The number of customers can be obtained by simply querying the primary key Customer_ID in the customer table."
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": " on customer; SELECT COUNT(*) AS total_customers FROM customer;"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "@databasement(connect_by_url('db://:/home/user/p6spy_215db');<br />SELECT c.name AS customer_name<br />FROM customer c<br />ORDER BY c.level_of_membership;"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": ">1. SELECT c.Name FROM customer c ORDER BY c.Level_of_membership ASC;"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": ""
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "_database>.customer SELECT \"Nationality\", \"Card_Credit\" FROM "
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": ">"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "|>SELECT `customer`.`Name` FROM `customer` WHERE `customer`.`Nationality` IN ('England', 'Australia');"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": " user><br /> SELECT AVG(customer.Card_Credit) FROM customer WHERE Level_of_membership > 1;"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "@databasic>SELECT AVG(customer.Card_Credit) FROM customer WHERE customer.Level_of_membership > 1;"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": ">"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": ".customer.name AS highest_membership_level_customer, highest_membership_level_customer.card_credit FROM customer highest_membership_level_customer ORDER BY highest_membership_level_customer.level_of_membership DESC LIMIT 1;"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": ">SELECT `customer`.`Nationality`, COUNT(*) as num_customers FROM `customer` GROUP BY `customer`.`Nationality` ORDER BY `num_customers` DESC;"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": " user\n```sql\nSELECT Nationality, COUNT(Customer_ID) AS num_customers\nFROM customer\nGROUP BY Nationality;\n```\n"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": " user;\n"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": ">"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": " database: "
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": ">"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "@databasic>SELECT c.Name AS customer_name, o.Dish_Name AS dish_name FROM customer c JOIN customer_order o ON c.Customer_ID = o.Customer_ID;"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": ">"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": ";\nWITH branch.branch_id AS (SELECT branch.branch_id FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id)\nSELECT c.name, o.dish_name, SUM(o.quantity) OVER(PARTITION BY c.customer_id ORDER BY o.quantity DESC) as total_quantity\nFROM customer c JOIN branch b ON c.customer_id ="
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "@dburl:(SELECT c.name AS customer_name, o.dish_name, SUM(o.quantity) AS total_quantity FROM customer c JOIN customer_order o ON c.customer_id = o.customer_id GROUP BY c.customer_id, o.dish_name ORDER BY total_quantity DESC;"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": " user, I will use a subquery to get the total quantity for each customer and join it with the customer table."
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": " user, I will use a subquery to get the total quantity of dishes ordered by each customer, then join it with the customer table to display the customer name and the total quantity."
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": " user><br />SELECT c.Name, COUNT(co.Quantity) AS total_orders <br />FROM customer c <br />JOIN customer_order co ON c.Customer_ID = co.Customer_ID <br />GROUP BY c.Customer_ID <br />HAVING SUM(co.Quantity) > 1;"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": ">SELECT DISTINCT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name HAVING SUM(co.Quantity) > 1;"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "_schema = 'customer.db';\nSELECT DISTINCT branch.manager AS manager FROM branch;"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": ">\nSELECT DISTINCT branch.manager AS manager FROM branch;"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": " user;\nSELECT c.Name FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID WHERE co.Customer_ID IS NULL;"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": ".customer c (name)\nLEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID AND co.Dish_Name IS NOT NULL\nWHERE co.Customer_ID IS NULL\nGROUP BY c.Name, c.Customer_ID\nHAVING COUNT(c.Customer_ID) = 0;"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "@database> SELECT COUNT(*) FROM member;"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "(user)->sql(\"SELECT member.name FROM member ORDER BY member.age;\");"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": ""
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": ">\nSELECT m.Name FROM member m WHERE m.Nationality != 'England';"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": ">"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": ""
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "(dbname='mydatabase') q1 = 'SELECT Nationality, COUNT(*) as num_members FROM member GROUP BY Nationality ORDER BY Nationality;';"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "@databasic>SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": ">SELECT DISTINCT m.Nationality FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID GROUP BY m.Nationality HAVING COUNT(m.Member_ID) >= 2;"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "\nSELECT m.name AS member_name, c.club_name AS club_name\nFROM club_leader cl\nJOIN club c ON cl.club_id = c.club_id\nJOIN member m ON cl.member_id = m.member_id;"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": ""
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "(system): SQLite 0.301.0 "
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": ""
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": ">SELECT m.Name FROM member m LEFT JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Member_ID IS NULL;"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "_cat"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "(AVG(member.age) FROM member JOIN club_leader ON member.member_id = club_leader.member_id JOIN club ON club_leader.club_id = club.club_id);"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "_user\nSELECT \"Club_Name\" FROM \"club\" WHERE \"Club_Name\" ILIKE '%state%';"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": " user;\n\nSELECT Document_Subsets.Document_Subset_Name\nFROM Document_Subsets\nJOIN Collection_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID\nJOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID;"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": " user;\nSELECT Document_Subsets.Document_Subset_Name\nFROM Document_Subsets;\n"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": " user;\nSELECT Document_Subsets.Document_Subset_Details FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Top collection';"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": " user, I can provide you with a SQL query to answer your question based on the information provided:\n"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": " user, I understand your question as \"List all subsets and their corresponding document subsets.\" In that case, here is the SQL query:<br />\n<br />\nSELECT ds.Document_Subset_Name, s.Collection_Subset_Name, do.Document_Object_ID FROM Document_Subsets ds <br />\nJOIN Collection_Subsets cs ON ds.Document_Subset_ID = cs.Collection_ID <br />\nJO"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": " user;\nSELECT Document_Subsets.Document_Subset_Name\nFROM Document_Subsets;"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": " user, I will answer your question using SQL. Here is the query to find the detail of document subset with name 'Best for 2000':\n\n```sql\nSELECT Document_Subsets.Document_Subset_Details\nFROM Document_Subsets\nWHERE Document_Subsets.Document_Subset_Name = 'Best for 2000';\n"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": " user;\nSELECT Document_Subsets.Document_Subset_Details FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000';\n"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": " user;\nSELECT Document_Objects.Document_Object_ID\nFROM Document_Subsets\nJOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Related_Document_Object_ID\nJOIN Collections ON Document_Subsets.Collection_ID = Collections.Collection_ID\nWHERE Document_Objects.Owner = :username\n"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": " user,"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": " user;\nSELECT Document_Objects.Document_Object_ID AS document_id FROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\nWHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NOT NULL\nAND DOCUMENTS_IN_COLLECTIONS.Collection_ID IN (\n    SELECT Collections.Collection"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": " user;\nSELECT Document_Objects.Document_Object_ID\nFROM Document_Objects\nJOIN Collections ON Document_Objects.Collection_ID = Collections.Collection_ID\nWHERE Collections.Owner = 'Marlin'\nORDER BY Document_Objects.Document_Object_ID;"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": " user,"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "_user@database>SELECT Document_Objects.Owner FROM Document_Objects JOIN Collections ON Document_Objects.Collection_ID = Collections.Collection_ID JOIN Document_Subsets ON Document_Objects.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Collection_Subsets ON Collections.Parent_Collection_ID = Collection_Subsets.Collection_Subset_ID WHERE Collections.Collection_Name = 'Braeden Collection';"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": " user, I don't have access to your database, but here's a query that might help you find what you're looking for:<br>\nSELECT Document_Objects.Owner<br>FROM Document_Objects<br>WHERE Document_Objects.Document_Object_ID = (SELECT Document_Objects.Document_Object_ID FROM Documents_in_Collections<br>WHERE Documents_in_Collections.Collection_ID IN (SELECT Collection_"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "_user: Here's a possible solution for your question using SQL:\n\n```sql\nSELECT o.Owner AS parent_document_owner\nFROM Document_Objects o\nWHERE o.Owner = 'Marlin' AND EXISTS (\n  SELECT 1 FROM Document_Subset_Members dsme\n  JOIN Collections co ON co.Collection_ID = dsme.Related_Collection_ID\n  WHERE dsme.Document_Object"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": " user,\n"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": " user;\nWITH RECURSIVE RECURSIVE UNION ALL DOCUMENTS (SELECT DESCRIPTION FROM DOCUMENT_OBJECTS WHERE PARENT_DOCUMENT_ID IS NULL) AS PARENTS\nUNION ALL\n(SELECT DISTINCT DESCRIPTION FROM DOCUMENTS INNER JOIN COLLECTIONS ON DOCUMENTS.DOCUMENT_ID = COLLECTIONS.COLLECTION_ID"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": " user;\nSELECT COUNT(DO.Document_Object_ID) AS num_documents FROM Document_Objects DO JOIN Documents_in_Collections DC ON DO.Document_Object_ID = DC.Document_Object_ID JOIN Collections C ON DC.Collection_ID = C.Collection_ID JOIN Collection_Subsets CS ON C.Parent_Collection_ID = CS.Collection_ID JOIN Document_Subsets DS ON DS.Document_Sub"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": " user;\nSELECT COUNT(DO.Document_Object_ID) AS document_count\nFROM Document_Objects DO\nJOIN Documents_in_Collections DC ON DO.Document_Object_ID = DC.Document_Object_ID\nJOIN Collections C ON DC.Collection_ID = C.Collection_ID\nWHERE C.Collection_Name LIKE '%Marlin%'\n"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": " user;\nWITH RECURSIVE RECURSION EXCLUDE Document_Objects(Document_Object_ID) AS (\n    SELECT Document_Object_ID FROM Document_Objects WHERE NOT EXISTS (SELECT 1 FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Related_Document_Object_ID = Document_Objects.Document_Object_ID AND Document_Subset_Members.Document_Subset_ID"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": " user;\nWITH RECURSIVE RETRIVE DOCUMENT_OBJECTS_NO_PARENTS (DO.ID) AS (SELECT d.document_object_id FROM document_objects d WHERE parent_document_object_id IS NULL UNION ALL SELECT ds.document_object_id FROM document_subset_members ds JOIN document_objects d ON ds.related_document_object_id = d.document_object_id)\nSELECT"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": " user, I assume you meant to ask for the number of child collections for a given parent collection instead of the number of child documents. Here is the SQL query that answers [QUESTION]How many child collections does each parent collection have? List the collection id and the number.[/QUESTION]"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": " user;\nWITH RECURSIVE CTE AS (\n  SELECT ds.document_object_id AS parent_doc_id, COUNT(ds.related_document_object_id) as num_children FROM document_subsets ds\n  JOIN document_subset_members dsm ON ds.document_subset_id = ds.document_set_id\n  JOIN documents_in_collections doc IC USING (document_object_id"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": " user;\nSELECT Collections.Collection_Name FROM Collections;"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": " user;\nSELECT c.Collection_Name FROM Collections c JOIN Collection_Subsets cs ON c.Collection_ID = cs.Related_Collection_ID;"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": " user; SELECT Collections.Collection_Description FROM Collections WHERE Collections.Collection_ID IN (SELECT Document_Subset_Members.Document_Subset_ID FROM Document_Subset_members JOIN Document_Subsets ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subset_members.Related_Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": " user;\nSELECT Collections.Collection_Description FROM Collections WHERE Collections.Collection_ID IN (\n    SELECT DISTINCT Document_Subsets.Document_Subset_ID\n        FROM Document_Objects\n            JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\n            JOIN Collection_Subset_Members ON Documents_in_Collections.Collection_ID = Collection"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": " user,\nThe SQL query to answer the question \"What is the name of the parent collection of the collection named Nice?\" is:\nSELECT Collections.Collection_Name\nFROM Collections\nJOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Related_Collection_ID\nJOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID\n"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": " user;\nSELECT Collections.Collection_Name\nFROM Collections\nWHERE Collections.Collection_ID IN (\n  SELECT DISTINCT Parent_Collection_ID\n  FROM Documents_in_Collections\n  WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Nice') AND Collection_ID IN (\n    SELECT Collection_ID\n    FROM"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": " user;\nWITH RECURSIVE RECURSION EXCLUDE COLLECTIONS AS\nSELECT CS.Collection_Name\nFROM Collection_Subsets CS\nWHERE NOT EXISTS (\n  SELECT 1 FROM Collections C JOIN Collection_Subset_Members CSME ON C.Collection_ID = CSME.Related_Collection_ID AND CS.Collection_Subset_ID = CSME.Collection_Subset_ID\n)\nUNION"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": " user;\nWITH RECURSIVE RECURSIVE CTE AS (SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name FROM Collection_Subsets AS CS WHERE NOT EXISTS (SELECT 1 FROM Collections AS C JOIN Collection_Subset_Members AS CSMI ON C.Collection_ID = CSMI.Related_Collection_ID WHERE CS.Collection_Subset_ID = CSMI.Collection_Subset_ID"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": " user;\nSELECT DISTINCT Document_Objects.Document_Object_ID AS document_id\nFROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\nGROUP BY Document_Objects.Document_Object_ID\nHAVING COUNT(Related_Document_Object_ID) > 1;"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": " user, I assume you meant \"parent\" instead of \"child\"? Here's a SQL query to answer the question:\n\nSELECT Document_Objects.Document_Object_ID\nFROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\nGROUP BY Document_Objects.Document_Object_ID\nHAVING COUNT(Related_Document_Object_"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": " user, The collection \"Best\" can be found by its ID which can be obtained with the following query:<br />\nSELECT Collections.Collection_ID FROM Collections WHERE Collections.Collection_Name = 'Best'<br />\nOnce we have the collection ID, you can use it to find the number of child collections using the following SQL statement:<br />\nCOUNT(*) FROM Collection_Subset_Members WHERE Collections.Collection_ID = [collection_id] AND Collection"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": " user;\nWITH RECURSIVE OPTION NO DATA BARRIERS SELECTION AS\n  sql_query = $$\n    SELECT COUNT(*) FROM Collections c1 JOIN Collection_Subset_Members cs1 ON c1.Collection_ID = cs1.Related_collection_id\n         JOIN Collections c2 ON c1.parent_collection_id = c2.Collection_ID\n        WHERE c1.collection_name = '"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": " user, "
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "|"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": " user,"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": " user;\nWITH Collection_Subsets AS (\nSELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name\nFROM Collection_Subsets cs\nWHERE cs.Collection_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds\nJOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID\nGROUP BY cs.Collection"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": " user;\nWITH RECURSIVE RECURSIVE UNION_HEAPOINT AS subquery (SELECT ds.document_object_id, COUNT(*) as num_children FROM document_objects do JOIN document_subset_members dsmd ON dsmd.document_object_id = do.parent_document_object_id JOIN document_subsets ds ON ds.document_set_id = dsmd.document_set_id GROUP"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": " user;\nSELECT Document_Objects.Document_Object_ID, COUNT(Document_Subset_Members.Related_Document_Object_ID) AS num_children\nFROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\nJOIN Collection_Subset_Members ON Documents_in_Collections.Collection_ID = Collection_Subset_"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": " user, The SQL query to answer the question \"Which document has the least number of related documents? List the document id and the number of related documents.\" is:\nSELECT Document_Objects.Document_Object_ID AS document_id, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS num_related_documents\nFROM Document_Objects\nLEFT JOIN Documents_in_Collections ON Document_Objects.Document"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": " user;\nSELECT Document_Objects.Document_Object_ID, COUNT(*) AS document_count\nFROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\nGROUP BY Document_Objects.Document_Object_ID\nORDER BY document_count ASC\nLIMIT 1;"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": ";\nSELECT Documents.Document_Object_ID, COUNT(*) AS num_related_docs\nFROM Document_Objects Documents\nJOIN Collections Collections ON Documents.Collection_ID = Collections.Collection_ID\nJOIN Collection_Subsets Collection_Subsets ON Collections.Parent_Collection_ID = Collection_Subsets.Collection_ID\nGROUP BY Documents.Document_Object_ID\nHAVING COUNT(Related_Document_Object_"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": " users please! This is a SQL query to answer [QUESTION]What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[/QUESTION]:<br>\n```sql\nSELECT Document_Objects.Document_Object_ID, COUNT(Document_Subset_Members.Related_Document_Object_ID) as num_related_documents <br>\nFROM Document_"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": " user;\nSELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Owner = 'Braeden' AND Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": " user, I assume you meant \"related to\" rather than \"owed by\" in the question. Here is the SQL query for [QUESTION]What are the different owners of documents related to ones owned by Braeden?[/QUESTION]"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": " user,\nYou can use the following SQL query:\nSELECT Document_Subsets.Document_Subset_Name\nFROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\nJOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID\nJOIN Document_Subsets"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": " user;\nSELECT D.Document_Subset_Name\nFROM Document_Subsets D\nJOIN Document_Object_ID O ON D.Document_Subset_ID = DO.Document_Subset_ID\nJOIN Documents_in_Collections DC ON DO.Document_Object_ID = DC.Document_Object_ID\nJOIN Collections C ON DC.Collection_ID = C.Collection_ID\nWHERE OWNER = 'Braeden"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": " user;\nWITH RECURSIVE CTE AS (SELECT d.document_subset_id, d.document_subset_name, COUNT(*) OVER(PARTITION BY d.document_subset_id) AS num_documents FROM document_subsets d JOIN document_subset_members ds ON d.document_subset_id = ds.document_subset_id;\nSELECT DS.* FROM CTE ds JOIN collection_subsets cs ON"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": " user, I believe you meant to ask \"Given the database schema, here is the SQL query that [QUESTION]What is the subset id, name, and number of different documents for each document subset?\" rather than \"number of different collections\"? I've made the correction in the answer below."
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": " user, I will use a subquery to count the number of distinct documents in each Document_Subset, then join it with the Document_Subsets table to get the subset id and name."
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": " user, this is a complex query that requires a few subqueries to achieve the goal. The first subquery will be used to count the number of distinct document objects for each document subset and the second one will select the document subset with the maximum number of document objects."
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": " user,<br>\nSELECT Document_Objects.Document_Object_ID FROM Document_Subset_Members WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID;"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": " user,<br>\nSELECT Document_Objects.Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Document_Objects.Document_Object_ID = Document_Subset_members.Related_Document_"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": " user,<br>\nSELECT ds.Document_Subset_Name, ds.Document_Subset_ID, do.Document_Object_ID<br>FROM Document_Subsets ds JOIN Collection_Subsets cs ON ds.Document_Subset_ID = cs.Collection_Subset_ID JOIN Documents_in_Collections doc ON cs.Collection_ID = doc.Collection_ID WHERE doc.Document_Object_ID = :document_id"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": " user, here is the SQL query that answers your question:\n```sql\nSELECT ds.Document_Subset_Name, ds.Document_Subset_ID, do.Document_Object_ID FROM Document_Subsets ds\nJOIN Collection_Subsets cs ON ds.Document_Subset_ID = cs.Collection_Subset_ID\nJOIN Documents_in_Collections dc ON dc.Document_Object_ID = do.Document_Object_"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": " user;\nSELECT cs.Collection_Name\nFROM Collections c JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID JOIN Collection_Subset_members csme ON c.Collection_ID = csme.Related_Collection_ID JOIN Document_Objects do JOIN Document_Subset_members dsme ON do.Document_Object_ID = dsme.Related_Document_Object_ID AND ds"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": " user; SELECT Collections.Collection_Name FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Collection_Subsets ON Collections.Collection_ID = Collection_Subsets.Related_Collection_ID JOIN Document_Subsets ON Document_Subsets.Document_Subset_ID = Collections.Collection_ID WHERE Owner = 'Ransom"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": " user, <br>\nSELECT d.document_object_id, COUNT(DISTINCT c.collection_id) as collection_count <br>FROM document_objects d <br>JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id <br>JOIN collections c ON dc.collection_id = c.collection_id <br>GROUP BY d.document_object_id;"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": " user, the query would be:\nSELECT Document_Objects.Document_Object_ID, COUNT(DISTINCT Collections.Collection_ID) AS num_collections\nFROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID\nJOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID\nGROUP BY Document_"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": " user, The SQL query to answer [QUESTION]How many documents does collection named 'Best' has?[/QUESTION] is:<br />\nSELECT COUNT(Document_Object_ID) AS document_count FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Related_Collection_ID WHERE cs.Collection_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": " user, I can provide you with a SQL query to answer your question. However, to ensure accurate results, please double check that the collection name 'Best' exists in the database and that there are no typographical errors. Here is the query:<br />\n<code>"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": " user, I will only use SQL to answer the following question:\n### Task\nList the document id of all documents in collection named Best.\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL, Document_Subset_Name VARCHAR(255) NOT NULL, Document_Subset_Details VARCHAR(255), PRIMARY KEY ("
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": " user;\nSELECT COUNT(Document_Objects.Document_Object_ID) as num_docs FROM Document_Objects JOIN Collections ON Document_Objects.Collection_ID = Collections.Collection_ID JOIN Collection_Subsets ON Collections.Collection_ID = Collection_Subsets.Related_Collection_ID WHERE Collections.Collection_Name = 'Best';\n"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": " user, "
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": " user;\nSELECT cs.name AS collection_set_name, cs.id AS collection_set_id, COUNT(ds.document_object_id) AS document_count\nFROM Collections c\nJOIN Collection_Subsets cs ON c.collection_id = cs.collection_id\nJOIN Document_Subset_Members dsmd ON c.collection_id = dsm.collection_id\nJOIN Document_Subsets ds ON dsmd.document"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": " user;\nSELECT Document_Objects.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Related_Document_Object_ID JOIN Collections ON Document_Subsets.Collection_ID = Collections.Collection_ID WHERE Document_Subsets.Document_Subset_Name = 'Best' AND Collections.Collection_Name = 'Best' AND Document"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": " user,<br>\nThe SQL query to answer [QUESTION]What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[/QUESTION]"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": " user, I will provide you with a SQL query to answer the following question: List id of documents that are in the collection named \"Best\" but not in the document subset named \"Best\" for the year 2000. Please note that this query assumes a standard SQL database and may need adjustments for specific database implementations."
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": " user,<br>\nSELECT Document_Objects.Document_Object_ID<br>FROM Document_Objects<br>JOIN Collections ON Document_Objects.Collection_ID = Collections.Collection_ID<br>WHERE Collections.Collection_Name = 'Best' AND Document_Objects.Document_Object_ID NOT IN (<br>SELECT Document_Subset_Members.Document_Object_ID<br>FROM Document_Subset_Members<br>JO"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": " user; SELECT Document_Objects.Document_Object_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best' AND Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Related_Document_Object_ID = 2000) UNION SELECT Collections.Collection_ID AS document_id FROM Collections WHERE Collection_Name = 'Best';"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": " user,<br>\nSELECT Document_Objects.Document_Object_ID FROM Document_Objects\nJOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID AND Documents_in_Collections.Collection_ID IN (\n    SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'\nUNION ALL SELECT Document_Subset_ID FROM Document_Subsets WHERE"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": " user;\nSELECT Collections.Collection_Name\nFROM Document_Subset_Members DocSubmembers JOIN Document_Subsets DocSets ON DocSubmembers.Document_Subset_ID = DocSets.Document_Subset_ID JOIN Collection_Subset_Members ColSubmembers ON DocSubmembers.Document_Object_ID = ColSubmembers.Related_Collection_ID JOIN Collections Colls\nON ColSubmembers.Collection_ID = Colls.Collection"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": " user;\nSELECT cs.Collection_Name\nFROM Collection_Subsets cs\nJOIN Collection_Subset_Members cs_m ON cs.Collection_Subset_ID = cs_m.Related_Collection_ID\nWHERE cs_m.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')\n"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": " user;\nSELECT COUNT(DISTINCT c.collection_id) as num_collections_related_to_best FROM collections c JOIN document_subsets ds ON c.collection_id = (SELECT parent_collection_id FROM collections WHERE collection_name = 'Best') JOIN collection_subset_members cs ON c.collection_id = cs.collection_id JOIN collection_subsets cs2 ON cs.collection_subset_id ="
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": " user, the number of collections related to the one called 'Best' can be obtained using the following SQL query:\n\nSELECT COUNT(DISTINCT c.Collection_ID) AS num_collections\nFROM Collections c\nJOIN Collection_Subsets cs ON c.Collection_ID = cs.Related_Collection_ID\nWHERE cs.Collection_Subset_Name = 'Best';\n"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": " user, I assume you meant \"Which collection subset belongs to the 'Best' collection?\" Here is the SQL query:<br>\nSELECT Document_Subsets.Document_Subset_Name<br>\nFROM Collection_Subsets<br>\nJOIN Documents_in_Collections ON Collection_Subsets.Collection_ID = Collections.Collection_ID<br>\nWHERE Collections.Collection_Name = 'Best' AND Collection_Subsets.Document_Sub"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "|SELECT Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Collection_Subsets ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Document_Subset_members.Related_Document_Object_ID JOIN Collections ON Collections.Collection_ID = Collection_Subset_members"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "(regexp_count(songs.name, 'Love'));"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": ">"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "_view as (SELECT p.name FROM participants p) SELECT s.name AS song_name, s.language AS language FROM songs s JOIN performance_score ps ON s.id = ps.songs_id JOIN participants p ON p.id = ps.participant_id WHERE p.id IN (SELECT id FROM performances_view)"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": ">"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "(\"name\") AS name, voice_sound_quality, rhythm_tempo, stage_presence FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE name = 'Freeway';"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": ">"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": ">SELECT s.name, oa.name AS original_artist<br />FROM songs s<br />JOIN participants p ON s.id = p.id<br />JOIN performances ps ON s.id = ps.songs_id<br />JOIN original_artists oa ON p.id = oa.id<br />WHERE s.english_translation = 'All the streets of love'<br />ORDER BY s."
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "_scores FOR SELECT DISTINCT stage_presence FROM performance_score WHERE songs.language = 'English';"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": ">(db);<br>SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(ps.songs_id) >= 2;"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": ">"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": ">(db)->SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "(select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id where songs.name = ' The Balkan Girls ' and songs.language = 'English');"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": ">SELECT s.id, s.name FROM songs s JOIN performances p ON s.id = p.songs_id GROUP BY s.id, s.name HAVING COUNT(p.participant_id) > AS subquery\n"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": " presence: (stage_presence < 7 OR stage_presence > 9)\nSELECT COUNT(*) FROM performances_score WHERE stage_presence < 7 OR stage_presence > 9;"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "(count(distinct s.id) as total_songs, count(case when ps.participant_id is null then s.id else null end) as unperformed_songs);<br>SELECT total_songs as total_songs, unperformed_songs AS unperformed_songs FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id;<|im_end|"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "(avg(performance_score.rhythm_tempo) as avg_rhythm, songs.language) from performance_score inner join songs on performance_score.songs_id = songs.id group by songs.language;"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": ">(SELECT DISTINCT p.name FROM performance_score ps JOIN participants p ON ps.participant_id = p.id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "('Croatian') as croatian, assigent('English') as english;\nselect p.name, AVG(ps.popularity) as average_popularity\nfrom participants p\njoin performance_score ps on p.id = ps.participant_id\njoin songs s on ps.songs_id = s.id and (s.language = croatian or s.english_translation = english)\ngroup"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "(upper(original_artist) || ' ' || name) like '%is%'\nFROM songs;"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": " = (SELECT participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC;"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": ">The number of distinct city codes in the Student table is:<br>SELECT COUNT(DISTINCT city_code) FROM Student;"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": ">SELECT COUNT(DISTINCT City.city_code) AS num_cities FROM Student;"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": ">SELECT DISTINCT City.state FROM City;"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "(distinct(c.state)) as state FROM City c;"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "([@golden_meanies_sql_db].[City].[country])"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": ""
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "(nullif((select city_name) from City), 'city') as city,\\\n       nullif((select city_code), 'city_code') as code,\\\n       state, country\\\nfrom City;\\\n"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": ">"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": ">\nThe query will be:\nSELECT City.latitude, City.longitude FROM City WHERE City.city_code = 'Baltimore';"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": ">\nThe query should return the latitude and longitude of Baltimore. Assuming Baltimore has a city_code in the City table, we can join the City table with the Direct_distance table to filter for all records where Baltimore is either the city1_code or the city2_code, then select the corresponding latitude and longitude.\n"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "(concat('city_name', (select city_code from city where state='PA')));"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "() as subquery(select city_name from city where state = 'PA');\n"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "@database>SELECT COUNT(DISTINCT City.city_code) AS num_cities_in_canada FROM City WHERE Country = 'Canada';"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "('SELECT COUNT(DISTINCT city_code) FROM City WHERE country='Canada';"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "@studentdb SELECT c.city_name FROM City c WHERE c.country='USA' ORDER BY c.latitude DESC;"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "</s>user\nSELECT c.city_name\nFROM City c\nWHERE c.country = 'USA'\nORDER BY c.latitude ASC;"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "(LOWER(City.state) GROUP BY City.state, COUNT(*) AS num_cities) AS city_counts"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "(city_code, city_name, state) INTO #temp1 SELECT DISTINCT state FROM City;\nSELECT state, COUNT(DISTINCT city_code) as num_cities FROM #temp1 GROUP BY state ORDER BY state;"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": " user, you have been asked to write a SQL query to answer \"[QUESTION]Show all countries and number of cities in each .[/QUESTION]\" based on the given database schema. Here's the SQL query for your reference:"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": ">The number of distinct city codes for each country can be obtained using a JOIN with the City table, and then using COUNT(DISTINCT city.city_code) on the result:<br><br>SELECT c.country, COUNT(DISTINCT d.city1_code) AS num_cities FROM Direct_distance d INNER JOIN City c ON d.city1_code = c.city_code GROUP BY c"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "(COUNT(DISTINCT(City.state)) AS num_states, (SELECT City.state FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city2_code GROUP BY City.state HAVING COUNT(DISTINCT City.city_code) >= 2) AS states WITH (num_states)\nORDER BY num_states DESC, state;"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "(COUNT(DISTINCT(City.state)) AS num_states, (SELECT COUNT(DISTINCT t.city_code) FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code OR d.city2_code = s.city_code GROUP BY City.state HAVING COUNT(*) >= 2);"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "(city.state) as state, count(distinct city.city_code) as num_cities\nFROM City city\nGROUP BY state\nORDER BY num_cities DESC\nLIMIT 1;"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": ">(SELECT City.state\nFROM Student JOIN City ON Student.city_code = City.city_code\nGROUP BY City.state\nORDER BY COUNT(*) DESC LIMIT 1)[1]:[/QUESTION]\n"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "_country(c.country) AS (SELECT c.country FROM City c GROUP BY c.country HAVING COUNT(*) = MIN(COUNT(*)) FROM City c JOIN Student s ON c.city_code = s.city_code JOIN Direct_distance d ON (s.city_code = d.city1_code OR s.city_code = d.city2_code) GROUP BY c.country HAVING CO"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "_countries(country) SELECT c.country\nFROM City c\nGROUP BY c.country\nORDER BY (SELECT COUNT(DISTINCT city_code) FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code OR d.city2_code = s.city_code WHERE s.city_code = c.city_code) DESC\nLIMIT 1;"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "</s>\nSELECT Student.Fname, Student.LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD';"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "() as asa; SELECT s.fname, s.lname FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.state = 'MD';"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "_db.student.city_code IN (SELECT city_code FROM city WHERE country = 'China')"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "(){ dbname:students; sql:\"SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country='China');"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "@databasename>SELECT S.Fname, S.Major FROM Student S JOIN City C ON S.city_code = C.city_code WHERE C.city_name = 'Baltimore';"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": ">"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "(concat('SELECT city.country, COUNT(student.stuID) FROM student JOIN city ON student.city_code = city.city_code GROUP BY city.country;))"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "(city.country) as country, count(student.stuid) as num_students\nfrom student join city on student.city_code = city.city_code\ngroup by country.country"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "(city.city_name) AS city_name, COUNT(*) AS student_count\nFROM Student s\nJOIN City c ON s.city_code = c.city_code\nGROUP BY city_name\nORDER BY student_count DESC;"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "(concat('SELECT city_code, COUNT(*) as num_students FROM Student GROUP BY city_code;', 1));"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "(concat(c.state,'-',city(s.city_code).state) as state, count(*) as num_students)\nFROM Student s\nJOIN City c ON city(s.city_code)=c.city_code\nGROUP BY state\nORDER BY num_students DESC\nLIMIT 1;"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": ">(select c.state from city join student s on s.city_code = c.city_code group by c.state having (select count(*) as num_students from student) as students order by num_students desc limit 1)[sql]\n"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "_table (City c);\nSELECT c.country\nFROM Student s\nJOIN City ci ON s.city_code = ci.city_code\nJOIN c ON ci.city_code = c.city_code\nGROUP BY c.country\nORDER BY COUNT(s.stuID) ASC\nLIMIT 1;"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "_table(\"City\", \"country\");<br>WITH (SELECT city.country as country <br>FROM City AS city JOIN (SELECT COUNT(*) AS num_students, city2.country <br>FROM Student AS s JOIN City AS city2 ON s.city_code = city2.city_code <br>GROUP BY city2.country) AS student_counts <br>GROUP BY country <br>HAVING COUNT("
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "(COUNT(DISTINCT(Student.city_code) FROM Student GROUP BY Student.city_code HAVING COUNT(Student.city_code) > 2);"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": ">SELECT DISTINCT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.student_id) >= 3;"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": ">(select distinct s.state from student s join city c on s.city_code = c.city_code group by s.state having (select count(*) as num_students from student where city_code = c.city_code group by city_code) > num_students > 5);"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": ">(select distinct s.state from student s join city c on s.city_code = c.city_code group by s.state having (select count(*) as num_students from student) as subquery.num_students > 5 order by subquery.num_students desc limit 10);"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "(country) as (select city_code from City where country = 'USA') WITH RECORDS LOCKED; SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code AND c.city_code NOT IN (SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance) AND country = 'USA') WHERE city_code IS NULL;<|im_"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "([@]City.country)='USA' SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code LEFT OUTER JOIN Direct_distance ON Student.city_code = Direct_distance.city1_code AND City.city_code = Direct_distance.city2_code WHERE Country IS NULL OR (Country <>[/SQL]\n"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "('F','sex') as sex, city_code(city1_code) as city from Student s join City c on s.city_code = c.city_code where lower(c.state)=lower('PA');"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "(substr(City.city_name,1,2)='PA') as pa_students, Student.StuID\nFROM Student\nJOIN City ON Student.city_code = City.city_code\nWHERE Sex='F' AND city1_code=Student.city_code OR city2_code=Student.city_code\nAND City.city_name=pa_students.city_name;"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "([country] = 'USA'::text, city.city_name) AS city_name, city.state, student.StuID FROM Student JOIN City AS city ON city.city_code = student.city_code LEFT JOIN Direct_distance ON (student.city_code = city1_code OR city2_code = student.city_code) WHERE city.country != 'USA'::text AND sex = 'M'::text AND St"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": ">SELECT Student.StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT City.city_code FROM City WHERE Country = 'USA')"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "_user1795620854@oralcellyb.onwattpad.com\nSELECT d.distance\nFROM Direct_distance AS d, City as c1, City as c2\nWHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI' AND c1.city_code = 'BAL' AND c2.city_code = 'CHI';<|im_"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "_user>"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "_database>.DIRECT_DISTANCE."
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "\nThe correct SQL query to answer [QUESTION]What is the distance between Boston and Newark?[/QUESTION] is:\nSELECT d.distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code JOIN City c2 ON d.city2_code = c2.city_code WHERE (c1.city_name LIKE '%Boston%' AND c2.city_name"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "@databasemanager(SELECT AVG(Direct_distance.distance), MIN(Direct_distance.distance), MAX(Direct_distance.distance) FROM Direct_distance, City AS city1, City AS city2 WHERE Direct_distance.city1_code = city1.city_code AND Direct_distance.city2_code = city2.city_code;"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": ">"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": ">"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "@databaselive>SELECT DISTINCT City.city_code\nFROM Direct_distance AS d1, City AS c1, City AS c2\nWHERE d1.city1_code = c1.city_code AND d1.city2_code = c2.city_code\nORDER BY (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = c1.city_code OR city2_code = c1"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "@localhost:64321 SELECT c.city_code FROM City c JOIN Direct_distance d ON (c.city_code = d.city1_code OR c.city_code = d.city2_code) GROUP BY c.city_code HAVING (SELECT AVG(d.distance) OVER ()) + d.distance > 0 AND EXISTS (SELECT 1 FROM Direct_distance WHERE city1_"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "_db=sqlite:///Users:password@localhost/students;"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": ";SELECT DISTINCT s.city_code FROM Student AS s JOIN Direct_distance AS d ON (s.city_code = d.city1_code OR s.city_code = d.city2_code) JOIN City AS c ON (s.city_code = c.city_code) GROUP BY s.city_code HAVING SUM(d.distance) < 1000;<|im_end"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "; WITH t(c1, c2, d) AS (SELECT s.city_code as c1, d.city_code as c2, d.distance FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code OR s.city_code = d.city2_code) SELECT DISTINCT t.c1 FROM t WHERE t.d < 1000;<|im_end"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "('City', 'city_code') AS c\nSELECT SUM(d.distance)\nFROM Direct_distance d\nWHERE d.city1_code = 'BAL' OR d.city2_code = 'BAL';"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "('City','BAL');\nWITH Bal_code AS (\nSELECT City.city_code\nFROM City City\nWHERE City.city_code = 'BAL'\n)\nSELECT SUM(Direct_distance.distance)\nFROM Bal_code Bal\nJOIN Direct_distance ON Bal.city_code != City.city_code\nAND City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": ">(select avg(Direct_distance.distance) from Direct_distance join City city1 on Direct_distance.city1_code = city1.city_code join City city2 on Direct_distance.city2_code = city2.city_code where city1.city_name = 'Boston' and city1.state != 'MA')"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": " user><br />SELECT AVG(Direct_distance.distance) FROM Direct_distance JOIN City ON (City.city_code = CASE WHEN City.city_name = 'Boston' THEN City.city_code ELSE City.city_code END) WHERE City.city_name != 'Boston' ;"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "\nThe correct SQL query would be:\nSELECT City.city_name FROM City INNER JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE City.city_code = 'CHI' ORDER BY distance ASC LIMIT 1;"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "_user:sql>SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'CHICAGO' ORDER BY distance ASC LIMIT 1;"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": " user\n    SELECT c.city_name\nFROM City AS c\nJOIN Direct_distance AS d ON c.city_code = d.city2_code\nWHERE d.city1_code = 'Boston'\nORDER BY distance ASC\nLIMIT 1\n     OFFSET 0\n     ROWS 1\n     FETCH FIRST 1 ROW ONLY\n   "
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "@databasename>SELECT c.city_name FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = 'BOSTON' ORDER BY abs(d.distance) DESC LIMIT 1;"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": ";WITH City1 AS (SELECT city_code FROM City), Direct_distance AS d, City2 AS (SELECT city_code FROM City) SELECT c1.city_code as city1_code, SUM(d.distance) as total_distance, c2.city_code as city2_code FROM City1 c1 JOIN Direct_distance d ON c1.city_code = d.city1_code JOIN City2 c2 ON d"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "_db."
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "_database("
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": ""
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": ""
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "(SYSTEMSPECIALITY())>\nSELECT s.city_code, d.distance\nFROM Student s1 JOIN Student s2 ON s1.city_code = s2.city_code AND s1.LName = 'Linda Smith' AND s2.LName = 'Tracy Kim' JOIN Direct_distance d ON d.city1_code = s1.city_code AND d.city2_code = s2."
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "_student"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": ""
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "\nselect city.state from student s join city on s.city_code = city.city_code where s.fname = 'Linda' limit 1;"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "([Lname] = 'Linda') AND [city_code] IN (SELECT city1_code FROM Student WHERE StuID = [StuID]) AS student, city.[state]\nFROM Student s JOIN Direct_distance d ON (student.city_code = s.city_code) JOIN City city ON city1_code = city_code OR city2_code = city_code;"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "(Sailors.sid) AS sailor_id, name, rating, age FROM SailORS WHERE age > 30;"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "\nSELECT SailORS.name, SAILORS.rating, SAILORS.age FROM SALORS WHERE SAILORS.age > 30;"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "\nSELECT SailORS.name, SAILORS.age\nFROM SAILORS\nWHERE SAILORS.age < 30;"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "() AS current_user;\nSELECT SailORS.name, SAILORS.age FROM SALORS WHERE SALORS.age < 30;"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": ">\nSELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid = 1;"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "() AS sqltm, (SELECT DISTINCT b.bid FROM Reserves r JOIN Sailors s ON r.sid = s.sid JOIN Boats b ON r.bid = b.bid WHERE s.sid = 1)[SQL]"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "\nSELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE boats.bid = 102;"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "</sailors>.name FROM "
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "(array(SELECT bid FROM Reserves GROUP BY bid HAVING COUNT(*) > 0));"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": ">\nThe query will be:\nSELECT DISTINCT b.bid AS boat_id FROM Reserves r JOIN Sailors s ON r.sid = s.sid JOIN Boats b ON r.bid = b.bid;"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "() AS sa, sailors(sid) = sa.sid\nSELECT name FROM sailors WHERE name LIKE '%e%';"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "</sailors>SELECT <name>FROM <sailors>WHERE <name>LIKE '%e%';"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "=[ASSISTANT];"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "() AS sq, MIN(sailors.age) AS min_age\nFROM sailors\nGROUP BY sailors.sid\nHAVESQL> sid = sq.sid AND age != min_age["
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": " SELECT DISTINCT name FROM SailORS WHERE age > (SELECT MAX(age) FROM SAILORS WHERE rating > 7);"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "=[|im_end|>SELECT DISTINCT SailORS.name\nFROM SAILORS\nWHERE RATING > 7 AND EXISTS (\n    SELECT 1 FROM SAILORS AS subquery\n    WHERE age < SAILORS.age AND RATING > 7\n)"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": ">\n"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "(Sailors.sid) AS sid, SailORS.name\nFROM SailORS\nJOIN Reserves ON SailORS.sid = Reserves.sid\nGROUP BY SID\nHAVING COUNT(Reserves.bid) > 0;"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "_users>"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": ">SELECT DISTINCT SailORS.name FROM SAILORS JOIN RESERVES ON SAILORS.sid = RESERVES.sid JOIN BOATS ON RESERVES.bid = BOATS.bid GROUP BY SAILORS.name HAVING COUNT(RESERVES.bid) > 2;"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": ">SELECT S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE (B.color = 'red' OR B.color = 'blue');"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": ">SELECT SailORS.sid FROM SAILORS JOIN RESERVES ON SAILORS.sid = RESERVES.sid JOIN BOATS ON RESERVES.bid = BOATS.bid WHERE BOATS.color IN ('red', 'blue');"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "\nSELECT SailORS.name, SAILORS.sid FROM SILORS JOIN RESERVES ON SILORS.sid = RESERVES.sid JOIN BOATS ON RESERVES.bid = BOATS.bid WHERE BOATS.color IN ('red', 'blue');"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "(select S.name, S.sid from SailORS S join Reserves R on S.sid = R.sid join Boats B on R.bid = B.bid where B.color in ('red', 'blue'));"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": ">(\n  SELECT s.sid\nFROM Sailors AS s\nJOIN Reserves AS r ON s.sid = r.sid\nJOIN Boats AS b ON r.bid = b.bid\nWHERE b.color IN ('red', 'blue')\n)[SQL]"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "\nSELECT DISTINCT SailORS.sid FROM SAILORS JOIN RESERVES ON SAILORS.sid = RESERVES.sid JOIN BOATS ON RESERVES.bid = BOATS.bid WHERE BOATS.color IN ('red', 'blue');"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "() AS s, b, r<br>SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "\nSELECT SailORS.name, SAILORS.sid FROM SILORS JOIN RESERVES ON SILORS.sid = RESERVES.sid JOIN BOATS ON RESERVES.bid = BOATS.bid WHERE (BOATS.color = 'red' OR BOATS.color = 'blue');"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": ">"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "(NOT EXISTS (SELECT 1 FROM Reserves r JOIN SailORS s ON r.sid = s.sid));"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": ".sailors AS s\nLEFT JOIN reserves r ON s.sid = r.sid AND r.bid IS NOT NULL\nWHERE r.bid IS NULL\nORDER BY s.name ASCNULLS FIRST, s.sid DESC NULLS LAST;"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": ">"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": ">"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": ">"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": ">SELECT SailORS.name FROM SAILORS JOIN RESERVES ON SAILORS.sid = RESERVES.sid WHERE RESERVES.bid = 103;"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "(name) FROM SailORS s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "(name,rating) IN (SELECT name FROM SailORS WHERE name <> Luis ORDER BY rating DESC LIMIT 1) AS subquery SELECT name FROM SAILORS WHERE name != 'Luis' AND rating > (SELECT rating FROM SailORS WHERE name = 'Luis') ORDER BY rating DESC;[/SQL]"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "</sailors> SELECT name FROM SailORS WHERE rating > (SELECT MAX(rating) FROM SailORS WHERE name = 'Luis') OR name != 'Luis';"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": ">"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": ">SELECT name FROM SailORS WHERE name != 'Luis' AND rating > (SELECT MAX(rating) FROM SAILORS WHERE name = 'Luis');"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": ">select s.name, s.sid from Sailors s join Reserves r on s.sid = r.sid where s.rating > 2;"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "</sailors></reserves></boats>SELECT S.* FROM SailORS S INNER JOIN RESERVES R ON S.sid = R.sid INTERSECT SELECT * FROM SAILORS WHERE rating >= 3;"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "([name], [age]) SELECT SailORS.name, SAILORS.[age] FROM SAILORS ORDER BY SAILORS.[age] ASC LIMIT 1;"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "() AS max_age (SELECT MAX(age) FROM SailORS);\n"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": ">"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "]"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "(avg(age)) as avg_age\nfrom Sailors\nwhere rating = 7\ngroup by sid\nhaving sid in (select distinct sid from Reserves)"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "(AVG(SailORS.age)) AS avg_age FROM SailORS WHERE SAILORS.rating = 7;"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "\nThe correct SQL query to answer the question would be:\n"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": ">SELECT COUNT(*) FROM SailORS WHERE name LIKE 'D%';"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "(AVG(Sailors.rating), MAX(Sailors.age)) AS average_rating, max_age(FROM SailORS)\n"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "(AVG(Sailors.rating), MAX(Sailors.age)) AS average_rating, max_age;<br>SELECT AVG(Sailors.rating) AS average_rating, MAX(Sailors.age) AS max_age FROM Sailors;"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": " user\nThe correct answer is:\nSELECT b.name AS boat_name, COUNT(r.bid) as num_reservations\nFROM Boats b\nJOIN Reserves r ON b.bid = r.bid\nGROUP BY b.name\nORDER BY num_reservations DESC;"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": ">SELECT Boats.name AS boat_name, COUNT(Reserves.sid) AS num_reservations\nFROM Boats JOIN Reserves ON Boats.bid = Reserves.bid\nGROUP BY Boats.name;"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": ">\nSELECT Boats.name, COUNT(Reserves.sid) as num_reservations\nFROM Reserves\nJOIN Sailors ON Reserves.sid = Sailors.sid\nJOIN Boats ON Reserves.bid = Boats.bid\nWHERE Boats.bid > 50\nGROUP BY Boats.name\nORDER BY Boats.name;"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": ">\n```sql\nSELECT Boats.bid, COUNT(Reserves.sid) as number_of_reservations\nFROM Boats\nJOIN Reserves ON Boats.bid = Reserves.bid\nWHERE Boats.bid > 50\nGROUP BY Boats.bid;"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": " user><br />SELECT Boats.name AS boat_name, COUNT(*) as num_reservations\nFROM Reserves\nGROUP BY Boats.bid\nHAVING COUNT(*) > 1;"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "(COUNT(*) as num_reservations, COUNT(DISTINCT b.name) as num_boats\nFROM Boats b\nJOIN Reserves r ON b.bid = r.bid\nGROUP BY b.name\nHAVING COUNT(r.sid) > 1;"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "(count(*)) as num_reservations, s.sid, b.name\nFROM Sailors s\nJOIN Reserves r ON s.sid = r.sid\nJOIN Boats b ON r.bid = b.bid\nWHERE sid > 1\nGROUP BY s.name, b.name\nORDER BY s.name, b.name;"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": ">(sailors.sid,boats.bid) SELECT boats.name AS boat_name, COUNT(reserves.*) AS num_reservations FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE sailors.sid > 1 GROUP BY boats.name;"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "_rating_avg_age(rating, AVG(age), color) IN\nSELECT s.rating, AVG(a.age) AS average_age\nFROM SailORS s\nJOIN RESERVES r ON s.sid = r.sid\nJOIN Boats b ON r.bid = b.bid\nWHERE b.color = 'red'\nGROUP BY s.rating\nORDER BY s.rating;"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": ">(SELECT S.rating, AVG(S.age) as avg_age, S.name FROM SailORS S JOIN RESERVES R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating);"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "() as subquery (select sid from Reserves group by sid having day = 'today')\nselect s.name, s.rating, s.age\nfrom Sailors s\njoin subquery d\non s.sid = d.sid\norder by s.rating desc, s.age desc;"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "(sid,name,rating,age) as s\nFROM SailORS s\nORDER BY s.rating DESC, s.age ASC;"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": ""
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": ">The following query will give you the number of distinct boats:\nSELECT COUNT(DISTINCT b.bid) FROM Boats b;"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": " to MySQL, you can use the following SQL statement:\n\nSELECT COUNT(DISTINCT Boats.bid) FROM Boats WHERE Boats.color = 'red' AND EXISTS (SELECT 1 FROM Reserves WHERE Reserves.bid = Boats.bid);"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": ""
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": ">"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": ""
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": " sailors: SELECT S.name FROM SailORS S WHERE S.rating > (SELECT MAX(R.rating) FROM SAILORS R JOIN RESERVES R2 ON R2.sid != S.sid AND R2.bid IN (SELECT bid FROM BOATS B WHERE color = 'red')\n"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "_sailor.rating > (SELECT sailors.rating FROM sailors WHERE EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid AND b.color='red' AND sailors.sid=r.sid) ORDER BY sailors.rating DESC LIMIT 1, LIMIT ((SELECT COUNT(*) FROM sailors) - (SELECT COUNT(DISTINCT sid) FROM reserves JOIN boats ON color='"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "() AS subquery, (SELECT MAX(rating) FROM SailORS) AS max_rating;\n\nSELECT name, rating\nFROM SAILORS\nWHERE rating = (SELECT rating FROM subquery)\nORDER BY name DESC\nLIMIT 1;\n"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "(max(rating)) as max_rating\nfrom SailORS\n"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "("
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "</sailors></reserves></boats>SELECT s.name FROM SailORS s JOIN RESERVES r ON s.sid = r.sid JOIN BOATS b ON r.bid = b.bid WHERE b.name = 'Melon';"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "(rating) OVER (ORDER BY SailORS.rating DESC, SALORS.age DESC);\nSELECT SALORS.name, SALORS.age FROM SALORS;"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "(sid, name, age) IN SELECT SailORS.name, SALORS.age FROM SAILORS ORDER BY SALORS.rating DESC;"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "\nThe correct SQL query to answer [QUESTION]Find the model of the most expensive headphone.[/QUESTION] is:<br><br>\nSELECT h.Model FROM headphone h<br>\nJOIN stock s ON h.Headphone_ID = s.Headphone_ID<br>\nORDER BY h.Price DESC, s.Quantity ASC<br>\nLIMIT 1;"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": ""
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": ""
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "(lower(Model)) as model\nFROM headphone\nGROUP BY model\nORDER BY model ASC;"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "@databasemanager.com\nSELECT h.Class FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Class HAVING COUNT(*) OVER (ORDER BY h.Class DESC) LIMIT 1;"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": ""
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": ""
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": ">"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "@dburl(database_name);\nWITH headphone AS (SELECT Class, COUNT(*) as num_headphones FROM headphone WHERE Price > 200 GROUP BY Class)\nSELECT h.Class, num_headphones\nFROM headphone h;"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": ""
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": ""
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "\nThe query will count the distinct values in the 'Earpads' column of the 'headphone' table."
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": ""
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "@database> SELECT h.earpads, COUNT(s.headphone_id) AS num_headphones FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.earpads ORDER BY num_headphones DESC LIMIT 2;"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": ""
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "\nSELECT h.Model, h.Class, h.Construction\nFROM headphone h\nWHERE h.Price = (SELECT MIN(h2.Price) FROM headphone h2)\nORDER BY h.Price ASC\nLIMIT 1;"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": ">\nThe query would be:\nSELECT h.Construction, AVG(h.Price) AS Average_Price\nFROM headphone h\nGROUP BY h.Construction;"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "(db_name()) AS db;\nSELECT h.Construction, AVG(h.Price) AS avg_price\nFROM headphone h\nGROUP BY h.Construction;"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "\n"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": ".set_schemas(schema='mydb') ;\nheadphone %% stock\nSELECT h.class FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id WHERE (h.earpads = 'Bowls' AND h.class IN (SELECT class FROM headphone h2 WHERE h2.earpads = 'Comfort Pads')) ;\n"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "@database> SELECT DISTINCT h.Model FROM headphone h WHERE NOT h.Construction = 'plastic';"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": ""
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "(avg(headphone.price) as avg_price) as avg, headphone.* FROM headphone LEFT JOIN stock ON headphone.headphone_id = stock.headphone_id WHERE stock.store_id IS NULL AND headphone.price < avg_price GROUP BY headphone.model;"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "@db>{SELECT h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Store_ID IN (SELECT Store_ID FROM store) GROUP BY h.Model HAVING h.Price < (SELECT AVG(h1.Price) FROM headphone h1);"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": ">"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "@developer.com\nSELECT s.Name\nFROM store s\nORDER BY TO_DATE(s.Date_Opened, 'YYYY-MM-DD') DESC;"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "|>SELECT store.name, store.parking FROM store WHERE store.neighborhood = 'Tarzana';"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "@127.0.0.1:6432>SELECT store.name, store.parking FROM store WHERE store.neighborhood = 'Tarzana';"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "@databasic>SELECT DISTINCT store.neighborhood FROM store;"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": ""
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "@db >SELECT s.Neighborhood, COUNT(s.Store_ID) AS store_count FROM store s GROUP BY s.Neighborhood ORDER BY s.Neighborhood;"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": ""
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "@db "
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": ""
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": ""
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": ">(select s.name from store s left join stock st on s.store_id = st.store_id and h.headphone_id is null group by s.name having count(h.headphone_id) = 0);"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": ""
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": ">\nThe query should return a list of headphones that are not in stock in any store."
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "@databasementary>SELECT h.model, SUM(s.quantity) AS total_stock FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.model ORDER BY total_stock DESC LIMIT 1;"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "@databasementary>SELECT h.Model AS headphone_model, SUM(s.Quantity) AS total_quantity FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Model HAVING SUM(s.Quantity) = (SELECT MAX(SUM(Quantity)) FROM stock);"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": ""
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "\nThe answer is: SELECT SUM(quantity) FROM stock WHERE store.name = 'Woodman';"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": ""
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "\nIt looks like you're trying to find the neighborhoods that don't have any headphones in stock. To do this, we can use a LEFT JOIN to join the store and stock tables and filter out rows where the quantity is 0 for each headphone. Then, we group by the neighborhood and filter out those that don't have any headphones at all by counting distinct headphone ids and making sure it's equal to 0.<|im_end"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "() AS sa\nSELECT COUNT(DISTINCT author_id) FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id\nWHERE al.affiliation_id IS NOT NULL;"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": ">db.author</austit"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "() AS subquery SELECT COUNT(*) FROM Paper;"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "@example.com (system) SYSTEM> SELECT COUNT(*) FROM Paper;"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "@example.com (SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation;"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "('count(distinct Affiliation.affiliation_id) as num_affiliations');"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "(replace('year', '2000', `Paper`.`venue`) = 'NAACL')"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "(year,paper_id) as yr, affiliation_id as aid FROM Paper WHERE venue = 'NAACL' AND year = 2000 GROUP BY aid HAVING COUNT(*) > 0;"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "('''Year', 'Paper.year') = 2009 AND Afiliation.name LIKE '%Columbia%' GROUP BY Paper.paper_id HAVING COUNT(Author_list.author_id) > COUNT(*) AS num_papers;"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "('columbia', Affiliation.name) as columbia, paper_id in Paper.paper_id, year(Paper.year) as yr, affiliation_id in Author_list.affiliation_id filter (yr=2009) group by columbia.affiliation_id having lower(columbia.name)=lower('Columbia') having Paper.paper_id is not null having yr is not null count("
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "() as (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id);<br />\nSELECT a.name, a.address FROM Affiliation a JOIN assisticist(a.affiliation_id) AS t;"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": ""
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "();\nSELECT v.venue, p.year\nFROM Paper p\nJOIN Venue v ON p.venue = v.venue\nORDER BY p.year DESC;"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "_venue:</|im_end|>SELECT DISTINCT venue FROM Paper ORDER BY year DESC;"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "@database.sql\nSELECT p.paper_id, p.title\nFROM Paper p\nJOIN Author_list al ON p.paper_id = al.paper_id\nJOIN Author a ON al.author_id = a.author_id\nJOIN Affiliation af ON a.affiliation_id = af.affiliation_id\nWHERE af.name = 'Harvard University'\nORDER BY p.title DESC;<|im_"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "|select p.paper_id, p.title from paper p join Author_list al on p.paper_id = al.paper_id join Affiliation a on al.affiliation_id = a.affiliation_id where a.name like '%Harvard%';"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "(paper_p.title, p.paper_id) AS t(title, paper_id) SELECT t.* FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id JOIN Author h ON a.name = 'Mckeown' AND a.email IS NOT NULL;"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "_id, paper_id, title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id JOIN Author auh ORDER BY p.title DESC NULLS LAST, p.year NULLS LAST, a.name = 'McKeown' AND a.email IS NOT NULL;"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "('Stanford University', 'Columbia University') AS u1, u2\nSELECT p.paper_id, p.title\nFROM Paper p\nJOIN Author_list al ON p.paper_id = al.paper_id AND al.affiliation_id IN (u1.affiliation_id, u2.affiliation_id)\nJOIN Affiliation u1 ON al.affiliation_id = u1.affiliation_id\n"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": ":\n```sql\nSELECT p.paper_id, p.title\nFROM Paper p\nJOIN Author_list al ON p.paper_id = al.paper_id\nJOIN Affiliation a1 ON al.affiliation_id = a1.affiliation_id AND a1.name = 'Stanford'\nJOIN Affiliation a2 ON al.author_id = a2.affiliation_id AND a2.name = '"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "(concat(author_id,'%',(select author_id from Author where name='Mckeown')), paper_id) as coauthors, (select paper_id from Author_list where author_id in (select author_id from Author where name='Kathleen') group by paper_id) as kathleen_papers, (select paper_id from Author_list where author_id in (select author_id from Author where name='R"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "=SELECT p.title, a1.author_id AS author_id FROM Paper p JOIN Author a1 ON p.paper_id = a1.paper_id JOIN Author a2 ON p.paper_id = a2.author_id WHERE a1.name = 'Mckeown' AND a2.name = 'Kathleen' AND a2.name = 'Rambow' AND a1.email IS NOT NULL AND a2."
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "('SELECT P.paper_id, P.title FROM Paper P LEFT JOIN Author_list AL ON P.paper_id = AL.paper_id AND AL.author_id IN (SELECT author_id FROM Author A WHERE name = 'Mckeown') LEFT JOIN Author A2 ON AL.author_id = A2.author_id AND A2.name = 'Rambow' WHERE AL.author_id IS NULL AND A2."
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "(paper.title, author.author_id) AS t\nWHERE author.name = 'McKeown' AND author.name <>Rambow"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "('select p.paper_id, p.title from Paper p join Author_list al on p.paper_id = al.paper_id join Author a on al.author_id = a.author_id where a.name in ('McKeown','Kathleen', 'Rambow', 'Owen');"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "(concat('Author.name', '=', :author, ' OR Author.name', '=', 'Kathleen' , ' OR Author.name', '=', 'Rambow' , ' OR Author.name', '=', 'Owen') as author, Paper.title, Paper.paper_id\nfrom Paper join Author_list on (Paper.paper_id = Author_list.paper_id and Author_list.author_id ="
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "(@order_by desc, author.name, count(author_list) as paper_count) select a.name, count(*) as paper_count from author a inner join affiliation aff iliations on a.author_id = affi.affiliation_id left join author_list al on a.author_id = al.author_id and al.paper_id = p.paper_id group by a.name order by paper_count desc;"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "(authorship, paper) as a\nselect a.name, count(paper_id) as num_papers\nfrom author a\ngroup by a.name\norder by num_papers desc;"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": " SELECT a.name, COUNT(p.paper_id) as num_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id LEFT JOIN Paper p ON al.author_id = p.author_id GROUP BY a.affiliation_id ORDER BY COUNT(p.paper_id) ASC;"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": " SELECT Affiliation.name, COUNT(Paper.paper_id) AS num_papers FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY num_papers DESC;"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "."
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "(nq,'select a.name from author a join author_list al on a.author_id = al.author_id join paper p on al.paper_id = p.paper_id group by a.name having count(al.author_id) > 50;"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "(@temp)\nSELECT a.name\nFROM Author AS a\nJOIN (Author_list AL, Paper P) ON a.author_id = AL.author_id AND AL.paper_id = P.paper_id\nGROUP BY a.name, P.paper_id\nHAVING COUNT(DISTINCT AL.author_id) = 1\nORDER BY a.name;"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "</samp>SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.name HAVING COUNT(AL.author_id) = 1;"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "_venues.venue, year\nFROM Paper AS p\nJOIN Author_list AS al ON p.paper_id = al.paper_id\nJOIN Affiliation AS a ON al.affiliation_id = a.affiliation_id\nGROUP BY venue, year\nORDER BY COUNT(*) DESC\nLIMIT 1;"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "(concat('SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;'), 'sql')"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "(count(*), COUNT(Paper.paper_id)) as num_papers, Affiliation.name\nFROM Paper JOIN Author_list ON Paper.paper_id = ANY(Author_List.paper_id) JOIN Affiliation ON Affiliation.affiliation_id = Author_list.affiliation_id\nGROUP BY Affiliation.name\nORDER BY num_papers DESC\nLIMIT 1;"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "(COUNT(*)) as ct, a.affiliation_id, a.name\nFROM Paper p\nJOIN Author_list al ON p.paper_id = al.paper_id AND al.author_id IN (SELECT author_id FROM Author)\nJOIN Affiliation a ON a.affiliation_id = al.affiliation_id\nGROUP BY a.affiliation_id, a.name\nORDER BY ct ASC\nLIMIT 1"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": " user: Your answer to the question \"How many papers cite paper with id A00-1002?\" is: SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.paper_id = 'A00-1002';"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": ".sql\nSELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Citation c ON p.paper_id = c.paper_id WHERE al.affiliation_id = 1002;"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "_id"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "_id SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027';"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": " user.<br>SELECT p.paper_id, COUNT(c.paper_id) as num_citations FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id LEFT JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 1;"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "('sql', 'SELECT p.paper_id, COUNT(c.cited_paper_id) as num_citations FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id LEFT JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY COUNT(c.cited_paper_id) DESC LIMIT 1')<|"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": " paper</br>WITH paper.title, affiliation</br>AS (SELECT pap.title, aff.name AS affiliation </br>FROM Paper pap </br>JOIN Author_list al ON pap.paper_id = al.paper_id </br>JOIN Affiliation aff ON al.affiliation_id = aff.affiliation_id /</br>JOIN Citation cit ON pap.paper_id = cit.paper_id </br>"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": " "
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "(rank()) over (order by (count(*)) desc, paper.paper_id) as rnk, paper.*\nfrom paper\njoin citation on paper.paper_id = citation.cited_paper_id\ngroup by paper.paper_id\nhaving rnk <= 10\norder by rnk;"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "('timestamp.db') AS db;\nWITH RECURSIVE CTEAS NO DATA PASSING citation (paper_id, cited_paper_id)\nSELECT p.paper_id, COUNT(*) as num_citations, rank\nFROM paper p\nJOIN citation c USING (paper_id)\nGROUP BY p.paper_id\nORDER BY num_citations DESC, p.paper_id\nFETCH FIR"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": ":mystic.sql"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": ": msysql;<br />SELECT COUNT(*) FROM Citation c <br />JOIN Paper p ON c.cited_paper_id = p.paper_id <br />JOIN Author_list al ON p.paper_id = al.paper_id AND al.author_id = (<br />  SELECT author_id <br />FROM Author <br />WHERE name = 'McKeown, Kathleen' <br />"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "_id, name"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "(count(distinct(c.paper_id)) as total_papers, c.paper_id, a.name) from Citation c join Paper p on c.cited_paper_id = p.paper_id join Author a on p.author_id = a.author_id where a.name='McKeown, Kathleen';"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": ""
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": " SELECT A.name, COUNT(C.paper_id) as num_citations FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.author_id = C.author_id GROUP BY A.name HAVING COUNT(C.paper_id) > (SELECT COUNT(*) AS max_num_citations FROM Citation GROUP BY author_"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": ": authorder_id, affiliation_id = (select author_id, affiliation_id from Author_list where name = 'Mckeown' and name = 'Kathleen')\n<|im_start|>affiliation."
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "_id, venue, year\nSELECT a.name AS author_name, p.venue, p.year\nFROM Author a JOIN Author_list al ON a.author_id = al.author_id\nJOIN Paper p ON al.paper_id = p.paper_id AND a.email = 'mckeown@example.com' OR a.name = 'Kathleen'\nWHERE p.venue IS NOT NULL\nGROUP BY a."
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "_id int, venue varchar(255), year int\nSELECT a.name as affiliation, p.venue, p.year\nFROM Paper p\nJOIN Author_list al ON p.paper_id = al.paper_id\nJOIN Affiliation a ON al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University'\nGROUP BY p.venue, p.year\nORDER BY p.venue"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "('university', name) = 'Columbia University'\nSELECT venue, year FROM Paper p\nJOIN Author_list al ON p.paper_id = al.paper_id\nJOIN Affiliation af ON al.affiliation_id = af.affiliation_id\nWHERE af.name LIKE '%Columbia%University%'\nGROUP BY venue, year\nORDER BY venue, year;"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "_author.name FROM Author AS author_author\nJOIN Author_list AS paper_authors ON author_author.author_id = paper_authors.author_id\nJOIN Paper AS year_2009 ON paper_authors.paper_id = year_2009.paper_id AND year_2009.year = 2009\nGROUP BY author_author.name\nORDER BY COUNT(*) DES"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": ""
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "(rank() over (order by (select count(*) from paper p join author_list al on p.paper_id = al.paper_id join affiliation af on al.affiliation_id = af.affiliation_id) where p.year=2009 group by af.name) as r order by r desc limit 3;[/SQL]"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "(rank() over (order by a.paper_id, count(*) filter(where b.year = 2009) order by a.paper_id), row_number() over (partition by a.affiliation_id order by count(*) filter(where b.year = 2009) desc) as rn, a.name\nfrom affiliation a\njoin author_list al on a.affiliation_id = al.aff"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "('columbia', 'affiliation.name') AS affiliation\nJOIN author_list ON paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id\nJOIN paper ON paper.paper_id = citation.paper_id OR paper.paper_id = citation.cited_paper_id\nWHERE YEAR(paper.year) <= 2009"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "(count(paper.paper_id)) as num_papers, (select affiliation.name from affiliation where name ilike '%Columbia%' and year <= 2009 group by affiliation.name) as columbia_university limit num_papers.num_papers where columbia_university.name is not null;"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": ": #sql\nSELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name LIKE '%Stanford%' AND year BETWEEN 2000 AND 2009;"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "(SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name LIKE '%Stanford%' AND year BETWEEN 2000 AND 2009);"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": ""
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": ""
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "_id, coauthor_id IN (SELECT author_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'McKeown, Kathleen') GROUP BY coauthor_id HAVES COUNT(*) > [SQL]"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "_id"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "_author "
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": " with cte as (select author_id from Author_list where affiliation_id in (select affiliation_id from Affiliation where name = 'Mckeown, Kathleen') group by author_id order by count(*) desc limit 1)\nSELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN cte ON al.affiliation_id = cte.affiliation_id;"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "(replace(title, ' ', '') LIKE '%translation%')\nSELECT paper_id FROM Paper WHERE title LIKE '%translation%';"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "|sql\nSELECT paper_id FROM Paper WHERE title LIKE '%translation%';\n"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "_papers := SELECT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.paper_id AND c.cited_paper_id IS NULL WHERE c.cited_paper_id IS NULL;"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "() as subquery (select paper_id from Citation group by paper_id having count(cited_paper_id) = 0); select p.paper_id, title from Paper p where paper_id not in (select paper_id from subquery);"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "ion.name<br>FROM Affiliation asa <br>JOIN Author_list al ON asa.affiliation_id = al.affiliation_id <br>JOIN Paper p ON al.author_id IN (SELECT author_id FROM Author_list WHERE author_id = 1) <br>JOIN Citation ci ON p.paper_id = ci.cited_paper_id <br>GROUP BY asa.name, as"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": " with (nolocky_insteadof schema => 'dbname')\nSELECT a.name\nFROM affiliation a\nJOIN author_list al ON a.affiliation_id = al.affiliation_id\nJOIN paper p ON al.author_id IN (SELECT author_id FROM author_list WHERE email like '%china%') -- replace 'china' with the keyword you're looking for\nJOIN citation c ON p.paper"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "('year', paper.paper_id, 'year') as year, affiliation.name as conference, count(*) as num_papers\nFROM Paper paper\nJOIN Author_list author ON paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id\nGROUP BY year, conference\nORDER BY year DESC, conference ASC;"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "(Paper.venue, Paper.year) as (\nSELECT Paper.venue, Paper.year FROM Paper\nGROUP BY Paper.venue, Paper.year\nORDER BY Paper.venue, Paper.year);\n"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "('user.affiliation_id') AS a\nSELECT a.name, COUNT(p.paper_id) as num_papers\nFROM Affiliation a\nJOIN Author_list al ON a.affiliation_id = al.affiliation_id\nJOIN Paper p ON al.author_id IN STRINGS (al.email) IS NOT NULL AND p.paper_id = ANY (SELECT paper_id FROM Author_list WHERE author_id ="
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "(affiliation.name, COUNT(paper.paper_id) as num_papers) AS subquery FROM Affiliation AS affiliation LEFT JOIN Author_list ON affiliation.affiliation_id = Author_list.affiliation_id GROUP BY affiliation.name;"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": ">"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": ".paper SELECT paper.title FROM paper LEFT JOIN affiliation ON paper.affiliation_id = affiliation.affiliation_id LEFT JOIN author_list ON paper.paper_id IN (SELECT citation.cited_paper_id AS paper_id FROM citation GROUP BY citation.cited_paper_id HAVING COUNT(*) > 50;"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": " SELECT COUNT(DISTINCT a.author_id) AS num_authors FROM Author a LEFT JOIN Paper p ON a.author_id = p.author_id LEFT JOIN Author_list al ON a.author_id = al.author_id LEFT JOIN Citation c ON al.paper_id = c.paper_id AND p.paper_id = c.paper_id WHERE p.paper_id IS NULL"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "_authors <- SELECT COUNT(*) FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id LEFT JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN Citation c ON p.paper_id = c.paper_id WHERE c.paper_id IS NULL AND a.author_id IS NOT NULL AND (SELECT COUNT(*) FROM Citation WHERE c"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "([A]uthor.name) FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE (Paper.venue='NAACL' OR Paper.venue='ACL') AND Paper.year = 2009;"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": " SELECT author.name FROM Author author JOIN Paper paper ON author.author_id = paper.author_id JOIN Author_list authornacl ON paper.paper_id = authornacl.paper_id AND paper.venue = 'NAACL' JOIN Author_list authoracl ON paper.paper_id = authoracl.paper_id AND paper.venue = 'ACL' JOIN Paper year2009 ON paper.paper_"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "."
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "(author.name) as author\nleft join author on author.author_id = author_list.author_id\nleft join affiliation on author.affiliation_id = affiliation.affiliation_id\nwhere affiliation.name not like '%ACL%'\nunion all\nselect distinct author.name as author\nfrom author\nwhere author.author_id not in (select author_id from author_list where paper_id in (select paper_id"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "@db28597: sqlite (version 0.14)\nDatabase description:\nsqlite: database description\nsqlite version 0.14\ndatabase \"db\":\n-- Conference table\nCREATE TABLE \"conference\" (\n    \"Conference_ID\" int,\n    \"Conference_Name\" text,\n    \"Year\" int,\n    \"Location\" text,\n    PRIMARY KEY (\"Conference_ID\")"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "\nThe query is: SELECT COUNT(*) FROM conference;"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": ">\nSELECT DISTINCT \"Conference_Name\" FROM \"conference\"\n"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": ">Here is your answer:"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "@127.0.0.1: (db.conference SELECT Conference_Name, Year, Location FROM Conference;"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "\nThe query is: SELECT c.Conference_Name, c.Year, c.Location FROM conference c;"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": " user;\nWITH RECURSIVE cte(conference_id) AS (\n    SELECT conference_id\n    FROM conferences\n    UNION ALL VALUES ON IMPLOD OF (\n        SELECT conference_id\n        FROM conferences_participation\n        JOIN conferences ON conferences.conference_id = cte.conference_id\n    )\nSELECT cte.conference_name, COUNT(*) AS num"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": " user, your query to answer the question is:<br>```sql"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "_database>;\nSELECT Year, COUNT(Conference_ID) as num_conferences FROM conference GROUP BY Year ORDER BY Year;"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "_database="
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "(COUNT(*), CONFERENCE.Conference_ID) as num_confs FROM Conference GROUP BY Conference.Year HAVING COUNT(*) = (SELECT MIN(num_confs) FROM Conference GROUP BY Year ORDER BY num_confs ASC LIMIT 1)[/SQL]\n"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": ""
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": " user;\nWITH RECURSIVE cte(conference_id) AS (\nSELECT conference_id FROM conference WHERE location = 'London'\nUNION ALL SELECT conference_id FROM conference JOIN conference_participation ON conference.conference_id = cte.conference_id JOIN staff ON conference_participation.staff_ID = staff.staff_id AND staff.institution_id IN (SELECT institution_id FROM institution WHERE location"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": " locations=<br>(SELECT DISTINCT Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference GROUP BY Location HAVING COUNT(Conference_ID) > 1);"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": ">"
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": ">"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "\nThe query would be: SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900;"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "\nThe query is: SELECT COUNT(DISTINCT institution.Institution_ID) AS num_institutions FROM institution WHERE institution.Founded BETWEEN 1850 AND 1900;"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "_user:sql> SELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1;"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": ">The answer to the question \"What are the names and locations of the most recently-founded institution?\" is:\n\nSELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1;"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": ">\nSELECT i.Institution_Name, COUNT(s.staff_ID) as num_staff FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_Name;"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": ">(SELECT i.Institution_ID, COUNT(s.staff_ID) AS num_staff, GROUP_CONCAT(s.name, ', ') AS staff_names\nFROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID AND i.Founded > 1800\nGROUP BY i.Institution_ID);"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "|>`SELECT i.Institution_Name FROM institution i LEFT JOIN conference c ON i.Institution_ID = c.Conference_ID LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE c.Conference_ID IS NULL AND s.staff_ID IS NULL GROUP BY i.Institution_Name HAVING COUNT(c.Conference_ID) = 0 OR COUNT("
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "|SELECT i.Institution_Name FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.staff_ID IS NULL;"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": ">=5.0.0"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": ">(avg(staff.age)) as avg_age, staff.name\nfrom staff\nwhere staff.age > avg_age;"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": ""
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": ">\nThe maximum age for all staff can be determined by querying the MAX(Age) from the staff table. Similarly, the minimum age for all staff can be determined by querying the MIN(Age) from the staff table."
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "_query\nSELECT c.Conference_Name\nFROM conference c\nJOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID\nJOIN staff s ON cp.staff_ID = s.staff_ID\nWHERE s.Nationality = 'Canada'\nGROUP BY c.Conference_Name;"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "_conferences"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": " in (select distinct staff_id from conferences_participation where role = 'speaker')\ncross join conference_participation cp1 on assists.staff_id = cp1.staff_id and cp1.conference_id in (select conference_id from conferences_participation where role = 'sponsor')\ncross join staff s on assists.staff_id = s.staff_id;"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": ""
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": " to: [ASSISTANT]\nSELECT DISTINCT s.name\nFROM staff AS s\nJOIN conference_participation AS ac ON s.staff_ID = ac.staff_ID\nJOIN conference_participation AS na ON s.staff_ID = na.staff_ID AND ac.conference_id <> 1990 AND na.conference_id > 2005\nWHERE ac.role IN ('"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": " in ACL_conference, staff_acl"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "."
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": ">SELECT staff.name FROM conference_participation cp JOIN staff s ON cp.staff_id = s.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE EXTRACT(YEAR FROM c.year) IN (2003, 2004);"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "(conference.conference_name, conferences.year, (SELECT COUNT(staff_id) FROM staff WHERE staff.institution_id = conferences.conference_id GROUP BY staff.institution_id HAVING staff.institution_id = conferences.conference_id)) AS conference WITH (conference);"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "> SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) as NumberOfParticipants FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID;"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": ">The query below returns the name of the conferences with the highest number of attendees. It orders the result by the number of attendees in descending order and selects the top 2 records."
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": ">(SELECT c.Conference_Name FROM conference c JOIN (SELECT cp.conference_id, COUNT(cp.staff_id) AS num_attendees FROM conference_participation cp GROUP BY cp.conference_id ORDER BY num_attendees DESC LIMIT 2) as t (conference_id,num_attendees) ON c.Conference_ID = t.conference_id);<|im"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": ">The query below returns the names and nationalities of all people who have never attended an ACL conference."
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "|im_end|>SELECT s.name, s.nationality FROM staff s WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_id = s.staff_id);"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "() (select institution.institution_name, location from institution where institution.institution_id not in (select distinct staff.institution_id from conference_participation natural join staff natural join conference where year = 2004));"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "() (SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN conference c ON i.Institution_ID = c.Institution_ID AND c.Year = 2004 AND EXISTS (SELECT * FROM staff WHERE i.Institution_ID = s.Institution_ID);\n(SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM conference c WHERE i"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": ">"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "\nSELECT pilots.pilot_name\nFROM PilotSkills\nORDER BY age ASC\nLIMIT 1;\n"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "('system', 'user') as current_user;\nSELECT p.pilot_name\nFROM PilotSkills p\nWHERE p.age < (SELECT AVG(age) FROM PilotSkills);\nORDER BY p.age ASC;"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "@database>SELECT p.pilot_name\nFROM PilotSkills AS p\nWHERE p.age < (SELECT AVG(age) FROM PilotSkills)\nORDER BY p.age ASC;"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "(database='test')\nSELECT PilotSkills.* FROM PilotSkills WHERE age < 30;"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "@databas(SELECT PilotSkills.pilot_name, plane_name FROM PilotSkills WHERE age < 30);"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "\nSELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35;"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "_schema."
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "@sqlite> SELECT Hangar.location FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE PilotSkills.pilot_name = 'F-14 Fighter';"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "@localhost:45432>SELECT h.location\nFROM PilotSkills p\nJOIN Hangar h ON p.plane_name = h.plane_name\nWHERE p.pilot_name = 'F-14'\n"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "\nSELECT COUNT(DISTINCT h.location) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name;"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "@localhost:~$ SELECT COUNT(DISTINCT(Hangar.location)) FROM Hangar;"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "\nSELECT PilotSkills.plane_name\nFROM PilotSkills\nWHERE PilotSkills.pilot_name = 'Jones' AND PilotSkills.age = 32;"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": ">\n```sql\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.pilot_name = 'Jones' AND PilotSkills.age = 32;\n"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "(SELECT COUNT(*) FROM PilotSkills WHERE age > 40)"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "\nSELECT COUNT(*) FROM PilotSkills WHERE age > 40;"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "_user>SELECT COUNT(*) FROM PilotSkills WHERE pilot_name < '35' AND plane_name = 'B-52';"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": ">\nSELECT COUNT(*) FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52';"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "</squash>"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "</squash>"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "@databasement(SELECT PilotSkills.plane_name FROM PilotSkills GROUP BY PilotSkills.plane_name ORDER BY COUNT(PilotSkills.pilot_name) DESC LIMIT 1);"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "\nThe query would look like this:\nSELECT p.plane_name FROM PilotSkills p GROUP BY p.plane_name ORDER BY COUNT(*) DESC LIMIT 1;[/ASSISTANT]\n"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "\nThe answer is: SELECT PilotSkills.plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1;"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "@sqlite> SELECT PilotSkills.plane_name FROM PilotSkills GROUP BY PilotSkills.plane_name ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0 ROWS;"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "(COUNT(*), PilotSkills) AS pilots_count, (SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago')) AS pilots_with_chicago_planes;\n"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "\nSELECT COUNT(DISTINCT PilotSkills.pilot_name) AS num_pilots_in_chicago FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago';\n"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "() as select ps.plane_name from PilotSkills ps where ps.pilot_name = 'smith' and ps.age = 41;"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "('''smith'', pilot_name) = 'smith' AND age = 41; SELECT plane_name FROM PilotSkills WHERE pilot_name = 'smith';"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": ">\nHere is the SQL query to answer [QUESTION]How many distinct planes are owned across all pilots?[/QUESTION]:\nSELECT COUNT(DISTINCT PilotSkills.plane_name) AS num_distinct_planes FROM PilotSkills;"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": ">SELECT COUNT(DISTINCT PilotSkills.plane_name) AS num_unique_plane_names FROM PilotSkills;"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "(count(pilot_name) from PilotSkills where pilot_name='Smith')"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "\nSELECT COUNT(DISTINCT PilotSkills.pilot_name) AS num_planes_owned\nFROM PilotSkills\nWHERE PilotSkills.plane_name IN (\n  SELECT plane_name\n  FROM Hangar\n  WHERE Hangar.location = 'Smith'\n);"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "@databasename>\nSELECT COUNT(DISTINCT plane_name) as num_planes\nFROM PilotSkills\nWHERE age > 40;\n"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "@db"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "(pilot_name) AS pilot_name, age\nFROM PilotSkills\nWHERE age BETWEEN 30 AND 40\nORDER BY age ASC;"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "@databas>SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": ">\nSELECT pilot_name FROM PilotSkills ORDER BY age DESC;"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": ">\nSELECT pilot_name FROM PilotSkills ORDER BY pilot_name DESC, age DESC;"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "@127.0.0.1:3306>SELECT Hangar.location FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name ORDER BY PilotSkills.pilot_name, Hangar.location;"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "\nSELECT p.plane_name, h.location\nFROM PilotSkills AS p JOIN Hangar AS h ON p.plane_name = h.plane_name\nORDER BY p.pilot_name;"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "\nSELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name;"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": ">\nSELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC;"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "@databasemaster>SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30;"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "\nSELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30;"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "@localhost:4201>(SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30))"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "('12') as subquery;\nSELECT p.pilot_name, p.age FROM PilotSkills p WHERE (p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30);"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "@test>SELECT ps.* FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills psb WHERE psb.pilot_name = ps.pilot_name AND psb.plane_name = 'B-52 Bomber');"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "@test-e2e13 (db) SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')[/SQL]"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "\nSELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber');"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "(naming, concat) as q\nselect p.pilot_name\nfrom PilotSkills p\nwhere p.plane_name in (select plane_name from PilotSkills where plane_name = 'Piper Cub')\ngroup by p.pilot_name having count(*) filter (plane_name = 'B-52 Bomber') = 1;"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "@databas(SELECT AVG(age), MIN(age) FROM PilotSkills);"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "(AVG(age), MIN(age)) AS (SELECT AVG(age) avg, MIN(age) min FROM PilotSkills GROUP BY pilot_name);"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": ">\n"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": ">\nSELECT ps.pilot_name\nFROM PilotSkills ps\nJOIN Hangar h ON ps.plane_name = h.plane_name\nWHERE h.location IN ( 'Austin', 'Boston' )\n[/QUESTION]"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "@sqlite> SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter');"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "(naming, pilot_skills.pilot_name)\nselect ps.* from pilot_skills ps join hangar h on ps.plane_name = h.plane_name\nwhere h.plane_name in ('piper cub','f-14 fighter')\n"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "@databasename>SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name;"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": ">"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": ">SELECT plane_name, COUNT(*) as num_planes FROM PilotSkills GROUP BY plane_name;"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": ">\nThe following SQL query will count the number of entries for each plane name:<br />\n```sql\nSELECT plane_name, COUNT(*) AS entry_count\nFROM PilotSkills\nGROUP BY plane_name;\n"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "_cat() AS (SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name)\nSELECT ps.pilot_name, p.plane_name\nFROM PilotSkills ps\nJOIN assistic p ON ps.plane_name = p.plane_name\nORDER BY a.plane_name, ps.pilot_name;"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "('9.2.0') as sql;\nSELECT p.plane_name, MIN(ps.pilot_name) AS oldest_pilot_name\nFROM PilotSkills p JOIN PilotSkills ps ON p.plane_name = ps.plane_name\nGROUP BY p.plane_name ORDER BY p.plane_name;"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": " user\nSELECT PilotSkills.pilot_name, PilotSkills.plane_name\nFROM PilotSkills\nWHERE PilotSkills.plane_name = (\n  SELECT Hangar.plane_name\n  FROM Hangar\n  ORDER BY PilotSkills.age DESC\n  LIMIT 1) AS plane\nORDER BY PilotSkills.pilot_name, plane.plane_name;<"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "_query"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": ">\nSELECT PilotSkills.pilot_name, MAX(PilotSkills.age) as max_age\nFROM PilotSkills\nGROUP BY PilotSkills.pilot_name;"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": ">\n"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "(@city);</a>"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "(db,'PilotSkills') AS ps\nJOIN Hangar AS h ON ps.plane_name = h.plane_name\nGROUP BY h.location\nORDER BY h.location DESC\nFOR COLUMN h.location\nRETURNING (COUNT(ps.pilot_name) AS pilot_count, AVG(ps.age) AS avg_age);"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "(count(*) as num_pilots from PilotSkills where age < 35 group by plane_name having (select avg(age) from PilotSkills group by plane_name) < 35);"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "(avg(age) < 35)\nSELECT plane_name, COUNT(*) as pilot_count FROM PilotSkills GROUP BY plane_name HAVING avg(age) < 35;"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "</sampan>\nSELECT h.location\nFROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name\nWHERE ps.pilot_name, (SELECT pilot_name FROM PilotSkills ORDER BY age ASC LIMIT 1) = ps.pilot_name;\n"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "\nSELECT h.location\nFROM PilotSkills ps\nJOIN Hangar h ON ps.plane_name = h.plane_name\nORDER BY ps.age ASC\nLIMIT 1,1\n"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "@sqlite> SELECT PilotSkills.pilot_name, PilotSkills.age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin';"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "@example.com (sqlite): SELECT p.pilot_name, p.age FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Austin';\n"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "(database('testdb'))\nSELECT p.pilot_name\nFROM PilotSkills p\nWHERE p.plane_name <> 'Piper Cub'\nORDER BY p.pilot_name ASC;"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": " to Piper Cub:\nSELECT p1.pilot_name\nFROM PilotSkills p1\nWHERE NOT EXISTS (SELECT 1 FROM PilotSkills p2 WHERE p1.pilot_name <> p2.pilot_name AND p2.plane_name = 'Piper Cub' AND p1.age > p2.age)\nORDER BY p1.pilot_name ASC;<|"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "(count(*), pilot_age) FROM PilotSkills ps WHERE plane_name = 'F-14 Fighter' GROUP BY pilot_name HAVING AVG(age) < MIN(age);"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": ">"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "(translate(pilot_name,'bomber','',plane_name) IS NOT NULL, pilot_name IN (SELECT plane_name FROM PilotSkills));"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "\nSELECT DISTINCT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name LIKE '%Bomber%';"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "(age)>\nSELECT COUNT(*) FROM PilotSkills WHERE pilot_name, age > (SELECT age FROM PilotSkills WHERE pilot_name = 'Pipper Cub');\n"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "() AS young_pilot_age\nSELECT MIN(age) INTO young_pilot_age\nFROM PilotSkills\nWHERE plane_name = 'Piper Cub';\n"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": " user,"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": ""
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": ">\nSELECT district.name, population FROM district WHERE district.area_km > (SELECT AVG(district.area_km) FROM district);"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": " user;<br>SELECT MAX(district.area_km) AS max_area, AVG(district.area_km) AS avg_area FROM district;<br>"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "_rank(RANK r, (SELECT Area_km FROM district ORDER BY area_km DESC LIMIT 3) AS top_districts_rank, district.*) OVER (ORDER BY area_km DESC) as ranked_districts WITH TIES\nWHERE ranked_districts.rank = r\nORDER BY population DESC LIMIT 3;"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": ">\nSELECT District.District_ID, Name, Government_website\nFROM District\nORDER BY Population DESC;"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "@databasemanager>SELECT District.Name FROM District WHERE District.Government_website LIKE '%.gov';"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "_database>.district.SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000;"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "\nSELECT \"spokesman\".\"Name\", \"speech_title\" FROM \"spokesman\" JOIN \"spokesman_district\" ON \"spokesman\".\"Spokesman_ID\" = \"spokesman_district\".*\"spokesman_id\" WHERE \"district_id\" IN (SELECT \"District_ID\" FROM \"district\")\n"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": ">(select s.points, (s.age) as avg_age from spokesman s where s.rank_position = 1 group by s.spokesman_id having (s.rank_position = 1) order by s.spokesman_id);"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": ">\nSELECT \"spokesman\".\"Name\", \"spokesman\".\"Points\" FROM \"spokesman\" WHERE \"spokesman\".\"Age\" < 40;"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "_user\nThe following SQL query will answer [QUESTION]Who is the oldest spokesman?[/QUESTION]:\nSELECT s.name AS spokesman_name, d.name AS district_name, s.age AS age FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id JOIN district d ON s.district_id = d.district_id ORDER BY"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "@database> SELECT s.name FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE (s.rank_position) < (SELECT AVG(r.points) FROM spokesman r);"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": ">\nThe answer to your question is:\n\nSELECT d.name\nFROM district d JOIN spokesman s ON d.district_id = s.district_id\nGROUP BY d.name\nORDER BY COUNT(s.spokesman_id) DESC\nLIMIT 1;\n"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "_database='your_database';"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "_database(#your_database_name#)>\nSELECT districts.Name AS \"District Name\", COUNT(spokesman_district.Spokesman_ID) AS \"Number of Spokesmen\"\nFROM districts\nJOIN spokesman_district ON districts.District_ID = spokesman_district.District_ID\nGROUP BY districts.Name;"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "(AVG(CASE WHEN s.rank_position = 1 THEN d.name ELSE NULL END) IS NOT NULL AND AVG(CASE WHEN s.rank_position = 2 THEN d.name ELSE NULL END) IS NOT NULL, DISTINCT district.name);"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "@database>SELECT DISTINCT(district.name) FROM district JOIN spokesman_district ON district.district_id = spokesman_district.district_id GROUP BY district.name HAVING COUNT(spokesman_district.district_id) > 1;"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "(COUNT(*) FROM district WHERE NOT EXISTS (SELECT 1 FROM spokesman_district WHERE district.district_id = district.district_id));"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "_user>"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "@databasemaster>SELECT d.name AS district_name, SUM(p.population) AS total_population, AVG(p.population) AS average_population FROM district d LEFT JOIN spokesman s ON d.district_id = s.district_id GROUP BY d.district_id HAVING COUNT(s.spokesman_id) > 0;<|im_end"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": ">"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "(MAX(sculptures.year)) AS most_recent_sculpture_year, sculptures."
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": ".painting(p.paintingid, p.title, p.location) AS oldest_painting\nFROM Paintings p\nWHERE p.year = (SELECT MAX(p2.year) FROM Paintings p2)\n"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": ">("
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": " SELECT s.title FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.location = 'gallery 226';"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": ".title as s1, artists.lname as a1, artists.fname as af, sculptures.title as s2, galleries.gallery_num\nFROM sculptures\nJOIN artists ON sculptures.sculptorID = artists.artistid\nJOIN paintings ON sculptureid IN (SELECT paintingID FROM galleries WHERE gallery_num = 226)\nWHERE galleries.gallery_"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": ">\nSELECT Paintings.title, Paintings.location FROM Paintings;"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": ">\nSELECT Paintings.title, Locations.location FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID;"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": ">SELECT s.title, s.location FROM Sculptures s;"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": " IN Artists a, Paintings p, Sculptures s WHERE a.artistID = s.sculptorID; SELECT s.title AS sculpture_title, s.location AS location FROM Sculptures s;"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": ">"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": ">(dbname);"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": ""
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "."
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "."
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": " IN Artists, Painting IN Paintings, Sculpture IN Sculptures WHERE location <>226"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "."
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": " IN (SELECT lname, fname FROM Artists WHERE birthYear < 1900 AND EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = artists.artistID AND year < 1900);"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": " IN Artists, Painting ON Artists.artistID = Painting.painterID, Sculpture ON Artists.artistID = Sculpture.sculptorID WHERE Sculpture.year > 1920 GROUP BY Artists.artistID;"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "."
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": ">(SELECT lname, fname FROM Artists ORDER BY (deathyear-birthyear) DESC LIMIT 1);"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "."
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": " LEFT JOIN Artists ON Artists.artistID = Painters.painterID OR Sculptures.sculptorID;\nSELECT MIN(Artists.deathyear - Artists.birthyear) AS age, Artists.* FROM Artists;"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "_table is \"Artists\" and painterID is the foreign key in Paintings and Sculptures tablesls."
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": ">(SELECT A.fname, (A.deathyear - A.birthyear) AS age FROM Artists A ORDER BY (A.deathyear - A.birthyear) DESC LIMIT 1);"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": ">SELECT A.fname, (A.death_year - A.birth_year) AS age FROM Artists A ORDER BY (A.death_year - A.birth_year) DESC LIMIT 1;[/ASSISTANT]"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": " IN Artists;\nSELECT COUNT(*) AS num_paintings FROM Paintings WHERE location LIKE '%gallery%240%';"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "(paintingID) AS p, sculptureID AS s, location AS l\nWHERE p.location = 'gallery 240' AND s.location = 'gallery 240';"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": " SELECT COUNT(paintingID) AS num_paintings FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": " IN Artists AS a, PaintingS IN Paintings WHERE a.artistID = p.painterID ORDER BY (a.deathyear - a.birthyear) DESC LIMIT 1;"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": " SELECT P.title, P.year FROM Painting P JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Mary';"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": " IN Artists a, Painting p WHERE a.fname = 'Mary' AND a.artistID = p.painterID; SELECT a.lname, p.year FROM artists a JOIN painting p ON a.artistID = p.painterID;"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": " ON Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.birthYear < 1850; SELECT width_mm FROM p>"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "('2023', 'yyyyy'); SELECT AVG(width_mm) AS avg_width FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850);"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "(char_length(fname) = length(replace('Pablo', NULL, fname)) AND artistID IN (SELECT painterID FROM Artists WHERE fname ILIKE 'Pablo%')\nSELECT location, medium FROM Paintings WHERE artistID = (SELECT painterID FROM Artists WHERE fname ILIKE 'Pablo%')"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": " 'Pablo', Artists.fname, (SELECT Paintings.location, Paintings.medium FROM Artists JOIN Paintings ON Artists.artistID = Painters.painterID);"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": " SELECT A.lname, A.fname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID) AND EXISTS (SELECT * FROM Sculptures S WHERE S.sculptorID = A.artistID);"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": " SELECT a.lname, a.fname FROM Artists a JOIN Painting s ON a.artistID = p.painterID JOIN Sculptures sc ON a.artistID = s.sculptorID;"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": " SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND EXISTS (SELECT 1 FROM Paintings S WHERE S.painterID = A.artistID AND S.medium = 'lithographic';"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": " cross application oilpainting on Paintings join Artists artisti using (artistID = painterID)"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": ".artists a, painters p WHERE a.artistID = p.painterID AND p.year = 1884 AND p.mediumOn = 'canvas'; SELECT a.birthYear FROM Artists a;"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "(substr((select fname || ' ' || lname from Artists where birthYear = (select year from Paintings where title = 'The Night Cafe' and year = 1884)), 1, INSTR(substring( substr(fname || ' ' || lname, 2) FROM Artists) + 1, 4)) as birth_year"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": ".medium = 'oil' AND location = 'gallery 241';<br>SELECT DISTINCT fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE mediumOn IS NOT NULL;"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": ".Artists.fname FROM Artists INNER JOIN Paintings ON Artists.artistID = Painters.painterID WHERE Paintings.medium = 'oil' AND PaintingLocation = 'gallery 241';"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "(medium) as medium, (SELECT COUNT(*) FROM Paintings WHERE medium = 'oil') AS oil_count, (SELECT COUNT(*) FROM Sculptures WHERE medium = 'oil') AS sculpture_oil, (SELECT COUNT(*) FROM Paintings) AS total_paintings, (SELECT COUNT(DISTINCT medium) FROM Paintings) AS num_mediums\nUNION ALL SELECT medium,"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": " to your SQL answer:"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": " SELECT P.medium, AVG(P.height_mm) AS avg_height FROM Paintings P GROUP BY P.medium;"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": " SELECT P.medium, AVG(P.height_mm) AS avg_height FROM Paintings P GROUP BY P.medium;"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": " SELECT location, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location;"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": ".set_schemaschema(sqlite:'sqlite');<br>select distinct p.location from paintings p where p.year < 1900;<br>\n"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "(date('now')::date)::integer >> year; SELECT Paintings.title FROM Paintings WHERE year > 1910 AND medium = 'oil' ORDER BY title ASC;"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "."
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": " on artists JOIN paintings ON artists.artistID = paintings.painterID WHERE medium = 'oil' AND location = 'gallery 240';"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "."
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": " ON Artists JOIN Paintings ON Artists.artistID = Painters.painterID\nWHERE (Paintings.height_mm > (SELECT MAX(Painting.height_mm) FROM Paintings WHERE Paintings.medium = 'canvas')\nGROUP BY Painters.title;"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": " ON Artists JOIN Paintings ON Artists.artistID = Painters.painterID;\nSELECT DISTINCT Paintings.title FROM Paintings WHERE (Height_mm > (SELECT Height_mm FROM Paintings ORDER BY Height_mm DESC LIMIT 1)\n[/SQL]"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": ".location = 'gallery 240' AND painting.year < (SELECT MIN(painting.year) FROM Painting WHERE painting.location = 'gallery 240');"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": " IN Artists;\nSELECT DISTINCT Paintings.paintingID FROM Paintings WHERE Paintings.galleryID < 240 ORDER BY Paintings.year DESC LIMIT 1, (SELECT MAX(Paintings.year) FROM Paintings WHERE Paintings.galleryID = 240) OFFSET 1;"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "."
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": ".paintings."
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": " to the following schema, here is the SQL query that answers [QUESTION]What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?[/QUESTION]<|SQL>\nSELECT A.fname, A.lname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "."
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": " IN Artists a, Painting p<br>SELECT a.fname || ' ' || a.lname AS artist_name, p.title<br>FROM Artists a JOIN Painting p ON a.artistID = p.painterID<br>ORDER BY a.lname, a.fname;"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "."
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": ".artists.lname || ' ' || artists.fname AS painting_name, paintings.height_mm || ' x ' || paintings.width_mm AS length "
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": " IN Artists A, Painting P WHERE A.artistID = P.painterID ORDER BY P.height_mm ASC, A.lname, A.fname;"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": " ON Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID\nWHERE p.year BETWEEN 1900 AND 1950 OR s.year BETWEEN 1900 AND 1950\nORDER BY p.title ASC, s.title ASC;<|"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "(LOWER)("
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": " SELECT Paintings.title, Sculptures.title FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID AND Artists.artistID = 222 UNION ALLSculptures ON Artists.artistID = Sculptures.sculptorID AND Artists.artistID = 222;"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "('paintingID', p.paintingID) AS painting_title,\ns.sculpture_title\nFROM Paintings p\nJOIN Artists a ON p.painterID = a.artistID\nFULL OUTER JOIN Sculptures s ON a.artistID = s.sculptorID AND s.sculptureID = (SELECT sculptureID FROM Sculptures WHERE sculptorID = 2"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": ">(<|sql|>SELECT a.artistID, COUNT(p.paintingID) as num_paintings_before_1900 FROM Artists a LEFT JOIN Paintings p ON a.artistID = p.painterID WHERE p.year < 1900 GROUP BY a.artistID ORDER BY num_paintings_before_1900 DESC LIMIT 1"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": ">(<|sql|>SELECT A.artistID, COUNT(*) as num_paintings FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE P.year < 1900 GROUP BY A.artistID ORDER BY num_paintings DESC LIMIT 1;<|sql|>);"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": ">("
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": ">(<|sql|>SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT MAX(COUNT(sculptureID) FROM Sculptures));"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": ">SELECT P.title FROM Paintings P WHERE (P.width_mm < 600 OR P.height_mm > 800);"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "('972651')>SELECT Paintings.title FROM Paintings WHERE (Paintings.width_mm < 600 OR Paintings.height_mm > 800);"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "(lower(substring(location from index of location in Paintings.location following ':'))) as painting_location, "
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "(current_setting::date_time) as now;\nSELECT DISTINCT Paintings.location FROM Paintings\nWHERE Paintings.year < 1885 OR Paintings.year > 1930;"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": ".paintings."
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "(dup('', (SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000))"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "(PRIMARY KEY) AS p, artists AS a\nSELECT DISTINCT p.location FROM Paintings p JOIN Artists a ON p.painterID = a.artistid WHERE medium IN ( 'panel', 'canvas' )\nORDER BY location;"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "(dual select distinct location from Painting where medium = 'on panels' and mediumOn is not null and mediumOn = 'canvas')"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": " SELECT DISTINCT Paintings.location FROM Paintings WHERE year < 1885 AND year > 1930;"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": " on paintings p;\nselect distinct location from paintings p where year > 1884 and year < 1931;\n"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": ".medium='oil' AND location='gallery 241'\nGROUP BY Paintings.height_mm, Paintings.width_mm\nAVG(Paintings.height_mm) AS avg_height, AVG(Paintings.width_mm) AS avg_width\n"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": ".paintings\nWHERE medium = 'oil' AND location = 'gallery 241'\nGROUP BY height_mm, width_mm\nAVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width\n"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": ">"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": " SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1;"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": " SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year;"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": " IN Artists, Paintings p, (SELECT MAX(height_mm) as maxHeight, year FROM Paintings GROUP BY year) h, (SELECT MAX(width_mm) as maxWidth, year FROM Paintings GROUP BY year) w"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": " IN Artists a, Paintings p, (SELECT a.lname, fname FROM Artists a ORDER BY a.lname) b WHERE a.artistID = p.painterID GROUP BY a.lname, fname AVG(height_mm) AVG(width_mm) "
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "."
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": " SELECT A.fname, COUNT(P.paintingID) AS num_paintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.fname HAVING COUNT(P.paintingID) > 1"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": " IN (SELECT artistID FROM Paintings GROUP BY artistID HAVING COUNT(paintingID) > 1);\nSELECT a.fname, COUNT(*) as num_works\nFROM Artists a\nWHERE a.artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) > 1)\nGROUP BY a.fname;<|im_"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": " (COUNT(DISTINCT a.artistID) as num_painings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID HAVING COUNT(p.paintingID) <= 3);"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "(COUNT(Paintings.painterID) < 4, Artists.artistID) AS num_paintings, Artists.deathYear < 0 GROUP BY Artists.artistID HAVING num_paintings IS NOT NULL ORDER BY Artists.deathYear DESC;"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "(sculptorID) AS sculptor, COUNT(*) AS num_of_sculptures FROM Sculptures GROUP BY sculptor.sculptorID ORDER BY num_of_sculptures ASC LIMIT 1; SELECT Artists.deathYear FROM Artists JOIN (SELECT * FROM Sculptures GROUP BY sculptor.sculptorID ORDER BY num_of_sculptures ASC LIMIT "
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": " IN (SELECT a.artistID FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID HAVING COUNT(s.sculptureID) = 0)\nSELECT MIN(a.deathYear) AS death_year, a.fname, a.lname FROM Artists a WHERE a.artistID = assistant.artistID;<"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "."
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "@database>SELECT P.paintingID, P.height_mm FROM Gallery G JOIN Paintings P ON G.galleryID = P.galleryID WHERE G.name = 'Gallery 240' ORDER BY P.width_mm DESC LIMIT 1;"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "(if(galleryID=240, (SELECT MIN(paintingID) FROM Paintings), NULL) as min_id) as min_id, (SELECT paintingID FROM Paintings) WHERE paintingID < min_id;"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": " IN Artists; artistID EXISTS (SELECT painterID FROM Paintings WHERE painterID = a.artistID AND galleryID = 240 ORDER BY year ASC LIMIT 1 OFFSET 1 ROWS FETCH FIRST 1) AND (SELECT year FROM Paintings WHERE painterID = a.artistID AND galleryID = 240 ORDER BY year DESC LIMIT 1) IS NULL;<|im_"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": ">(SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(h.height_mm) FROM Paintings h WHERE h.year > 1900 GROUP BY h.painterID) AND p.year <= 1900);"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": " IN Artists, Paintings p WHERE p.year > 1900 AND (SELECT MAX(height_mm) FROM Paintings MAX_HEIGHT) < height_mm GROUP BY p.paintingID ORDER BY p.height_mm DESC LIMIT 1;\n"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": " ON Artists a(artistID) JOIN (SELECT painterID, COUNT(*) AS count, medium FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY count DESC LIMIT 3) b ON a.artistID = b.painterID;"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": ".medium ON Artists.artistID = Paintings.painterID AND medium = 'oil'\nGROUP BY Artists.lname, Artists.fname\nORDER BY COUNT(*) DESC\nLIMIT 1;"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": " SELECT P.paintingID, P.location, P.title FROM Painings P WHERE P.medium = 'oil' ORDER BY P.year;"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": ".Paintings AS p\nJOIN Artists a ON p.painterID = a.artistID\nWHERE medium = 'oil'\nORDER BY p.year DESC;\n"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "\nSELECT P.year, P.location, P.title FROM Paintings P WHERE P.height_mm > 1000 ORDER BY P.title;"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "."
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": " SELECT A.fname, A.lname FROM Artists A WHERE NOT EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID) AND EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID);"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": " TABLE Artists as a LEFT JOIN Paintings ON a.artistID = p.painterID WHERE p.sculptureID IS NULL AND a.artistID IS NOT NULL ORDER BY a.lname, a.fname LIMIT 1;"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": " SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND medium != 'canvas';"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": ".paintings p\nJOIN Artists a ON p.painterID = a.artistID\nWHERE mediumOn <> 'canvas' AND year < 1885;\n"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": " to [user]\nSELECT COUNT(*) AS num_races FROM race;"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": ">The correct SQL query to answer [QUESTION]Count the number of races. is:"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "(race) AS rac; SELECT r.* FROM race r JOIN driver AS d ON r.driver_id = d.driver_id ORDER BY winning_team ASC;"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": ">2018-03-14 11:45:52"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": " user;\nWITH RECURSIVE CTE (raceid, driver AS (SELECT rowad FROM race ORDER BY road DESC LIMIT 1)\nUNION ALL SELECT r.roada, d.driver_name FROM race r\nJOIN driver ON r.driver_id = d.driver_id\nWHERE d.driver_name != 'Junior Strous'\nAND r.road = (SELECT MAX(r2.road) FROM"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": ".race.\"Road\" NOT IN (SELECT \"Driver_ID\" FROM driver WHERE Driver_Name = 'Junior Strous' AND Pole_Position = '1') AND Winning_driver IS DISTINCT;"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "('dual', (SELECT \"Constructor\" FROM \"driver\" ORDER BY \"Age\" ASCENDING));"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": ">"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": ".driver.driver_name, distinct driver."
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": "(MIN(driver.age) FROM driver WHERE driver > '20' GROUP BY driver ORDER BY driver DESC LIMIT 1);"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "_max_age=SELECT MAX(d.age) FROM driver d;<br>assistant_min_age=SELECT MIN(d.age) FROM driver d;"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": ">\nSELECT MIN(driver.age) AS min_age, MAX(driver.age) AS max_age FROM driver driver.driver;"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "(\"driver.engine\") AS engine, "
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": ".set_autocommit(false);"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": ".sql\nSELECT \"Driver_Name\" FROM \"driver\" ORDER BY \"Driver_Name\" DESC;"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "(driver.\"Driver_Name\" order by driver.driver.\"Driver_Name\" asc);"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "_driver_races(driver.Driver_Name, race.Race_Name) SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN driver ON driver.Driver_ID = race.Driver_ID;"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "_cat|>SELECT driver.driver_name, race.race_name\nFROM driver\nJOIN driver ON driver.driver_id = driver.driver_id;"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": " to SELECT \"Driver_Name\", COUNT(*) AS \"Number_of_Races\" FROM \"driver\" GROUP BY \"Driver_ID\" ORDER BY \"Driver_Name\"->ALPHAET;"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "=(select `driver`.`driver_id`,count(*) as num_races from `race` join `driver` on `driver`.`driver_id`=`race`.`driver_id` group by `driver`.`driver_id`)[SQL]"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": " FROM \"driver\" d JOIN \"race\" r ON d.`Driver_ID` = r.`Driver_ID` GROUP BY d.`Driver_Name` ORDER BY COUNT(r.`Road`) DESC LIMIT 1; SELECT `Age` FROM `driver` WHERE `Driver_Name` = (SELECT `Driver_Name` FROM `driver` d JOIN \"race\" r ON d.`Driver_ID"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "_driver</squig>\nSELECT d.Driver_Name, d.Age\nFROM driver AS a\nJOIN driver AS d ON a.Driver_ID = d.Driver_ID\nGROUP BY d.Driver_Name, d.Age\nORDER BY COUNT(a.Road) DESC, d.Age\nLIMIT 1;"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": " from driver as d\njoin race r on d.driver_id = r.driver_id\ngroup by d.driver_id\nhaving count(r.road) >= 2\norder by d.driver_name, d.age;"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "> SELECT driver.driver_name, age."
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": "(\"race\") as r\nJOIN driver(\"driver\") as d ON r.driver_id = d.driver_id\nWHERE d.age >= 26;\n"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "(\"driver\").Driver_Name AS driver_name, \"race\".\"Road\" AS race_id\nFROM \"driver\"\nJOIN \"race\" ON \"driver\".\"Driver_ID\" = \"race\".\"Driver_ID\"\nWHERE \"driver\".\"Age\" >= 26\n"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "@databasher>SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti';"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": " user>"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": " (distinct driver constructor from driver driver join driver as d1 on d1.driver_id = r.driver_id) select constructor, count(*) as number_of_drivers group by constructor order by constructor;"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "(CONSTRUCTOR);\nSELECT COUNT(DISTINCT driver.constructor) as number_of_drivers_per_constructor FROM driver;"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": "(CONTAINS(driver.engine, 'V10'));\nSELECT driver, COUNT(*) as num_drivers FROM driver JOIN driver ON driver.driver_id = driver.driver_id GROUP BY engine HAVING count(*) = (SELECT COUNT(*) AS MAX_COUNT FROM (SELECT ENGINE FROM driver GROUP BY ENGINET) WHERE ENGINET = 'V10') LIMIT 1;<|im"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "."
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": ".sqrt(COUNT(DISTINCT driver.engine) OVER (ORDER BY driver.engine) > 2 GROUP BY driver.engine);"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "(engine, (SELECT engine FROM driver WHERE driver IN (SELECT DISTINCT engine FROM driver GROUP BY engine HAVING COUNT(*) > 1));"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": " to MySQL and PostgreSQL:\nSELECT d.Driver_Name\nFROM driver AS r\nLEFT JOIN driver AS d ON d.Driver_ID = r.Driver_ID\nWHERE r.Driver_ID IS NULL;\n[/QUESTION]"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": " to SELECT \"Driver_Name\" FROM \"driver\" WHERE \"Driver_ID\" NOT IN (SELECT \"Driver_ID\" FROM \"race\");"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": "(\"driver\") AS d\nJOIN \"race\" r ON d.Driver_ID = r.Driver_ID\nWHERE (d.Age < 20 AND EXISTS(SELECT * FROM \"driver\" WHERE Driver_ID = d.Driver_ID AND Age > 30) OR (d.Age > 30 AND EXISTS(SELECT * FROM \"driver\" WHERE Driver_ID = d.Driver_ID AND Age < "
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "_driver=> SELECT DISTINCT driver.constructor FROM driver WHERE age < 20 AND EXISTS (SELECT 1 FROM driver WHERE age > 30) GROUP BY constructor; [/QUESTION]"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "_query>\nSELECT DISTINCT \"Constructor\" FROM race WHERE \"Winning_team\" != '' GROUP BY \"Constructor\" HAVING COUNT(*) > 1;"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": " database SELECT DISTINCT `Constructor` FROM `race` GROUP BY `Constructor` HAVING COUNT(`Road`) > 1;"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": "."
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": " drivers=[SELECT driver.driver_name FROM driver, race r WHERE r.pole_position = 'James Hinchcliffe' AND r.pole_position = 'Carl Skerlong']; "
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": ".set_dialect(pgsql); SELECT driver.* FROM driver JOIN driver ON driver.driver_id = driver.driver_id WHERE pole_position != 'James Hinchcliffe';"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": " driver:\"Driver\" d;\"SELECT Driver_Name FROM \"driver\" WHERE Driver_ID NOT IN (SELECT Driver_ID FROM \"race\" WHERE Pole_Position = '1' AND Winning_driver = 'James Hinchcliffe')"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "(count(*) from languages);"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": ""
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": "@database> SELECT \"languages\".\"name\" FROM \"languages\" ORDER BY \"languages\".\"name\" ASC;"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "\nSELECT name FROM languages ORDER BY name ASC;"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "</a> SELECT l.name FROM languages l WHERE l.name ILIKE '%ish%';"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "() as a(select name from languages where name ilike '%ish%');"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": ">"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "(cat); SELECT c.name AS country\\_name FROM countries c ORDER BY (SELECT SUM(l.justice\\_score + l.health\\_score + l.economics\\_score + l.politics\\_score) DESC FROM languages l JOIN overall\\_languages o ON l.id = o.language\\_id JOIN countries co ON o.country\\_id = c.id) as overall\\_score;"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": ""
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": "@database>SELECT AVG(countries.justice_score) AS average_justice_score FROM countries;"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "_countries(id) AS ac, languages(name) AS l, countries(name AS country_name, overall_score, health_score) AS c WHERE ac.country_id = c.id AND c.country_name != 'Norway' GROUP BY c.country_name ORDER BY c.health_score DESC, ID LIMIT 1, 1;\n(SELECT health_score FROM countries WHERE country_name = 'Nor"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": "(name) as languages, countries as c1, countries as c2, ol =>\nSELECT MAX(c2.health_score) AS max_health_score, MIN(c2.health_score) AS min_health_score\nFROM countries c1 JOIN countries c2 ON c1.id != c2.id AND c1.name <>Norway"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "(DISTINCT (languages.name)) as number_of_languages;"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": ""
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": ""
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "(countries.name) as country_name, countries.education_score\nFROM countries\nORDER BY countries.education_score DESC;"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": "_query := 'SELECT countries.name FROM countries ORDER BY countries.politics_score DESC LIMIT 1';"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "_country.name\nFROM countries AS c\nJOIN (SELECT MAX(politics_score) as max_score, name FROM countries GROUP BY name ORDER BY max_score DESC LIMIT 1) AS max_score_country\nWHERE c.id = max_score_country.name;"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": ""
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "\nThe query you'll need to use is:\nSELECT c.name AS country_name, l.name AS language_name\nFROM countries c\nJOIN official_languages ol ON c.id = ol.country_id\nJOIN languages l ON ol.language_id = l.id;"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": "@database>SELECT l.name AS language_name, COUNT(DISTINCT c.id) AS num_countries FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name;"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": ""
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": "_language(id) AS (\nSELECT l.id, COUNT(*) AS num_countries FROM languages l\nJOIN officil_languages ol ON l.id = ol.language_id\nGROUP BY l.id\nORDER BY num_countries DESC\nLIMIT 1\n)[/SQL]"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "("
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": "\nSELECT \"languages\".\"name\" AS \"language\" FROM \"languages\" JOIN \"countries\" ON \"languages\".\"id\" IN (SELECT \"country_id\" FROM \"official_languages\" GROUP BY \"country_id\" HAVING COUNT(DISTINCT \"country_id\") > 2)"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "(COUNT(DISTINCT(languages.name)) > (SELECT languages.name FROM languages JOIN officlalanguages ON languages.id = languages.id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) > 1);"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "(avg(countries.overall_score) FROM countries WHERE (id IN (SELECT country_id FROM officl_languages WHERE language_id=(SELECT id FROM languages WHERE name='English') AND language_id IS NOT NULL));"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "_languages(language_id, country_id) IN (SELECT language_id FROM officl_languages WHERE name = 'English') AND country_id IN (SELECT id FROM countries WHERE name = '[COUNTRY]') GROUP BY country_id::text -> AVG(overall_score);"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": ""
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": ""
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": "_language_scores(l.name, avg(c.overall_score) as avg_score) FROM languages l JOIN officical_languages ol ON l.id = oll.language_id JOIN countries c ON c.id = oll.country_id GROUP BY l.name ORDER BY avg_score DESC;"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "@database>SELECT l.name FROM languages l JOIN (SELECT c.name AS country_name, AVG(c.overall_score) AS avg_score FROM countries c GROUP BY c.name) a ON l.id = a.language_id ORDER BY a.avg_score DESC;"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": "@database> SELECT c.name FROM countries AS c JOIN (SELECT coUNT(l.language_id) as num_languages, country_id FROM languages AS l GROUP BY country_id ORDER BY num_languages DESC LIMIT 1) AS subquery ON c.id = subquery.country_id;"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": ""
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": "_languages(id) AS (SELECT id FROM languages);\nSELECT l.name FROM languages l LEFT JOIN officail_languages ol ON l.id = ol.language_id AND ol.country_id IN (SELECT id FROM countries);\nWHERE ol.country_id IS NULL;"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "(nul(languages.name) filter (languages.id) not exists (select 1 from oficial_languages where oficial_languages.language_id = languages.id));"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": "_language(country_id) SELECT c.name FROM countries AS c LEFT JOIN oficial_languages AS ol ON c.id = ol.country_id WHERE ol.language_id IS NULL;"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "@databank:sql_magic>SELECT c.name FROM countries c LEFT JOIN oficial_languages ol ON c.id = o.country_id WHERE ol.language_id IS NULL;"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": "(LANGUAGES.name, COUNTRES.name) FROM LANGUES JOIN OFFICIAL_LANGUAGES ON LANGUES.id = OFFICIAL_LANGUAGES.language_id JOIN COUNTRIES ON OFFICAL_LANGUAGES.country_id = COUNTRIES.id WHERE (COUNTRIES.overall_score > 95 AND COUNTRIES.overall_score < 9"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": ">\nSELECT l.name\nFROM languages l JOIN official_languages ol ON l.id = ol.language_id\nJOIN countries c ON ol.country_id = c.id\nGROUP BY l.name\nHAVING AVG(c.overall_score) > 95\nAND MIN(c.overall_score) < 90;"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answer": ".addresses left join ref_countries on addresses.country = ref_countries.country_code<br />\nunion all<br />\nselect town_city as city, country from addresses;"
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": ".addresses cross join ref_countries ref_c; SELECT a.*, c.* FROM addresses a, ref_countries c WHERE a.country = c.country_code;"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "_state(properties.county_state_province) group by properties.address_id;"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": ".county_state_province as "
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": " user>The query will run on a database with the following schema:\nCREATE TABLE `Ref_Age_Categories`(\n`age_category_code`,\n`age_category_description`)\nCREATE TABLE `Ref_Property_Types`(\n`property_type_code`,\n`property_type_description`)\nCREATE TABLE `Ref_Room_Types`(\n`room_type_code`,\n`room_type_description`)\nCREATE TABLE"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": " user;\nSELECT f.feature_description AS description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id JOIN Properties pr ON pf.property_id = pr.property_id WHERE f.feature_name = 'rooftop';"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "_user\nYour SQL query to answer [QUESTION]What are the feature name and description of the most commonly seen feature across properties?[/QUESTION] is:\n```sql\nSELECT f.feature_name, f.feature_description\nFROM Features f\nJOIN Property_Features pf ON f.feature_id = pf.feature_id\nJOIN Properties prop ON pf.property_id = prop.property_id\nGROUP BY"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": " user>The query to find the most common feature (feature) across all properties is as follows:\n"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": " user, I assume you meant to ask for the MINIMUM NUMBER OF ROOMS IN A PROPERTY, not the minimum room size. Here is the SQL query:\n\nSELECT MIN(room_count) AS min_rooms FROM Properties;\n"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "_view as (select property_id from properties order by room_count asc limit 1)\nSELECT p.property_address_id, p.room_count FROM properties p join rooms r ON p.property_id = r.property_id;\n\n"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "_count\nSELECT COUNT(*) as total_properties FROM Properties WHERE (garage_yn = 'Y' OR parking_lots > 0);"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": "_user\nSELECT COUNT(*) FROM Properties WHERE (garage_yn = 'Y' OR parkings_lots > 0);"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": " for users who have a description containing the word \"mother\" and the age category: SELECT u.user_category_description, r.age_category_description FROM Users u JOIN Ref_User_Categories rc ON u.user_category_code = rc.user_category_code JOIN Ref_Age_Categories r ON rc.age_category_code = r.age_category_code WHERE u.login_name LIKE '%mother%';"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "_user SELECT Users.age_category_description FROM Users WHERE Users.description LIKE '%Mother%' ORDER BY Users.age_category_description;"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": ">1.0"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": "user>SELECT Users.first_name FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id GROUP BY Users.user_id ORDER BY COUNT(Properties.property_id) DESC LIMIT 1;"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": ".property_id IN (SELECT property_id FROM Properties WHERE property_description LIKE '%garden%') GROUP BY property_id AVG(room_count);"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": " user><br />The following SQL query will give you the answer:<br />[<sql><|sql>SELECT AVG(room_count) AS average_rooms FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden';<|sql>]"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "_cities<br>WITH swimming_pools."
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": ".property_address AS p JOIN properties ON p.address_id = property.property_address_id LEFT JOIN property_features AS pp ON p.property_id = property.property_id AND pp.feature_name = 'swimming pool' GROUP BY p.town_city HAVING COUNT(pp.feature_id) > 0;"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": "_user@example.com\nSELECT p.property_id, MIN(p.vendor_requested_price) AS min_vendor_price\nFROM Properties p\nWHERE p.vendor_requested_price IS NOT NULL\nGROUP BY p.property_id\nORDER BY min_vendor_price ASC\nLIMIT 1;"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "_user@database>SELECT p.property_id, MIN(p.vendor_requested_price) AS min_vendor_price FROM Properties p GROUP BY p.property_id ORDER BY p.vendor_requested_price ASC LIMIT 1;"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": " user,\n"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "_user\nThe correct answer is: SELECT AVG(room_count) AS average_rooms FROM Properties;"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": " user;\nSELECT COUNT(DISTINCT room_type_code) as num_room_types FROM Ref_Room_Types;"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "_query>;"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "_table user_searches on (user_id)\ngroup by user_id\nhaving count(search_seq) > 1\norder by user_id;\nselect user_id, search_string\nfrom user_searches\n[/SQL]"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": "_query=SELECT u.user_id, ps.*\nFROM Users u\nJOIN User_Searches us ON u.user_id = us.user_id\nGROUP BY u.user_id\nHAVING COUNT(*) > 2;"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "_datetime = (SELECT MAX(search_datetime) FROM User_Searches WHERE user_id = YOUR_USER_ID);"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "_view := (SELECT user_id FROM User_Property_History ORDER BY datestamp DESC LIMIT 1);<br>\n"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": "."
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": ""
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": " user\nThe query will run on a database with the following schema:\nCREATE TABLE Ref_Age_Categories (age_category_code, age_category_description);\nCREATE TABLE Ref_Property_Types (property_type_code, property_type_description);\nCREATE TABLE Ref_Room_Types (room_type_code, room_type_description);\nCREATE TABLE Ref_User_Categories (user_category_code, user_category_description"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": "_properties AS (SELECT property_address_id FROM Properties WHERE is_seller=FALSE)\nselect distinct z.zip_postcode from addresses z where z.address_id NOT IN (SELECT property_address_id FROM user_property_history up HIERARCHY USING (user_id) = ANY (SELECT user_id FROM users WHERE (SELECT COUNT(property_id) FROM properties WHERE property_address_id=u.address_id G"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "_table Users inner join Property_Searches on Users.user_id = Property_Searches.user_id group by Users.user_id having count(Property_Searches.search_seq) = 1;"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "_user SELECT u.user_id, c.user_category_code\nFROM Users u JOIN Ref_User_Categories rc ON u.user_category_code = rc.user_category_code\nJOIN User_Property_History up1 ON u.user_id = up1.user_id\nJOIN User_Property_History up2 ON u.user_id = UP2.user_id AND UP1.property_id !="
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "_user."
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "_id, user_id, search_datetime, search_string FROM User_Searches ORDER BY search_TIMESTAMP ASC LIMIT 1;<br>\n"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": " user SELECT Users.login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_description WHERE Ref_Age_Categories.age_category_description LIKE '%senior citizen%' ORDER BY Users.first_name;"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": " SELECT Users.first_name, Users.last_name, Users.login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_description WHERE Ref_Age_Categories.age_category_description LIKE '%senior citizen%' ORDER BY Users.first_name;"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "_users WITH (nolock) AS (SELECT user_id FROM Users WHERE is_buyer = TRUE);<br>\nSELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM searhistoric_users);"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "_users<br>WITH "
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": ".date_registered from users where login_name = 'ratione';"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": " ratione;</ratione>; SELECT Users.date_registered FROM Users WHERE Users.login_name = 'ratione';"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": "_seller"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": " user table: SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = TRUE;"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": " user SELECT s.address_id, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id JOIN Ref_Age_Categories rg ON u.age_category_code = rg.age_category_description WHERE is_seller = 'Yes' AND rg.age_"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": " user><br /> SELECT s.address_id AS property_address_id, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id JOIN Ref_User_Categories rc ON u.user_category_code = rc.user_category_code JOIN Properties p ON a.address_"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": " user, property<br>\nSELECT COUNT(DISTINCT p.property_id) as num_properties_with_features FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE pf.feature_id IN (SELECT feature_id FROM Features GROUP BY feature_id HAVING COUNT(feature_id) >= 2);"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": "_count = (SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id HAVING COUNT(pf.feature_id) >= 2);"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": " user;<br>SELECT p.property_id, COUNT(pp.property_id) as num_photos FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id;"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": " user;<br>\nSELECT p.property_id, COUNT(pp.photo_seq) AS num_photos FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id;"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": "_id AS (SELECT user_id FROM Users WHERE is_seller = TRUE)\nSELECT u.user_id, COUNT(p.property_id) as num_photos FROM Property_Photos p JOIN Properties pr ON p.property_id = pr.property_id JOIN Users u ON u.user_id = pr.owner_user_id WHERE p.property_id IN (SELECT property_id FROM User_Property_History up)"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "_users WITH (nolock JOIN Properties ON users.user_id = properties.owner_user_id LEFT JOIN Property_Photos ON properties.property_id = property_photos.property_id GROUP BY users.user_id HAVING COUNT(property_photos.property_id) > 0 ORDER BY COUNT(property_photos.property_id) DESC;"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "_users"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": "_users table JOIN Properties ON users.user_id = properties.owner_user_id AND Ref_User_Categories.user_category_code = 'Single Mother' OR Ref_User_Categories.user_category_code = 'Student'\nSELECT MAX(price_max) as max_price FROM Properties JOIN Ref_User_Categories ON users.user_category_code = Ref_User_Categories.user_category_code WHERE users"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "_history.property_id, property_date(properties.date_on_market) as property_name\nfrom user_property_history, properties\norder by user_property_history.datestamp asc;"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": "_events (SELECT p.property_name, uph.datestamp FROM User_Property_History uph JOIN Properties p ON uph.property_id = p.property_id ORDER BY uph.datestamp;"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": " user>"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": " user, property>"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": ".ref_age_categories.age_category_description as detail, ref_age_categories.age_category_code as category_code\nwhere ref_age_categories.age_category_code = 'Over 60'"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": ".ref_age_categories.age_category_description FROM ref_age_categories WHERE ref_age_categories.age_category_code = 'Over 60';"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": " user;\nSELECT r.room_type_description AS room_size, COUNT(r.property_id) AS room_count\nFROM Rooms r\nGROUP BY r.room_type_description\nORDER BY r.room_size ASC;\n"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": " user;\nSELECT r.room_type_description AS room_size, COUNT(*) AS room_count\nFROM Rooms r\nGROUP BY r.room_type_description;"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": " user;\nSELECT `Users`.`country`\nFROM `Users`\nWHERE `Users`.`first_name` = 'Robbie'\nAND `Users`.`last_name` IS NULL\nORDER BY RAND() LIMIT 1\n;"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": "_users AS (SELECT user_id FROM Users WHERE first_name = 'Robbie') WITH RECURSIVE OPTION (MODE 1)\nSELECT s.country\nFROM addresses a JOIN users b ON a.address_id = b.user_address_id\nWHERE b.user_id = (SELECT user_id FROM assistic_users);"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": " user>"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": " user SELECT u.first_name, u.last_name FROM Users u INNER JOIN Properties p ON u.user_id = p.owner_user_id WHERE p.property_address_id IN (SELECT address_id FROM Addresses a INNER JOIN Users u2 ON a.address_id = u2.user_address_id WHERE u2.user_id = p.owner_user_id)"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": "_id NOT IN (SELECT owner_user_id FROM Properties) SELECT login_name FROM Users;"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "_searches s\nWHERE user_id NOT IN (SELECT DISTINCT user_id FROM properties)\nORDER BY search_STRING DESC;"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": "_user SELECT u.last_name, u.user_id FROM Users u JOIN Property_Features pf ON u.user_id = pf.owner_user_id JOIN User_Property_History uph ON u.user_id = upH.user_id GROUP BY u.last_name, u.user_id HAVING COUNT(DISTINCT pf.property_id) >= 2 AND COUNT"
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "_user> SELECT u.last_name, u.user_id FROM Users u JOIN (SELECT up.user_id FROM User_Property_History UP HAVING COUNT(*) <= 2) USHP ON u.user_id = USHP.user_id JOIN (SELECT P.property_id FROM Properties P GROUP BY P.property_owner_id HAVING COUNT(P.property_id) > 2;"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "(select count(*) from bike where weight > 780);"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": ">sqlite>SELECT bike.product_name, bike.weight FROM bike ORDER BY bike.price ASC;"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": ">"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "> SELECT MIN(bike.weight) AS min_weight, MAX(bike.weight) AS max_weight FROM bike;"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "(avg(price)) as avg_price\nfrom bike\nwhere material = 'Carbon CC'\n"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "(user)->sql_query(<<<SQLSELECT c.name, r.result FROM cyclist c JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id JOIN bike b ON cob.bike_id = b.id JOIN bike p ON b.product_name = 'Road Bike' AND b.material = 'carbon fiber' AND c.nation <> 'Russia'<<<SQL);"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "(now()) AS current_date, bike.id, bike.product_name\nFROM bike\nJOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id\nWHERE cyclists_own_bikes.purchase_year > 2015\nGROUP BY bike.id, bike.product_name;"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": " database <db_name>;<br>\nWITH bike.id AS bid, cyclist.id AS cid, cyclists_own_bikes.bike_id AS bike_id, cyclists_own_bikes.purchase_year AS purchase_year<br>\nSELECT DISTINCT ON (bike.id) bike.product_name, bike.id FROM bike JOIN cyclists_own_bikes ON bike.id = cycl"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "_cyclist.sql"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "(lower(`nation`) = 'russia' OR lower(`nation`) = 'great britain') AS `cyclist`\nFROM `cyclists_own_bikes`\nJOIN `cyclist` ON `cyclist_id` = `cyclist`.`id`\nJOIN `bike` ON `bike_id` = `bike`.`id`\nGROUP BY `bike`.`product_name`\nORDER BY `"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": " user;\nselect distinct (cyclist.heat) as number_of_levels_of_heat from cyclist group by cyclist.heat order by cyclist.heat;"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": " database 'bdb';\nSELECT COUNT(*) AS num_cyclists FROM `cyclist` LEFT JOIN `cyclists_own_bikes` ON `cyclist`.`id` = `cyclists_own_bikes`.`cyclist_id` WHERE (`cyclists_own_bikes`.`bike_id` IS NULL OR `cyclists_own_bikes`.`purchase_year` < 2015);"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "(result > '4:21.558') as subquery, bike(\"name\") from cyclist cross join cyclists_own_bikes join bike on bike(\"id\") = cyclists_own_bikes(\"bike_id\");"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": " database=\"bikeshop\";\nSELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes co1 ON b.id = co1.bike_id JOIN cyclist c1 ON co1.cyclist_id = c1.id JOIN cyclists_own_bikes co2 ON b.id = co2.bike_id AND c1.name = 'Bradley Wiggins'"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": ">sql=#"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": ".bike.product_name, bike.id FROM bike WHERE 'fiber' LIKE %fiber%;"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": "(cyclist_id, count(*) as num_bikes)\nFROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY cyclist_id ORDER BY cyclist_id;"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer": " to this answer."
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": ".receipts.customerid = 12345 AND goods.food = 'cake' ORDER BY goods.price DESC LIMIT 1;"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "\nThe answer is: SELECT goods.Id AS cookie_id, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE goods.Food = 'cookie' ORDER BY goods.Price ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": " user>"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": ">"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": " to answer the question: What are the ids of customers who have bought an item with \"apple\" flavor?\nSELECT DISTINCT c.Id\nFROM customers c\nJOIN receipts r ON c.Id = r.CustomerId\nJOIN items i ON r.Ordinal = i.Receipt AND i.Item = 'apple';"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": ".catalog='mysql';\nSELECT goods.Id FROM goods WHERE Price < 3;"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": " database '"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "."
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "_cat(standard_catalog.goods).*\nSELECT DISTINCT c.id FROM \"customers\" c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receipt = i.recept AND i.item = 'lemon flavored cake';"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": " table as c(select distinct food from goods); select f.food, count(*) as num_customers from receipts r join items i on r.receipt = i.receipt join customers d on r.customerid = d.id join goods g on i.item = g.id group by f.food;"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": ">"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": ""
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "(count(*) as num_receipts, receipts.customerId) FROM receipts GROUP BY receipts.customerId HAVING count(*) >= 15 AND customerId IN (SELECT Id FROM customers)\n[/SQL]"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "\nselect distinct customers.lastname from customers join receipts on customers.id=receipts.customerid join items on receipts.ordinal=items.ordinal group by customers.lastname having (select count(*) as number_of_purchases from receipts where customerid=customers.id) > 10\n"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "\nselect distinct(c.lastname) from receipts r join customers c on r.customerid = c.id group by c.lastname having (select count(r1.receiptnumber) from receipts r1 where r1.customerid = r.customerid and r1.date > r.date group by r1.customerid having count(*) > 10;"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": " user; SELECT COUNT(DISTINCT goods.Id) FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber JOIN customers ON receipts.CustomerId = customers.Id WHERE \"Item\" ILIKE '%Cake%';"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": "_cat>SELECT COUNT(DISTINCT goods.Id) FROM goods WHERE goods.Food LIKE '%cake%';"
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": ">\nSELECT goods.Flavor FROM goods WHERE goods.Food = 'Croissant'\nORDER BY goods.Flavor ASC;"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "> SELECT DISTINCT goods.Flavor FROM goods WHERE goods.Food = 'croissant';"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": ">SELECT goods.Id AS item_id, goods.Flavor AS item_flavor, goods.Price AS item_price\nFROM receipts r\nJOIN items i ON r.Receipt = i.Receipt AND i.Ordinal = (SELECT MAX(Ordinal) FROM items WHERE Receipt = r.ReceiptNumber AND CustomerId = 15)\nJOIN goods ON i.Item = goods.Id;<|im"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "\nSELECT DISTINCT goods.Id AS ItemId FROM goods JOIN receipts ON goods.Id = items.Item JOIN receipts ON receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = 15;"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": " database>"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "_cat SELECT g.Food, AVG(g.Price) AS AveragePrice, MIN(g.Price) AS Minimum, MAX(g.Price) AS Maximum FROM goods AS g GROUP BY g.Food;"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": ">"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": ""
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": ">"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "|sqlite: sqlite 0.23.1"
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": ">"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": ">\nThe query to find the receipt number and date corresponding to the receipt for which the most expensive item was purchased would be:\n\nSELECT r.ReceiptNumber, r.Date\nFROM items i\nJOIN goods g ON i.Item = g.Id\nJOIN receipts r ON i.Receipt = r.ReceiptNumber\nORDER BY g.Price DESC\nLIMIT 1;\n"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "_database=>SELECT i.Item FROM items i INNER JOIN receipts r ON i.Ordinal = r.Ordinal INNER JOIN goods g ON i.Id = g.Id GROUP BY i.Item HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM items);"
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": " user,<br>\nThe following SQL query answers your question.<br><br>\n"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": " database.<br><br>SELECT goods.Food, COUNT(goods.Id) as TotalGoods FROM goods JOIN items ON goods.Id = items.Item GROUP BY foods.food;"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": "|>\nThe following SQL query will give you the answer:<br />\nSELECT g.Food, COUNT(*) AS num_goods FROM goods g GROUP BY g.Food ORDER BY g.Food;<br />\n[/QUESTION]"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "|>The average price for each food type can be obtained by using a subquery with the GROUP BY clause:<br />\nSELECT g.Food, AVG(p.Price) AS average_price <br />FROM goods g INNER JOIN items i ON g.Id = i.Item <br />INNER JOIN receipts r ON i.Receipt = r.ReceiptNumber <br />GROUP BY g.Food;"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": "; WITH foods AS (SELECT DISTINCT food FROM goods) SELECT food, AVG(price) as avg_price FROM goods JOIN items ON goods.id = items.item GROUP BY foods.food ORDER BY foods.food;"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": " user; SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5 ORDER BY goods.Id;"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": ">"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": ">(SELECT g.\"Flavor\" FROM \"goods\" g JOIN \"items\" i ON g.\"Id\" = i.\"Item\" WHERE i.\"Receipt\" IN (SELECT r.\"ReceiptNumber\" FROM \"receipts\" r WHERE r.\"CustomerId\" = 1) AND g.\"Food\" = 'cake' AND g.\"Price\" > 10;"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": ">(select distinct goods.flavor from goods join items on goods.id = items.item where items.receipt in (select receiptnumber from receipts where date like '2019-%') and price > 10 order by goods.flavor;"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": ".customers c JOIN receipts r ON c.id = r.customerid LEFT OUTER JOIN items i ON r.ordinal = i.ordinal AND r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id SELECT DISTINCT c.id, g.price FROM receipts r LEFT OUTER JOIN customers on r.customerid = c.id LEFT OUTER"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": " database>"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "."
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": ".goods.id AS good_id, subquery.id as customer_id\nFROM goods AS subquery\nWHERE price < (SELECT MAX(price) FROM goods)\nORDER BY subquery.id;"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": ">(SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.Receipt = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 13);"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": ">SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.Receipt = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": ".receipts.date, goods.price\nFROM customers c\nJOIN receipts r ON c.id = r.customerid\nJOIN items i ON r.receipt = i.receiptnumber AND i.ordinal = anyelement(split(substring(r.receiptnumber,1) from '\\d+')::integer)\nJOIN goods g ON i.item = g.id\nWHERE g.price > "
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": ">SELECT r.Date FROM receipts r JOIN items i ON r.Ordinal = i.Ordinal JOIN goods g ON i.Id = g.Id WHERE g.Price > 15.00 AND r.CustomerId = your_id;"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "."
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "."
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": " database schema looks correct and the question asks for a single record with the id 70. However, there is no table named \"goods\" in the schema provided. Assuming that there is a mistake in the question and it should be \"Id\" instead of \"food\", here's the SQL query:\nSELECT goods.Price\nFROM goods\nWHERE goods.Id = '70';"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": ">\nThe following SQL query will answer your question:\n```sql\nSELECT g.Id, g.Price\nFROM goods g\nJOIN items i ON g.Id = i.Item\nWHERE CAST(g.Id AS INTEGER) = 70;\n"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": "."
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": ">"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "."
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": "|SELECT goods.Id FROM goods ORDER BY goods.Id DESC;"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": ""
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": ">"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": " to postgresql>SELECT r.* , max(d.date) as max_date FROM receipts r JOIN dates d ON r.receiptnumber = d.receiptnumber GROUP BY r.receiptnumber;"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "_catalog>;\nSELECT r.ReceiptNumber, MAX(r.Date) AS LatestDate\nFROM receipts r\nGROUP BY r.ReceiptNumber\nORDER BY r.ReceiptNumber DESC\nLIMIT 1;"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": "_catalog;<br>\nSELECT r.* <br>FROM receipts r <br>INNER JOIN items i ON r.receipt = i.receipt <br>(<|im_start|>SELECT r."
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "."
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": "_catalog.goods g JOIN items i ON g.Id = i.Item WHERE (g.Food IN ('Cookie', 'Cake') AND i.ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts r WHERE r.Date BETWEEN '2021-11-01' AND '2021-11-30' AND price BETWEEN 3 AND 7)"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": ".goods where price between 3 and 7 and food in ('Cookie', 'Cake') order by id;"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": ".date(receipts.date) as earliest_date, customers.first_name, customers.last_name FROM customers JOIN receipts ON customers.id = receipts.customer_id WHERE receipts.date = (SELECT MIN(date) FROM receipts);"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "_catalog>"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": ".set_databasename('local'); select avg(goods.Price) as average_price from goods join items on goods.Id = goods.Id group by goods.Flavor having goods.Flavor in ('blackberry', 'blueberry') "
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": " user; SELECT AVG(goods.Price) FROM goods WHERE flavors IN (`blackberry`, `blueberry`);"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": "; WITH cte AS (SELECT i.Item, g.Food, g.Price FROM items i JOIN goods g ON i.Id = g.Id WHERE g.Flavor = 'cheese' ) SELECT Food, MIN(Price) FROM cte GROUP BY Food;"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "_cat|select goods.id from goods where flavour = 'cheese' order by price asc limit 1;"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": " user;<br>\nSELECT g.Flavor, MAX(gi.Price) AS max_price, MIN(gi.Price) AS min_price, AVG(gi.Price) AS avg_price<br>FROM goods g INNER JOIN items i ON g.Id = i.Item GROUP BY g.Flavor;"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": " database '<dbname>' to <dbname>;<br />WITH REPLACEMENT <br />SELECT g.Flavor AS flavor, MAX(g.Price) AS max_price, MIN(g.Price) AS min_price, AVG(g.Price) AS avg_price<br />FROM goods g <br />GROUP BY g.flavor<br />ORDER BY g.flavor;"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": ">"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": " SQL user."
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": ""
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": " SELECT r.Date FROM receipts r GROUP BY r.Date ORDER BY COUNT(r.Id) DESC LIMIT 3;"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": " user><br />\nSELECT customers.FirstName, customers.LastName, COUNT(receipts.ReceiptNumber) AS num_purchases FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY num_purchases DESC LIMIT 1;"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": ">("
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": "_catelog;<br />SELECT r.Date, COUNT(DISTINCT rc.CustomerId) AS num_customers <br />FROM receipts r JOIN customers rc ON rc.Id = r.CustomerId <br />GROUP BY r.Date;"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "(COUNTO(DISTINCT(receipts.CustomerId)) AS customer_count, receipts.Date) AS date_and_customer_counts SELECT date_and_customer_counts.* FROM receipts GROUP BY date_and_customer_counts.Date ORDER BY date_and_customer_counts.Date;"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": "</squared>\nSELECT c.FirstName, c.LastName FROM Customers AS c INNER JOIN receipts AS r ON c.Id = r.CustomerId INNER JOIN items AS i ON r.ReceiptNumber = i.Receipt AND i.Item = 'apple flavor Tart' AND i.Food = 'Tart';"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": ">"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": " user,\n"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": "."
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": ".receipts.customerid IN (SELECT goods.id FROM goods WHERE type = 'Cake' GROUP BY id HAVING AVG(price) <= price) ORDER BY price DESC LIMIT 1;"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "."
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": ".set_transaction_isolation(mode=IMMEDIATE);<br>WITH REPLACEMENT SELECT g.\"Id\" FROM \"goods\" AS g WHERE g.\"Price\" > (SELECT AVG(\"Price\") FROM \"goods\") GROUP BY g.\"Id\";"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": ".autocommit(\"SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item WHERE i.Receipt IN (SELECT ReceiptNumber FROM receipts) GROUP BY g.Id HAVING (SELECT AVG(Price) OVER (ORDER BY NULLIF(Price,0)) * 2 > Price) >;"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": " SELECT g.\"Id\" AS \"good_id\", g.\"Flavor\" AS \"flavor\", t.\"Type\" AS \"type\" FROM \"goods\" g JOIN \"items\" i ON g.\"Id\" = i.\"Item\" JOIN \"receipts\" r ON i.\"Receipt\" = r.\"ReceiptNumber\" ORDER BY g.\"Price\";"
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "."
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": ">"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "."
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": ">"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": " database "
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": " table goods; SELECT DISTINCT g.Flavor FROM goods g WHERE 'Cake' IN (split(g.Food, ' ')) AND NOT EXISTS (SELECT 1 FROM goods h WHERE h.Flavor = g.Flavor AND 'Tart' IN (split(h.Food, ' '));"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": ".receipts IS NULL AND goods.Food = 'Cake' AND goods.Flavor NOT IN (SELECT goods.Flavor FROM receipts WHERE receipts.ReceiptNumber != :receiptNumber AND goods.Id = items.Item)"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": " to sql>\nSELECT g.Id, COUNT(i.Item) as count FROM goods g JOIN items i ON g.Id = i.Item GROUP BY g.Id ORDER BY COUNT(i.Item) DESC LIMIT 3;"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": "\nSELECT goods.Id, goods.Flavor FROM (SELECT i.Item, GOODS.flavor FROM RECEIPTS r JOIN items i ON r.ReceiptNumber = i.receipt, goods ON i.item = goods.id) s GROUP BY s.id ORDER BY COUNT(*) DESC LIMIT 3;"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": "(total) as (select receipt, sum(price) as total from items join goods using (item) on item = id group by receipt); select customerid from receipts join total on receiptnumber = receipt order by customerid having total > 150;"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": ">(select c.id from customers c inner join receipts r on c.id = r.customerid inner join items i on r.ordinal = i.ordinal inner join goods g on i.item = g.id group by c.id having (sum(g.price) > 150);"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": "_catalog();<br>SELECT r.CustomerId, AVG(g.Price) as avg_price <br>FROM receipts r <br>JOIN items i ON r.Receipt = i.Receipt <br>JOIN goods g ON i.Item = g.Id <br>WHERE r.Date = '2023-01-15'<br>GROUP BY r.CustomerId HAVING av"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "_catalog;<br>\nWITH goods.price AS (<br>SELECT goods.Id, AVG(goods.Price) AS avg_price FROM goods GROUP BY goods.Id)-><br>SELECT customers.Id<br>FROM customers<br>JOIN receipts ON customers.Id = receipts.CustomerId<br>JOIN items ON receipts.ReceiptNumber = items.Receipt AND items.Item"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": ">SELECT r.Date FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE CAST(r.Date AS DATE) > '2017-03-01' AND CAST(r.Date AS DATE) < '2017-04-01' GROUP BY r.Date SUM(g.Price)"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": ".cateloget(receipts, 'select receiptdate(receipts.receiptnumber) as date, sum(items.price * items.ordinal) as totalfrom receipts join items on receipts.item = items.id group by receipts.receiptdate having sum(items.price * items.ordinal) > 100 order by receiptdate;"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": ">"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": ">\nHere is your answer: <br>SELECT COUNT(driver.Driver_ID) AS num_drivers FROM driver.driver;"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": "(count(*)) as total, make."
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": "(count(*)) as total, make"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": ">(avg(driver.age) as avg_age, driver.make)<br>select driver.make, avg_age<br>from driver."
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": ".setlinesize(1000); SELECT d.make, AVG(d.age) AS avg_age FROM driver d GROUP BY d.make;"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": ".setschema('formula');<br>select avg(driver.laps) as average_laps<br>from driverer driver_id in (select driver_id from driverer where age < 20);"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": ">"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": ">"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": ".setlines(30);:p5 SELECT t.Team, m.Manager, s.Sponsor, c.Car_Owner FROM team t JOIN driver_team_driver dtd ON t.Team_ID = dtd.Team_ID JOIN driver_driver dr ON dtd.Driver_ID = dr.Driver_ID JOIN country c ON dr.Country = c.Country_Id ORDER BY c.Car_Owner;<|"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": " on teams set m = make;<br>select distinct m from teams t join driver drivers d on t.team_id = d.team_id join makes m2 on d.make = m2.make group by m having count(*) > 1"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "> SELECT DISTINCT ON (m.make) m.make FROM team t JOIN driver_driver td ON t.team_id = td.team_id JOIN driver_driver dd ON td.driver_id = dd.driver_id JOIN make m ON dd.make = m.make GROUP BY m.make HAVING COUNT(DISTINCT t.team_id) > 2;<|im"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": ">\nThe query would be: SELECT DISTINCT team.make FROM team JOIN team_driver ON team.team_id = team_driver.team_id JOIN driver ON team_driver.driver = driver.driver_id WHERE team_driver.driver = 'Buddy Arrington';"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": ">"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": ">"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": ">"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "(count(*)) as num_drivers, (select count(*) from driverer d join country c on d.country = c.country_id where d.points < 150);"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": ">"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": ">\nSELECT driver.driver AS name, driver.age AS age\nFROM driver, driver\nORDER BY age ASC;"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": " user\nSELECT \"Country\", \"Driver\" FROM country c JOIN driver d ON c.country_id = d.country ORDER BY d.age ASC;"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": ">SELECT country.Country AS Country, driver.Driver AS Driver<br />FROM driver JOIN country ON country.Country_Id = driver.Country JOIN team_driver ON team_driver.Team_ID = driver.Team_ID ORDER BY points DESC;"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "(driver.driver) AS driver, country.country AS country\nFROM driver JOIN country ON driver.country = country.country_id\nORDER BY driver.points DESC;"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": ">"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": "\nSELECT driver.Driver, country.Country\nFROM driver JOIN country ON driver.Country = country.Country_Id;"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": ">"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": ""
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": ">"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": "(now() AT TIME ZONE 'UTC-5') AS query, SELECT AVG(driver.age) FROM driverer d JOIN country c ON d.country = c.country_id WHERE c.official_native_language = 'English';"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": ">(select distinct Country.Country from driver as d drivers, driver as ddriver, country, team_driver as tdriver where d.Driver = ddriver.Driver and d.Country = country.CountryId and d.Points > '150')"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": ">"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "\nselect c.Capital\nfrom country c\njoin driver d on c.Country_Id = d.Country\njoin team_driver td on d.Driver_ID = td.Driver_Id and td.Team_Id = (\n  select team_id\n  from team\n  join team_driver t\n  join driver d2 on t.team_id = d2.team_id\n    -- find the id of the team with the most points\n"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": ">"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "(make=driver.make) group by driverive.make order by driverive.make desc;"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": "(make,COUNT(driver.driver) as count FROM driver.team_driver INNER JOIN driver.team ON team_driver.team_id = team.team_id INNER JOIN driver.driver ON team_driver.driver_id = driver.driver_id GROUP BY make)|"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": ">SELECT Make FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY Make HAVING COUNT(*) = (SELECT COUNT(*) AS TotalDrivers FROM driver JOIN country ON driver.Country = country.Country_Id);"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "(make,driver.make) as m,(select make, count(*) as ct from driverters join team_driver on driverters.driver_id = team_driver.driver_id group by make) as t group by m.make order by ct desc limit 1;"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": ">"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": " make to three or more drivers:<br>\nSELECT DISTINCT Make<br>FROM driver team_driver<br>JOIN driver driver driver driver driver country<br>(Country) AS c <br>ON team_driver.country = c.country_id<br>GROUP BY Make<br>HAVING COUNT(*) >= 3;"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": ">\nSELECT t.Team FROM team t LEFT JOIN team_driver td ON t.Team_ID = td.Team_ID AND td.Driver_ID IS NULL WHERE td.Driver_ID IS NULL;"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer": ".n1ql; SELECT t.* FROM teams t LEFT JOIN team_driver td ON t.team_id = td.team_id LEFT JOIN driverers d ON td.driver_id = d.driver_id WHERE td.driver_id IS NULL AND d.driver IS NULL AND t.team_id = t.team_id;"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": ".setschema('formula');<br>select distinct c.country from driver r1,driver d1,team t,driver d2 where r1.team_id = t.team_id and r1.driver_id = d1.driver_id and d1.make = 'Dodge' and d1.country = c.country and d2.driver_id = t.driver_id and d2.make = 'Chevrolet"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "; SELECT `country`.`Country` FROM `driver` d1 JOIN country ON (d1.`Country` = country.`Country_Id`) JOIN team_driver td ON (td.`Driver_ID` = d1.`Driver_ID`) JOIN team t ON (td.`Team_ID` = t.`Team_ID`) WHERE d1.`Make` IN ('Dodge', 'Chevrolet') GROUP"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": ">\nThe query will be:\nSELECT SUM(Points) AS total_points, AVG(Points) AS average_points FROM driver.driver;"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": ">"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": ">(select country.country from country left join team_driver on country.country_id = team_driver.driver_id left join driver on team_driver.team_id = driver.team left join race on team_id in race_num > 1)\nwhere country.country is null;"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": ">\nThe query will return a list of countries that do not have any drivers: SELECT c.Country FROM country c LEFT JOIN driverer d ON c.Country_Id = d.Country LEFT JOIN team_driver td ON d.Driver_ID = td.Driver_ID AND td.Team_ID = ANY (SELECT Team_ID FROM team) WHERE d.Driver_ID IS NULL AND td.Team_ID IS NOT NULL GROUP BY c"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": ">\n"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": ">(select t.manager, s.sponsor from team t join (select md.team_id, count(*) as driver_driver_count from driver_driver md group by md.team_id order by count(*) desc limit 1) as ranked_teams on t.team_id = ranked_teams.team_id);"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": ">\nThe following SQL query will give you the manager and car owner of teams with at least 2 drivers:\n\n```sql\nSELECT t.Manager, t.Car_Owner FROM team t JOIN (SELECT d.Driver, COUNT(*) as driver_count FROM driver d GROUP BY d.Driver HAVING COUNT(*) > 1) as drivers ON t.Team_ID = drivers.Driver\nGROUP BY t.Manager, t."
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": ">\n```sql\nSELECT t.Team, m.Manager, c.Car_Owner\nFROM team t\nJOIN team_driver td ON t.Team_ID = td.Team_ID\nJOIN driverDriver d ON td.Driver_ID = d.Driver_ID\nGROUP BY t.Team\nHAVING COUNT(td.Driver_ID) >= 2;\n```"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "_catalog;<!--LJ-->"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": " user,<br>\nSELECT COUNT(*) AS num_institutions FROM institution;"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": ">"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": ">"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": ">"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "> SELECT i.Name FROM institution i ORDER BY i.Founded; "
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "\nSELECT \"institution\".\"City\", \"institution\".\"Province\"\nFROM \"institution\";\n"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": " user;\nSELECT i.City, i.Province\nFROM Institution i\n"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "> SELECT MIN(Institution.Enrollment) AS min_enrollment, MAX(Institution.Enrollment) AS max_enrollment FROM Institution;"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": "_cat("
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": " user, SELECT a.Institution_ID, affiliation FROM institution a WHERE City != 'Vancouver';"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": " user;\n\nSELECT i.Affiliation\nFROM institution i\nWHERE i.City != 'Vancouver';\n"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": "ion.stadium as stadium, institution."
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "_cat<br>SELECT i.Name AS institution_name, s.Stadium AS stadium <br>FROM Institution i JOIN Stadium s ON i.Institution_ID = s.Institution_ID <br>ORDER BY s.Capacity DESC;"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": ".institution\nWHERE Institution.Enrollment = (SELECT MAX(Institution.Enrollment) FROM Institution)\nLIMIT 1;"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": "ian:</|im_end|>SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1;"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "("
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": ">\nSELECT i.Name AS institution_name, n.Nickname AS institution_nickname\nFROM Institution i\nJOIN Championship c ON i.Institution_ID = c.Institution_ID;"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": ">SQL>\nSELECT `institution`.`Name` AS \"Institution Name\", `enrollment` AS \"Enrollment\" FROM `institution` JOIN `championship` ON `institution`.`Institution_ID` = `championship`.`Institution_ID` ORDER BY `enrollment` ASC LIMIT 1;"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": ">(SELECT `Name` FROM `institution` ORDER BY `Enrollment` ASC LIMIT 1);"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": ">("
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": ">("
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": "(exists (select 1 from championship where institution.institution_id = institution.institution_id group by institution.institution_id having count(*) > 0));"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": ">"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "_user\nThe correct answer is: SELECT COUNT(Institution_ID) FROM Championship WHERE Affiliation = 'Public';[/ASSISTANT_USER]"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "(sum(CASE WHEN affiliation = 'Public' THEN Number_of_Championships ELSE 0 END) as total FROM championship JOIN institution ON institution.Institution_ID = championship.Institution_ID);"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "(distinct(institution.affiliation), COUNT(*) as num) from institution group by institution.affiliation order by institution.affiliation;"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "(INSTITUTION.Affiliation, COUNT(DISTINCT INSTITUTION.Institution_ID)) AS COUNT(*) GROUP BY INSTITUTION.Affiliation;"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "_count(institution.affiliation) as aff, (SELECT institution.affiliation FROM institution GROUP BY institution.affiliation ORDER BY COUNT(*) DESC LIMIT 1)[/SQL>"
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": ">"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "_catalog>;<br>\nSELECT DISTINCT EXTRACT(YEAR FROM FOUNDed) AS year, COUNT(*) > 1 AS num_institutions\nFROM institutioi\nGROUP BY YEAR(FOUNDed)\nORDER BY YEAR(FOUNDed);"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": ">(select distinct (founded) as year, count(*) as num_institutions\nfrom institution\ngroup by year\nhaving count(*) > 1\norder by year);"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": ">"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": ">("
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "(concat('Vancouver', 'Calgary') as city_name);\nSELECT SUM(institution.enrollment) AS total_enrollment\nFROM institution\nWHERE institution.city ILIKE '%' || city_name || '%'\n[/SQL]"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "(dual, institution.institution_id) as i, institution WHERE city IN ('Vancouver', 'Calgary') ORDER BY name;"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": " DB;<br>SELECT DISTINCT provinces."
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": " province => (select distinct(institution.province) from institution where foundation < 1920 and exists(select 1 from institution where foundation > 1950 and institution.province = institution.province limit 1);[/SQL]\n"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "_catalog>SELECT DISTINCT(institution.\"Province\") FROM institution;"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": "_catalog>=load 'institution.sql';"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": ">"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "@developer.cronos>SELECT w.* FROM Warehouses AS w LEFT JOIN Boxes AS b ON w.Code = b.Warehouse;"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": "|SELECT Boxes.Contents FROM Warehouses WHERE Location='New York' GROUP BY Boxes.Contents HAVING COUNT(Boxes.Contents) > 1 ORDER BY Boxes.Contents;"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "|SELECT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location LIKE '%New York%';"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": "|SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150 AND Boxes.Warehouse IN (SELECT Code FROM Warehouses);"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "(Valuer)>SELECT Boxes.Contents FROM Boxes WHERE Value > 150 AND Boxes.Warehouse IN (SELECT Code FROM Warehouses);"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": "|SELECT w.code, AVG(b.value) AS average_value\nFROM Warehouses w\nJOIN Boxes b ON w.code = b.warehouse\nGROUP BY w.code;"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": ".sql\nSELECT warehouses.location AS warehouse, AVG(boxes.value) AS avg_value\nFROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse\nGROUP BY warehouses.location;"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": ">"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": " user,<br>\nSELECT AVG(Value) AS average, SUM(Value) AS total FROM Boxes;"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": ">"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": ".sql\nSELECT AVG(Warehouses.Capacity) AS average_capacity, SUM(Warehouses.Capacity) AS total_capacity\nFROM Warehouses;"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "(dbname, q)\nSELECT w.Location AS warehouse_location, AVG(b.Value) AS avg_value, MAX(b.Value) AS max_value\nFROM Warehouses w\nJOIN Boxes b ON w.Code = b.Warehouse\nGROUP BY w.Location;"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "_table = (SELECT Contents, AVG(Value) AS avg_value, MAX(Value) AS max_value FROM Boxes GROUP BY Contents);\nSELECT a.Contents, avg_value, max_value FROM substitutional_desk a;"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": "_table_content:=SELECT Boxes.Contents, SUM(Boxes.Value) AS total_value FROM Boxes GROUP BY Boxes.Contents ORDER BY total_value DESC LIMIT 1;"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": ">"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": ">"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": ">SELECT AVG(Boxes.Value) FROM Boxes;"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": ">SELECT Boxes.Contents FROM Boxes;"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "|sql\nSELECT DISTINCT Boxes.Contents FROM Boxes;"
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": ">SELECT COUNT(DISTINCT Boxes.Contents) FROM Boxes;"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "|SELECT COUNT(DISTINCT Boxes.Contents) FROM Boxes;"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": "@db_1502973764>"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": ">SELECT DISTINCT Warehouses.Location FROM Warehouses;"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": "|SELECT Boxes.Code FROM Warehouses WHERE Location IN ('Chicago', 'New York') JOIN Boxes ON Boxes.Warehouse = Warehouses.Code;"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": " user;\nSELECT Boxes.Code\nFROM Warehouses\nJOIN Boxes ON Warehouses.Code = Boxes.Warehouse\nWHERE Location IN ('Chicago', 'New York');\n"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": " user;\nSELECT SUM(Boxes.Value) AS total_value FROM Warehouses WHERE Location IN ('Chicago', 'New York') JOIN Boxes ON Warehouses.Code = Boxes.Warehouse;"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "\nSELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York');"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": ">SELECT Boxes.Contents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE (Warehouses.Location = 'Chicago' OR Location = 'New York');"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "@test (SELECT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York');"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": "; SELECT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location <>New York"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "_catalog.boxes b JOIN warehouses w ON b.warehouse = w.code LEFT JOIN boxes c ON b.contents = c.contents AND c.location <>NEW YORK</b> WHERE w.location IS NOT DISTINCT FROM 'NEW YORK' GROUP BY b.contents HAVING COUNT(*) = 0;"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": " to MySQL and PostgreSQL:\nSELECT DISTINCT w.location \nFROM Warehouses AS w\nJOIN Boxes AS b ON w.code = b.warehouse \nWHERE b.contents = 'Rocks'\nAND b.contents != 'Scissors';"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": " Warehouse.Location FROM Warehouses WHERE NOT EXISTS (SELECT 1 FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code AND Boxes.Contents LIKE 'Rocks' AND Boxes.Contents != 'Cabissors');"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "_box: SET @contents = CASE WHEN Boxes.Contents = 'Rocks' THEN Warehouses.Code ELSE NULL END;\nSELECT DISTINCT Warehouses.Location, Warehouses.Capacity, COUNT(@contents) AS num_rocks_or_acissors_boxes\nFROM Warehouses\nWHERE Code IN (SELECT Code FROM Boxes WHERE Contents IN ('Rocks', 'Acissors"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": ".Boxes"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": " user, SELECT Warehouses.Location FROM Warehouses WHERE EXISTS (SELECT 1 FROM Boxes WHERE Warehouses.Code = Boxes.Warehouse AND Boxes.Contents IN ( 'Rocks', 'Scissors' ) ;"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": " to PostgreSQL."
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "|SELECT Warehouses.Code, Boxes.Contents\nFROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse\nORDER BY Boxes.Value DESC;"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": ">"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "_wares=#your_database#;\nSELECT b.code, b.contents\nFROM boxes b\nWHERE b.value = (\n    SELECT MIN(b2.value)\n    FROM boxes b2\n    WHERE b2.warehouse = b.warehouse\n)\n"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "(min(Boxes.Value), Boxes.Code, Boxes.Contents) as small_value_box\nFROM Boxes\nGROUP BY Boxes.Code, Boxes.Contents\nORDER BY Value ASC\nLIMIT 1;"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": "=#standard_user;\nSELECT DISTINCT Boxes.Contents\nFROM Boxes\nWHERE Boxes.Value > (SELECT AVG(Boxes.Value) FROM Boxes);\n"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": " = (SELECT Boxes.Contents FROM Boxes JOIN (SELECT AVG(Value) AS avg_value FROM Boxes GROUP BY Warehouse) ON Boxes.Warehouse = asquintal.Warehouse AND Value > avg_value.avg_value;"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": ">SELECT Boxes.Contents FROM Boxes GROUP BY Boxes.Contents ORDER BY Boxes.Contents;"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": ">SELECT DISTINCT Boxes.Contents FROM Boxes ORDER BY Boxes.Contents ASC;"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": ".sql"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "=db_connection.connect('database.db');<br />$select b."
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": "_value = (SELECT Value FROM Boxes WHERE Contents = 'Scissors')[1];<br>\n<|im_start|>(SELECT Code, Contents FROM Boxes WHERE Value > (SELECT Value FROM Boxes WHERE Contents = 'Scissors')[1])[1]"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "_codes = (SELECT Code FROM Boxes WHERE Contents LIKE '%Scissors%');\n\n(SELECT B.Code, B.Contents FROM Boxes AS B JOIN Warehouses AS W ON B.Warehouse = W.Code\n    WHERE B.Value > ALL VALUES (SELECT Value FROM Boxes WHERE Code IN assistic_codes) ORDER BY B.Value DESC)"
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "@dev_sql_db>SELECT SUM(Boxes.Value) AS total_value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Capacity = (\n   SELECT MAX(Capacity) FROM Warehouses\n);"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": ".set_schemaschema(N'FOR SCHEMA');\nSELECT Warehouses.Capacity, SUM(Boxes.Value) AS TotalValue\nFROM Boxes\nINNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code\nGROUP BY Warehouses.Capacity\nORDER BY Warehouses.Capacity DESC\nLIMIT 1;"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": "@dbserver(9254)>SELECT w.Code, AVG(b.Value) AS avg_value FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code HAVING AVG(b.Value) > 150;"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": " database>"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": "(code) AS warehouses,\n       (SELECT contents, SUM(value) as total_value, COUNT(*) as num_boxes\n        FROM Boxes\n        GROUP BY Contents) AS subquery\nFROM Warehouses a JOIN subquery b ON a.code = b.warehouse\nORDER BY b.contents;"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "|im_end|>SELECT Warehouses.Location, SUM(Boxes.Value) AS total_value, COUNT(Boxes.Code) AS number_of_boxes FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location;"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": ">SELECT Warehouses.Location AS location, SUM(Warehouses.Capacity) AS total_capacity, AVG(Warehouses.Capacity) AS average_capacity, MAX(Warehouses.Capacity) AS max_capacity\nFROM Warehouses\nGROUP BY Warehouses.Location;"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "@db_schema(user1234567890)>\nSELECT Warehouses.Location AS location, SUM(Warehouses.Capability) AS total_capacity, AVG(Warehouses.Capability) AS average_capacity, MAX(Warehouses.Capability) AS maximum_capacity\nFROM Werehouses\nGROUP BY Warehouses.Location;"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": ">"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "\nSELECT SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses;"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": "@db>SELECT w.location, MAX(b.value) AS max_value\nFROM warehouses w JOIN boxes b ON w.code = b.warehouse\nGROUP BY w.location;"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": ".max(boxes.value) as max_value, warehouses.location<br/>FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code<br/>GROUP BY warehouses.location;"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "@127.0.0.1:3306>SELECT warehouses.code, COUNT(boxes.code) as num_boxes FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code;"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": ">\nThe answer to your question is:\n\nSELECT w.location, COUNT(b.code) AS num_boxes FROM warehouses w JOIN boxes b ON w.code = b.warehouse GROUP BY w.location;"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": "(CONCAT('SELECT COUNT(DISTINCT Boxes.Warehouse) FROM Boxes WHERE Contents = 'Rocks' AND Boxes.Value IS NOT NULL;), (SELECT COUNT(*) FROM Warehouses;) AS difference)(SELECT COUNT(DISTINCT Boxes.Warehouse) FROM Boxes WHERE Boxes.Value IS NOT NULL GROUP BY Boxes.Warehouse HAVING Contents = '"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": " database;\n\nSELECT DISTINCT Boxes.Warehouse AS warehouse FROM Boxes WHERE Contents = 'Rocks';\n"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "\nSELECT b.Code, w.Location AS city_name\nFROM Boxes b\nINNER JOIN Warehouses w ON b.Warehouse = w.Code;"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": " database."
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "|SELECT Boxes.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location = 'Chicago';"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "\nSELECT Boxes.Code\nFROM Boxes\nJOIN Warehouses ON Boxes.Warehouse = Warehouses.Code\nWHERE Warehouses.Location = 'Chicago';\n"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": "\nSELECT Warehouses.Location AS warehouse, COUNT(Boxes.Code) as number_of_boxes\nFROM Boxes\nJOIN Warehouses ON Boxes.Warehouse = Warehouses.Code\nGROUP BY Warehouses.Location;"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": " user,<br>\nSELECT w.location AS warehouse_location, COUNT(b.code) AS num_boxes FROM warehouses w JOIN boxes b ON w.code = b.warehouse GROUP BY w.location;"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": " user;\nSELECT Warehouses.Location, COUNT(DISTINCT Boxes.Contents) AS NumberOfDistinctTypes FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location;"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": " user;\n"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "@localhost:45432>SELECT w.Code\nFROM Warehouses AS w\nWHERE (SELECT COUNT(b.Code) FROM Boxes AS b WHERE b.Warehouse = w.Code) > Capacity\n[SQL]"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": " database:"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": " user;\nSELECT SUM(Boxes.Value) AS total_value FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago');\n"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": ">SELECT SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location <>Chicago"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": "@db>"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": ">\nSELECT University.University_Name, City, State FROM University ORDER BY University.University_Name ASC;"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": ""
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": ""
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "_version=9.6;-->"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "\nSELECT AVG(university.enrollment) AS average_enrollment, MIN(university.enrollment) AS minimum_enrollment, MAX(university.enrollment) AS maximum_enrollment FROM university;"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": "('University.Enrollment') > SELECT university.team_name FROM university WHERE university.enrollment > (SELECT AVG(university.enrollment) FROM university);"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "(avg(enrollment) as avg_enrollment) query\nSELECT university.university_name, team_name\nFROM university\nWHERE (university.enrollment > avg_enrollment)\nGROUP BY university.university_name, university.team_name;"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": "_name</s>\nSELECT u.University_Name AS University_Name, hc.Home_Conference AS Home_Conference\nFROM university u JOIN overall_ranking ar ON u.University_ID = ar.University_ID JOIN major m ON u.University_ID = m.University_ID JOIN major_ranking hr ON (u.University_ID = hr.University_ID AND m.Major"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "|SELECT DISTINCT \"Home_Conference\" FROM \"university\";"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": " user;\n\nSELECT h.Home_Conference AS Conference, COUNT(u.University_ID) AS Number_of_Universities\nFROM university u\nGROUP BY h.Home_Conference\nORDER BY h.Home_Conference;"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": " user;\nWITH RECURSIVE RECURSION AS (SELECT h.home_conference FROM home h UNION ALL SELECT h.home_conference FROM home h JOIN conference c ON h.home_conference = c.conference_name RETURNING home_conference INTO ct GROUP BY ct.home_conference ORDER BY h.home_conference\nFOR EACH (SELECT COUNT(*) AS num_univers"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answer": ">\nThe query will be:\nSELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1;\n"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "([1:University_State]) AS (\nSELECT State FROM university GROUP BY State HAVING COUNT(*) > (SELECT COUNT(*) FROM university GROUP BY State MAX(COUNT(*)) ORDER BY COUNT(*) DESC LIMIT 1)\n)[/SQL] "
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": ">\nSELECT \"university\".* FROM \"university\" JOIN \"overall_ranking\" ON \"university\".\"University_ID\" = \"overall_ranking\".\"University_ID\" WHERE \"overall_ranking\".\"Reputation_point\" > 0 AND \"overall_ranking\".\"Research_point\" > 0 AND \"overall_ranking\".\"Citation_point\" > 0 AND"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "\nSELECT hc.Home_Conference\nFROM university u\nJOIN overall_ranking ar ON u.University_ID = ar.University_ID\nGROUP BY hc.Home_Conference\nHAVING AVG(u.Enrollment) > 2000;"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "(SELECT h.home_conference FROM university h ORDER BY h.enrollment ASC LIMIT 1)[SQL]"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": " user>"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": ""
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "> SELECT m.Major_Name, m.Major_Code FROM major m;"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": " college[|im_end|>\nSELECT m.major_name, r.*\nFROM major m\nJOIN major_ranking r ON m.major_id = r.major_id AND r.university_id = (SELECT university_id FROM university WHERE university_name = 'AugustanaCollege')[|im_end|>UNION ALLY<|im_start|>University[|im_end|>\nSELECT u."
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "own."
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "_rank:=SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON m.Major_Code = 201854 AND mr.Rank=1 JOIN overall_ranking ar ON u.University_ID = ar.University_ID;"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": ">"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "(COUNT(*)) AS total_majors, (SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id GROUP BY university.university_name HAVING COUNT(major_ranking) = MAX(CASE WHEN major_ranking.rank = 1 THEN 1 ELSE 0 END)*>\n"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "\nThe answer to this question would be:\n\nSELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID GROUP BY u.University_Name HAVING COUNT(mr.Rank) = MAX(mr.Rank);"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "@database/>\nSELECT u.University_Name FROM university u LEFT JOIN major m ON u.University_ID = m.University_ID AND m.Rank = 1 WHERE m.Major_ID IS NULL;"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "(@tablename as major_ranking (select * from major_ranking group by university_id, major_id having max(rank) = 1);\nselect distinct u.university_name from university u left join overall_ranking ur on u.university_id = ur.university_id and major_ranking.university_id is null;"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": "\nSELECT DISTINCT u.University_Name FROM university u JOIN overall_ranking ar ON u.University_ID = ar.University_ID JOIN major m1 ON u.University_ID = m1.University_ID AND m1.Major_Code IN (21,102) JOIN major m2 ON u.University_ID = m2.University_ID AND m2.Major_"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "\nSELECT DISTINCT u.University_Name FROM university u JOIN major m ON u.University_ID = u.University_ID WHERE m.Major_Name IN ('Accounting', 'Urban Education') AND (m.University_ID, m.Major_Name) IN (SELECT University_ID, Major_Name FROM major_ranking GROUP BY University_ID HAVING COUNT(*) = 2);"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "(SELECT u.University_Name, o.Rank FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE u.State='Wisconsin' ORDER BY o.Rank DESC; "
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": ""
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "(concat('SELECT University_Name FROM university u JOIN overall_ranking ar ON u.University_ID = ar.University_ID ORDER BY ar.Research_point DESC LIMIT 1;'));"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": ""
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": ">"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": ">"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "\nThe correct SQL query to answer [QUESTION]What is the name of university with major Accounting ranked 3 or above?[/QUESTION] is:\nSELECT \"University_Name\" FROM \"university\" JOIN \"major_ranking\" ON \"University_ID\" = \"university\".\"University_ID\" JOIN \"major\" ON \"Major_ID\" = \"major\".\"Major_ID\" WHERE \"major"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": ""
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": ""
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "(COUNT(*)) as total_students, (SELECT COUNT(*) FROM overall_ranking WHERE Rank <= 5) as universities_with_rank_5_or_below; SELECT total_students, universities_with_rank_5_or_below FROM dual;"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": "('SELECT u.University_Name, o.Citation_point FROM university u JOIN overall_ranking ar ON u.University_ID = ar.University_ID WHERE Reputation_point > 3 ORDER BY Reputation_point DESC LIMIT 3;"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": ""
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "(provide the following SQL query:<br />\nSELECT state FROM university WHERE (SELECT count(university_id) FROM university WHERE enrollment < 3000 GROUP BY state HAVING COUNT(university_id) > 2) AS subquery GROUP BY state)[SQL]"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "(database); WITH university_data AS (SELECT state FROM university WHERE enrollment < 3000 GROUP BY state HAVING COUNT(*) > 2) SELECT DISTINCT state FROM university_data;[/SQL]"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": ">(select Title from Movies where Code not in (select Movie from MovieTheaters))"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": " table to the Movies table:\nSELECT t.Title\nFROM Movies AS t\nLEFT JOIN MovieTheaters AS u ON t.Code = u.Movie\nWHERE u.Rating IS NULL\nAND t.Code NOT IN (SELECT Code FROM Ratings)\n"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": "('Movies.Rating') = 'G' SELECT Movies.Title FROM Movies WHERE Movies.Code IN (SELECT Movie FROM MovieTheaters);"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "(if(Rating='G',Title,null)) as t(Title) FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters);"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": " to PostgreSQL"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": ".movies.title"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "(concat('Movies.Title', ' MovieTheaters.Name')) AS result FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "(MovieTheaters.Name) AS theater, Movies.Title AS movie_title\nFROM MovieTheaters\nJOIN Movies ON MovieTheaters.Movie = Movies.Code;"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": "('G', MovieTheaters.Rating) COUNT(*) FROM Movies;"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "(COUNT(*)) AS num_movies_with_g_rating, (\n  SELECT COUNT(*) FROM Movies WHERE Rating = 'G'\n);"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "@dev;"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "(foundrows(select count(distinct movie) from movietheaters));"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": ">(SELECT COUNT(DISTINCT Movie) FROM MovieTheaters);"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "@local>;<br>SELECT COUNT(DISTINCT Movies.Code) AS num_different_movies FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "@local123(SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters;"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": " to your knowledge, the SQL query to answer [QUESTION]How many different movie theaters exist?[/QUESTION] would be:<br>\nSELECT COUNT(DISTINCT MovieTheaters.Code) AS NumDifferentTheaters FROM MovieTheaters;"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": "(title ilike '%citizen%' and code = m.code) AS subquery FROM movies m;"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "('%citizen%', Movies.Title) AS title, Movies.Rating\nFROM Movies\nWHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name LIKE '%citizen%');"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": "(' Rating', Movies, 'G') OR assistic(' Rating', Movies, 'PG');\n(SELECT Theater.Name FROM MovieTheaters AS Theater JOIN Movies ON MovieTheater.Movie = Movie.Code)"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "('public', 'MovieTheaters') as mt, "
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": ".set_databasename('mydatabase');</|im_end|>\nSELECT m.title \nFROM Movies m \nJOIN MovieTheaters mt ON m.code = mt.movie \nWHERE mt.name IN ('Odeon', 'Imperial')</|im_end|>"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": ".movies.title<br />FROM movies m JOIN movietheaters mt ON m.code = mt.movie<br />WHERE mt.name IN ('Odeon', 'Imperial')"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": ">"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": ".<br>\nSELECT m.Title FROM Movies m JOIN MovieTheaters o ON m.Code = o.Movie JOIN MovieTheaters i ON m.Code = i.Movie WHERE o.Name = 'Odeon' AND i.Name = 'Imperial';"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": "(null, 'MovieTheaters.Name', 'Odeon') IS DISTINCT ON (Movies.Code) SELECT Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Code WHERE MovieTheaters.Name != 'Odeon';"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "(MovieTheaters.Code, 'Odeon') IS NOT NULL AND MovieTheaters.Name != 'Odeon' GROUP BY Movies.Title;"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": "(lower(Title)) as t(Title) select Title from Movies order by t.Title;"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": ">("
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": "(); SELECT Movies.Title FROM Movies ORDER BY Movies.Rating;"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": ";"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": " user;\n"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": " (count(MovieTheaters.Code) as total_movies, MovieTheaters.Name) FROM MovieTheaters GROUP BY MovieTheaters.Name ORDER BY total_movies DESC LIMIT 1;"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": "(@max_count, 0);\nSELECT m.Title\nFROM Movies AS m\nJOIN MovieTheaters AS mt ON m.Code = mt.Movie\nGROUP BY m.Code\nHAVING COUNT(*) > @max_count\nORDER BY COUNT(*) DESC\nLIMIT 1;"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": ".MovieTheaters.Name, COUNT(*) as theater_count, Movies.Title FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code GROUP BY Movies.Title ORDER BY theater_count DESC LIMIT 1;"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": ">(SELECT Rating, COUNT(*) AS num_movies FROM Movies GROUP BY Rating ORDER BY Rating);"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": ".movie_rating(rating) AS (SELECT rating FROM movie ORDER BY rating DESC ROWS LIMIT 1);\nWITH RECURSIVE OR DISTINCT ON (rating) AS (VALUES SELECT rating FROM movies UNION ALLAGGREGATE RATING(rating) OVER (ORDER BY code ASC ROWS BETWEEN UNBOUNDED PRECED ROWS AND LAST_VALUE() IS NULL)\nSELECT rating, CO"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "('rating' IS NOT NULL) AS num_movies_with_ratings;<br>\nSELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": " on Movies(Code) and Rating IS NOT NULL;"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": ".movieTheaters.name FROM movieTheaters\nGROUP BY assistent.movieTheaters.name\nHAVING COUNT(assistant.movies.code) > 0;"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": ".name\nFROM MovieTheaters\nWHERE Movie IN (SELECT Code FROM Movies)\nGROUP BY Name\nHAVING COUNT(Movie) > 0;"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": ".name AS theater_name FROM movie_theaters WHERE Movie IS NULL;"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": ".movieTheaters.name\nFROM movieTheaters\nWHERE movie IS NULL;"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": "(IF((SELECT m.rating) = 'G', n.name, NULL)) AS rating, n.name FROM Movies m JOIN MovieTheaters n ON m.code = n.movie WHERE m.rating = 'G';"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "('rating', 'movies', 'code') = 'g'::text AND exists(select 1 FROM movietheaters WHERE code = m.code) AS theater_name, m.title FROM movies m;"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": ">SELECT Titles FROM Movies;"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": ">"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "|SELECT DISTINCT Rating FROM Movies;"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": ">SELECT DISTINCT Rating FROM Movies;"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": " (rating) = 'U'\nSELECT m.code, m.title\nFROM Movies m\nWHERE NOT EXISTS (\n  SELECT 1\n  FROM MovieTheaters mt\n  WHERE mt.movie = m.code\n);\n"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "(' Rating' = 'R') SELECT m.Code, m.Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie;"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": " (NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movies.Code = MovieTheaters.Movie));"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": " on Movies m left join MovieTheaters mt using (m.Code = mt.Movie) WHERE mt.Code IS NULL AND m.Code IN (SELECT Code FROM Movies) GROUP BY m.Title HAVING COUNT(*) = 0;"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": " user, the heaviest package would be received by an employee who has a shipment record with the maximum weight of all their packages. We can use a subquery to find the employee ID that has the highest weight of packages and then join it with the Employee table to retrieve their name:\n"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": " to the heavy package received by a client:\n\nSELECT c.name AS client_name, p.weight AS package_weight\nFROM Client c\nJOIN Package p ON c.accountnumber = p.recipient\nWHERE p.shipment IN (\n  SELECT MAX(shipment)\n  FROM Package\n  GROUP BY shipment\n  HAVING MAX(weight)\n)\nORDER BY package_weight DESC\nLIMIT 1"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": " to this problem. You can use the following SQL statement:\n\nSELECT SUM(Package.Weight) AS Total_Weight\nFROM Package\nWHERE Package.Sender = (SELECT EmployeeID FROM Employee WHERE Name = 'Leo Wong');\n"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "(concat('SELECT SUM(Package.Weight) FROM Package WHERE Package.Sender = (SELECT EmployeeID FROM Employee WHERE Name = ''Leo Wong'';))"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "|sql>SELECT e.Position FROM Employee e WHERE e.Name = 'Amy Wong';"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "|>\n"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "(Turanga%20Leela) as turanga_leela, (\n  select e.name, e.position, e.salary\n  from employee e\n  where e.employeeid = turanga_leela.employeeid\n) as employee;"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "_user@astrodon > SELECT e.Salary, e.Position\nFROM Employee e\nWHERE e.Name = 'Turanga Leela';"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": ">The average salary for intern positions can be obtained by selecting the `Salary` column from the `Employee` table where the `Position` column matches 'intern':<br>\n```\nSELECT AVG(Salary) FROM Employee WHERE Position = 'intern';"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": ">"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": " user, I believe you meant to ask \"What is the position of a physician?\" To answer that question, we can use the following SQL query:\n```sql\nSELECT Position FROM Employee WHERE Name = 'Physician' LIMIT 1;\n```\n"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": ".clearance_level(employee) AS clr SELECT h.level FROM has_clearance h WHERE h.employee = employee AND h.planet IN (SELECT p.planetid FROM planet p JOIN shipment s ON p.coordinates = s.coordinates JOIN employee e ON s.manager = e.employeeid AND position LIKE '%Physician%')[/SQL]\n"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": " user, I assume you meant \"Leo Wong\" instead of \"Leo\" in your question. Here's the SQL query to list all package numbers sent by Leo Wong:\n```sql\nSELECT p.PackageNumber\nFROM Package p\nJOIN Shipment s ON p.ShipMENT = s.ShipMENT_ID\nJOIN Employee e ON s.Manager = e.EmployeeID\nWHERE e.Name = 'Leo Wong';"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": " to your SQL query: SELECT COUNT(PackageNumber) FROM Package WHERE Sender = (SELECT EmployeeID FROM Employee WHERE Name = 'Leo Wong');"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": ".last_name = 'Wong' AND a.name = 'Leo' SELECT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN employee e ON s.manager = e.employee_id;"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": ".Employee e\nJOIN shipment s ON e.employeeid = s.manager\nJOIN has_clearance hc ON s.shipmentid = hc.shipment AND hc.level = 1\nJOIN package p ON p.shipment = s.shipmentid\nWHERE e.name = 'Leo Wong'\nORDER BY p.packagenumber ASC\n"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": " user, I assume you meant \"Leo Wong\" instead of \"Leo wong\"?<br>\nIf so, the SQL query to list all packages sent or received by Leo Wong is:\n```sql\nSELECT p.Contents, s.Name AS sender_name, r.name AS recipient_name\nFROM Package p\nJOIN Client s ON p.sender = s.accountnumber\nJOIN Client r ON p.recipient = r"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": " to leo wong's package number:\nSELECT DISTINCT p.package_number FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN has_clearance hc ON p.sender = hc.employee OR p.recipient = hc.employee WHERE hc.employee IN (SELECT employeeID FROM employee WHERE name LIKE '%Leo%Wong%');<|im_"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": " to sql:<br>SELECT COUNT(*) FROM Package p JOIN Shipment s ON p.ShipMENT = s.SHIPMENTID JOIN Employee e1 ON s.MANAGER = e1.EMPLOYEEID AND e1.NAME = 'Ogden Wernstrom' JOIN Employee e2 ON p.RECIPEINT = e2.EMPLOYEEID AND e2.NAME = 'Leo Wong"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": " to this database is:\nSELECT COUNT(*) FROM Package WHERE Sender = (SELECT EmployeeID FROM Employee WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT EmployeeID FROM Employee WHERE Name = 'Leo Wong');"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": " to your question is: SELECT Package.Contents FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'John Zoidfarb';"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": ">\nThe query to answer \"What are the package contents of all those sent by John Zoidfarb?\" would look like this:\nSELECT p.Contents FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Client c1 ON p.Recipient = c1.AccountNumber JOIN Employee e1 ON s.Manager = e1.EmployeeID WHERE e1.Name = 'John Zoidfarb'"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": " user;\n"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": " user, SELECT p.package_number, p.weight FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN client c ON p.sender = c.account_number WHERE (c.name ILIKE '%John%' OR c.name LIKE '%Johan%' OR c.name LIKE '%Jo%h') AND p.weight=(SELECT MAX(p2.weight) FROM package p2 JO"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": " to your query:<br />\nSELECT p.PackageNumber, p.Weight\nFROM Package p\nORDER BY p.Weight ASC\nLIMIT 3;"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": " to the 3 lightest packages:<br />\nSELECT p.packageNumber, p.weight <br />FROM package p <br />ORDER BY p.weight ASC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": " user,<br>\nThe following SQL query can be used to answer the question.<br>\n"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": " user>The name of the client who sent the most packages and the number of packages they sent can be obtained by joining the `Client` table with the `Package` table on the `AccountNumber` field, then grouping by the `Sender` column in the `Package` table and using the `COUNT(*)` function to get the number of packages for each client and ordering the result by the number of packages sent in descending order. The query would look like this:<|"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": " to your question, here's the SQL query to find the client who received the least number of packages and the corresponding number of packages received:\nSELECT c.name AS client_name, COUNT(p.package_number) AS num_packages\nFROM package p\nJOIN client c ON p.recipient = c.account_number\nGROUP BY c.account_number\nORDER BY num_packages ASC\nLIMIT 1;<|im_end|"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": " user\nYour SQL query is: SELECT e.name, s.shipmentid, MIN(p.packagenumber) AS min_package_number FROM employee e JOIN shipment s ON e.employeeid = s.manager JOIN has_clearance hc ON e.employeeid = hc.employee AND hc.level = 1 JOIN package p ON s.shipment = p.shipment AND p.recipient = e"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": " users can use this:\nSELECT c.name as client_name, COUNT(p.shipment) AS num_packages\nFROM Client c\nJOIN Package p ON c.accountnumber = p.recipient\nGROUP BY c.name\nHAVING COUNT(p.shipment) > 1;"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "(count(DISTINCT Sender) > 1 FROM Package GROUP BY Sender HAVING COUNT(ShipMENT) > 1);"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": " to your database management software: SELECT p.Coordinates FROM Planet p WHERE p.Name = 'Mars';"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "_system"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": "|>\nThe SQL query to answer the question would be: SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "_order_by_name_and_coordinates_of_planets.sql"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": " to Philip J. Fry's management: SELECT s.ShipMENTID FROM Employee e JOIN Shipment sh ON e.EmployeeID = sh.Manager WHERE e.Name = 'Philip J. Fry';"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "(concat('SELECT ShipmentID FROM Shipment WHERE Manager =', (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry'));"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": ">SELECT Date FROM Shipment;"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "|"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": ">(<|sql|>SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT ID FROM Planet WHERE Name = 'Mars');<|sql|>\n"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": ".last_row_id();\nSELECT s.* FROM Shipment s JOIN Employee e ON s.manager = e.employeeid JOIN Planet p ON s.planet = p.planetid WHERE p.name = 'Mars';\n"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": " to the 'Employee' table:\nSELECT s.ShipMENTID FROM Shipment s JOIN Employee e ON s.MANAGER = e.EMPLOYEEID JOIN Planet p ON s.PLANET = p.PLANETID WHERE p.NAME = 'Mars';"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "(concat('SELECT s.ShipMENTID FROM SHIPMENT s JOIN Employee e ON s.MANAGER = e.EMPLOYEEID JOIN Has_Clearance hc ON s.SHIPMENT = hc.SHIPMENT AND hc.PLANET = 10 JOIN Planet p ON s.PLANETID = p.PLANETID WHERE p.NAME = ''Mars'', ';SELECT SHIPMENT"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": " to the 'Planet' table:\nSELECT DISTINCT s.ShipmentID FROM Shipment s WHERE (s.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR (s.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'));"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "(concat('SELECT s.shipmentid FROM shipment s JOIN employee e ON s.manager = e.employeeid JOIN has_clearance hc ON s.planet = hc.planet AND hc.level = 1 JOIN planet p ON s.planet = p.planetid WHERE p.name = ''Mars'' AND e.name = ''Turanga Leela'';"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": "(concat(p.name, ' - ', SUM(s.shipment), '\\n'));</pre>"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "(CONCAT('SELECT Planet.Name, COUNT(ShipMENT) AS num_shipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name;'))"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": " table Shipment;<br>SELECT p.Name FROM Planet p JOIN (SELECT c.Planet, COUNT(*) as num_shipments FROM Shipment GROUP BY c.Planet ORDER BY num_shipments DESC LIMIT 1) s ON p.PlanetID = s.Planet;"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "([QUESTION]What is the name of the planet with the most shipments?[/QUESTION])<br>\nSELECT p.name AS planet_name<br>FROM shipment s JOIN employee e ON s.manager = e.employeeid JOIN has_clearance hc ON s.planet = hc.planet AND hc.level IN (1, 2, 3) JOIN planet p ON s.planet"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": ">"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": " to this SQL query: SELECT e.Name AS Manager_name, COUNT(s.ShipmentID) as Number_of_shipments FROM Employee e JOIN Shipment s ON e.EmployeeID = s.Manager GROUP BY e.Name;"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": " to your database. I'm assuming you have a table named `Package` with a column called `Weight`. The following SQL query will give you the total weight of packages shipped from Earth and Mars:<br />\n```sql\nSELECT SUM(CASE WHEN p.PlanetID = 1 THEN p.Weight ELSE 0 END) AS Mars_weight,<br />\n       SUM(CASE WHEN p.PlanetID = 2 TH"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": ""
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": " to your query:<br>```sql<br>SELECT p.name, SUM(p.weight) AS total_weight FROM package p JOIN shipment s ON p.shipment = s.shipment_id JOIN employee e ON s.manager = e.employee_id JOIN planet pl ON s.planet = p.planet GROUP BY p.name;"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": ".package_planet(planet.name) AS pp, shipment.employee as e, package.weight\nSELECT pp.name, SUM(package.weight) as total_weight\nFROM planet AS pp\nJOIN shipment ON pp.PlanetID = shipment.planet\nJOIN has_clearance hc ON shipment.manager = hc.employee AND pp.PlanetID = hc.planet\nJOIN employee"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": "_level(HAS_CLEARNCE.planet) as p\nJOIN (SELECT s.shipment, SUM(p.weight) AS total_weight\nFROM shipment s JOIN package p ON s.shipment = p.shipmentnumber\nGROUP BY s.shipment\nHAVING SUM(p.weight) > 30) as total_weight\nWHERE s.manager = a.employeeid AND p.shipment"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "_schema."
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": " user; SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8');"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": " to omicron persei 8:<br>\nSELECT COUNT(*) AS num_packages FROM Package p JOIN Shipment s ON p.ShipMENT = s.SHIPMENTID JOIN Employee e ON s.MANAGER = e.EMPLOYEEID WHERE e.NAME = 'Zapp Brannigan' AND p.RECIPEIENT = (SELECT planetid FROM Planet WHERE name = 'Omicron Persei "
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": " to a SQL database with the following schema:\nCREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n);\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": " in (shipment, has_clearance) and has_clearance.level > 5 and shipment.date between '2019-01-01' and '2019-12-31' and employee exists (select employeeid from employee where name = 'Zapp Brannigan') group by shipment having sum(package_number) (count(*)) as count order by shipment desc limit by shipment.date;<"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": ">SELECT p.package_number, p.weight FROM package p WHERE p.weight BETWEEN 10 AND 30;"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": " user,<br>\nSELECT PackageNumber, Weight<br>FROM Package<br>WHERE PackageNumber BETWEEN 10 AND 30;<br>"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": " to mysql:"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": " to mysql or any other database: SELECT e.Name FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT p.PlanetID FROM Planet p WHERE p.Name = 'Mars') WHERE hc.Planet IS NULL;"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": ".clearance(Employee.employeeid) IN (SELECT has_clearance.employee FROM has_clearance WHERE has_clearance.planet = (SELECT planet.planetid FROM planet WHERE planet.name = 'Omega III') AND has_clearance.level = 3);"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": ".Has_Clearance."
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": " database 'database_name';\nSELECT p.Name AS planet_name\nFROM Planet p\nJOIN Shipment s ON p.PlanetID = s.Planet\nJOIN Employee e1 ON s.Manager = e1.EmployeeID\nJOIN Has_Clearance hc1 ON s.ShipMENT = hc1.ShipMENT AND hc1.Employee = e1.EmployeeID\nLEFT JOIN Employee e2 ON"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": " database <employee>, <planet>, <shipment>, <has_clearance>, and <client>; SELECT <p.name> AS <planet_name>, <e.name> AS <employee_name> FROM <employee> E, <planet> P, <shipment> S, <has_clearance> H WHERE E.<employeeid>=H.<employee> AND <p.planetid>=H.<planet>"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": ">\nSELECT Employee.Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": ">"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": ">\n```sql\nSELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000;\n"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": " database.SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee);"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": " to this schema:"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": ".planet where p.name = 'Mars' and not exists (select distinct hc.employee from has_clearance hc where hc.planet = p.planetid) group by p.planetid having count(*) = 0;"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": ">"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": ">\n"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": "(game.Title, game.Developers)\nSELECT game.Title, game.Developers\nFROM game\nORDER BY game.Units_sold_Millions DESC;"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "(catname: 'game')\nSELECT game.title AS game_title, developers.developer AS developer\nFROM game\nJOIN platform ON game.platform_id = platform.platform_id\nJOIN developers ON game.game_id = developers.game_id\nORDER BY game.units_sold_millions DESC;"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": ""
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": "(avg(game.units_sold_millions) as avg_sales FROM game WHERE game.developers != 'Nintendo' group by game.platform_id;"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "@developer>SELECT p.Platform_name AS name, pd.Market_district AS market_district FROM platform p;"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": "@developer>SELECT p.Platform_name, pd.Market_district FROM platform p JOIN platform pd ON p.Platform_ID = pd.Platform_ID;"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": ">"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": ">"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": "(max(player.rank_of_the_year)) AS max_rank, MIN(player.rank_of_the_year) AS min_rank FROM player GROUP BY EXTRACT(YEAR FROM STR_TO_DATE(player.Position, '%m/%d/%Y')) ORDER BY rank_of_the_year;"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": ">(SELECT MIN(player.rank_of_the_year) AS min_rank, MAX(player.rank_of_the_year) AS max_rank FROM player);"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": ".set_databasemode(pgsql);"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": "(COUNT(DISTINCT player.player_id) FROM player WHERE player.rank_of_the_year <= 3);"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": ">SELECT \"Player_name\" FROM \"player\";"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": ">SELECT \"Player_name\" FROM \"player\";"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": "(rank() over (order by p.Rank_of_the_year desc, p.Player_name) as rank, p.*);"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "(rank() over (order by player.rank_of_the_year desc) as ranked_year, player.*\nfrom player\norder by ranked_year desc;"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": ">\nSELECT player.player_name, rank_of_the_year\nFROM player\nJOIN game_player ON player.player_id = game_player.player_id\nJOIN game ON game_player.game_id = game.game_id AND game.title = 'Super Mario World'\nORDER BY rank_of_the_year DESC;"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "@sqlite> SELECT p.player_name, rp.rank_of_the_year FROM player p JOIN rankings rp ON p.player_id = rp.player_id JOIN game g ON p.player_id = g.game_player AND g.game_id IN (SELECT game_id FROM game WHERE title='Super Mario World');"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": ">SELECT DISTINCT game.Developers FROM game JOIN player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn';"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": ">\nSELECT DISTINCT game.Developers\nFROM game\nJOIN platform ON game.Platform_ID = platform.Platform_ID\nJOIN player ON game_player.Game_ID = game.Game_ID AND player.Player_ID = game_player.Player_ID\nWHERE college LIKE 'Auburn%' OR college LIKE 'Auburn University%' OR college LIKE 'Auburn University of Alabama%';"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": ".setdatabasemodel(database='your_database')<br/>SELECT SUM(game.Units_sold_Millions) / COUNT(DISTINCT player.Player_ID) AS avg_units_sold_per_player FROM game JOIN player ON game.Game_ID = game_player.Game_ID AND player.Player_ID = game_player.Player_ID WHERE player.Position = 'Guard';<"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": " database"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": ">SELECT game.title, platform.platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id;"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "(game.title || ' ' || platform.platform_name AS game_details\nFROM game\nJOIN platform ON game.platform_id = platform.platform_id;"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "(if (platform.markedistrict = 'Asia' or platform.markedistrict = 'USA', game.title, NULL) as title FROM platform JOIN game ON platform.platform_id = game.platform_id;"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": ".set_schema(videogames) ;\nSELECT g.title\nFROM game g\nJOIN platform p ON g.platform_id = p.platform_id\nWHERE p.market_district IN (\n    'Asia',\n    'USA'\n);"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": "@databasename>postgresql"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "@database> SELECT game.Franchise, COUNT(game.Game_ID) as number_of_games FROM game GROUP BY game.Franchise;"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": "@databasemaster;\nSELECT franchise\nFROM game\nGROUP BY franchise\nORDER BY COUNT(*) DESC\nLIMIT 1;"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "(COUNT(*) FROM game WHERE Franchise IS NOT NULL GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1)[SQL]"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": ">SELECT DISTINCT franchise FROM game ORDER BY franchise HAVING COUNT(*) > 1;"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": ">"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": ">"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": ">\nSELECT player.player_name\nFROM player\nWHERE NOT EXISTS (\n  SELECT 1\n    FROM game_player\n  WHERE player.player_id = game_player.player_id\n);"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": ">(SELECT g.title FROM game g JOIN game_player GP ON g.game_id = GP.game_id JOIN player p ON GP.player_id = p.player_id WHERE p.college IN ('Oklahoma', 'Auburn') GROUP BY g.title HAVING COUNT(DISTINCT CASE WHEN p.college = 'Oklahoma' THEN p.player_id END) = COUNT("
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": ">"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": ";\nSELECT DISTINCT game.franchise FROM game;"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "\nSELECT DISTINCT \"Franchise\" FROM game;"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": "(game.title) as title\nFROM game\nWHERE NOT EXISTS (\n  SELECT 1 FROM player, game_player, game\n  WHERE player.position = 'Guard' AND game_player.game_id = game.game_id AND game.game_id = game_player.game_id AND player.player_id = game_player.player_id);"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": ">\nSELECT game.title FROM game LEFT JOIN game_player ON game.game_id = game_player.game_id LEFT JOIN player ON game_player.player_id = player.player_id WHERE game_player.player_ID IS NULL AND player.position <>Guard< AND EXISTS (SELECT 1 FROM player p2 WHERE p2.position = 'Guard' AND p2.player_id != player.player_id"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": "@db>"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": "_category : (author.name as author_name, press.name as press_name)\nSELECT press_name, year(book.release_date) as year, SUM(cast(sale_amount AS decimal) / 1000000000) as profits\nFROM book JOIN press ON book.press_id = press.press_id GROUP BY press_name, year(book.release_date) ORDER"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": ""
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": ""
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "(AVG(press.Year_Profits_billion), MAX(press.Year_Profits_billion)) AS (SELECT AVG(press.Year_Profits_billion), MAX(press.Year_Profits_billion) FROM press GROUP BY press.Year_Profits_billion);"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": "_catalog.reload();<br>SELECT p.name AS press_name, AVG(pb.year_profits_billion) AS average_yearly_profit, MAX(pb.year_profits_billion) AS max_yearly_profit\nFROM press p JOIN book b ON p.press_id = b.press_id JOIN period_of_sale pos ON pos.book_id = b.book_id JOIN"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": "_query=[SELECT p.Name FROM press p ORDER BY p.Month_Profits_billion DESC LIMIT 1;"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": "_press."
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": ">\nThe answer to your question depends on whether you want to find the publisher with the highest monthly profit or the lowest monthly profit. Here are both options:\n\nTo find the publisher with the highest monthly profit:\n```sql\nSELECT p.Name\nFROM press p\nJOIN (SELECT b.Press_ID, MAX(CAST(sale_amount AS REAL) / MONTHS_BETWEEN EXTRACT(YEAR FROM release_date)"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "@dbname;\nWITH press1 AS (SELECT Press_ID, MAX(Month_Profits_billion) AS max_monthly_profit FROM press GROUP BY Press_ID),\npress2 AS (SELECT Press_ID, MIN(Month_Profits_billion) AS min_monthly_profit FROM press GROUP BY Press_ID),\nmax_press (SELECT Name FROM press JOIN press max_monthly ON press."
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "_cat"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": "_user>\nSELECT COUNT(*) FROM author WHERE Age < 30;"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "(avg(author.age)) as avg_age, author.gender\nFROM author\nGROUP BY author.gender;"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": ""
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": ">"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": ">\nSELECT Gender, COUNT(*) as num_authors FROM author WHERE Age > 30;"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": ">\nSELECT b.Title FROM book b ORDER BY CAST(EXTRACT(STR_TO_DATE(Release_date, '%Y-%m-%d') AS DATE) DESC;\n"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": ">"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": ">(SELECT book.book_series, COUNT(*) AS num_books FROM book GROUP BY book.book_series);"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": "(count(*) as total_books, book.book_series from book group by book.book_series)[sql]"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": "(rank() over (order by book.sale_amount desc, press.month_profits_billion, press.year_profits_billion, book.release_date) as sale_rank, author.name as author_name, press.name as press_name, book.title, book.release_date\nFROM book\nJOIN author ON book.author_id = author.author_id\nJOIN press ON book.press_id"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": ">\nThe query will run on a database with the following schema:\nCREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": "\nIt looks like you're trying to find a book series that has both books that sell over $1,000 and books that sell under $500. Here's the SQL query for that:\n```sql\nSELECT Book_Series FROM book GROUP BY Book_Series HAVING SUM(CASE WHEN Sale_Amount::numeric > 1000 THEN Sale_Amount ELSE 0 END) > 0 AND SUM"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": ">\n"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "\nThe query is: SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series IN ('MM', 'LT');"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": ">"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": "(count(*) from author a join book b on a.author_id = b.author_id) as total_authors, (select name, age from author where author_id not in (select author_id from book)) as no_books;\n"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": ".author.name"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": ">SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 2;"
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": "@db653297089558462378>"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": ">(select b.title, a.name, p.name from book b join author a on b.author_id = a.author_id join press p on b.press_id = p.press_id order by CAST(sale_amount AS DECIMAL) DESC LIMIT 3);"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": "\nThe answer is: SELECT b.title AS book_title, a.name AS author_name, p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY CAST(sale_amount AS REAL) DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": ">\nSELECT p.Name AS press_name, SUM(b.Sale_Amount) AS total_sales\nFROM press p\nJOIN book b ON p.Press_ID = b.Press_ID\nGROUP BY p.Name;"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": ">\nSELECT a.Name AS author_name, p.Name AS press_name, SUM(sale_amount) AS total_sales\nFROM author a JOIN book b ON a.Author_ID = b.Author_ID JOIN press p ON b.Press_ID = p.Press_ID\nGROUP BY a.Name, p.Name;"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": ">"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": ".press.name, COUNT(*) AS num_books FROM press JOIN book ON press.press_id = book.press_id WHERE CAST(book.sale_amount AS FLOAT) > 1000 GROUP BY assistant.press.name;"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "\nThe name of the author of the best selling book can be obtained by joining the `author` and `book` tables with a `GROUP BY` clause to get the total sales amount for each author and then using a subquery to find the maximum sales amount and matching its corresponding author."
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer": "> SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY CAST(b.Sale_Amount AS DECIMAL) DESC LIMIT 1;"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": ">\nThe correct SQL query to answer the question is:\n\nSELECT a.name, a.gender FROM author a JOIN (SELECT b.author_id, COUNT(b.book_id) as num_books FROM book b GROUP BY a.author_id HAVING COUNT(b.book_id) = (SELECT MAX(num_books) FROM book)) c ON a.author_id = c.author_id;<|"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": ""
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": ">\nSELECT a.Name\nFROM author a\nWHERE a.Author_ID NOT IN (\n    SELECT b.Author_ID\n    FROM book b\n    JOIN press p ON b.Press_ID = p.Press_ID\n    WHERE p.Name = 'Accor'\n)"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": ">(SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Press_ID NOT IN (SELECT Press_ID FROM press p WHERE Name = 'Accor') AND a.Author_ID IS NULL);"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": ">\n```sql\nSELECT a.Name, p.Year_Profits_billion as total_yearly_profit_in_million\nFROM author a JOIN book b ON a.Author_ID = b.Author_ID JOIN press p ON b.Press_ID = p.Press_ID\nGROUP BY a.Name, YEAR(p.Year_Profits_billion)\nHAVING COUNT(DISTIN"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": "\nThe query you provided does not seem to be correct. The \"Press_ID\" column should be in the SELECT clause as well."
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": " in (SELECT Authors.author_name FROM Authors LEFT JOIN Documents ON Authors.author_name = Documents.document_id WHERE Documents.document_id IS NULL); SELECT COUNT(*) AS author_count FROM Authors; "
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": "]"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": " in Authors JOIN Documents d ON (Authors.author_name = d.document_id) JOIN Staff s ON (d.staff_id = s.staff_id);"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": " denesik</sear.author_name>;<br>SELECT a.author_name, ad.other_details <br>FROM Authors a <br>JOIN Documents d ON a.author_name = d.author_name <br>LEFT JOIN Documents_Processes dp ON d.document_id = dp.document_id <br>JOIN Staff_in_Processes sip ON dp.document_id = sip.document"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": " in Documents; SELECT COUNT(*) AS document_count FROM Documents;"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "</s>SELECT Authors.author_name FROM Documents JOIN Documents_Processes ON Documents.document_id = Documents_Processes.document_id JOIN Staff_in_Processes ON Documents_Processes.process_id = Staff_in_Processes.process_id JOIN Authors ON Staff_in_Processes.staff_id = Authors.author_name WHERE Documents.document_id = 4;<|im_"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": ""
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "(\"era kerluke\") as author_name\nSELECT COUNT(*) FROM Authors a JOIN Documents d ON a.author_name = d.author_name;"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": " in SELECT D.document_name, D.document_description FROM Documents D;"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": " IN Ref_Staff_Roles (staff_role_code) VALUES ('Bianka Cummings') AS staff\nJOIN Documents ON docs.document_id = dp1.document_id AND staff.staff_id = s1.staff_id\nSELECT docs.document_id, authors.author_name FROM Documents authors JOIN Documents dp1 ON docs.document_id <>!=<|im_end|"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": ".document_name = 'Travel to China' SELECT authors.author_name, authors.other_details FROM documents JOIN authors ON documents.author_name = authors.author_name WHERE document_id IN (SELECT document_id FROM documents_processs WHERE process_status_code = 'approved');"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": "_id, staff_role_code, document_id, author_name, document_description, date_from, date_to FROM Documents JOIN Authors ON Documents.author_name = Authors.author_name LEFT JOIN Staff ON Staff_in_Processes.staff_id = Staff.staff_id LEFT JOIN Ref_Staff_Roles ON Staff_in_Processes.staff_role_code = Ref_Staff_R"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "</s> SELECT Authors.author_name\nFROM Authors\nJOIN Documents ON Authors.author_name = Documents.author_name\nGROUP BY Authors.author_name\nORDER BY COUNT(Documents.document_id) DESC\nLIMIT 1;"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": "(COUNT(*)) OVER (PARTITION BY Authors.author_name ORDER BY Authors.author_name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS num_docs, Authors.author_name\nFROM Authors\nWHERE num_docs >= 2"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "_role IN Ref_Staff_Roles; SELECT COUNT(DISTINCT bp.process_id) FROM Business_Processes bp;"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": " IN Staff_in_Processes WHERE document_id = 9 AND staff_id = 9 GROUP BY process_id, next_process_id ORDER BY next_process_id ASC LIMIT 1;\n(SELECT process_id, process_name, process_description FROM Business_Processes WHERE process_id = next_process_id)"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": " SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9)"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "_role_id INTEGER,\nstaff_id INTEGER,\ndocument_id INTEGER,\nprocess_id INTEGER,\nprocess_outcome_code CHAR(15),\nprocess_status_code CHAR(15),\ndate_from DATETIME,\ndate_to DATETIME\nFROM Documents_Processes AS dp\nJOIN Business_Processes AS bp ON dp.document_id ="
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": ">SELECT p.process_outcome_code, p.process_outcome_description FROM Process_Outcomes p;"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "_description from Process_Outcomes where process_outcome_code = 'working'"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": " in (SELECT process_status_code FROM Process_Status);"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": ">SELECT Process_Status.process_status_code, Process_Status.process_status_description FROM Process_Status;"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": ".description FROM Process_Status WHERE process_status_code = 'ct';"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "\n### Given the database schema, here is the SQL query that How many staff do we have?\n"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": ">"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": ".staff_id = 100 AND staff.staff_details FROM Staff staff;"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": "|"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": "_roles.<staff_role_code>, <staff_role_description>"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": ".role_description as role_description FROM Staff_in_Processes WHERE staff_id IN (SELECT staff_id FROM Staff WHERE staff_details = 'HR') JOIN Ref_Staff_Roles ON staff_role_code = staff_role_code;"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": " in Documents, Documents_Processes count(*) as document_count FROM Documents LEFT JOIN Staff_in_Processes ON Documents.document_id = Documents_Processes.document_id AND Documents_Processes.process_id = ? WHERE Documents_Processes.process_id IS NOT NULL;"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": " in Staff_in_Processes (document_id, process_id)\nSELECT DISTINCT process_id\nFROM Documents_Processes\nWHERE document_id IN (SELECT document_id FROM Documents);"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": " IN ((SELECT Document_id FROM Documents) WHERE (Document_id NOT IN (SELECT Document_ID FROM Documents_Processes));"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": " in (select staff_id from Staff)\ngroup by staff_id\nhaving count(document_id) = 0;"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": " IN Ref_Staff_Roles (staff_role_code) AS staff_role,\nprocesses IN Business_Processes (process_id) JOIN Documents_Processes (document_id, process_id) ON document.document_id = :document_id AND documents_processs.process_id = processes.process_id JOIN Process_Outcomes (process_outcome_code) ON documents_processs.process_outcome_"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "_description as p\njoin documents d on p.document_id = d.document_id\njoin documents_processes dp on d.document_id = dp.document_id and dp.process_id = p.process_id\njoin process_outcomes po on dp.process_outcome_code = po.process_outcome_code and dp.process_status_code = po.process_status_code\njoin staff_in_processes"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": " IN Ref_Staff_Roles (staff_role_code) SELECT p.process_id, COUNT(dp.document_id) AS document_count FROM Documents d JOIN Documents_Processes dp ON d.document_id = dp.document_id JOIN Staff_in_Processes sip ON dp.document_id = sip.document_id AND sip.process_id = p.process_id GROUP BY"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": "_id,<br>staff_id<br>FROM Documents_Processes<br>WHERE document_id = 0 AND process_id = 9;<br><br>SELECT COUNT(DISTINCT staff_id) AS staff_count<br>FROM Staff_in_Processes<br>WHERE document_id = 0 AND process_id = 9;"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": ">(DB); SELECT s.staff_id, COUNT(dp.document_id) AS num_processes FROM Staff s JOIN Staff_in_Processes sip ON s.staff_id = sip.staff_id GROUP BY s.staff_id;"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": "('', (SELECT s.staff_role_code, COUNT(*) AS num_processes FROM Staff_in_Processes si PJOIN Documents d ON si.document_id = d.document_id PJOIN Processes p ON si.process_id = p.process_id PJOIN Ref_Staff_Roles r on s.staff_id = r.staff_role_code GROUP BY s.staff_role_"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": " IN Ref_Staff_Roles (staff_role_code)\nSELECT COUNT(DISTINCT s.staff_role_code) AS num_roles\nFROM Staff_in_Processes sip JOIN Staff s ON s.staff_id = sip.staff_id\nWHERE s.staff_id = 3\nAND sip.staff_id IN (SELECT staff_id FROM Staff WHERE staff_id = 3)\n"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "_count(distinct agencie_id) as num_agencies;"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "_count SELECT COUNT(DISTINCT agencie_id) AS num_agencies FROM Agencies;"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": "]"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": ""
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": " user\nYou have answered correctly. Well done! "
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": " user\nPlease check my answer below:"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": " user><br />SELECT c.client_id, c.client_details FROM Clients c;"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": " user\nPlease check your answer again."
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": " users>The SQL query to answer the question is:\n```sql\nSELECT a.agency_id, COUNT(DISTINCT c.client_id) AS number_of_clients\nFROM Agencies a\nJOIN Clients c ON a.agency_id = c.agency_id\nGROUP BY a.agency_id;"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "> SELECT a.agency_id, COUNT(c.client_id) AS num_clients FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id;"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": " user\n```sql\nSELECT a.agency_id, a.agency_details\nFROM Agencies a\nJOIN Staff s ON a.agency_id = s.agency_id\nJOIN Clients c ON s.staff_id = c.staff_id\nGROUP BY a.agency_id, a.agency_details\nORDER BY COUNT(c.client_id) DESC\nLIMIT 1;\n```"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": ">"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": " IN (SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id JOIN Clients c1 ON s.staff_id = c1.client_id LEFT JOIN Invoices i ON c1.client_id = i.client_id WHERE EXISTS (SELECT 1 FROM Clients c2 WHERE c1.client_id = c"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": " (SELECT a.agency_id, a.agency_details FROM Agencies a INNER JOIN (SELECT s.agency_id FROM Staff s GROUP BY s.agency_id HAVING COUNT(s.agency_id) > 2);"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "='PostgreSQL' SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_details LIKE '%Mac%';"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": " SELECT Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE Clients.client_details LIKE '%Mac%';"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": " user, this query will return the client's id, name, agency's id, the agency's name, staff's id, staff's name and the staff's corresponding agency."
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "_agencies.agency_details AS agency_details, clients.client_details AS client_details\nFROM clients\nJOIN agencies ON clients.agency_id = agencies.agency_id;"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "_id agency_id staff_id client_id invoice_id meeting_id payment_id, "
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "_code TEXT, client_count INT<br />\nSELECT a.agency_details AS agency_name, sc.sic_code, COUNT(DISTINCT c.client_id) AS client_count<br />\nFROM Agencies a<br />\nJOIN Clients c ON a.agency_id = c.agency_id<br />\nGROUP BY a.agency_details, sc.sic_code;<"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "_id varchar(255), client_details varchar(255)\nSELECT c.client_id, c.client_details\nFROM Clients c\nWHERE c.sic_code = 'Bad'\nORDER BY c.client_id;"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": " users have complained about the length of your answers. So I've added some explanatory comments."
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": ">SELECT agencies.agency_id, agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id;"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": " SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id;"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": "_id<> ALL IN (SELECT DISTINCT agencies.agency_id FROM Clients) SELECT agencies.agency_id FROM Agencies;"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": " agencies.agency_id\nWHERE NOT EXISTS (SELECT 1 FROM Clients WHERE Agencies.agency_id = Clients.agency_id);"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": " user, you've provided a valid SQL query. Here's your answer: SELECT COUNT(*) FROM Invoices;"
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": " user,\nYou can use the following SQL query to answer the question:\n```sql\nSELECT COUNT(invoices.invoice_id) AS num_of_invoices FROM invoices;\n```\n"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": "_code varchar(10), a.invoice_details, i.agency_id\nFROM Invoices i JOIN Clients c ON i.client_id = c.client_id\nWHERE i.invoice_status IS NOT NULL\nORDER BY i.invoice_id;"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": " INVOICES (invoice_id, invoice_status, invoice_details) SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": " users>The SQL query to answer \"Show all client ids and the number of invoices for each client.\" is:\n```sql\nSELECT clients.client_id, COUNT(invoices.invoice_id) AS num_invoices FROM clients LEFT JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id;"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": " user, it's not clear what you mean by \"How many invoices are there for each client id?\" Are you asking how many invoices a client has or how many invoices there are for each client id in the database? Here's the answer to both:\n"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": " user;\nWITH RECURSIVE CTE AS (\n  SELECT c.client_id, COUNT(i.invoice_id) as num_invoices FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id\n  UNION ALLERY CTE AS (SELECT a.agency_id, COUNT(i.invoice_id) as"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": " user><br />The following SQL query will answer [QUESTION]What are the client id and details for the client with the most invoices?[/QUESTION]:<br /><br /><br />```sql<br />SELECT c.client_id, c.client_details, COUNT(*) as num_invoices<br />FROM Invoices i<br />JOIN Clients c ON i.client_id = c"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": " 'select clients.client_id' from clients inner join invoices on clients.client_id = invoices.client_id group by clients.client_id having count(invoices.invoice_id) > 2;"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "_id</sliced_paste0>SELECT DISTINCT c.client_id FROM Invoices i JOIN Clients cl ON i.client_id = cl.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2;"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": " table agencys;\nselect i.invoice_status, count(*) as num_invoices\nfrom invoices i\ngroup by i.invoice_status;"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": " (concat('SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status;"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": " statuses = (SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1);\n"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "_status (SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1)[ASSISTANT_STATUS]"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": ">"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": ">"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": " user\nThe query to answer [QUESTION]List all meeting type codes and details.[/QUESTION] is:\n\nSELECT m.meeting_type, m.meeting_id, m.purpose_of_meeting, m.other_details\nFROM Meetings m;"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": " user\nYour SQL query to answer [QUESTION]What are all meeting types and other details?[/QUESTION] is:\nSELECT m.meeting_type, p.invoice_status, s.staff_details, o.other_details FROM Meetings m JOIN Invoices i ON m.client_id = i.client_id JOIN Staff s ON m.staff_id = s.staff_id LEFT JOIN Payments"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": " user\n```sql\nSELECT m.meeting_id, m.meeting_outcome, m.purpose_of_meeting\nFROM Meetings m;\n"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": " user, your SQL query to answer [QUESTION]What are all meeting outcomes and purposes?[/QUESTION] is:\nSELECT m.meeting_id, m.meeting_outcome, m.purpose_of_meeting\nFROM Meetings m;"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "('Working', invoices.invoice_status) SELECT payments.payment_id, payments.payment_details FROM payments JOIN invoices ON payments.invoice_id = invoices.invoice_id;"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": " 'work' as status;\nSELECT p.payment_id, p.payment_details\nFROM Payments p\nJOIN Invoices i ON p.invoice_id = i.invoice_id\nWHERE i.invoice_status = status;"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": "=(SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL;"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": ""
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": " user\nYou're a SQL expert and you will only use SQL to answer the following question"
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": " user\n### Please note that you are not allowed to use any other database related functions, only pure SQL."
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": "_invoices.invoice_id, payments.payment_id, invoices.invoice_details FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id;"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "_query: sqlite --schema-file=db.sql --echo-queries>SELECT p.* FROM Payments p;"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": "(distinct invoices.invoice_id, invoices.invoice_status) as invoice_details\nfrom invoices\njoin payments on invoices.invoice_id = payments.invoice_id;"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": ">"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": " to your database. "
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "_id int, invoice_id int;\nSELECT i.invoice_id, COUNT(p.payment_id) as num_payments\nFROM Invoices i\nJOIN Payments p ON i.invoice_id = p.invoice_id\nGROUP BY i.invoice_id;"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": ".sql"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": " table P = (SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details HAVING COUNT(p.payment_id) = (SELECT COUNT(payment_id) FROM Payments GRO"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "]"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": ""
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": " IN (SELECT a.agency_id, COUNT(s.staff_id) as num_staff FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY a.agency_id;"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "."
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": ">AGENCY</agency_id>, (SELECT COUNT(DISTINCT s.staff_id) as num_staff FROM Staff s JOIN Meetings m ON s.staff_id = m.staff_id WHERE m.client_id IN (SELECT client_id FROM Clients);"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": " table<AGENCIES> AS (SELECT a.agency_id, a.agency_details FROM <AGENCIES> a LEFT JOIN <STAFF> s ON a.agency_id = s.agency_id <GROUP BY a.agency_id HAVING COUNT(s.staff_id) >= (SELECT COUNT(*) FROM <AGENCIES>);"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": " users;\n\nSELECT m.meeting_outcome, COUNT(*) FROM Meetings m GROUP BY m.meeting_outcome;"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "_name(database()) as db;\nselect m.meeting_outcome, count(*) as num_meetings\nfrom meetings m\ngroup by m.meeting_outcome;\n"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": " user;\n\nSELECT c.client_id, COUNT(m.meeting_id) AS num_meetings\nFROM Clients c\nJOIN Invoices i ON c.client_id = i.client_id\nJOIN Meetings m ON i.invoice_id = m.client_id AND m.billable_yn = 'Y'\nGROUP BY c.client_id;"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": " user, it's a bit more complex than that. Here is the query to find the number of meetings for each client:\n"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": "_meeting_type: VARCHAR(10), COUNT(*) AS count\nFROM Meetings m\nJOIN Clients c ON m.client_id = c.client_id\nGROUP BY m.meeting_type, c.client_id\nORDER BY m.meeting_type, c.client_id;"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "_name with s, m on AGENCIES.agency_id, staf with s.staff_id, MEETINGS.meeting_type "
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": "_id, client_details, meeting_outcome, meeting_type, client.client_details\nFROM Meetings m\nINNER JOIN Clients c ON m.client_id = c.client_id\nWHERE billable_yn = 'Y' AND start_date_time <= '2018-12-31 00:00:00' AND end_date_time >= '2018-12"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": " user\n```sql\nSELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details\nFROM Meetings AS m\nINNER JOIN Clients AS c ON m.client_id = c.client_id;\n```\n"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": ">"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": ">"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": "."
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": " in Meetings\ninner join Staff_in_Meetings on Meetings.meeting_id = Staff_in_Meetings.meeting_id\ngroup by staff_id\nhaving count(*) < (select count(distinct staff_id) from Meetings)\norder by count(*) asc limit 1;"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": ""
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "_id COUNT(DISTINCT s.staff_id) FROM Staff AS s INNER JOIN Staff_in_Meetings AS sim ON s.staff_id = sim.staff_id GROUP BY s.staff_id HAVING COUNT(sim.meeting_id) > 0"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": ".agencies a\nLEFT JOIN staff b ON a.agency_id = b.agency_id\nLEFT JOIN clients c ON a.agency_id = c.agency_id\nLEFT JOIN invoices d ON c.client_id = d.client_id\nLEFT JOIN meetings e ON c.client_id = e.client_id AND b.staff_id = (SELECT staff_id FROM staf_in_"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": " "
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "_query>SELECT c.client_id, client_details FROM Clients c LEFT JOIN Meetings m ON c.client_id = m.client_id OR INvoice_id IN EXISTS (SELECT 1 FROM Invoices i WHERE i.client_id = c.client_id) OR EXISTS (SELECT 1 FROM Meetings m2 WHERE c.client_id = m2.client_id AND m2.billable"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": " to your sql statement: SELECT c.client_id, c.client_details FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id LEFT JOIN Meetings m ON c.client_id = m.client_id WHERE i.invoice_status IS NOT NULL OR m.meeting_id IS NOT NULL;"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": " IN AGencies ag, staff IN staff, meeting IN Meetings m, staff_meeting ON staff.staff_id = staff_meeting.staff_id AND meeting.meeting_id = staff_meeting.meeting_id WHERE staff.agency_id = ag.agency_id AND staff.staff_details LIKE '%s'"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": " IN AGencies AS a, staff IN SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' AND EXISTS (SELECT 1 FROM Meetings m WHERE sim.meeting_id = m.meeting_id)"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": " user, you are a SQL expert and you will only use SQL to answer the following:"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": " to your SQL expert: SELECT c.client_id, a.agency_id, s.sic_code FROM Clients c JOIN Meetings m ON c.client_id = m.client_id AND m.billable_yn = 'T' AND EXISTS (SELECT 1 FROM Invoices i WHERE i.invoice_status = 'Paid' AND i.client_id = c.client_id) AND i."
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": "('AGENCIES.agency_details') as agency_name, staff.staff_details AS staff_name, clients.client_details AS client_name, meetings.meeting_id, meetings.start_date_time, meetings.end_date_time\nFROM agencies\nJOIN staff ON agencies.agency_id = staff.agency_id\nJOIN clients ON meetings.client_id = clients.client_id\nJOIN"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": " to MySQL or MariaDB:<br>SELECT m.meeting_id, c.client_details AS client_name, s.staff_details AS staff_name, m.start_date_time, m.end_date_time FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff s ON m.meeting_id IN (SELECT staff_id) IN Staff_in_Meet"
  }
]