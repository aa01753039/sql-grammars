[
  {
    "id": 0,
    "db_id": "e_commerce",
    "question": {
      "id": 0,
      "db_id": "e_commerce",
      "question": "What are the sizes of all products whose name includes the word 'Dell'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the sizes of all products whose name includes the word 'Dell'?[SQL]\\nSELECT Products.shipment_id FROM Products WHERE Products.product_name LIKE '%Dell%' AND Products.product_size = '8' GROUP BY Products.product_size' <MID>_id` INTEGER NOT NULL,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1,
    "db_id": "e_commerce",
    "question": {
      "id": 1,
      "db_id": "e_commerce",
      "question": "What are the product price and the product size of the products whose price is above average?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the product price and the product size of the products whose price is above average?[SQL]\\nSELECT Products.shipment_id FROM Products WHERE Products.product_price  >  ( SELECT avg(product_price) FROM Products ) UNION SELECT product_size FROM Products WHERE Products.product_price  >  ( SELECT avg(product_price) FROM Products )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 2,
    "db_id": "e_commerce",
    "question": {
      "id": 2,
      "db_id": "e_commerce",
      "question": "What are the prices and sizes of all products whose price is above the mean?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the prices and sizes of all products whose price is above the mean?[SQL]\\nSELECT Products.shipment_id FROM Products WHERE Products.product_price  >  ( SELECT avg(product_price) FROM Products ) AND Products.product_size = 'Large' UNION SELECT Products.shipment_id FROM Products WHERE Products.product_price  >  ( SELECT avg(product_price) FROM Products ) AND Products.product_size = 'Small' UNION SELECT Products.shipment_id FROM Products WHERE Products.product_price  >  ( SELECT avg(product_price) FROM Products ) AND Products.product_size = 'Medium' UNION SELECT Products.shipment_id FROM Products WHERE Products.product_price  >  ( SELECT avg(product_price) FROM Products ) AND Products.product_size = 'X-Large' UNION SELECT Product"
  },
  {
    "id": 3,
    "db_id": "e_commerce",
    "question": {
      "id": 3,
      "db_id": "e_commerce",
      "question": "How many kinds of products have not been sold?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many kinds of products have not been sold?[SQL]\\nSELECT Products.order_item_id FROM Products WHERE Products.order_item_id NOT IN ( SELECT DISTINCT order_item_id FROM Order_items WHERE order_item_status_code  =  'shipped' OR order_item_status_code  =  'delivered' ) GROUP BY Products.order_item_id HAVING count(*)  >  0 ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 4,
    "db_id": "e_commerce",
    "question": {
      "id": 4,
      "db_id": "e_commerce",
      "question": "What is the number of products that have not been ordered yet?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of products that have not been ordered yet?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code != 'Pending' GROUP BY order_item_id HAVING count(*)  =  0' <MID>_id` INTEGER NOT NULL,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 5,
    "db_id": "e_commerce",
    "question": {
      "id": 5,
      "db_id": "e_commerce",
      "question": "How many customers do not have any payment method?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers do not have any payment method?[SQL]\\nSELECT Customer_Payment_Methods.shipment_id FROM Customer_Payment_Methods WHERE customer_id NOT IN (SELECT customer_id FROM Customers) UNION SELECT shipment_id FROM Shipment_Items EXCEPT SELECT shipment_id FROM Shipments'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 6,
    "db_id": "e_commerce",
    "question": {
      "id": 6,
      "db_id": "e_commerce",
      "question": "How many customers do not have a listed payment method?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers do not have a listed payment method?[SQL]\\nSELECT Customer_Payment_Methods.shipment_id FROM Customer_Payment_Methods WHERE shipment_id NOT IN (SELECT count(*) FROM Customers) AS T1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 7,
    "db_id": "e_commerce",
    "question": {
      "id": 7,
      "db_id": "e_commerce",
      "question": "What are all the order status and all the dates of orders?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the order status and all the dates of orders?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_id = 123456789 ORDER BY date_order_placed DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 8,
    "db_id": "e_commerce",
    "question": {
      "id": 8,
      "db_id": "e_commerce",
      "question": "What are the status codes and dates placed for all of the orders?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the status codes and dates placed for all of the orders?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'P' AND date_order_placed > '2018-01-01' GROUP BY date_order_placed ORDER BY date_order_placed ASC' SELECT count(*) FROM Order_items WHERE order_item_status_code = 'P' AND date_order_placed > '2018-01-01' GROUP BY date_order_placed ORDER BY count(*) DESC LIMIT 1' SELECT count(*) FROM Order_items WHERE order_item_status_code = 'P' AND date_order_placed < '2018-01-01' GROUP BY date_order_placed ORDER BY count(*) DESC LIMIT 1' SELECT count(*) FROM Order_items WHERE order_item_status_code = 'P' AND date_order_placed BET"
  },
  {
    "id": 9,
    "db_id": "e_commerce",
    "question": {
      "id": 9,
      "db_id": "e_commerce",
      "question": "List the address, town and county information of the customers who live in the USA."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the address, town and county information of the customers who live in the USA.[SQL]\\nSELECT Customer_Payment_Methods.shipment_id FROM Customer_Payment_Methods WHERE country = 'USA' <MID>_id` INTEGER NOT NULL,\n    ORDER BY order_item_id;"
  },
  {
    "id": 10,
    "db_id": "e_commerce",
    "question": {
      "id": 10,
      "db_id": "e_commerce",
      "question": "What are the addresses, towns, and county information for all customers who live in the United States?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the addresses, towns, and county information for all customers who live in the United States?[SQL]\\nSELECT Customer_Payment_Methods.shipment_id FROM Customer_Payment_Methods WHERE country = 'United States' GROUP BY address_line_1, town_city, county HAVING count(*) > 1' <MID>_id` INTEGER NOT NULL,\n    ORDER BY order_item_id;"
  },
  {
    "id": 11,
    "db_id": "e_commerce",
    "question": {
      "id": 11,
      "db_id": "e_commerce",
      "question": "List all the pairs of buyer first names and product names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the pairs of buyer first names and product names.[SQL]\\nSELECT Customers.shipment_id FROM Customer_Payment_Methods WHERE payment_method_code = 'Visa' UNION SELECT T1.customer_first_name ,  T2.product_name FROM Customers AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id'\n\n    ORDER BY shipment_id;"
  },
  {
    "id": 12,
    "db_id": "e_commerce",
    "question": {
      "id": 12,
      "db_id": "e_commerce",
      "question": "What are the first names of all buyers and what products did they buy? List them in pairs."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first names of all buyers and what products did they buy? List them in pairs.[SQL]\\nSELECT Customers.shipment_id FROM Customers WHERE gender_code  =  'M' UNION SELECT T1.product_name FROM products AS T1 JOIN orders AS T2 ON T1.order_id = T2.order_id JOIN order_items AS T3 ON T2.order_id = T3.order_id WHERE T3.order_item_status_code = 'Shipped' AND T2.date_order_placed >= '2017-01-01' AND T2.date_order_placed <= '2017-12-31' GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1' <MID>\n    ORDER BY order_item_id;"
  },
  {
    "id": 13,
    "db_id": "e_commerce",
    "question": {
      "id": 13,
      "db_id": "e_commerce",
      "question": "How many items are shipped?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many items are shipped?[SQL]\\nSELECT shipment_id FROM Shipment_Items WHERE order_item_id = ( SELECT min(order_item_id) FROM Order_Items ) UNION SELECT shipment_id FROM Shipment_Items WHERE order_item_id = ( SELECT max(order_item_id) FROM Order_Items )'\n        ;"
  },
  {
    "id": 14,
    "db_id": "e_commerce",
    "question": {
      "id": 14,
      "db_id": "e_commerce",
      "question": "How many products have been shipped?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products have been shipped?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'Shipped' GROUP BY order_item_id HAVING count(*)  >=  1' <MID>_id` INTEGER NOT NULL,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 15,
    "db_id": "e_commerce",
    "question": {
      "id": 15,
      "db_id": "e_commerce",
      "question": "What is the product average price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product average price?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE product_id = 1 GROUP BY order_item_id HAVING avg(order_item_status_code) = 'Cancelled' UNION SELECT order_item_id FROM Order_Items WHERE product_id = 1 GROUP BY order_item_id HAVING avg(order_item_status_code) = 'Delivered' UNION SELECT order_item_id FROM Order_Items WHERE product_id = 1 GROUP BY order_item_id HAVING avg(order_item_status_code) = 'Processing' UNION SELECT order_item_id FROM Order_Items WHERE product_id = 1 GROUP BY order_item_id HAVING avg(order_item_status_code) = 'Ready' UNION SELECT order_item_id FROM Order_Items WHERE product_id = 1 GROUP BY order_item_id"
  },
  {
    "id": 16,
    "db_id": "e_commerce",
    "question": {
      "id": 16,
      "db_id": "e_commerce",
      "question": "How much do the products cost on average?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How much do the products cost on average?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'Pending' GROUP BY order_item_id ORDER BY avg(product_price) ASC LIMIT 3'\n\n    ORDER BY order_item_id;"
  },
  {
    "id": 17,
    "db_id": "e_commerce",
    "question": {
      "id": 17,
      "db_id": "e_commerce",
      "question": "What is the average price of the products being ordered?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price of the products being ordered?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE product_id IS NOT NULL GROUP BY order_item_id HAVING avg(T1.product_price) > 500'\n        ;"
  },
  {
    "id": 18,
    "db_id": "e_commerce",
    "question": {
      "id": 18,
      "db_id": "e_commerce",
      "question": "What is the price of all products being ordered on average?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the price of all products being ordered on average?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE product_id != 'null' GROUP BY order_item_id HAVING avg(T1.product_price) > 500' SELECT avg(T1.product_price) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id' SELECT avg(T1.product_price) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id' SELECT avg(T1.product_price) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id' SELECT avg(T1.product_price) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2."
  },
  {
    "id": 19,
    "db_id": "e_commerce",
    "question": {
      "id": 19,
      "db_id": "e_commerce",
      "question": "What are the email address, town and county of the customers who are of the least common gender?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the email address, town and county of the customers who are of the least common gender?[SQL]\\nSELECT Customer_Payment_Methods.shipment_id FROM Customer_Payment_Methods WHERE payment_method_code  =  'Visa' UNION SELECT customer_first_name ,  town_city ,  county FROM Customers EXCEPT SELECT customer_first_name ,  town_city ,  county FROM Customers WHERE gender_code  =  'M' INTERSECT SELECT customer_first_name ,  town_city ,  county FROM Customers WHERE gender_code  =  'F' GROUP BY customer_first_name ,  town_city ,  county ORDER BY count(*) ASC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 20,
    "db_id": "e_commerce",
    "question": {
      "id": 20,
      "db_id": "e_commerce",
      "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[SQL]\\nSELECT Customers.shipment_id FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) LIMIT 1 ) ORDER BY date_order_placed DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 21,
    "db_id": "e_commerce",
    "question": {
      "id": 21,
      "db_id": "e_commerce",
      "question": "List the order date of the orders who are placed by customers with at least 2 payment methods."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the order date of the orders who are placed by customers with at least 2 payment methods.[SQL]\\nSELECT Customers.shipment_id FROM Customers WHERE gender_code  =  'M' AND customer_id IN ( SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING count(*)  >=  2 ) ORDER BY date_order_placed ASC'\n\n    ORDER BY shipment_id;"
  },
  {
    "id": 22,
    "db_id": "e_commerce",
    "question": {
      "id": 22,
      "db_id": "e_commerce",
      "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the date of all orders that have been placed by customers with at least 2 payment methods?[SQL]\\nSELECT Orders.order_item_id FROM Orders WHERE Orders.date_order_placed = (SELECT min(date_order_placed) FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING count(*)  >=  2)) UNION SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING count(*)  >=  2))'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 23,
    "db_id": "e_commerce",
    "question": {
      "id": 23,
      "db_id": "e_commerce",
      "question": "What is the most uncommon order status?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most uncommon order status?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'P' GROUP BY order_item_id HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1' SELECT T1.order_status_code FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_item_status_code = 'P' GROUP BY T1.order_status_code ORDER BY count(*) ASC LIMIT 1' SELECT T1.order_status_code FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_item_status_code = 'P' GROUP BY T1.order_status_code ORDER BY count(*) DESC LIMIT 1' SELECT T1.order_status_code"
  },
  {
    "id": 24,
    "db_id": "e_commerce",
    "question": {
      "id": 24,
      "db_id": "e_commerce",
      "question": "What is the least common order status?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the least common order status?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'L' GROUP BY order_item_id ORDER BY count(*) ASC LIMIT 1' SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_item_status_code = 'L' GROUP BY T1.order_id ORDER BY count(*) ASC LIMIT 1' SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_item_status_code = 'L' GROUP BY T1.order_id ORDER BY count(*) ASC LIMIT 1' SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_"
  },
  {
    "id": 25,
    "db_id": "e_commerce",
    "question": {
      "id": 25,
      "db_id": "e_commerce",
      "question": "For all the products sold for more than 3 times, list their id and description."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For all the products sold for more than 3 times, list their id and description.[SQL]\\nSELECT Products.order_item_id FROM Order_Items WHERE order_item_status_code = 'Shipped' AND order_id IN ( SELECT order_id FROM Orders WHERE invoice_status_code  =  'Paid' ) GROUP BY order_item_id HAVING count(*)  >  3' <MID>_id` INTEGER NOT NULL,\n    ORDER BY order_item_id;"
  },
  {
    "id": 26,
    "db_id": "e_commerce",
    "question": {
      "id": 26,
      "db_id": "e_commerce",
      "question": "For all products sold more than 3 times, what are their ids and descriptions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For all products sold more than 3 times, what are their ids and descriptions?[SQL]\\nSELECT Products.shipment_id FROM Products WHERE Products.order_item_status_code = 'completed' GROUP BY Products.product_id HAVING count(*)  >  3' <MID>_id` INTEGER NOT NULL,\n    ORDER BY order_item_id;"
  },
  {
    "id": 27,
    "db_id": "e_commerce",
    "question": {
      "id": 27,
      "db_id": "e_commerce",
      "question": "List the invoice dates and ids of the invoices causing at least 2 shipments."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the invoice dates and ids of the invoices causing at least 2 shipments.[SQL]\\nSELECT Invoices.shipment_id FROM Invoices WHERE shipment_date IN ( SELECT shipment_date FROM Shipments GROUP BY shipment_date HAVING count(*)  >=  2 ) UNION SELECT invoice_number FROM Invoices WHERE shipment_date IN ( SELECT max(shipment_date) FROM Shipments GROUP BY shipment_date )'\n        ;"
  },
  {
    "id": 28,
    "db_id": "e_commerce",
    "question": {
      "id": 28,
      "db_id": "e_commerce",
      "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the dates and ids of the invoices that are related to at least 2 shipments?[SQL]\\nSELECT Invoices.shipment_id FROM Invoices WHERE Invoice_date IN ( SELECT min(Invoice_date) FROM Invoices GROUP BY shipment_number HAVING count(*)  >=  2 ) UNION SELECT invoice_number FROM Invoices WHERE Invoice_date IN ( SELECT max(Invoice_date) FROM Invoices GROUP BY shipment_number HAVING count(*)  >=  2 )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 29,
    "db_id": "e_commerce",
    "question": {
      "id": 29,
      "db_id": "e_commerce",
      "question": "what are all shipment tracking numbers and shipment dates?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what are all shipment tracking numbers and shipment dates?[SQL]\\nSELECT shipment_id FROM Shipments WHERE shipment_tracking_number IS NOT NULL UNION SELECT shipment_id FROM Shipments WHERE shipment_date IS NOT NULL'\n        ;"
  },
  {
    "id": 30,
    "db_id": "e_commerce",
    "question": {
      "id": 30,
      "db_id": "e_commerce",
      "question": "What are the tracking numbers and dates for all shipments listed?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the tracking numbers and dates for all shipments listed?[SQL]\\nSELECT shipment_id FROM Shipments WHERE shipment_date IS NOT NULL UNION SELECT null FROM Shipments WHERE shipment_date  =  null'\n\n    ORDER BY shipment_id;"
  },
  {
    "id": 31,
    "db_id": "e_commerce",
    "question": {
      "id": 31,
      "db_id": "e_commerce",
      "question": "What are the color, description and size of the products priced below the maximum price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the color, description and size of the products priced below the maximum price.[SQL]\\nSELECT Products.shipment_id FROM Products WHERE Products.product_price  <  ( SELECT max(product_price) FROM Products ) ORDER BY Products.product_color DESC LIMIT 3'\n        ;"
  },
  {
    "id": 32,
    "db_id": "e_commerce",
    "question": {
      "id": 32,
      "db_id": "e_commerce",
      "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the colors , descriptions , and sizes for all products that are not at the maximum price ?[SQL]\\nSELECT Products.shipment_id FROM Products WHERE Products.product_price != ( SELECT max(product_price) FROM Products ) UNION SELECT product_color ,  product_description ,  product_size FROM Products WHERE Products.product_price != ( SELECT max(product_price) FROM Products )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 33,
    "db_id": "bbc_channels",
    "question": {
      "id": 33,
      "db_id": "bbc_channels",
      "question": "Return the names of directors who are older than the average age."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of directors who are older than the average age.[SQL]\\nSELECT Director_ID FROM director WHERE Age  >  (SELECT avg(Age) FROM director) GROUP BY Director_ID HAVING count(*)  >=  2'\n        ;"
  },
  {
    "id": 34,
    "db_id": "bbc_channels",
    "question": {
      "id": 34,
      "db_id": "bbc_channels",
      "question": "Find the the name of the oldest director."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the the name of the oldest director.[SQL]\\nSELECT director.Director_ID  FROM director WHERE age  =  ( SELECT max(age) FROM director )'\n        ;"
  },
  {
    "id": 35,
    "db_id": "bbc_channels",
    "question": {
      "id": 35,
      "db_id": "bbc_channels",
      "question": "How many channels have the word 'bbc' in their internet link?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many channels have the word 'bbc' in their internet link?[SQL]\\nSELECT channel.Channel_ID FROM channel WHERE channel.internet LIKE '%bbc%' GROUP BY channel.Channel_ID HAVING count(*)  >=  2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 36,
    "db_id": "bbc_channels",
    "question": {
      "id": 36,
      "db_id": "bbc_channels",
      "question": "How many different digital terrestrial channels are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different digital terrestrial channels are there?[SQL]\\nSELECT Director_ID FROM director_admin WHERE channel_id  =  2 GROUP BY Director_ID HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 37,
    "db_id": "bbc_channels",
    "question": {
      "id": 37,
      "db_id": "bbc_channels",
      "question": "List all program titles in the order of starting year. List the most recent one first."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all program titles in the order of starting year. List the most recent one first.[SQL]\\nSELECT program.Channel_ID  FROM program WHERE program.Start_Year  =  ( SELECT max(Start_Year) FROM program ) ORDER BY program.title ASC NULLS LAST'\n        ;"
  },
  {
    "id": 38,
    "db_id": "bbc_channels",
    "question": {
      "id": 38,
      "db_id": "bbc_channels",
      "question": "Which director is in charge of the most programs?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which director is in charge of the most programs?[SQL]\\nSELECT director_admin.Director_ID FROM director_admin WHERE Is_first_director  =  1 GROUP BY director_admin.Director_ID ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 39,
    "db_id": "bbc_channels",
    "question": {
      "id": 39,
      "db_id": "bbc_channels",
      "question": "Find the name and age of the director who is in charge of the most programs?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and age of the director who is in charge of the most programs?[SQL]\\nSELECT director.Director_ID FROM director_admin WHERE Is_first_director  =  1 GROUP BY direcctor_id ORDER BY count(*) DESC LIMIT 1 JOIN director ON director.Director_ID  =  director_admin.direcctor_id SELECT Name ,  Age FROM director WHERE Director_ID IN (SELECT direcctor_id FROM director_admin WHERE Is_first_director  =  1 GROUP BY direcctor_id ORDER BY count(*) DESC LIMIT 1) UNION SELECT Name ,  Age FROM director WHERE Director_ID NOT IN (SELECT direcctor_id FROM director_admin WHERE Is_first_director  =  1 GROUP BY direcctor_id ORDER BY count(*) DESC LIMIT 1) ORDER BY Age ASC NULLS LAST'\n        ;"
  },
  {
    "id": 40,
    "db_id": "bbc_channels",
    "question": {
      "id": 40,
      "db_id": "bbc_channels",
      "question": "Return the title of the program that began most recently."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the title of the program that began most recently.[SQL]\\nSELECT program.Channel_ID FROM program WHERE program.Start_Year  =  (SELECT max(Start_Year) FROM program) ORDER BY program.Start_Year DESC LIMIT 1'\n        ;"
  },
  {
    "id": 41,
    "db_id": "bbc_channels",
    "question": {
      "id": 41,
      "db_id": "bbc_channels",
      "question": "Find the name and website link of the channels that have more than one program."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and website link of the channels that have more than one program.[SQL]\\nSELECT Director_ID FROM program WHERE channel_id  =  1 UNION SELECT Director_ID FROM program WHERE channel_id  =  2 GROUP BY Director_ID HAVING count(*)  >  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 42,
    "db_id": "bbc_channels",
    "question": {
      "id": 42,
      "db_id": "bbc_channels",
      "question": "Find the number of programs for each channel. Return the name of each channel as well."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of programs for each channel. Return the name of each channel as well.[SQL]\\nSELECT channel.Channel_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 43,
    "db_id": "bbc_channels",
    "question": {
      "id": 43,
      "db_id": "bbc_channels",
      "question": "Find the number of channels that do not run any program."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of channels that do not run any program.[SQL]\\nSELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID NOT IN ( SELECT program.Channel_ID FROM program )'\n        ;"
  },
  {
    "id": 44,
    "db_id": "bbc_channels",
    "question": {
      "id": 44,
      "db_id": "bbc_channels",
      "question": "What is the name of the director who is in the \"Dracula\" program?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the director who is in the \"Dracula\" program?[SQL]\\nSELECT Director_ID FROM program WHERE Title  =  'Dracula' SELECT name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title  =  'Dracula') LIMIT 1, SELECT count(*) FROM program WHERE Title  =  'Dracula' LIMIT 1, SELECT count(*) FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title  =  'Dracula') LIMIT 1, SELECT count(*) FROM director_admin WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title  =  'Dracula') LIMIT 1, SELECT count(*) FROM director_admin WHERE Channel_ID IN (SELECT Channel_ID FROM program WHERE Title  =  'Dracula') LIMIT 1, SELECT count(*) FROM director_admin WHERE Is_first_director  =  1 AND Director_ID IN (SELECT Director_ID FROM program"
  },
  {
    "id": 45,
    "db_id": "bbc_channels",
    "question": {
      "id": 45,
      "db_id": "bbc_channels",
      "question": "Find the name and internet web of the channel that is directed by the most directors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and internet web of the channel that is directed by the most directors.[SQL]\\nSELECT Channel_ID FROM program WHERE director_id IN (SELECT director_id FROM program GROUP BY director_id ORDER BY count(*) DESC LIMIT 1) AND LENGTH(internet) > 0 UNION SELECT T2.channel_id ,  T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.channel_ID  =  T2.channel_ID WHERE T2.is_first_director  =  1'\n        ;"
  },
  {
    "id": 46,
    "db_id": "bbc_channels",
    "question": {
      "id": 46,
      "db_id": "bbc_channels",
      "question": "Find the name of the directors whose age is between 30 and 60."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the directors whose age is between 30 and 60.[SQL]\\nSELECT Director_ID FROM director WHERE Age BETWEEN 30 AND 60'\n        ;"
  },
  {
    "id": 47,
    "db_id": "bbc_channels",
    "question": {
      "id": 47,
      "db_id": "bbc_channels",
      "question": "give me the name of channels that have both a director younger than 40 and a director older than 60."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, give me the name of channels that have both a director younger than 40 and a director older than 60.[SQL]\\nSELECT Director_ID FROM director WHERE Age  <  40 INTERSECT SELECT Director_ID FROM director WHERE Age  >  60'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 48,
    "db_id": "bbc_channels",
    "question": {
      "id": 48,
      "db_id": "bbc_channels",
      "question": "Find the id and name of the channel that is not directed by Hank Baskett."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id and name of the channel that is not directed by Hank Baskett.[SQL]\\nSELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID NOT IN (SELECT program.Channel_ID FROM program JOIN director ON program.Director_ID  =  director.Director_ID WHERE director.name  =  'Hank Baskett')'\n\n    LIMIT 20'\n\n    ;"
  },
  {
    "id": 49,
    "db_id": "tv_shows",
    "question": {
      "id": 49,
      "db_id": "tv_shows",
      "question": "How many radios are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many radios are there?[SQL]\\nSELECT radio.tv_show_ID FROM radio WHERE radio.Radio_MHz LIKE '%2FM%' AND radio.Lyric_FM_MHz LIKE '%%' AND radio.ERP_kW LIKE '%%' AND radio.2FM_MHz LIKE '%%' AND radio.RnaG_MHz LIKE '%%' AND radio.Transmitter LIKE '%%' AND radio.Radio_ID LIKE '%%' GROUP BY radio.Radio_ID HAVING COUNT(*)  =  1' <MID>_ID LIKE '%%' GROUP BY city_channel.ID HAVING COUNT(*)  =  1'\n\n    ORDER BY city_channel.City_channel_ID;"
  },
  {
    "id": 50,
    "db_id": "tv_shows",
    "question": {
      "id": 50,
      "db_id": "tv_shows",
      "question": "List the transmitters of radios in ascending order of erp kw ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the transmitters of radios in ascending order of erp kw .[SQL]\\nSELECT tv_show_ID FROM tv_show WHERE LENGTH(sub_tittle) > 150 ORDER BY next_show_name ASC LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 51,
    "db_id": "tv_shows",
    "question": {
      "id": 51,
      "db_id": "tv_shows",
      "question": "What are the names and original air dates of tv shows?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and original air dates of tv shows?[SQL]\\nSELECT tv_show_ID  FROM tv_show WHERE Original_Airdate  =  (SELECT min(Original_Airdate) FROM tv_show) UNION SELECT tv_show_ID FROM tv_show WHERE Original_Airdate  =  (SELECT max(Original_Airdate) FROM tv_show) ORDER BY Original_Airdate'\n    LIMIT 2'\n    ;"
  },
  {
    "id": 52,
    "db_id": "tv_shows",
    "question": {
      "id": 52,
      "db_id": "tv_shows",
      "question": "List the station names of city channels whose affiliation is not \"ABC\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the station names of city channels whose affiliation is not \"ABC\".[SQL]\\nSELECT city_channel.tv_show_ID FROM city_channel WHERE city_channel.affiliation != 'ABC' <MID>_ID IN (SELECT radio_ID FROM city_channel_radio WHERE city_channel_ID  =  {city_channel_id}) AND city_channel.ID != {city_channel_id} ORDER BY city_channel.owned_since DESC LIMIT 1', con=conn)\n    LIMIT = cur.fetchone()\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 53,
    "db_id": "tv_shows",
    "question": {
      "id": 53,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[SQL]\\nSELECT tv_show_ID FROM tv_show WHERE LENGTH(sub_tittle) > 450'\n\n    LIMIT 10'\n\n    ;"
  },
  {
    "id": 54,
    "db_id": "tv_shows",
    "question": {
      "id": 54,
      "db_id": "tv_shows",
      "question": "What is the transmitter of the radio with the largest ERP_kW?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the transmitter of the radio with the largest ERP_kW?[SQL]\\nSELECT radio.tv_show_ID FROM radio WHERE ERP_kW  =  (SELECT max(ERP_kW) FROM radio) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 55,
    "db_id": "tv_shows",
    "question": {
      "id": 55,
      "db_id": "tv_shows",
      "question": "What is the average ERP across all radios?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average ERP across all radios?[SQL]\\nSELECT radio.Is_online FROM radioGROUP BY radio.Is_onlineORDER BY radio.Is_onlineLIMIT 1'\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 56,
    "db_id": "tv_shows",
    "question": {
      "id": 56,
      "db_id": "tv_shows",
      "question": "Show the different affiliations of city channels and the number of city channels with each affiliation."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the different affiliations of city channels and the number of city channels with each affiliation.[SQL]\\nSELECT radio.Is_online FROM city_channel_radio \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 57,
    "db_id": "tv_shows",
    "question": {
      "id": 57,
      "db_id": "tv_shows",
      "question": "Please show the most common affiliation for city channels."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the most common affiliation for city channels.[SQL]\\nSELECT radio.tv_show_ID  FROM city_channel_radio  WHERE city_channel_radio.Is_online  =  1 GROUP BY city_channel_radio.Radio_ID ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 58,
    "db_id": "tv_shows",
    "question": {
      "id": 58,
      "db_id": "tv_shows",
      "question": "List the affiliations shared by more than three city channels."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the affiliations shared by more than three city channels.[SQL]\\nSELECT tv_show_ID FROM city_channel_tv_show WHERE city_channel_ID  =  1 UNION SELECT tv_show_ID FROM city_channel_tv_show WHERE city_channel_ID  =  2 INTERSECT SELECT tv_show_ID FROM city_channel_tv_show WHERE city_channel_ID  =  3 INTERSECT SELECT tv_show_ID FROM city_channel_tv_show WHERE city_channel_ID  =  4 INTERSECT SELECT tv_show_ID FROM city_channel_tv_show WHERE city_channel_ID  =  5 LIMIT 1'\n        ;"
  },
  {
    "id": 59,
    "db_id": "tv_shows",
    "question": {
      "id": 59,
      "db_id": "tv_shows",
      "question": "Show the cities and station names of city channels in ascending alphabetical order of station name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the cities and station names of city channels in ascending alphabetical order of station name.[SQL]\\nSELECT city_channel.City_channel_ID FROM city_channel_radio WHERE city_channel.ID  =  city_channel_radio.City_channel_ID ORDER BY city_channel.station_name ASC'\n        ;"
  },
  {
    "id": 60,
    "db_id": "tv_shows",
    "question": {
      "id": 60,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the cities of the channels they are associated with."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of radios and the cities of the channels they are associated with.[SQL]\\nSELECT tv_show_ID FROM city_channel_tv_show WHERE Is_online  =  0 UNION SELECT transmitter FROM radio WHERE erp_kw  >  150 <MID>_name FROM city_channel WHERE affiliation  =  'Private' AND owned_since  >  1960' UNION SELECT station_name FROM city_channel WHERE affiliation  =  'Public' AND owned_since  >  1960' ORDER BY station_name'\n\n    ORDER BY tv_show_ID;"
  },
  {
    "id": 61,
    "db_id": "tv_shows",
    "question": {
      "id": 61,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[SQL]\\nSELECT tv_show_ID FROM tv_show WHERE LENGTH(sub_tittle) > 150 UNION SELECT tv_show_ID FROM tv_show WHERE LENGTH(sub_tittle)  <  150 ORDER BY next_show_name DESC'\n    LIMIT 3'\n    ;"
  },
  {
    "id": 62,
    "db_id": "tv_shows",
    "question": {
      "id": 62,
      "db_id": "tv_shows",
      "question": "Show the transmitters of the radios and the number of city channels they are associated with."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of the radios and the number of city channels they are associated with.[SQL]\\nSELECT tv_show_ID FROM tv_show WHERE LENGTH(Sub_tittle) > 150' <MID>_ID IN (SELECT radio_ID FROM city_channel_radio)')\n    GROUP BY radio.tv_show_ID;"
  },
  {
    "id": 63,
    "db_id": "tv_shows",
    "question": {
      "id": 63,
      "db_id": "tv_shows",
      "question": "Show the distinct transmitters of radios that are not associated with any city channel."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the distinct transmitters of radios that are not associated with any city channel.[SQL]\\nSELECT radio.tv_show_ID FROM radio WHERE radio.Radio_ID NOT IN (SELECT radio_ID FROM city_channel_radio) AND radio.Transmitter != 'null' GROUP BY radio.Transmitter HAVING count(*)  =  1 UNION SELECT '' AS tv_show_ID ,  T1.Transmitter FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T1.Transmitter HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1'\n\n    ORDER BY tv_show_ID;"
  },
  {
    "id": 64,
    "db_id": "vehicle_driver",
    "question": {
      "id": 64,
      "db_id": "vehicle_driver",
      "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the model of the vehicle with maximum top speed whose power is higher than 6000?[SQL]\\nSELECT Vehicle_ID FROM vehicle WHERE Top_Speed  =  ( SELECT max(Top_Speed) FROM vehicle WHERE Power  >  6000 ) LIMIT 1; SELECT Model FROM vehicle WHERE Vehicle_ID  =  ( SELECT Vehicle_ID FROM vehicle WHERE Top_Speed  =  ( SELECT max(Top_Speed) FROM vehicle WHERE Power  >  6000 ) LIMIT 1 );'\n        ;"
  },
  {
    "id": 65,
    "db_id": "vehicle_driver",
    "question": {
      "id": 65,
      "db_id": "vehicle_driver",
      "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[SQL]\\nSELECT Vehicle_ID FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1'\n        ;"
  },
  {
    "id": 66,
    "db_id": "vehicle_driver",
    "question": {
      "id": 66,
      "db_id": "vehicle_driver",
      "question": "What are the names of the drivers who are citizens of the 'United States'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the drivers who are citizens of the 'United States'?[SQL]\\nSELECT Driver_ID FROM driver WHERE Citizenship  =  'United States' <MID>\n    GROUP BY Driver_ID;"
  },
  {
    "id": 67,
    "db_id": "vehicle_driver",
    "question": {
      "id": 67,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers with citizenship from the United States."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of drivers with citizenship from the United States.[SQL]\\nSELECT Driver_ID FROM driver WHERE Citizenship = 'United States' UNION SELECT T1.driver_id FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.Builder  =  'United States' ORDER BY Driver_ID ASC'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 68,
    "db_id": "vehicle_driver",
    "question": {
      "id": 68,
      "db_id": "vehicle_driver",
      "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[SQL]\\nSELECT Driver_ID FROM vehicle_driverGROUP BY Driver_IDORDER BY driver.Vehicle_ID;"
  },
  {
    "id": 69,
    "db_id": "vehicle_driver",
    "question": {
      "id": 69,
      "db_id": "vehicle_driver",
      "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[SQL]\\nSELECT Driver_ID  FROM vehicle_driver WHERE Driver_ID IN ( SELECT DRIVER_ID FROM vehicle_driver GROUP BY DRIVER_ID ORDER BY COUNT(*) DESC LIMIT 1 ) , COUNT(*) FROM vehicle_driver GROUP BY DRIVER_ID ORDER BY COUNT(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 70,
    "db_id": "vehicle_driver",
    "question": {
      "id": 70,
      "db_id": "vehicle_driver",
      "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[SQL]\\nSELECT vehicle.Driver_ID FROM vehicle WHERE Builder  =  'Zhuzhou' GROUP BY Builder HAVING max(Total_Production) ORDER BY max(Total_Production) DESC LIMIT 1' SELECT avg(power) FROM vehicle WHERE Builder  =  'Zhuzhou' GROUP BY Builder HAVING avg(power) ORDER BY avg(power) ASC LIMIT 1' SELECT sum(Total_Production) FROM vehicle WHERE Builder  =  'Zhuzhou' GROUP BY Builder HAVING sum(Total_Production) ORDER BY sum(Total_Production) DESC LIMIT 1' SELECT count(*) FROM vehicle WHERE Builder  =  'Zhuzhou' GROUP BY Builder HAVING count(*) ORDER BY count(*) ASC LIMIT 1' SELECT min(Total_Production) FROM vehicle WHERE Builder  =  'Zhuz"
  },
  {
    "id": 71,
    "db_id": "vehicle_driver",
    "question": {
      "id": 71,
      "db_id": "vehicle_driver",
      "question": "Return the maximum and average power for the vehicles built by Zhuzhou."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the maximum and average power for the vehicles built by Zhuzhou.[SQL]\\nSELECT vehicle.Driver_ID FROM vehicle WHERE Builder = 'Zhuzhou' GROUP BY Vehicle_ID ORDER BY Power DESC LIMIT 1'\n    ;"
  },
  {
    "id": 72,
    "db_id": "vehicle_driver",
    "question": {
      "id": 72,
      "db_id": "vehicle_driver",
      "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the vehicle driven for the least times for the vehicles ever used?[SQL]\\nSELECT vehicle_driver.Vehicle_ID FROM vehicle_driver WHERE vehicle_driver.Driver_ID IS NULL GROUP BY vehicle_driver.Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1'\n        ;"
  },
  {
    "id": 73,
    "db_id": "vehicle_driver",
    "question": {
      "id": 73,
      "db_id": "vehicle_driver",
      "question": "Return the id of the vehicle that has been driven the fewest times."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the id of the vehicle that has been driven the fewest times.[SQL]\\nSELECT vehicle_driver.Vehicle_ID FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID NOT IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) DESC LIMIT 1) ORDER BY COUNT(*) ASC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 74,
    "db_id": "vehicle_driver",
    "question": {
      "id": 74,
      "db_id": "vehicle_driver",
      "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the top speed and power of the vehicle manufactured in the year of 1996?[SQL]\\nSELECT vehicle.Vehicle_ID FROM vehicle WHERE vehicle.Build_Year = 1996 ORDER BY vehicle.Top_Speed DESC LIMIT 1; SELECT max(vehicle.Power) FROM vehicle WHERE vehicle.Build_Year = 1996 ORDER BY vehicle.Top_Speed DESC LIMIT 1;'\n        ;"
  },
  {
    "id": 75,
    "db_id": "vehicle_driver",
    "question": {
      "id": 75,
      "db_id": "vehicle_driver",
      "question": "Return the top speed and power of the vehicle that was built in the year 1996."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the top speed and power of the vehicle that was built in the year 1996.[SQL]\\nSELECT vehicle.Vehicle_ID FROM vehicle WHERE vehicle.Build_Year = 1996 LIMIT 1'\n        ;"
  },
  {
    "id": 76,
    "db_id": "vehicle_driver",
    "question": {
      "id": 76,
      "db_id": "vehicle_driver",
      "question": "What are the build year, model name and builder of the vehicles?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the build year, model name and builder of the vehicles?[SQL]\\nSELECT Driver_ID FROM driver WHERE Name = 'Kamui' UNION SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID = (SELECT DRIVER_ID FROM driver WHERE Name  =  'Kamui') UNION SELECT Builder ,  Model ,  Build_Year FROM vehicle WHERE Top_Speed  =  (SELECT max(Top_Speed) FROM vehicle) <MID>\n    LIMIT 1000;',\n    ;"
  },
  {
    "id": 77,
    "db_id": "vehicle_driver",
    "question": {
      "id": 77,
      "db_id": "vehicle_driver",
      "question": "Give the build year, model, and builder of each vehicle."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the build year, model, and builder of each vehicle.[SQL]\\nSELECT Driver_ID FROM driver WHERE Name = 'Juan Pablo Montoya' UNION SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID = 123 INTERSECT SELECT Build_Year ,  Model ,  Builder FROM vehicle WHERE Top_Speed > 400; <MID>\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 78,
    "db_id": "vehicle_driver",
    "question": {
      "id": 78,
      "db_id": "vehicle_driver",
      "question": "How many drivers have driven vehicles built in 2012?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have driven vehicles built in 2012?[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle.Builder  =  'Mazda' AND Vehicle.Build_Year  =  2012 GROUP BY Driver_ID HAVING count(*)  >=  500' <MID>\n    GROUP BY Driver_IDHAVING count(*)  >=  500'\n    ORDER BY driver.Driver_ID;"
  },
  {
    "id": 79,
    "db_id": "vehicle_driver",
    "question": {
      "id": 79,
      "db_id": "vehicle_driver",
      "question": "Count the number of different drivers who have driven vehicles built in 2012."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different drivers who have driven vehicles built in 2012.[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle.Builder  =  'Acme' GROUP BY Driver_ID HAVING COUNT(DISTINCT Vehicle.Model)  =  4' <MID>\n    GROUP BY Driver_ID;"
  },
  {
    "id": 80,
    "db_id": "vehicle_driver",
    "question": {
      "id": 80,
      "db_id": "vehicle_driver",
      "question": "How many drivers have raced in 'NASCAR'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have raced in 'NASCAR'?[SQL]\\nSELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Driver_ID HAVING COUNT(*)  >=  1' <MID>\n    GROUP BY Driver_IDHAVING COUNT(*)  >=  1' AS N1 UNION SELECT count(*) FROM driver WHERE Racing_Series = 'Formula 1' GROUP BY Driver_idHAVING COUNT(*)  >=  1' AS N2 UNION SELECT count(*) FROM driver WHERE Racing_Series = 'IndyCar' GROUP BY Driver_idHAVING COUNT(*)  >=  1' AS N3 UNION SELECT count(*) FROM driver WHERE Racing_Series = 'USAC' GROUP BY Driver_idHAVING COUNT(*)  >=  1' AS N4 UNION SELECT count(*) FROM driver WHERE Racing_Series = 'IMSA' GROUP BY Driver_idHAVING COUNT(*)  >=  1' AS N5 UNION SELECT count(*) FROM driver WHERE Racing_Series = '"
  },
  {
    "id": 81,
    "db_id": "vehicle_driver",
    "question": {
      "id": 81,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have raced in NASCAR."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of drivers who have raced in NASCAR.[SQL]\\nSELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Driver_ID HAVING COUNT(*)  >=  10'\n        ;"
  },
  {
    "id": 82,
    "db_id": "vehicle_driver",
    "question": {
      "id": 82,
      "db_id": "vehicle_driver",
      "question": "What is the average top speed of vehicles?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average top speed of vehicles?[SQL]\\nSELECT vehicle.Vehicle_ID FROM vehicle WHERE Top_Speed != -1 GROUP BY Vehicle_ID ORDER BY AVG(Top_Speed) DESC LIMIT 3'\n        ;"
  },
  {
    "id": 83,
    "db_id": "vehicle_driver",
    "question": {
      "id": 83,
      "db_id": "vehicle_driver",
      "question": "Return the average top speed across all vehicles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average top speed across all vehicles.[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID  =  123456789'\n        ;"
  },
  {
    "id": 84,
    "db_id": "vehicle_driver",
    "question": {
      "id": 84,
      "db_id": "vehicle_driver",
      "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct driver names who have driven vehicles with power more than 5000 ?[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN(SELECT Vehicle_ID FROM vehicle WHERE Power  >  5000) GROUP BY Driver_ID ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 85,
    "db_id": "vehicle_driver",
    "question": {
      "id": 85,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers who have driven vehicles with power over 5000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of drivers who have driven vehicles with power over 5000.[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN(SELECT Vehicle_ID FROM vehicle WHERE Power  >  5000) AND Driver_ID IN(SELECT Name FROM driver) <MID>.csv'\n    LIMIT = 1000\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 86,
    "db_id": "vehicle_driver",
    "question": {
      "id": 86,
      "db_id": "vehicle_driver",
      "question": "Which car models have total production larger than 100 or top speed higher than 150?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which car models have total production larger than 100 or top speed higher than 150?[SQL]\\nSELECT vehicle.Driver_ID FROM vehicle WHERE Total_Production  >  100 OR Top_Speed  >  150'\n        ;"
  },
  {
    "id": 87,
    "db_id": "vehicle_driver",
    "question": {
      "id": 87,
      "db_id": "vehicle_driver",
      "question": "Give the models of cars that have a total production of over 100 or a top speed over 150."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the models of cars that have a total production of over 100 or a top speed over 150.[SQL]\\nSELECT vehicle.Driver_ID FROM vehicle WHERE Total_Production  >  100 OR Top_Speed  >  150'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 88,
    "db_id": "vehicle_driver",
    "question": {
      "id": 88,
      "db_id": "vehicle_driver",
      "question": "What are the model names and build year of the cars with 'DJ' in its model name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the model names and build year of the cars with 'DJ' in its model name?[SQL]\\nSELECT Driver_ID FROM driver WHERE Name LIKE '%DJ%' UNION SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T1.builder  =  'DJ' AND T1.build_year  =  2015 GROUP BY T1.model HAVING count(*)  >=  2 ORDER BY count(*) DESC LIMIT 1'\n    ORDER BY Driver_ID;"
  },
  {
    "id": 89,
    "db_id": "vehicle_driver",
    "question": {
      "id": 89,
      "db_id": "vehicle_driver",
      "question": "Return the model and build year of cars that include \"DJ\" in their model names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the model and build year of cars that include \"DJ\" in their model names.[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model LIKE '%DJ%') <MID>\n    LIMIT 100;'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 90,
    "db_id": "vehicle_driver",
    "question": {
      "id": 90,
      "db_id": "vehicle_driver",
      "question": "What are the models which have not been driven by any drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the models which have not been driven by any drivers?[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID  =  123456789'\n        ;"
  },
  {
    "id": 91,
    "db_id": "vehicle_driver",
    "question": {
      "id": 91,
      "db_id": "vehicle_driver",
      "question": "Return the models of vehicles that have never been driven."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the models of vehicles that have never been driven.[SQL]\\nSELECT vehicle.Vehicle_ID FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver) UNION SELECT vehicle_ID FROM vehicle_driver EXCEPT SELECT vehicle_ID FROM vehicle'\n        ;"
  },
  {
    "id": 92,
    "db_id": "vehicle_driver",
    "question": {
      "id": 92,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID  =  (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*)  =  2) UNION SELECT T1.vehicle_id ,  T2.model FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.Builder  =  'Ziyang' <MID>\n    ORDER BY Vehicle_ID;"
  },
  {
    "id": 93,
    "db_id": "vehicle_driver",
    "question": {
      "id": 93,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[SQL]\\nSELECT vehicle_driver.Vehicle_ID FROM vehicle_driver WHERE driver_id IN (SELECT driver_id FROM driver WHERE name != 'Ziyang') GROUP BY vehicle_driver.Vehicle_ID HAVING count(*)  =  2 UNION SELECT T1.vehicle_id ,  T3.model FROM vehicle_driver AS T1 JOIN vehicle AS T3 ON T1.vehicle_id  =  T3.vehicle_id JOIN driver AS T2 ON T2.driver_id  =  T1.driver_id WHERE T2.name != 'Ziyang' GROUP BY T1.vehicle_id HAVING count(*)  =  2'\n    ;"
  },
  {
    "id": 94,
    "db_id": "vehicle_driver",
    "question": {
      "id": 94,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID = (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING count(*)  >  2) UNION SELECT DRIVER_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE model = (SELECT model FROM vehicle WHERE Builder  =  'Powertrain Motors' ) ) AND name = 'Jeff Gordon' <MID>\n    ORDER BY Vehicle_ID;"
  },
  {
    "id": 95,
    "db_id": "vehicle_driver",
    "question": {
      "id": 95,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID = (SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID = (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) GROUP BY Drivre_ID HAVING count(*) > 2 UNION SELECT T1.vehicle_id ,  T2.model FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id EXCEPT SELECT Drivre_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')'\n\n    ORDER BY Driver_ID;"
  },
  {
    "id": 96,
    "db_id": "vehicle_driver",
    "question": {
      "id": 96,
      "db_id": "vehicle_driver",
      "question": "How many vehicles have maximum top speed?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many vehicles have maximum top speed?[SQL]\\nSELECT vehicle.Vehicle_ID FROM vehicle WHERE vehicle.Top_Speed = (SELECT max(Top_Speed) FROM vehicle) GROUP BY vehicle.Vehicle_ID HAVING COUNT(*)  =  1 UNION SELECT vehicle.Vehicle_ID FROM vehicle WHERE vehicle.Top_Speed = (SELECT max(Top_Speed) FROM vehicle) GROUP BY vehicle.Vehicle_ID HAVING COUNT(*)  >  1 ORDER BY COUNT(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 97,
    "db_id": "vehicle_driver",
    "question": {
      "id": 97,
      "db_id": "vehicle_driver",
      "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[SQL]\\nSELECT Driver_ID FROM vehicle WHERE Top_Speed = ( SELECT max(Top_Speed) FROM vehicle )'\n        ;"
  },
  {
    "id": 98,
    "db_id": "vehicle_driver",
    "question": {
      "id": 98,
      "db_id": "vehicle_driver",
      "question": "Show all driver names in the alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all driver names in the alphabetical order.[SQL]\\nSELECT Driver_ID FROM driver WHERE Name != 'null' ORDER BY Name ASC'\n\n    ORDER BY Driver_ID;"
  },
  {
    "id": 99,
    "db_id": "vehicle_driver",
    "question": {
      "id": 99,
      "db_id": "vehicle_driver",
      "question": "What are the names of drivers, returned in alphbetical order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of drivers, returned in alphbetical order?[SQL]\\nSELECT Driver_ID FROM driver WHERE Name IN (SELECT T1.Name FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID WHERE T2.Top_Speed  >  300 ORDER BY T1.Name ASC) UNION SELECT Name FROM driver WHERE Drivrer_ID NOT IN (SELECT T1.Driven_ID FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID WHERE T2.Top_Speed  >  300) ORDER BY NAME ASC'\n        ;"
  },
  {
    "id": 100,
    "db_id": "vehicle_driver",
    "question": {
      "id": 100,
      "db_id": "vehicle_driver",
      "question": "How many drivers have been racing in each racing series?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have been racing in each racing series?[SQL]\\nSELECT Driver_ID  FROM driver WHERE Racing_Series IN ( SELECT Racing_Series FROM driver GROUP BY Racing_Series HAVING count(*)  >  1 )'\n        ;"
  },
  {
    "id": 101,
    "db_id": "vehicle_driver",
    "question": {
      "id": 101,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers that have raced in each series."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of drivers that have raced in each series.[SQL]\\nSELECT Driver_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 102,
    "db_id": "vehicle_driver",
    "question": {
      "id": 102,
      "db_id": "vehicle_driver",
      "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model  =  'DJ1') UNION SELECT T1.driver_id ,  T2.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model  =  'DJ1')'\n    ORDER BY Driver_ID;"
  },
  {
    "id": 103,
    "db_id": "vehicle_driver",
    "question": {
      "id": 103,
      "db_id": "vehicle_driver",
      "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[SQL]\\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model  =  'DJ1') UNION SELECT T1.driver_id FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.Model  =  'DJ1' GROUP BY T1.driver_id HAVING COUNT(*)  >  1' <MID>\n    ORDER BY Driver_ID;"
  },
  {
    "id": 104,
    "db_id": "vehicle_driver",
    "question": {
      "id": 104,
      "db_id": "vehicle_driver",
      "question": "How many drivers have not driven any cars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have not driven any cars?[SQL]\\nSELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)'\n        ;"
  },
  {
    "id": 105,
    "db_id": "vehicle_driver",
    "question": {
      "id": 105,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have not driven any vehicles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of drivers who have not driven any vehicles.[SQL]\\nSELECT Driver_ID FROM driver WHERE Drivrer_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)'\n        ;"
  },
  {
    "id": 106,
    "db_id": "online_exams",
    "question": {
      "id": 106,
      "db_id": "online_exams",
      "question": "How many exams are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many exams are there?[SQL]\\nSELECT Exams.Student_Answer_ID FROM Exams WHERE Exam_name LIKE '%Math%' AND exam_date BETWEEN '2016-01-01' AND '2017-01-01' GROUP BY Exam_name HAVING count(*)  >=  3' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Date_Of_Hire DATE NOT NULL , PRIMARY KEY (Teacher_ID) ) CREATE TABLE Classroom (Classroom_ID INTEGER NOT NULL , Building VARCHAR(15) NOT NULL , Room_Number INTEGER NOT NULL , PRIMARY KEY (Classroom_ID) ) CREATE TABLE Student (Student_ID INTEGER NOT NULL , First_Name VARCHAR(255) NOT NULL , Middle_Name VARCHAR(255) NOT NULL ,"
  },
  {
    "id": 107,
    "db_id": "online_exams",
    "question": {
      "id": 107,
      "db_id": "online_exams",
      "question": "Count the number of exams."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of exams.[SQL]\\nSELECT Exams.Student_Answer_ID FROM Exams WHERE exam_name = 'Math' GROUP BY exam_name HAVING count(*)  >  3'\n        ;"
  },
  {
    "id": 108,
    "db_id": "online_exams",
    "question": {
      "id": 108,
      "db_id": "online_exams",
      "question": "List the distinct subject code of exams in ascending alphabetical order ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the distinct subject code of exams in ascending alphabetical order .[SQL]\\nSELECT Exams.Satisfactory_YN FROM Exams WHERE Exam_name LIKE '%Math%' ORDER BY Subject_code ASC'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 109,
    "db_id": "online_exams",
    "question": {
      "id": 109,
      "db_id": "online_exams",
      "question": "Give me an alphabetically ordered list of the distinct subject code for exams."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me an alphabetically ordered list of the distinct subject code for exams.[SQL]\\nSELECT Exams.Satisfactory_YN FROM Exams WHERE Exam_name LIKE '%Math%' GROUP BY Exam_name ORDER BY Exam_date ASC'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 110,
    "db_id": "online_exams",
    "question": {
      "id": 110,
      "db_id": "online_exams",
      "question": "What are the names and dates of the exams with subject code that is not \"Database\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and dates of the exams with subject code that is not \"Database\"?[SQL]\\nSELECT Exams.Student_Answer_Text FROM Exams WHERE Subject_Code != 'Database' AND Exam_Date  <  '2004-01-01' UNION SELECT Exam_Name FROM Exams WHERE Subject_Code != 'Database' AND Exam_Date  >  '2004-01-01' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Date_Of_Appointment DATE NOT NULL , PRIMARY KEY (Teacher_ID) ) CREATE TABLE Students ( Student_ID INTEGER NOT NULL , First_Name VARCHAR(255) , Middle_Name VARCHAR(255) , Last_Name VARCHAR(255) , Gender_MFU CHAR(1) , Student_Address VARCHAR(255) , Email_Adress VARCHAR"
  },
  {
    "id": 111,
    "db_id": "online_exams",
    "question": {
      "id": 111,
      "db_id": "online_exams",
      "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?[SQL]\\nSELECT Exams.Student_Answer_ID FROM Exams WHERE Subject_Code != 'Database' UNION SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database' <MID>_Teacher (Teacher_ID ,  Subject_Code) VALUES (322323 ,  'English')')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 112,
    "db_id": "online_exams",
    "question": {
      "id": 112,
      "db_id": "online_exams",
      "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the dates of the exams with subject code containing the word \"data\", in descending order of dates.[SQL]\\nSELECT Exams.Satisfactory_YN FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC'\n    GROUP BY Exams.Satisfactory_YN;"
  },
  {
    "id": 113,
    "db_id": "online_exams",
    "question": {
      "id": 113,
      "db_id": "online_exams",
      "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.[SQL]\\nSELECT Exams.Satisfactory_YN FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 114,
    "db_id": "online_exams",
    "question": {
      "id": 114,
      "db_id": "online_exams",
      "question": "What are the type of questions and their counts?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the type of questions and their counts?[SQL]\\nSELECT Questions.Valid_Answer_ID, count(*) FROM Questions GROUP BY Questions.Valid_Answer_ID ORDER BY count(*) DESC LIMIT 3'\n        , 'SELECT TYPE_OF_QUESTION_CODE ,  count(*) FROM Questions GROUP BY TYPE_OF_QUESTION_CODE ORDER BY count(*) DESC LIMIT 3'\n    , 'SELECT count(*) FROM students'\n        , 'SELECT count(*) FROM exams'\n    , 'SELECT count(*) FROM questions_in_exams'\n    , 'SELECT count(*) FROM valid_answers'\n    , 'SELECT count(*) FROM student_answers'\n    , 'SELECT count(*) FROM student_assessments'\n    , 'SELECT count(*) FROM student_answer_text'\n    , 'SELECT count(*) FROM student_comments'\n    , 'SELECT count(*) FROM student_satisfactory'\n    , 'SELECT count(*) FROM"
  },
  {
    "id": 115,
    "db_id": "online_exams",
    "question": {
      "id": 115,
      "db_id": "online_exams",
      "question": "For each question type, return its type code and its count of occurrence."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each question type, return its type code and its count of occurrence.[SQL]\\nSELECT Questions.Satisfactory_YN, TYPE_OF_QUESTION_Code ,  count(*) FROM Questions GROUP BY TYPE_OF_QUESTION_Code ,  Satisfactory_YN ORDER BY count(*) DESC LIMIT 1'\n        , 'SELECT TYPE_OF_QUESTION_Code FROM Questions GROUP BY TYPE_OF_QUESTION_Code ORDER BY count(*) DESC LIMIT 1'\n    , 'SELECT max(Exam_Date) FROM Exams'\n    , 'SELECT count(*) FROM Students'\n    , 'SELECT count(*) FROM Questions'\n    , 'SELECT count(*) FROM Exams'\n    , 'SELECT count(*) FROM Student_Answers'\n    , 'SELECT count(*) FROM Valid_Answers'\n    , 'SELECT count(*) FROM Student_Assessments'\n    , 'SELECT count(*) FROM Student_Assessments WHERE Satisf"
  },
  {
    "id": 116,
    "db_id": "online_exams",
    "question": {
      "id": 116,
      "db_id": "online_exams",
      "question": "What are the distinct student answer texts that received comments \"Normal\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct student answer texts that received comments \"Normal\"?[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  'Normal' GROUP BY Student_Answer_Text ORDER BY count(*) DESC LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 117,
    "db_id": "online_exams",
    "question": {
      "id": 117,
      "db_id": "online_exams",
      "question": "List all the distinct student answer texts to which comments \"Normal\" were given?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the distinct student answer texts to which comments \"Normal\" were given?[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  'Normal'' <MID>_Teacher (Teacher_ID , Subject_Code)') AS teacher_name FROM Teachers AS T1 JOIN Exams AS T2 ON T1.Techer_ID  =  T2.Techer_ID WHERE T2.Exam_Date  >  '2017-05-17 10:27:56' GROUP BY T2.Subject_Code ORDER BY count(*) DESC LIMIT 3'\n    LIMIT = 3'\n    ;"
  },
  {
    "id": 118,
    "db_id": "online_exams",
    "question": {
      "id": 118,
      "db_id": "online_exams",
      "question": "How many different comments are there for student answers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different comments are there for student answers?[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments != '' GROUP BY Comments ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 119,
    "db_id": "online_exams",
    "question": {
      "id": 119,
      "db_id": "online_exams",
      "question": "Count the number of different comments for student answers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different comments for student answers.[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments != '' GROUP BY Comments ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 120,
    "db_id": "online_exams",
    "question": {
      "id": 120,
      "db_id": "online_exams",
      "question": "List all the student answer texts in descending order of count."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the student answer texts in descending order of count.[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE student_answer_text != '' GROUP BY Student_Answer_Text ORDER BY count(*) DESC'\n        ;"
  },
  {
    "id": 121,
    "db_id": "online_exams",
    "question": {
      "id": 121,
      "db_id": "online_exams",
      "question": "Sort the student answer texts in descending order of their frequency of occurrence."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort the student answer texts in descending order of their frequency of occurrence.[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE student_answer_text != '' GROUP BY Student_Answer_Text ORDER BY count(*) DESC'\n        ;"
  },
  {
    "id": 122,
    "db_id": "online_exams",
    "question": {
      "id": 122,
      "db_id": "online_exams",
      "question": "Please show the first names of students and the dates of their answers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the first names of students and the dates of their answers.[SQL]\\nSELECT Students.Student_Answer_Text FROM Students WHERE Students.Date_of_Answer  =  (SELECT min(Date_of_Answer) FROM Students) SELECT T1.First_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID WHERE T2.Date_of_Answer  =  (SELECT min(Date_of_Answer) FROM Students) SELECT T3.First_Name FROM Students AS T3 JOIN Student_Answers AS T4 ON T3.Student_ID  =  T4.Student_ID WHERE T4.Date_of_Answer  =  (SELECT max(Date_of_Answer) FROM Students) SELECT T5.First_Name FROM Students AS T5 JOIN Student_Answers AS T6 ON T5.Student_ID "
  },
  {
    "id": 123,
    "db_id": "online_exams",
    "question": {
      "id": 123,
      "db_id": "online_exams",
      "question": "For each student answer, find the first name of the student and the date of the answer."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each student answer, find the first name of the student and the date of the answer.[SQL]\\nSELECT Students.Student_Answer_ID, Students.First_Name ,  Students.Student_Address ,  Students.Email_Adress ,  Students.Cell_Mobile_Phone ,  Students.Home_Phone ,  Students.Student_ID ,  Students.Date_of_Answer FROM Students AS Students JOIN Student_Answers AS Student_Answers ON Students.Student_ID  =  Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer ASC LIMIT 10'\n\n    ,'SELECT T1.first_name ,  T1.last_name ,  T1.student_id , 'date_of_answer' FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id"
  },
  {
    "id": 124,
    "db_id": "online_exams",
    "question": {
      "id": 124,
      "db_id": "online_exams",
      "question": "Please show the email addresses of students and the dates of their answers in descending order of dates."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the email addresses of students and the dates of their answers in descending order of dates.[SQL]\\nSELECT Students.Student_Answer_Text, Students.Date_of_Answer ,  Email_Adress FROM Students JOIN Student_Answers ON Students.Student_ID  =  Student_Answers.Student_ID ORDER BY Date_of_Answer DESC'\n        , 'SELECT Students.Student_Answer_Text ,  Students.Date_of_Answer , Email_Adress FROM Students JOIN Student_Answers ON Students.Student_ID  =  Student_Answers.Student_ID ORDER BY Date_of_Answer DESC'\n    , 'SELECT T1.Student_Answer_Text ,  T1.Date_of_Answer , T2.Email_Adress FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1"
  },
  {
    "id": 125,
    "db_id": "online_exams",
    "question": {
      "id": 125,
      "db_id": "online_exams",
      "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[SQL]\\nSELECT Students.Student_Answer_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 126,
    "db_id": "online_exams",
    "question": {
      "id": 126,
      "db_id": "online_exams",
      "question": "Please show the least common assessment for students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the least common assessment for students.[SQL]\\nSELECT Assessment FROM Student_AssessmentsGROUP BY AssessmentORDER BY Student_Answer_IDLIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 127,
    "db_id": "online_exams",
    "question": {
      "id": 127,
      "db_id": "online_exams",
      "question": "Which assessment has the smallest frequency count?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which assessment has the smallest frequency count?[SQL]\\nSELECT Assessment FROM Student_AssessmentsGROUP BY AssessmentORDER BY Satisfactory_YN;"
  },
  {
    "id": 128,
    "db_id": "online_exams",
    "question": {
      "id": 128,
      "db_id": "online_exams",
      "question": "Please show the first names of the students that have at least two answer records."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the first names of the students that have at least two answer records.[SQL]\\nSELECT Exams.Satisfactory_YN FROM Student_Answers WHERE Date_of_Answer  =  (SELECT max(Date_of_Answer) FROM Student_Answers) GROUP BY Student_ID HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 129,
    "db_id": "online_exams",
    "question": {
      "id": 129,
      "db_id": "online_exams",
      "question": "Which students have 2 or more answer records? Give me their first names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students have 2 or more answer records? Give me their first names.[SQL]\\nSELECT Student_Assessments.Student_Answer_Text FROM Student_Assessments WHERE Satisfactory_YN  =  'Y' GROUP BY Student_Assessments.Student_Answer_Text HAVING count(*)  >=  2' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Exam_Date DATE NOT NULL , Exam_Name VARCHAR(255) NOT NULL , PRIMARY KEY (Teacher_ID) )'\n\n    LIMIT 100'\n\n    ;"
  },
  {
    "id": 130,
    "db_id": "online_exams",
    "question": {
      "id": 130,
      "db_id": "online_exams",
      "question": "What is the most common valid answer text?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common valid answer text?[SQL]\\nSELECT Valid_Answer_ID  FROM Valid_Answers WHERE Valid_answer_text  =  (SELECT Valid_answer_text FROM Valid_Answers GROUP BY Valid_answer_text ORDER BY count(*) DESC LIMIT 1) <MID>_T1.question_id = T3.question_id JOIN questions AS T2 ON T1.exam_id  =  T2.exam_id JOIN exam AS T4 ON T1.exam_id  =  T4.exam_id JOIN students AS T5 ON T5.student_id  =  T1.student_id JOIN student_answers AS T6 ON T5.student_id  =  T6.student_id WHERE T4.exam_name  =  'Math' AND T6.date_of_answer  >  '2017-09-28 13:24"
  },
  {
    "id": 131,
    "db_id": "online_exams",
    "question": {
      "id": 131,
      "db_id": "online_exams",
      "question": "Find the valid answer text that appeared most frequently."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the valid answer text that appeared most frequently.[SQL]\\nSELECT Valid_Answer_ID  FROM Student_Assessments WHERE Satisfactory_YN  =  'Y' GROUP BY Valid_Answer_ID ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 132,
    "db_id": "online_exams",
    "question": {
      "id": 132,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is not \"M\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the last names of the students whose gender is not \"M\".[SQL]\\nSELECT Student_Answers.Student_Answer_Text FROM Students WHERE Gender_MFU  =  'F' JOIN Student_Answers ON Student_Answers.Student_ID  =  Students.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 133,
    "db_id": "online_exams",
    "question": {
      "id": 133,
      "db_id": "online_exams",
      "question": "What are the last names of the students with gender other than \"M\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the last names of the students with gender other than \"M\"?[SQL]\\nSELECT Student_Assessments.Valid_Answer_ID FROM Student_Assessments WHERE Student_Assessments.Assessment  =  'Satisfactory' AND Student_Assessments.Satisfactory_YN  =  'Y' UNION SELECT Students.Last_Name FROM Students WHERE Students.Gender_MFU != 'M' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Exam_ID INTEGER NOT NULL , Date_Of_Examination DATETIME , Marks INT , Grade CHAR(2) )') AS grade_exam FROM EXAMINATIONS AS T1 JOIN TEACHER AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID WHERE T1.Exam_Name  =  'Mathematics' AND"
  },
  {
    "id": 134,
    "db_id": "online_exams",
    "question": {
      "id": 134,
      "db_id": "online_exams",
      "question": "List each gender and the corresponding number of students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List each gender and the corresponding number of students.[SQL]\\nSELECT Student_Answers.Student_Answer_Text, count(*) FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID WHERE T1.gender_MFU  =  'M' GROUP BY T1.gender_MFU ORDER BY count(*) DESC LIMIT 1 UNION SELECT Student_Answers.Student_Answer_Text ,  count(*) FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID WHERE T1.gender_MFU  =  'F' GROUP BY T1.gender_MFU ORDER BY count(*) DESC LIMIT 1'\n\n    ,'SELECT Student_Answers.Student_Answer_Text ,  count(*) FROM Students AS T1 JOIN Student_"
  },
  {
    "id": 135,
    "db_id": "online_exams",
    "question": {
      "id": 135,
      "db_id": "online_exams",
      "question": "For each gender, return the gender code and the number of students who identify as that gender."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each gender, return the gender code and the number of students who identify as that gender.[SQL]\\nSELECT Student_Answers.Student_Answer_Text  FROM Students WHERE Gender_MFU  =  'M' UNION SELECT Student_Answers.Student_Answere_Text FROM Students WHERE Gender_MFU  =  'F' <MID>_Teachers (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Exam_ID INTEGER NOT NULL , Date_Of_Examination DATETIME , Marks INTEGER , Comments VARCHAR(255) , Satisfactory_YN VARCHAR(1) , PRIMARY KEY (Teacher_ID) , FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID) ) AS T1 JOIN Questions_in_Exams AS T2 ON T1.Exam_ID  =  T"
  },
  {
    "id": 136,
    "db_id": "online_exams",
    "question": {
      "id": 136,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is \"F\" or \"M\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the last names of the students whose gender is \"F\" or \"M\".[SQL]\\nSELECT Student_Assessments.Assessment FROM Student_Assessments WHERE Student_Assessments.Satisfactory_YN  =  'Y' UNION SELECT T1.Last_Name FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID WHERE T1.Gender_MFU  =  'F' OR T1.Gender_MFU  =  'M' ORDER BY T1.Last_Name ASC'\n        ;"
  },
  {
    "id": 137,
    "db_id": "online_exams",
    "question": {
      "id": 137,
      "db_id": "online_exams",
      "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students identify their gender as \"F\" or \"M\"? Give me their last names.[SQL]\\nSELECT Student_Assessments.Student_Answer_Text FROM Student_Assessments WHERE Satisfactory_YN  =  'Y' AND Assessment  =  'Gender' AND Valid_Answers.Valid_Answer_Text  =  'Female' UNION SELECT Students.Last_Name FROM Students WHERE Students.Gender_MFU  =  'F' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Exam_ID INTEGER NOT NULL , Date_Of_Examination DATETIME , Marks INT , PRIMARY KEY (Teacher_ID , Subject_Code , Exam_ID) , FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID) )') AS ssql;'\n\n\n"
  },
  {
    "id": 138,
    "db_id": "online_exams",
    "question": {
      "id": 138,
      "db_id": "online_exams",
      "question": "List the first names of the students who do not have any answers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the first names of the students who do not have any answers.[SQL]\\nSELECT Student_Answer_ID FROM Student_Answers WHERE student_id NOT IN (SELECT student_id FROM Student_Answers) UNION SELECT T1.student_firstname FROM students AS T1 JOIN Student_Answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_firstname HAVING count(*)  =  0'\n        ;"
  },
  {
    "id": 139,
    "db_id": "online_exams",
    "question": {
      "id": 139,
      "db_id": "online_exams",
      "question": "Which students do not have any answers? Find their first names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students do not have any answers? Find their first names.[SQL]\\nSELECT Student_Answer_ID FROM Student_Answers WHERE student_id NOT IN (SELECT student_id FROM Student_Answers) AND Date_of_Answer BETWEEN '2016-01-01' AND '2017-01-01' GROUP BY Student_Answer_ID HAVING count(*)  =  0 ORDER BY Date_of_Answer DESC LIMIT 30 OFFSET 0' <MID>_T1.question_id = T1.question_id JOIN Exams AS T2 ON T2.exam_id  =  T1.exam_id JOIN Students AS T3 ON T3.student_id  =  T1.student_id WHERE T2.exam_date  =  '2016-01-01' AND T3.first_name  =  'John' GROUP BY T1"
  },
  {
    "id": 140,
    "db_id": "online_exams",
    "question": {
      "id": 140,
      "db_id": "online_exams",
      "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  'Absent' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Exam_ID INTEGER NOT NULL , Date_Of_Examination DATETIME , Marks FLOAT , Grade CHAR(2) )')\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 141,
    "db_id": "online_exams",
    "question": {
      "id": 141,
      "db_id": "online_exams",
      "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which student answer texts were given both \"Normal\" and \"Absent\" as comments?[SQL]\\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  'Absent' <MID>_Teacher (Teacher_ID INTEGER NOT NULL , Subject_Code CHAR(15) NOT NULL , Exam_ID INTEGER NOT NULL , Marks INTEGER NOT NULL , PRIMARY KEY (Teacher_ID) , FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))') AS ssql INSERT INTO admin VALUES ('Root', password('root'), 'superuser', TRUE)') AS ssql;' | sudo mysql -u root -p\n   \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
  },
  {
    "id": 142,
    "db_id": "online_exams",
    "question": {
      "id": 142,
      "db_id": "online_exams",
      "question": "Show the types of questions that have at least three questions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the types of questions that have at least three questions.[SQL]\\nSELECT Questions.Student_Answer_Text FROM Questions_in_Exams WHERE question_id  =  1 UNION SELECT Questions.Student_Answer_Text FROM Questions_in_Exams WHERE question_id  =  2 UNION SELECT Questions.Student_Answer_Text FROM Questions_in_Exams WHERE question_id  =  3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 143,
    "db_id": "online_exams",
    "question": {
      "id": 143,
      "db_id": "online_exams",
      "question": "Which types of questions have 3 or more questions? Return the questions type code."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which types of questions have 3 or more questions? Return the questions type code.[SQL]\\nSELECT Questions.Student_Answer_Text FROM Questions_in_Exams WHERE question_id IN (SELECT question_id FROM Questions GROUP BY question_id HAVING count(*)  >=  3) UNION SELECT TYPE_OF_QUESTION_CODE FROM Questions GROUP BY TYPE_OF_QUESTION_CODE HAVING count(*)  >=  3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 144,
    "db_id": "online_exams",
    "question": {
      "id": 144,
      "db_id": "online_exams",
      "question": "Show all information on students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all information on students.[SQL]\\nSELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 3 AND Student_Answers.Date_of_Answer BETWEEN '2016-09-18 17:30:00' AND '2016-09-18 18:30:00' UNION SELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 3 AND Student_Answers.Date_of_Answer BETWEEN '2016-09-18 17:30:00' AND '2016-09-18 18:30:00' ORDER BY Student_Answers.Date_of_Answer DESC LIMIT 100"
  },
  {
    "id": 145,
    "db_id": "online_exams",
    "question": {
      "id": 145,
      "db_id": "online_exams",
      "question": "What is al the available information of each student?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is al the available information of each student?[SQL]\\nSELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 1 UNION SELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 2 UNION SELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 3 UNION SELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 4 UNION SELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 5 UNION SELECT Student_Answers.Student_Answer_ID FROM Student_Answers WHERE Student_Answers.Student_ID = 6 UNION SELECT Student_Answers.Student"
  },
  {
    "id": 146,
    "db_id": "customers_and_orders",
    "question": {
      "id": 146,
      "db_id": "customers_and_orders",
      "question": "How many addresses do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many addresses do we have?[SQL]\\nSELECT Addresses.product_id FROM Addresses WHERE product_id = 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 147,
    "db_id": "customers_and_orders",
    "question": {
      "id": 147,
      "db_id": "customers_and_orders",
      "question": "Count the number of addresses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of addresses.[SQL]\\nSELECT Customer_Orders.order_id FROM Customer_Orders WHERE order_status_code = 'Shipped' GROUP BY Customer_Orders.order_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 148,
    "db_id": "customers_and_orders",
    "question": {
      "id": 148,
      "db_id": "customers_and_orders",
      "question": "List all address ids and address details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all address ids and address details.[SQL]\\nSELECT Addresses.order_id FROM Addresses WHERE order_id = 103'\n        ;"
  },
  {
    "id": 149,
    "db_id": "customers_and_orders",
    "question": {
      "id": 149,
      "db_id": "customers_and_orders",
      "question": "What are all the address ids and address details?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the address ids and address details?[SQL]\\nSELECT Addresses.order_id FROM Addresses WHERE order_details LIKE '%Springfield%' AND order_date BETWEEN '2007-04-01' AND '2007-04-30' GROUP BY order_id HAVING count(*)  >=  2 ORDER BY sum(order_quantity) DESC LIMIT 1' <MID>\n    ORDER BY order_quantity;"
  },
  {
    "id": 150,
    "db_id": "customers_and_orders",
    "question": {
      "id": 150,
      "db_id": "customers_and_orders",
      "question": "How many products do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products do we have?[SQL]\\nSELECT product_id FROM Products;"
  },
  {
    "id": 151,
    "db_id": "customers_and_orders",
    "question": {
      "id": 151,
      "db_id": "customers_and_orders",
      "question": "Count the number of products."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of products.[SQL]\\nSELECT product_id FROM Products;"
  },
  {
    "id": 152,
    "db_id": "customers_and_orders",
    "question": {
      "id": 152,
      "db_id": "customers_and_orders",
      "question": "Show all product ids, product type codes, and product name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all product ids, product type codes, and product name.[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 153,
    "db_id": "customers_and_orders",
    "question": {
      "id": 153,
      "db_id": "customers_and_orders",
      "question": "What are the ids, type codes, and names for all products?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids, type codes, and names for all products?[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 154,
    "db_id": "customers_and_orders",
    "question": {
      "id": 154,
      "db_id": "customers_and_orders",
      "question": "What is the price for the product with name Monitor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the price for the product with name Monitor?[SQL]\\nSELECT product_id FROM Products WHERE product_name  =  'Monitor' UNION SELECT product_price FROM Products WHERE product_name  =  'Monitor' <MID>\n    ORDER BY order_quantity;"
  },
  {
    "id": 155,
    "db_id": "customers_and_orders",
    "question": {
      "id": 155,
      "db_id": "customers_and_orders",
      "question": "Give the price of the Monitor product."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the price of the Monitor product.[SQL]\\nSELECT product_id FROM Products WHERE product_name  =  'Monitor' UNION SELECT product_price FROM Products WHERE product_name  =  'Monitor' <MID>\n    ORDER BY order_quantity;"
  },
  {
    "id": 156,
    "db_id": "customers_and_orders",
    "question": {
      "id": 156,
      "db_id": "customers_and_orders",
      "question": "Show the minimum, average, maximum price for all products."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the minimum, average, maximum price for all products.[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 157,
    "db_id": "customers_and_orders",
    "question": {
      "id": 157,
      "db_id": "customers_and_orders",
      "question": "What are the minimum, average, and maximum prices across all products?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the minimum, average, and maximum prices across all products?[SQL]\\nSELECT product_id  FROM Products;"
  },
  {
    "id": 158,
    "db_id": "customers_and_orders",
    "question": {
      "id": 158,
      "db_id": "customers_and_orders",
      "question": "What is the average price for products with type Clothes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price for products with type Clothes?[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Clothes' GROUP BY product_id ORDER BY avg(product_price) ASC LIMIT 1' SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes' GROUP BY product_id ORDER BY avg(product_price) ASC LIMIT 1' SELECT product_id FROM Products WHERE product_type_code  =  'Clothes' GROUP BY product_id ORDER BY avg(product_price) ASC LIMIT 1' SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes' GROUP BY product_id ORDER BY avg(product_price) ASC LIMIT 1' SELECT product_id FROM Products WHERE product_type_code  =  'Clothes' GROUP BY product_id ORDER BY avg(product_price"
  },
  {
    "id": 159,
    "db_id": "customers_and_orders",
    "question": {
      "id": 159,
      "db_id": "customers_and_orders",
      "question": "Return the average price of Clothes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average price of Clothes.[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Clothes' GROUP BY product_id ORDER BY avg(product_price) ASC LIMIT 1'\n        ;"
  },
  {
    "id": 160,
    "db_id": "customers_and_orders",
    "question": {
      "id": 160,
      "db_id": "customers_and_orders",
      "question": "How many hardware type products do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many hardware type products do we have?[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Hardware' GROUP BY product_id HAVING count(*)  >=  2 <MID>_id FROM Order_Items WHERE product_id  =  $product_id GROUP BY order_id HAVING count(*)  >  2' ) AS T1 ON T1.order_id  =  T2.order_id WHERE T2.order_status_code != 'Shipped' AND T2.order_status_code != 'Cancelled' AND T2.order_status_code != 'Refunded' AND T2.order_status_code != 'Returned' AND T2.order_status_code != 'Dispute' AND T2.order_status_code != 'Failed' AND T2.order_status_code != 'Pending' AND T2.order_status_code != 'Processing"
  },
  {
    "id": 161,
    "db_id": "customers_and_orders",
    "question": {
      "id": 161,
      "db_id": "customers_and_orders",
      "question": "Count the number of products of the type Hardware."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of products of the type Hardware.[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Hardware' GROUP BY product_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 162,
    "db_id": "customers_and_orders",
    "question": {
      "id": 162,
      "db_id": "customers_and_orders",
      "question": "Show all product names with price higher than the average."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all product names with price higher than the average.[SQL]\\nSELECT product_id FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM products) UNION SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products) ORDER BY product_name ASC'\n        ;"
  },
  {
    "id": 163,
    "db_id": "customers_and_orders",
    "question": {
      "id": 163,
      "db_id": "customers_and_orders",
      "question": "What are the names of products that have a price above the average for all products."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of products that have a price above the average for all products.[SQL]\\nSELECT product_id FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products) ORDER BY product_name'\n        ;"
  },
  {
    "id": 164,
    "db_id": "customers_and_orders",
    "question": {
      "id": 164,
      "db_id": "customers_and_orders",
      "question": "Show all hardware product names with price higher than the average price of hardware type products."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all hardware product names with price higher than the average price of hardware type products.[SQL]\\nSELECT product_id FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'hardware')' <MID>\n    ORDER BY order_quantity;"
  },
  {
    "id": 165,
    "db_id": "customers_and_orders",
    "question": {
      "id": 165,
      "db_id": "customers_and_orders",
      "question": "What are the names of Hardware product with prices above the average price of Hardware products."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of Hardware product with prices above the average price of Hardware products.[SQL]\\nSELECT product_id FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  'Hardware') ORDER BY product_name ASC'\n        ;"
  },
  {
    "id": 166,
    "db_id": "customers_and_orders",
    "question": {
      "id": 166,
      "db_id": "customers_and_orders",
      "question": "What is the name of the most expensive product with type Clothes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the most expensive product with type Clothes?[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' SELECT product_name FROM products WHERE product_id  =  (SELECT product_id FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1)' SELECT product_price FROM products WHERE product_id  =  (SELECT product_id FROM products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1)' SELECT max(product_price) FROM products WHERE product_type_code  =  'Clothes' <MID>\n    ORDER BY product_id;"
  },
  {
    "id": 167,
    "db_id": "customers_and_orders",
    "question": {
      "id": 167,
      "db_id": "customers_and_orders",
      "question": "Give the name of the most expensive Clothes product."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the name of the most expensive Clothes product.[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Clothes' ORDER BY product_price DESC LIMIT 1' <MID>\n    ORDER BY product_id;"
  },
  {
    "id": 168,
    "db_id": "customers_and_orders",
    "question": {
      "id": 168,
      "db_id": "customers_and_orders",
      "question": "What is the product id and product name for the cheapest Hardware type product?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product id and product name for the cheapest Hardware type product?[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 169,
    "db_id": "customers_and_orders",
    "question": {
      "id": 169,
      "db_id": "customers_and_orders",
      "question": "Give the id and name of the cheapest Hardware product."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the id and name of the cheapest Hardware product.[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1' SELECT product_name FROM products WHERE product_id  =  (SELECT product_id FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1)' UNION SELECT product_name FROM products WHERE product_id  =  (SELECT product_id FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1)' UNION SELECT product_name FROM products WHERE product_id  =  (SELECT product_id FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1)' UNION SELECT product_name FROM products WHERE product_id  =  (SELECT product_id FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_"
  },
  {
    "id": 170,
    "db_id": "customers_and_orders",
    "question": {
      "id": 170,
      "db_id": "customers_and_orders",
      "question": "List all product names in descending order of price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all product names in descending order of price.[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 171,
    "db_id": "customers_and_orders",
    "question": {
      "id": 171,
      "db_id": "customers_and_orders",
      "question": "What are the names of the products, sorted by descending price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the products, sorted by descending price?[SQL]\\nSELECT product_id  FROM Products WHERE product_price  >  0 ORDER BY product_price DESC'\n    ORDER BY product_id;"
  },
  {
    "id": 172,
    "db_id": "customers_and_orders",
    "question": {
      "id": 172,
      "db_id": "customers_and_orders",
      "question": "Show all hardware type products in ascending order of price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all hardware type products in ascending order of price.[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Hardware' ORDER BY product_price ASC NULLS LAST' <MID>_id` INTEGER NOT NULL ,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 173,
    "db_id": "customers_and_orders",
    "question": {
      "id": 173,
      "db_id": "customers_and_orders",
      "question": "What are the names of all Hardware products, sorted by price ascending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all Hardware products, sorted by price ascending?[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Hardware' ORDER BY product_price ASC NULLS LAST' <MID>_id` INTEGER NOT NULL ,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 174,
    "db_id": "customers_and_orders",
    "question": {
      "id": 174,
      "db_id": "customers_and_orders",
      "question": "List all product type codes and the number of products in each type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all product type codes and the number of products in each type.[SQL]\\nSELECT product_id FROM Products;"
  },
  {
    "id": 175,
    "db_id": "customers_and_orders",
    "question": {
      "id": 175,
      "db_id": "customers_and_orders",
      "question": "How many products are there for each product type?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products are there for each product type?[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 176,
    "db_id": "customers_and_orders",
    "question": {
      "id": 176,
      "db_id": "customers_and_orders",
      "question": "Show all product type codes and the average price for each type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all product type codes and the average price for each type.[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  'Laptop' GROUP BY product_id ORDER BY avg(product_price) DESC LIMIT 1' <MID>\n    ORDER BY order_quantity;"
  },
  {
    "id": 177,
    "db_id": "customers_and_orders",
    "question": {
      "id": 177,
      "db_id": "customers_and_orders",
      "question": "What is the average price of products for each product type?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price of products for each product type?[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 178,
    "db_id": "customers_and_orders",
    "question": {
      "id": 178,
      "db_id": "customers_and_orders",
      "question": "What are the product type code with at least two products?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the product type code with at least two products?[SQL]\\nSELECT product_id FROM Products WHERE product_type_code IN ( SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2 ) UNION SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 179,
    "db_id": "customers_and_orders",
    "question": {
      "id": 179,
      "db_id": "customers_and_orders",
      "question": "Give the product type codes of product types that have two or more products."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the product type codes of product types that have two or more products.[SQL]\\nSELECT product_id FROM Products WHERE product_type_code IN (SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2) ORDER BY product_id ASC LIMIT 100'\n        ;"
  },
  {
    "id": 180,
    "db_id": "customers_and_orders",
    "question": {
      "id": 180,
      "db_id": "customers_and_orders",
      "question": "What is the product type code with most number of products?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product type code with most number of products?[SQL]\\nSELECT product_id FROM Products;"
  },
  {
    "id": 181,
    "db_id": "customers_and_orders",
    "question": {
      "id": 181,
      "db_id": "customers_and_orders",
      "question": "What is the most frequent product type code?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most frequent product type code?[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  (SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1) ORDER BY rand() LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 182,
    "db_id": "customers_and_orders",
    "question": {
      "id": 182,
      "db_id": "customers_and_orders",
      "question": "How many customers do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers do we have?[SQL]\\nSELECT Customer_Orders.order_id FROM Customer_Orders WHERE customer_id = (SELECT min(customer_id) FROM Customer_Orders) GROUP BY Customer_Orders.order_id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 183,
    "db_id": "customers_and_orders",
    "question": {
      "id": 183,
      "db_id": "customers_and_orders",
      "question": "Count the number of customers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of customers.[SQL]\\nSELECT Customer_Orders.order_id FROM Customer_Orders WHERE order_status_code = 'Shipped' GROUP BY Customer_Orders.order_id ORDER BY count(*) DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 184,
    "db_id": "customers_and_orders",
    "question": {
      "id": 184,
      "db_id": "customers_and_orders",
      "question": "Show all customer ids and customer names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all customer ids and customer names.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Credit Card' UNION SELECT customer_id ,  customer_name FROM Customers WHERE payment_method_code  =  'Debit Card' ORDER BY customer_id ASC'\n        ;"
  },
  {
    "id": 185,
    "db_id": "customers_and_orders",
    "question": {
      "id": 185,
      "db_id": "customers_and_orders",
      "question": "What are the ids and names of all customers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and names of all customers?[SQL]\\nSELECT Customer_Orders.order_id FROM Customer_Orders WHERE customer_id = 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 186,
    "db_id": "customers_and_orders",
    "question": {
      "id": 186,
      "db_id": "customers_and_orders",
      "question": "What is the customer address, customer phone, and customer email for Jeromy?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the customer address, customer phone, and customer email for Jeromy?[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE customer_name = 'Jeromy' UNION SELECT order_id FROM Customer_Orders WHERE customer_id  =  (SELECT customer_id FROM Customers WHERE customer_name  =  'Jeromy')'\n    ORDER BY Customer_Orders.order_id;"
  },
  {
    "id": 187,
    "db_id": "customers_and_orders",
    "question": {
      "id": 187,
      "db_id": "customers_and_orders",
      "question": "Give the address, phone, and email for customers with the name Jeromy."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the address, phone, and email for customers with the name Jeromy.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE customer_name = 'Jeromy' AND payment_method_code != 'Cash On Delivery' UNION SELECT order_id FROM Customer_Orders WHERE order_status_code != 'Shipped' AND customer_name = 'Jeromy' ORDER BY order_id DESC LIMIT 1'\n\n    ORDER BY order_id;"
  },
  {
    "id": 188,
    "db_id": "customers_and_orders",
    "question": {
      "id": 188,
      "db_id": "customers_and_orders",
      "question": "Show all payment method codes and the number of customers in each code."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all payment method codes and the number of customers in each code.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE Customer_Orders.customer_id = Customers.customer_id GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 189,
    "db_id": "customers_and_orders",
    "question": {
      "id": 189,
      "db_id": "customers_and_orders",
      "question": "How many customers use each payment method?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers use each payment method?[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Credit Card' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Debit Card' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Cash On Delivery' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Net Banking' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Wallet' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Card Swipe' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Contactless Payment' UNION SELECT Customer_Orders.order"
  },
  {
    "id": 190,
    "db_id": "customers_and_orders",
    "question": {
      "id": 190,
      "db_id": "customers_and_orders",
      "question": "What is the payment method code used by most number of customers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the payment method code used by most number of customers?[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1) UNION SELECT Customer_Orders.order_id FROM Customer_Orders WHERE order_status_code  =  'Shipped' AND customer_id IN (SELECT customer_id FROM Customers WHERE payment_method_code  =  (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1))'\n    ORDER BY Customer_Orders.order_id;"
  },
  {
    "id": 191,
    "db_id": "customers_and_orders",
    "question": {
      "id": 191,
      "db_id": "customers_and_orders",
      "question": "Give the code of the payment method that is most commonly used."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the code of the payment method that is most commonly used.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 192,
    "db_id": "customers_and_orders",
    "question": {
      "id": 192,
      "db_id": "customers_and_orders",
      "question": "Show all customer names with the  payment method code used by least number of customers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all customer names with the  payment method code used by least number of customers.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 193,
    "db_id": "customers_and_orders",
    "question": {
      "id": 193,
      "db_id": "customers_and_orders",
      "question": "What are the names of customers who use the least common payment method?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of customers who use the least common payment method?[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1) ORDER BY Customer_Orders.order_id DESC LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 194,
    "db_id": "customers_and_orders",
    "question": {
      "id": 194,
      "db_id": "customers_and_orders",
      "question": "What is the payment method and customer number for customer named Jeromy?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the payment method and customer number for customer named Jeromy?[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE customer_name = 'Jeromy' JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customer_Orders.order_id ORDER BY count(*) DESC LIMIT 1' SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name = 'Jeromy' UNION SELECT T1.payment_method_code ,  T2.customer_number FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_name  =  'Jeromy' GROUP BY T1.payment_method_code ,  T2.customer_number ORDER BY count(*) DESC LIMIT 1' SELECT T1.payment_method_code ,  T2.customer_number FROM Customers AS T1"
  },
  {
    "id": 195,
    "db_id": "customers_and_orders",
    "question": {
      "id": 195,
      "db_id": "customers_and_orders",
      "question": "Give the payment method code and customer number corresponding to the customer named Jeromy."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the payment method code and customer number corresponding to the customer named Jeromy.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE customer_name = 'Jeromy' JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customer_Orders.order_id ORDER BY count(*) DESC LIMIT 1' SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name = 'Jeromy' UNION SELECT T1.payment_method_code ,  T1.customer_number FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_name  =  'Jeromy' GROUP BY T1.payment_method_code ,  T1.customer_number ORDER BY count(*) DESC LIMIT 1' SELECT T1.payment_method_code ,  T1.customer_number FROM Customers AS T1"
  },
  {
    "id": 196,
    "db_id": "customers_and_orders",
    "question": {
      "id": 196,
      "db_id": "customers_and_orders",
      "question": "What are the distinct payment methods used by customers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct payment methods used by customers?[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code IN ( SELECT DISTINCT payment_method_code FROM Customer_Orders ) ORDER BY Customer_Orders.order_id ASC LIMIT 100'\n        ;"
  },
  {
    "id": 197,
    "db_id": "customers_and_orders",
    "question": {
      "id": 197,
      "db_id": "customers_and_orders",
      "question": "Give the different payment method codes that customers use."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the different payment method codes that customers use.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code = 'Credit card' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Debit card' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Cash' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Check' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Wire transfer' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Direct deposit' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method_code  =  'Credit' UNION SELECT Customer_Orders.order_id FROM Customers WHERE payment_method"
  },
  {
    "id": 198,
    "db_id": "customers_and_orders",
    "question": {
      "id": 198,
      "db_id": "customers_and_orders",
      "question": "Show the id and the product type for all products, order by product name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the id and the product type for all products, order by product name.[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 199,
    "db_id": "customers_and_orders",
    "question": {
      "id": 199,
      "db_id": "customers_and_orders",
      "question": "What are the ids and product types for all products, sorted alphabetically by product name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and product types for all products, sorted alphabetically by product name?[SQL]\\nSELECT product_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 200,
    "db_id": "customers_and_orders",
    "question": {
      "id": 200,
      "db_id": "customers_and_orders",
      "question": "What is the product type with least number of products?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product type with least number of products?[SQL]\\nSELECT product_id FROM Products WHERE product_type_code  =  (SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1) UNION SELECT product_id FROM Products WHERE product_type_code  =  (SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1) ORDER BY product_id ASC'\n        ;"
  },
  {
    "id": 201,
    "db_id": "customers_and_orders",
    "question": {
      "id": 201,
      "db_id": "customers_and_orders",
      "question": "What is the code of the product type that is least common?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the code of the product type that is least common?[SQL]\\nSELECT product_id FROM Products;"
  },
  {
    "id": 202,
    "db_id": "customers_and_orders",
    "question": {
      "id": 202,
      "db_id": "customers_and_orders",
      "question": "How many customer orders do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customer orders do we have?[SQL]\\nSELECT order_id FROM Customer_Orders WHERE order_status_code  =  'Shipped' GROUP BY order_id ORDER BY count(*) DESC LIMIT 1000' SELECT sum(order_quantity) FROM order_items WHERE product_id  =  1' SELECT avg(order_quantity) FROM order_items WHERE product_id  =  1' SELECT min(order_quantity) FROM order_items WHERE product_id  =  1' SELECT max(order_quantity) FROM order_items WHERE product_id  =  1' SELECT sum(order_quantity) FROM order_items WHERE product_id  =  2' SELECT avg(order_quantity) FROM order_items WHERE product_id  =  2' SELECT min(order_quantity) FROM order_items WHERE product_id  =  2' SELECT max(order_quantity) FROM order_items WHERE product_id  =  2"
  },
  {
    "id": 203,
    "db_id": "customers_and_orders",
    "question": {
      "id": 203,
      "db_id": "customers_and_orders",
      "question": "Count the number of customer orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of customer orders.[SQL]\\nSELECT order_id FROM Customer_Orders WHERE order_status_code  =  'Shipped' GROUP BY order_id ORDER BY count(*) DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 204,
    "db_id": "customers_and_orders",
    "question": {
      "id": 204,
      "db_id": "customers_and_orders",
      "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[SQL]\\nSELECT Order_Items.order_id FROM Order_Items WHERE Order_Items.product_id = (SELECT product_id FROM products WHERE product_name  =  'iPhone X' ) AND Order_Items.order_quantity  =  3 AND Customer_orders.customer_name = 'Jeromy' ORDER BY Customer_orders.order_date DESC LIMIT 1'\n        ;"
  },
  {
    "id": 205,
    "db_id": "customers_and_orders",
    "question": {
      "id": 205,
      "db_id": "customers_and_orders",
      "question": "What were the ids, dates, and status codes for orders made by Jeromy?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What were the ids, dates, and status codes for orders made by Jeromy?[SQL]\\nSELECT order_id FROM Customer_Orders WHERE customer_name  =  'Jeromy' UNION SELECT order_id FROM Order_Items WHERE product_id  =  3 AND order_quantity  =  1' <MID>\n    ORDER BY order_id;"
  },
  {
    "id": 206,
    "db_id": "customers_and_orders",
    "question": {
      "id": 206,
      "db_id": "customers_and_orders",
      "question": "Show all customer names, ids and the number of orders by each customer."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all customer names, ids and the number of orders by each customer.[SQL]\\nSELECT Customer_Orders.order_id  FROM Customer_Orders WHERE Customer_Orders.order_status_code  =  'Shipped' GROUP BY Customer_Orders.customer_id ORDER BY count(*) DESC LIMIT 1' <MID>\n    ORDER BY order_quantity;"
  },
  {
    "id": 207,
    "db_id": "customers_and_orders",
    "question": {
      "id": 207,
      "db_id": "customers_and_orders",
      "question": "What are the names, ids, and number of orders made for each customer?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, ids, and number of orders made for each customer?[SQL]\\nSELECT Customer_Orders.order_id, Customers.customer_name , count(*) FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id , Customers.customer_name ORDER BY count(*) DESC LIMIT 1'\n        , 'customers': ['SELECT customer_id , customer_name FROM Customers']}\n    , {'question': 'What is the name of the most expensive product?', 'answer': 'SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1'}\n    , {'question': 'Which customers have placed the most orders?', 'answer': 'SELECT T1.customer_name ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_name ORDER"
  },
  {
    "id": 208,
    "db_id": "customers_and_orders",
    "question": {
      "id": 208,
      "db_id": "customers_and_orders",
      "question": "What is the customer id, name, phone, and email for the customer with most orders?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the customer id, name, phone, and email for the customer with most orders?[SQL]\\nSELECT Customer_Orders.order_id FROM Customer_Orders WHERE Customer_Orders.customer_id IN ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 )'\n    ORDER BY Customer_Orders.order_id;"
  },
  {
    "id": 209,
    "db_id": "customers_and_orders",
    "question": {
      "id": 209,
      "db_id": "customers_and_orders",
      "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the id, name, phone, and email corresponding to the customer who made the most orders.[SQL]\\nSELECT Customers.order_id FROM Customers WHERE Customers.customer_id  =  ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 )'\n\n    ORDER BY Customers.order_id;"
  },
  {
    "id": 210,
    "db_id": "customers_and_orders",
    "question": {
      "id": 210,
      "db_id": "customers_and_orders",
      "question": "Show all order status and the number of orders in each status."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all order status and the number of orders in each status.[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_quantity > 1 UNION SELECT order_id FROM Customer_Orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 211,
    "db_id": "customers_and_orders",
    "question": {
      "id": 211,
      "db_id": "customers_and_orders",
      "question": "How many orders have each order status code?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many orders have each order status code?[SQL]\\nSELECT order_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 212,
    "db_id": "customers_and_orders",
    "question": {
      "id": 212,
      "db_id": "customers_and_orders",
      "question": "What is the order status code that is most common?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the order status code that is most common?[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_quantity  =  3 GROUP BY order_item_id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 213,
    "db_id": "customers_and_orders",
    "question": {
      "id": 213,
      "db_id": "customers_and_orders",
      "question": "Give the order status code that is most frequent across customer orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the order status code that is most frequent across customer orders.[SQL]\\nSELECT order_item_id FROM Order_Items WHERE order_quantity  =  1 GROUP BY order_id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 214,
    "db_id": "customers_and_orders",
    "question": {
      "id": 214,
      "db_id": "customers_and_orders",
      "question": "How many customers do not have an order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers do not have an order?[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders) UNION SELECT null FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders) ORDER BY order_id DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 215,
    "db_id": "customers_and_orders",
    "question": {
      "id": 215,
      "db_id": "customers_and_orders",
      "question": "Count the number of customers who have not made an order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of customers who have not made an order.[SQL]\\nSELECT Customer_Orders.order_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders) GROUP BY Customer_Orders.order_id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 216,
    "db_id": "customers_and_orders",
    "question": {
      "id": 216,
      "db_id": "customers_and_orders",
      "question": "Show all product names without an order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all product names without an order.[SQL]\\nSELECT product_id FROM Order_Items WHERE product_id NOT IN (SELECT product_id FROM order_items) UNION SELECT product_name FROM products WHERE product_name NOT IN (SELECT product_name FROM order_items) ORDER BY product_name ASC'\n        ;"
  },
  {
    "id": 217,
    "db_id": "customers_and_orders",
    "question": {
      "id": 217,
      "db_id": "customers_and_orders",
      "question": "What are the names of products that have not been ordered?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of products that have not been ordered?[SQL]\\nSELECT product_id FROM Products WHERE product_id NOT IN ( SELECT product_id FROM order_items )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 218,
    "db_id": "customers_and_orders",
    "question": {
      "id": 218,
      "db_id": "customers_and_orders",
      "question": "How many products named Monitor have been ordered?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products named Monitor have been ordered?[SQL]\\nSELECT order_quantity FROM Order_Items WHERE product_id = ( SELECT product_id FROM Products WHERE product_name  =  'Monitor' ) UNION SELECT sum(order_quantity) FROM Order_Items WHERE product_id = ( SELECT product_id FROM Products WHERE product_name  =  'Monitor' ) <MID>_id` INTEGER NOT NULL ,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 219,
    "db_id": "customers_and_orders",
    "question": {
      "id": 219,
      "db_id": "customers_and_orders",
      "question": "What is the total number of Monitor products that have been ordered?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total number of Monitor products that have been ordered?[SQL]\\nSELECT product_id FROM Order_Items WHERE product_id IN ( SELECT product_id FROM Products WHERE product_type_code  =  'Monitor' ) GROUP BY product_id ORDER BY sum(order_quantity) DESC LIMIT 1; 376495'\n        ORDER BY product_id;"
  },
  {
    "id": 220,
    "db_id": "customers_and_orders",
    "question": {
      "id": 220,
      "db_id": "customers_and_orders",
      "question": "How many customers have ordered the product named Monitor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers have ordered the product named Monitor?[SQL]\\nSELECT Customer_Orders.order_id FROM Order_Items WHERE Order_Items.product_name  =  'Monitor' JOIN Customer_Orders ON Order_Items.order_id  =  Customer_Orders.order_id GROUP BY Customer_Orders.order_id HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1' SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_name  =  'Monitor'))' SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_name  =  'Monitor'))' SELECT customer_name FROM Custom"
  },
  {
    "id": 221,
    "db_id": "customers_and_orders",
    "question": {
      "id": 221,
      "db_id": "customers_and_orders",
      "question": "Count the number of different customers who have bought a Monitor Product."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different customers who have bought a Monitor Product.[SQL]\\nSELECT order_id FROM Order_Items WHERE product_id  =  3 GROUP BY order_id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 222,
    "db_id": "customers_and_orders",
    "question": {
      "id": 222,
      "db_id": "customers_and_orders",
      "question": "How many customers have an order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers have an order?[SQL]\\nSELECT order_id FROM Customer_Orders WHERE order_status_code  =  'Completed' GROUP BY order_id ORDER BY count(*) DESC LIMIT 1' SELECT count(*) FROM Customers WHERE customer_id IN ( SELECT customer_id FROM Customer_Orders WHERE order_status_code  =  'Completed' )' SELECT count(*) FROM Customer_Orders WHERE order_status_code  =  'Completed'' SELECT count(*) FROM Order_Items' SELECT sum(order_quantity) FROM order_items WHERE product_id  =  3' SELECT count(*) FROM ORDER_ITEMS' SELECT count(*) FROM products' SELECT sum(order_quantity) FROM order_items WHERE product_id  =  3' SELECT count(*) FROM orders' SELECT count(*) FROM customers' SELECT count(*) FROM order_items' SELECT count(*) FROM orders' SELECT count(*) FROM customers' SELECT count(*) FROM customer_orders' SELECT count(*) FROM orders'"
  },
  {
    "id": 223,
    "db_id": "customers_and_orders",
    "question": {
      "id": 223,
      "db_id": "customers_and_orders",
      "question": "Count the number of differnt customers who have made an order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of differnt customers who have made an order.[SQL]\\nSELECT order_id FROM Customer_Orders WHERE order_status_code  =  'Completed' GROUP BY customer_id HAVING count(*)  >  1' <MID>\n    ORDER BY order_id;"
  },
  {
    "id": 224,
    "db_id": "customers_and_orders",
    "question": {
      "id": 224,
      "db_id": "customers_and_orders",
      "question": "Show all customer ids without an order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all customer ids without an order.[SQL]\\nSELECT Customer_Orders.order_id FROM Customer_Orders WHERE order_id NOT IN (SELECT order_id FROM Order_Items) ORDER BY order_id ASC'\n        ;"
  },
  {
    "id": 225,
    "db_id": "customers_and_orders",
    "question": {
      "id": 225,
      "db_id": "customers_and_orders",
      "question": "What are the ids of customers who have not made an order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of customers who have not made an order?[SQL]\\nSELECT Customer_Orders.order_id FROM Customer_Orders WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders) UNION SELECT null FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders) ORDER BY order_id ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 226,
    "db_id": "customers_and_orders",
    "question": {
      "id": 226,
      "db_id": "customers_and_orders",
      "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[SQL]\\nSELECT order_id FROM Order_Items WHERE order_quantity  >  6 UNION SELECT oorder_id FROM Order_Items GROUP BY oorder_id HAVING count(*)  >  3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 227,
    "db_id": "customers_and_orders",
    "question": {
      "id": 227,
      "db_id": "customers_and_orders",
      "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[SQL]\\nSELECT Order_Items.order_id FROM Order_Items WHERE order_quantity  >  6 UNION SELECT T1.order_id FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3'\n        ;"
  },
  {
    "id": 228,
    "db_id": "region_building",
    "question": {
      "id": 228,
      "db_id": "region_building",
      "question": "How many buildings are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many buildings are there?[SQL]\\nSELECT building.Name FROM building WHERE building.completed_year  =  1957; SELECT count(*) FROM building; SELECT count(*) FROM region;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 229,
    "db_id": "region_building",
    "question": {
      "id": 229,
      "db_id": "region_building",
      "question": "Count the number of buildings."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of buildings.[SQL]\\nSELECT building.Name FROM building;"
  },
  {
    "id": 230,
    "db_id": "region_building",
    "question": {
      "id": 230,
      "db_id": "region_building",
      "question": "List the names of buildings in ascending order of number of stories."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of buildings in ascending order of number of stories.[SQL]\\nSELECT Name FROM buildingORDER BY building.Name;"
  },
  {
    "id": 231,
    "db_id": "region_building",
    "question": {
      "id": 231,
      "db_id": "region_building",
      "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the list of building names, sorted by the number of stories of each building in ascending order?[SQL]\\nSELECT Name FROM buildingORDER BY building.Name;"
  },
  {
    "id": 232,
    "db_id": "region_building",
    "question": {
      "id": 232,
      "db_id": "region_building",
      "question": "List the addresses of buildings in descending order of building completion year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the addresses of buildings in descending order of building completion year.[SQL]\\nSELECT building.Name FROM building WHERE building.Completed_Year != -1 ORDER BY building.Completed_Year DESC NULLS LAST'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 233,
    "db_id": "region_building",
    "question": {
      "id": 233,
      "db_id": "region_building",
      "question": "Sort the buildings in descending order of building completion year, and return the building addresses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort the buildings in descending order of building completion year, and return the building addresses.[SQL]\\nSELECT building.Name FROM building WHERE building.Completed_Year  =  (SELECT max(Completed_Year) FROM building) ORDER BY building.Completed_Year DESC NULLS LAST;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 234,
    "db_id": "region_building",
    "question": {
      "id": 234,
      "db_id": "region_building",
      "question": "What is the maximum number of stories of buildings not completed in 1980?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum number of stories of buildings not completed in 1980?[SQL]\\nSELECT Population FROM region WHERE Area  =  239; SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980; SELECT max(Number_of_Stories) FROM building WHERE Completed_Year  =  1980; SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980; SELECT max(Number_of_Stories) FROM building WHERE Completed_Year  =  1980; SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980; SELECT max(Number_of_Stories) FROM building WHERE Completed_Year  =  1980; SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980; SELECT max(Number_of_Stories) FROM building WHERE Comple"
  },
  {
    "id": 235,
    "db_id": "region_building",
    "question": {
      "id": 235,
      "db_id": "region_building",
      "question": "Among the buildings not completed in 1980, what is the maximum number of stories?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Among the buildings not completed in 1980, what is the maximum number of stories?[SQL]\\nSELECT building.Name FROM building WHERE building.Number_of_Stories  >  (SELECT max(Number_of_Stories) FROM building WHERE building.Completed_Year != 1980) AND building.Completed_Year != 1980 ORDER BY building.Number_of_Stories DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 236,
    "db_id": "region_building",
    "question": {
      "id": 236,
      "db_id": "region_building",
      "question": "What is the average population for all regions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average population for all regions?[SQL]\\nSELECT Area FROM region;"
  },
  {
    "id": 237,
    "db_id": "region_building",
    "question": {
      "id": 237,
      "db_id": "region_building",
      "question": "Compute the average population of a region."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Compute the average population of a region.[SQL]\\nSELECT Area  FROM region;"
  },
  {
    "id": 238,
    "db_id": "region_building",
    "question": {
      "id": 238,
      "db_id": "region_building",
      "question": "What are the names of regions in ascending alphabetical order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of regions in ascending alphabetical order?[SQL]\\nSELECT Name FROM region WHERE population  >  150000 ORDER BY name ASC' , 'SELECT name FROM region ORDER BY name ASC' ] , [2 , 'SELECT name FROM region WHERE population  >  150000 ORDER BY name ASC' , 'SELECT name FROM region ORDER BY name ASC' ] , [3 , 'SELECT name FROM region WHERE population  >  150000 ORDER BY name DESC' , 'SELECT name FROM region ORDER BY name DESC' ] , [4 , 'SELECT name FROM region WHERE population  >  150000 ORDER BY name DESC' , 'SELECT name FROM region ORDER BY name DESC' ] , [5 , 'SELECT name FROM region WHERE population  >  150000 ORDER BY name ASC' , 'SELECT name FROM region ORDER BY name ASC' ] , [6 , 'SELECT name FROM region WHERE population  >  150000"
  },
  {
    "id": 239,
    "db_id": "region_building",
    "question": {
      "id": 239,
      "db_id": "region_building",
      "question": "List the names of regions in alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of regions in alphabetical order.[SQL]\\nSELECT Name FROM regionORDER BY Name;"
  },
  {
    "id": 240,
    "db_id": "region_building",
    "question": {
      "id": 240,
      "db_id": "region_building",
      "question": "What are the capitals of the regions with area bigger than 10000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the capitals of the regions with area bigger than 10000?[SQL]\\nSELECT Capital FROM region WHERE area  >  10000 <MID> SELECT name FROM building WHERE completed_year  =  (SELECT max(completed_year) FROM building) ORDER BY name ASC LIMIT 5;'\n    ORDER BY building.Name;"
  },
  {
    "id": 241,
    "db_id": "region_building",
    "question": {
      "id": 241,
      "db_id": "region_building",
      "question": "Give me the capitals of the regions whose area is larger than 10000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the capitals of the regions whose area is larger than 10000.[SQL]\\nSELECT Capital FROM region WHERE Area  >  10000] SELECT capital FROM region WHERE area  >  10000] SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id HAVING min(t2.completed_year)  >  1950] SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id HAVING min(t2.completed_year)  >  1950] SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id HAVING min(t2."
  },
  {
    "id": 242,
    "db_id": "region_building",
    "question": {
      "id": 242,
      "db_id": "region_building",
      "question": "List the capital of the region with the largest population."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the capital of the region with the largest population.[SQL]\\nSELECT Capital FROM region WHERE Population  =  (SELECT MAX(Population) FROM region) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 243,
    "db_id": "region_building",
    "question": {
      "id": 243,
      "db_id": "region_building",
      "question": "Which region has the largest population? Give me the capital of the region."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which region has the largest population? Give me the capital of the region.[SQL]\\nSELECT Capital FROM region WHERE Population  =  (SELECT MAX(Population) FROM region) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 244,
    "db_id": "region_building",
    "question": {
      "id": 244,
      "db_id": "region_building",
      "question": "List the names of the regions with the top 5 largest areas."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of the regions with the top 5 largest areas.[SQL]\\nSELECT Name FROM regionORDER BY Area;"
  },
  {
    "id": 245,
    "db_id": "region_building",
    "question": {
      "id": 245,
      "db_id": "region_building",
      "question": "What are the names of the 5 largest regions in terms of area?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the 5 largest regions in terms of area?[SQL]\\nSELECT Name FROM regionORDER BY Area;"
  },
  {
    "id": 246,
    "db_id": "region_building",
    "question": {
      "id": 246,
      "db_id": "region_building",
      "question": "Show the names of buildings and the names of regions they are in."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of buildings and the names of regions they are in.[SQL]\\nSELECT building.Name FROM building WHERE building_id IN (SELECT building_id FROM region) UNION SELECT Name FROM region'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 247,
    "db_id": "region_building",
    "question": {
      "id": 247,
      "db_id": "region_building",
      "question": "For each building, return the name of the building and the name of the region it belongs to."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each building, return the name of the building and the name of the region it belongs to.[SQL]\\nSELECT building.Name FROM building WHERE building.Building_ID IN (SELECT building_id FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID) AND building.Building_ID NOT IN (SELECT building_id FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Building_ID HAVING COUNT(*)  >  1) UNION SELECT building.Name FROM building WHERE building.Building_ID NOT IN (SELECT building_id FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID) ORDER BY building.Name'\n        ;"
  },
  {
    "id": 248,
    "db_id": "region_building",
    "question": {
      "id": 248,
      "db_id": "region_building",
      "question": "Show the names of regions that have more than one building."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of regions that have more than one building.[SQL]\\nSELECT region.Name FROM region WHERE region_id IN (SELECT building_id FROM building GROUP BY building_id HAVING count(*)  >  1) UNION SELECT name FROM region WHERE area  =  0'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 249,
    "db_id": "region_building",
    "question": {
      "id": 249,
      "db_id": "region_building",
      "question": "Which regions have more than one building? Give me the names of the regions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which regions have more than one building? Give me the names of the regions.[SQL]\\nSELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*)  >  1) <MID> SELECT name FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING count(*)  >  1) ORDER BY name;'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 250,
    "db_id": "region_building",
    "question": {
      "id": 250,
      "db_id": "region_building",
      "question": "Show the capital of the region that has the most buildings."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the capital of the region that has the most buildings.[SQL]\\nSELECT Capital FROM region WHERE Region_ID  =  (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1)')]\n\n    LIMIT = 1\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 251,
    "db_id": "region_building",
    "question": {
      "id": 251,
      "db_id": "region_building",
      "question": "Which region has the largest number of buildings? Show me the capital of the region."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which region has the largest number of buildings? Show me the capital of the region.[SQL]\\nSELECT Region_ID FROM buildingGROUP BY Region_IDORDER BY Capital;"
  },
  {
    "id": 252,
    "db_id": "region_building",
    "question": {
      "id": 252,
      "db_id": "region_building",
      "question": "Show addresses of buildings and the capitals of regions they are in."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show addresses of buildings and the capitals of regions they are in.[SQL]\\nSELECT Capital FROM region WHERE region_id  =  Building.region_id AND Building.address  =  'Capital' <MID>\n    LIMIT 100; SELECT * FROM building LIMIT 100; SELECT * FROM region LIMIT 100; SELECT address FROM building LIMIT 100; SELECT capital FROM region LIMIT 100; SELECT name FROM building LIMIT 100; SELECT name FROM region LIMIT 100; SELECT completed_year FROM building LIMIT 100; SELECT number_of_stories FROM building LIMIT 100; SELECT completed_year FROM region LIMIT 100; SELECT number_of_stories FROM region LIMIT 100; SELECT completed_year FROM building LIMIT 10; SELECT number_of_stories FROM building LIMIT 10; SELECT completed_year FROM region LIMIT 10; SELECT number_of_stories FROM region LIMIT 1"
  },
  {
    "id": 253,
    "db_id": "region_building",
    "question": {
      "id": 253,
      "db_id": "region_building",
      "question": "For each building, return the address of the building and the name of the region it belongs to."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each building, return the address of the building and the name of the region it belongs to.[SQL]\\nSELECT building.Name FROM building WHERE building_id IN (SELECT building_id FROM region) UNION SELECT T1.address ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_id NOT IN (SELECT building_id FROM region) ORDER BY T1.building_id'\n        ;"
  },
  {
    "id": 254,
    "db_id": "region_building",
    "question": {
      "id": 254,
      "db_id": "region_building",
      "question": "Show the number of stories of buildings in the region with name \"Abruzzo\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the number of stories of buildings in the region with name \"Abruzzo\".[SQL]\\nSELECT building.Name FROM building WHERE building.Number_of_Stories  =  (SELECT max(building.Number_of_Stories) FROM building WHERE building.region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo')) AND building.region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo')' <MID> SELECT count(*) FROM building WHERE building.Number_of_Stories  =  (SELECT max(building.Number_of_Stories) FROM building WHERE building.region_id  =  123) AND building.region_id  =  123;' SELECT count(*) FROM building WHERE building.Number_of_Stories  =  (SELECT max(building.Number_of_Stories)"
  },
  {
    "id": 255,
    "db_id": "region_building",
    "question": {
      "id": 255,
      "db_id": "region_building",
      "question": "Return the number of stories for each building in the region named \"Abruzzo\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the number of stories for each building in the region named \"Abruzzo\".[SQL]\\nSELECT Name FROM building WHERE Number_of_Stories  =  ( SELECT max(Number_of_Stories) FROM building WHERE Region_ID  =  ( SELECT Region_ID FROM region WHERE name  =  'Abruzzo' ) ) AND Region_ID  =  ( SELECT Region_ID FROM region WHERE name  =  'Abruzzo' )'\n    ;"
  },
  {
    "id": 256,
    "db_id": "region_building",
    "question": {
      "id": 256,
      "db_id": "region_building",
      "question": "Please show each completion year and the number of buildings completed in that year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show each completion year and the number of buildings completed in that year.[SQL]\\nSELECT building.Name FROM building WHERE building.Completed_Year  =  (SELECT building.Completed_Year FROM building GROUP BY building.Completed_Year ORDER BY count(*) DESC LIMIT 1) ORDER BY building.Completed_Year ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 257,
    "db_id": "region_building",
    "question": {
      "id": 257,
      "db_id": "region_building",
      "question": "For completion year, return the year and the number of buildings completed."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For completion year, return the year and the number of buildings completed.[SQL]\\nSELECT building.Name FROM building WHERE building.Completed_Year  =  (SELECT max(building.Completed_Year) FROM building) GROUP BY building.Completed_Year ORDER BY building.Completed_Year DESC'\n        ;"
  },
  {
    "id": 258,
    "db_id": "region_building",
    "question": {
      "id": 258,
      "db_id": "region_building",
      "question": "List the year in which the most buildings are completed."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the year in which the most buildings are completed.[SQL]\\nSELECT building.Name FROM building WHERE building.Completed_Year  =  (SELECT max(Completed_Year) FROM building) ORDER BY building.Name ASC LIMIT 1;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 259,
    "db_id": "region_building",
    "question": {
      "id": 259,
      "db_id": "region_building",
      "question": "In which year did the most building constructions complete?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In which year did the most building constructions complete?[SQL]\\nSELECT building.Name FROM building WHERE building.Completed_Year  =  (SELECT max(Completed_Year) FROM building) ORDER BY building.Name ASC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 260,
    "db_id": "region_building",
    "question": {
      "id": 260,
      "db_id": "region_building",
      "question": "List the names of regions that do not have any buildings."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of regions that do not have any buildings.[SQL]\\nSELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 261,
    "db_id": "region_building",
    "question": {
      "id": 261,
      "db_id": "region_building",
      "question": "What are the names of regions in which there are no buildings?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of regions in which there are no buildings?[SQL]\\nSELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building) <MID> SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building) UNION SELECT 'No Building' FROM building WHERE buildng_id  NOT IN (SELECT buildng_id FROM region) GROUP BY buildng_id HAVING count(*)  =  1) T3 ON T3.buildng_id  =  T1.buildng_id ORDER BY T1.buildng_id ASC NULLS LAST'\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 262,
    "db_id": "region_building",
    "question": {
      "id": 262,
      "db_id": "region_building",
      "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[SQL]\\nSELECT building.Name FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT building.Name FROM building WHERE Number_of_Stories  <  15]'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 263,
    "db_id": "region_building",
    "question": {
      "id": 263,
      "db_id": "region_building",
      "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[SQL]\\nSELECT building.Name FROM building WHERE building.Number_of_Stories  >  20 INTERSECT SELECT building.Name FROM building WHERE building.Number_of_Stories  <  15'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 264,
    "db_id": "region_building",
    "question": {
      "id": 264,
      "db_id": "region_building",
      "question": "Show the distinct addresses of buildings."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the distinct addresses of buildings.[SQL]\\nSELECT building.Name FROM building WHERE building.Address != '' AND building.Address != NULL GROUP BY building.Address ORDER BY COUNT(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 265,
    "db_id": "region_building",
    "question": {
      "id": 265,
      "db_id": "region_building",
      "question": "Give me a list of distinct building addresses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me a list of distinct building addresses.[SQL]\\nSELECT building.Name FROM building WHERE building.Address != '' AND building.Address IS NOT NULL GROUP BY building.Address ORDER BY COUNT(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 266,
    "db_id": "region_building",
    "question": {
      "id": 266,
      "db_id": "region_building",
      "question": "Show the completed years of buildings in descending order of the number of stories."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the completed years of buildings in descending order of the number of stories.[SQL]\\nSELECT building.Name FROM building WHERE building.Number_of_Stories != 0 ORDER BY building.Completed_Year DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 267,
    "db_id": "region_building",
    "question": {
      "id": 267,
      "db_id": "region_building",
      "question": "Sort buildings in descending order of the number of stories, and return their completion years."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort buildings in descending order of the number of stories, and return their completion years.[SQL]\\nSELECT building.Name FROM building WHERE buildin g.Number_of_Stories  >  0 ORDER BY buildin g.Completed_Year DESC'\n        GROUP BY building.Name;"
  },
  {
    "id": 268,
    "db_id": "government_shift",
    "question": {
      "id": 268,
      "db_id": "government_shift",
      "question": "List details of all the channel in alphabetical order ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List details of all the channel in alphabetical order .[SQL]\\nSELECT Channels.Customers_and_Services_ID FROM Channels WHERE Channel_Details LIKE '%Alphabetical%' ORDER BY Channel_Details ASC'\n        ;"
  },
  {
    "id": 269,
    "db_id": "government_shift",
    "question": {
      "id": 269,
      "db_id": "government_shift",
      "question": "What is the list of channel details ordered alphabetically ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the list of channel details ordered alphabetically ?[SQL]\\nSELECT Channels.Customers_and_Services_ID FROM Channels WHERE Channel_Details LIKE '%Order%' ORDER BY Channel_Details ASC'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 270,
    "db_id": "government_shift",
    "question": {
      "id": 270,
      "db_id": "government_shift",
      "question": "How many services are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many services are there?[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Customers_and_Services \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 271,
    "db_id": "government_shift",
    "question": {
      "id": 271,
      "db_id": "government_shift",
      "question": "Count the number of services."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of services.[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction_ID = 1 GROUP BY Customer_Interaction_ID HAVING count(*)  >  3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 272,
    "db_id": "government_shift",
    "question": {
      "id": 272,
      "db_id": "government_shift",
      "question": "What is the most common analytical layer type code?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common analytical layer type code?[SQL]\\nSELECT Analytical_Layer_Type_Code FROM Analytical_LayerGROUP BY Analytical_Layer_Type_CodeORDER BY Customers_and_Services_IDLIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 273,
    "db_id": "government_shift",
    "question": {
      "id": 273,
      "db_id": "government_shift",
      "question": "Find the analytical layer type code that appears most often."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the analytical layer type code that appears most often.[SQL]\\nSELECT Analytical_Layer_Type_Code FROM Analytical_LayerGROUP BY Analytical_Layer_Type_CodeORDER BY Customer_Interactions.Customers_and_Services_ID;"
  },
  {
    "id": 274,
    "db_id": "government_shift",
    "question": {
      "id": 274,
      "db_id": "government_shift",
      "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all the services that has been used by the customer with details \"Hardy Kutch\".[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Customers_and_Services \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 275,
    "db_id": "government_shift",
    "question": {
      "id": 275,
      "db_id": "government_shift",
      "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.[SQL]\\nSELECT Services.Pattern_Recognition FROM Services WHERE Services.Service_ID IN ( SELECT T1.Service_ID FROM Customers AS T2 JOIN Customers_and_Services AS T1 ON T2.Customer_ID  =  T1.Customer_ID WHERE T2.Customer_Details  =  'Hardy Kutch')'\n\n    ORDER BY Services.Pattern_Recognition;"
  },
  {
    "id": 276,
    "db_id": "government_shift",
    "question": {
      "id": 276,
      "db_id": "government_shift",
      "question": "Find the details of the services that have been used by more than 3 times ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the details of the services that have been used by more than 3 times .[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Customers_and_Services \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 277,
    "db_id": "government_shift",
    "question": {
      "id": 277,
      "db_id": "government_shift",
      "question": "Which services were used by customers by more than 3 times? Give me the service details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which services were used by customers by more than 3 times? Give me the service details.[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Service_ID  =  1 GROUP BY Customers_and_Services_ID HAVING count(*)  >  3 UNION SELECT Service_Details FROM Services WHERE Service_ID  =  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 278,
    "db_id": "government_shift",
    "question": {
      "id": 278,
      "db_id": "government_shift",
      "question": "Find the details of the customer who has used services the most times."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the details of the customer who has used services the most times.[SQL]\\nSELECT Customers_and_Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Service_ID  =  (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY count(*) DESC LIMIT 1) UNION SELECT T1.customer_id ,  T2.service_id FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID  =  T2.Customer_ID WHERE T2.Service_ID  =  (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY count(*) DESC LIMIT 1) ORDER BY T1.Customer_ID ASC'\n        ;"
  },
  {
    "id": 279,
    "db_id": "government_shift",
    "question": {
      "id": 279,
      "db_id": "government_shift",
      "question": "return the details of the customer with largest count of used services."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, return the details of the customer with largest count of used services.[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction_ID  =  1 GROUP BY Customer_Interaction_ID ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 280,
    "db_id": "government_shift",
    "question": {
      "id": 280,
      "db_id": "government_shift",
      "question": "Find the name of the customer who has used the most types of services ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the customer who has used the most types of services .[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction.Status_Code = 'Success' GROUP BY Customer_Interaction.Customer_ID ORDER BY count(*) DESC LIMIT 1' <MID>_details TEXT NOT NULL ,  service_id INTEGER NOT NULL ,  PRIMARY KEY (service_id) ) , CHANNELS ( channel_id INTEGER NOT NULL ,  channel_details TEXT NOT NULL ,  PRIMARY KEY (channel_id) ) , CUSTOMERS_AND_SERVICES ( customers_and_services_id INTEGER NOT NULL ,  customers_and_services_details TEXT NOT NULL ,  customer_id INTEGER ,  service_id INTEGER ,  PRIMARY KEY (customers_and_services_id) ) , ANALYT"
  },
  {
    "id": 281,
    "db_id": "government_shift",
    "question": {
      "id": 281,
      "db_id": "government_shift",
      "question": "Which customer has used the most types of services ? Give me the customer details ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customer has used the most types of services ? Give me the customer details .[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT MAX(Customeer_Interaction_ID) FROM Customeer_Interaction GROUP BY Customers_and_Services_ID) ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 282,
    "db_id": "government_shift",
    "question": {
      "id": 282,
      "db_id": "government_shift",
      "question": "Find the details of the customer who has never used any services ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the details of the customer who has never used any services .[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction_ID NOT IN (SELECT MAX(Customer_Interaction_ID) FROM Customer_Interactions GROUP BY Customer_ID) UNION SELECT NULL FROM DUAL'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 283,
    "db_id": "government_shift",
    "question": {
      "id": 283,
      "db_id": "government_shift",
      "question": "Which customers never used any services ? Give me the customer details ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers never used any services ? Give me the customer details .[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Service_ID  =  -1 GROUP BY Customer_Interaction.Customer_ID HAVING count(*)  =  min(count(*))'\n        ;"
  },
  {
    "id": 284,
    "db_id": "government_shift",
    "question": {
      "id": 284,
      "db_id": "government_shift",
      "question": "Find the details of the customers who have used the least-used service ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the details of the customers who have used the least-used service .[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interactions.Service_ID  =  (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID ORDER BY count(*) ASC LIMIT 1) GROUP BY Customer_Interactions.Customer_ID ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 285,
    "db_id": "government_shift",
    "question": {
      "id": 285,
      "db_id": "government_shift",
      "question": "Which customers used the least commonly-used service ? Give me the distinct customer details ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers used the least commonly-used service ? Give me the distinct customer details .[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customers_and_Services_Details  =  'Facebook' EXCEPT SELECT T1.Customers_and_Services_ID FROM Customers_and_Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Customers_and_Services_ID  =  T2.Customers_and_Services_ID GROUP BY T1.Customers_and_Services_ID ORDER BY count(*) ASC LIMIT 1' |]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 286,
    "db_id": "government_shift",
    "question": {
      "id": 286,
      "db_id": "government_shift",
      "question": "How many distinct customer and services details are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many distinct customer and services details are there?[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction_ID  =  1 GROUP BY Customer_Interaction_ID HAVING count(*)  >=  2 UNION SELECT T1.customer_id ,  T2.service_id FROM customers AS T1 JOIN services AS T2 ON T1.customer_id  =  T2.service_id GROUP BY T1.customer_id HAVING count(*)  >  1 UNION SELECT T3.customer_id ,  T4.service_id FROM customers_and_services AS T3 JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.customer_id HAVING count(*)  >  1'\n        ;"
  },
  {
    "id": 287,
    "db_id": "government_shift",
    "question": {
      "id": 287,
      "db_id": "government_shift",
      "question": "Count the total number of available customers and services details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the total number of available customers and services details.[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interactions.Status_Code  =  'New' GROUP BY Customer_Interaction.Customers_and_Services_ID ORDER BY count(*) DESC LIMIT 1'\n\n    LIMIT 1'\n\n    ;"
  },
  {
    "id": 288,
    "db_id": "government_shift",
    "question": {
      "id": 288,
      "db_id": "government_shift",
      "question": "Find all the customers whose name contains \"Kutch\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all the customers whose name contains \"Kutch\".[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interactions.customer_id IN (SELECT customer_id FROM Customers WHERE customer_details LIKE '%Kutch%') GROUP BY Customer_Interactions.customer_id HAVING count(*)  =  (SELECT count(*) FROM Customer_Interactions WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_details LIKE '%Kutch%')) ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 289,
    "db_id": "government_shift",
    "question": {
      "id": 289,
      "db_id": "government_shift",
      "question": "What are the details of the customers who have \"Kutch\" in part of their details?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the details of the customers who have \"Kutch\" in part of their details?[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interactions.Status_Code  =  'Success' AND Customers_and_Services_details LIKE '%Kutch%' GROUP BY Customer_Interactions.Customer_ID HAVING count(*)  >=  2 UNION SELECT Customers_and_Services.Customer_ID FROM Customers_and_Services WHERE Customers_and_Services.Service_Details LIKE '%Kutch%' GROUP BY Customers_and_Services.Customer_ID HAVING count(*)  >=  2'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 290,
    "db_id": "government_shift",
    "question": {
      "id": 290,
      "db_id": "government_shift",
      "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN ( SELECT Customers_and_Services.Service_ID FROM Customers_and_Services WHERE Customers_and_Services_details  =  'Hardy Kutch') OR Service_ID IN ( SELECT Customer_Interactions.Service_ID FROM Customer_Interactions WHERE Status_Code  =  'good')'\n        ;"
  },
  {
    "id": 291,
    "db_id": "government_shift",
    "question": {
      "id": 291,
      "db_id": "government_shift",
      "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Services.Service_ID IN ( SELECT Customers_and_Services.Service_ID FROM Customers_and_Services WHERE Customers_and_Services.customer_id  =  1 AND Customers_and_Services.Customers_and_Services_details LIKE '%Good%' ) UNION SELECT T1.service_id FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.customer_id = 1'\n        ;"
  },
  {
    "id": 292,
    "db_id": "government_shift",
    "question": {
      "id": 292,
      "db_id": "government_shift",
      "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN ( SELECT Customers_and_Services.Service_ID FROM Customers_and_Services WHERE Customers_and_Services_details  =  'Hardy Kutch' INTERSECT SELECT Customers_and_Services.Service_ID FROM Customers_and_Services WHERE Customers_and_Services_details  =  'bad') <MID>_ID INTEGER NOT NULL , Channel_Details VARCHAR(255) NOT NULL , PRIMARY KEY (Channel_ID) ) CREATE TABLE Customer_Interactions ( Customer_Interaction_ID INTEGER NOT NULL , Channel_ID INTEGER , Customer_ID INTEGER , Service_ID INTEGER , Status_Code CHAR(15) , Services_and_Channels_Details VARCHAR(255) , PRIMARY KEY (Customer_Interaction_ID) , FO"
  },
  {
    "id": 293,
    "db_id": "government_shift",
    "question": {
      "id": 293,
      "db_id": "government_shift",
      "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.[SQL]\\nSELECT Services.Pattern_Recognition FROM Services WHERE Services.service_id IN ( SELECT Customers_and_Services.service_id FROM Customers_and_Services WHERE Customers_and_Services.customer_id IN ( SELECT Customer_Interactions.customer_id FROM Customer_Interactions WHERE Customer_Interactions.Status_Code  =  'bad' AND Customers_and_Services.customers_and_services_id  =  Customer_Interactions.customers_and_services_id ) ) AND Customers_and_Services.customer_id IN ( SELECT Customer_Interactions.customer_id FROM Customer_Interactions WHERE Customer_Interactions.Status_Code  =  'bad' AND Customers_and_Services.customers_and_services_id  =  Customer_Interactions.customers_and_services_id )'\n    ;"
  },
  {
    "id": 294,
    "db_id": "government_shift",
    "question": {
      "id": 294,
      "db_id": "government_shift",
      "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[SQL]\\nSELECT Services.Pattern_Recognition FROM Services WHERE Services.service_id IN ( SELECT Customer_Interactions.Service_ID FROM Customer_Interactions WHERE Customer_Interactions.channel_details  =  '15 ij' ) UNION SELECT T1.Pattern_Recognition FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.Customers_and_Services_details LIKE '%15 ij%' UNION SELECT T3.Pattern_Recognition FROM Services AS T3 JOIN Customer_Interactions AS T4 ON T3.service_id  =  T4.service_id WHERE T4.channel_details LIKE '%15 ij%' UNION SELECT T5.Pattern_Recognition FROM Services AS T5 JOIN Customer_Interactions AS T6 ON T5.service_id "
  },
  {
    "id": 295,
    "db_id": "government_shift",
    "question": {
      "id": 295,
      "db_id": "government_shift",
      "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the details of all the services that have interacted with the channel with detail \"15 ij\".[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Customers_and_Services \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 296,
    "db_id": "government_shift",
    "question": {
      "id": 296,
      "db_id": "government_shift",
      "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Status_Code  =  'Stuck' AND Services_and_Channels_Details  =  'bad' UNION SELECT T1.Customer_ID FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID  =  T2.Customer_ID WHERE T2.Customers_and_Services_Details  =  'bad' UNION SELECT T3.Customer_ID FROM Customers AS T3 JOIN Customers_and_Services AS T4 ON T3.Customer_ID  =  T4.Customer_ID WHERE T4.Customers_and_Services_Details  =  'bad' UNION SELECT T5.Customer_ID FROM Customers AS T5 JOIN Customers_and_Services AS T6 ON T5.Customer_ID  =  T6"
  },
  {
    "id": 297,
    "db_id": "government_shift",
    "question": {
      "id": 297,
      "db_id": "government_shift",
      "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Status_Code  =  'Stuck' AND Services_and_Channels_Details  =  'bad' GROUP BY Customer_Interactions.Customer_ID HAVING count(*)  >=  2' <MID>_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.customers_and_services_details  =  'good' GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n"
  },
  {
    "id": 298,
    "db_id": "government_shift",
    "question": {
      "id": 298,
      "db_id": "government_shift",
      "question": "How many integration platforms are successful?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many integration platforms are successful?[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Status_Code  =  'Successful' GROUP BY Customers_and_Services_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0; SELECT count(*) FROM Customer_Interactions WHERE Status_Code  =  'Successful' GROUP BY Customers_and_Services_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0; SELECT count(*) FROM Customer_Interactions WHERE Status_Code  =  'Successful' GROUP BY Customers_and_Services_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0; SELECT count(*) FROM Customer_Interactions WHERE Status_Code  =  'Successful' GROUP BY Customers_and_Services_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0; SELECT count(*) FROM Customer_Interactions WHERE Status_Code  = "
  },
  {
    "id": 299,
    "db_id": "government_shift",
    "question": {
      "id": 299,
      "db_id": "government_shift",
      "question": "Count the number of integration platforms that have \"Success\" in the details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of integration platforms that have \"Success\" in the details.[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Status_Code  =  'Success' GROUP BY Customers_and_Services_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0'\n\n    LIMIT 1 OFFSET 0'\n\n    ;"
  },
  {
    "id": 300,
    "db_id": "government_shift",
    "question": {
      "id": 300,
      "db_id": "government_shift",
      "question": "List the details of all the customers who are associated with a failed integration platform ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the details of all the customers who are associated with a failed integration platform .[SQL]\\nSELECT Customers.Customers_and_Services_ID FROM Customers_and_Services \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 301,
    "db_id": "government_shift",
    "question": {
      "id": 301,
      "db_id": "government_shift",
      "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.[SQL]\\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Status_Code  =  'Fail' AND Integration_Platform_ID != null'\n\n    LIMIT 100'\n\n    ;"
  },
  {
    "id": 302,
    "db_id": "government_shift",
    "question": {
      "id": 302,
      "db_id": "government_shift",
      "question": "Which service ( s ) has never been used by any customer ? List their details ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which service ( s ) has never been used by any customer ? List their details .[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services) UNION SELECT T1.Customer_Interaction_ID ,  'No Match Found' FROM Customer_Interactions AS T1 JOIN Channels AS T2 ON T1.Channel_ID  =  T2.Channel_ID WHERE T1.Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services) ORDER BY T1.Customer_Interaction_ID ASC'\n\n    LIMIT 200'\n\n    ;"
  },
  {
    "id": 303,
    "db_id": "government_shift",
    "question": {
      "id": 303,
      "db_id": "government_shift",
      "question": "Find details of the services that no customer has ever used . Return the service details ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find details of the services that no customer has ever used . Return the service details .[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services) UNION SELECT Customers_and_Services_ID FROM Customers_and_Services EXCEPT SELECT Service_ID FROM Customers_and_Services'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 304,
    "db_id": "government_shift",
    "question": {
      "id": 304,
      "db_id": "government_shift",
      "question": "Find all the layer type codes with their corresponding usage count."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all the layer type codes with their corresponding usage count.[SQL]\\nSELECT Analytical_Layer_Type_Code\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 305,
    "db_id": "government_shift",
    "question": {
      "id": 305,
      "db_id": "government_shift",
      "question": "For each analytical layer, return the analytical layer type code and the number of times it was used."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each analytical layer, return the analytical layer type code and the number of times it was used.[SQL]\\nSELECT Analytical_Layer_Type_Code \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 306,
    "db_id": "government_shift",
    "question": {
      "id": 306,
      "db_id": "government_shift",
      "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .[SQL]\\nSELECT Customers_and_Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customers_and_Services_details  =  'unsatisfied' UNION SELECT T1.Customer_Interaction_ID FROM Customer_Interactions AS T1 JOIN Integration_Platform AS T2 ON T1.Customer_Interaction_ID  =  T2.Customer_Interaction_ID WHERE T2.Integration_Platform_Details  =  'unsatisfied' UNION SELECT T1.Customer_Interaction_ID FROM Customer_Interactions AS T1 JOIN Analytical_Layer AS T2 ON T1.Customer_Interaction_ID  =  T2.Customer_Interaction_ID WHERE T2.Analytical_Layer_Type_Code  =  'unsatisfied' UNION SELECT T1.Customer_Interaction"
  },
  {
    "id": 307,
    "db_id": "government_shift",
    "question": {
      "id": 307,
      "db_id": "government_shift",
      "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.[SQL]\\nSELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_Details  =  'unsatisfied' JOIN Services ON Services.Service_ID  =  Customers_and_Services.Service_ID GROUP BY Services.Customer_ID HAVING count(*)  >  1 UNION SELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.Customers_and_Services_Details  =  'unsatisfied' GROUP BY T1.service_id HAVING count(*)  >  1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 308,
    "db_id": "vehicle_rent",
    "question": {
      "id": 308,
      "db_id": "vehicle_rent",
      "question": "How many vehicles do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many vehicles do we have?[SQL]\\nSELECT id FROM Vehicles WHERE name != 'null' AND Model_year != 0 AND Combined_fuel_economy_rate != 0 AND Cost_per_25_miles != 0 AND Annual_fuel_cost != 0 AND Notes != 'null' AND type_of_powertrain != 'null' LIMIT 1 OFFSET 0' SELECT count(*) FROM Vehicles WHERE name != 'null' AND Model_year != 0 AND Combined_fuel_economy_rate != 0 AND Cost_per_25_miles != 0 AND Annual_fuel_cost != 0 AND Notes != 'null' AND type_of_powertrain != 'null'')]\n\n    ORDER BY id;"
  },
  {
    "id": 309,
    "db_id": "vehicle_rent",
    "question": {
      "id": 309,
      "db_id": "vehicle_rent",
      "question": "Count the number of vehicles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of vehicles.[SQL]\\nSELECT id FROM Vehicles;"
  },
  {
    "id": 310,
    "db_id": "vehicle_rent",
    "question": {
      "id": 310,
      "db_id": "vehicle_rent",
      "question": "Show names for all vehicles in descending order of model year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names for all vehicles in descending order of model year.[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 311,
    "db_id": "vehicle_rent",
    "question": {
      "id": 311,
      "db_id": "vehicle_rent",
      "question": "What are the names of all vehicles, ordered by model year descending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all vehicles, ordered by model year descending?[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 312,
    "db_id": "vehicle_rent",
    "question": {
      "id": 312,
      "db_id": "vehicle_rent",
      "question": "List all distinct types of powertrain of vehicles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all distinct types of powertrain of vehicles.[SQL]\\nSELECT Discount.id FROM Discount WHERE name  =  'Standard' UNION SELECT Renting_history.id FROM Renting_history WHERE total_hours  >  60 INTERSECT SELECT Vehicles.id FROM Vehicles WHERE Type_of_powertrain  =  'Diesel' EXCEPT SELECT Vehicles.id FROM Vehicles WHERE Combined_fuel_economy_rate  >  45 UNION SELECT Vehicles.id FROM Vehicles WHERE City_fuel_economy_rate  >  35 EXCEPT SELECT Vehicles.id FROM Vehicles WHERE Highway_fuel_economy_rate  <  15 EXCEPT SELECT Vehicles.id FROM Vehicles WHERE Cost_per_25_miles  <  15 UNION SELECT Vehicles.id FROM Vehicles WHERE Notes"
  },
  {
    "id": 313,
    "db_id": "vehicle_rent",
    "question": {
      "id": 313,
      "db_id": "vehicle_rent",
      "question": "What are the different types of powertrains?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different types of powertrains?[SQL]\\nSELECT Discount.id FROM Discount WHERE name  =  'Standard' UNION SELECT Renting_history.id FROM Renting_history WHERE total_hours  >  60 UNION SELECT Vehicles.id FROM Vehicles WHERE Combined_fuel_economy_rate  >  31 AND City_fuel_economy_rate  >  17; <MID>_credit INT , PRIMARY KEY (id) ) CREATE TABLE Discount ( id INT , name TEXT , membership_credit INT , PRIMARY KEY (id) ) CREATE TABLE Renting_history ( id INT , customer_id INT , discount_id INT , vehicles_id INT , total_hours INT , PRIMARY KEY (id) , FOREIGN KEY (customer_id) REFERENCES Customers(id) , FOREIGN KEY (vehicles_id) REFERENCES Ve"
  },
  {
    "id": 314,
    "db_id": "vehicle_rent",
    "question": {
      "id": 314,
      "db_id": "vehicle_rent",
      "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 315,
    "db_id": "vehicle_rent",
    "question": {
      "id": 315,
      "db_id": "vehicle_rent",
      "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 316,
    "db_id": "vehicle_rent",
    "question": {
      "id": 316,
      "db_id": "vehicle_rent",
      "question": "Show types of powertrain with vehicles both from 2014 and 2013."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show types of powertrain with vehicles both from 2014 and 2013.[SQL]\\nSELECT Discount.id FROM Discount WHERE name = 'Standard' UNION SELECT Renting_history.discount_id FROM Renting_history WHERE vehicles_id IN (SELECT id FROM Vehicles WHERE model_year  =  2014) INTERSECT SELECT Renting_history.discount_id FROM Renting_history WHERE vehicles_id IN (SELECT id FROM Vehicles WHERE model_year  =  2013) <MID>_credit INT , PRIMARY KEY (id) ) CREATE TABLE Discount ( id INT , name TEXT , membership_credit INT , PRIMARY KEY (id) ) CREATE TABLE Vehicles ( id INT , name TEXT , model_year INT , type_of_powertrain TEXT , combined_fuel_economy_rate INT , city_fuel_economy_rate INT , highway_fuel_economy_rate"
  },
  {
    "id": 317,
    "db_id": "vehicle_rent",
    "question": {
      "id": 317,
      "db_id": "vehicle_rent",
      "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE model_year = 2013 INTERSECT SELECT vehicles_id FROM Vehicles WHERE model_year = 2014'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 318,
    "db_id": "vehicle_rent",
    "question": {
      "id": 318,
      "db_id": "vehicle_rent",
      "question": "Show all types of powertrain and the number of vehicles in each type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all types of powertrain and the number of vehicles in each type.[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain = 'Diesel' GROUP BY TYPE_of_powertrain HAVING count(*) > 100 UNION SELECT name FROM Customers WHERE age BETWEEN 18 AND 65 EXCEPT SELECT name FROM Discount WHERE membership_credit BETWEEN 399 AND 899 EXCEPT SELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*) > 100 EXCEPT SELECT total_hours FROM Renting_history GROUP BY total_hours HAVING avg(total_hours) > 400'\n    ORDER BY id;"
  },
  {
    "id": 319,
    "db_id": "vehicle_rent",
    "question": {
      "id": 319,
      "db_id": "vehicle_rent",
      "question": "How many vehicles have each type of powertrain?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many vehicles have each type of powertrain?[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain = 'Diesel' GROUP BY TYPE_of_powertrain HAVING count(*) > 1000 UNION SELECT id FROM Vehicles WHERE TYPE_of_powertrain  =  'Electric' EXCEPT SELECT id FROM Vehicles WHERE TYPE_of_powertrain  =  'Diesel' ORDER BY combined_fuel_economy_rate DESC LIMIT 3 UNION SELECT id FROM Vehicles WHERE TYPE_of_powertrain  =  'Hybrid' EXCEPT SELECT id FROM Vehicles WHERE TYPE_of_powertrain  =  'Electric' ORDER BY combined_fuel_economy_rate DESC LIMIT 3 UNION SELECT id FROM Vehicles WHERE TYPE_of_powertrain  =  'Gas"
  },
  {
    "id": 320,
    "db_id": "vehicle_rent",
    "question": {
      "id": 320,
      "db_id": "vehicle_rent",
      "question": "What is the type of powertrain with most number of vehicles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the type of powertrain with most number of vehicles.[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain IN (SELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1) UNION SELECT id FROM Vehicles WHERE TYPE_of_powertrain NOT IN (SELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1) ORDER BY id ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 321,
    "db_id": "vehicle_rent",
    "question": {
      "id": 321,
      "db_id": "vehicle_rent",
      "question": "Which type of powertrain is most common?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which type of powertrain is most common?[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Diesel' GROUP BY vehicles_id ORDER BY count(*) DESC LIMIT 1 OFFSET 0 UNION SELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Electric' GROUP BY vehicles_id ORDER BY count(*) DESC LIMIT 1 OFFSET 0 UNION SELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Gas' GROUP BY vehicles_id ORDER BY count(*) DESC LIMIT 1 OFFSET 0 UNION SELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Hybrid' GROUP BY vehicles_id ORDER BY count(*) DESC LIMIT 1 OFFSET 0 UNION SELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Other'"
  },
  {
    "id": 322,
    "db_id": "vehicle_rent",
    "question": {
      "id": 322,
      "db_id": "vehicle_rent",
      "question": "Show minimum, maximum, and average annual fuel cost for all vehicles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show minimum, maximum, and average annual fuel cost for all vehicles.[SQL]\\nSELECT vehicles_id FROM Renting_history WHERE total_hours  >  0 GROUP BY vehicles_id HAVING avg(Cost_per_25_miles)  <  (SELECT avg(Cost_per_25_miles) FROM Vehicles) ORDER BY avg(Cost_per_25_miles) ASC LIMIT 1 UNION SELECT id FROM Vehicles ORDER BY Cost_per_25_miles DESC LIMIT 1'\n        ;"
  },
  {
    "id": 323,
    "db_id": "vehicle_rent",
    "question": {
      "id": 323,
      "db_id": "vehicle_rent",
      "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the minimum, maximum, and average annual fuel costs across all vehicles?[SQL]\\nSELECT id FROM Vehicles;"
  },
  {
    "id": 324,
    "db_id": "vehicle_rent",
    "question": {
      "id": 324,
      "db_id": "vehicle_rent",
      "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 325,
    "db_id": "vehicle_rent",
    "question": {
      "id": 325,
      "db_id": "vehicle_rent",
      "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 326,
    "db_id": "vehicle_rent",
    "question": {
      "id": 326,
      "db_id": "vehicle_rent",
      "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain IN (SELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2) ORDER BY avg(Annual_fuel_cost) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 327,
    "db_id": "vehicle_rent",
    "question": {
      "id": 327,
      "db_id": "vehicle_rent",
      "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE type_of_powertrain = 'Diesel' GROUP BY type_of_powertrain HAVING count(*)  >=  2) UNION (SELECT avg(Cost_per_25_miles) FROM Vehicles WHERE type_of_powertrain  =  'Diesel') AS T1 JOIN (SELECT avg(Cost_per_25_miles) FROM Vehicles WHERE type_of_powertrain  =  'Electric' ) AS T2 ON 1 = 0) UNION (SELECT avg(Cost_per_25_miles) FROM Vehicles WHERE type_of_powertrain  =  'Gas' ) AS T3 JOIN (SELECT avg(Cost_per_25_miles) FROM Vehicles WHERE type_of_powertrain  = "
  },
  {
    "id": 328,
    "db_id": "vehicle_rent",
    "question": {
      "id": 328,
      "db_id": "vehicle_rent",
      "question": "Show the name, age, membership credit for all customers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name, age, membership credit for all customers?[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 329,
    "db_id": "vehicle_rent",
    "question": {
      "id": 329,
      "db_id": "vehicle_rent",
      "question": "What are the names, ages, and membership credits for all customers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, ages, and membership credits for all customers?[SQL]\\nSELECT id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 330,
    "db_id": "vehicle_rent",
    "question": {
      "id": 330,
      "db_id": "vehicle_rent",
      "question": "Show the name and age of the customer with maximum membership credit."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name and age of the customer with maximum membership credit.[SQL]\\nSELECT total_hours FROM Renting_history WHERE discount_id  =  1 UNION SELECT t1.name ,  t1.age FROM Customers AS t1 JOIN Discount AS t2 ON t1.id  =  t2.id ORDER BY membership_credit DESC LIMIT 1'\n        ;"
  },
  {
    "id": 331,
    "db_id": "vehicle_rent",
    "question": {
      "id": 331,
      "db_id": "vehicle_rent",
      "question": "What is the name and age of the customer with the most membership credit?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and age of the customer with the most membership credit?[SQL]\\nSELECT id FROM Customers WHERE membership_credit  =  (SELECT max(membership_credit) FROM Customers) ORDER BY id LIMIT 1; SELECT name ,  age FROM Customers WHERE id  =  (SELECT id FROM Customers WHERE membership_credit  =  (SELECT max(membership_credit) FROM Customers)) LIMIT 1;'\n        ;"
  },
  {
    "id": 332,
    "db_id": "vehicle_rent",
    "question": {
      "id": 332,
      "db_id": "vehicle_rent",
      "question": "What is the average age for customers with a membership credit above the average?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average age for customers with a membership credit above the average?[SQL]\\nSELECT id FROM Customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM Customers) GROUP BY id HAVING avg(age) != 'null' ORDER BY avg(age) ASC NULLS LAST'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 333,
    "db_id": "vehicle_rent",
    "question": {
      "id": 333,
      "db_id": "vehicle_rent",
      "question": "Return the average age for customers who have membership above the average across all customers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average age for customers who have membership above the average across all customers.[SQL]\\nSELECT id FROM Customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM Customers) GROUP BY id HAVING count(*)  >=  10 / (SELECT count(*) FROM Customers) ORDER BY avg_age ASC LIMIT 3'\n        ;"
  },
  {
    "id": 334,
    "db_id": "vehicle_rent",
    "question": {
      "id": 334,
      "db_id": "vehicle_rent",
      "question": "Show all information for all discounts."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all information for all discounts.[SQL]\\nSELECT id FROM Discount;"
  },
  {
    "id": 335,
    "db_id": "vehicle_rent",
    "question": {
      "id": 335,
      "db_id": "vehicle_rent",
      "question": "Return all information about discounts."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return all information about discounts.[SQL]\\nSELECT id FROM Discount;"
  },
  {
    "id": 336,
    "db_id": "vehicle_rent",
    "question": {
      "id": 336,
      "db_id": "vehicle_rent",
      "question": "Show the name and total hours of renting for each vehicle."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name and total hours of renting for each vehicle.[SQL]\\nSELECT vehicles_id FROM Renting_history WHERE total_hours  >  0 GROUP BY vehicles_id ORDER BY sum(total_hours) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 337,
    "db_id": "vehicle_rent",
    "question": {
      "id": 337,
      "db_id": "vehicle_rent",
      "question": "What are the names and total rental hours for each vehicle?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and total rental hours for each vehicle?[SQL]\\nSELECT vehicles_id FROM Renting_history WHERE vehicles_id = 1 UNION SELECT T1.vehicles_id ,  sum(T1.total_hours) FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id ORDER BY 2 DESC'\n        ;"
  },
  {
    "id": 338,
    "db_id": "vehicle_rent",
    "question": {
      "id": 338,
      "db_id": "vehicle_rent",
      "question": "Show the name of vehicles with no renting history."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name of vehicles with no renting history.[SQL]\\nSELECT Discount.id FROM Discount WHERE id NOT IN(SELECT discount_id FROM Renting_history) UNION SELECT id FROM Vehicles WHERE id NOT IN(SELECT vehicles_id FROM Renting_history) ORDER BY id ASC'\n       \n   \n   \n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 339,
    "db_id": "vehicle_rent",
    "question": {
      "id": 339,
      "db_id": "vehicle_rent",
      "question": "What are the names of vehicles that have never been rented?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of vehicles that have never been rented?[SQL]\\nSELECT id FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history) AND Cost_per_25_miles  <  60'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 340,
    "db_id": "vehicle_rent",
    "question": {
      "id": 340,
      "db_id": "vehicle_rent",
      "question": "Show the name of customer with at least two renting history records."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name of customer with at least two renting history records.[SQL]\\nSELECT Discount.id FROM Renting_history WHERE customer_id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING count(*)  >=  2) ORDER BY Discount.id ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 341,
    "db_id": "vehicle_rent",
    "question": {
      "id": 341,
      "db_id": "vehicle_rent",
      "question": "What are the names of customers who have two or more records of rental history?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of customers who have two or more records of rental history?[SQL]\\nSELECT Discount.id FROM Renting_history WHERE total_hours  >  1 GROUP BY Discount.id HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 342,
    "db_id": "vehicle_rent",
    "question": {
      "id": 342,
      "db_id": "vehicle_rent",
      "question": "Show the name and model year of the vehicle with most number of renting history records."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name and model year of the vehicle with most number of renting history records.[SQL]\\nSELECT total_hours FROM Renting_history WHERE vehicles_id  =  (SELECT id FROM vehicles ORDER BY count(*) DESC LIMIT 1) UNION SELECT TYPE_of_powertrain ,  Model_year FROM vehicles ORDER BY combined_fuel_economy_rate DESC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 343,
    "db_id": "vehicle_rent",
    "question": {
      "id": 343,
      "db_id": "vehicle_rent",
      "question": "What is the name and model year of the vehicle which has been rented the most times?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and model year of the vehicle which has been rented the most times?[SQL]\\nSELECT total_hours FROM Renting_history WHERE id  =  (SELECT id FROM Renting_history GROUP BY vehicles_id ORDER BY count(*) DESC LIMIT 1) AND vehicles_id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY count(*) DESC LIMIT 1) JOIN Vehicles ON Renting_history.vehicles_id  =  Vehicles.id WHERE discount_id  =  (SELECT id FROM Discount GROUP BY name ORDER BY count(*) DESC LIMIT 1) AND customer_id  =  (SELECT id FROM Customers GROUP BY name ORDER BY count(*) DESC LIMIT 1)', 'SELECT TYPE_OF_POWERTRAIN FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY count(*) DESC LIMIT 1)')]\n\n    LIMIT = "
  },
  {
    "id": 344,
    "db_id": "vehicle_rent",
    "question": {
      "id": 344,
      "db_id": "vehicle_rent",
      "question": "Show the vehicle name with a descending order of total hours of renting."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the vehicle name with a descending order of total hours of renting.[SQL]\\nSELECT total_hours FROM Renting_history WHERE vehicles_id  =  1 ORDER BY total_hours DESC'\n        ;"
  },
  {
    "id": 345,
    "db_id": "vehicle_rent",
    "question": {
      "id": 345,
      "db_id": "vehicle_rent",
      "question": "What are the names of vehicles, sorted descending by total hours of renting?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of vehicles, sorted descending by total hours of renting?[SQL]\\nSELECT total_hours FROM Renting_history WHERE vehicles_id  =  1 ORDER BY total_hours DESC'\n        ;"
  },
  {
    "id": 346,
    "db_id": "vehicle_rent",
    "question": {
      "id": 346,
      "db_id": "vehicle_rent",
      "question": "What is the discount name with most number of renting history records?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the discount name with most number of renting history records?[SQL]\\nSELECT Discount.id FROM Renting_history WHERE Renting_history.discount_id = Discount.id GROUP BY Discount.id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 347,
    "db_id": "vehicle_rent",
    "question": {
      "id": 347,
      "db_id": "vehicle_rent",
      "question": "Return the name of the discount that corresponds to the most rental history records."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the name of the discount that corresponds to the most rental history records.[SQL]\\nSELECT total_hours FROM Renting_history WHERE discount_id  =  (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY count(*) DESC LIMIT 1) UNION SELECT total_hours FROM Renting_history WHERE discount_id  =  (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY count(*) DESC LIMIT 1 OFFSET 1) <MID>.com/problems/most-rented-discount/description/\n\nGROUP BY Discount.idORDER BY total_hoursLIMIT 1' UNION SELECT total_hours FROM Renting_history WHERE discount_id  =  (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY count(*) DESC LIMIT 1 OFFSET 1) ORDER BY total_hours DESC LIMIT "
  },
  {
    "id": 348,
    "db_id": "vehicle_rent",
    "question": {
      "id": 348,
      "db_id": "vehicle_rent",
      "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and powertrain type of the cars that rented for more than 30 total hours.[SQL]\\nSELECT total_hours FROM Renting_history WHERE vehicles_id IN (SELECT id FROM Vehicles WHERE tottal_hours  >  30 AND TYPE_of_powertrain  =  'car')'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 349,
    "db_id": "vehicle_rent",
    "question": {
      "id": 349,
      "db_id": "vehicle_rent",
      "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and powertrain types of cars that have more than 30 total rental hours?[SQL]\\nSELECT Discount.id FROM Renting_history WHERE total_hours  >  30 INTERSECT SELECT T1.name ,  T1.type_of_powertrain FROM Vehicles AS T1 JOIN Discount AS T2 ON T1.id  =  T2.id WHERE T2.id IN (SELECT id FROM Renting_history GROUP BY id HAVING sum(total_hours)  >  30) ORDER BY T1.name ASC'\n        ;"
  },
  {
    "id": 350,
    "db_id": "vehicle_rent",
    "question": {
      "id": 350,
      "db_id": "vehicle_rent",
      "question": "Find the average city and highway fuel rates for cars with different powertrain types."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average city and highway fuel rates for cars with different powertrain types.[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Car' GROUP BY TYPE_of_powertrain ORDER BY avg(City_fuel_economy_rate) DESC LIMIT 1 UNION SELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Car' GROUP BY TYPE_of_powertrain ORDER BY avg(Highway_fuel_economy_rate) DESC LIMIT 1'\n    ;"
  },
  {
    "id": 351,
    "db_id": "vehicle_rent",
    "question": {
      "id": 351,
      "db_id": "vehicle_rent",
      "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[SQL]\\nSELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Diesel' GROUP BY TYPE_of_powertrain HAVING avg(City_fuel_economy_rate) > 30 GROUP BY TYPE_of_powertrain UNION SELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Gas' GROUP BY TYPE_of_powertrain HAVING avg(Highway_fuel_economy_rate) > 50 GROUP BY TYPE_of_powertrain UNION SELECT vehicles_id FROM Vehicles WHERE TYPE_of_powertrain  =  'Electric' GROUP BY TYPE_of_powertrain HAVING avg(City_fuel_economy_rate) > 40 GROUP BY TYPE_of_"
  },
  {
    "id": 352,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 352,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the average amount of a student loan?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average amount of a student loan?[SQL]\\nSELECT Ref_Address_Types.other_details FROM Ref_Address_Types WHERE address_type_code = 'Residential' UNION SELECT other_details FROM Ref_Address_Types WHERE address_type_code = 'Non-Residential' UNION SELECT other_details FROM Ref_Address_Types WHERE address_type_code = 'Other' UNION SELECT other_details FROM Ref_Address_Types WHERE address_type_code = 'Work' UNION SELECT other_details FROM Ref_Address_Types WHERE address_type_code = 'Education' UNION SELECT other_details FROM Ref_Address_Types WHERE address_type_code = 'Temporary' UNION SELECT other_details FROM Ref_Address_Types WHERE address_type_code = 'Military' UNION SELECT other_details FROM Ref_Address_Types WHERE address_type_code = 'Assisted Living Facility' UNION SELECT other_details FROM Ref_Address_Types"
  },
  {
    "id": 353,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 353,
      "db_id": "cre_Students_Information_Systems",
      "question": "Compute the average amount of student loans."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Compute the average amount of student loans.[SQL]\\nSELECT Ref_Address_Types.other_details FROM Ref_Address_Types WHERE address_type_code = 'Home' UNION SELECT other_details FROM Students_Addresses WHERE address_type_code  =  'Home' EXCEPT SELECT other_details FROM Ref_Address_Types WHERE address_type_code  =  'Home' UNION SELECT other_details FROM Students_Addresses WHERE address_type_code  =  'Home' INTERSECT SELECT other_details FROM Ref_Address_Types WHERE address_type_code  =  'Home' UNION SELECT other_details FROM Students_Addresses WHERE address_type_code  =  'Home' EXCEPT SELECT other_details FROM Ref_Address_Types WHERE address_type_code  =  'Home' UNION SELECT other_details FROM Students_Addresses WHERE address_type_code  =  'Home' INTERSECT SELECT"
  },
  {
    "id": 354,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 354,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[SQL]\\nSELECT Teachers.student_id FROM Classes WHERE CLASS_ID IN (SELECT count(*) ,  student_id FROM CLASSES GROUP BY student_id HAVING count(*)  >=  2) UNION SELECT STUDENT_ID FROM Detention WHERE DETENTION_ID IN (SELECT count(*) ,  student_id FROM Detention GROUP BY student_id HAVING count(*)  <  2)', 'SELECT bio_data ,  student_id FROM Students WHERE student_id IN (SELECT Teachers.student_id FROM CLASSES AS Teachers GROUP BY Teachers.student_id HAVING count(*)  >=  2) UNION SELECT bio_data ,  student_id FROM Students WHERE student_id IN (SELECT STUDENT_ID FROM Detention GROUP BY STUDENT_ID HAVING count(*)  <  2)')]\n\n"
  },
  {
    "id": 355,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 355,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[SQL]\\nSELECT Teachers.student_id FROM Classes WHERE class_id IN (SELECT count(*) ,  student_id FROM Clases GROUP BY student_id HAVING count(*)  >=  2) UNION SELECT Students.student_id FROM Detention WHERE detention_id IN (SELECT count(*) ,  student_id FROM Detention GROUP BY student_id HAVING count(*)  <  2)', ['Teachers.student_id'], 'SELECT Teachers.student_id FROM Classes AS T1 JOIN Clases AS T2 ON T1.class_id  =  T2.class_id GROUP BY T1.student_id HAVING count(T1.class_id) - count(T2.class_id)  >=  2 UNION SELECT Students.student_id FROM Detention AS T1 JOIN Detention AS T2 ON T1.detention_id"
  },
  {
    "id": 356,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 356,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[SQL]\\nSELECT Teachers.student_id FROM Classes WHERE class_details LIKE '%data%' EXCEPT SELECT Teachers.student_id FROM Classes WHERE class_details LIKE 'net%' JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 357,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 357,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[SQL]\\nSELECT Teachers.student_id FROM Teachers WHERE student_id IN ( SELECT class_id FROM CLASSES WHERE class_details LIKE '%data%' EXCEPT SELECT class_id FROM CLASSES WHERE class_details LIKE 'net%') <MID>_id`, `date_from`, `date_to`, `address_type_code` FROM Students_Addresses WHERE student_id = $student_id AND address_type_code  =  'Home' ORDER BY date_from DESC LIMIT 1;',\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 358,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 358,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data of the students who never had a detention or student loan ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the biographical data of the students who never had a detention or student loan .[SQL]\\nSELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans) UNION SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans) <MID>_id`, `date_of_transcript`, `transcript_details` FROM TRANSCRIPTS;'\n\n    LIMIT 500'\n\n    ;"
  },
  {
    "id": 359,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 359,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students never had a detention or student loan ? Find their biographical data ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students never had a detention or student loan ? Find their biographical data .[SQL]\\nSELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans) ORDER BY student_id ASC'\n        ;"
  },
  {
    "id": 360,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 360,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the loan amounts and loan dates of the students who have at least 2 achievements?[SQL]\\nSELECT Teachers.student_id FROM Achievements WHERE Achievements.achievement_count  >=  2 GROUP BY Teachers.student_id ORDER BY sum(Teachers.loan_amount) DESC LIMIT 1 UNION SELECT student_id FROM Students_Addresses WHERE address_type_code  =  'Visa' GROUP BY student_id HAVING count(*)  >=  2 UNION SELECT student_id FROM Detention GROUP BY student_id HAVING count(*)  >=  2 UNION SELECT student_id FROM Student_Loans GROUP BY student_id HAVING count(*)  >=  2 UNION SELECT student_id FROM Classes GROUP BY student_id HAVING count(*)  >=  2 UNION SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING count(*)  >=  2 UNION SELECT student_id FROM Transcripts GROUP BY student_id H"
  },
  {
    "id": 361,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 361,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the amount and date of loan for the students who have two or more achievements."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the amount and date of loan for the students who have two or more achievements.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 362,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 362,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the detail and id of the teacher who teaches the most courses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the detail and id of the teacher who teaches the most courses.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 363,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 363,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the detail and id of the teacher who teaches the largest number of courses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the detail and id of the teacher who teaches the largest number of courses?[SQL]\\nSELECT Teachers.other_details  FROM Classes \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 364,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 364,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the distinct descriptions of all the detentions which have ever happened?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct descriptions of all the detentions which have ever happened?[SQL]\\nSELECT Detention.student_id FROM Detention WHERE Detention.detention_summary != '' GROUP BY student_id ORDER BY count(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 365,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 365,
      "db_id": "cre_Students_Information_Systems",
      "question": "Return the distinct descriptions of all the detentions that have happened."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the distinct descriptions of all the detentions that have happened.[SQL]\\nSELECT Detention.student_id FROM Detention WHERE datetime_detention_start != '0000-00-00 00:00:00' GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 366,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 366,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the personal details and the address type descriptions of all the students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the personal details and the address type descriptions of all the students.[SQL]\\nSELECT Transcripts.date_achievement FROM Students_Addresses WHERE student_id  =  256 AND address_type_code  =  'Residential' <MID>_id = T1.student_id JOIN Addresses AS T2 ON T2.address_id = T1.address_id WHERE T1.student_id = $student_id AND T1.address_type_code = 'Residential' ORDER BY T2.address_details LIMIT 1'\n    ORDER BY Transcripts.date_achievement;"
  },
  {
    "id": 367,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 367,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the personal details and the address type descriptions of each student?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the personal details and the address type descriptions of each student?[SQL]\\nSELECT Transcripts.date_achievement FROM Achievements WHERE date_achievement  >  '2004-05-17 00:00:00' UNION SELECT Transcript.date_achievement FROM Achievements AS Transcript WHERE date_achievement  >  '2004-05-17 00:00:00' UNION SELECT Transcript.date_achievement FROM Achievements AS Transcript WHERE date_achievement  >  '2004-05-17 00:00:00' UNION SELECT Transcript.date_achievement FROM Achievements AS Transcript WHERE date_achievement  >  '2004-05-17 00:00:00' UNION SELECT Transcript.date_"
  },
  {
    "id": 368,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 368,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the the address details and the biographical information of the students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the the address details and the biographical information of the students.[SQL]\\nSELECT Transcripts.date_achievement, STUDENTS.bio_data FROM STUDENTS JOIN TRANSCRIPTS ON STUDENTS.student_id  =  TRANSCRIPTS.student_id WHERE TRANSCRIPTS.date_of_transcript  >  '2016-01-01' AND STUDENTS.student_id  <  10000 UNION SELECT Transcript.date_of_transcript ,  STUDENTS.bio_data FROM STUDENTS JOIN TRANSCRIPTS ON STUDENTS.student_id  =  TRANSCRIPTS.student_id WHERE TRANSCRIPTS.date_of_transcript  >  '2016-01-01' AND STUDENTS.student_id  BETWEEN  10000"
  },
  {
    "id": 369,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 369,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the address details and biographical information of each student?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the address details and biographical information of each student?[SQL]\\nSELECT Transcripts.date_achievement, STUDENTS.bio_data FROM STUDENTS JOIN TRANSCRIPTS ON STUDENTS.student_id  =  TRANSCRIPTS.student_id WHERE TRANSCRIPTS.date_of_transcript  >  '2016-01-01' AND STUDENTS.student_id  =  1002 UNION SELECT Transcript.date_a, STUDENTS.bio_data FROM STUDENTS JOIN TRANSCRIPTS ON STUDENTS.student_id  =  TRANSCRIPTS.student_id WHERE TRANSCRIPTS.date_of_transcript  >  '2016-01-01' AND STUDENTS.student_id  =  1003 UNION SELECT Transcript.date_a"
  },
  {
    "id": 370,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 370,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data and the date of the transcript of all the students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the biographical data and the date of the transcript of all the students.[SQL]\\nSELECT student_id, bio_data ,  date_of_transcript FROM TRANSCRIPTS'\n        , 'SELECT * FROM STUDENTS'\n    , 'SELECT * FROM TRANSCRIPTS'\n    , 'SELECT * FROM BEHAVIOUR_MONITORING'\n    , 'SELECT * FROM ADDRESSES'\n    , 'SELECT * FROM REF_EVENT_TYPES'\n    , 'SELECT * FROM REF_ACHIEVEMENT_TYPE'\n    , 'SELECT * FROM REF_ADDRESS_TYPES'\n    , 'SELECT * FROM REF_DETENTION_TYPE'\n    , 'SELECT * FROM STUDENT_EVENTS'\n    , 'SELECT * FROM TEACHERS'\n    , 'SELECT * FROM STUDENT_LOANS'\n    , 'SELECT * FROM CLASSES"
  },
  {
    "id": 371,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 371,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the biographical data and the date of transcript issuance of each student?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the biographical data and the date of transcript issuance of each student?[SQL]\\nSELECT Transcripts.date_achievement FROM Students_Addresses WHERE address_type_code  =  'Home' AND student_id IN (SELECT student_id FROM TRANSCRIPTS) UNION SELECT T1.bio_data ,  T2.date_of_transcript FROM STUDENTS AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id WHERE T1.student_id IN (SELECT student_id FROM TRANSCRIPTS) ORDER BY T1.student_id ASC'\n    ORDER BY Transcripts.date_achievement;"
  },
  {
    "id": 372,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 372,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many students got the most common result in the behavioral monitoring details? Also list the result details.[SQL]\\nSELECT Transcripts.student_id FROM Transcripts WHERE student_id IN ( SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )'\n        ;"
  },
  {
    "id": 373,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 373,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[SQL]\\nSELECT other_details FROM Behaviour_Monitoring WHERE behaviour_monitoring_details  =  ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )'\n        ;"
  },
  {
    "id": 374,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 374,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[SQL]\\nSELECT Transcripts.student_id FROM Transcripts WHERE TRANSCRIPTS.result  =  ( SELECT RESULT FROM TRANSCRIPTS GROUP BY RESULT ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT Behaviour_Monitoring.student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING count(*)  =  3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 375,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 375,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[SQL]\\nSELECT Teachers.student_id FROM Students_Addresses WHERE address_type_code  =  'Class' INTERSECT SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 INTERSECT SELECT student_id FROM Achievements GROUP BY achievement_type_code ORDER BY count(*) DESC LIMIT 1' UNION SELECT bio_data ,  student_details FROM STUDENTS WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY achievement_type_code ORDER BY count(*) DESC LIMIT 1 INTERSECT SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1) ORDER BY count(*) DESC LIMIT 1' <MID>_id` INTEGER NOT NULL,\n \t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 376,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 376,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[SQL]\\nSELECT Teachers.student_id FROM Teachers WHERE student_id IN (SELECT Students.student_id FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id ORDER BY count(*) DESC LIMIT 1))'\n        ;"
  },
  {
    "id": 377,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 377,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the biographical information of the students who got the most common result for their behaviour monitoring details ?[SQL]\\nSELECT Transcripts.student_id FROM Ref_Event_Types WHERE event_type_code  =  'Class' JOIN Student_Events ON Student_Events.event_type_code  =  Ref_Event_Types.event_type_code JOIN Students ON Students.student_id  =  Student_Events.student_id GROUP BY Students.student_id ORDER BY count(*) DESC LIMIT 1' <MID>_details` VARCHAR(255) NOT NULL,\n    ORDER BY date_achievement;"
  },
  {
    "id": 378,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 378,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have gone through any event? List the students' biographical data and event date."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students have gone through any event? List the students' biographical data and event date.[SQL]\\nSELECT Teachers.student_id FROM Student_Events WHERE event_date  >  '2016-01-01' UNION SELECT Students.student_id FROM Students JOIN Student_Events ON Students.student_id  =  Student_Events.student_id WHERE Student_Events.event_date  >  '2016-01-01' UNION SELECT Students.student_id FROM Students JOIN Student_Loans ON Students.student_id  =  Student_Loans.student_id WHERE Student_Loans.date_of_loan  >  '2016-01-01' UNION SELECT Students.student_id FROM Students JOIN Classes ON Students.student_id  =  Classes.student_id WHERE Classes.class_details LIKE '%test%' EVENT_DATE  >  '201"
  },
  {
    "id": 379,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 379,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and event date for students who participated in any events."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the biographical data and event date for students who participated in any events.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 380,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 380,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students have joined in the most common type of event? List the number, the event type and description."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many students have joined in the most common type of event? List the number, the event type and description.[SQL]\\nSELECT Transcripts.date_achievement  FROM Achievements WHERE date_achievement  =  ( SELECT max(date_achievement) FROM Achievements ) AND achievement_type_code  =  ( SELECT achievement_type_code FROM Achievements GROUP BY achievement_type_code ORDER BY count(*) DESC LIMIT 1 )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 381,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 381,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the type of event the most students joined? Give me the number of students, and the event type code and description.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 382,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 382,
      "db_id": "cre_Students_Information_Systems",
      "question": "How are all the achievements described? List the achievement detail and the type description."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How are all the achievements described? List the achievement detail and the type description.[SQL]\\nSELECT achievement_details \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 383,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 383,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the achievement detail and the type description of each achievements?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the achievement detail and the type description of each achievements?[SQL]\\nSELECT Transcripts.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 384,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 384,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many teachers have taught a student who has not won any achievements?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many teachers have taught a student who has not won any achievements?[SQL]\\nSELECT Teachers.student_id FROM Teachers WHERE Teachers.teacher_id NOT IN (SELECT Classes.teacher_id FROM Classes WHERE Classes.student_id NOT IN (SELECT Achievements.student_id FROM Achievements))'\n        ;"
  },
  {
    "id": 385,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 385,
      "db_id": "cre_Students_Information_Systems",
      "question": "Count the number of teachers who have taught students who have never won an achievement."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of teachers who have taught students who have never won an achievement.[SQL]\\nSELECT Teachers.student_id FROM Teachers WHERE Teachers.student_id IN ( SELECT Students.student_id FROM Students EXCEPT SELECT Achievements.student_id FROM Achievements ) GROUP BY Teachers.student_id HAVING count(*)  =  ( SELECT count(*) FROM Students EXCEPT SELECT Achievements.student_id FROM Achievements )'\n        ;"
  },
  {
    "id": 386,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 386,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the date of the transcripts and the transcript details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the date of the transcripts and the transcript details.[SQL]\\nSELECT date_achievement FROM Achievements WHERE achievement_type_code  =  'Transcript' UNION SELECT date_of_transcript ,  transcript_details FROM Transcripts <MID>_details` VARCHAR(255) NOT NULL,\n    ORDER BY student_id;"
  },
  {
    "id": 387,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 387,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the date and detail of each transcript?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the date and detail of each transcript?[SQL]\\nSELECT date_achievement FROM Achievements WHERE student_id  =  1 UNION SELECT date_of_transcript FROM Transcripts WHERE student_id  =  1 UNION SELECT datetime_detention_start FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_end FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_start FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_end FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_start FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_end FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_start FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_end FROM Detention WHERE student_id  =  1 UNION SELECT datetime_detention_start FROM"
  },
  {
    "id": 388,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 388,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the achievement type code, achievement details and the date of the achievements."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the achievement type code, achievement details and the date of the achievements.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 389,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 389,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the type code, details, and date of each achievement?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the type code, details, and date of each achievement?[SQL]\\nSELECT Transcripts.date_achievement \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 390,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 390,
      "db_id": "cre_Students_Information_Systems",
      "question": "Show the detention start time and end time of the detentions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the detention start time and end time of the detentions.[SQL]\\nSELECT date_achievement FROM Achievements WHERE achievement_type_code  =  'Detention Start Time' UNION SELECT date_achievement FROM Achievements WHERE achievement_type_code  =  'Detention End Time' ORDER BY date_achievement ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 391,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 391,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the starting time and ending time of each detention record?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the starting time and ending time of each detention record?[SQL]\\nSELECT student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 392,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 392,
      "db_id": "cre_Students_Information_Systems",
      "question": "Show the biographical information of the students whose details include the substring 'Suite'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the biographical information of the students whose details include the substring 'Suite'.[SQL]\\nSELECT student_id FROM Students WHERE bio_data LIKE '%Suite%' <MID>_id FROM Students WHERE bio_data LIKE '%Suite%' UNION SELECT student_id FROM Students_Addresses WHERE address_type_code  =  'Residential' AND date_from  >=  2004 GROUP BY student_id HAVING count(*)  >  2) AS T1 JOIN Students ON T1.student_id  =  Students.student_id WHERE Students.bio_data NOT LIKE '%Suite%'',\n            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 393,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 393,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students have 'Suite' as a substring in their details? Give me their biographical information.[SQL]\\nSELECT student_id FROM Students WHERE bio_data LIKE '%Suite%' <MID>_id FROM Students WHERE bio_data LIKE '%Suite%' UNION SELECT student_id FROM Students_Addresses WHERE address_type_code  =  'Residential' AND date_from  >=  2004 GROUP BY student_id HAVING count(*)  >  2) AS T1 JOIN Students ON T1.student_id  =  Students.student_id WHERE Students.bio_data LIKE '%Suite%' OR Students.student_details LIKE '%Suite%' GROUP BY Students.student_id HAVING count(*)  >  2) AS T1 JOIN Students ON T1.student_id  =  Students.student_id WHERE Students.bio_data LIKE '%Suite%' OR Students.student_details LIKE '%Suite%' GROUP BY Students.student_id"
  },
  {
    "id": 394,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 394,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the details for all the pairs of teachers and students who are in the same class."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the details for all the pairs of teachers and students who are in the same class.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 395,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 395,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 396,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 396,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[SQL]\\nSELECT Teachers.student_id  FROM Classes  WHERE CLASS_DETAILS  =  'Math' INTERSECT SELECT student_id FROM CLASSES GROUP BY student_id ORDER BY count(*) DESC LIMIT 1) SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1) SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1) SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1) SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1) SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1) SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1) SELECT teacher_id FROM"
  },
  {
    "id": 397,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 397,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 398,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 398,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses do students take at most? Also find the id of the student who takes the most courses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many courses do students take at most? Also find the id of the student who takes the most courses.[SQL]\\nSELECT Teachers.student_id FROM Classes WHERE date_from  =  (SELECT max(date_from) FROM Classees) JOIN Teachers ON Classees.teacher_id  =  Teachers.teacher_id GROUP BY Teachers.student_id ORDER BY count(*) DESC LIMIT 1 UNION SELECT student_id FROM CLASSES GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 399,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 399,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[SQL]\\nSELECT Teachers.student_id \tFROM Classes WHERE teacher_id IN ( SELECT teacher_id FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT student_id FROM CLASSES GROUP BY student_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 400,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 400,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students take 2 courses? List student id and details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students take 2 courses? List student id and details.[SQL]\\nSELECT Teachers.student_id FROM Classes WHERE class_id IN (SELECT class_id FROM CLASSES GROUP BY class_id HAVING count(*)  =  2) JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id ORDER BY Teachers.student_id ASC'\n        ;"
  },
  {
    "id": 401,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 401,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the ids and details of the students who take 2 courses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and details of the students who take 2 courses?[SQL]\\nSELECT Teachers.student_id FROM Classes WHERE class_id IN (SELECT class_id FROM CLASSES GROUP BY class_id HAVING count(*)  =  2) JOIN Teachers ON CLASSes.teacher_id = Teachers.teacher_id WHERE Teachers.student_id NOT IN (SELECT Teachers.student_id FROM CLASSes JOIN Teachers ON CLASSes.teacher_id = Teachers.teacher_id GROUP BY Teachers.student_id HAVING count(*)  >  2) UNION SELECT Teachers.student_id FROM CLASSes JOIN Teachers ON CLASSes.teacher_id = Teachers.teacher_id GROUP BY Teachers.student_id HAVING count(*)  =  2'\n        ;"
  },
  {
    "id": 402,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 402,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the least common detention type? Show the type code and the description."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the least common detention type? Show the type code and the description.[SQL]\\nSELECT Teachers.date_achievement FROM Achievements WHERE achievement_type_code  =  'Excellent' INTERSECT SELECT date_achievement FROM Achievements WHERE achievement_type_code  =  'Very Good' <MID>Teachers (teacher_id) ON DELETE CASCADE ON UPDATE CASCADE, class_details VARCHAR(255) NOT NULL, PRIMARY KEY (class_id) ) ENGINE = InnoDB; INSERT INTO CLASSES VALUES (); CREATE TABLE Students_Addresses ( student_address_id INTEGER NOT NULL AUTO_INCREMENT , student_id INTEGER NOT NULL , address_id INTEGER NOT NULL , address_type_code CHAR(10) NOT NULL , date_from DATETIME(3) , date_to DATETIME(3) , PRIMARY KEY ("
  },
  {
    "id": 403,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 403,
      "db_id": "cre_Students_Information_Systems",
      "question": "Give me the type code and description of the least common detention type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the type code and description of the least common detention type.[SQL]\\nSELECT date_achievement FROM Achievements WHERE student_id  =  1 UNION SELECT detention_type_code ,  detention_type_description FROM Detention GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1' |]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 404,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 404,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students have a student loan more than the average amount? List the students' biographical data and the details.[SQL]\\nSELECT Teachers.student_id FROM Student_Loans WHERE amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans ) UNION SELECT student_id FROM Students WHERE student_id NOT IN ( SELECT teacher_id FROM Teachers ) ORDER BY student_id ASC'\n        ;"
  },
  {
    "id": 405,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 405,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and details for students whose student loan is above the average amount."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the biographical data and details for students whose student loan is above the average amount.[SQL]\\nSELECT Transcripts.student_id FROM Student_Loans WHERE amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans ) UNION SELECT Transcriptes.student_id FROM TRANSCRIPTES WHERE date_of_transcript  >  ( SELECT max(date_of_transcript) FROM TRANSCRIPTES )'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 406,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 406,
      "db_id": "cre_Students_Information_Systems",
      "question": "When was the earliest date of loan?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, When was the earliest date of loan?[SQL]\\nSELECT date_achievement FROM Achievements WHERE achievement_type_code  =  'Date of Loan' ORDER BY date_achievement LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 407,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 407,
      "db_id": "cre_Students_Information_Systems",
      "question": "Return the earliest date of loan in the record."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the earliest date of loan in the record.[SQL]\\nSELECT date_achievement FROM Achievements WHERE achievement_type_code  =  'Loan' ORDER BY date_achievement LIMIT 1'\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 408,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 408,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which student has the loan with the minimum value? List the student's biographical information."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which student has the loan with the minimum value? List the student's biographical information.[SQL]\\nSELECT Teachers.student_id FROM Student_Loans WHERE amount_of_loan  =  (SELECT min(amount_of_loan) FROM Student_Loans) JOIN Students ON Student_Loans.student_id  =  Students.student_id JOIN Teachers ON Classes.teacher_id  =  Teachers.teacher_id WHERE Classes.class_id IN (SELECT Classes.class_id FROM Classes JOIN Students ON Classes.student_id  =  Students.student_id WHERE Students.student_id  =  Teachers.student_id) GROUP BY TEachers.student_id HAVING count(*)  >  1'\n        ;"
  },
  {
    "id": 409,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 409,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical information of the student with the smallest student loan."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the biographical information of the student with the smallest student loan.[SQL]\\nSELECT Transcripts.student_id FROM Transcripts WHERE date_of_transcript  =  (SELECT min(date_of_loan) FROM Student_Loans) UNION SELECT student_id FROM Students WHERE bio_data  =  (SELECT min(amount_of_loan) FROM Student_Loans) UNION SELECT student_id FROM Ref_Event_Types WHERE event_type_description  =  (SELECT min(other_details) FROM Student_Events) UNION SELECT student_id FROM Teachers WHERE teacher_details  =  (SELECT min(class_details) FROM Classes) UNION SELECT student_id FROM Addresses WHERE address_details  =  (SELECT min(date_from) FROM Students_Addresses) UNION SELECT student_id FROM Ref_Address_Types WHERE address_type_description  =  (SELECT min(address_type_code) FROM Students_Addresses)"
  },
  {
    "id": 410,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 410,
      "db_id": "cre_Students_Information_Systems",
      "question": "When was the transcript issued for the student with loan of maximum value?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, When was the transcript issued for the student with loan of maximum value?[SQL]\\nSELECT Transcripts.date_achievement FROM Students_Addresses WHERE address_id  =  ( SELECT address_id FROM Addresses WHERE address_details  =  'Home' ) AND student_id IN ( SELECT student_id FROM Students_Addresses WHERE address_id  =  ( SELECT address_id FROM Addresses WHERE address_details  =  'School' ) ) ORDER BY date_from DESC LIMIT 1'\n        ;"
  },
  {
    "id": 411,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 411,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the transcript issuance date for the student with the largest amount of loan?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the transcript issuance date for the student with the largest amount of loan?[SQL]\\nSELECT Transcripts.date_achievement FROM Students_Addresses WHERE address_type_code  =  'Residential' AND student_id IN (SELECT student_id FROM Students_Addresses WHERE address_type_code  =  'School' ) UNION SELECT T1.date_of_transcript FROM TRANSCRIPTS AS T1 JOIN STUDENTS AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1' ]]></task> SELECT Transcript_Issuance_Date FROM TRANSCRIPTS WHERE student_id  =  (SELECT student_id FROM STUDENTS ORDER BY amount_of_loan DESC LIMIT 1) UNION SELECT T1.date_of_transcript FROM TRANSCRIPTS AS T1 JOIN STUDENTS AS"
  },
  {
    "id": 412,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 412,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[SQL]\\nSELECT Teachers.student_id FROM Teachers WHERE Teachers.student_id IN ( SELECT TClasses.student_id FROM CLASSES AS TClasses JOIN STUDENTS AS TStudents ON TClasses.student_id  =  TStudents.student_id ORDER BY TStudents.date_of_admission ASC LIMIT 1 ) UNION SELECT Teachers.teacher_details FROM Teachers WHERE Teachers.student_id IN ( SELECT TClasses.student_id FROM CLASSES AS TClasses JOIN STUDENTS AS TStudents ON TClasses.student_id  =  TStudents.student_id ORDER BY TStudents.date_of_admission ASC LIMIT 1 )'\n        ;"
  },
  {
    "id": 413,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 413,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the details of the teachers who have taught the student with the earliest transcript issuance.[SQL]\\nSELECT Teachers.student_id FROM Classes WHERE student_id IN ( SELECT T1.student_id FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.date_of_transcript LIMIT 1 ) INTERSECT SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 414,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 414,
      "db_id": "cre_Students_Information_Systems",
      "question": "How much total loan does each student have ? List the student ids and the amounts ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How much total loan does each student have ? List the student ids and the amounts .[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 415,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 415,
      "db_id": "cre_Students_Information_Systems",
      "question": "For each student, find the student id and the total amount of loan he or she has."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each student, find the student id and the total amount of loan he or she has.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 416,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 416,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses does each student take? List the student id, the student biographical data and the course count."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many courses does each student take? List the student id, the student biographical data and the course count.[SQL]\\nSELECT Teachers.student_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 417,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 417,
      "db_id": "cre_Students_Information_Systems",
      "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each student, find the student id, student biographical data, and the number of courses he or she takes.[SQL]\\nSELECT Teachers.student_id\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 418,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 418,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students have gone through a detention?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many students have gone through a detention?[SQL]\\nSELECT student_id FROM Detention WHERE datetime_detention_end != '0001-01-01 00:00:00' GROUP BY student_id HAVING count(*)  >=  1' <MID>_details` VARCHAR(255) NOT NULL,\n    ORDER BY student_id;"
  },
  {
    "id": 419,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 419,
      "db_id": "cre_Students_Information_Systems",
      "question": "Count the number of students who have a detention record."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of students who have a detention record.[SQL]\\nSELECT student_id FROM DetentionGROUP BY student_idHAVING count(*)  >=  1'\n        ;"
  },
  {
    "id": 420,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 420,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the code and description of the most common student address type?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the code and description of the most common student address type?[SQL]\\nSELECT Transcripts.student_id FROM Transcripts WHERE date_of_transcript  =  ( SELECT max(date_of_transcript) FROM Transcripts ) UNION SELECT Students.student_id FROM Students WHERE bio_data  =  ( SELECT max(bio_data) FROM Students ) UNION SELECT Student_Events.student_id FROM Student_Events WHERE event_date  =  ( SELECT max(event_date) FROM Student_Events ) UNION SELECT Achievements.student_id FROM Achievements WHERE date_achievement  =  ( SELECT max(date_achievement) FROM Achievements ) UNION SELECT Detention.student_id FROM Detention WHERE datetime_detention_start  =  ( SELECT max(datetime_detention_start) FROM Detention ) UNION SELECT Ref_Event_Types.event_type_code FROM Ref_Event_Types WHERE event_type_description"
  },
  {
    "id": 421,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 421,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the most common student address type? Give me the code and description of the address type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common student address type? Give me the code and description of the address type.[SQL]\\nSELECT Transcripts.student_id FROM Transcripts WHERE date_of_transcript  >  '2016-01-01' GROUP BY Transcript.student_id ORDER BY count(*) DESC LIMIT 1' <MID>_details` VARCHAR(255) NOT NULL,\n    GROUP BY Transcripts.student_id;"
  },
  {
    "id": 422,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 422,
      "db_id": "cre_Students_Information_Systems",
      "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For those students who have gone through an event, who do not have a student loan? List the students' biographical data[SQL]\\nSELECT Teachers.student_id FROM Students_Addresses WHERE address_type_code  =  'Ref_Address_Types.event_address_type_code' INTERSECT SELECT student_id FROM Student_Loans EXCEPT SELECT student_id FROM Achievements UNION SELECT student_id FROM Detention UNION SELECT student_id FROM Behaviour_Monitoring')]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 423,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 423,
      "db_id": "cre_Students_Information_Systems",
      "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[SQL]\\nSELECT Teachers.student_id FROM Students_Addresses WHERE address_type_code  =  'Residential' INTERSECT SELECT student_id FROM Student_Loans EXCEPT SELECT student_id FROM Achievements UNION SELECT student_id FROM Detention UNION SELECT student_id FROM Behaviour_Monitoring UNION SELECT student_id FROM Transcripts UNION SELECT student_id FROM Students EXCEPT SELECT student_id FROM Student_Events UNION SELECT student_id FROM Teachers UNION SELECT student_id FROMClasses EXCEPT SELECT student_id FROM Achievements UNION SELECT student_id FROM Detention UNION SELECT student_id FROM Behaviour_Monitoring UNION SELECT student_id FROM Transcripts UNION SELECT student_id FROM Students EXCEPT SELECT student_id FROM Student_Events UNION SELECT student_id FROM Teachers UNION SELECT student_id FROMClasses EXCEPT SELECT student_id"
  },
  {
    "id": 424,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 424,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the start time and the end time of the students' addresses for the students who have 2 transcripts.[SQL]\\nSELECT Transcripts.date_achievement FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 ) UNION SELECT Transcript.date_achievement FROM Students_Addresses AS Transcript JOIN Students ON Transcript.student_id  =  Students.student_id WHERE Transcript.address_type_code  =  'Address Type Code 1' AND Transcript.date_from  >  '2016-01-01 00:00:00' INTERSECT SELECT Transcript.date_achievement FROM Students_Addresses AS Transcript JOIN Students ON Transcript.student_id  =  Students.student_id WHERE Transcript.address_type_code  =  '"
  },
  {
    "id": 425,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 425,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the start time and end time of addresses for the students who receive 2 transcripts?[SQL]\\nSELECT Transcripts.date_achievement FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )'\n        ;"
  },
  {
    "id": 426,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 426,
      "db_id": "cre_Students_Information_Systems",
      "question": "When did all the detentions start?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, When did all the detentions start?[SQL]\\nSELECT Transcripts.date_achievement FROM Achievements WHERE date_achievement  =  (SELECT min(date_achievement) FROM Achievements) SELECT Transcript.date_of_transcript FROM Transcripts WHERE date_of_transcript  =  (SELECT max(date_of_transcript) FROM Transcripts) SELECT student_loans.date_of_loan FROM student_loans WHERE date_of_loan  =  (SELECT max(date_of_loan) FROM student_loans) SELECT teacher_id FROM CLASS WHERE teacher_id  =  (SELECT min(teacher_id) FROM CLASS) SELECT student_id FROM CLASS WHERE student_id  =  (SELECT min(student_id) FROM CLASS) SELECT student_id FROM STUDENTS WHERE student_id  =  (SELECT max"
  },
  {
    "id": 427,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 427,
      "db_id": "cre_Students_Information_Systems",
      "question": "Give me the detention start date for all the detention records."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the detention start date for all the detention records.[SQL]\\nSELECT date_achievement FROM Achievements WHERE achievement_type_code  =  'Detention Start Date' UNION SELECT datetime_detention_start FROM Detention'\n    ;"
  },
  {
    "id": 428,
    "db_id": "book_1",
    "question": {
      "id": 428,
      "db_id": "book_1",
      "question": "List all the author names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the author names.[SQL]\\nSELECT amount FROM Books_Order WHERE isbn  =   '1234' AND idorder  =  '1234' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 429,
    "db_id": "book_1",
    "question": {
      "id": 429,
      "db_id": "book_1",
      "question": "What are the names of all the authors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all the authors?[SQL]\\nSELECT amount FROM Author_Book WHERE author  =  1'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 430,
    "db_id": "book_1",
    "question": {
      "id": 430,
      "db_id": "book_1",
      "question": "Show all Client names and their addresses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all Client names and their addresses.[SQL]\\nSELECT IdOrder FROM Orders WHERE DateExped  <  '2002-05-30' UNION SELECT IdOrder FROM Orders WHERE DateExped  >  '2002-05-30' ORDER BY DateExped ASC' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 431,
    "db_id": "book_1",
    "question": {
      "id": 431,
      "db_id": "book_1",
      "question": "What are the names and addressed of all clients?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and addressed of all clients?[SQL]\\nSELECT IdOrder FROM Orders WHERE dateorder  <  '2001-01-25' UNION SELECT idclient FROM orders WHERE dateexped  <  '2001-01-25' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 432,
    "db_id": "book_1",
    "question": {
      "id": 432,
      "db_id": "book_1",
      "question": "List all Book titles, ISBNs, and sale prices."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all Book titles, ISBNs, and sale prices.[SQL]\\nSELECT ISBN \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 433,
    "db_id": "book_1",
    "question": {
      "id": 433,
      "db_id": "book_1",
      "question": "What are the titles, ISBNs, and sale prices for all books?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles, ISBNs, and sale prices for all books?[SQL]\\nSELECT ISBN \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 434,
    "db_id": "book_1",
    "question": {
      "id": 434,
      "db_id": "book_1",
      "question": "How many books do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many books do we have?[SQL]\\nSELECT amount FROM Books_Order WHERE isbn  =  'ISBN' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 435,
    "db_id": "book_1",
    "question": {
      "id": 435,
      "db_id": "book_1",
      "question": "Count the number of books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of books.[SQL]\\nSELECT amount FROM Books_Order WHERE isbn  =  'ISBN' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 436,
    "db_id": "book_1",
    "question": {
      "id": 436,
      "db_id": "book_1",
      "question": "How many authors are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many authors are there?[SQL]\\nSELECT Author.IdOrder FROM Author_Book WHERE author = 'Name of Author' AND title LIKE '%Title of Book%' AND isbn LIKE '%ISBN of Book%' AND TIMESTAMPDIFF(YEAR , date_order , CURRENT_DATE) BETWEEN 18 AND 24' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 437,
    "db_id": "book_1",
    "question": {
      "id": 437,
      "db_id": "book_1",
      "question": "Count the number of authors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of authors.[SQL]\\nSELECT Author.IdOrder FROM Author_Book WHERE author  =  1 GROUP BY IdOrder HAVING count(*)  >=  2'\n        ;"
  },
  {
    "id": 438,
    "db_id": "book_1",
    "question": {
      "id": 438,
      "db_id": "book_1",
      "question": "How many clients are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many clients are there?[SQL]\\nSELECT IdOrder FROM Orders WHERE dateorder  <  '2003-01-01' GROUP BY IdOrder ORDER BY count(*) DESC LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 439,
    "db_id": "book_1",
    "question": {
      "id": 439,
      "db_id": "book_1",
      "question": "Return the number of clients."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the number of clients.[SQL]\\nSELECT IdOrder FROM Orders WHERE dateorder  <  '2002-10-02' UNION SELECT idorder FROM orders WHERE dateexped  >  '2018-07-25' GROUP BY idorder HAVING count(*)  >=  2' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 440,
    "db_id": "book_1",
    "question": {
      "id": 440,
      "db_id": "book_1",
      "question": "List names and addresses of all clients in alphabetical order by their names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List names and addresses of all clients in alphabetical order by their names.[SQL]\\nSELECT IdOrder FROM Orders WHERE dateorder  <  '2001-01-25' UNION SELECT IdOrder FROM Orders WHERE dateexped  >  '2001-01-25' ORDER BY name ASC NULLS LAST' <MID>\n    ORDER BY IdOrder;"
  },
  {
    "id": 441,
    "db_id": "book_1",
    "question": {
      "id": 441,
      "db_id": "book_1",
      "question": "What are the names and addressed of all clients, ordered alphabetically by name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and addressed of all clients, ordered alphabetically by name?[SQL]\\nSELECT IdOrder FROM Orders WHERE dateorder  <  '2001-01-25' UNION SELECT idorder FROM orders WHERE dateexped  >  '2001-01-25' ORDER BY name ASC' <MID>\n    ORDER BY IdOrder;"
  },
  {
    "id": 442,
    "db_id": "book_1",
    "question": {
      "id": 442,
      "db_id": "book_1",
      "question": "Show all book titles and corresponding author names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all book titles and corresponding author names.[SQL]\\nSELECT Book.IdOrder FROM Author_Book \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 443,
    "db_id": "book_1",
    "question": {
      "id": 443,
      "db_id": "book_1",
      "question": "What are the names of all books and their corresponding authors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all books and their corresponding authors?[SQL]\\nSELECT Book.ISBN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 444,
    "db_id": "book_1",
    "question": {
      "id": 444,
      "db_id": "book_1",
      "question": "Show all order ids and their client names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all order ids and their client names.[SQL]\\nSELECT IdOrder FROM Orders WHERE IdClient IN (SELECT name FROM Client) UNION SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT name FROM Client) <MID>\n    ORDER BY amount;"
  },
  {
    "id": 445,
    "db_id": "book_1",
    "question": {
      "id": 445,
      "db_id": "book_1",
      "question": "What are the ids of all orders and the corresponding client names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of all orders and the corresponding client names?[SQL]\\nSELECT IdOrder \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 446,
    "db_id": "book_1",
    "question": {
      "id": 446,
      "db_id": "book_1",
      "question": "Show all author names and the numbers of books each has written."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all author names and the numbers of books each has written.[SQL]\\nSELECT Author.IdOrder  FROM Author_Book  WHERE Author  =  1 GROUP BY TITLE ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 447,
    "db_id": "book_1",
    "question": {
      "id": 447,
      "db_id": "book_1",
      "question": "What are the names of all the authors, and how many books has each written?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all the authors, and how many books has each written?[SQL]\\nSELECT Author.IdOrder FROM Author_Book WHERE author  =  1 GROUP BY TSB.IdOrder ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 448,
    "db_id": "book_1",
    "question": {
      "id": 448,
      "db_id": "book_1",
      "question": "Show all book isbns and the numbers of orders for each."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all book isbns and the numbers of orders for each.[SQL]\\nSELECT ISBN FROM Books_OrderGROUP BY ISBNORDER BY amount;"
  },
  {
    "id": 449,
    "db_id": "book_1",
    "question": {
      "id": 449,
      "db_id": "book_1",
      "question": "What are all isbns for each book, and how many times has each been ordered?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all isbns for each book, and how many times has each been ordered?[SQL]\\nSELECT ISBN FROM Books_Order WHERE amount  >  0 GROUP BY ISBN ORDER BY count(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 450,
    "db_id": "book_1",
    "question": {
      "id": 450,
      "db_id": "book_1",
      "question": "Show all book isbns and the total amount ordered for each."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all book isbns and the total amount ordered for each.[SQL]\\nSELECT ISBN FROM Books_Order WHERE ISODATE(YEAR(T1.DateOrder))  =  ISODATE(YEAR(T2.DateExped)) GROUP BY ISBN ORDER BY sum(T1.amount) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 451,
    "db_id": "book_1",
    "question": {
      "id": 451,
      "db_id": "book_1",
      "question": "What are the isbns for all books, and what is the total amount ordered for each?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the isbns for all books, and what is the total amount ordered for each?[SQL]\\nSELECT amount FROM Books_Order WHERE idOrder  =  'LP1874' UNION SELECT sum(amount) FROM Books_order WHERE idOrder  =  'LP1874' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 452,
    "db_id": "book_1",
    "question": {
      "id": 452,
      "db_id": "book_1",
      "question": "Show the book title corresponding to the book with the most number of orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the book title corresponding to the book with the most number of orders.[SQL]\\nSELECT Book.IdOrder FROM Books_Order WHERE Books_Order.ISBN = BoundBook.ISBN GROUP BY BoundBook.ISBN ORDER BY COUNT(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 453,
    "db_id": "book_1",
    "question": {
      "id": 453,
      "db_id": "book_1",
      "question": "What is the title of the book that has been ordered the greatest number of times?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title of the book that has been ordered the greatest number of times?[SQL]\\nSELECT Books_Order.amount FROM Books_Order WHERE Books_Order.amount  =  (SELECT max(amount) FROM Books_Order) JOIN Book ON Books_Order.ISBN  =  Book.ISBN ORDER BY TITLE ASC LIMIT 1'\n        ;"
  },
  {
    "id": 454,
    "db_id": "book_1",
    "question": {
      "id": 454,
      "db_id": "book_1",
      "question": "Show the book title and purchase price of the book that has had the greatest amount in orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the book title and purchase price of the book that has had the greatest amount in orders.[SQL]\\nSELECT Book.amount FROM Book WHERE amount  =  (SELECT max(amount) FROM Books_order) UNION SELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 455,
    "db_id": "book_1",
    "question": {
      "id": 455,
      "db_id": "book_1",
      "question": "What is the title and purchase price of the book that has the highest total order amount?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title and purchase price of the book that has the highest total order amount?[SQL]\\nSELECT amount FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book ORDER BY PurchasePrice DESC LIMIT 1) ORDER BY amount DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 456,
    "db_id": "book_1",
    "question": {
      "id": 456,
      "db_id": "book_1",
      "question": "Show the titles of books that have been ordered."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the titles of books that have been ordered.[SQL]\\nSELECT Book.IdOrder FROM Book WHERE title IN (SELECT T1.title FROM Book AS T1 JOIN Orders AS T2 ON T1.IdOrder  =  T2.IdOrder) ORDER BY BoundDate ASC'\n        ;"
  },
  {
    "id": 457,
    "db_id": "book_1",
    "question": {
      "id": 457,
      "db_id": "book_1",
      "question": "What are the different titles of books that have been ordered in the past?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different titles of books that have been ordered in the past?[SQL]\\nSELECT amount FROM Books_Order WHERE idOrder IN (SELECT idOrder FROM Orders WHERE dateorder  <  {date}) AND ISBN IN (SELECT isbn FROM book) UNION SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idorder IN (SELECT idorder FROM orders WHERE dateorder  <  {date})'\n        ;"
  },
  {
    "id": 458,
    "db_id": "book_1",
    "question": {
      "id": 458,
      "db_id": "book_1",
      "question": "Show the names of clients who have ordered at least once."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of clients who have ordered at least once.[SQL]\\nSELECT Client.IdOrder FROM Client WHERE Clienr.IdOrder IN (SELECT IdOrder FROM Orders) GROUP BY Clienr.IdOrder HAVING COUNT(*)  >=  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 459,
    "db_id": "book_1",
    "question": {
      "id": 459,
      "db_id": "book_1",
      "question": "What are the names of the different clients who have made an order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the different clients who have made an order?[SQL]\\nSELECT IdOrder FROM Orders WHERE dateorder  <  '2002-01-01' UNION SELECT idclient FROM Orders WHERE dateorder  >=  '2002-01-01' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 460,
    "db_id": "book_1",
    "question": {
      "id": 460,
      "db_id": "book_1",
      "question": "Show all client names and the number of orders each has made."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all client names and the number of orders each has made.[SQL]\\nSELECT Client.IdOrder, count(*) FROM Orders AS Clienr JOIN Book_Order ON Orders.IdOrder = Book_Order.IdOrder GROUP BY Clienr.IdOrder ORDER BY count(*) DESC LIMIT 1'\n    , 'SELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient'\n    , 'SELECT name FROM client'\n    , 'SELECT title FROM book'\n    , 'SELECT title FROM book WHERE purchaseprice  <  15.50'\n    , 'SELECT title FROM book WHERE saleprice  >  15.50'\n    , 'SELECT title FROM book WHERE purchaseprice  BETWEEN  15.50 AND  20' ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 461,
    "db_id": "book_1",
    "question": {
      "id": 461,
      "db_id": "book_1",
      "question": "What are the names of all the clients, and how many times has each of them ordered?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all the clients, and how many times has each of them ordered?[SQL]\\nSELECT Client.IdOrder FROM Client WHERE Clien.IdOrder IN (SELECT IdOrder FROM Orders) GROUP BY Clien.IdOrder ORDER BY count(*) DESC LIMIT 1'\n    LIMIT = 1\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 462,
    "db_id": "book_1",
    "question": {
      "id": 462,
      "db_id": "book_1",
      "question": "What is the name of the client with the most number of orders?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the client with the most number of orders?[SQL]\\nSELECT Client.IdOrder FROM Client WHERE ClienT.IdOrder IN (SELECT IdOrder FROM Orders GROUP BY IdOrder ORDER BY count(*) DESC LIMIT 1) AND ClienT.IdOrder IN (SELECT IdOrder FROM Orders) ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 463,
    "db_id": "book_1",
    "question": {
      "id": 463,
      "db_id": "book_1",
      "question": "Give the name of the client who has made the most orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the name of the client who has made the most orders.[SQL]\\nSELECT Client.IdOrder FROM Client WHERE ClienT.IdOrder IN (SELECT IdOrder FROM Orders GROUP BY IdOrder ORDER BY count(*) DESC LIMIT 1) UNION SELECT null FROM Client WHERE ClienT.IdOrder NOT IN (SELECT IdOrder FROM Orders) ORDER BY name ASC'\n        ;"
  },
  {
    "id": 464,
    "db_id": "book_1",
    "question": {
      "id": 464,
      "db_id": "book_1",
      "question": "Show the client names and their total amounts of books ordered."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the client names and their total amounts of books ordered.[SQL]\\nSELECT IdOrder FROM Books_Order WHERE isbn = 'isbn' GROUP BY IdOrder ORDER BY sum(amount) DESC LIMIT 1' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 465,
    "db_id": "book_1",
    "question": {
      "id": 465,
      "db_id": "book_1",
      "question": "What are the names of all the clients, and the total amount of books ordered by each?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all the clients, and the total amount of books ordered by each?[SQL]\\nSELECT IdOrder FROM Books_Order WHERE ISBN = '12345' UNION SELECT T1.idorder ,  SUM(T2.amount) FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.idorder ORDER BY SUM(T2.amount) DESC LIMIT 1' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 466,
    "db_id": "book_1",
    "question": {
      "id": 466,
      "db_id": "book_1",
      "question": "Show the client name who has the most total amount of books ordered."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the client name who has the most total amount of books ordered.[SQL]\\nSELECT Orders.IdOrder FROM Orders WHERE Orders.IdOrder IN (SELECT T1.IdOrder FROM Books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.IdOrder ORDER BY sum(T1.amount) DESC LIMIT 1) AND Orders.IdClient IN (SELECT T2.IdClient FROM Books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T2.IdClient ORDER BY count(*) DESC LIMIT 1) ORDER BY Orders.dateorder ASC'\n        ;"
  },
  {
    "id": 467,
    "db_id": "book_1",
    "question": {
      "id": 467,
      "db_id": "book_1",
      "question": "What is the name of the client who has ordered the greatest total amount of books?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the client who has ordered the greatest total amount of books?[SQL]\\nSELECT Client.IdOrder FROM Client WHERE Cliennt.IdOrder IN (SELECT T1.IdOrder FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder  =  T2.IdOrder GROUP BY T1.IdOrder ORDER BY SUM(T2.amount) DESC LIMIT 1) AND Cliennt.IdOrder IN (SELECT T1.IdOrder FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder  =  T2.IdOrder GROUP BY T1.IdOrder ORDER BY SUM(T2.amount) DESC LIMIT 1) <MID>\n    ORDER BY amount;"
  },
  {
    "id": 468,
    "db_id": "book_1",
    "question": {
      "id": 468,
      "db_id": "book_1",
      "question": "Show all book titles for books that have no orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all book titles for books that have no orders.[SQL]\\nSELECT Book.IdOrder FROM Book WHERE idorder  =  'null' UNION SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.idorder HAVING count(*)  =  0' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 469,
    "db_id": "book_1",
    "question": {
      "id": 469,
      "db_id": "book_1",
      "question": "What are the titles of books that have never been ordered?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of books that have never been ordered?[SQL]\\nSELECT amount FROM Books_Order WHERE amount  =  1 UNION SELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn EXCEPT SELECT T3.title FROM book AS T3 JOIN books_order AS T4 ON T3.isbn  =  T4.isbn'\n        ;"
  },
  {
    "id": 470,
    "db_id": "book_1",
    "question": {
      "id": 470,
      "db_id": "book_1",
      "question": "Show all client names for clients who have not made orders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all client names for clients who have not made orders.[SQL]\\nSELECT IdOrder FROM Orders WHERE dateorder  =  '0000-00-00' UNION SELECT idclient FROM Orders EXCEPT SELECT idclient FROM Orders GROUP BY idclient HAVING count(*)  =  0]'\n    LIMIT 50000'\n    ;"
  },
  {
    "id": 471,
    "db_id": "book_1",
    "question": {
      "id": 471,
      "db_id": "book_1",
      "question": "What are the names of clients who have never made an order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of clients who have never made an order?[SQL]\\nSELECT IdOrder FROM Orders WHERE IdClient NOT IN (SELECT IdClient FROM Orders) UNION SELECT IdClient FROM Orders EXCEPT SELECT IdClient FROM Orders GROUP BY IdClient HAVING count(*)  =  0)')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 472,
    "db_id": "book_1",
    "question": {
      "id": 472,
      "db_id": "book_1",
      "question": "What is the maximum and the minimum sale price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum and the minimum sale price?[SQL]\\nSELECT Book.ISBN FROM Book WHERE Book.saleprice  =  (SELECT max(saleprice) FROM book) UNION SELECT  Book.ISBN FROM Book WHERE Book.saleprice  =  (SELECT min(saleprice) FROM book) ORDER BY ISBN ASC'\n        ;"
  },
  {
    "id": 473,
    "db_id": "book_1",
    "question": {
      "id": 473,
      "db_id": "book_1",
      "question": "Give the maximum and minimum sale price of books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the maximum and minimum sale price of books.[SQL]\\nSELECT amount FROM Books_Order WHERE isbn  =  'ISBN' UNION SELECT sum(amount) FROM Books_Order WHERE isbn  =  'ISBN' UNION SELECT max(T2.saleprice) ,  min(T2.saleprice) FROM Books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE isbn  =  'ISBN' GROUP BY isbn HAVING count(*)  >=  2' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 474,
    "db_id": "book_1",
    "question": {
      "id": 474,
      "db_id": "book_1",
      "question": "What is the average purchase price and the average sale price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average purchase price and the average sale price?[SQL]\\nSELECT Book.IdOrder FROM Book WHERE PurchasePrice != 'null' AND SalePrice != 'null' GROUP BY Book.IdOrder ORDER BY AVG(PurchasePrice) DESC LIMIT 1 UNION SELECT  Book.IdOrder FROM Book WHERE PurchasePrice != 'null' AND SalePrice != 'null' GROUP BY Book.IdOrder ORDER BY AVG(SalePrice) DESC LIMIT 1'\n    ORDER BY amount;"
  },
  {
    "id": 475,
    "db_id": "book_1",
    "question": {
      "id": 475,
      "db_id": "book_1",
      "question": "Give the average purchase price and average sale price for books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the average purchase price and average sale price for books.[SQL]\\nSELECT Book.IdOrder FROM Book WHERE PurchasePrice != 'null' AND SalePrice != 'null' GROUP BY Book.IdOrder ORDER BY AVG(PurchasePrice) DESC LIMIT 1 UNION SELECT  Book.IdOrder FROM Book WHERE PurchasePrice != 'null' AND SalePrice != 'null' GROUP BY Book.IdOrder ORDER BY AVG(SalePrice) DESC LIMIT 1'\n    ORDER BY amount;"
  },
  {
    "id": 476,
    "db_id": "book_1",
    "question": {
      "id": 476,
      "db_id": "book_1",
      "question": "What is the maximum difference between the sale price and purchase price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum difference between the sale price and purchase price?[SQL]\\nSELECT amount FROM Books_Order WHERE saleprice - purchaseprice  =  (SELECT max(saleprice - purchaseprice) FROM Books_Order)')]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 477,
    "db_id": "book_1",
    "question": {
      "id": 477,
      "db_id": "book_1",
      "question": "Return the largest difference in sale price and purchase price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the largest difference in sale price and purchase price.[SQL]\\nSELECT Author_Book.amount FROM Author_Book WHERE Amathor_Book.amount  =  (SELECT max(Amathor_Book.amount) FROM Author_Book) AND Amathor_Book.ISBN IN (SELECT T1.ISBN FROM Books_order AS T1 JOIN Orders AS T2 ON T1.idOrder  =  T2.idOrder WHERE T2.dateexped  =  1987) UNION SELECT Amathor_Book.amount FROM Author_Book WHERE Amathor_Book.amount  =  (SELECT min(Amathor_Book.amount) FROM Author_Book) AND Amathor_Book.ISBN IN (SELECT T1.ISBN FROM Books_order AS T1 JOIN Orders AS T2 ON T1.idOrder  =  T2.idOrder WHERE T2.dateexped  =  1987) ORDER BY amount DESC"
  },
  {
    "id": 478,
    "db_id": "book_1",
    "question": {
      "id": 478,
      "db_id": "book_1",
      "question": "List all book titles which have sale prices higher than the average."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all book titles which have sale prices higher than the average.[SQL]\\nSELECT amount FROM Books_Order WHERE amount  >  (SELECT avg(amount) FROM Books_Order) AND TITLE IN (SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book))'\n        ;"
  },
  {
    "id": 479,
    "db_id": "book_1",
    "question": {
      "id": 479,
      "db_id": "book_1",
      "question": "What are the titles of books with sale prices above the average sale price across all books?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of books with sale prices above the average sale price across all books?[SQL]\\nSELECT Book.IdOrder FROM Book WHERE Book.saleprice  >  (SELECT avg(saleprice) FROM book) ORDER BY Book.saleprice DESC'\n        ;"
  },
  {
    "id": 480,
    "db_id": "book_1",
    "question": {
      "id": 480,
      "db_id": "book_1",
      "question": "List all book titles which have the lowest sale price ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all book titles which have the lowest sale price .[SQL]\\nSELECT Book.IdOrder FROM Book WHERE BoughtPrice  =  (SELECT min(BoughtPrice) FROM book) ORDER BY Title ASC'\n        ;"
  },
  {
    "id": 481,
    "db_id": "book_1",
    "question": {
      "id": 481,
      "db_id": "book_1",
      "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of books that have a sale price equal to the lowest sale price across all books ?[SQL]\\nSELECT Book.IdOrder FROM Book WHERE BoughtPrice  =  (SELECT min(BoughtPrice) FROM book) UNION SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder WHERE T1.saleprice  =  (SELECT min(saleprice) FROM book) ORDER BY T2.dateorder ASC'\n        ;"
  },
  {
    "id": 482,
    "db_id": "book_1",
    "question": {
      "id": 482,
      "db_id": "book_1",
      "question": "List all book titles which have highest purchase prices ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all book titles which have highest purchase prices .[SQL]\\nSELECT amount FROM Books_Order WHERE isbn IN (SELECT isbn FROM book WHERE purchaseprice  =  (SELECT max(purchaseprice) FROM book)) ORDER BY amount DESC LIMIT 10'\n        ;"
  },
  {
    "id": 483,
    "db_id": "book_1",
    "question": {
      "id": 483,
      "db_id": "book_1",
      "question": "What are the titles of books with the highest purchase price across all books ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of books with the highest purchase price across all books ?[SQL]\\nSELECT Book.IdOrder FROM Book WHERE PurchasePrice  =  (SELECT max(PurchasePrice) FROM book) ORDER BY amount DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 484,
    "db_id": "book_1",
    "question": {
      "id": 484,
      "db_id": "book_1",
      "question": "What is the average sale price of books written by George Orwell?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average sale price of books written by George Orwell?[SQL]\\nSELECT Author_Book.amount FROM Author_Book \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 485,
    "db_id": "book_1",
    "question": {
      "id": 485,
      "db_id": "book_1",
      "question": "Give the average sale price of books authored by George Orwell."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the average sale price of books authored by George Orwell.[SQL]\\nSELECT Author.IdOrder FROM Author_Book \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 486,
    "db_id": "book_1",
    "question": {
      "id": 486,
      "db_id": "book_1",
      "question": "What are sale prices of books written by Plato?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are sale prices of books written by Plato?[SQL]\\nSELECT Books_Order.amount FROM Author_Book \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 487,
    "db_id": "book_1",
    "question": {
      "id": 487,
      "db_id": "book_1",
      "question": "Return the sale prices of books authored by Plato."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the sale prices of books authored by Plato.[SQL]\\nSELECT Book.IdOrder FROM Author_Book WHERE Author  =  1 JOIN Book ON Author_Book.ISBN  =  Book.ISBN ORDER BY Book.salePrice DESC'\n        ;"
  },
  {
    "id": 488,
    "db_id": "book_1",
    "question": {
      "id": 488,
      "db_id": "book_1",
      "question": "What is the title of the book written by George Orwell that has the lowest sale price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title of the book written by George Orwell that has the lowest sale price?[SQL]\\nSELECT Book.IdOrder FROM Book WHERE BirthDate  <  '1910-01-01' AND Title LIKE '%Learning%' ORDER BY PurchasePrice ASC LIMIT 100000, 25 <MID>, T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'George Orwell' ORDER BY T1.PurchasePrice LIMIT 1'\n    ORDER BY amount;"
  },
  {
    "id": 489,
    "db_id": "book_1",
    "question": {
      "id": 489,
      "db_id": "book_1",
      "question": "Give the title of book by George Orwell that has the lowest saleprice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the title of book by George Orwell that has the lowest saleprice.[SQL]\\nSELECT Book.IdOrder FROM Book WHERE Title  =  'George Orwell' AND saleprice  =  (SELECT min(saleprice) FROM book) UNION SELECT T1.idorder FROM books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.Title  =  'George Orwell' AND T2.saleprice  =  (SELECT min(saleprice) FROM book) ORDER BY T1.idorder ASC LIMIT 1' <MID>T1.idorder FROM books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.Title  =  'George Orwell' AND T2.saleprice  =  (SELECT min(saleprice) FROM book) ORDER BY T1.idorder ASC LIMIT 1' UNION SELECT T1."
  },
  {
    "id": 490,
    "db_id": "book_1",
    "question": {
      "id": 490,
      "db_id": "book_1",
      "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title of the book written by Plato has price lower than the average sale price of all books?[SQL]\\nSELECT Book.IdOrder FROM Book WHERE PurchasePrice  <  (SELECT avg(PurchasePrice) FROM book) AND Title  =  'Plato' AND Author IN (SELECT name FROM author) ORDER BY TITLE ASC' <MID>TITLE ASC' WHERE LENGTH(TITLE)  >  800' WHERE LENGTH(TITLE)  >  800' UNION SELECT title FROM book WHERE LENGTH(TITLE)  >  800' UNION SELECT title FROM book WHERE LENGTH(TITLE)  >  800' UNION SELECT title FROM book WHERE LENGTH(TITLE)  >  800' UNION SELECT title FROM book WHERE LENGTH(TITLE)  >  800' UNION SELECT title FROM book WHERE LENGTH(TITLE)  >  80"
  },
  {
    "id": 491,
    "db_id": "book_1",
    "question": {
      "id": 491,
      "db_id": "book_1",
      "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[SQL]\\nSELECT Book.IdOrder FROM Author_Book \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 492,
    "db_id": "book_1",
    "question": {
      "id": 492,
      "db_id": "book_1",
      "question": "Who is the author of the book \"Pride and Prejudice\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who is the author of the book \"Pride and Prejudice\"?[SQL]\\nSELECT Author.IdOrder FROM Author_Book WHERE title  =  'Pride and Prejudice' AND AUthor IN (SELECT idAuthor FROM Author WHERE name  =  'Jane Austen') ORDER BY AUthor DESC LIMIT 1' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 493,
    "db_id": "book_1",
    "question": {
      "id": 493,
      "db_id": "book_1",
      "question": "Give the name of the author who wrote the book titled Pride and Prejudice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the name of the author who wrote the book titled Pride and Prejudice.[SQL]\\nSELECT Author.IdOrder FROM Author_Book WHERE title = 'Pride and Prejudice' AND AUthor IN (SELECT T1.name FROM AUTHOR AS T1 JOIN BOOK AS T2 ON T1.idauthor  =  T2.idauthor) SELECT T2.Name FROM Author AS T1 JOIN BOOK AS T2 ON T1.idauthor  =  T2.idauthor WHERE T2.title  =  'Pride and Prejudice' <MID>\n    ORDER BY amount;"
  },
  {
    "id": 494,
    "db_id": "book_1",
    "question": {
      "id": 494,
      "db_id": "book_1",
      "question": "List titles of all books published by an author whose name contains the string 'Plato'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List titles of all books published by an author whose name contains the string 'Plato'?[SQL]\\nSELECT Book.ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%') JOIN Book ON Author_Book.ISBN  =  Book.ISBN'\n\n    ORDER BY Book.ISBN;"
  },
  {
    "id": 495,
    "db_id": "book_1",
    "question": {
      "id": 495,
      "db_id": "book_1",
      "question": "What are the titles of all books written by an author with a name that contains Plato?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of all books written by an author with a name that contains Plato?[SQL]\\nSELECT Book.IdOrder FROM Author_Book \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 496,
    "db_id": "book_1",
    "question": {
      "id": 496,
      "db_id": "book_1",
      "question": "How many orders do we have for \"Pride and Prejudice\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many orders do we have for \"Pride and Prejudice\"?[SQL]\\nSELECT amount FROM Books_Order WHERE isbn  =  (SELECT isbn FROM Book WHERE title  =  'Pride and Prejudice') AND idOrder IN (SELECT idOrder FROM Orders)')]\n\n    ORDER BY amount;"
  },
  {
    "id": 497,
    "db_id": "book_1",
    "question": {
      "id": 497,
      "db_id": "book_1",
      "question": "Return the number of orders received for Pride and Prejudice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the number of orders received for Pride and Prejudice.[SQL]\\nSELECT amount FROM Books_Order WHERE isbn  =  'cooper8967654321' AND idorder IN (SELECT idorder FROM orders WHERE dateorder  =  '2001-05-15')'\n\n    ORDER BY amount;"
  },
  {
    "id": 498,
    "db_id": "book_1",
    "question": {
      "id": 498,
      "db_id": "book_1",
      "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".[SQL]\\nSELECT Orders.IdOrder FROM Orders WHERE ISBN IN (SELECT T1.isbn FROM Books_order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.Title  =  'Pride and Prejudice' INTERSECT SELECT T1.isbn FROM Books_order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.Title  =  'The Little Prince') ORDER BY Orders.date_exped DESC'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 499,
    "db_id": "book_1",
    "question": {
      "id": 499,
      "db_id": "book_1",
      "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[SQL]\\nSELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT isbn FROM book WHERE title  =  'Pride and Prejudice' UNION SELECT isbn FROM book WHERE title  =  'The Little Prince') GROUP BY IdOrder HAVING count(*)  =  2' <MID>TITLE', 'author']]\n    ORDER BY amount;"
  },
  {
    "id": 500,
    "db_id": "book_1",
    "question": {
      "id": 500,
      "db_id": "book_1",
      "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all book isbns which were ordered by both client Peter Doe and client James Smith.[SQL]\\nSELECT Books_Order.ISBN FROM Books_Order WHERE Books_Order.idOrder IN (SELECT T1.idOrder FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.IdClient WHERE T2.Name  =  'Peter Doe' INTERSECT SELECT T1.idOrder FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.IdClient WHERE T2.Name  =  'James Smith')'\n\n    ORDER BY ISBN;"
  },
  {
    "id": 501,
    "db_id": "book_1",
    "question": {
      "id": 501,
      "db_id": "book_1",
      "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the isbns of books ordered by both clients named Peter Doe and James Smith?[SQL]\\nSELECT Books_Order.ISBN FROM Books_Order WHERE Books_Order.IdOrder IN (SELECT T1.IdOrder FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient  =  T2.IdClient WHERE T2.Name  =  'Peter Doe' INTERSECT SELECT T1.IdOrder FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient  =  T2.IdClient WHERE T2.Name  =  'James Smith') ORDER BY Books_Order.IdOrder ASC <MID>T1.IdOrder FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient  =  T2.IdClient WHERE T2.Name  =  'Peter Doe' INTERSECT SELECT T1.IdOrder FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient  =  T2.IdClient"
  },
  {
    "id": 502,
    "db_id": "book_1",
    "question": {
      "id": 502,
      "db_id": "book_1",
      "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the title of books which are ordered by client Peter Doe but not client James Smith.[SQL]\\nSELECT Book.ISBN FROM Book WHERE ISBN IN (SELECT T1.ISBN FROM Books_order AS T1 JOIN Orders AS T2 ON T1.idOrder  =  T2.IdOrder JOIN Client AS T3 ON T3.IdClient  =  T2.IdClient WHERE T3.Name  =  'Peter Doe' EXCEPT SELECT T1.ISBN FROM Books_order AS T1 JOIN Orders AS T2 ON T1.idOrder  =  T2.IdOrder JOIN Client AS T3 ON T3.IdClient  =  T2.IdClient WHERE T3.Name  =  'James Smith')'\n\n    ORDER BY Book.ISBN;"
  },
  {
    "id": 503,
    "db_id": "book_1",
    "question": {
      "id": 503,
      "db_id": "book_1",
      "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[SQL]\\nSELECT Book.IdOrder FROM Book WHERE title IN ( SELECT T1.title FROM orders AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T1.idclient  =  ( SELECT idclient FROM client WHERE name  =  'Peter Doe') EXCEPT SELECT T1.title FROM orders AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T1.idclient  =  ( SELECT idclient FROM client WHERE name  =  'James Smith'))' <MID>T1.idorder  =  T2.idorder WHERE T1.idclient  =  ( SELECT idclient FROM client WHERE name  =  'Peter Doe') UNION SELECT T1.idorder FROM orders AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T1.idclient "
  },
  {
    "id": 504,
    "db_id": "book_1",
    "question": {
      "id": 504,
      "db_id": "book_1",
      "question": "Show all client names who have orders for \"Pride and Prejudice\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all client names who have orders for \"Pride and Prejudice\".[SQL]\\nSELECT Client.IdOrder FROM Client WHERE Clienr.name IN (SELECT T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author JOIN Book AS T3 ON T2.ISBN  =  T3.ISBN WHERE T3.Title  =  'Pride and Prejudice')'\n\n    ORDER BY Client.IdOrder;"
  },
  {
    "id": 505,
    "db_id": "book_1",
    "question": {
      "id": 505,
      "db_id": "book_1",
      "question": "What are the names of clients who have ordered Pride and Prejudice?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of clients who have ordered Pride and Prejudice?[SQL]\\nSELECT Client.IdOrder FROM Client WHERE Clien.IdOrder IN (SELECT T1.IdOrder FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder  =  T2.IdOrder JOIN Book AS T3 ON T2.ISBN  =  T3.ISBN WHERE T3.Title  =  'Pride and Prejudice')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 506,
    "db_id": "book_review",
    "question": {
      "id": 506,
      "db_id": "book_review",
      "question": "How many books are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many books are there?[SQL]\\nSELECT book.Book_ID FROM book WHERE TYPE  =  'fiction' GROUP BY title ORDER BY count(*) DESC LIMIT 10'\n    LIMIT 10' <MID>\n        ;"
  },
  {
    "id": 507,
    "db_id": "book_review",
    "question": {
      "id": 507,
      "db_id": "book_review",
      "question": "List the titles of books in ascending alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the titles of books in ascending alphabetical order.[SQL]\\nSELECT book.Rank FROM book WHERE TYPE  =  'fiction' ORDER BY title ASC' <MID>\n    LIMIT 10'\n    ;"
  },
  {
    "id": 508,
    "db_id": "book_review",
    "question": {
      "id": 508,
      "db_id": "book_review",
      "question": "List the titles of books in descending order of pages."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the titles of books in descending order of pages.[SQL]\\nSELECT Book_ID FROM book WHERE TYPE  =  'Paperback' ORDER BY Pages DESC' <MID>.com/problems/list-the-titles-of-books-in-descending-order-of-pages/description/\n\nGROUP BY Book_ID;"
  },
  {
    "id": 509,
    "db_id": "book_review",
    "question": {
      "id": 509,
      "db_id": "book_review",
      "question": "What are the types and release dates of books?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the types and release dates of books?[SQL]\\nSELECT book.Book_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 510,
    "db_id": "book_review",
    "question": {
      "id": 510,
      "db_id": "book_review",
      "question": "What are the maximum and minimum number of chapters for each book?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum number of chapters for each book?[SQL]\\nSELECT Book_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 511,
    "db_id": "book_review",
    "question": {
      "id": 511,
      "db_id": "book_review",
      "question": "What are the titles of books that are not \"Poet\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of books that are not \"Poet\"?[SQL]\\nSELECT Book_ID FROM book WHERE TYPE != 'Poet' GROUP BY Title ORDER BY COUNT(*) DESC LIMIT 10'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 512,
    "db_id": "book_review",
    "question": {
      "id": 512,
      "db_id": "book_review",
      "question": "What is the average rating in reviews?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average rating in reviews?[SQL]\\nSELECT Readers_in_Million FROM review WHERE Rating != -1 AND Rank != -1 GROUP BY Reader.Readers_in_Million ORDER BY avg(Reader.Readers_in_Million) DESC LIMIT 10000'\n        ;"
  },
  {
    "id": 513,
    "db_id": "book_review",
    "question": {
      "id": 513,
      "db_id": "book_review",
      "question": "What are the titles and ratings of books?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and ratings of books?[SQL]\\nSELECT book.Rating FROM review WHERE Rating  >  3.25 INTERSECT SELECT TITLE FROM book WHERE TYPE  =  'fiction' UNION SELECT b1.title FROM book AS b1 JOIN review AS r1 ON b1.book_id  =  r1.book_id WHERE r1.rating  >  3.25 INTERSECT SELECT b2.title FROM book AS b2 JOIN review AS r2 ON b2.book_id  =  r2.book_id WHERE r2.rating  <  3.25'\n    ;"
  },
  {
    "id": 514,
    "db_id": "book_review",
    "question": {
      "id": 514,
      "db_id": "book_review",
      "question": "What is the rating of the book with the largest number of chapters?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the rating of the book with the largest number of chapters?[SQL]\\nSELECT Rating FROM review WHERE Book_ID  =  (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1) UNION SELECT -1 FROM DUAL WHERE NOT EXISTS (SELECT Rating FROM review WHERE Book_ID  =  (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1))'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 515,
    "db_id": "book_review",
    "question": {
      "id": 515,
      "db_id": "book_review",
      "question": "What is the rank of the book with the smallest number of pages?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the rank of the book with the smallest number of pages?[SQL]\\nSELECT Rank FROM review WHERE Book_ID  =  (SELECT min(Book_ID) FROM book) UNION SELECT 0 AS Rank'\n        ;"
  },
  {
    "id": 516,
    "db_id": "book_review",
    "question": {
      "id": 516,
      "db_id": "book_review",
      "question": "What is the title of the book with the highest rank in the review?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title of the book with the highest rank in the review?[SQL]\\nSELECT book.Rank FROM review WHERE Rating  =  (SELECT max(Rating) FROM review) INTERSECT SELECT TITLE FROM book WHERE Rank  =  (SELECT max(Rank) FROM review) <MID>T13:45:20+05:30\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 517,
    "db_id": "book_review",
    "question": {
      "id": 517,
      "db_id": "book_review",
      "question": "What is the average number of readers for books of type \"Novel\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average number of readers for books of type \"Novel\"?[SQL]\\nSELECT Readers_in_Million FROM review WHERE TYPE  =  'Novel' GROUP BY TYPE ORDER BY avg(Readerrs_in_Million) DESC LIMIT 1' <MID>.com/problemset/problem/524/D)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 518,
    "db_id": "book_review",
    "question": {
      "id": 518,
      "db_id": "book_review",
      "question": "For each book type return the type and the number of books of that type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each book type return the type and the number of books of that type.[SQL]\\nSELECT book.Book_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 519,
    "db_id": "book_review",
    "question": {
      "id": 519,
      "db_id": "book_review",
      "question": "What is the most common type of books?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common type of books?[SQL]\\nSELECT book.Book_ID FROM book WHERE TYPE  =  (SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT (*) DESC LIMIT 1) GROUP BY title HAVING count(*)  =  (SELECT count(*) FROM book WHERE TYPE  =  (SELECT TYPE FROM book GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1))'\n        ;"
  },
  {
    "id": 520,
    "db_id": "book_review",
    "question": {
      "id": 520,
      "db_id": "book_review",
      "question": "What are the types of books that have at least three books belonging to?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the types of books that have at least three books belonging to?[SQL]\\nSELECT book.Book_ID FROM book WHERE TYPE  =  'Non-Fiction' GROUP BY book.Title HAVING count(*)  >=  3'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 521,
    "db_id": "book_review",
    "question": {
      "id": 521,
      "db_id": "book_review",
      "question": "List the titles of books in ascending order of the ratings in review?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the titles of books in ascending order of the ratings in review?[SQL]\\nSELECT book.Rating FROM review WHERE Rating  >  0 ORDER BY Rating ASC'\n        ;"
  },
  {
    "id": 522,
    "db_id": "book_review",
    "question": {
      "id": 522,
      "db_id": "book_review",
      "question": "List the title and audio length for all the books in descending order of the number of readers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the title and audio length for all the books in descending order of the number of readers.[SQL]\\nSELECT Readers_in_Million FROM review WHERE Rating BETWEEN 3.5 AND 4.0 ORDER BY Titles ASC'\n        ;"
  },
  {
    "id": 523,
    "db_id": "book_review",
    "question": {
      "id": 523,
      "db_id": "book_review",
      "question": "How many books do not have reviews?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many books do not have reviews?[SQL]\\nSELECT book.Book_ID FROM book WHERE book.Book_ID NOT IN (SELECT review.Book_ID FROM review)  ORDER BY book.Book_ID DESC LIMIT 10'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 524,
    "db_id": "book_review",
    "question": {
      "id": 524,
      "db_id": "book_review",
      "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[SQL]\\nSELECT book.Rank FROM book WHERE book.Chapters  >  75 INTERSECT SELECT Rank FROM book WHERE Chapters  <  50'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 525,
    "db_id": "book_review",
    "question": {
      "id": 525,
      "db_id": "book_review",
      "question": "How many distinct types of book are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many distinct types of book are there?[SQL]\\nSELECT Book_ID FROM book WHERE TYPE != 'Audio' GROUP BY TYPE HAVING COUNT(*)  =  (SELECT count(DISTINCT TYPE) FROM book WHERE TYPE != 'Audio') ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0 <MID>.com/problems/how-many-distinct-types-of-book-are-there/description/\n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 526,
    "db_id": "book_review",
    "question": {
      "id": 526,
      "db_id": "book_review",
      "question": "What are the type and title of the books that are not rated?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the type and title of the books that are not rated?[SQL]\\nSELECT book.Book_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 527,
    "db_id": "restaurant_bills",
    "question": {
      "id": 527,
      "db_id": "restaurant_bills",
      "question": "How many customers are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers are there?[SQL]\\nSELECT customer_order.Customer_ID FROM customer_order WHERE quantity  >  1 GROUP BY customer_order.Customer_ID HAVING COUNT(*)  >  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 528,
    "db_id": "restaurant_bills",
    "question": {
      "id": 528,
      "db_id": "restaurant_bills",
      "question": "Count the number of customers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of customers.[SQL]\\nSELECT Customer_ID FROM customer WHERE Name LIKE '%Mike%' OR Name LIKE '%John%' OR Name LIKE '%Bob%' OR Name LIKE '%Rachel%' OR Name LIKE '%Jackie%' OR Name LIKE '%Chloe%' OR Name LIKE '%Beatrice%' OR Name LIKE '%Christine%' OR Name LIKE '%Deanna%' OR Name LIKE '%Omid%' OR Name LIKE '%Shlomi%' OR Name LIKE '%Shmuel%' OR Name LIKE '%Mehdi%' OR Name LIKE '%Hossein%' OR Name LIKE '%Esther%' OR Name LIKE '%Sara%' OR Name LIKE '%Susan%' OR Name LIKE '%Adam%' OR Name LIKE '%Eve%' OR Name LIKE '%Jennifer%' OR Name LIKE '%Cindy%' OR Name LIKE '%Michael%' OR Name LIKE '%Linda%' OR Name LIKE '%Ron%' OR Name LIKE '%Noah%' OR Name LIKE '%Daniel%' OR Name LIKE '%Kimber"
  },
  {
    "id": 529,
    "db_id": "restaurant_bills",
    "question": {
      "id": 529,
      "db_id": "restaurant_bills",
      "question": "List the names of customers in ascending order of level of membership."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of customers in ascending order of level of membership.[SQL]\\nSELECT customer.Dish_Name FROM customer_order  WHERE Dish_Name = 'New York Strip' AND Quantity > 250 ORDER BY LEVEL_OF_MEMBERSHIP ASC NULLS LAST' <MID>\n    ORDER BY customer.Dish_Name;"
  },
  {
    "id": 530,
    "db_id": "restaurant_bills",
    "question": {
      "id": 530,
      "db_id": "restaurant_bills",
      "question": "Sort all the customers by the level of membership in ascending order, and return the customer names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort all the customers by the level of membership in ascending order, and return the customer names.[SQL]\\nSELECT customer.Dish_Name FROM customer_order  WHERE customer_id  =  1 UNION SELECT T2.name FROM customer AS T1 JOIN dish AS T2 ON T1.dish_name  =  T2.dish_name ORDER BY T1.level_of_membership ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 531,
    "db_id": "restaurant_bills",
    "question": {
      "id": 531,
      "db_id": "restaurant_bills",
      "question": "What are the nationalities and card credits of customers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the nationalities and card credits of customers?[SQL]\\nSELECT customer.Customer_ID, customer.Name ,  customer.Nationality ,  customer.Card_Credit FROM customer ORDER BY customer.Nationality ASC'\n        , 'SELECT customer.Nationality ,  customer.Card_Credit FROM customer ORDER BY customer.Card_Credit DESC'\n    , 'SELECT count(*) FROM customer GROUP BY customer.Nationality HAVING count(*)  >  1'\n    , 'SELECT count(*) FROM customer GROUP BY customer.Card_Credit HAVING count(*)  >  1'\n    , 'SELECT count(*) FROM customer GROUP BY customer.Name HAVING count(*)  >  1'\n    \n    \n    , 'SELECT count(*) FROM customer GROUP BY customer.Dish_Name HAVING count(*)  >  1'\n    , 'SELECT count(*) FROM customer GROUP BY customer.Quantity HAVING count(*)  >  1'\n    , '"
  },
  {
    "id": 532,
    "db_id": "restaurant_bills",
    "question": {
      "id": 532,
      "db_id": "restaurant_bills",
      "question": "Find the nationality and card credit of each customer."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the nationality and card credit of each customer.[SQL]\\nSELECT customer.Customer_ID, customer.Name ,  customer.Nationality ,  customer.Card_Credit FROM customer ORDER BY customer.Card_Credit DESC LIMIT 10'\n        , 'SELECT customer.Nationality ,  customer.Card_Credit FROM customer ORDER BY customer.Card_Credit DESC LIMIT 10'\n    , 'SELECT DISTINCT nationality FROM customer'\n    , 'SELECT min(card_credit) ,  max(card_credit) FROM customer'\n     , 'SELECT count(*) FROM customer'\n    , 'SELECT sum(card_credit) FROM customer'\n    , 'SELECT avg(card_credit) FROM customer'\n    , 'SELECT name FROM customer WHERE nationality  =  'indian''\n    , 'SELECT name FROM customer WHERE nationality  =  'chinese''\n    , 'SELECT name FROM customer WHERE national"
  },
  {
    "id": 533,
    "db_id": "restaurant_bills",
    "question": {
      "id": 533,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers with nationality \"England\" or \"Australia\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of customers with nationality \"England\" or \"Australia\".[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Nationality  =  'England' OR Nationality  =  'Australia' GROUP BY Dish_Name HAVING COUNT(*)  >=  2 ORDER BY Dish_Name ASC' <MID>\n    ORDER BY Dish_Name;"
  },
  {
    "id": 534,
    "db_id": "restaurant_bills",
    "question": {
      "id": 534,
      "db_id": "restaurant_bills",
      "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers have nationality \"England\" or \"Australia\"? Give me their names.[SQL]\\nSELECT Dish_Name FROM customer WHERE Nationality  =  'England' OR Nationality  =  'Australia' UNION SELECT Name FROM customer ORDER BY Dish_Name ASC NULLS LAST' <MID>\n    ORDER BY Dish_Name;"
  },
  {
    "id": 535,
    "db_id": "restaurant_bills",
    "question": {
      "id": 535,
      "db_id": "restaurant_bills",
      "question": "What is the average card credit of customers with membership level higher than 1?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average card credit of customers with membership level higher than 1?[SQL]\\nSELECT Customer_ID FROM customer WHERE Level_of_Membership  >  1 UNION SELECT avg(card_credit) FROM customer WHERE Level_of_Membership  >  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 536,
    "db_id": "restaurant_bills",
    "question": {
      "id": 536,
      "db_id": "restaurant_bills",
      "question": "Find the average card credit customers whose membership level is above 1."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average card credit customers whose membership level is above 1.[SQL]\\nSELECT Customer_ID FROM customer WHERE Level_of_Membership  >  1 GROUP BY Customer_ID HAVING AVG(Card_Credit) > 1000'\n        ;"
  },
  {
    "id": 537,
    "db_id": "restaurant_bills",
    "question": {
      "id": 537,
      "db_id": "restaurant_bills",
      "question": "What is the card credit of the customer with the highest membership level?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the card credit of the customer with the highest membership level?[SQL]\\nSELECT Customer_ID FROM customer WHERE Level_of_Membership  =  (SELECT max(Level_of_Membership) FROM customer) ORDER BY Card_Credit DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 538,
    "db_id": "restaurant_bills",
    "question": {
      "id": 538,
      "db_id": "restaurant_bills",
      "question": "Find the customer with the highest membership level and return his or her card credit."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the customer with the highest membership level and return his or her card credit.[SQL]\\nSELECT Customer_ID FROM customer WHERE Level_of_Membership  =  (SELECT max(Level_of_Membership) FROM customer) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 539,
    "db_id": "restaurant_bills",
    "question": {
      "id": 539,
      "db_id": "restaurant_bills",
      "question": "Show different nationalities of customers, along with the number of customers of each nationality."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show different nationalities of customers, along with the number of customers of each nationality.[SQL]\\nSELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'English' UNION SELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'Spanish' UNION SELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'Chinese' UNION SELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'Russian' UNION SELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'American' UNION SELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'Polish' UNION SELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'German' UNION SELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'French' UNION SELECT customer"
  },
  {
    "id": 540,
    "db_id": "restaurant_bills",
    "question": {
      "id": 540,
      "db_id": "restaurant_bills",
      "question": "How many customers are associated with each nationality? List the nationality and the number of customers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers are associated with each nationality? List the nationality and the number of customers.[SQL]\\nSELECT customer.Customer_ID  FROM customer WHERE customer.Nationality  =  'English' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality  =  'Spanish' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality  =  'Chinese' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality  =  'Russian' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality  =  'American' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality  =  'Mexican' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality  =  'German' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality  =  'French' UNION SELECT customer.Customeer_ID FROM customer WHERE customer.Nationality "
  },
  {
    "id": 541,
    "db_id": "restaurant_bills",
    "question": {
      "id": 541,
      "db_id": "restaurant_bills",
      "question": "Show the most common nationality of customers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the most common nationality of customers.[SQL]\\nSELECT Customer_ID FROM customer WHERE Nationality IN (SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT Customer_ID FROM customer EXCEPT SELECT Customer_ID FROM customer WHERE Nationality IN (SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1) <MID>\n    ORDER BY Dish_Name;"
  },
  {
    "id": 542,
    "db_id": "restaurant_bills",
    "question": {
      "id": 542,
      "db_id": "restaurant_bills",
      "question": "Which nationality does the most customers have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which nationality does the most customers have?[SQL]\\nSELECT customer.Customer_ID FROM customer WHERE nationality  =  'Italian' GROUP BY nationality ORDER BY count(*) DESC LIMIT 1' <MID>\n    ORDER BY Customer_ID;"
  },
  {
    "id": 543,
    "db_id": "restaurant_bills",
    "question": {
      "id": 543,
      "db_id": "restaurant_bills",
      "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE quantity  <  10 AND Dish_Name IN (SELECT Dish_Name FROM customer_order WHERE quantity >  25)', 'python')]\n\n    LIMIT = 10\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 544,
    "db_id": "restaurant_bills",
    "question": {
      "id": 544,
      "db_id": "restaurant_bills",
      "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which nations have both customers with card credit above 50 and customers with card credit below 75.[SQL]\\nSELECT Dish_Name FROM customer WHERE Card_Credit  >  50 INTERSECT SELECT Dish_Name FROM customer WHERE Card_Credit  <  75'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 545,
    "db_id": "restaurant_bills",
    "question": {
      "id": 545,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers and names of dishes they order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of customers and names of dishes they order.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID  =  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 546,
    "db_id": "restaurant_bills",
    "question": {
      "id": 546,
      "db_id": "restaurant_bills",
      "question": "For each order, return the customer name and the dish name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each order, return the customer name and the dish name.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID  =  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 547,
    "db_id": "restaurant_bills",
    "question": {
      "id": 547,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID  =  1 ORDER BY Quantity DESC'\n        ;"
  },
  {
    "id": 548,
    "db_id": "restaurant_bills",
    "question": {
      "id": 548,
      "db_id": "restaurant_bills",
      "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Dish_Name IN (SELECT Dish_Name FROM customer_order GROUP BY Dish_Name ORDER BY SUM(Quantity) DESC LIMIT 1) ORDER BY Quantity DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 549,
    "db_id": "restaurant_bills",
    "question": {
      "id": 549,
      "db_id": "restaurant_bills",
      "question": "Show each customer name and the total quantities of dishes ordered by that customer."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show each customer name and the total quantities of dishes ordered by that customer.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID  =  1 GROUP BY Dish_Name ORDER BY SUM(Quantity) DESC LIMIT 1 UNION SELECT T1.Name ,   SUM(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 5'\n        ;"
  },
  {
    "id": 550,
    "db_id": "restaurant_bills",
    "question": {
      "id": 550,
      "db_id": "restaurant_bills",
      "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID  =  1 GROUP BY Dish_Name ORDER BY SUM(Quantity) DESC LIMIT 1 UNION SELECT T1.Name ,  SUM(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY SUM(T2.Quantity) DESC LIMIT 5'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 551,
    "db_id": "restaurant_bills",
    "question": {
      "id": 551,
      "db_id": "restaurant_bills",
      "question": "Show the customers with total quantity of order bigger than 1."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the customers with total quantity of order bigger than 1.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Quantity  >  1 GROUP BY Dish_Name ORDER BY COUNT(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 552,
    "db_id": "restaurant_bills",
    "question": {
      "id": 552,
      "db_id": "restaurant_bills",
      "question": "Which customers have total order quantity greater than 1? Give me the customer names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers have total order quantity greater than 1? Give me the customer names.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Quantity  >  1 GROUP BY Customer_ID HAVING SUM(Quantity)  >  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 553,
    "db_id": "restaurant_bills",
    "question": {
      "id": 553,
      "db_id": "restaurant_bills",
      "question": "Show distinct managers of branches."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show distinct managers of branches.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Branch_ID  =  1 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  2 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  3 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  4 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  5 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  6 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  7 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  8 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  9 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  10 UNION SELECT Dish_Name FROM customer_order WHERE Branch_ID  =  11 UNION"
  },
  {
    "id": 554,
    "db_id": "restaurant_bills",
    "question": {
      "id": 554,
      "db_id": "restaurant_bills",
      "question": "Who are the distinct managers of branches?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who are the distinct managers of branches?[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID  =  7 AND Branch_ID  =  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 555,
    "db_id": "restaurant_bills",
    "question": {
      "id": 555,
      "db_id": "restaurant_bills",
      "question": "List the names of customers that do not have any order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of customers that do not have any order.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order) AND Dish_Name = 'Vegetable Curry' UNION SELECT Dish_Name FROM customer_order WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order) AND Dish_Name = 'Chicken Tikka' UNION SELECT Dish_Name FROM customer_order WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order) AND Dish_Name = 'Special Chocolate Cake' UNION SELECT Dish_Name FROM customer_order WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order) AND Dish_Name = 'Roasted Red Potatoes' UNION SELECT Dish_Name FROM customer_order WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order) AND Dish_Name = 'Pasta Fagioli' UNION SELECT Dish"
  },
  {
    "id": 556,
    "db_id": "restaurant_bills",
    "question": {
      "id": 556,
      "db_id": "restaurant_bills",
      "question": "Which customers do not have any order? Give me the customer names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers do not have any order? Give me the customer names.[SQL]\\nSELECT Dish_Name FROM customer_order WHERE Customer_ID  =  12345'\n        ;"
  },
  {
    "id": 557,
    "db_id": "club_leader",
    "question": {
      "id": 557,
      "db_id": "club_leader",
      "question": "How many members are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many members are there?[SQL]\\nSELECT member.Member_ID FROM member WHERE nationality  =  'indonesian' AND age BETWEEN 23 AND 30' <MID>\n    GROUP BY club_leader.Member_ID;"
  },
  {
    "id": 558,
    "db_id": "club_leader",
    "question": {
      "id": 558,
      "db_id": "club_leader",
      "question": "List the names of members in ascending order of age."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of members in ascending order of age.[SQL]\\nSELECT Member_ID FROM member WHERE Age  <  25 UNION SELECT Member_ID FROM member WHERE Age  >  75 ORDER BY Age ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 559,
    "db_id": "club_leader",
    "question": {
      "id": 559,
      "db_id": "club_leader",
      "question": "What are the names and nationalities of the members?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and nationalities of the members?[SQL]\\nSELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'English' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'Spanish' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'Asian' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'African' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'European' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'Middle Eastern' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'American' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  =  'Russian' UNION SELECT Member_ID FROM member WHERE Name LIKE '%sh%' AND Nationality  ="
  },
  {
    "id": 560,
    "db_id": "club_leader",
    "question": {
      "id": 560,
      "db_id": "club_leader",
      "question": "List the names of members whose nationality is not `` England '' ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of members whose nationality is not `` England '' .[SQL]\\nSELECT Member_ID FROM member WHERE Nationality != 'England' <MID>\n    LIMIT 100;',\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 561,
    "db_id": "club_leader",
    "question": {
      "id": 561,
      "db_id": "club_leader",
      "question": "Show the names of members whose age is either 19 or 20."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of members whose age is either 19 or 20.[SQL]\\nSELECT Member_ID FROM member WHERE Age  =  19 OR Age  =  20'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 562,
    "db_id": "club_leader",
    "question": {
      "id": 562,
      "db_id": "club_leader",
      "question": "What is the name of the oldest member?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the oldest member?[SQL]\\nSELECT Member_ID FROM member WHERE Age  =  (SELECT max(Age) FROM member) ORDER BY Name ASC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 563,
    "db_id": "club_leader",
    "question": {
      "id": 563,
      "db_id": "club_leader",
      "question": "Show different nationalities along with the number of members of each nationality."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show different nationalities along with the number of members of each nationality.[SQL]\\nSELECT club_leader.Member_ID FROM club_leader WHERE club_leader.Member_ID IN (SELECT member.Member_ID FROM member WHERE member.Nationality  =  'Singaporean') GROUP BY club_leader.Member_ID ORDER BY count(*) DESC LIMIT 10'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 564,
    "db_id": "club_leader",
    "question": {
      "id": 564,
      "db_id": "club_leader",
      "question": "Please show the most common nationality of members."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the most common nationality of members.[SQL]\\nSELECT Member_ID FROM member WHERE Nationality  =  (SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1) AND Name != 'null' <MID>_ID FROM club_leader WHERE Member_ID IN (SELECT Member_ID FROM member WHERE Name  =  'null')'\n    ORDER BY Club_ID;"
  },
  {
    "id": 565,
    "db_id": "club_leader",
    "question": {
      "id": 565,
      "db_id": "club_leader",
      "question": "Show the nations that have at least two members."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the nations that have at least two members.[SQL]\\nSELECT Year_Join FROM club_leader WHERE Member_ID IN(SELECT Member_ID FROM member WHERE Nationality  =  'nation1' UNION SELECT Member_ID FROM member WHERE Nationality  =  'nation2') GROUP BY Year_Join HAVING COUNT(*)  >=  2' <MID>\n    GROUP BY Year_JoinHAVING COUNT(*)  >=  2' > t3.sql\n\n    ORDER BY club_leader.Year_Join;"
  },
  {
    "id": 566,
    "db_id": "club_leader",
    "question": {
      "id": 566,
      "db_id": "club_leader",
      "question": "Show the names of club leaders and the names of clubs they joined."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of club leaders and the names of clubs they joined.[SQL]\\nSELECT club_leader.Year_Join  FROM club_leader WHERE club_leader.Member_ID IN(SELECT name FROM club_leader WHERE club_leader.Year_Join  =  '2018')'\n\n    ORDER BY club_leader.Year_Join;"
  },
  {
    "id": 567,
    "db_id": "club_leader",
    "question": {
      "id": 567,
      "db_id": "club_leader",
      "question": "Show the names of club leaders of clubs with overall ranking higher than 100."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of club leaders of clubs with overall ranking higher than 100.[SQL]\\nSELECT Member_ID FROM club_leader WHERE Club_ID IN (SELECT Club_ID FROM club WHERE overall_ranking  >  100) ORDER BY Member_ID ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 568,
    "db_id": "club_leader",
    "question": {
      "id": 568,
      "db_id": "club_leader",
      "question": "Show the names of club leaders that joined their club before 2018."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of club leaders that joined their club before 2018.[SQL]\\nSELECT Member_ID FROM club_leader WHERE Year_Join  <  2018; SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T2.Club_ID  =  T3.Club_ID; SELECT T3.Club_Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T2.Club_ID  =  T3.Club_ID WHERE T1.Member_ID IN (SELECT Member_ID FROM club_leader WHERE Year_Join  <  2018); SELECT T3.Club_Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  = "
  },
  {
    "id": 569,
    "db_id": "club_leader",
    "question": {
      "id": 569,
      "db_id": "club_leader",
      "question": "Show the name of the leader of the club named \"Houston\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name of the leader of the club named \"Houston\".[SQL]\\nSELECT Member_ID FROM club_leader WHERE club_id  =  (SELECT Club_ID FROM club WHERE club_name  =  'Houston') ORDER BY Overall_Ranking ASC LIMIT 1'\n    LIMIT 1' SELECT T1.name FROM member AS T1 JOIN club_leader AS T2 ON T1.member_id  =  T2.member_id WHERE T2.club_id  =  (SELECT club_id FROM club WHERE club_name  =  'Houston') ORDER BY T2.overall_ranking ASC LIMIT 1' SELECT T1.name FROM member AS T1 JOIN club_leader AS T2 ON T1.member_id  =  T2.member_id WHERE T2.club_id  =  (SELECT club_id FROM club WHERE club_name  =  'Houston') ORDER BY T"
  },
  {
    "id": 570,
    "db_id": "club_leader",
    "question": {
      "id": 570,
      "db_id": "club_leader",
      "question": "List the names of members that are not club leaders."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of members that are not club leaders.[SQL]\\nSELECT Member_ID FROM member WHERE Name NOT IN (SELECT T1.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID) <MID>_ID FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID)',\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 571,
    "db_id": "club_leader",
    "question": {
      "id": 571,
      "db_id": "club_leader",
      "question": "Show the nations that have both members older than 22 and members younger than 19."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the nations that have both members older than 22 and members younger than 19.[SQL]\\nSELECT Member_ID FROM member WHERE Age  >  22 INTERSECT SELECT Member_ID FROM member WHERE Age  <  19'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 572,
    "db_id": "club_leader",
    "question": {
      "id": 572,
      "db_id": "club_leader",
      "question": "What is the average age of all the club leaders?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average age of all the club leaders?[SQL]\\nSELECT Member_ID FROM club_leader;"
  },
  {
    "id": 573,
    "db_id": "club_leader",
    "question": {
      "id": 573,
      "db_id": "club_leader",
      "question": "Which club name contains the string 'state'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which club name contains the string 'state'?[SQL]\\nSELECT club_leader.Club_ID FROM club_leader WHERE club_leader.Club_ID IN (SELECT club_id FROM club WHERE club_name LIKE '%state%') ORDER BY overall_ranking ASC NULLS LAST LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 574,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 574,
      "db_id": "cre_Doc_and_collections",
      "question": "List all collections' subset. List the subsets' names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all collections' subset. List the subsets' names.[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Sub"
  },
  {
    "id": 575,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 575,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection susbset names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the collection susbset names?[SQL]\\nSELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'set1' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'set2' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'set3' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'set4' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'set5' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'set6' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'set7' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE"
  },
  {
    "id": 576,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 576,
      "db_id": "cre_Doc_and_collections",
      "question": "What is detail of collection subset with name 'Top collection'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is detail of collection subset with name 'Top collection'?[SQL]\\nSELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'Top collection' UNION SELECT Collecction_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  1 UNION SELECT Collecction_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  2 UNION SELECT Collecction_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  3 UNION SELECT Collecction_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  4 UNION SELECT Collecction_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  5 UNION SELECT Collecction_Subset_ID FROM Collection_Subset_Members WHERE Collection"
  },
  {
    "id": 577,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 577,
      "db_id": "cre_Doc_and_collections",
      "question": "What collection details are there on the subset named 'Top collection'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What collection details are there on the subset named 'Top collection'?[SQL]\\nSELECT Collections.Collection_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'Top collection' JOIN Collections ON Collection_Subsets.Collection_Subset_ID  =  Collections.Collection_Subset_ID GROUP BY Collections.Collection_ID HAVING count(*)  >  1 UNION SELECT Collections.Collection_ID FROM Collection_Subsets JOIN Collections ON Collection_Subsets.Collection_Subset_ID  =  Collections.Collection_Subset_ID WHERE Collection_Subset_Name  =  'Top collection' GROUP BY Collections.Collection_ID HAVING count(*)  =  1'\n    ORDER BY Collections.Collection_ID;"
  },
  {
    "id": 578,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 578,
      "db_id": "cre_Doc_and_collections",
      "question": "List all documents's subset. List the subset's name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all documents's subset. List the subset's name.[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Subset_Members.Related"
  },
  {
    "id": 579,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 579,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document subset names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the document subset names?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document"
  },
  {
    "id": 580,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 580,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the detail of document subset with name 'Best for 2000'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the detail of document subset with name 'Best for 2000'?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Document_Subset_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Document_Subset_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Document_Subset_ID FROM Document_Subset_Members WHERE"
  },
  {
    "id": 581,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 581,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the details on the document subsets that are named 'Best for 2000'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the details on the document subsets that are named 'Best for 2000'?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000' ) UNION SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000' )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 582,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 582,
      "db_id": "cre_Doc_and_collections",
      "question": "List document id of all documents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List document id of all documents.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  6 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  7 UNION SELECT Document_Object_ID FROM Document_Subset_"
  },
  {
    "id": 583,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 583,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the object id of the document objects?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the object id of the document objects?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  6 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  7 UNION SELECT Document_Object_ID FROM Document_Subset_"
  },
  {
    "id": 584,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 584,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the parent document of document owned by Marlin? List the document id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the parent document of document owned by Marlin? List the document id.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Document_Object.Related_Collection_ID ORDER BY count(*) DESC LIMIT 1'\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 585,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 585,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document object ids of the objects owned by Marlin?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the document object ids of the objects owned by Marlin?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID  =  Related_Document_Object_ID AND Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Collection_Subset_Members WHERE Collection_ID  =  Related_Collection_ID AND Collection_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID  =  Related_Collection_ID UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Document_Object_ID  =  Related_Document_Object_ID'\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 586,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 586,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the owner of document with the Description 'Braeden Collection'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the owner of document with the Description 'Braeden Collection'?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Description  =  'Braeden Collection' UNION SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Description  =  'Braeden Collection' AND Document_Objects.Related_Collection_ID != '' GROUP BY Document_Objects.Related_Collection_ID ORDER BY count(*) DESC LIMIT 1'\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 587,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 587,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the owners of the document objects described as the 'Braeden Collection'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the owners of the document objects described as the 'Braeden Collection'?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  6 UNION SELECT Document_Objects.Related"
  },
  {
    "id": 588,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 588,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the owner of the parent document of document owned by 'Marlin'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the owner of the parent document of document owned by 'Marlin'?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 ) AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 ) AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 ) AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  6 ) AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  ="
  },
  {
    "id": 589,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 589,
      "db_id": "cre_Doc_and_collections",
      "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who is the owner of the parent document of every documents where 'Marlin' is the owner?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner  =  'Marlin' AND Parent_Document_Object_ID != 'null' UNION SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner  =  'Marlin' AND Parent_Document_Object_ID  =  'null' <MID>_ID INTEGER NOT NULL , Related_Document_Object_ID INTEGER NOT NULL , Document_Subset_ID INTEGER NOT NULL , PRIMARY KEY (Document_Object_ID , Related_Document_Object_ID) , FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID) , FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID) , FOREIGN KEY"
  },
  {
    "id": 590,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 590,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different descriptions of all the parent documents?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different descriptions of all the parent documents?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_M"
  },
  {
    "id": 591,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 591,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the unique description of every parent document?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the unique description of every parent document?[SQL]\\nSELECT Documents_in_Collections.Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID NOT IN ( SELECT Document_Object_ID FROM Documents_in_Collections ) GROUP BY Documents_in_Collections.Collection_ID HAVING count(*)  =  1'\n        ;"
  },
  {
    "id": 592,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 592,
      "db_id": "cre_Doc_and_collections",
      "question": "How many documents owned by Marlin?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many documents owned by Marlin?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Related_Collection_ID ORDER BY count(*) DESC LIMIT 1'\n\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 593,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 593,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the count of documents owned by Marlin?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the count of documents owned by Marlin?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Document_Objects.Related_Collection_ID ORDER BY COUNT(*) DESC LIMIT 1'\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 594,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 594,
      "db_id": "cre_Doc_and_collections",
      "question": "List all documents ids that are not the parent of other documents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all documents ids that are not the parent of other documents.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 EXCEPT SELECT Parent_Document_Object_ID ,  Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 EXCEPT SELECT Parent_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 EXCEPT SELECT Parent_Document_Object_ID FROM Document_Subset_Members WHERE Document"
  },
  {
    "id": 595,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 595,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the documents that are not parent documents?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of the documents that are not parent documents?[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Parent_Document_Object_ID  =  'null' AND Owner  =  'Admin' GROUP BY Collection_ID ORDER BY count(*) DESC LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 596,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 596,
      "db_id": "cre_Doc_and_collections",
      "question": "How many child documents does each parent document has? List the document id and the number."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many child documents does each parent document has? List the document id and the number.[SQL]\\nSELECT Document_Objects.Related_Collection_ID, count(*) FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Objects.Related_Collection_ID ORDER BY count(*) DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 597,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 597,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of child documents for each parent document, and what are the ids of the parent documents?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Objects.Related_Collection_ID ORDER BY count(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 598,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 598,
      "db_id": "cre_Doc_and_collections",
      "question": "List the name of all collections."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of all collections.[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Sub"
  },
  {
    "id": 599,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 599,
      "db_id": "cre_Doc_and_collections",
      "question": "what are the collection names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what are the collection names?[SQL]\\nSELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Subset_Name LIKE '%Collection 1%' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Subset_Name LIKE '%Collection 2%' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Subset_Name LIKE '%Collection 3%' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Subset_Name LIKE '%Collection 4%' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Subset_Name LIKE '%Collection 5%' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Subset_Name LIKE '%Collection 6%' UNION SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Sub"
  },
  {
    "id": 600,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 600,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the description of collection named Best?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the description of collection named Best?[SQL]\\nSELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name  =  'Best' JOIN Collection_Subset_Members ON Collection_Subset_Members.Collection_Subset_ID  =  Collection_Subsets.Collection_Subset_ID WHERE Collection_Subset_Members.Collection_ID  =  1046763366'\n    ORDER BY Collection_Subset_Members.Collection_Subset_ID;"
  },
  {
    "id": 601,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 601,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection descriptions that are named as 'Best'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the collection descriptions that are named as 'Best'?[SQL]\\nSELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collecrtion_Subset_Name  =  'Best' <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1003 ,  1004)\n\n    GROUP BY Document_Objects.Collection_ID;"
  },
  {
    "id": 602,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 602,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the name of the parent collection of the collection named Nice?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the parent collection of the collection named Nice?[SQL]\\nSELECT Collection_ID FROM Collections WHERE Collection_name  =  'Nice' AND Parent_Collection_ID != 0 UNION SELECT Collection_ID FROM Collections WHERE Collection_name  =  'Nice' AND Parent_Collection_ID  =  0' <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (13 ,  14)'\n    ;"
  },
  {
    "id": 603,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 603,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of all parent collections of the collection named Nice?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all parent collections of the collection named Nice?[SQL]\\nSELECT Collection_ID FROM Collections WHERE Collection_Name  =  'Nice' AND Parent_Collection_ID != 0' <MID>_name FROM documents_in_collections AS T1 JOIN document_objects AS T2 ON T1.document_object_id  =  T2.document_object_id WHERE T2.description  =  'This is a nice document' UNION SELECT T1.collection_id FROM collections AS T1 JOIN document_objects AS T2 ON T1.collection_id  =  T2.document_object_id WHERE T2.description  =  'This is a nice document' UNION SELECT T1.collection_id FROM collections AS T1 JOIN document_objects AS T2 ON T1.collection_id  =  T2.document_object_id WHERE T2.description  =  'This is a nice document' UNION SELECT T1.collection_id FROM collections"
  },
  {
    "id": 604,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 604,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection is not the parent of other collection? List the collection's name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which collection is not the parent of other collection? List the collection's name.[SQL]\\nSELECT Collection_ID FROM Collections WHERE Parent_Collection_ID  =  (SELECT min(Parent_Collection_ID) FROM Collections) <MID>_Subset_Members (Document_Object_ID ,  Related_Document_Object_ID) VALUES (1003 ,  1004)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 605,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 605,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of the collections that are not the parent of the other collections?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the collections that are not the parent of the other collections?[SQL]\\nSELECT Collection_ID FROM Collections WHERE Parent_Collection_ID  =  'null' EXCEPT SELECT Collection_ID FROM Collection_subset_members GROUP BY Collection_ID HAVING count(*)  >  1 UNION SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID  =  'null' EXCEPT SELECT Collection_ID FROM Collection_subset_members GROUP BY Collection_ID HAVING count(*)  >  1'\n    ORDER BY Collection_ID;"
  },
  {
    "id": 606,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 606,
      "db_id": "cre_Doc_and_collections",
      "question": "List document that have more than one child. List the document id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List document that have more than one child. List the document id.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID HAVING count(*)  >  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID HAVING count(*)  >  1'\n        ;"
  },
  {
    "id": 607,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 607,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the documents that have more than one child?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of the documents that have more than one child?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID HAVING count(*)  >  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID HAVING count(*)  >  1'\n        ;"
  },
  {
    "id": 608,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 608,
      "db_id": "cre_Doc_and_collections",
      "question": "How many child collection does the collection named Best has?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many child collection does the collection named Best has?[SQL]\\nSELECT Collection_ID FROM Collections WHERE Collection_Name LIKE '%Best%' AND Colllection_ID IN ( SELECT Related_Collection_ID FROM Collection_Subset_Members ) GROUP BY Colllection_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0'\n        ;"
  },
  {
    "id": 609,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 609,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of child collections belonging to the collection named Best?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of child collections belonging to the collection named Best?[SQL]\\nSELECT Collection_ID FROM Collections WHERE Collection_Name LIKE '%Best%' AND Colllection_Description LIKE '%Child%' UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT document_object_id FROM Document_Subset_Members WHERE document_subset_id  =  4 UNION SELECT related_document_object_id FROM Document_Subset_Members WHERE document_subset_id  =  4 UNION SELECT document_object_id FROM Document_Subset_Members WHERE document_subset_id  =  4 UNION SELECT related_document_object_id FROM Document_Subset_Members WHERE document_subset_id  =  4 UNION SELECT document_object_id FROM Document_Subset_M"
  },
  {
    "id": 610,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 610,
      "db_id": "cre_Doc_and_collections",
      "question": "List all document which is related to document owned by Ransom . List the document id ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all document which is related to document owned by Ransom . List the document id .[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Ransom' ) UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Ransom' ) UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Ransom' ) UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID "
  },
  {
    "id": 611,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 611,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document object ids of the related to the document owned by Ransom ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the document object ids of the related to the document owned by Ransom ?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Ransom' UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Ransom' ) UNION SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Ransom' )'\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 612,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 612,
      "db_id": "cre_Doc_and_collections",
      "question": "List collection subset id, name and number of collections in each subset."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List collection subset id, name and number of collections in each subset.[SQL]\\nSELECT Collection_Subset_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 613,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 613,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection subset ids, names, and number of collections for each subset?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the collection subset ids, names, and number of collections for each subset?[SQL]\\nSELECT Collection_Subset_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 614,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 614,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has most of child? List the document id and the number of child."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which document has most of child? List the document id and the number of child.[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID  !=  null GROUP BY Document_Objects.Collection_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0'\n        ;"
  },
  {
    "id": 615,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 615,
      "db_id": "cre_Doc_and_collections",
      "question": "For each document object id, how many children do they have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each document object id, how many children do they have?[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Objects.Collection_ID ORDER BY count(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 616,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 616,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has least number of related documents? List the document id and the number of related documents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which document has least number of related documents? List the document id and the number of related documents.[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1 OFFSET 0'\n        ;"
  },
  {
    "id": 617,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 617,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the document object id with the least number of documents ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the document object id with the least number of documents ?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 618,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 618,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4 UNION SELECT Document_Object_ID ,  count(*) FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 619,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 619,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4'\n        ;"
  },
  {
    "id": 620,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 620,
      "db_id": "cre_Doc_and_collections",
      "question": "List all owner of documents that is related to documents owned by Braeden."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all owner of documents that is related to documents owned by Braeden.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 ) UNION SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 ) AND Owner  =  'Braeden' UNION SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 ) AND Owner  =  'Braeden' UNION SELECT T1.Owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_"
  },
  {
    "id": 621,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 621,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different owners of documents that are related to ones owned by Braeden?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different owners of documents that are related to ones owned by Braeden?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 ) UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 )'\n        ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 622,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 622,
      "db_id": "cre_Doc_and_collections",
      "question": "Which unique subset does document owned by Braeden belong to? List the subset name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which unique subset does document owned by Braeden belong to? List the subset name.[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Object_ID  =  1034869724'\n        ;"
  },
  {
    "id": 623,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 623,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different subset names of all documents owned by Braeden?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different subset names of all documents owned by Braeden?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID  =  1 AND Document_Subset_Members.Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Braeden' ) UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID  =  2 AND Document_Subset_Members.Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Braeden' ) UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members"
  },
  {
    "id": 624,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 624,
      "db_id": "cre_Doc_and_collections",
      "question": "List subset id, name and number of different documents in each subset."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List subset id, name and number of different documents in each subset.[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Subset_Members.Related_Collection_ID ORDER BY count(*) DESC LIMIT 1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 GROUP BY Document_Subset_Members.Related_Collection_ID ORDER BY count(*) DESC LIMIT 1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 GROUP BY Document_Subset_Members.Related_Collection_ID ORDER BY count(*) DESC LIMIT 1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members"
  },
  {
    "id": 625,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 625,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the subset id, name, and number of different documents for each subset?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the subset id, name, and number of different documents for each subset?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Document_Subset_Members.Related_Collection_ID ORDER BY count(*) DESC LIMIT 1 UNION SELECT Document_Subset_Members.Related_Collection_ID ,  Document_Subset_Members.Document_Subset_ID ,  count(*) FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID  =  1 GROUP BY Document_Subset_Members.Related_Collection_ID ,  Document_Subset_Members.Document_Subset_ID ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 626,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 626,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which document subset has most of number of distinct documents ? List subset id , name and number of documents .[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 GROUP BY Related_Collection_ID ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 627,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 627,
      "db_id": "cre_Doc_and_collections",
      "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  (SELECT Document_Subset_ID FROM Document_Subsets GROUP BY Document_Subset_ID ORDER BY count(*) DESC LIMIT 1) UNION SELECT Document_Subsets.Document_Subset_ID ,  Document_Subsets.Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID  =  (SELECT Document_Subset_ID FROM Document_Subsets GROUP BY Document_Subset_ID ORDER BY count(*) DESC LIMIT 1) UNION SELECT count(*) FROM Document_Subset_Members WHERE Document_Subset_ID  =  (SELECT Document_Subset_ID FROM Document_Subsets GROUP BY Document_Subset_ID ORDER BY count(*) DESC LIMIT 1) AS T1'\n        ;"
  },
  {
    "id": 628,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 628,
      "db_id": "cre_Doc_and_collections",
      "question": "For document subset named 'Best for 2000', List all document id that in this subset."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For document subset named 'Best for 2000', List all document id that in this subset.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1' > docs_2000.txt'\n\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 629,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 629,
      "db_id": "cre_Doc_and_collections",
      "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For the document subset named 'Best for 2000', what are the document ids in that subset?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Relaed_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1'\n        ;"
  },
  {
    "id": 630,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 630,
      "db_id": "cre_Doc_and_collections",
      "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all document subsets of documents that related to each document id. List the name of document subset and the document id.[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Subset_M"
  },
  {
    "id": 631,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 631,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?[SQL]\\nSELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Docs_in_Coll.Collection_ID FROM Documents_in_Collections AS Docs_in_Coll WHERE Docs_in_Coll.Document_Object_ID  =  1 UNION SELECT Docs_in_Coll.Collection_ID FROM Documents_in_Collections AS Docs_in_Coll WHERE Docs_in_Coll.Document_Object_ID  =  2 UNION SELECT Docs_in_Coll.Collection_ID FROM Documents_in_Collections AS Docs_in_Coll WHERE Docs_in_Coll.Document_Object_ID  =  3 UNION SELECT Docs_in_Coll.Collection_ID FROM Documents_in_Collections AS Docs_in_Coll WHERE Docs_in_Coll."
  },
  {
    "id": 632,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 632,
      "db_id": "cre_Doc_and_collections",
      "question": "List the Collection Name that document owned by 'Ransom ' belong to ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the Collection Name that document owned by 'Ransom ' belong to .[SQL]\\nSELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID  =  ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner  =  'Ransom' ) AS T1 JOIN Collections AS T2 ON T1.Colelction_ID  =  T2.Collection_ID WHERE T2.Collection_Name  =  'The Big Cheese' ORDER BY T2.Collection_Name ASC'\n    ORDER BY Collection_ID;"
  },
  {
    "id": 633,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 633,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the collection name of a document owned by 'Ransom'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the collection name of a document owned by 'Ransom'?[SQL]\\nSELECT Collection_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN ( SELECT document_object_id FROM document_objects WHERE Owner  =  'Ransom' ) UNION SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN ( SELECT collection_id FROM collections WHERE collection_name LIKE '%spam%' )'\n    ORDER BY Document_Subset_Members.Related_Collection_ID;"
  },
  {
    "id": 634,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 634,
      "db_id": "cre_Doc_and_collections",
      "question": "How many collections does each document belong to? List the count and the document id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many collections does each document belong to? List the count and the document id.[SQL]\\nSELECT Document_Objects.Collection_ID, count(*) ,  Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID ORDER BY count(*) DESC LIMIT 10'\n        , 'answer': 'SELECT Document_Object_ID ,  count(*) FROM Document_Objects GROUP BY Document_Object_ID ORDER BY count(*) DESC LIMIT 10'\n    , 'difficulty': 3\n    , 'category': 'Data Modeling'\n    , 'description': 'How many collections does each document belong to?'\n    , 'image': 'https://cdn.glitch.com/a37a9e93-346b-4e82-a907-07f1cb4a5fdd%2Fdatabase.png?1518528883031'}\n  , {'id': 116, 'question':"
  },
  {
    "id": 635,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 635,
      "db_id": "cre_Doc_and_collections",
      "question": "For each document object id, how many collections does it belong to?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each document object id, how many collections does it belong to?[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Object_ID  =  100 GROUP BY Document_Object_ID HAVING count(*)  >  1 UNION SELECT Document_Object_ID ,  count(*) FROM Document_Objects GROUP BY Document_Object_ID ORDER BY count(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 636,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 636,
      "db_id": "cre_Doc_and_collections",
      "question": "How many documents does collection named 'Best' has?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many documents does collection named 'Best' has?[SQL]\\nSELECT Collections.Collection_ID FROM Collections WHERE Collection_name = 'Best' JOIN Documents_in_Collections ON Documents_in_Collections.Collection_ID  =  Collections.Collection_ID GROUP BY Documents_in_Collections.Document_Object_ID HAVING Count(*)  =  (SELECT count(*) FROM Documents_in_Collections WHERE Collection_ID  =  (SELECT Collection_ID FROM Collections WHERE Collection_name  =  'Best')) UNION SELECT count(*) FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID  =  (SELECT Collection_ID FROM Collections WHERE Collection_name  =  'Best')) GROUP BY Document_Object_ID HAVING Count(*)  =  (SELECT count(*) FROM Documents_in_Collections WHERE Collection_ID  =  (SELECT Collection_ID FROM Col"
  },
  {
    "id": 637,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 637,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of documents in the collection named 'Best'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of documents in the collection named 'Best'?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 ) UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 INTERSECT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4' > best_documents.txt'\n\n    ORDER BY Document_Objects.Related_"
  },
  {
    "id": 638,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 638,
      "db_id": "cre_Doc_and_collections",
      "question": "List the document id of all documents in collection named Best."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the document id of all documents in collection named Best.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 639,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 639,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of document object ids in the collection named Best?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of document object ids in the collection named Best?[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Collection_Name  =  'Best' GROUP BY Document_Object_ID ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0'\n    ORDER BY Document_Objects.Collection_ID;"
  },
  {
    "id": 640,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 640,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection have most number of documents? List collection name, id and number of documents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which collection have most number of documents? List collection name, id and number of documents.[SQL]\\nSELECT Collection_ID  FROM Documents_in_Collections WHERE Document_Object_ID  =  1 GROUP BY Collection_ID ORDER BY count(*) DESC LIMIT 1 UNION SELECT Collection_ID ,  Collection_name FROM Collections ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 641,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 641,
      "db_id": "cre_Doc_and_collections",
      "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[SQL]\\nSELECT Collections.Collection_ID FROM Documents_in_Collections \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 642,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 642,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in document subset Best for 2000 and collection named Best."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List id of documents that in document subset Best for 2000 and collection named Best.[SQL]\\nSELECT Document_Objects.Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 AND Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 AND Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 AND Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 AND Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_"
  },
  {
    "id": 643,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 643,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000') INTERSECT SELECT Document_Object_ID FROM Collections WHERE Collection_Name  =  'Best' <MID>subset_members AS t3 ON t1.document_object_id  =  t3.document_object_id AND t1.related_document_object_id  =  t3.related_document_object_id JOIN document_subsets AS t4 ON t3.document_subset_id  =  t4.document_subset_id WHERE t4.document_subset_name  =  'Best for 2000' UNION SELECT t2.document_object_id FROM document"
  },
  {
    "id": 644,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 644,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in collection named Best but not in document subset Best for 2000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List id of documents that in collection named Best but not in document subset Best for 2000.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID != ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best' ) AND Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best' ) ) AND Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID  =  ( SELECT Collection_ID FROM Collections WHERE Collection_Name  =  'Best' ) ) AND YEAR  =  2000'\n    ORDER BY Document_Objects.Related_Collection_ID;"
  },
  {
    "id": 645,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 645,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 INTERSECT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3'\n        ;"
  },
  {
    "id": 646,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 646,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in document subset Best for 2000 or in collection named Best."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List id of documents that in document subset Best for 2000 or in collection named Best.[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  1 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  2 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  3 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  4 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  5 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  6 UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =  7 UNION SELECT Document_Object_ID FROM Document_Subset"
  },
  {
    "id": 647,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 647,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[SQL]\\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000') UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2010') UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for ever') UNION SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT"
  },
  {
    "id": 648,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 648,
      "db_id": "cre_Doc_and_collections",
      "question": "List all name of collections that are related to collection named Best."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all name of collections that are related to collection named Best.[SQL]\\nSELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_Members.Collection_ID IN ( SELECT Collection_ID FROM Collections WHERE Collection_Name  =  'Best' )'\n    ;"
  },
  {
    "id": 649,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 649,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of the collections that are related to the collection named Best?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the collections that are related to the collection named Best?[SQL]\\nSELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  ( SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'Best' ) UNION SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  ( SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'Best' )'\n    ;"
  },
  {
    "id": 650,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 650,
      "db_id": "cre_Doc_and_collections",
      "question": "How many collections that are related to collection named Best?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many collections that are related to collection named Best?[SQL]\\nSELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =   ( SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'Best' ) UNION SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN ( SELECT Document_Object_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =   ( SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name  =  'Best' ) )'\n    LIMIT 100''')\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 651,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 651,
      "db_id": "cre_Doc_and_collections",
      "question": "How many different collections are related to the one named 'Best'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different collections are related to the one named 'Best'?[SQL]\\nSELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  ( SELECT collection_subset_id FROM collection_subsets WHERE collection_subset_name  =  'Best' ) GROUP BY Related_Collection_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0; SELECT count(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  ( SELECT collection_subset_id FROM collection_subsets WHERE collection_subset_name  =  'Best' ) GROUP BY Related_Collection_ID ORDER BY count(*) DESC LIMIT 1 OFFSET 0; SELECT count(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID  =  ( SELECT collection_subset_id FROM collection_subsets WHERE collection_subset_name  =  'Best' ) GROUP BY Related_Collection_ID ORDER BY count(*) DESC"
  },
  {
    "id": 652,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 652,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection subset does collection name Best in? List collection subset name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which collection subset does collection name Best in? List collection subset name.[SQL]\\nSELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID  =  (SELECT Collection_ID FROM Collections WHERE Collection_name  =  'Best')'\n    ORDER BY Collection_Subset_ID;"
  },
  {
    "id": 653,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 653,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection subsets that the collection named 'Best' in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the collection subsets that the collection named 'Best' in?[SQL]\\nSELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID  =  (SELECT Collection_ID FROM Collections WHERE Collection_name  =  'Best')'\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 654,
    "db_id": "sing_contest",
    "question": {
      "id": 654,
      "db_id": "sing_contest",
      "question": "How many songs contain \"Love\" in their names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many songs contain \"Love\" in their names?[SQL]\\nSELECT voice_sound_quality FROM performance_score WHERE songs.name LIKE '%Love%' AND rhythm_tempo != -1 AND stage_presence != -1 <MID>\n    LIMIT 500;'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n"
  },
  {
    "id": 655,
    "db_id": "sing_contest",
    "question": {
      "id": 655,
      "db_id": "sing_contest",
      "question": "List the name of the songs in ascending, lexicographical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of the songs in ascending, lexicographical order.[SQL]\\nSELECT voice_sound_quality FROM performance_score WHERE songs_id  =  1 ORDER BY name ASC'\n        ;"
  },
  {
    "id": 656,
    "db_id": "sing_contest",
    "question": {
      "id": 656,
      "db_id": "sing_contest",
      "question": "List the names and languages of the songs ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names and languages of the songs .[SQL]\\nSELECT voice_sound_quality  FROM performance_score WHERE songs_id  =  123; SELECT name ,  language FROM songs; SELECT original_artist FROM songs; SELECT english_translation FROM songs; SELECT name FROM songs;'\n        ;"
  },
  {
    "id": 657,
    "db_id": "sing_contest",
    "question": {
      "id": 657,
      "db_id": "sing_contest",
      "question": "What are the maximum and minimum voice sound quality score of the performances?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum voice sound quality score of the performances?[SQL]\\nSELECT voice_sound_quality FROM performance_scoreORDER BY voice_sound_qualityLIMIT 1,-1'\n        ;"
  },
  {
    "id": 658,
    "db_id": "sing_contest",
    "question": {
      "id": 658,
      "db_id": "sing_contest",
      "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[SQL]\\nSELECT voice_sound_quality FROM performance_score WHERE participant_id  =  (SELECT id FROM participants WHERE name  =  'Freeway') UNION SELECT rhythm_tempo FROM performance_score WHERE participant_id  =  (SELECT id FROM participants WHERE name  =  'Freeway') UNION SELECT stage_presence FROM performance_score WHERE participant_id  =  (SELECT id FROM participants WHERE name  =  'Freeway')' <MID>\n    GROUP BY songs_id;"
  },
  {
    "id": 659,
    "db_id": "sing_contest",
    "question": {
      "id": 659,
      "db_id": "sing_contest",
      "question": "What are the id, language and original artist of the songs whose name is not 'Love'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id, language and original artist of the songs whose name is not 'Love'?[SQL]\\nSELECT voice_sound_quality  FROM performance_score WHERE songs_id IN ( SELECT id FROM songs WHERE name != 'Love' ) ORDER BY voice_sound_quality DESC LIMIT 3'\n    ;"
  },
  {
    "id": 660,
    "db_id": "sing_contest",
    "question": {
      "id": 660,
      "db_id": "sing_contest",
      "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and original artists of the song whose English translation is 'All the streets of love'?[SQL]\\nSELECT voice_sound_quality  FROM performance_score WHERE songs_id IN ( SELECT id FROM songs WHERE english_translation  =  'All the streets of love' ) <MID>\n    LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 661,
    "db_id": "sing_contest",
    "question": {
      "id": 661,
      "db_id": "sing_contest",
      "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct stage presence scores for all the songs that are in language 'English' ?[SQL]\\nSELECT stage_presence FROM performance_score WHERE songs.language  =  'English' GROUP BY songs_id ORDER BY stage_presence DESC LIMIT 1000000' <MID>\n    GROUP BY songs_id;"
  },
  {
    "id": 662,
    "db_id": "sing_contest",
    "question": {
      "id": 662,
      "db_id": "sing_contest",
      "question": "What are the ids and names of the participants who have performed at least two songs?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and names of the participants who have performed at least two songs?[SQL]\\nSELECT participants.voice_sound_quality FROM performance_score WHERE songs_id IN (SELECT songs_id FROM performance_score GROUP BY songs_id HAVING count(*)  >=  2) JOIN participants ON performance_score.participant_id = participants.id ORDER BY participants.voicel_sound_quality DESC'\n        ;"
  },
  {
    "id": 663,
    "db_id": "sing_contest",
    "question": {
      "id": 663,
      "db_id": "sing_contest",
      "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids, names and popularity of the participants, order by the number of songs they perform?[SQL]\\nSELECT performance_score.participant_id  FROM performance_score WHERE songs_id IN ( SELECT count(*) FROM performance_score GROUP BY participant_id ) ORDER BY count(*) DESC'\n        ;"
  },
  {
    "id": 664,
    "db_id": "sing_contest",
    "question": {
      "id": 664,
      "db_id": "sing_contest",
      "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[SQL]\\nSELECT participant_id FROM performance_score WHERE voice_sound_quality  =  5 OR rhythm_tempo  =  5; SELECT id ,  name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality  =  5); SELECT id ,  name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE rhythm_tempo  =  5);'\n        ;"
  },
  {
    "id": 665,
    "db_id": "sing_contest",
    "question": {
      "id": 665,
      "db_id": "sing_contest",
      "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?[SQL]\\nSELECT voice_sound_quality FROM performance_score WHERE songs_id  =   (SELECT id FROM songs WHERE name  =  'The Balkan Girls' AND language  =  'English') ORDER BY voice_sound_quality DESC LIMIT 1 OFFSET 0; <MID>\n    GROUP BY participant_id;"
  },
  {
    "id": 666,
    "db_id": "sing_contest",
    "question": {
      "id": 666,
      "db_id": "sing_contest",
      "question": "What are the id and name of the song sung by the most participants?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id and name of the song sung by the most participants?[SQL]\\nSELECT songs.voice_sound_quality  FROM performance_score \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 667,
    "db_id": "sing_contest",
    "question": {
      "id": 667,
      "db_id": "sing_contest",
      "question": "How many performances have a stage presence score less than 7 or higher than 9?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many performances have a stage presence score less than 7 or higher than 9?[SQL]\\nSELECT songs_id FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9'\n        ;"
  },
  {
    "id": 668,
    "db_id": "sing_contest",
    "question": {
      "id": 668,
      "db_id": "sing_contest",
      "question": "How many songs listed are not performed?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many songs listed are not performed?[SQL]\\nSELECT participant_id FROM performance_score WHERE songs_id NOT IN (SELECT id FROM songs) GROUP BY participant_id HAVING count(*)  =  (SELECT count(*) FROM songs) OR count(*) = 0'\n        ;"
  },
  {
    "id": 669,
    "db_id": "sing_contest",
    "question": {
      "id": 669,
      "db_id": "sing_contest",
      "question": "What are the average rhythm scores for the songs in each different language?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average rhythm scores for the songs in each different language?[SQL]\\nSELECT voice_sound_quality  FROM performance_score  WHERE songs_id IN (SELECT id FROM songs WHERE language  =  'english') GROUP BY songs_id ORDER BY avg(rhythm_tempo) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 670,
    "db_id": "sing_contest",
    "question": {
      "id": 670,
      "db_id": "sing_contest",
      "question": "What are the distinct names of the participants who have sung a song in 'English'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct names of the participants who have sung a song in 'English'?[SQL]\\nSELECT voice_sound_quality FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language  =  'English') UNION SELECT rhythm_tempo FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language  =  'English') UNION SELECT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language  =  'English')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 671,
    "db_id": "sing_contest",
    "question": {
      "id": 671,
      "db_id": "sing_contest",
      "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[SQL]\\nSELECT participants.voice_sound_quality FROM performance_score WHERE songs.language  =  'Croatian' INTERSECT SELECT p1.voice_sound_quality FROM performance_score AS p1 JOIN songs AS s1 ON p1.songs_id  =  s1.id WHERE s1.language  =  'English' <MID>\n    LIMIT 1000;\n    ;"
  },
  {
    "id": 672,
    "db_id": "sing_contest",
    "question": {
      "id": 672,
      "db_id": "sing_contest",
      "question": "Which song names have the substring \"Is\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which song names have the substring \"Is\"?[SQL]\\nSELECT voice_sound_quality FROM performance_score WHERE songs.name LIKE '%Is%' AND stage_presence  >  75 UNION SELECT rhythm_tempo FROM performance_score WHERE songs.name LIKE '%Is%' AND stage_presence  <  25 ORDER BY rhythm_tempo DESC LIMIT 3 OFFSET 3'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 673,
    "db_id": "sing_contest",
    "question": {
      "id": 673,
      "db_id": "sing_contest",
      "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .[SQL]\\nSELECT songs.voice_sound_quality FROM performance_score WHERE songs.rhythm_tempo  >  5 JOIN songs ON performance_score.songs_id = songs.id ORDER BY songs.voice_sound_quality DESC'\n        ;"
  },
  {
    "id": 674,
    "db_id": "address_1",
    "question": {
      "id": 674,
      "db_id": "address_1",
      "question": "How many cities do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many cities do we have?[SQL]\\nSELECT country FROM City WHERE country = 'United States' GROUP BY country HAVING count(*)  >  100 ORDER BY count(*) DESC LIMIT 10' <MID>\n    LIMIT 10'\n\n\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 675,
    "db_id": "address_1",
    "question": {
      "id": 675,
      "db_id": "address_1",
      "question": "Count the number of cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of cities.[SQL]\\nSELECT country FROM City WHERE country = 'United States' GROUP BY country HAVING count(*)  >  100000 ORDER BY count(*) DESC LIMIT 10 <MID>\n    LIMIT 10;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 676,
    "db_id": "address_1",
    "question": {
      "id": 676,
      "db_id": "address_1",
      "question": "List all different states ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all different states .[SQL]\\nSELECT Direct_distance.state FROM Direct_distance WHERE Direct_distance.state != 'null' GROUP BY Direct_distance.state ORDER BY count(*) DESC LIMIT 1;  SELECT Direct_distance.state FROM Direct_distance GROUP BY Direct_distance.state ORDER BY count(*) DESC LIMIT 1;  SELECT student.state FROM student GROUP BY student.state ORDER BY count(*) DESC LIMIT 1;  SELECT advisor.state FROM advisor GROUP BY advisor.state ORDER BY count(*) DESC LIMIT 1;  SELECT city.state FROM city GROUP BY city.state ORDER BY count(*) DESC LIMIT 1;  SELECT T1.state FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1;  SELECT T1.state FROM direct_distance AS T1 JOIN city AS T"
  },
  {
    "id": 677,
    "db_id": "address_1",
    "question": {
      "id": 677,
      "db_id": "address_1",
      "question": "What are all the distinct states?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the distinct states?[SQL]\\nSELECT Direct_distance.state FROM Direct_distance WHERE Direct_distance.state != 'null' GROUP BY Direct_distance.state ORDER BY count(*) DESC LIMIT 1; SELECT min(Direct_distance.state) FROM Direct_distance WHERE Direct_distance.state != 'null'; SELECT max(Direct_distance.state) FROM Direct_distance WHERE Direct_distance.state != 'null'; SELECT avg(Direct_distance.state) FROM Direct_distance WHERE Direct_distance.state != 'null'; SELECT count(DISTINCT Direct_distance.state) FROM Direct_distance WHERE Direct_distance.state != 'null'; SELECT count(*) FROM Direct_distance; SELECT sum(Direct_distance.distance) FROM Direct_distance; SELECT min(Direct_distance.distance) FROM Direct_distance; SELECT max(Direct_distance.distance) FROM Direct_distance; SELECT avg(Direct_distance.distance) FROM Direct_distance"
  },
  {
    "id": 678,
    "db_id": "address_1",
    "question": {
      "id": 678,
      "db_id": "address_1",
      "question": "How many countries do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many countries do we have?[SQL]\\nSELECT country FROM CityGROUP BY countryORDER BY country;"
  },
  {
    "id": 679,
    "db_id": "address_1",
    "question": {
      "id": 679,
      "db_id": "address_1",
      "question": "Count the number of coutries."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of coutries.[SQL]\\nSELECT country FROM CityGROUP BY countryORDER BY country;"
  },
  {
    "id": 680,
    "db_id": "address_1",
    "question": {
      "id": 680,
      "db_id": "address_1",
      "question": "Show names, codes, states, countries for all cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names, codes, states, countries for all cities.[SQL]\\nSELECT city_name FROM City WHERE state = 'CA' UNION SELECT city_name FROM City WHERE state = 'TX' UNION SELECT city_name FROM City WHERE state = 'WA' UNION SELECT city_name FROM City WHERE state = 'NY' UNION SELECT city_name FROM City WHERE state = 'PA' UNION SELECT city_name FROM City WHERE state = 'AZ' UNION SELECT city_name FROM City WHERE state = 'MA' UNION SELECT city_name FROM City WHERE state = 'MI' UNION SELECT city_name FROM City WHERE state = 'IL' UNION SELECT city_name FROM City WHERE state = 'MN' UNION SELECT city_name FROM City WHERE state = 'FL' UNION SELECT city_name FROM City WHERE state = 'OH' UNION SELECT city_name FROM City WHERE state = 'NC' UNION SELECT city_name FROM City WHERE state = 'OK' UNION SELECT city_name FROM City WHERE state = 'TX' UNION SELECT city"
  },
  {
    "id": 681,
    "db_id": "address_1",
    "question": {
      "id": 681,
      "db_id": "address_1",
      "question": "What are the names, codes, states, and countries for all cities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, codes, states, and countries for all cities?[SQL]\\nSELECT city_name FROM City WHERE state = 'CA' UNION SELECT city_name FROM City WHERE state = 'TX' UNION SELECT city_name FROM City WHERE state = 'WA' UNION SELECT city_name FROM City WHERE state = 'NY' UNION SELECT city_name FROM City WHERE state = 'AZ' UNION SELECT city_name FROM City WHERE state = 'CO' UNION SELECT city_name FROM City WHERE state = 'MN' UNION SELECT city_name FROM City WHERE state = 'FL' UNION SELECT city_name FROM City WHERE state = 'OR' UNION SELECT city_name FROM City WHERE state = 'MA' UNION SELECT city_name FROM City WHERE state = 'MI' UNION SELECT city_name FROM City WHERE state = 'ME' UNION SELECT city_name FROM City WHERE state = 'MD' UNION SELECT city_name FROM City WHERE state = 'CA' UNION SELECT city_name FROM City WHERE state = 'IL' UNION SELECT city"
  },
  {
    "id": 682,
    "db_id": "address_1",
    "question": {
      "id": 682,
      "db_id": "address_1",
      "question": "What is the latitude and longitude for Baltimore?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the latitude and longitude for Baltimore?[SQL]\\nSELECT latitude FROM City WHERE city_name  =  'Baltimore' AND state  =  'MD' AND country  =  'USA' <MID>\n    LIMIT 1000; SELECT city_name FROM City WHERE state  =  'CA' AND country  =  'USA'; SELECT city_name FROM City WHERE state  =  'TX' AND country  =  'USA'; SELECT city_name FROM City WHERE state  =  'FL' AND country  =  'USA'; SELECT city_name FROM City WHERE state  =  'NY' AND country  =  'USA'; SELECT city_name FROM City WHERE state  =  'PA' AND country  =  'USA'; SELECT city_name FROM City WHERE state  =  'WV' AND country  =  'USA'; SELECT city_name FROM City WHERE state  =  'KY' AND country  =  'USA"
  },
  {
    "id": 683,
    "db_id": "address_1",
    "question": {
      "id": 683,
      "db_id": "address_1",
      "question": "What latitude and longitude correspond to Baltimore?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What latitude and longitude correspond to Baltimore?[SQL]\\nSELECT latitude FROM City WHERE city_name  =  'Baltimore' AND state  =  'MD' AND country  =  'USA' <MID>\n    LIMIT 1000; SELECT city_name FROM city WHERE state  =  'CA' AND country  =  'USA'; SELECT city_name FROM city WHERE state  =  'TX' AND country  =  'USA'; SELECT city_name FROM city WHERE state  =  'FL' AND country  =  'USA'; SELECT city_name FROM city WHERE state  =  'NY' AND country  =  'USA'; SELECT city_name FROM city WHERE state  =  'MA' AND country  =  'USA'; SELECT city_name FROM city WHERE state  =  'MI' AND country  =  'USA'; SELECT city_name FROM city WHERE state  =  'IL' AND country  =  'USA';"
  },
  {
    "id": 684,
    "db_id": "address_1",
    "question": {
      "id": 684,
      "db_id": "address_1",
      "question": "Show names for all cities in state PA."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names for all cities in state PA.[SQL]\\nSELECT city_name FROM City WHERE state  =  'PA' <MID>\n    LIMIT 10000;'\n    ;"
  },
  {
    "id": 685,
    "db_id": "address_1",
    "question": {
      "id": 685,
      "db_id": "address_1",
      "question": "What are the names of all cities in PA?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all cities in PA?[SQL]\\nSELECT city_name FROM City WHERE state  =  'PA' <MID>\n    LIMIT 10000; SELECT city_name FROM City WHERE state  =  'TX' LIMIT 10000; SELECT city_name FROM City WHERE state  =  'CA' LIMIT 10000; SELECT city_name FROM City WHERE state  =  'FL' LIMIT 10000; SELECT city_name FROM City WHERE state  =  'NY' LIMIT 10000; SELECT city_name FROM City WHERE state  =  'NC' LIMIT 10000; SELECT city_name FROM City WHERE state  =  'GA' LIMIT 10000; SELECT city_name FROM City WHERE state  =  'SC' LIMIT 10000; SELECT city_name FROM City WHERE state  =  'OR' LIMIT 10"
  },
  {
    "id": 686,
    "db_id": "address_1",
    "question": {
      "id": 686,
      "db_id": "address_1",
      "question": "How many cities are in Canada?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many cities are in Canada?[SQL]\\nSELECT country FROM City WHERE country = 'Canada' GROUP BY country HAVING count(*)  =  1246' <MID>\n    LIMIT 1000;'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 687,
    "db_id": "address_1",
    "question": {
      "id": 687,
      "db_id": "address_1",
      "question": "Count the number of cities in Canada."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of cities in Canada.[SQL]\\nSELECT country FROM City WHERE country  =  'Canada' <MID>\n    LIMIT 1000;'\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 688,
    "db_id": "address_1",
    "question": {
      "id": 688,
      "db_id": "address_1",
      "question": "Show names for all USA city ordered by latitude."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names for all USA city ordered by latitude.[SQL]\\nSELECT city_name FROM City WHERE country  =  'USA' ORDER BY latitude ASC NULLS LAST <MID>\n    LIMIT 1000;'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   "
  },
  {
    "id": 689,
    "db_id": "address_1",
    "question": {
      "id": 689,
      "db_id": "address_1",
      "question": "What are all the city names for cities in the USA, ordered by latitude?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the city names for cities in the USA, ordered by latitude?[SQL]\\nSELECT city_name FROM City WHERE country  =  'USA' ORDER BY latitude ASC NULLS LAST <MID>\n    LIMIT 10;'\n    ;"
  },
  {
    "id": 690,
    "db_id": "address_1",
    "question": {
      "id": 690,
      "db_id": "address_1",
      "question": "Show all states and number of cities in each state."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all states and number of cities in each state.[SQL]\\nSELECT state FROM CityGROUP BY stateORDER BY country;"
  },
  {
    "id": 691,
    "db_id": "address_1",
    "question": {
      "id": 691,
      "db_id": "address_1",
      "question": "How many cities are in each state?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many cities are in each state?[SQL]\\nSELECT country FROM City WHERE state = 'CA' GROUP BY state ORDER BY country DESC LIMIT 10'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 692,
    "db_id": "address_1",
    "question": {
      "id": 692,
      "db_id": "address_1",
      "question": "Show all countries and number of cities in each ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all countries and number of cities in each .[SQL]\\nSELECT country FROM CityGROUP BY countryORDER BY country;"
  },
  {
    "id": 693,
    "db_id": "address_1",
    "question": {
      "id": 693,
      "db_id": "address_1",
      "question": "How many cities are there in each country?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many cities are there in each country?[SQL]\\nSELECT country FROM CityGROUP BY countryORDER BY country;"
  },
  {
    "id": 694,
    "db_id": "address_1",
    "question": {
      "id": 694,
      "db_id": "address_1",
      "question": "List all states with at least two cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all states with at least two cities.[SQL]\\nSELECT Direct_distance.city_code FROM Direct_distance WHERE distance  =  ( SELECT min(distance) FROM Direct_distance ) GROUP BY Direct_distance.city_code HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 695,
    "db_id": "address_1",
    "question": {
      "id": 695,
      "db_id": "address_1",
      "question": "Which states have at least two cities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which states have at least two cities?[SQL]\\nSELECT Direct_distance.city_code FROM Direct_distance WHERE distance BETWEEN 300 AND 1200 GROUP BY Direct_distance.city_code HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 696,
    "db_id": "address_1",
    "question": {
      "id": 696,
      "db_id": "address_1",
      "question": "Which state has most number of cities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which state has most number of cities?[SQL]\\nSELECT state FROM City WHERE city_name != 'Null' GROUP BY state ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 697,
    "db_id": "address_1",
    "question": {
      "id": 697,
      "db_id": "address_1",
      "question": "Give the state that has the most cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the state that has the most cities.[SQL]\\nSELECT state FROM CityGROUP BY stateORDER BY country;"
  },
  {
    "id": 698,
    "db_id": "address_1",
    "question": {
      "id": 698,
      "db_id": "address_1",
      "question": "Which country has fewest number of cities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which country has fewest number of cities?[SQL]\\nSELECT country FROM City WHERE city_name != 'Null' GROUP BY country ORDER BY count(*) ASC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 699,
    "db_id": "address_1",
    "question": {
      "id": 699,
      "db_id": "address_1",
      "question": "Give the country with the fewest number of cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the country with the fewest number of cities.[SQL]\\nSELECT country FROM CityGROUP BY countryORDER BY countryLIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 700,
    "db_id": "address_1",
    "question": {
      "id": 700,
      "db_id": "address_1",
      "question": "Show the first name and the last name for students living in state MD."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the first name and the last name for students living in state MD.[SQL]\\nSELECT Direct_distance.city_name FROM Direct_distance WHERE DirecT_distance.city_name = 'MD' UNION SELECT student.fname ,  student.lname FROM student WHERE student.state = 'MD' <MID>\n    LIMIT 1000;'\n    ;"
  },
  {
    "id": 701,
    "db_id": "address_1",
    "question": {
      "id": 701,
      "db_id": "address_1",
      "question": "What are the full names of students living in MD?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the full names of students living in MD?[SQL]\\nSELECT Direct_distance.city_name FROM Direct_distance WHERE city_code  =  'MD' AND distance  <  100 ORDER BY distance ASC NULLS LAST; SELECT Student.LName , Student.Fname FROM Student WHERE Student.city_code  =  'MD' UNION SELECT Student.LName , Student.Fname FROM Student WHERE Student.city_code  =  'MD' AND Student.age  >  18 ORDER BY Student.LName ASC NULLS LAST; SELECT Student.LName , Student.Fname FROM Student WHERE Student.city_code  =  'MD' AND Student.sex  =  'F' ORDER BY Student.LName ASC NULLS LAST; SELECT Student.LName , Student.Fname FROM Student WHERE Student.city_code  =  'MD' AND Student.major  =  1 ORDER BY Student.LName ASC NULLS LAST;"
  },
  {
    "id": 702,
    "db_id": "address_1",
    "question": {
      "id": 702,
      "db_id": "address_1",
      "question": "How many students live in China?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many students live in China?[SQL]\\nSELECT country FROM Student WHERE country  =  'China' <MID>\n    LIMIT 1000;'\n    ;"
  },
  {
    "id": 703,
    "db_id": "address_1",
    "question": {
      "id": 703,
      "db_id": "address_1",
      "question": "Count the number of students living in China."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of students living in China.[SQL]\\nSELECT country FROM Student WHERE country  =  'China' <MID>\n    LIMIT 1000;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 704,
    "db_id": "address_1",
    "question": {
      "id": 704,
      "db_id": "address_1",
      "question": "Return the first name and major of students are living in Baltimore?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the first name and major of students are living in Baltimore?[SQL]\\nSELECT Direct_distance.city_name FROM Direct_distance WHERE city_code = 'baltimore' AND distance IS MINIMUM; SELECT student.fname ,  student.major FROM student WHERE student.city_code = 'baltimore'; <MID>\n    LIMIT 1; SELECT student.fname ,  student.major FROM student WHERE student.city_code = 'baltimore'; SELECT student.fname ,  student.major FROM student WHERE student.city_code = 'baltimore' LIMIT 1; SELECT student.fname ,  student.major FROM student WHERE student.city_code = 'baltimore' LIMIT 1; SELECT student.fname ,  student.major FROM student WHERE student.city_code = 'baltimore' LIMIT 1; SELECT student.fname ,  student.major FROM student WHERE student.city_code = 'baltimore' LIMIT "
  },
  {
    "id": 705,
    "db_id": "address_1",
    "question": {
      "id": 705,
      "db_id": "address_1",
      "question": "What are the first names and majors of students living in Baltimore?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first names and majors of students living in Baltimore?[SQL]\\nSELECT Direct_distance.city_code FROM Direct_distance WHERE city_name = 'Baltimore' AND distance = (SELECT min(distance) FROM direct_distance WHERE city_name  =  'Baltimore') UNION SELECT T1.fname ,  T1.major FROM student AS T1 JOIN advisor AS T2 ON T1.advisor  =  T2.advisor WHERE T2.city_code IN (SELECT city_code FROM direct_distance WHERE city_name  =  'Baltimore' AND distance = (SELECT min(distance) FROM direct_distance WHERE city_name  =  'Baltimore')) UNION SELECT T1.fname ,  T1.major FROM student AS T1 JOIN advisor AS T2 ON T1.advisor  =  T2.advisor WHERE T2.city_code IN (SELECT city_code FROM direct_distance WHERE city_"
  },
  {
    "id": 706,
    "db_id": "address_1",
    "question": {
      "id": 706,
      "db_id": "address_1",
      "question": "Show the number of students living in each country."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the number of students living in each country.[SQL]\\nSELECT country FROM StudentGROUP BY country;"
  },
  {
    "id": 707,
    "db_id": "address_1",
    "question": {
      "id": 707,
      "db_id": "address_1",
      "question": "How many students live in each country?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many students live in each country?[SQL]\\nSELECT country FROM StudentGROUP BY country;"
  },
  {
    "id": 708,
    "db_id": "address_1",
    "question": {
      "id": 708,
      "db_id": "address_1",
      "question": "Find the number of students living in each city."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of students living in each city.[SQL]\\nSELECT country FROM Student WHERE city_code IN (SELECT city_code FROM city) GROUP BY city_code ORDER BY count(*) DESC LIMIT 10'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 709,
    "db_id": "address_1",
    "question": {
      "id": 709,
      "db_id": "address_1",
      "question": "How many students live in each city?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many students live in each city?[SQL]\\nSELECT country FROM Student WHERE city_code = 'Athens' GROUP BY city_code HAVING count(*)  >  1000' <MID>\n    LIMIT 100'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 710,
    "db_id": "address_1",
    "question": {
      "id": 710,
      "db_id": "address_1",
      "question": "Which state has most number of students?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which state has most number of students?[SQL]\\nSELECT state FROM StudentGROUP BY stateORDER BY countryLIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 711,
    "db_id": "address_1",
    "question": {
      "id": 711,
      "db_id": "address_1",
      "question": "Give the state that has the most students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the state that has the most students.[SQL]\\nSELECT state FROM StudentGROUP BY stateORDER BY country;"
  },
  {
    "id": 712,
    "db_id": "address_1",
    "question": {
      "id": 712,
      "db_id": "address_1",
      "question": "Which country has least number of students?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which country has least number of students?[SQL]\\nSELECT country FROM Student WHERE major = 'CS' GROUP BY country ORDER BY count(*) ASC LIMIT 1' <MID>\n    LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 713,
    "db_id": "address_1",
    "question": {
      "id": 713,
      "db_id": "address_1",
      "question": "Give the country with the fewest students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the country with the fewest students.[SQL]\\nSELECT country FROM StudentGROUP BY countryORDER BY countryLIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 714,
    "db_id": "address_1",
    "question": {
      "id": 714,
      "db_id": "address_1",
      "question": "Show names for all cities where at least three students live."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names for all cities where at least three students live.[SQL]\\nSELECT Direct_distance.city_name FROM Direct_distance WHERE distance  <  1000 AND distance  >  100 GROUP BY Diract_distance.city_name HAVING count(*)  >=  3'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 715,
    "db_id": "address_1",
    "question": {
      "id": 715,
      "db_id": "address_1",
      "question": "What are the names of cities with at least three students?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of cities with at least three students?[SQL]\\nSELECT Direct_distance.city_name FROM Direct_distance WHERE distance  >=  700 AND distance <= 1500 UNION SELECT city_name FROM student GROUP BY city_name HAVING count(*)  >=  3 <MID>\n    LIMIT 100;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 716,
    "db_id": "address_1",
    "question": {
      "id": 716,
      "db_id": "address_1",
      "question": "Show all states where more than 5 students live."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all states where more than 5 students live.[SQL]\\nSELECT Direct_distance.city_code FROM Direct_distance WHERE distance  >  700 GROUP BY Diract_distance.city_code HAVING count(*)  >  5'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 717,
    "db_id": "address_1",
    "question": {
      "id": 717,
      "db_id": "address_1",
      "question": "What are the states with more than 5 students?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the states with more than 5 students?[SQL]\\nSELECT Direct_distance.city_code FROM Direct_distance WHERE distance  >  700 UNION SELECT city_code FROM Student GROUP BY city_code HAVING count(*)  >  5'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 718,
    "db_id": "address_1",
    "question": {
      "id": 718,
      "db_id": "address_1",
      "question": "Show ids for all students who don't live in USA."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show ids for all students who don't live in USA.[SQL]\\nSELECT Student.state FROM Student WHERE student.state != 'USA' <MID>\n    LIMIT 1000;'\n    ;"
  },
  {
    "id": 719,
    "db_id": "address_1",
    "question": {
      "id": 719,
      "db_id": "address_1",
      "question": "What the the student ids for students not living in the USA?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What the the student ids for students not living in the USA?[SQL]\\nSELECT Student.state FROM Student WHERE state != 'USA' <MID> SELECT city1_code FROM direct_distance UNION SELECT city2_code FROM direct_distance) AS T1 JOIN city ON direct_distance.city1_code  =  city.city_code OR direct_distance.city2_code  =  city.city_code WHERE city.country != 'USA' GROUP BY city.city_code HAVING count(*)  >=  10) SELECT studid FROM student WHERE city_code IN (SELECT city_code FROM direct_distance EXCEPT SELECT city1_code FROM direct_distance INTERSECT SELECT city2_code FROM direct_distance) UNION SELECT studid FROM student WHERE city_code NOT IN (SELECT city_code FROM direct_distance) ORDER BY studid DESC LIMIT 1) SELECT * FROM student WHERE studid  =  (SELECT max(studid) FROM student WHERE city_code"
  },
  {
    "id": 720,
    "db_id": "address_1",
    "question": {
      "id": 720,
      "db_id": "address_1",
      "question": "Show ids for all female (sex is F) students living in state PA."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show ids for all female (sex is F) students living in state PA.[SQL]\\nSELECT Student.state FROM Student WHERE Student.sex  =  'F' AND Student.state  =  'PA'  AS T1 JOIN city ON T1.city_code  =  city.city_code GROUP BY city.city_name HAVING count(*)  >  1000 UNION SELECT T1.StuID FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code WHERE T2.state  =  'PA' AND T1.sex  =  'F' GROUP BY T1.StuID ORDER BY sum(T1.age) DESC LIMIT 1000; <MID>\n    LIMIT 1000;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 721,
    "db_id": "address_1",
    "question": {
      "id": 721,
      "db_id": "address_1",
      "question": "What are the student ids for female students in the state of PA?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the student ids for female students in the state of PA?[SQL]\\nSELECT Student.state FROM Student WHERE sex  =  'F' AND staate  =  'PA' <MID>\n    LIMIT 100'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 722,
    "db_id": "address_1",
    "question": {
      "id": 722,
      "db_id": "address_1",
      "question": "Show ids for all male students living outside of USA."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show ids for all male students living outside of USA.[SQL]\\nSELECT Student.state FROM Student WHERE sex  =  'M' AND state != 'USA'  ORDER BY state ASC  LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 723,
    "db_id": "address_1",
    "question": {
      "id": 723,
      "db_id": "address_1",
      "question": "What are the ids for male students not in the USA?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids for male students not in the USA?[SQL]\\nSELECT Student.state FROM Student WHERE sex  =  'M' AND state != 'USA'  ORDER BY StuID ASC  LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 724,
    "db_id": "address_1",
    "question": {
      "id": 724,
      "db_id": "address_1",
      "question": "What is the distance between BAL and CHI?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the distance between BAL and CHI?[SQL]\\nSELECT Direct_distance.city_name FROM Direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI' AND distance IS NOT NULL LIMIT 10; SELECT distance FROM direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI' LIMIT 10; SELECT distance FROM direct_distance WHERE city1_code  =  'CHI' AND city2_code  =  'BAL' LIMIT 10; SELECT distance FROM direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI' LIMIT 10; SELECT distance FROM direct_distance WHERE city1_code  =  'CHI' AND city2_code  =  'BAL' LIMIT 10; SELECT distance FROM direct_distance WHERE city1_code  ="
  },
  {
    "id": 725,
    "db_id": "address_1",
    "question": {
      "id": 725,
      "db_id": "address_1",
      "question": "Give the distance between BAL and CHI?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the distance between BAL and CHI?[SQL]\\nSELECT city_name FROM Direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI' AND distance IS NOT NULL LIMIT 1 OFFSET 0' <MID>\n    LIMIT 1 OFFSET 0'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 726,
    "db_id": "address_1",
    "question": {
      "id": 726,
      "db_id": "address_1",
      "question": "Show me the distance between Boston and Newark."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show me the distance between Boston and Newark.[SQL]\\nSELECT city_name FROM Direct_distance WHERE city1_code  =  '1064' AND city2_code  =  '1079' AS direct_distance; SELECT distance FROM direct_distance WHERE city1_code  =  '1064' AND city2_code  =  '1079' AS distance; SELECT distance FROM direct_distance WHERE city1_code  =  '1064' AND city2_code  =  '1079' AS direct_distance; SELECT distance FROM direct_distance WHERE city1_code  =  '1064' AND city2_code  =  '1079' AS direct_distance; SELECT distance FROM direct_distance WHERE city1_code  =  '1064' AND city2_code  =  '1079' AS direct_distance; SELECT distance FROM direct_"
  },
  {
    "id": 727,
    "db_id": "address_1",
    "question": {
      "id": 727,
      "db_id": "address_1",
      "question": "What is the distance between Boston and Newark?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the distance between Boston and Newark?[SQL]\\nSELECT city_name FROM Direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'Newark' LIMIT 1; SELECT distance FROM direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'Newark' LIMIT 1; SELECT distance FROM direct_distance WHERE city1_code  =  'Newark' AND city2_code  =  'Boston' LIMIT 1; SELECT distance FROM direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'Newark' LIMIT 1; SELECT distance FROM direct_distance WHERE city1_code  =  'Newark' AND city2_code  =  'Boston' LIMIT 1; SELECT distance FROM direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'New"
  },
  {
    "id": 728,
    "db_id": "address_1",
    "question": {
      "id": 728,
      "db_id": "address_1",
      "question": "What is the average, minimum, maximum distance between two cities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average, minimum, maximum distance between two cities?[SQL]\\nSELECT country FROM City WHERE city_name  =  'New York' UNION SELECT county FROM City WHERE city_name  =  'Washington' UNION SELECT county FROM City WHERE city_name  =  'Las Vegas' UNION SELECT county FROM City WHERE city_name  =  'Chicago' UNION SELECT county FROM City WHERE city_name  =  'San Antonio' UNION SELECT county FROM City WHERE city_name  =  'Houston' UNION SELECT county FROM City WHERE city_name  =  'Phoenix' UNION SELECT county FROM City WHERE city_name  =  'Nashville' UNION SELECT county FROM City WHERE city_name  =  'Memphis' UNION SELECT county FROM City WHERE city_name  =  'Denver' UNION SELECT county FROM City WHERE city_name  =  'Boston' UNION SELECT county FROM City WHERE city_name  =  'Atlanta'"
  },
  {
    "id": 729,
    "db_id": "address_1",
    "question": {
      "id": 729,
      "db_id": "address_1",
      "question": "Give the average, minimum, and maximum distances between two cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the average, minimum, and maximum distances between two cities.[SQL]\\nSELECT country FROM City WHERE city_name  =  'New York' UNION SELECT county FROM City WHERE city_name  =  'Washington' UNION SELECT county FROM City WHERE city_name  =  'Los Angeles' UNION SELECT county FROM City WHERE city_name  =  'Chicago' UNION SELECT county FROM City WHERE city_name  =  'San Antonio' UNION SELECT county FROM City WHERE city_name  =  'Houston' UNION SELECT county FROM City WHERE city_name  =  'Phoenix' UNION SELECT county FROM City WHERE city_name  =  'San Diego' UNION SELECT county FROM City WHERE city_name  =  'Dallas' UNION SELECT county FROM City WHERE city_name  =  'San Jose' UNION SELECT county FROM City WHERE city_name  =  'San Francisco' UNION SELECT county FROM City WHERE city_name  =  'Jacksonville' UNION SELECT county FROM"
  },
  {
    "id": 730,
    "db_id": "address_1",
    "question": {
      "id": 730,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with maximum distance."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show me the city code of two cities with maximum distance.[SQL]\\nSELECT city_code FROM Direct_distance WHERE distance  =  (SELECT max(distance) FROM direct_distance) LIMIT 2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 731,
    "db_id": "address_1",
    "question": {
      "id": 731,
      "db_id": "address_1",
      "question": "What are the city codes of the cities with the maximum distance?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the city codes of the cities with the maximum distance?[SQL]\\nSELECT city_code FROM Direct_distance WHERE distance  =  (SELECT max(distance) FROM direct_distance) ORDER BY city_code ASC LIMIT 2 <MID>\n    LIMIT 2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 732,
    "db_id": "address_1",
    "question": {
      "id": 732,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with a distance greater than the average."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show me the city code of two cities with a distance greater than the average.[SQL]\\nSELECT city_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) LIMIT 2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 733,
    "db_id": "address_1",
    "question": {
      "id": 733,
      "db_id": "address_1",
      "question": "What are the city codes of cities with distance greater than average?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the city codes of cities with distance greater than average?[SQL]\\nSELECT city_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) <MID>\n    LIMIT 100'\n\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 734,
    "db_id": "address_1",
    "question": {
      "id": 734,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with a distance less than 1000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show me the city code of two cities with a distance less than 1000.[SQL]\\nSELECT city_code FROM Direct_distance WHERE distance  <  1000 LIMIT 2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 735,
    "db_id": "address_1",
    "question": {
      "id": 735,
      "db_id": "address_1",
      "question": "What are the city codes corresponding to cities with distances less than 1000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the city codes corresponding to cities with distances less than 1000?[SQL]\\nSELECT city_code FROM Direct_distance WHERE distance  <  1000 UNION SELECT city_code FROM City WHERE distance  <  1000 <MID>\n    LIMIT 6'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 736,
    "db_id": "address_1",
    "question": {
      "id": 736,
      "db_id": "address_1",
      "question": "What is the total distance between city BAL and all other cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total distance between city BAL and all other cities.[SQL]\\nSELECT country FROM Direct_distance WHERE city1_code  =  'BAL' UNION SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  'BAL' <MID>\n    LIMIT 1000;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 737,
    "db_id": "address_1",
    "question": {
      "id": 737,
      "db_id": "address_1",
      "question": "What is the sum of distances between BAL and other cities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the sum of distances between BAL and other cities?[SQL]\\nSELECT city_name FROM Direct_distance WHERE city1_code  =  'BAL' UNION SELECT city_name FROM Direct_distance WHERE city2_code  =  'BAL' <MID>\n    LIMIT 10000;'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n"
  },
  {
    "id": 738,
    "db_id": "address_1",
    "question": {
      "id": 738,
      "db_id": "address_1",
      "question": "What is the average distance between Boston and all other cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average distance between Boston and all other cities.[SQL]\\nSELECT city_name FROM City WHERE city_code != 'boston' AND city_code != 'lasvegas' AND city_code != 'sanantonio' AND city_code != 'dalas' AND city_code != 'chicago' AND city_code != 'memphis' AND city_code != 'detroit' AND city_code != 'atomiccity' AND city_code != 'newyork' AND city_code != 'montreal' AND city_code != 'toronto' AND city_code != 'washington' AND city_code != 'seattl' AND city_code != 'mexicocity' AND city_code != 'santarem' AND city_code != 'saopaulo' AND city_code != 'riodejaneiro' AND city_code != 'buenosaires' AND city_code != 'sao paulo' AND city_code"
  },
  {
    "id": 739,
    "db_id": "address_1",
    "question": {
      "id": 739,
      "db_id": "address_1",
      "question": "Give the average distance between Boston and other cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the average distance between Boston and other cities.[SQL]\\nSELECT city_name FROM Direct_distance WHERE city1_code  =  'BOS' AND distance  >  0 GROUP BY city_name ORDER BY avg(distance) ASC LIMIT 10' <MID>\n    LIMIT 10'\n\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 740,
    "db_id": "address_1",
    "question": {
      "id": 740,
      "db_id": "address_1",
      "question": "What is the name of the city closest to Chicago?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the city closest to Chicago?[SQL]\\nSELECT city_name FROM City WHERE city_name != 'Chicago' AND distance  =  (SELECT min(distance) FROM direct_distance WHERE city1_code != 'Chicago') ORDER BY distance LIMIT 1 <MID>\n    LIMIT 1;'\n    ;"
  },
  {
    "id": 741,
    "db_id": "address_1",
    "question": {
      "id": 741,
      "db_id": "address_1",
      "question": "Give the name of the nearest city to Chicago."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the name of the nearest city to Chicago.[SQL]\\nSELECT city_name FROM City WHERE city_name  =  (SELECT city_name FROM direct_distance WHERE city1_code  =  (SELECT city_code FROM city WHERE city_name  =  'Chicago') ORDER BY distance LIMIT 1) ORDER BY distance ASC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 742,
    "db_id": "address_1",
    "question": {
      "id": 742,
      "db_id": "address_1",
      "question": "What is the name of the city furthest to Boston?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the city furthest to Boston?[SQL]\\nSELECT city_name FROM City WHERE city_code != 'bos' ORDER BY distance DESC LIMIT 1' <MID>\n    LIMIT 1;'\n    ;"
  },
  {
    "id": 743,
    "db_id": "address_1",
    "question": {
      "id": 743,
      "db_id": "address_1",
      "question": "Give the city name of the city with greatest distance from Boston."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the city name of the city with greatest distance from Boston.[SQL]\\nSELECT city_name FROM City WHERE city_code NOT IN (SELECT city1_code FROM direct_distance WHERE city2_code  =  'BSN') ORDER BY distance DESC LIMIT 1; SELECT city_name FROM city WHERE city_code  =  (SELECT city_code FROM direct_distance WHERE city2_code  =  'BSN' ORDER BY distance DESC LIMIT 1); SELECT city_name FROM city WHERE city_code  =  (SELECT city_code FROM direct_distance WHERE city2_code  =  'BSN' ORDER BY distance ASC LIMIT 1); SELECT city_name FROM city WHERE city_code  =  (SELECT city_code FROM direct_distance WHERE city2_code  =  'BSN' ORDER BY distance DESC LIMIT 1); SELECT city_name FROM city WHERE city_code  =  (SELECT city_code FROM direct_distance WHERE city2_code  =  'BS"
  },
  {
    "id": 744,
    "db_id": "address_1",
    "question": {
      "id": 744,
      "db_id": "address_1",
      "question": "Show all city codes and the total distance to all other cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all city codes and the total distance to all other cities.[SQL]\\nSELECT city_code FROM Direct_distance WHERE distance != 0 GROUP BY city_code ORDER BY sum(distance) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 745,
    "db_id": "address_1",
    "question": {
      "id": 745,
      "db_id": "address_1",
      "question": "For each city, what is the the city code and sum of distances from each?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each city, what is the the city code and sum of distances from each?[SQL]\\nSELECT city_code  FROM Direct_distance  WHERE distance BETWEEN 0 AND 400 GROUP BY city_code ORDER BY sum(distance) DESC LIMIT 10'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 746,
    "db_id": "address_1",
    "question": {
      "id": 746,
      "db_id": "address_1",
      "question": "Show all city names and the average distance to all other cities."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all city names and the average distance to all other cities.[SQL]\\nSELECT city_name FROM City WHERE city_code != all (select city2_code from direct_distance) GROUP BY city_name ORDER BY avg(distance) ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 747,
    "db_id": "address_1",
    "question": {
      "id": 747,
      "db_id": "address_1",
      "question": "What are the city name and average distances from each city?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the city name and average distances from each city?[SQL]\\nSELECT city_name FROM City WHERE city_name != 'Los Angeles' GROUP BY city_name ORDER BY avg(distance) ASC LIMIT 10'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 748,
    "db_id": "address_1",
    "question": {
      "id": 748,
      "db_id": "address_1",
      "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[SQL]\\nSELECT city_name FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith' UNION SELECT city_name FROM Student WHERE Fname = 'Tracy' AND Lname = 'Kim' ORDER BY city_name ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 749,
    "db_id": "address_1",
    "question": {
      "id": 749,
      "db_id": "address_1",
      "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the distance between the cities where Linda Smith and Tracy Kim live?[SQL]\\nSELECT city_name FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith' UNION SELECT city_name FROM Student WHERE Fname = 'Tracy' AND Lname = 'Kim' LIMIT 1' <MID>\n    LIMIT 1' AS direct_distance FROM Direct_distance WHERE city1_code  =  (SELECT city_code FROM student WHERE Fname  =  'Linda' AND Lname  =  'Smith') UNION SELECT direct_distance FROM Direct_distance WHERE city2_code  =  (SELECT city_code FROM student WHERE Fname  =  'Tracy' AND Lname  =  'Kim') LIMIT 1' AS direct_distance FROM Direct_distance WHERE city1_code  =  (SELECT city_code FROM student WHERE Fname  =  'Linda' AND Lname  =  'Smith') UNION SELECT direct_distance FROM Direct_distance WHERE city"
  },
  {
    "id": 750,
    "db_id": "address_1",
    "question": {
      "id": 750,
      "db_id": "address_1",
      "question": "What is the first name and last name of the student living furthest to Linda Smith?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the first name and last name of the student living furthest to Linda Smith?[SQL]\\nSELECT Direct_distance.city_name FROM Direct_distance WHERE DirecT_distance.distance  =  (SELECT max(distance) FROM DirecT_distance WHERE city_name NOT IN (SELECT city_name FROM Student WHERE Fname  =  'Linda' AND Lname  =  'Smith')) UNION SELECT T1.city_name FROM DirecT_distance AS T1 JOIN Student AS T2 ON T1.city_name  =  T2.city_code WHERE T2.Fname  =  'Linda' AND T2.Lname  =  'Smith' <MID>\n    LIMIT 1;'\n    ;"
  },
  {
    "id": 751,
    "db_id": "address_1",
    "question": {
      "id": 751,
      "db_id": "address_1",
      "question": "What is the full name of the student who lives furthest from Linda Smith?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the full name of the student who lives furthest from Linda Smith?[SQL]\\nSELECT Student.latitude FROM Student WHERE Student.Lname  =  'Smith' AND Student.latitude  =  (SELECT max(Student.latitude) FROM Student WHERE Student.Lname  =  'Smith') <MID>\n    LIMIT 1;'\n    ;"
  },
  {
    "id": 752,
    "db_id": "address_1",
    "question": {
      "id": 752,
      "db_id": "address_1",
      "question": "Which state does the student whose first name is Linda live in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which state does the student whose first name is Linda live in?[SQL]\\nSELECT city_code FROM Student WHERE Fname = 'Linda' AND Sex = 'F'; SELECT T1.state FROM city AS T1 JOIN Direct_distance AS T2 ON T1.city_code  =  T2.city1_code JOIN Student AS T3 ON T3.city_code  =  T2.city2_code WHERE T3.Fname  =  'Linda' AND T3.Sex  =  'F' AND T3.Lname  =  'Huff' AND T3.age  =  18; SELECT T1.state FROM city AS T1 JOIN Direct_distance AS T2 ON T1.city_code  =  T2.city1_code JOIN Student AS T3 ON T3.city_code  =  T2.city2_code WHERE T3.Fname  =  'Linda' AND T3.Sex"
  },
  {
    "id": 753,
    "db_id": "address_1",
    "question": {
      "id": 753,
      "db_id": "address_1",
      "question": "Give the state that the student with first name Linda lives in."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the state that the student with first name Linda lives in.[SQL]\\nSELECT Direct_distance.state FROM Direct_distance WHERE Direct_distance.city1_code  =  Student.city_code AND Student.fname  =  'Linda' LIMIT 1;  SELECT DISTINCT state FROM direct_distance WHERE city1_code  =  Student.city_code AND Student.fname  =  'Linda' LIMIT 1;  SELECT DISTINCT T1.state FROM direct_distance AS T1 JOIN student AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.fname  =  'Linda' LIMIT 1;  SELECT DISTINCT T1.state FROM direct_distance AS T1 JOIN student AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.fname  =  'Linda' LIMIT 1; SELECT T1.state FROM direct"
  },
  {
    "id": 754,
    "db_id": "boat_1",
    "question": {
      "id": 754,
      "db_id": "boat_1",
      "question": "Return all details of sailors who are older than 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return all details of sailors who are older than 30.[SQL]\\nSELECT sid FROM Sailors WHERE age  >  30'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 755,
    "db_id": "boat_1",
    "question": {
      "id": 755,
      "db_id": "boat_1",
      "question": "What can you tell me about sailors who are older than age 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What can you tell me about sailors who are older than age 30?[SQL]\\nSELECT bid FROM Reserves WHERE age  >  30'\n        ;"
  },
  {
    "id": 756,
    "db_id": "boat_1",
    "question": {
      "id": 756,
      "db_id": "boat_1",
      "question": "Return name and age for sailors who are younger than 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return name and age for sailors who are younger than 30.[SQL]\\nSELECT bid FROM Reserves WHERE day = 'Monday' AND rating BETWEEN 230 AND 250 ORDER BY name ASC LIMIT 100; SELECT name FROM Sailors WHERE age  <  30 ORDER BY name ASC LIMIT 100; SELECT age FROM Sailors WHERE age  <  30 ORDER BY name ASC LIMIT 100; SELECT name FROM Sailors WHERE age  >  30 ORDER BY name DESC LIMIT 100; SELECT name FROM Sailors WHERE age  >  30 ORDER BY name DESC LIMIT 100; SELECT name FROM Sailors WHERE age  <=  30 ORDER BY name ASC LIMIT 100; SELECT name FROM Sailors WHERE age  <=  30 ORDER BY name ASC LIMIT 100; SELECT name FROM Sailors WHERE age  >=  30 ORDER BY name DESC LIMIT 100;"
  },
  {
    "id": 757,
    "db_id": "boat_1",
    "question": {
      "id": 757,
      "db_id": "boat_1",
      "question": "What is the name and age of every sailor who is younger than age 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and age of every sailor who is younger than age 30?[SQL]\\nSELECT bid FROM Reserves WHERE day = 'Monday' AND rating BETWEEN 234 AND 345; SELECT name FROM Sailors WHERE age  <  30; SELECT name FROM Sailors WHERE age  >  30; SELECT name FROM Sailors WHERE age  =  30; SELECT name FROM Sailors WHERE age  !=  30; SELECT name FROM Sailors WHERE age  >=  30; SELECT name FROM Sailors WHERE age  <=  30; SELECT name FROM Sailors WHERE age  <>  30; SELECT name FROM Sailors WHERE age  =  30; SELECT name FROM Sailors WHERE age  !=  30; SELECT name FROM Sailors WHERE age  >=  30; SELECT name FROM Sailors WHERE age  <=  30; SELECT name FROM Sailors WHERE age  <>  30; SELECT name"
  },
  {
    "id": 758,
    "db_id": "boat_1",
    "question": {
      "id": 758,
      "db_id": "boat_1",
      "question": "Find boats reserved by Sailor with id 1."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find boats reserved by Sailor with id 1.[SQL]\\nSELECT Boats.bid FROM Reserves WHERE Reserves.sid = 1'; SELECT name FROM boats WHERE bid IN (SELECT Bid FROM RESERVES WHERE sid = 1);' <MID>\n    ORDER BY day;"
  },
  {
    "id": 759,
    "db_id": "boat_1",
    "question": {
      "id": 759,
      "db_id": "boat_1",
      "question": "What are the different boat ids reserved by the sailor whose id is 1?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different boat ids reserved by the sailor whose id is 1?[SQL]\\nSELECT bid FROM Reserves WHERE sid  =  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 760,
    "db_id": "boat_1",
    "question": {
      "id": 760,
      "db_id": "boat_1",
      "question": "Who reserved boat 102?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who reserved boat 102?[SQL]\\nSELECT sid FROM Reserves WHERE bid  =  102'\n        ;"
  },
  {
    "id": 761,
    "db_id": "boat_1",
    "question": {
      "id": 761,
      "db_id": "boat_1",
      "question": "What is the name of the sailor who reserved boat 102?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the sailor who reserved boat 102?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid  =  102' , 'Reserves.sid' , 'T1.name' , 'T1.rating' FROM Sailors AS T1 JOIN Reserves ON Reserves.sid  =  T1.sid WHERE Reserves.bid  =  102' , 'SELECT T1.name FROM Sailors AS T1 JOIN Reserves ON Reserves.sid  =  T1.sid WHERE Reserves.bid  =  102' , 'SELECT T1.name FROM Sailors AS T1 JOIN Reserves ON Reserves.sid  =  T1.sid WHERE Reserves.bid  =  102' , 'SELECT T1.name FROM Sailors AS T1 JOIN Reserves ON Reserves.sid  =  T1.sid WHERE Reserves."
  },
  {
    "id": 762,
    "db_id": "boat_1",
    "question": {
      "id": 762,
      "db_id": "boat_1",
      "question": "Return the unique boat ids (bid) of all reserved boats."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the unique boat ids (bid) of all reserved boats.[SQL]\\nSELECT bid FROM Reserves WHERE day = 'Thursday' UNION SELECT bid FROM Reserves WHERE day = 'Friday' UNION SELECT bid FROM Reserves WHERE day = 'Saturday' UNION SELECT bid FROM Reserves WHERE day = 'Sunday' UNION SELECT bid FROM Reserves WHERE day = 'Monday' UNION SELECT bid FROM Reserves WHERE day = 'Tuesday' UNION SELECT bid FROM Reserves WHERE day = 'Wednesday'',\n       \n   \n   \n  \n \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 763,
    "db_id": "boat_1",
    "question": {
      "id": 763,
      "db_id": "boat_1",
      "question": "What are the ids of all boats that are reserved by someone?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of all boats that are reserved by someone?[SQL]\\nSELECT bid FROM Reserves WHERE day != 'NA' AND day != '' AND day IS NOT NULL AND day != 'null' AND day != 'NULL' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day != 'null' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day != null AND day != NULL AND day != 'Null' AND day != 'Null' AND day"
  },
  {
    "id": 764,
    "db_id": "boat_1",
    "question": {
      "id": 764,
      "db_id": "boat_1",
      "question": "What is the name of sailors whose names contain letter e?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of sailors whose names contain letter e?[SQL]\\nSELECT bid FROM Reserves WHERE day LIKE '%Tuesday%' AND sid NOT IN (SELECT sid FROM Sailors WHERE name LIKE '%e%') ORDER BY bid ASC;'\n        ;"
  },
  {
    "id": 765,
    "db_id": "boat_1",
    "question": {
      "id": 765,
      "db_id": "boat_1",
      "question": "What is the name of every sailor whose name contains the letter e?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of every sailor whose name contains the letter e?[SQL]\\nSELECT bid FROM Reserves WHERE day LIKE '%Tuesday%' AND sid NOT IN (SELECT sid FROM Sailors WHERE name LIKE '%e%')'\n        ;"
  },
  {
    "id": 766,
    "db_id": "boat_1",
    "question": {
      "id": 766,
      "db_id": "boat_1",
      "question": "return the unique ids of sailors who are older than any sailors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, return the unique ids of sailors who are older than any sailors.[SQL]\\nSELECT sid FROM Sailors WHERE age  >  (SELECT max(age) FROM Sailors) UNION SELECT sid FROM Sailors WHERE age  >  21 GROUP BY name HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 767,
    "db_id": "boat_1",
    "question": {
      "id": 767,
      "db_id": "boat_1",
      "question": "What is the different id of every sailor who is not the youngest?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the different id of every sailor who is not the youngest?[SQL]\\nSELECT sid FROM Sailors WHERE rating != (SELECT min(rating) FROM Sailors) GROUP BY name HAVING max(age) != (SELECT max(age) FROM Sailors) ORDER BY name ASC'\n        ;"
  },
  {
    "id": 768,
    "db_id": "boat_1",
    "question": {
      "id": 768,
      "db_id": "boat_1",
      "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[SQL]\\nSELECT bid FROM Reserves WHERE day  =  'Monday' AND sid NOT IN (SELECT sid FROM sailors WHERE age  >  (SELECT max(age) FROM sailors) ) ORDER BY name ASC; SELECT DISTINCT name FROM sailors WHERE rating  <  7 ORDER BY name DESC; SELECT DISTINCT name FROM sailors WHERE age  >  (SELECT max(age) FROM sailors) ORDER BY name ASC; SELECT DISTINCT name FROM sailors WHERE rating  >  7 ORDER BY name DESC; SELECT DISTINCT name FROM sailors WHERE age  <  (SELECT min(age) FROM sailors) ORDER BY name ASC; SELECT DISTINCT name FROM sailors WHERE rating  <  7 ORDER BY name DESC; SELECT DISTINCT name FROM sailors WHERE age  >  (SELECT max(age) FROM sailors) ORDER BY name ASC; SELECT DISTINCT name FROM sailors WHERE rating  >"
  },
  {
    "id": 769,
    "db_id": "boat_1",
    "question": {
      "id": 769,
      "db_id": "boat_1",
      "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different names of sailors who are older than some other sailor with a rating larger than 7?[SQL]\\nSELECT day FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age  >  (SELECT max(age) FROM Sailors) AND rating  >  7 ) ORDER BY sid ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 770,
    "db_id": "boat_1",
    "question": {
      "id": 770,
      "db_id": "boat_1",
      "question": "Find the name and id of the sailors who reserved at least one boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and id of the sailors who reserved at least one boat?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE RESERVES.sid IN (SELECT RESERVES.sid FROM RESERVES GROUP BY RESERVES.sid HAVING COUNT(*)  >=  1) UNION SELECT RESERVES.bid FROM RESERVES GROUP BY RESERVES.bid ORDER BY RESERVES.day DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 771,
    "db_id": "boat_1",
    "question": {
      "id": 771,
      "db_id": "boat_1",
      "question": "What is the name and id of every sailor who reserved one or more boats?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and id of every sailor who reserved one or more boats?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE RESERVES.sid != -1 UNION SELECT T1.sid , T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid != -1 ORDER BY T2.name ASC'\n        ;"
  },
  {
    "id": 772,
    "db_id": "boat_1",
    "question": {
      "id": 772,
      "db_id": "boat_1",
      "question": "Find the id and name of the sailors who reserved more than one boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id and name of the sailors who reserved more than one boat.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE RESERVES.bid IN (SELECT RESERVES.bid FROM RESERVES GROUP BY RESERVES.bid HAVING count(*)  >  1) JOIN SAILORS ON RESERVES.sid = SAILORS.sid'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 773,
    "db_id": "boat_1",
    "question": {
      "id": 773,
      "db_id": "boat_1",
      "question": "What are the different names of sailors who reserved two or more boats ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different names of sailors who reserved two or more boats ?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE day  =  'Tuesday' GROUP BY Reserves.sid HAVING count(*)  >=  2' <MID>\n    GROUP BY Reserves.sidHAVING count(*)  >=  2' > T2.txt'\n\n    LIMIT 500' > T1.txt'\n\n    ;"
  },
  {
    "id": 774,
    "db_id": "boat_1",
    "question": {
      "id": 774,
      "db_id": "boat_1",
      "question": "Find the id of Sailors (sid) that reserved red or blue boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id of Sailors (sid) that reserved red or blue boat.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red' OR Boats.color  =  'blue') AND Reserves.day = 'Monday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'green' OR Boats.color  =  'yellow') AND Reserves.day = 'Tuesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'purple' OR Boats.color  =  'gray') AND Reserves.day = 'Wednesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN ("
  },
  {
    "id": 775,
    "db_id": "boat_1",
    "question": {
      "id": 775,
      "db_id": "boat_1",
      "question": "What are the sids for sailors who reserved red or blue boats?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the sids for sailors who reserved red or blue boats?[SQL]\\nSELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  'Red' OR color  =  'Blue') <MID>.com/problemset/problem/524/D)\n\nGROUP BY Reserves.day;"
  },
  {
    "id": 776,
    "db_id": "boat_1",
    "question": {
      "id": 776,
      "db_id": "boat_1",
      "question": "Find the name and id of Sailors (sid) that reserved red or blue boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and id of Sailors (sid) that reserved red or blue boat.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Reserves.bid FROM Reserves WHERE Reserves.color = 'red' OR Reserves.color = 'blue') AND Reserves.color = 'red' OR Reserves.color = 'blue' SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.color = 'red' OR T1.color = 'blue' SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.color = 'red' OR T1.color = 'blue' SELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON"
  },
  {
    "id": 777,
    "db_id": "boat_1",
    "question": {
      "id": 777,
      "db_id": "boat_1",
      "question": "What are the names and ids of sailors who reserved red or blue boats?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ids of sailors who reserved red or blue boats?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red' OR Boats.color  =  'blue') AND Reserves.day = 'Monday' UNION SELECT RESERVES.sid FROM RESERVES WHERE RESERVES.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red' OR Boats.color  =  'blue') AND RESERVES.day = 'Tuesday' UNION SELECT RESERVES.sid FROM RESERVES WHERE RESERVES.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red' OR Boats.color  =  'blue') AND RESERVES.day = 'Wednesday' UNION"
  },
  {
    "id": 778,
    "db_id": "boat_1",
    "question": {
      "id": 778,
      "db_id": "boat_1",
      "question": "Find the id of Sailors (sid) that reserved red and blue boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id of Sailors (sid) that reserved red and blue boat.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Reserves.bid FROM Reserves WHERE Reserves.color  =  'red' INTERSECT SELECT Reserves.bid FROM Reserves WHERE Reserves.color  =  'blue') AND Reserves.color  =  'red' OR Reserves.color  =  'blue' ORDER BY Reserves.day DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 779,
    "db_id": "boat_1",
    "question": {
      "id": 779,
      "db_id": "boat_1",
      "question": "What are the ids of sailors who reserved red and blue boats?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of sailors who reserved red and blue boats?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red' OR Boats.color  =  'blue') AND Reserves.day = 'Monday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'green' OR Boats.color  =  'yellow') AND Reserves.day = 'Tuesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'purple' OR Boats.color  =  'gray') AND Reserves.day = 'Wednesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN ("
  },
  {
    "id": 780,
    "db_id": "boat_1",
    "question": {
      "id": 780,
      "db_id": "boat_1",
      "question": "Find the name and id of Sailors (sid) that reserved red and blue boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and id of Sailors (sid) that reserved red and blue boat.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Reserves.bid FROM Reserves WHERE Reserves.color  =  'red') INTERSECT SELECT RESERVES.sid FROM RESERVES WHERE Reserves.bid IN (SELECT Reserves.bid FROM Reserves WHERE Reserves.color  =  'blue')'\n   \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 781,
    "db_id": "boat_1",
    "question": {
      "id": 781,
      "db_id": "boat_1",
      "question": "What are the names and ids of sailors who reserved red and blue boats?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ids of sailors who reserved red and blue boats?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red' OR Boats.color  =  'blue') AND Reserves.day = 'Monday' UNION SELECT RESERVES.sid FROM RESERVES WHERE RESERVES.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'green' ) AND RESERVES.day = 'Tuesday' UNION SELECT RESERVES.sid FROM RESERVES WHERE RESERVES.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'yellow' ) AND RESERVES.day = 'Wednesday' UNION SELECT RESERVES.sid FROM RESERVES WHERE RESERV"
  },
  {
    "id": 782,
    "db_id": "boat_1",
    "question": {
      "id": 782,
      "db_id": "boat_1",
      "question": "What is the ids of sailors that haven\u2019t reserved a boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the ids of sailors that haven\u2019t reserved a boat?[SQL]\\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves) SQL SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves) SQL SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors MINUS SELECT sid FROM Reserves SQL SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors MINUS SELECT sid FROM Reserves SQL SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors INTERSECT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors INTERSECT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors INTERSECT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors INTERSECT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors INTERSECT SELECT sid FROM Reserves SQL SELECT sid FROM Sailors INTERSE"
  },
  {
    "id": 783,
    "db_id": "boat_1",
    "question": {
      "id": 783,
      "db_id": "boat_1",
      "question": "What are the ids of sailors who have not reserved a boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of sailors who have not reserved a boat?[SQL]\\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves) <MID>.color FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid WHERE T2.day  =  'monday' UNION SELECT T1.name ,  T1.rating ,  T1.age ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.day  =  'tuesday' UNION SELECT T1.name ,  T1.rating ,  T1.age ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.day  =  'wednesday' UNION SELECT T1.name ,  T1.rating ,  T1."
  },
  {
    "id": 784,
    "db_id": "boat_1",
    "question": {
      "id": 784,
      "db_id": "boat_1",
      "question": "what is the name and id of sailors who do not have a reservation of a boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what is the name and id of sailors who do not have a reservation of a boat?[SQL]\\nSELECT bid FROM Reserves WHERE sid NOT IN (SELECT sid FROM Sailors) UNION SELECT NULL ,  NULL FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves) ORDER BY name ASC'\n        ;"
  },
  {
    "id": 785,
    "db_id": "boat_1",
    "question": {
      "id": 785,
      "db_id": "boat_1",
      "question": "What are the names and ids of all sailors who do not have boat reservations?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ids of all sailors who do not have boat reservations?[SQL]\\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves) ORDER BY name ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 786,
    "db_id": "boat_1",
    "question": {
      "id": 786,
      "db_id": "boat_1",
      "question": "Find id for the sailors who do not have a reservation of a boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find id for the sailors who do not have a reservation of a boat?[SQL]\\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves) <MID>.color FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid'\n    ORDER BY bid;"
  },
  {
    "id": 787,
    "db_id": "boat_1",
    "question": {
      "id": 787,
      "db_id": "boat_1",
      "question": "What is id about sailors who do not have boat reservations?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is id about sailors who do not have boat reservations?[SQL]\\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves) <MID>\n    ORDER BY day;"
  },
  {
    "id": 788,
    "db_id": "boat_1",
    "question": {
      "id": 788,
      "db_id": "boat_1",
      "question": "What is the name of the sailors who reserved boat with id 103?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the sailors who reserved boat with id 103?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid  =  103 JOIN Sailors ON Reserves.sid  =  Sailors.sid WHERE Sailors.name LIKE '%Reserved%' AND Reserves.day LIKE '%Monday%' AND Sailors.rating  >  2; SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  103; SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  103 AND T1.rating  >  2; SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.s"
  },
  {
    "id": 789,
    "db_id": "boat_1",
    "question": {
      "id": 789,
      "db_id": "boat_1",
      "question": "Find the name of the sailors who reserved boat with id 103."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the sailors who reserved boat with id 103.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid  =  103 JOIN Sailors ON Reserves.sid  =  Sailors.sid'\n        ;"
  },
  {
    "id": 790,
    "db_id": "boat_1",
    "question": {
      "id": 790,
      "db_id": "boat_1",
      "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of all sailors whose rating is higher than any sailor named Luis?[SQL]\\nSELECT bid FROM Reserves WHERE day  >  (SELECT max(age) FROM Sailors WHERE name  =  'Luis') AND rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis') UNION SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis') EXCEPT SELECT name FROM Sailors WHERE name  =  'Luis' <MID>.com/problemset/problem/524/D)\n\nGROUP BY bid;"
  },
  {
    "id": 791,
    "db_id": "boat_1",
    "question": {
      "id": 791,
      "db_id": "boat_1",
      "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[SQL]\\nSELECT Reserves.sid FROM Sailors WHERE rating  >  ( SELECT max(rating) FROM sailors WHERE name  =  'Luis' ) UNION SELECT Reserves.sid FROM Sailors WHERE name != 'Luis' AND rating  >  ( SELECT min(rating) FROM sailors WHERE name != 'Luis' ) ORDER BY Reserves.sid ASC'\n    ORDER BY Reserves.sid;"
  },
  {
    "id": 792,
    "db_id": "boat_1",
    "question": {
      "id": 792,
      "db_id": "boat_1",
      "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of all sailors whose rating is higher than all sailors named Luis?[SQL]\\nSELECT bid FROM Reserves WHERE day  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis') AND name != 'Luis' UNION SELECT name FROM Sailors WHERE name != 'Luis' AND rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')'\n    ;"
  },
  {
    "id": 793,
    "db_id": "boat_1",
    "question": {
      "id": 793,
      "db_id": "boat_1",
      "question": "What are the names of all sailors with a higher rating than every sailor named Luis?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all sailors with a higher rating than every sailor named Luis?[SQL]\\nSELECT sid FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis') UNION SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis') <MID>.com/problemset/problem/524/D)\n\nGROUP BY bid;"
  },
  {
    "id": 794,
    "db_id": "boat_1",
    "question": {
      "id": 794,
      "db_id": "boat_1",
      "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[SQL]\\nSELECT Reserves.bid FROM Reserves WHERE Reserves.sid IN (SELECT sid FROM Sailors WHERE rating  >  2) AND Reserves.day = 'Tuesday' UNION SELECT Reserves.bid FROM Reserves WHERE Reserves.sid IN (SELECT sid FROM Sailors WHERE rating  >  2) AND Reserves.day = 'Wednesday' UNION SELECT Reserves.bid FROM Reserves WHERE Reserves.sid IN (SELECT sid FROM Sailors WHERE rating  >  2) AND Reserves.day = 'Thursday' UNION SELECT Reserves.bid FROM Reserves WHERE Reserves.sid IN (SELECT sid FROM Sailors WHERE rating  >  2) AND Reserves.day = 'Friday' UNION SELECT Reserves.bid FROM Reserves WHERE Reserves.sid IN (SELECT sid FROM Sailors WHERE rating  >  2) AND Reserves.day ="
  },
  {
    "id": 795,
    "db_id": "boat_1",
    "question": {
      "id": 795,
      "db_id": "boat_1",
      "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Rating  >=  3 INTERSECT SELECT name ,  sid FROM Sailors WHERE Rating  >=  3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 796,
    "db_id": "boat_1",
    "question": {
      "id": 796,
      "db_id": "boat_1",
      "question": "Find the name and age of the oldest sailor."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and age of the oldest sailor.[SQL]\\nSELECT bid FROM Reserves WHERE day = 'Monday' AND rating  >  105 ORDER BY age DESC LIMIT 1; SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  =  (SELECT max(age) FROM sailors); SELECT name FROM sailors WHERE age  = "
  },
  {
    "id": 797,
    "db_id": "boat_1",
    "question": {
      "id": 797,
      "db_id": "boat_1",
      "question": "What is the name and age of the sailor with maximum age?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and age of the sailor with maximum age?[SQL]\\nSELECT bid FROM Reserves WHERE day  =  'Monday' AND rating  >  250 ORDER BY age DESC LIMIT 1; SELECT name ,  age FROM Sailors ORDER BY age DESC LIMIT 1;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 798,
    "db_id": "boat_1",
    "question": {
      "id": 798,
      "db_id": "boat_1",
      "question": "how many sailors in total?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, how many sailors in total?[SQL]\\nSELECT sid FROM Sailors;"
  },
  {
    "id": 799,
    "db_id": "boat_1",
    "question": {
      "id": 799,
      "db_id": "boat_1",
      "question": "How many sailors exist?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many sailors exist?[SQL]\\nSELECT sid FROM Sailors;"
  },
  {
    "id": 800,
    "db_id": "boat_1",
    "question": {
      "id": 800,
      "db_id": "boat_1",
      "question": "What is the average age of sailors whose rating is 7?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average age of sailors whose rating is 7?[SQL]\\nSELECT sid FROM Sailors WHERE rating  =  7; SELECT avg(age) FROM Sailors WHERE rating  =  7;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 801,
    "db_id": "boat_1",
    "question": {
      "id": 801,
      "db_id": "boat_1",
      "question": "What is average age of all sailors who have a rating of 7?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is average age of all sailors who have a rating of 7?[SQL]\\nSELECT sid FROM Sailors WHERE rating  =  7; SELECT avg(age) FROM Sailors WHERE rating  =  7;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 802,
    "db_id": "boat_1",
    "question": {
      "id": 802,
      "db_id": "boat_1",
      "question": "How many sailors whose name starts with letter D exist ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many sailors whose name starts with letter D exist ?[SQL]\\nSELECT bid FROM Reserves WHERE day LIKE 'Monday' AND time BETWEEN '10:00' AND '12:00' UNION SELECT bid FROM Reserves WHERE day LIKE 'Tuesday' AND time BETWEEN '10:00' AND '12:00' UNION SELECT bid FROM Reserves WHERE day LIKE 'Wednesday' AND time BETWEEN '10:00' AND '12:00' UNION SELECT bid FROM Reserves WHERE day LIKE 'Thursday' AND time BETWEEN '10:00' AND '12:00' UNION SELECT bid FROM Reserves WHERE day LIKE 'Friday' AND time BETWEEN '10:00' AND '12:00' UNION SELECT bid FROM Reserves WHERE day LIKE 'Saturday' AND time BETWEEN '10:0"
  },
  {
    "id": 803,
    "db_id": "boat_1",
    "question": {
      "id": 803,
      "db_id": "boat_1",
      "question": "What is the count of the sailors whose name starts with letter D ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the count of the sailors whose name starts with letter D ?[SQL]\\nSELECT Reserves.day FROM Reserves WHERE Reserves.sid LIKE 'D%'';' <MID>\n    ORDER BY Reserves.day;"
  },
  {
    "id": 804,
    "db_id": "boat_1",
    "question": {
      "id": 804,
      "db_id": "boat_1",
      "question": "What are the average rating and max age of all sailors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average rating and max age of all sailors?[SQL]\\nSELECT Reserves.day FROM Reserves WHERE Reserves.sid = 123456789; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg(rating) ,  max(age) FROM Sailors; SELECT avg"
  },
  {
    "id": 805,
    "db_id": "boat_1",
    "question": {
      "id": 805,
      "db_id": "boat_1",
      "question": "Find the average rating and largest age for the sailors"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average rating and largest age for the sailors[SQL]\\nSELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(age) FROM Sailors) GROUP BY Reserves.day ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 806,
    "db_id": "boat_1",
    "question": {
      "id": 806,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of reservations for each boat.[SQL]\\nSELECT bid  FROM Reserves WHERE day  =  'Monday' GROUP BY bid' <MID>.com/problemset/problem/524/D - Number of Reservations for Each Boat](https://leetcode.com/problems/number-of-reservations-for-each-boat/)\n\nGROUP BY bid;"
  },
  {
    "id": 807,
    "db_id": "boat_1",
    "question": {
      "id": 807,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many reservations exist for each boat?[SQL]\\nSELECT bid  FROM Reserves  WHERE day  =  'Monday' GROUP BY bid ORDER BY count(*) DESC LIMIT 1' SELECT bid  FROM Reserves  WHERE day  =  'Tuesday' GROUP BY bid ORDER BY count(*) DESC LIMIT 1' SELECT bid  FROM Reserves  WHERE day  =  'Wednesday' GROUP BY bid ORDER BY count(*) DESC LIMIT 1' SELECT bid  FROM Reserves  WHERE day  =  'Thursday' GROUP BY bid ORDER BY count(*) DESC LIMIT 1' SELECT bid  FROM Reserves  WHERE day  =  'Friday' GROUP BY bid ORDER BY count(*) DESC LIMIT 1' SELECT bid  FROM Reserves  WHERE day  =  'Saturday' GROUP BY bid ORDER BY count(*) DESC LIMIT 1' SELECT bid  FROM Reserves  WHERE day  =  'Sunday' GROUP BY bid ORDER BY count(*) DESC LIMIT"
  },
  {
    "id": 808,
    "db_id": "boat_1",
    "question": {
      "id": 808,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat with id greater than 50."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of reservations for each boat with id greater than 50.[SQL]\\nSELECT bid  FROM Reserves WHERE bid  >  50 GROUP BY bid'\n        ;"
  },
  {
    "id": 809,
    "db_id": "boat_1",
    "question": {
      "id": 809,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat with an id greater than 50?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many reservations exist for each boat with an id greater than 50?[SQL]\\nSELECT bid  FROM Reserves WHERE bid  >  50 GROUP BY bid'\n        ;"
  },
  {
    "id": 810,
    "db_id": "boat_1",
    "question": {
      "id": 810,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat with more than 1 reservation."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of reservations for each boat with more than 1 reservation.[SQL]\\nSELECT bid FROM Reserves WHERE day != 'Monday' GROUP BY bid HAVING count(*)  >  1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 811,
    "db_id": "boat_1",
    "question": {
      "id": 811,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat that has more than 1 reservation already?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many reservations exist for each boat that has more than 1 reservation already?[SQL]\\nSELECT bid FROM Reserves WHERE day != 'Monday' GROUP BY bid HAVING count(*)  >  1 UNION SELECT bid FROM Reserves WHERE day =  'Monday' GROUP BY bid HAVING count(*)  >  0' <MID>id INTEGER , bid INTEGER , day TEXT , foreign key (sid) references Sailors(sid) , foreign key (bid) references Boats(bid) )'\n\n    ORDER BY day;"
  },
  {
    "id": 812,
    "db_id": "boat_1",
    "question": {
      "id": 812,
      "db_id": "boat_1",
      "question": "Find the number of reservations by sailors with id greater than 1 for each boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of reservations by sailors with id greater than 1 for each boat.[SQL]\\nSELECT Reserves.bid FROM Reserves WHERE Reserves.sid  >  1 GROUP BY Reserves.bid'\n        ;"
  },
  {
    "id": 813,
    "db_id": "boat_1",
    "question": {
      "id": 813,
      "db_id": "boat_1",
      "question": "How many reservations for each boat did the sailors with an id greater than 1 make?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many reservations for each boat did the sailors with an id greater than 1 make?[SQL]\\nSELECT bid  FROM Reserves WHERE sid  >  1 GROUP BY bid'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 814,
    "db_id": "boat_1",
    "question": {
      "id": 814,
      "db_id": "boat_1",
      "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the rating and average age for sailors who have reserved red boat grouped by rating?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid  =   (SELECT Boats.bid FROM Boats WHERE Boats.name  =  'red') JOIN Sailors ON Reserves.sid  =  Sailors.sid GROUP BY Sailors.rating ORDER BY Sailors.rating ASC'\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 815,
    "db_id": "boat_1",
    "question": {
      "id": 815,
      "db_id": "boat_1",
      "question": "What are the rating and average age for sailors who reserved red boats for each rating?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the rating and average age for sailors who reserved red boats for each rating?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red') JOIN Sailors ON Reserves.sid = Sailors.sid GROUP BY Reserves.sid ,  Sailors.rating ORDER BY Sailors.rating ASC'\n    ;"
  },
  {
    "id": 816,
    "db_id": "boat_1",
    "question": {
      "id": 816,
      "db_id": "boat_1",
      "question": "Find the name, rating and age of all sailors ordered by rating and age."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name, rating and age of all sailors ordered by rating and age.[SQL]\\nSELECT sid  FROM Sailors WHERE name  =  'Joe' ORDER BY rating ,  age DESC' SELECT * FROM Sailors ORDER BY rating ,  age DESC' SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age DESC' SELECT name FROM Sailors ORDER BY rating ,  age DESC' SELECT name FROM Sailors WHERE name  =  'Joe' ORDER BY rating ,  age DESC' SELECT name FROM Sailors ORDER BY rating ,  age DESC' SELECT name FROM Sailors WHERE name  =  'Joe' ORDER BY rating DESC ,  age ASC' SELECT name FROM Sailors WHERE name  =  'Joe' ORDER BY rating ASC ,  age DESC' SELECT name FROM Sailors WHERE name  =  'Joe' ORDER BY rating DESC ,  age ASC' SELECT name FROM Sailors WHERE name  =  'Joe' ORDER BY rating ASC"
  },
  {
    "id": 817,
    "db_id": "boat_1",
    "question": {
      "id": 817,
      "db_id": "boat_1",
      "question": "What is the name, rating, and age for every sailor? And order them by rating and age."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name, rating, and age for every sailor? And order them by rating and age.[SQL]\\nSELECT bid FROM Reserves WHERE day = 'Monday' UNION SELECT name FROM Sailors ORDER BY rating ,  age'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 818,
    "db_id": "boat_1",
    "question": {
      "id": 818,
      "db_id": "boat_1",
      "question": "Find the total number of boats."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total number of boats.[SQL]\\nSELECT Reserves.bid FROM Reserves WHERE Reserves.day = 'Monday' GROUP BY Reserves.bid ORDER BY COUNT(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 819,
    "db_id": "boat_1",
    "question": {
      "id": 819,
      "db_id": "boat_1",
      "question": "How many boats are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many boats are there?[SQL]\\nSELECT Reserves.bid FROM Reserves WHERE Reserves.day = 'Monday' GROUP BY Reserves.bid HAVING COUNT(*)  >  250' <MID>\n    GROUP BY Reserves.bid;"
  },
  {
    "id": 820,
    "db_id": "boat_1",
    "question": {
      "id": 820,
      "db_id": "boat_1",
      "question": "How many boats are red?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many boats are red?[SQL]\\nSELECT bid FROM Boats WHERE color  =  'red' AND name != 'Reserved'', count(*) FROM Reserves EXCEPT SELECT bid FROM Reserves GROUP BY bid HAVING count(*)  >  1 UNION SELECT bid FROM Reserves GROUP BY bid HAVING count(*)  =  1';'\n    ORDER BY bid;"
  },
  {
    "id": 821,
    "db_id": "boat_1",
    "question": {
      "id": 821,
      "db_id": "boat_1",
      "question": "How many red boats exist?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many red boats exist?[SQL]\\nSELECT bid FROM Boats WHERE color = 'red' AND rating > 100; SELECT count(*) FROM Boats WHERE color = 'red' AND rating > 100; SELECT COUNT ( DISTINCT name ) FROM Sailors; SELECT COUNT ( DISTINCT name ) FROM Boats; SELECT COUNT ( DISTINCT name ) FROM Reserves; SELECT COUNT ( DISTINCT name ) FROM Sailors EXCEPT SELECT COUNT ( DISTINCT name ) FROM Reserves; SELECT COUNT ( DISTINCT name ) FROM Boats EXCEPT SELECT COUNT ( DISTINCT name ) FROM Reserves; SELECT COUNT ( DISTINCT name ) FROM Sailors INTERSECT SELECT COUNT ( DISTINCT name ) FROM Reserves; SELECT COUNT ( DISTINCT name ) FROM Boats INTERSECT SELECT COUNT ( DISTINCT name ) FROM Reserves; SELECT COUNT ( DISTINCT name ) FROM Sailors UNION SELECT COUNT"
  },
  {
    "id": 822,
    "db_id": "boat_1",
    "question": {
      "id": 822,
      "db_id": "boat_1",
      "question": "Find the names of boats booked by sailors whose age is between 20 and 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of boats booked by sailors whose age is between 20 and 30.[SQL]\\nSELECT Reserves.day FROM Reserves WHERE Reserves.sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30) ORDER BY Reserves.day DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 823,
    "db_id": "boat_1",
    "question": {
      "id": 823,
      "db_id": "boat_1",
      "question": "What are the names of the boats booked by people between age 20 and 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the boats booked by people between age 20 and 30?[SQL]\\nSELECT Reserves.day FROM Reserves WHERE Reserves.sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30) ORDER BY Reserves.day DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 824,
    "db_id": "boat_1",
    "question": {
      "id": 824,
      "db_id": "boat_1",
      "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red') EXCEPT SELECT Sailors.sid FROM Sailors WHERE Sailors.rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red'))'; SQL query returns - [('sid3',)]'\n\n    LIMIT 1] SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color  =  'red')"
  },
  {
    "id": 825,
    "db_id": "boat_1",
    "question": {
      "id": 825,
      "db_id": "boat_1",
      "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[SQL]\\nSELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  'red') EXCEPT SELECT sid FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors) ORDER BY name ASC'\n    LIMIT 100'\n    ;"
  },
  {
    "id": 826,
    "db_id": "boat_1",
    "question": {
      "id": 826,
      "db_id": "boat_1",
      "question": "What is highest rating between sailors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is highest rating between sailors?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Rating  =  ( SELECT max(Rating) FROM Reserves )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 827,
    "db_id": "boat_1",
    "question": {
      "id": 827,
      "db_id": "boat_1",
      "question": "What is the maximum rating for sailors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum rating for sailors?[SQL]\\nSELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(rating) FROM Sailors) SQL SELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(rating) FROM Sailors) SQL SELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(rating) FROM Sailors) SQL SELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(rating) FROM Sailors) SQL SELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(rating) FROM Sailors) SQL SELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(rating) FROM Sailors) SQL SELECT Reserves.day FROM Reserves WHERE Reserves.sid = (SELECT max(rating) FROM Sailors) SQL SELECT Reserves.day FROM Reserves WHERE Res"
  },
  {
    "id": 828,
    "db_id": "boat_1",
    "question": {
      "id": 828,
      "db_id": "boat_1",
      "question": "Find the names of sailors who reserved boat with the name Melon."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of sailors who reserved boat with the name Melon.[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Sunday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Monday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Tuesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Wednesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN"
  },
  {
    "id": 829,
    "db_id": "boat_1",
    "question": {
      "id": 829,
      "db_id": "boat_1",
      "question": "What are the names of sailors who reserved a boat with the name Melon?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of sailors who reserved a boat with the name Melon?[SQL]\\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Sunday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Monday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Tuesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name  =  'Melon') AND Reserves.day = 'Wednesday' UNION SELECT Reserves.sid FROM Reserves WHERE Reserves.bid IN"
  },
  {
    "id": 830,
    "db_id": "boat_1",
    "question": {
      "id": 830,
      "db_id": "boat_1",
      "question": "List the names and ages of all sailors sorted by rating in descending order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names and ages of all sailors sorted by rating in descending order.[SQL]\\nSELECT bid FROM Reserves WHERE day = 'Monday' UNION SELECT name FROM Sailors ORDER BY rating DESC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 831,
    "db_id": "boat_1",
    "question": {
      "id": 831,
      "db_id": "boat_1",
      "question": "What are the names and ages of all sailors sorted by decreasing rating?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ages of all sailors sorted by decreasing rating?[SQL]\\nSELECT bid FROM Reserves WHERE day  =  'Monday' UNION SELECT name ,  age FROM Sailors ORDER BY rating DESC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 832,
    "db_id": "headphone_store",
    "question": {
      "id": 832,
      "db_id": "headphone_store",
      "question": "Find the model of the most expensive headphone."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the model of the most expensive headphone.[SQL]\\nSELECT Headphone_ID FROM headphone WHERE price  =  (SELECT max(price) FROM headphone) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 833,
    "db_id": "headphone_store",
    "question": {
      "id": 833,
      "db_id": "headphone_store",
      "question": "Which headphone model has the highest price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which headphone model has the highest price?[SQL]\\nSELECT headphone.Headphone_ID FROM headphone WHERE price  =  (SELECT max(price) FROM headphone) ORDER BY headphone.Model DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 834,
    "db_id": "headphone_store",
    "question": {
      "id": 834,
      "db_id": "headphone_store",
      "question": "List all different headphone models in the alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all different headphone models in the alphabetical order.[SQL]\\nSELECT Headphone_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 835,
    "db_id": "headphone_store",
    "question": {
      "id": 835,
      "db_id": "headphone_store",
      "question": "Return the list of distinct headphone models ordered alphabetically."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the list of distinct headphone models ordered alphabetically.[SQL]\\nSELECT Headphone_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 836,
    "db_id": "headphone_store",
    "question": {
      "id": 836,
      "db_id": "headphone_store",
      "question": "Which headphone class is the most common one?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which headphone class is the most common one?[SQL]\\nSELECT headphone.Headphone_ID FROM headphone WHERE CLASS  =  (SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1) SELECT model FROM headphone WHERE CLASS  =  (SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1) LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 837,
    "db_id": "headphone_store",
    "question": {
      "id": 837,
      "db_id": "headphone_store",
      "question": "Which headphone class contains the most headphones?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which headphone class contains the most headphones?[SQL]\\nSELECT headphone.Headphone_ID FROM headphone WHERE CLASS  =  'gaming' UNION SELECT headphone.Headphone_ID FROM headphone WHERE CLASS  =  'music' UNION SELECT headphone.Headphone_ID FROM headphone WHERE CLASS  =  'video gaming' ORDER BY count(*) DESC LIMIT 1' <MID>\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 838,
    "db_id": "headphone_store",
    "question": {
      "id": 838,
      "db_id": "headphone_store",
      "question": "Which headphone class does have more than two headphones?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which headphone class does have more than two headphones?[SQL]\\nSELECT Headphone_ID FROM headphone WHERE CLASS  =  'gaming' GROUP BY Headphone_ID HAVING count(*)  >  2 UNION SELECT Headphone_ID FROM headphone WHERE CLASS  =  'music' GROUP BY Headphone_ID HAVING count(*)  >  2 UNION SELECT Headphone_ID FROM headphone WHERE CLASS  =  'video gaming' GROUP BY Headphone_ID HAVING count(*)  >  2' <MID>\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 839,
    "db_id": "headphone_store",
    "question": {
      "id": 839,
      "db_id": "headphone_store",
      "question": "Find the headphone class that does not contain more than two headphones."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the headphone class that does not contain more than two headphones.[SQL]\\nSELECT Headphone_ID FROM headphone WHERE CLASS != 'monitors' GROUP BY CLASS HAVING count(*)  <=  2' <MID>\n    LIMIT 3'\n    ;"
  },
  {
    "id": 840,
    "db_id": "headphone_store",
    "question": {
      "id": 840,
      "db_id": "headphone_store",
      "question": "Find the number of headphones with a price higher than 200 for each class."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of headphones with a price higher than 200 for each class.[SQL]\\nSELECT Headphone_ID FROM headphone WHERE price  >  200 GROUP BY CLASS'\n        ;"
  },
  {
    "id": 841,
    "db_id": "headphone_store",
    "question": {
      "id": 841,
      "db_id": "headphone_store",
      "question": "How many headphones cost more than 200 for each headphone class?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many headphones cost more than 200 for each headphone class?[SQL]\\nSELECT Quantity FROM stock WHERE headphone.price  >  200 INTERSECT SELECT Construction FROM headphone GROUP BY Construction'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 842,
    "db_id": "headphone_store",
    "question": {
      "id": 842,
      "db_id": "headphone_store",
      "question": "how many different earpads are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, how many different earpads are there?[SQL]\\nSELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'Yes' GROUP BY headphone.Headphone_ID ORDER BY count(*) DESC LIMIT 1' SELECT count(DISTINCT earpads) FROM headphone' SELECT DISTINCT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 1' SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 1' SELECT headphone.Model FROM headphone WHERE earpads  =  'Yes' GROUP BY headphone.Model ORDER BY count(*) DESC LIMIT 1' SELECT headphone.Model FROM headphone WHERE earpads  =  'No' GROUP BY headphone.Model ORDER BY count(*) DESC LIMIT 1' SELECT headphone.Model FROM headphone WHERE earpads  =  'Maybe' GROUP BY headphone.Model ORDER BY count(*) DESC LIMIT 1' SELECT headphone"
  },
  {
    "id": 843,
    "db_id": "headphone_store",
    "question": {
      "id": 843,
      "db_id": "headphone_store",
      "question": "Count the number of different earpads."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different earpads.[SQL]\\nSELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'yes' GROUP BY earpads ORDER BY count(*) DESC LIMIT 1'\n\n    LIMIT 1' SELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'yes' GROUP BY earpads ORDER BY count(*) DESC LIMIT 1' SELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'yes' GROUP BY earpads ORDER BY count(*) DESC LIMIT 1' SELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'yes' GROUP BY earpads ORDER BY count(*) DESC LIMIT 1' SELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'yes' GROUP BY earpads ORDER BY count(*) DESC LIMIT 1' SELECT headphone.Headphone_ID FROM head"
  },
  {
    "id": 844,
    "db_id": "headphone_store",
    "question": {
      "id": 844,
      "db_id": "headphone_store",
      "question": "Find the top 2 earpads that are mostly used."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the top 2 earpads that are mostly used.[SQL]\\nSELECT headphone.Headphone_ID FROM stock WHERE headphone.Headphone_ID  =  stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY count(*) DESC LIMIT 2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 845,
    "db_id": "headphone_store",
    "question": {
      "id": 845,
      "db_id": "headphone_store",
      "question": "What are the top 2 earpads in terms of the number of headphones using them?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the top 2 earpads in terms of the number of headphones using them?[SQL]\\nSELECT Headphone_ID FROM headphone WHERE Earpads IN (SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY count(*) DESC LIMIT 2) ORDER BY RANDOM() LIMIT 2 <MID>.com/problems/top-2-earpads/description/\n\nGROUP BY Headphone_ID;"
  },
  {
    "id": 846,
    "db_id": "headphone_store",
    "question": {
      "id": 846,
      "db_id": "headphone_store",
      "question": "What are the model, class, and construction of the cheapest headphone?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the model, class, and construction of the cheapest headphone?[SQL]\\nSELECT Headphone_ID FROM headphone WHERE price  =  (SELECT min(price) FROM headphone) ORDER BY model LIMIT 1'\n        ;"
  },
  {
    "id": 847,
    "db_id": "headphone_store",
    "question": {
      "id": 847,
      "db_id": "headphone_store",
      "question": "Find the model, class, and construction of the headphone with the lowest price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the model, class, and construction of the headphone with the lowest price.[SQL]\\nSELECT Headphone_ID FROM headphone WHERE price  =  (SELECT min(price) FROM headphone) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 848,
    "db_id": "headphone_store",
    "question": {
      "id": 848,
      "db_id": "headphone_store",
      "question": "Find the average price for each headphone construction."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average price for each headphone construction.[SQL]\\nSELECT Headphone_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 849,
    "db_id": "headphone_store",
    "question": {
      "id": 849,
      "db_id": "headphone_store",
      "question": "How much does headphones cost on average for each headphone construction?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How much does headphones cost on average for each headphone construction?[SQL]\\nSELECT Headphone_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 850,
    "db_id": "headphone_store",
    "question": {
      "id": 850,
      "db_id": "headphone_store",
      "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?[SQL]\\nSELECT headphone.Headphone_ID FROM headphone WHERE headphone.Earpads  =  'Bowls' INTERSECT SELECT headphone.Headphone_ID FROM headphone WHERE headphone.Earpads  =  'Comfort Pads' <MID>_ID`, `Quantity`) VALUES (102 ,  3) ,  (104 ,  5) ,  (101 ,  2) ,  (103 ,  6) ,  (105 ,  1) ,  (106 ,  4) ,  (107 ,  7) ,  (108 ,  8) ,  (109 ,  9) ,  (110 ,  10) ,  (111 ,  11) ,  (112 ,  12) ,  (113 ,  13) , "
  },
  {
    "id": 851,
    "db_id": "headphone_store",
    "question": {
      "id": 851,
      "db_id": "headphone_store",
      "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.[SQL]\\nSELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT headphone.Headphone_ID FROM headphone WHERE earpads  =  'Comfort Pads' <MID>\n    LIMIT 1000;',\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 852,
    "db_id": "headphone_store",
    "question": {
      "id": 852,
      "db_id": "headphone_store",
      "question": "Which earpads never use plastic construction?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which earpads never use plastic construction?[SQL]\\nSELECT Headphone_ID FROM headphone WHERE Construction  =  'Plastic' EXCEPT SELECT Headphone_ID FROM headphone WHERE Earpads  =  'None' <MID>.html', context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 853,
    "db_id": "headphone_store",
    "question": {
      "id": 853,
      "db_id": "headphone_store",
      "question": "Find all earpads that do not use plastic construction."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all earpads that do not use plastic construction.[SQL]\\nSELECT Headphone_ID FROM headphone WHERE Construction != 'Plastic' AND Earpads  =  'yes' UNION SELECT Headphone_ID FROM headphone WHERE Construction  =  'Plastic' EXCEPT SELECT Headphone_ID FROM headphone WHERE Earpads  =  'no' UNION SELECT Headphone_ID FROM headphone WHERE Earpads  =  'maybe' UNION SELECT Headphone_ID FROM headphone WHERE Earpads  =  'probably not' UNION SELECT Headphone_ID FROM headphone WHERE Earpads  =  'definitely not' UNION SELECT Headphone_ID FROM headphone WHERE Earpads  =  'I have no idea' UNION SELECT Headphone_ID FROM headphone WHERE Earpads  =  'Out of this world' UNION SELECT Headphone_ID FROM headphone WHERE Earpads  =  'Yes!' UNION SELECT Headphone_ID FROM headphone"
  },
  {
    "id": 854,
    "db_id": "headphone_store",
    "question": {
      "id": 854,
      "db_id": "headphone_store",
      "question": "Find the headphone models whose price is below the average price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the headphone models whose price is below the average price.[SQL]\\nSELECT Headphone_ID FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)', 'model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)')]\n\n    LIMIT = 2\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 855,
    "db_id": "headphone_store",
    "question": {
      "id": 855,
      "db_id": "headphone_store",
      "question": "What are the headphone models that cost less than the average price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the headphone models that cost less than the average price?[SQL]\\nSELECT Headphone_ID FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone) ORDER BY model ASC'\n        ;"
  },
  {
    "id": 856,
    "db_id": "headphone_store",
    "question": {
      "id": 856,
      "db_id": "headphone_store",
      "question": "Sort all store names by store open date."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort all store names by store open date.[SQL]\\nSELECT stock.Headphone_ID FROM stock WHERE stock.Headphone_ID  =  1 UNION SELECT headphone.Headphone_ID FROM headphone WHERE headphone.Headphone_ID  =  2 ORDER BY headphone.Date_Opened ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 857,
    "db_id": "headphone_store",
    "question": {
      "id": 857,
      "db_id": "headphone_store",
      "question": "Give me a list of store names, sorted by store open date."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me a list of store names, sorted by store open date.[SQL]\\nSELECT stock.Store_ID FROM stock WHERE stock.Headphone_ID  =  1 ORDER BY Date_Opened ASC'\n        ;"
  },
  {
    "id": 858,
    "db_id": "headphone_store",
    "question": {
      "id": 858,
      "db_id": "headphone_store",
      "question": "List name and parking info for the stores in the Tarzana neighborhood."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List name and parking info for the stores in the Tarzana neighborhood.[SQL]\\nSELECT stock.Headphone_ID FROM store WHERE neighborhood  =  'Tarzana' AND parking != '' UNION SELECT headphone.Headphone_ID FROM headphone WHERE driver-matched_dB  >  75 ORDER BY model ASC LIMIT 3'\n    LIMIT 2' <MID>\n        ;"
  },
  {
    "id": 859,
    "db_id": "headphone_store",
    "question": {
      "id": 859,
      "db_id": "headphone_store",
      "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.[SQL]\\nSELECT stock.Headphone_ID FROM store WHERE neighborhood  =  'Tarzana' AND parkling  =  'yes' UNION SELECT headphone.Headphone_ID FROM headphone WHERE driver-matched_dB  >  75 ORDER BY model ASC LIMIT 3'\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 860,
    "db_id": "headphone_store",
    "question": {
      "id": 860,
      "db_id": "headphone_store",
      "question": "How many different neighborhoods are there for all stores?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different neighborhoods are there for all stores?[SQL]\\nSELECT Store_ID FROM store WHERE Neighborhood != 'null' GROUP BY Neighborhood ORDER BY count(*) DESC LIMIT 1'\n\n    ORDER BY Quantity;"
  },
  {
    "id": 861,
    "db_id": "headphone_store",
    "question": {
      "id": 861,
      "db_id": "headphone_store",
      "question": "Count the number of distinct neighborhoods stores are located."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of distinct neighborhoods stores are located.[SQL]\\nSELECT Store_ID FROM store WHERE neighborhood != 'null' GROUP BY neighborhood ORDER BY count(*) DESC LIMIT 1'\n\n    ORDER BY store.Quantity;"
  },
  {
    "id": 862,
    "db_id": "headphone_store",
    "question": {
      "id": 862,
      "db_id": "headphone_store",
      "question": "find the number of stores in each neighborhood."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, find the number of stores in each neighborhood.[SQL]\\nSELECT Quantity FROM store WHERE Neighborhood IN ( SELECT NEIGHBORHOOD FROM stock GROUP BY NEIGHBORHOOD HAVING COUNT(*)  >  1 ) ORDER BY QUANTITY DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 863,
    "db_id": "headphone_store",
    "question": {
      "id": 863,
      "db_id": "headphone_store",
      "question": "How many stores are there in each neighborhood?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many stores are there in each neighborhood?[SQL]\\nSELECT Quantity FROM stock WHERE Headphone_ID IN (SELECT Headphone_ID FROM headphone WHERE Construction LIKE '%wireless%') GROUP BY neighborhood ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 864,
    "db_id": "headphone_store",
    "question": {
      "id": 864,
      "db_id": "headphone_store",
      "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the store which has the most headphones in stock. List the number of headphones as well.[SQL]\\nSELECT Quantity FROM stock WHERE Headphone_ID  =  (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT sum(Quantity) FROM stock WHERE Headphone_ID  =  (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY COUNT(*) DESC LIMIT 1) AS T1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 865,
    "db_id": "headphone_store",
    "question": {
      "id": 865,
      "db_id": "headphone_store",
      "question": "Which store has the headphones in stock? Give me the store name and the total quantity."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which store has the headphones in stock? Give me the store name and the total quantity.[SQL]\\nSELECT stock.Quantity  FROM stock  WHERE Headphone_ID  =  1 UNION SELECT sum(T1.Quantity) ,  T2.name FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id GROUP BY T2.name'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 866,
    "db_id": "headphone_store",
    "question": {
      "id": 866,
      "db_id": "headphone_store",
      "question": "Find the name of stores which have no headphone in stock."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of stores which have no headphone in stock.[SQL]\\nSELECT Store_ID FROM stock WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM headphone) GROUP BY Store_ID HAVING count(*)  =  0'\n        ;"
  },
  {
    "id": 867,
    "db_id": "headphone_store",
    "question": {
      "id": 867,
      "db_id": "headphone_store",
      "question": "Which stores do not have any headphones in stock? Give me the store names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which stores do not have any headphones in stock? Give me the store names.[SQL]\\nSELECT Store_ID FROM stock WHERE Headphone_ID  =  0 GROUP BY Store_ID HAVING count(*)  =  1'\n        ;"
  },
  {
    "id": 868,
    "db_id": "headphone_store",
    "question": {
      "id": 868,
      "db_id": "headphone_store",
      "question": "Which headphone models do not have any stock in any store?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which headphone models do not have any stock in any store?[SQL]\\nSELECT Headphone_ID FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock) <MID>.driver_matched_dB DESC LIMIT 10'\n    LIMIT = 'LIMIT 10'\n    ;"
  },
  {
    "id": 869,
    "db_id": "headphone_store",
    "question": {
      "id": 869,
      "db_id": "headphone_store",
      "question": "Find the headphone models that are not in stock in any store."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the headphone models that are not in stock in any store.[SQL]\\nSELECT Headphone_ID FROM headphone WHERE model NOT IN (SELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID  =  T2.Headphone_ID) <MID>\n    LIMIT 50'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 870,
    "db_id": "headphone_store",
    "question": {
      "id": 870,
      "db_id": "headphone_store",
      "question": "Which headphone model has the largest quantity of stock across all the stores?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which headphone model has the largest quantity of stock across all the stores?[SQL]\\nSELECT Headphone_ID FROM stock WHERE Quantity  =  (SELECT max(Quantity) FROM stock) ORDER BY Headphone_ID LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 871,
    "db_id": "headphone_store",
    "question": {
      "id": 871,
      "db_id": "headphone_store",
      "question": "Find the headphone model whose total quantity in stock is the largest."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the headphone model whose total quantity in stock is the largest.[SQL]\\nSELECT Headphone_ID FROM stock WHERE headphone_id  =  (SELECT headphone_id FROM stock GROUP BY headphone_id ORDER BY sum(quantity) DESC LIMIT 1) UNION SELECT model FROM headphone WHERE headphone_id  =  (SELECT headphone_id FROM stock GROUP BY headphone_id ORDER BY sum(quantity) DESC LIMIT 1)')]\n\n    LIMIT 1) AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id'\n\n    ;"
  },
  {
    "id": 872,
    "db_id": "headphone_store",
    "question": {
      "id": 872,
      "db_id": "headphone_store",
      "question": "How many headphones are stored in the Woodman store?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many headphones are stored in the Woodman store?[SQL]\\nSELECT Quantity FROM stock WHERE store_id  =  3'\n        ;"
  },
  {
    "id": 873,
    "db_id": "headphone_store",
    "question": {
      "id": 873,
      "db_id": "headphone_store",
      "question": "Find the total quantity of headphones stored in the Woodman store."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total quantity of headphones stored in the Woodman store.[SQL]\\nSELECT Quantity FROM stock WHERE store_id  =  4'\n        ;"
  },
  {
    "id": 874,
    "db_id": "headphone_store",
    "question": {
      "id": 874,
      "db_id": "headphone_store",
      "question": "Which neighborhood does not have any headphone in stock?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which neighborhood does not have any headphone in stock?[SQL]\\nSELECT Headphone_ID FROM stock WHERE neighborhood != '' GROUP BY neighborhood HAVING sum(quantity)  =  0' <MID>_ID`, `Headphone_ID`, `Quantity` FROM stock GROUP BY neighborhood HAVING sum(quantity)  =  0' THEN 1 ELSE 0 END) AS has_no_headphones FROM store GROUP BY neighborhood HAVING min(has_no_headphones)  =  1' THEN neighborhood ELSE NULL END FROM (SELECT T1.neighborhood ,  COUNT(*) ,  T2.has_no_headphones FROM store AS T1 JOIN (SELECT neighborhood ,  min(has_no_headphones) FROM (SELECT neighborhood ,  1 FROM stock GROUP BY neighborhood HAVING sum(quantity)  =  0) AS T2 GROUP BY neighborhood) AS T2 ON T1.neighborhood  =  T2.ne"
  },
  {
    "id": 875,
    "db_id": "headphone_store",
    "question": {
      "id": 875,
      "db_id": "headphone_store",
      "question": "Find the neighborhood where no headphones are in stock."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the neighborhood where no headphones are in stock.[SQL]\\nSELECT Headphone_ID FROM stock WHERE quantity  =  0 GROUP BY neighborhood HAVING count(*)  =  (SELECT count(*) FROM headphone)'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 876,
    "db_id": "aan_1",
    "question": {
      "id": 876,
      "db_id": "aan_1",
      "question": "How many authors do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many authors do we have?[SQL]\\nSELECT paper_id FROM Author_list;"
  },
  {
    "id": 877,
    "db_id": "aan_1",
    "question": {
      "id": 877,
      "db_id": "aan_1",
      "question": "Count the number of authors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of authors.[SQL]\\nSELECT paper_id FROM Author_list;"
  },
  {
    "id": 878,
    "db_id": "aan_1",
    "question": {
      "id": 878,
      "db_id": "aan_1",
      "question": "How many papers do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers do we have?[SQL]\\nSELECT paper_id FROM Paper;"
  },
  {
    "id": 879,
    "db_id": "aan_1",
    "question": {
      "id": 879,
      "db_id": "aan_1",
      "question": "Count the number of papers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of papers.[SQL]\\nSELECT paper_id FROM Paper;"
  },
  {
    "id": 880,
    "db_id": "aan_1",
    "question": {
      "id": 880,
      "db_id": "aan_1",
      "question": "How many affiliations do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many affiliations do we have?[SQL]\\nSELECT venue FROM Paper WHERE YEAR  =  2004 GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 10; SELECT count (DISTINCT affiliation_id) FROM author_list; SELECT count (DISTINCT name) FROM affiliation; SELECT count (DISTINCT email) FROM author; SELECT count (DISTINCT name) FROM author; SELECT count (DISTINCT paper_id) FROM paper; SELECT count (DISTINCT cited_paper_id) FROM citation; SELECT count (DISTINCT t3.paper_id) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id JOIN paper AS t3 ON t1.paper_id  =  t3.paper_id WHERE t1.year  =  2004; SELECT count (DISTINCT"
  },
  {
    "id": 881,
    "db_id": "aan_1",
    "question": {
      "id": 881,
      "db_id": "aan_1",
      "question": "Count the number of affiliations."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of affiliations.[SQL]\\nSELECT venue FROM Paper WHERE YEAR  =  2016 GROUP BY venue ORDER BY COUNT(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 882,
    "db_id": "aan_1",
    "question": {
      "id": 882,
      "db_id": "aan_1",
      "question": "How many papers do we have in NAACL 2000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers do we have in NAACL 2000?[SQL]\\nSELECT paper_id FROM Paper WHERE venue  =  'NAACL 2000' GROUP BY paper_id ORDER BY COUNT ( DISTINCT citation_id ) DESC LIMIT 1000; SELECT COUNT ( DISTINCT t1.paper_id ) FROM Citation AS t2 JOIN Paper AS t1 ON t2.paper_id  =  t1.paper_id WHERE t1.venue  =  'NAACL 2000'; SELECT COUNT ( DISTINCT t1.paper_id ) FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id WHERE t1.venue  =  'NAACL 2000'; SELECT COUNT ( DISTINCT t1.paper_id ) FROM Citation AS t2 JOIN Paper AS t1 ON t2.paper_"
  },
  {
    "id": 883,
    "db_id": "aan_1",
    "question": {
      "id": 883,
      "db_id": "aan_1",
      "question": "Count the number of papers in NAACL 2000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of papers in NAACL 2000.[SQL]\\nSELECT paper_id FROM Paper WHERE venue  =  'NAACL 2000' GROUP BY paper_id ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 1 OFFSET 0;  COUNT ( DISTINCT paper_id )  =  4876953563756857265.  SELECT COUNT ( DISTINCT paper_id ) FROM Paper WHERE venue  =  'NAACL 2000';  COUNT ( DISTINCT paper_id )  =  4876953563756857265.  SELECT COUNT ( DISTINCT paper_id ) FROM Paper WHERE venue  =  'NAACL 2000';  COUNT ( DISTINCT paper_id )  =  487695356375"
  },
  {
    "id": 884,
    "db_id": "aan_1",
    "question": {
      "id": 884,
      "db_id": "aan_1",
      "question": "How many papers are published in year 2009 by Columbia University?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers are published in year 2009 by Columbia University?[SQL]\\nSELECT title FROM Affiliation WHERE name  =  'Columbia University' JOIN Author_list ON affiliation_id  =  Affiliation.affiliation_id JOIN Paper ON paper.paper_id  =  author_id WHERE Affiliation.name  =  'Columbia University' AND paper.year  =  2009; -1874696436' <MID> SELECT COUNT ( DISTINCT t3.paper_id ) FROM author_list AS t2 JOIN paper AS t1 ON t2.paper_id  =  t1.paper_id JOIN AUTHOR AS t4 ON t2.author_id  =  t4.author_id JOIN AFFILIATION AS t3 ON t3.affiliation_id  =  t2.affiliation_id WHERE t3.name  =  'Columbia"
  },
  {
    "id": 885,
    "db_id": "aan_1",
    "question": {
      "id": 885,
      "db_id": "aan_1",
      "question": "Count the number of papers published by Columbia University in 2009."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of papers published by Columbia University in 2009.[SQL]\\nSELECT paper_id FROM Author_list WHERE affiliation_id = ( SELECT affiliation_id FROM Affiliation WHERE name  =  'Columbia University' ) AND YEAR  =  2009;COUNT ( DISTINCT paper_id ) ;SELECT COUNT ( DISTINCT t1.paper_id ) FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id JOIN Author_list AS t3 ON t3.paper_id  =  t2.paper_id JOIN Affiliation AS t4 ON t4.affiliation_id  =  t3.affiliation_id WHERE t4.name  =  'Columbia University' AND t3.year  =  2009;']]\n\n    ORDER BY title;"
  },
  {
    "id": 886,
    "db_id": "aan_1",
    "question": {
      "id": 886,
      "db_id": "aan_1",
      "question": "List names and addresses for all affiliations."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List names and addresses for all affiliations.[SQL]\\nSELECT title FROM Paper WHERE venue  =  'IEEE' AND year  =  2016; SELECT name FROM author_list WHERE affiliation_id != null; SELECT t3.name FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.venue  =  'ACM'; SELECT DISTINCT t1.name FROM author_list AS t1 JOIN affiliation AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.name  =  'Google'; SELECT t1.name FROM author_list AS t1 JOIN affiliation AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t"
  },
  {
    "id": 887,
    "db_id": "aan_1",
    "question": {
      "id": 887,
      "db_id": "aan_1",
      "question": "What are the names and addresses for all affiliations?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and addresses for all affiliations?[SQL]\\nSELECT title FROM Paper;"
  },
  {
    "id": 888,
    "db_id": "aan_1",
    "question": {
      "id": 888,
      "db_id": "aan_1",
      "question": "List all venues and years for papers ordered by year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all venues and years for papers ordered by year.[SQL]\\nSELECT venue FROM Paper WHERE YEAR IS NOT NULL ORDER BY YEAR ASC NULLS LAST'\n        ;"
  },
  {
    "id": 889,
    "db_id": "aan_1",
    "question": {
      "id": 889,
      "db_id": "aan_1",
      "question": "What are the distinct venues for papers, ordered by year?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct venues for papers, ordered by year?[SQL]\\nSELECT venue FROM Paper WHERE venue != '' GROUP BY venue ORDER BY YEAR ASC'\n        ;"
  },
  {
    "id": 890,
    "db_id": "aan_1",
    "question": {
      "id": 890,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers written by Harvard University."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles and paper IDs for papers written by Harvard University.[SQL]\\nSELECT title  FROM Affiliation WHERE name  =  'Harvard University' JOIN Author_list ON affiliation_id  =  Affiliation.affiliation_id JOIN Paper ON Author_list.paper_id  =  Paper.paper_id GROUP BY Paper.title HAVING COUNT ( DISTINCT tlame )  =  1 ORDER BY YEAR DESC; SELECT paper_id FROM Author_list JOIN Paper ON Author_list.paper_id  =  Paper.paper_id WHERE affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name  =  'Harvard University' ); SELECT DISTINCT t1.title FROM Author_list AS t2 JOIN Paper AS t1 ON t2.paper_id  =  t1.paper_id JOIN Affiliation AS t3 ON t2.affiliation_id  = "
  },
  {
    "id": 891,
    "db_id": "aan_1",
    "question": {
      "id": 891,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and paper ids for papers written in affiliation with Harvard University?[SQL]\\nSELECT title  FROM Paper WHERE paper_id IN ( SELECT t2.paper_id FROM Author_list AS t1 JOIN Affiliation AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN Author AS t3 ON t1.author_id  =  t3.author_id WHERE t2.name  =  'Harvard University' ) UNION SELECT t1.title ,  t1.paper_id FROM Paper AS t1 JOIN Citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t2.paper_id IN ( SELECT t4.paper_id FROM Paper AS t4 JOIN Citation AS t3 ON t4.paper_id  =  t3.paper_id WHERE t3.paper_id IN ( SELECT t5.paper_id FROM Paper AS"
  },
  {
    "id": 892,
    "db_id": "aan_1",
    "question": {
      "id": 892,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs written by Mckeown."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all papers with titles and paper IDs written by Mckeown.[SQL]\\nSELECT title \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 893,
    "db_id": "aan_1",
    "question": {
      "id": 893,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers written by Mckeown?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and paper ids for papers written by Mckeown?[SQL]\\nSELECT title \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 894,
    "db_id": "aan_1",
    "question": {
      "id": 894,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[SQL]\\nSELECT title  FROM Affiliation WHERE name  =  'Stanford University' INTERSECT SELECT tittle FROM Affiliation WHERE name  =  'Columbia University' INTERSECT SELECT tittle FROM Paper WHERE venue  =  'New York'; <MID>.author_id AS author_id FROM Author_list WHERE affiliation_id  =  (SELECT affiliation_id FROM affiliation WHERE name  =  'Stanford University') INTERSECT SELECT t2.author_id FROM Author_list AS t2 JOIN affiliation AS t3 ON t2.affiliation_id  =  t3.affiliation_id WHERE t3.name  =  'Columbia University' INTERSECT SELECT t4.paper_id FROM paper AS t4 JOIN citation AS t5 ON t4.paper_id  =  t5.cited_"
  },
  {
    "id": 895,
    "db_id": "aan_1",
    "question": {
      "id": 895,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[SQL]\\nSELECT title  FROM Affiliation WHERE name  =  'Stanford' INTERSECT SELECT titor_id FROM Author_list WHERE affiliation_id  =  [COLUMNB]' <MID>_id FROM Author_list WHERE affiliation_id  =  [COLUMNB]' GROUP BY titor_id HAVING COUNT  ( DISTINCT affiliation_id )  =  2' UNION SELECT titor_id FROM Author_list WHERE affiliation_id  =  [STANFORD]' GROUP BY titor_id HAVING COUNT  ( DISTINCT affiliation_id )  =  2' ORDER BY titor_id ASC' UNION SELECT titor_id FROM Author_list WHERE affiliation_id  =  [PRINCETON]' GROUP BY titor_id HAVING COUNT  ( DISTINCT affiliation_id )  =  "
  },
  {
    "id": 896,
    "db_id": "aan_1",
    "question": {
      "id": 896,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT DISTINCT t3.paper_id FROM Author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Kathleen Mckeown' INTERSECT SELECT DISTINCT t4.paper_id FROM Author AS t5 JOIN author_list AS t6 ON t5.author_id  =  t6.author_id JOIN paper AS t4 ON t6.paper_id  =  t4.paper_id WHERE t5.name  =  'Owen Rambow') ORDER BY title ASC' <MID>_id` integer DEFAULT NULL , PRIMARY KEY (`paper_id` , `author_id`) , CONSTRAINT `Author_"
  },
  {
    "id": 897,
    "db_id": "aan_1",
    "question": {
      "id": 897,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT t3.paper_id FROM Author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown' AND t2.affiliation_id IN ( SELECT affiliation_id FROM affiliation WHERE name  =  'Kathleen' ) AND t2.affiliation_id IN ( SELECT affiliation_id FROM affiliation WHERE name  =  'Owen' ) ); <MID>\n    GROUP BY title;"
  },
  {
    "id": 898,
    "db_id": "aan_1",
    "question": {
      "id": 898,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[SQL]\\nSELECT title FROM Author_list WHERE author_id IN ( SELECT author_id FROM Author WHERE name  =  'Mckeown' ) EXCEPT SELECT t1.title FROM Author_list AS t1 JOIN Author_list AS t2 ON t1.paper_id  =  t2.paper_id WHERE t2.author_id IN ( SELECT author_id FROM Author WHERE name  =  'Rambow' )'\n        ;"
  },
  {
    "id": 899,
    "db_id": "aan_1",
    "question": {
      "id": 899,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and paper ids which have Mckeown as an author, but not Rambow?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT t3.paper_id FROM Author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  'Mckeown' EXCEPT SELECT t4.paper_id FROM Author AS t5 JOIN author_list AS t6 ON t5.author_id  =  t6.author_id JOIN paper AS t4 ON t6.paper_id  =  t4.paper_id WHERE t5.name  =  'Rambow' ) ORDER BY title DESC LIMIT 50000 OFFSET 0'\n    ;"
  },
  {
    "id": 900,
    "db_id": "aan_1",
    "question": {
      "id": 900,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[SQL]\\nSELECT title FROM Author_list WHERE author_id IN ( SELECT author_id FROM author WHERE name  =  'Mckeown, Kathleen' OR name  =  'Rambow, Owen' ) AND paper_id IN ( SELECT paper_id FROM paper ); <MID>\n    GROUP BY title;"
  },
  {
    "id": 901,
    "db_id": "aan_1",
    "question": {
      "id": 901,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[SQL]\\nSELECT title  FROM Paper WHERE paper_id IN ( SELECT DISTINCT t2.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'Mckeown, Kathleen' OR t1.name  =  'Rambow, Owen') UNION SELECT t1.titlte FROM Paper AS t1 JOIN Citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t2.paper_id IN ( SELECT DISTINCT t3.paper_id FROM Paper AS t3 JOIN Author AS t4 ON t3.paper_id  =  t4.paper_id WHERE t4.name  =  'Mckeown, Kathleen' OR t4.name  =  'Rambow"
  },
  {
    "id": 902,
    "db_id": "aan_1",
    "question": {
      "id": 902,
      "db_id": "aan_1",
      "question": "List the names of all authors and their number of papers in descending order by number of papers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of all authors and their number of papers in descending order by number of papers.[SQL]\\nSELECT title FROM Paper;"
  },
  {
    "id": 903,
    "db_id": "aan_1",
    "question": {
      "id": 903,
      "db_id": "aan_1",
      "question": "How many papers did each author publish, ordered by number of papers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers did each author publish, ordered by number of papers?[SQL]\\nSELECT title FROM Author_list WHERE author_id  =  1; SELECT count(*) FROM paper GROUP BY author_id ORDER BY count(*) DESC; SELECT t3.title FROM author_list AS t2 JOIN paper AS t1 ON t2.paper_id  =  t1.paper_id JOIN author AS t3 ON t2.author_id  =  t3.author_id WHERE t2.author_id  =  1; SELECT DISTINCT t4.title FROM citation AS t5 JOIN paper AS t1 ON t5.cited_paper_id  =  t1.paper_id JOIN paper AS t4 ON t5.paper_id  =  t4.paper_id; SELECT t5.year FROM paper AS t5 ORDER BY t5.year ASC; SELECT t5.year FROM paper AS t5 ORDER BY t5.year DESC; SELECT t5.year FROM"
  },
  {
    "id": 904,
    "db_id": "aan_1",
    "question": {
      "id": 904,
      "db_id": "aan_1",
      "question": "List all affiliations with ascending ordered number of papers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all affiliations with ascending ordered number of papers.[SQL]\\nSELECT title FROM Affiliation;"
  },
  {
    "id": 905,
    "db_id": "aan_1",
    "question": {
      "id": 905,
      "db_id": "aan_1",
      "question": "What are the names of all affiliations, ordered by number of papers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all affiliations, ordered by number of papers?[SQL]\\nSELECT title FROM AffiliationORDER BY paper_id;"
  },
  {
    "id": 906,
    "db_id": "aan_1",
    "question": {
      "id": 906,
      "db_id": "aan_1",
      "question": "List names of all authors who have more than 50 papers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List names of all authors who have more than 50 papers.[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2016 GROUP BY t1.author_id HAVING COUNT ( DISTINCT t1.paper_id )  >  50'\n        ;"
  },
  {
    "id": 907,
    "db_id": "aan_1",
    "question": {
      "id": 907,
      "db_id": "aan_1",
      "question": "What are the names of all authors who have more than 50 papers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all authors who have more than 50 papers?[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2016 GROUP BY t1.author_id HAVING COUNT ( DISTINCT t3.paper_id )  >  50 JOIN Author AS t2 ON t1.author_id  =  t2.author_id JOIN Citation AS t3 ON t1.paper_id  =  t3.cited_paper_id WHERE t3.year  =  2016; <MID>\n    GROUP BY title;"
  },
  {
    "id": 908,
    "db_id": "aan_1",
    "question": {
      "id": 908,
      "db_id": "aan_1",
      "question": "List names of all authors who have only 1 paper."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List names of all authors who have only 1 paper.[SQL]\\nSELECT title FROM Author WHERE author_id IN ( SELECT DISTINCT t1.author_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t1.author_id HAVING COUNT ( DISTINCT t3.title )  =  1 ) ORDER BY t1.name ASC NULLS LAST'\n        ;"
  },
  {
    "id": 909,
    "db_id": "aan_1",
    "question": {
      "id": 909,
      "db_id": "aan_1",
      "question": "What are the names of authors who have exactly 1 paper?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of authors who have exactly 1 paper?[SQL]\\nSELECT title FROM Author WHERE author_id IN ( SELECT DISTINCT t1.author_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t1.author_id HAVING COUNT ( DISTINCT t3.title )  =  1 ) ORDER BY title ASC'\n        ;"
  },
  {
    "id": 910,
    "db_id": "aan_1",
    "question": {
      "id": 910,
      "db_id": "aan_1",
      "question": "What is the venue and year with the most number of publications?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the venue and year with the most number of publications?[SQL]\\nSELECT venue FROM Paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper ) GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 1; <MID>_id` INTEGER NOT NULL ,  `affiliation_id` INTEGER DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`aff"
  },
  {
    "id": 911,
    "db_id": "aan_1",
    "question": {
      "id": 911,
      "db_id": "aan_1",
      "question": "What was the venue and year with the most publications?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What was the venue and year with the most publications?[SQL]\\nSELECT venue FROM Paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper ) GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 1;  SELECT max(YEAR) FROM paper; <MID>_id` integer DEFAULT NULL\n    GROUP BY title;"
  },
  {
    "id": 912,
    "db_id": "aan_1",
    "question": {
      "id": 912,
      "db_id": "aan_1",
      "question": "What is the venue with the least number of publications?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the venue with the least number of publications?[SQL]\\nSELECT venue FROM Paper WHERE YEAR  =  ( SELECT min ( YEAR ) FROM paper ) GROUP BY venue ORDER BY count ( DISTINCT paper_id ) ASC LIMIT 1; <MID>_id` INTEGER NOT NULL ,  `affiliation_id` INTEGER DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`aff"
  },
  {
    "id": 913,
    "db_id": "aan_1",
    "question": {
      "id": 913,
      "db_id": "aan_1",
      "question": "Which venue has the fewest publications?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which venue has the fewest publications?[SQL]\\nSELECT venue FROM Paper WHERE YEAR  =  2016 GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) ASC LIMIT 1; <MID> SELECT t3.paper_id FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id JOIN Author_list AS t3 ON t3.paper_id  =  t1.paper_id WHERE t1.year  =  2016 GROUP BY t3.affiliation_id ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC LIMIT 1;'\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 914,
    "db_id": "aan_1",
    "question": {
      "id": 914,
      "db_id": "aan_1",
      "question": "How many papers cite paper with id A00-1002?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers cite paper with id A00-1002?[SQL]\\nSELECT paper_id FROM Citation WHERE cited_paper_id  =  'A00-1002' GROUP BY paper_id ORDER BY COUNT ( DISTINCT cited_paper_id ) DESC LIMIT 1 OFFSET 0; SELECT COUNT ( DISTINCT t1.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id WHERE t2.year  =  2016; SELECT COUNT ( DISTINCT t1.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id WHERE t2.year  =  2017; SELECT COUNT ( DISTINCT t1.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t"
  },
  {
    "id": 915,
    "db_id": "aan_1",
    "question": {
      "id": 915,
      "db_id": "aan_1",
      "question": "Count the number of papers which cited a paper with id A00-1002."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of papers which cited a paper with id A00-1002.[SQL]\\nSELECT paper_id FROM Citation WHERE cited_paper_id  =  'A00-1002' GROUP BY paper_id ORDER BY COUNT ( DISTINCT cited_paper_id ) DESC LIMIT 1 OFFSET 0; SELECT COUNT ( DISTINCT paper_id ) FROM Citation WHERE cited_paper_id  =  'A00-1002'; SELECT COUNT ( DISTINCT t2.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id WHERE t1.cited_paper_id  =  'A00-1002'; SELECT COUNT ( DISTINCT t2.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id WHERE t1"
  },
  {
    "id": 916,
    "db_id": "aan_1",
    "question": {
      "id": 916,
      "db_id": "aan_1",
      "question": "How many reference papers does paper with id D12-1027 have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many reference papers does paper with id D12-1027 have?[SQL]\\nSELECT paper_id FROM Citation WHERE cited_paper_id  =  'D12-1027'; SELECT COUNT ( DISTINCT t2.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id WHERE t1.cited_paper_id  =  'D12-1027'; SELECT COUNT ( DISTINCT t2.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id WHERE t1.paper_id  =  'D12-1027' ;] SELECT COUNT ( DISTINCT t2.paper_id ) FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_"
  },
  {
    "id": 917,
    "db_id": "aan_1",
    "question": {
      "id": 917,
      "db_id": "aan_1",
      "question": "Count the number of references the paper with id D12-1027 has."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of references the paper with id D12-1027 has.[SQL]\\nSELECT paper_id FROM Citation WHERE cited_paper_id  =  ( SELECT paper_id FROM Citation WHERE paper_id  =  'D12-1027' ) ; COUNT (*) ; <MID>_id` INTEGER DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`) }\n\n"
  },
  {
    "id": 918,
    "db_id": "aan_1",
    "question": {
      "id": 918,
      "db_id": "aan_1",
      "question": "What is the id and the number of citations of the most cited paper?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id and the number of citations of the most cited paper?[SQL]\\nSELECT title FROM Paper WHERE paper_id  =  ( SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT ( * ) DESC LIMIT 1 ) UNION SELECT DISTINCT t1.title FROM paper AS t1 JOIN Citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.paper_id ORDER BY COUNT ( * ) DESC LIMIT 1; <MID>\n    GROUP BY title;"
  },
  {
    "id": 919,
    "db_id": "aan_1",
    "question": {
      "id": 919,
      "db_id": "aan_1",
      "question": "Give the id and the number of citations of the most cited paper."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the id and the number of citations of the most cited paper.[SQL]\\nSELECT title FROM Paper WHERE paper_id  =  ( SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT ( * ) DESC LIMIT 1 ) ORDER BY years DESC;  SELECT COUNT ( DISTINCT cited_paper_id ) FROM Citation WHERE paper_id  =  ( SELECT paper_id FROM Paper ORDER BY years DESC LIMIT 1 ); SELECT DISTINCT COUNT ( t3.cited_paper_id ) FROM Citation AS t2 JOIN Paper AS t1 ON t2.paper_id  =  t1.paper_id JOIN Citation AS t3 ON t2.cited_paper_id  =  t3.cited_paper_id WHERE t1.year  =  ( SELECT MAX ( t4.year ) FROM Paper AS t4 );'\n    LIMIT 1;'\n    ;"
  },
  {
    "id": 920,
    "db_id": "aan_1",
    "question": {
      "id": 920,
      "db_id": "aan_1",
      "question": "Give the title of the paper which cites most number of papers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the title of the paper which cites most number of papers?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1 ) UNION SELECT tittle FROM Paper WHERE paper_id NOT IN ( SELECT paper_id FROM Citation );; SELECT tittle FROM PAPER WHERE paper_id IN ( SELECT DISTINCT t2.paper_id FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id GROUP BY t2.paper_id ORDER BY COUNT(*) DESC LIMIT 1 );; SELECT tittle FROM PAPER WHERE paper_id NOT IN ( SELECT DISTINCT t2.paper_id FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id GROUP BY t2.paper_id ORDER BY COUNT(*) DESC LIMIT 1 );"
  },
  {
    "id": 921,
    "db_id": "aan_1",
    "question": {
      "id": 921,
      "db_id": "aan_1",
      "question": "What is the title of the paper which cites the most other papers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title of the paper which cites the most other papers?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT t1.paper_id FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id GROUP BY t1.paper_id ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1 ) UNION SELECT t1.title FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id JOIN Paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t3.paper_id ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC LIMIT 1; <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ib"
  },
  {
    "id": 922,
    "db_id": "aan_1",
    "question": {
      "id": 922,
      "db_id": "aan_1",
      "question": "List top 10 most cited papers and their numbers of citations."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List top 10 most cited papers and their numbers of citations.[SQL]\\nSELECT title \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 923,
    "db_id": "aan_1",
    "question": {
      "id": 923,
      "db_id": "aan_1",
      "question": "What are the 10 most cited papers, and how many citations did each have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the 10 most cited papers, and how many citations did each have?[SQL]\\nSELECT title \n                        FROM Paper WHERE paper_id IN ( SELECT DISTINCT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT ( * ) DESC LIMIT 10 ) ORDER BY years DESC;[]]'\n    LIMIT 10;', 'SELECT t1.title FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.paper_id ORDER BY count ( * ) DESC LIMIT 10;', 'SELECT t3.title FROM paper AS t3 JOIN citation AS t4 ON t3.paper_id  =  t4.paper_id GROUP BY t4.paper_id ORDER BY count ( * ) DESC LIMIT 10;']\n    \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 924,
    "db_id": "aan_1",
    "question": {
      "id": 924,
      "db_id": "aan_1",
      "question": "How many citations does Mckeown , Kathleen have ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many citations does Mckeown , Kathleen have ?[SQL]\\nSELECT paper_id FROM Author_list WHERE author_id  =  ( SELECT author_id FROM author WHERE name  =  'Mckeown , Kathleen' ) GROUP BY paper_id ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1;  SELECT COUNT ( DISTINCT t3.cited_paper_id ) FROM Citation AS t3 JOIN Author_list AS t1 ON t1.paper_id  =  t3.paper_id JOIN author AS t2 ON t2.author_id  =  t1.author_id WHERE t2.name  =  'Mckeown , Kathleen'; <MID>\n    GROUP BY title;"
  },
  {
    "id": 925,
    "db_id": "aan_1",
    "question": {
      "id": 925,
      "db_id": "aan_1",
      "question": "Count the number of citations Mckeown , Kathleen has ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of citations Mckeown , Kathleen has .[SQL]\\nSELECT paper_id FROM Author_list WHERE author_id = ( SELECT author_id FROM author WHERE name  =  'Mckeown , Kathleen' ) GROUP BY paper_id ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 1;  # Query 1;  SELECT COUNT ( DISTINCT t2.paper_id ) FROM Author_list AS t1 JOIN Citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.author_id  =  ( SELECT author_id FROM author WHERE name  =  'Mckeown , Kathleen' );  # Query 2;  SELECT COUNT ( DISTINCT t2.paper_id ) FROM Author_list AS t1 JOIN Citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.author"
  },
  {
    "id": 926,
    "db_id": "aan_1",
    "question": {
      "id": 926,
      "db_id": "aan_1",
      "question": "How many papers does Mckeown , Kathleen cite ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers does Mckeown , Kathleen cite ?[SQL]\\nSELECT paper_id FROM Citation WHERE cited_paper_id  =  'p4' AND paper_id  =  'p1';' <MID>\n    GROUP BY title;"
  },
  {
    "id": 927,
    "db_id": "aan_1",
    "question": {
      "id": 927,
      "db_id": "aan_1",
      "question": "Count the number of papers Mckeown , Kathleen has cited ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of papers Mckeown , Kathleen has cited .[SQL]\\nSELECT paper_id FROM Citation WHERE cited_paper_id IN ( SELECT DISTINCT t2.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  'Mckeown , Kathleen' ) ; COUNT ( paper_id ) ; <MID>_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation"
  },
  {
    "id": 928,
    "db_id": "aan_1",
    "question": {
      "id": 928,
      "db_id": "aan_1",
      "question": "Find the name and number of citations of the author who has most citations among all authors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and number of citations of the author who has most citations among all authors?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT DISTINCT t1.cited_paper_id FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT ( * ) DESC LIMIT 1 ) UNION SELECT t3.name FROM Author AS t3 JOIN Author_list AS t4 ON t3.author_id  =  t4.author_id GROUP BY t4.paper_id ORDER BY COUNT ( DISTINCT t4.paper_id ) DESC LIMIT 1;'\n        ;"
  },
  {
    "id": 929,
    "db_id": "aan_1",
    "question": {
      "id": 929,
      "db_id": "aan_1",
      "question": "What is the name and number of citations of the author with the greatest number of citations among authors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and number of citations of the author with the greatest number of citations among authors?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT DISTINCT t1.cited_paper_id FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT ( * ) DESC LIMIT 1 ) UNION SELECT t3.title FROM Citation AS t4 JOIN Paper AS t3 ON t4.cited_paper_id  =  t3.paper_id GROUP BY t4.paper_id ORDER BY COUNT ( DISTINCT t4.cited_paper_id ) DESC LIMIT 1;'\n        ;"
  },
  {
    "id": 930,
    "db_id": "aan_1",
    "question": {
      "id": 930,
      "db_id": "aan_1",
      "question": "What are the venues and years where Mckeown , Kathleen had papers ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the venues and years where Mckeown , Kathleen had papers ?[SQL]\\nSELECT title \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 931,
    "db_id": "aan_1",
    "question": {
      "id": 931,
      "db_id": "aan_1",
      "question": "Which venues and years did Mckeown , Kathleen have papers ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which venues and years did Mckeown , Kathleen have papers ?[SQL]\\nSELECT title \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 932,
    "db_id": "aan_1",
    "question": {
      "id": 932,
      "db_id": "aan_1",
      "question": "What are the venues and years where Columbia University had papers ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the venues and years where Columbia University had papers ?[SQL]\\nSELECT title FROM Author_list WHERE affiliation_id  =  1; SELECT t3.year FROM paper AS t3 JOIN Citation AS t4 ON t3.paper_id  =  t4.cited_paper_id JOIN paper AS t5 ON t5.paper_id  =  t4.paper_id WHERE t5.venue  =  'Columbia University' AND t5.year  =  t3.year; SELECT DISTINCT t3.venue FROM paper AS t3 JOIN Citation AS t4 ON t3.paper_id  =  t4.cited_paper_id JOIN paper AS t5 ON t5.paper_id  =  t4.paper_id WHERE t5.venue  =  'Columbia University' AND t5.year  =  t3.year; SELECT DISTINCT t3.year FROM paper AS t3 JOIN"
  },
  {
    "id": 933,
    "db_id": "aan_1",
    "question": {
      "id": 933,
      "db_id": "aan_1",
      "question": "Which venues and years did Columbia University have papers ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which venues and years did Columbia University have papers ?[SQL]\\nSELECT title FROM Affiliation WHERE name  =  'Columbia University' JOIN Author_list ON affiliation_id  =  Author_list.affiliation_id JOIN Paper ON Author_list.paper_id  =  Paper.paper_id GROUP BY title; <MID>\n    GROUP BY title;"
  },
  {
    "id": 934,
    "db_id": "aan_1",
    "question": {
      "id": 934,
      "db_id": "aan_1",
      "question": "Which author had the most papers in the year 2009?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which author had the most papers in the year 2009?[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2009 GROUP BY title ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 1; SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t3.year  =  2009 GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC LIMIT 1;'\n    LIMIT 1;' SELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t3.year  =  "
  },
  {
    "id": 935,
    "db_id": "aan_1",
    "question": {
      "id": 935,
      "db_id": "aan_1",
      "question": "What is the name of the author with the most papers in 2009?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the author with the most papers in 2009?[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2009 ORDER BY COUNT ( DISTINCT t1.paper_id ) DESC LIMIT 1; SELECT t1.name FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id  =  t2.author_id JOIN Paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE YEAR  =  2009 GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.paper_id ) DESC LIMIT 1;'\n        ;"
  },
  {
    "id": 936,
    "db_id": "aan_1",
    "question": {
      "id": 936,
      "db_id": "aan_1",
      "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the top 3 affiliations that have the most papers in year 2009?[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2009 ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation WHERE affiliation_id IN ( SELECT affiliation_id FROM author_list WHERE paper_id IN ( SELECT paper_id FROM paper WHERE YEAR  =  2009 ) ); SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation ORDER BY tities DESC LIMIT 3; SELECT name FROM Affiliation"
  },
  {
    "id": 937,
    "db_id": "aan_1",
    "question": {
      "id": 937,
      "db_id": "aan_1",
      "question": "Which 3 affiliations had the most papers in 2009?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which 3 affiliations had the most papers in 2009?[SQL]\\nSELECT title FROM Affiliation WHERE affiliation_id IN ( SELECT affiliation_id FROM Author_list WHERE paper_id IN ( SELECT paper_id FROM Paper WHERE YEAR  =  2009 ) ) GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 3; <MID>_id IN ( SELECT paper_id FROM Paper WHERE YEAR  =  2009 ) ) GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.paper_id ) DESC LIMIT 3;'\n    LIMIT = 3\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n"
  },
  {
    "id": 938,
    "db_id": "aan_1",
    "question": {
      "id": 938,
      "db_id": "aan_1",
      "question": "How many papers does Columbia University have in or before 2009 ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers does Columbia University have in or before 2009 ?[SQL]\\nSELECT paper_id FROM Author_list WHERE affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name  =  'Columbia University' ) AND YEAR  <=  2009; COUNT ( DISTINCT paper_id ) ; <MID>_id` integer DEFAULT NULL ,  `affiliation_id` integer DEFAULT NULL ,  PRIMARY KEY (`paper_id` ,  `author_id`) ,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`) ,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`) ,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) RE"
  },
  {
    "id": 939,
    "db_id": "aan_1",
    "question": {
      "id": 939,
      "db_id": "aan_1",
      "question": "Count the number of papers Columbia University had during or prior to 2009 ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of papers Columbia University had during or prior to 2009 .[SQL]\\nSELECT paper_id FROM Author_list WHERE affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name  =  'Columbia University' ) UNION SELECT paper_id FROM Citation WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name  =  'Columbia University' ) ) AND YEAR  <=  2009;COUNT ( DISTINCT paper_id ) ;COUNT ( DISTINCT t1.paper_id ) FROM author_list AS t1 JOIN affiliation AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.name  =  'Columbia University' OR EXISTS ( SELECT t3.paper_id FROM citation AS t3 JOIN paper AS t4 ON t3.paper_id  =  t4"
  },
  {
    "id": 940,
    "db_id": "aan_1",
    "question": {
      "id": 940,
      "db_id": "aan_1",
      "question": "How many papers does Stanford University have between 2000 and 2009?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers does Stanford University have between 2000 and 2009?[SQL]\\nSELECT paper_id FROM Author_list WHERE affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name  =  'Stanford University' ) AND YEAR BETWEEN 2000 AND 2009; COUNT ( DISTINCT paper_id ) ; <MID>\n    GROUP BY title;"
  },
  {
    "id": 941,
    "db_id": "aan_1",
    "question": {
      "id": 941,
      "db_id": "aan_1",
      "question": "Count the number of papers Stanford University had between 2000 and 2009."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of papers Stanford University had between 2000 and 2009.[SQL]\\nSELECT paper_id FROM Author_list WHERE affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name  =  'Stanford University' ) AND YEAR BETWEEN 2000 AND 2009; COUNT ( DISTINCT paper_id ) ;] SELECT COUNT ( DISTINCT t1.paper_id ) FROM Author_list AS t2 JOIN Paper AS t1 ON t2.paper_id  =  t1.paper_id JOIN Affiliation AS t3 ON t2.affiliation_id  =  t3.affiliation_id WHERE t3.name  =  'Stanford University' AND t1.YEAR BETWEEN 2000 AND 2009;] SELECT COUNT ( DISTINCT t1.paper_id ) FROM Author_list AS t2 JOIN Paper AS t1 ON t"
  },
  {
    "id": 942,
    "db_id": "aan_1",
    "question": {
      "id": 942,
      "db_id": "aan_1",
      "question": "What is the title of the paper that has most number of authors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title of the paper that has most number of authors?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT title FROM Paper WHERE paper_id NOT IN ( SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY count(*) DESC LIMIT 1 ); <MID>_id` integer DEFAULT NULL\n    GROUP BY paper_id;"
  },
  {
    "id": 943,
    "db_id": "aan_1",
    "question": {
      "id": 943,
      "db_id": "aan_1",
      "question": "Give the title of the paper with the most authors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the title of the paper with the most authors.[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT title FROM Paper WHERE paper_id NOT IN ( SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY count(*) DESC LIMIT 1 );'\n        ;"
  },
  {
    "id": 944,
    "db_id": "aan_1",
    "question": {
      "id": 944,
      "db_id": "aan_1",
      "question": "How many collaborators has Mckeown , Kathleen had ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many collaborators has Mckeown , Kathleen had ?[SQL]\\nSELECT paper_id FROM Author_list WHERE author_id IN ( SELECT author_id FROM Author WHERE name  =  'Mckeown , Kathleen' ) GROUP BY paper_id ORDER BY COUNT ( DISTINCT affiliation_id ) DESC LIMIT 1 OFFSET 0; SELECT COUNT ( DISTINCT t1.affiliation_id ) FROM Author_list AS t2 JOIN Affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN Author AS t3 ON t3.author_id  =  t2.author_id WHERE t3.name  =  'Mckeown , Kathleen'; SELECT COUNT ( DISTINCT t1.affiliation_id ) FROM Author_list AS t2 JOIN Affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN Author"
  },
  {
    "id": 945,
    "db_id": "aan_1",
    "question": {
      "id": 945,
      "db_id": "aan_1",
      "question": "Count the number of collaborators that Mckeown , Kathleen has had ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of collaborators that Mckeown , Kathleen has had .[SQL]\\nSELECT paper_id FROM Author_list WHERE author_id IN ( SELECT author_id FROM Author WHERE name  =  'Mckeown , Kathleen' ) GROUP BY paper_id ORDER BY COUNT ( DISTINCT affiliation_id ) DESC LIMIT 1 OFFSET 0;COUNT ( DISTINCT affiliation_id );SELECT COUNT ( DISTINCT t1.affiliation_id ) FROM Author_list AS t2 JOIN Affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN Author AS t3 ON t3.author_id  =  t2.author_id WHERE t3.name  =  'Mckeown , Kathleen';SELECT COUNT ( DISTINCT t1.affiliation_id ) FROM Author_list AS t2 JOIN Affiliation AS t1 ON t2.affiliation_id  = "
  },
  {
    "id": 946,
    "db_id": "aan_1",
    "question": {
      "id": 946,
      "db_id": "aan_1",
      "question": "Who has the most papers co-authored with Mckeown , Kathleen ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who has the most papers co-authored with Mckeown , Kathleen ?[SQL]\\nSELECT title FROM Author_list WHERE author_id IN ( SELECT author_id FROM author_list WHERE name  =  'Mckeown , Kathleen' ) EXCEPT ( SELECT t3.title FROM paper AS t3 JOIN citation AS t4 ON t3.paper_id  =  t4.cited_paper_id JOIN author_list AS t2 ON t2.paper_id  =  t4.paper_id JOIN author_list AS t1 ON t2.author_id  =  t1.author_id WHERE t1.name  =  'Mckeown , Kathleen' ); <MID>\n    GROUP BY title;"
  },
  {
    "id": 947,
    "db_id": "aan_1",
    "question": {
      "id": 947,
      "db_id": "aan_1",
      "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?[SQL]\\nSELECT title FROM Author_list WHERE author_id IN ( SELECT ta.author_id FROM author AS ti FROM author_list AS ta JOIN paper AS t ON ta.paper_id  =  t.paper_id WHERE ti.name  =  'Mckeown , Kathleen' ) ORDER BY COUNT ( DISTINCT t.paper_id ) DESC LIMIT 1;  */\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 948,
    "db_id": "aan_1",
    "question": {
      "id": 948,
      "db_id": "aan_1",
      "question": "Find the id of the papers whose title has the key word 'translation'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id of the papers whose title has the key word 'translation'.[SQL]\\nSELECT paper_id FROM Paper WHERE title LIKE '%translation%'  */; <MID> = $row['affiliation_id'];\n           \n          \n       \n         \n     \n      \n   \n    \n  \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    \n \n    "
  },
  {
    "id": 949,
    "db_id": "aan_1",
    "question": {
      "id": 949,
      "db_id": "aan_1",
      "question": "What are the ids for papers with titles containing 'translation'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids for papers with titles containing 'translation'?[SQL]\\nSELECT paper_id FROM Paper WHERE title LIKE '%translation%' <MID>_id IN ( SELECT DISTINCT t4.paper_id FROM Citation AS t3 JOIN Paper AS t1 ON t3.cited_paper_id  =  t1.paper_id JOIN Citation AS t4 ON t4.paper_id  =  t1.paper_id WHERE t1.title LIKE '%translation%' ) ORDER BY t4.year DESC LIMIT 10;'\n    LIMIT 10;'\n    ;"
  },
  {
    "id": 950,
    "db_id": "aan_1",
    "question": {
      "id": 950,
      "db_id": "aan_1",
      "question": "Find the id and title of the papers that are never cited by others."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id and title of the papers that are never cited by others.[SQL]\\nSELECT paper_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 951,
    "db_id": "aan_1",
    "question": {
      "id": 951,
      "db_id": "aan_1",
      "question": "What are the ids and titles for papers that have never been cited?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and titles for papers that have never been cited?[SQL]\\nSELECT paper_id FROM Paper WHERE paper_id NOT IN ( SELECT paper_id FROM Citation ) AND title != 'null' AND venue != 'null' AND YEAR != -1;  [NoSQL] SELECT DISTINCT paper_id FROM paper WHERE paper_id NOT IN ( SELECT paper_id FROM Citation );  [Files] SELECT DISTINCT paper_id FROM paper WHERE paper_id NOT IN ( SELECT paper_id FROM Citation ) AND title != 'null' AND venue != 'null' AND YEAR != -1;  [MANUAL] Find all the papers that have never been cited. For each of these papers find all their citations. The intersection of this set of all citations and the set of all papers represents the papers that have never been cited.  */}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 952,
    "db_id": "aan_1",
    "question": {
      "id": 952,
      "db_id": "aan_1",
      "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[SQL]\\nSELECT title FROM Affiliation WHERE address LIKE '%China%' ORDER BY COUNT (DISTINCT t3.paper_id) DESC LIMIT 1; <MID> = Author_list.paper_id WHERE Author_list.affiliation_id  =  t2.affiliation_id GROUP BY t2.affiliation_id HAVING COUNT ( DISTINCT t3.paper_id )  =  ( SELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.address LIKE '%China%' ); */} SELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation"
  },
  {
    "id": 953,
    "db_id": "aan_1",
    "question": {
      "id": 953,
      "db_id": "aan_1",
      "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[SQL]\\nSELECT title FROM Affiliation WHERE affiliation_id IN ( SELECT affiliation_id FROM Author_list WHERE author_id IN ( SELECT author_id FROM Author WHERE email LIKE '%sina.com' ) ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1; <MID> = cited_paper_id WHERE paper_id  =  {self.test_data[0]} UNION SELECT DISTINCT t3.year FROM Citation AS t2 JOIN Paper AS t3 ON t2.cited_paper_id  =  t3.paper_id WHERE t2.paper_id  =  {self.test_data[0]};')\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 954,
    "db_id": "aan_1",
    "question": {
      "id": 954,
      "db_id": "aan_1",
      "question": "Find the number of papers published in different conferences each year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of papers published in different conferences each year.[SQL]\\nSELECT venue FROM Paper WHERE YEAR  =  2011 GROUP BY venue ORDER BY COUNT(*) DESC LIMIT 3'\n        ;"
  },
  {
    "id": 955,
    "db_id": "aan_1",
    "question": {
      "id": 955,
      "db_id": "aan_1",
      "question": "How many papers are published in each venue in each year?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers are published in each venue in each year?[SQL]\\nSELECT venue \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 956,
    "db_id": "aan_1",
    "question": {
      "id": 956,
      "db_id": "aan_1",
      "question": "Find the total number of papers for each affiliation."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total number of papers for each affiliation.[SQL]\\nSELECT title FROM Affiliation;"
  },
  {
    "id": 957,
    "db_id": "aan_1",
    "question": {
      "id": 957,
      "db_id": "aan_1",
      "question": "How many papers has each affiliation published?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many papers has each affiliation published?[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2016; SELECT count(*) FROM author_list GROUP BY affiliation_id; SELECT t3.name FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id JOIN paper AS t1 JOIN author_list AS t3 ON t3.paper_id  =  t1.paper_id GROUP BY t3.affiliation_id ORDER BY COUNT ( DISTINCT t1.title ) DESC LIMIT 1; SELECT t4.name FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id JOIN paper AS t1 JOIN author_list AS t3 ON t3.paper_id  =  t1.paper_id JOIN affiliation AS t4 ON t4.affiliation"
  },
  {
    "id": 958,
    "db_id": "aan_1",
    "question": {
      "id": 958,
      "db_id": "aan_1",
      "question": "Find the titles of papers that have more than 50 citations."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles of papers that have more than 50 citations.[SQL]\\nSELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING count(*)  >  50) ORDER BY title;[NoSQL] SELECT DISTINCT t3.title FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id JOIN Paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t3.paper_id ORDER BY COUNT ( DISTINCT t3.title )  >  50;[Graph] SELECT t4.title FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id JOIN Paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN Paper AS t4 ON t3"
  },
  {
    "id": 959,
    "db_id": "aan_1",
    "question": {
      "id": 959,
      "db_id": "aan_1",
      "question": "What are the titles for papers with more than 50 citations?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles for papers with more than 50 citations?[SQL]\\nSELECT title FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Citation GROUP BY paper_id HAVING count(*)  >  50 ) ORDER BY title ASC;[]]'\n        ;"
  },
  {
    "id": 960,
    "db_id": "aan_1",
    "question": {
      "id": 960,
      "db_id": "aan_1",
      "question": "Find the number of authors who did not publish any paper that is cited more than 50 times."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of authors who did not publish any paper that is cited more than 50 times.[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2016; SELECT COUNT ( DISTINCT t1.author_id ) FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t2.paper_id NOT IN ( SELECT t3.paper_id FROM Paper AS t4 JOIN Citation AS t3 ON t4.paper_id  =  t3.cited_paper_id GROUP BY t3.paper_id HAVING COUNT ( DISTINCT t3.cited_paper_id )  >  50 ); <MID>_id` integer DEFAULT NULL , PRIMARY KEY ( `paper_id` ,  `author_id` ) , CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY ( `paper_id` ) REFERENCES `Paper` ( `"
  },
  {
    "id": 961,
    "db_id": "aan_1",
    "question": {
      "id": 961,
      "db_id": "aan_1",
      "question": "How many authors have not published a paper with more than 50 citations?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many authors have not published a paper with more than 50 citations?[SQL]\\nSELECT Author_list.paper_id FROM Author_list WHERE paper_id NOT IN ( SELECT t2.paper_id FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id WHERE t1.year  =  2015 AND t1.citations  >  50 ) GROUP BY Author_list.author_id HAVING COUNT ( DISTINCT Author_list.paper_id )  =  0';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 962,
    "db_id": "aan_1",
    "question": {
      "id": 962,
      "db_id": "aan_1",
      "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of authors who published some paper on NAACL and ACL in the year 2009.[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2009 AND venue IN ( 'NAACL',  'ACL' ); SELECT t1.name FROM Author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.year  =  2009 AND t3.venue IN ( 'NAACL',  'ACL' );] SELECT t1.name FROM Author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.year  =  2009 AND t3.venue IN ( 'NAACL',  'AC"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": {
      "id": 963,
      "db_id": "aan_1",
      "question": "What are the names of authors who published in both NAACL and ACL in 2009?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of authors who published in both NAACL and ACL in 2009?[SQL]\\nSELECT title FROM Paper WHERE YEAR  =  2009 INTERSECT SELECT t1.title FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE venue  =  'NAACL' INTERSECT SELECT t3.title FROM paper AS t3 JOIN citation AS t4 ON t3.paper_id  =  t4.cited_paper_id WHERE venue  =  'ACL' <MID>\n    GROUP BY title;"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": {
      "id": 964,
      "db_id": "aan_1",
      "question": "Find the name of authors who have never published a paper in ACL."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of authors who have never published a paper in ACL.[SQL]\\nSELECT title FROM Paper WHERE venue != 'ACL' UNION SELECT name FROM Author EXCEPT SELECT t3.name ,  t2.name FROM Citation AS t1 JOIN Paper AS t2 ON t1.cited_paper_id  =  t2.paper_id JOIN Author AS t3 ON t1.paper_id  =  t3.author_id WHERE t2.venue  =  'ACL' INTERSECT SELECT t4.name FROM Citation AS t5 JOIN Paper AS t6 ON t5.cited_paper_id  =  t6.paper_id JOIN Author AS t4 ON t5.paper_id  =  t4.author_id WHERE t6.venue  =  'ACL' <MID>\n    GROUP BY title;"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": {
      "id": 965,
      "db_id": "aan_1",
      "question": "What are the names of authors who have not published a paper in ACL?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of authors who have not published a paper in ACL?[SQL]\\nSELECT title FROM Paper WHERE venue != 'ACL' JOIN Author ON Paper.paper_id = Author.paper_id GROUP BY Author.name HAVING COUNT ( DISTINCT Paper.title )  =  0 UNION SELECT name FROM Author WHERE paper_id NOT IN ( SELECT paper_id FROM Paper WHERE venue  =  'ACL' ) ORDER BY name ASC'\n    ;"
  },
  {
    "id": 966,
    "db_id": "conference",
    "question": {
      "id": 966,
      "db_id": "conference",
      "question": "How many conferences are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many conferences are there?[SQL]\\nSELECT conference_participation.Conference_ID FROM conference_participation WHERE role  =  'chair' GROUP BY conference_participation.Conference_ID' <MID>_ID')]\n    LIMIT 1000'\n    ;"
  },
  {
    "id": 967,
    "db_id": "conference",
    "question": {
      "id": 967,
      "db_id": "conference",
      "question": "What is the total number of conferences?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total number of conferences?[SQL]\\nSELECT conference_participation.Conference_ID FROM conference_participation WHERE role  =  'chair' GROUP BY conference_id ORDER BY COUNT(*) DESC LIMIT 1' <MID>_ID') REFERENCES institution(institution_id)\n    GROUP BY institution.staff_ID;"
  },
  {
    "id": 968,
    "db_id": "conference",
    "question": {
      "id": 968,
      "db_id": "conference",
      "question": "List all distinct conference names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all distinct conference names.[SQL]\\nSELECT Conference_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 969,
    "db_id": "conference",
    "question": {
      "id": 969,
      "db_id": "conference",
      "question": "What are the different conference names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different conference names?[SQL]\\nSELECT Conference_ID FROM conference_participation WHERE role  =  'chair' GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 1' <MID>_ID FROM conference_participation WHERE role  =  'chair' GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 1'\n\n    ORDER BY role;"
  },
  {
    "id": 970,
    "db_id": "conference",
    "question": {
      "id": 970,
      "db_id": "conference",
      "question": "List all conference name, year, and location."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all conference name, year, and location.[SQL]\\nSELECT Conference_ID FROM conference;"
  },
  {
    "id": 971,
    "db_id": "conference",
    "question": {
      "id": 971,
      "db_id": "conference",
      "question": "What are the names, years, and locations of all conferences?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, years, and locations of all conferences?[SQL]\\nSELECT Conference_ID  FROM conference;"
  },
  {
    "id": 972,
    "db_id": "conference",
    "question": {
      "id": 972,
      "db_id": "conference",
      "question": "Show all conference names and the number of times each conference has."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all conference names and the number of times each conference has.[SQL]\\nSELECT Conference_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 973,
    "db_id": "conference",
    "question": {
      "id": 973,
      "db_id": "conference",
      "question": "For each conference name, how many times has it occurred?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each conference name, how many times has it occurred?[SQL]\\nSELECT Conference_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 974,
    "db_id": "conference",
    "question": {
      "id": 974,
      "db_id": "conference",
      "question": "show all years and the number of conferences in each year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, show all years and the number of conferences in each year.[SQL]\\nSELECT role FROM conference_participation WHERE role  =  'chair' GROUP BY YEAR ORDER BY YEAR ASC'\n    ;"
  },
  {
    "id": 975,
    "db_id": "conference",
    "question": {
      "id": 975,
      "db_id": "conference",
      "question": "How many conferences occur every year?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many conferences occur every year?[SQL]\\nSELECT conference_participation.Conference_ID  FROM conference_participation WHERE YEAR  =  2017 GROUP BY conference_participation.Conference_ID HAVING COUNT(*)  =  ( SELECT COUNT(*) FROM conference_participation WHERE YEAR  =  2017 )'\n        ;"
  },
  {
    "id": 976,
    "db_id": "conference",
    "question": {
      "id": 976,
      "db_id": "conference",
      "question": "which year has least number of conferences?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, which year has least number of conferences?[SQL]\\nSELECT role FROM conference_participation WHERE role  =  'chair' GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1' <MID>_ID` REFERENCES `institution`(`Institution_ID`)\n    GROUP BY role;"
  },
  {
    "id": 977,
    "db_id": "conference",
    "question": {
      "id": 977,
      "db_id": "conference",
      "question": "What year had the fewest conferences?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What year had the fewest conferences?[SQL]\\nSELECT role FROM conference_participation WHERE role  =  'chair' GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1' <MID>_ID` REFERENCES `institution`(`Institution_ID`)\n    GROUP BY role;"
  },
  {
    "id": 978,
    "db_id": "conference",
    "question": {
      "id": 978,
      "db_id": "conference",
      "question": "Show all locations where at least two conferences are located."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all locations where at least two conferences are located.[SQL]\\nSELECT Conference_ID FROM conference WHERE LOCATION IN ( SELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2 ) <MID>_ID`, `role` FROM conference_participation WHERE Conference_ID  =  {Conference_ID}',\n                    LIMIT 500'\n                ;"
  },
  {
    "id": 979,
    "db_id": "conference",
    "question": {
      "id": 979,
      "db_id": "conference",
      "question": "What are all locations that have hosted at least two conferences?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all locations that have hosted at least two conferences?[SQL]\\nSELECT institution.Conference_ID FROM institution WHERE institution.Coonference_ID  >=  2 GROUP BY institution.location HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 980,
    "db_id": "conference",
    "question": {
      "id": 980,
      "db_id": "conference",
      "question": "Show the institution name, location and founded year of all institutions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the institution name, location and founded year of all institutions.[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.role  =  'Conferenc' AND institution.founded  =  2015' <MID>_ID') REFERENCES staff(staff_ID) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (Conference_ID) REFERENCES conference(Conference_ID) ON DELETE CASCADE ON UPDATE CASCADE;''',\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 981,
    "db_id": "conference",
    "question": {
      "id": 981,
      "db_id": "conference",
      "question": "What are the names, locations, and founding years for all institutions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, locations, and founding years for all institutions?[SQL]\\nSELECT institution.Conference_ID FROM institution;"
  },
  {
    "id": 982,
    "db_id": "conference",
    "question": {
      "id": 982,
      "db_id": "conference",
      "question": "How many institution are founded between 1850 and 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many institution are founded between 1850 and 1900?[SQL]\\nSELECT institution.Conference_ID FROM institution WHERE founded BETWEEN 1850 AND 1900'\n        ;"
  },
  {
    "id": 983,
    "db_id": "conference",
    "question": {
      "id": 983,
      "db_id": "conference",
      "question": "How many institutions were founded between 1850 and 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many institutions were founded between 1850 and 1900?[SQL]\\nSELECT institution.Conference_ID FROM institution WHERE founded BETWEEN 1850 AND 1900'\n        ;"
  },
  {
    "id": 984,
    "db_id": "conference",
    "question": {
      "id": 984,
      "db_id": "conference",
      "question": "Show the institution name and location of institution that is most recently founded."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the institution name and location of institution that is most recently founded.[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.Founded  =  (SELECT max(Founded) FROM institution) LIMIT 1'\n        ;"
  },
  {
    "id": 985,
    "db_id": "conference",
    "question": {
      "id": 985,
      "db_id": "conference",
      "question": "What are the names and locations of the most recently-founded institution?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and locations of the most recently-founded institution?[SQL]\\nSELECT institution.Conference_ID FROM institution WHERE founded  =  (SELECT max(founded) FROM institution) CONNECT BY institution.Conference_ID  =  PRIOR institution.Conference_ID START WITH institution.Conference_ID  =  10000 UNION ALL SELECT institution.Institution_Name ,  institution.Location FROM institution WHERE founded  =  (SELECT max(founded) FROM institution) ORDER BY institution.founded DESC NULLS LAST'\n        ;"
  },
  {
    "id": 986,
    "db_id": "conference",
    "question": {
      "id": 986,
      "db_id": "conference",
      "question": "Show the institution name and the number of staff for each institution founded after 1800."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the institution name and the number of staff for each institution founded after 1800.[SQL]\\nSELECT institution.Conference_ID FROM institution WHERE institution.Founded  >  1800 GROUP BY institution.Institution_Name ORDER BY count(*) DESC'\n        ;"
  },
  {
    "id": 987,
    "db_id": "conference",
    "question": {
      "id": 987,
      "db_id": "conference",
      "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .[SQL]\\nSELECT institution.Conference_ID FROM institution WHERE institution.Founded  >  1800 JOIN conference_participation ON institution.Institution_ID  =  conference_participation.Institution_ID GROUP BY institution.Conference_ID HAVING count(*)  >=  2'\n        ;"
  },
  {
    "id": 988,
    "db_id": "conference",
    "question": {
      "id": 988,
      "db_id": "conference",
      "question": "Show institution name which there is no staff in our record."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show institution name which there is no staff in our record.[SQL]\\nSELECT institution.Conference_ID FROM institution WHERE institution.Conference_ID NOT IN (SELECT institution.Conference_ID FROM institution JOIN conference_participation ON institution.Conference_ID  =  conference_participation.Institution_ID) <MID>_ID FROM institution JOIN conference_participation ON institution.Conference_ID  =  conference_participation.Institution_ID GROUP BY institution.Conference_ID HAVING COUNT(*)  =  (SELECT COUNT(*) FROM conference_participation)') AS T1 ON T1.Conference_ID  =  institution.Conference_ID WHERE institution.Conference_ID NOT IN (SELECT institution.Conference_ID FROM institution JOIN conference_participation ON institution.Conference_ID  =  conference_participation.Institution_ID) OR institution.Conference_ID NOT IN"
  },
  {
    "id": 989,
    "db_id": "conference",
    "question": {
      "id": 989,
      "db_id": "conference",
      "question": "What is the name of the institution with no staff in the records?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the institution with no staff in the records?[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.sstaff_ID NOT IN (SELECT institution_id FROM staff) GROUP BY institution.institution_name HAVING count(*)  =  0'\n        ;"
  },
  {
    "id": 990,
    "db_id": "conference",
    "question": {
      "id": 990,
      "db_id": "conference",
      "question": "Show all staff name who are above the average age."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all staff name who are above the average age.[SQL]\\nSELECT staff_ID FROM staff WHERE age  >  (SELECT avg(age) FROM staff) UNION SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff) UNION SELECT role FROM conference_participation WHERE role != 'faculty' AND role != 'student' INTERSECT SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff) UNION SELECT role FROM conference_participation WHERE role != 'faculty' AND role != 'student' IN ROLE IS NULL' <MID>_ID FROM staff WHERE age  >  (SELECT avg(age) FROM staff) UNION SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff) UNION SELECT role FROM conference_participation WHERE role != 'faculty' AND role != 'student' INTERSECT SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM"
  },
  {
    "id": 991,
    "db_id": "conference",
    "question": {
      "id": 991,
      "db_id": "conference",
      "question": "What are the names of all staff members who are older than average?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all staff members who are older than average?[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.age  >  (SELECT avg(age) FROM institution) UNION SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM institution) <MID>_ID`, `role`) VALUES (102 ,  31 ,  'chair') UNION SELECT conference_participation.Conference_ID ,  conference_participation.staff_ID FROM conference_participation JOIN conference ON conference_participation.Conference_ID  =  conference.Conference_ID WHERE conference.year  =  2005 AND conference.location  =  'New York' GROUP BY conference_participation.Conference_ID HAVING count(*)  >=  2) AS T1 ON T1.staff_ID  =  T2.staff_ID WHERE T2.role  =  'chair'"
  },
  {
    "id": 992,
    "db_id": "conference",
    "question": {
      "id": 992,
      "db_id": "conference",
      "question": "What is the maximum and minimum age of all staff from the United States?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum and minimum age of all staff from the United States?[SQL]\\nSELECT institution.staff_ID FROM institution WHERE instituion.Nationality  =  'United States' ORDER BY instituion.Age ASC LIMIT 1 , 1 UNION SELECT instituion.staff_ID FROM institution WHERE instituion.Nationality  =  'United States' ORDER BY instituion.Age DESC LIMIT 1 OFFSET 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 993,
    "db_id": "conference",
    "question": {
      "id": 993,
      "db_id": "conference",
      "question": "What are the maximum and minimum ages for all staff?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum ages for all staff?[SQL]\\nSELECT role  FROM conference_participation WHERE role  =  'chair' UNION SELECT max(T1.Age) ,  min(T1.Age) FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID  =  T2.staff_ID GROUP BY T2.role ORDER BY T2.role DESC LIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 994,
    "db_id": "conference",
    "question": {
      "id": 994,
      "db_id": "conference",
      "question": "Show all conference names which the staff from Canada attends."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all conference names which the staff from Canada attends.[SQL]\\nSELECT Conference_ID FROM conference_participation WHERE Nationality  =  'Canada' INTERSECT SELECT T1.Conference_ID FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID AND T2.Nationality  =  'Canada' GROUP BY T1.Conference_ID HAVING COUNT(*)  >=  2' <MID>_ID FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Founded  =  2005 AND T2.age BETWEEN 23 AND 28'\n        ;"
  },
  {
    "id": 995,
    "db_id": "conference",
    "question": {
      "id": 995,
      "db_id": "conference",
      "question": "What are the names of all the conferences that has staff from Canada attending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all the conferences that has staff from Canada attending?[SQL]\\nSELECT Conference_ID FROM conference_participation WHERE role = 'faculty' AND name IN (SELECT T1.name FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.Nationality  =  'Canada') GROUP BY COnference_ID HAVING count(*)  >=  1' <MID>_ID FROM conference_participation WHERE role = 'faculty' AND name IN (SELECT T1.name FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.Nationality  =  'Canada') GROUP BY COnference_ID HAVING count(*)  >=  1' <MID>_ID FROM conference_participation WHERE role = 'faculty' AND name IN (SELECT T1.name FROM institution AS T1 JOIN"
  },
  {
    "id": 996,
    "db_id": "conference",
    "question": {
      "id": 996,
      "db_id": "conference",
      "question": "Show all staff names who have been both speaker and sponsor in some conference."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all staff names who have been both speaker and sponsor in some conference.[SQL]\\nSELECT institution.staff_ID FROM institution WHERE role  =  'sponsor' INTERSECT SELECT institution.staff_ID FROM institution WHERE role  =  'speaker' <MID>\n    GROUP BY institution.staff_ID;"
  },
  {
    "id": 997,
    "db_id": "conference",
    "question": {
      "id": 997,
      "db_id": "conference",
      "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the staff members who have been both a speaker and a sponsor at some conference?[SQL]\\nSELECT staff.role FROM staff WHERE role  =  'speaker' INTERSECT SELECT staff.role FROM staff WHERE role  =  'sponsor' INTERSECT SELECT T1.role FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id'\n    ORDER BY role;"
  },
  {
    "id": 998,
    "db_id": "conference",
    "question": {
      "id": 998,
      "db_id": "conference",
      "question": "Show all names who have been in both ACL and Naccl."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all names who have been in both ACL and Naccl.[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.sname IN ('ACL','Naccl') INTERSECT SELECT institution.sstaff_ID FROM institution WHERE institution.sname IN ('ACL','Naccl')' <MID>_ID`, `role` FROM conference_participation WHERE conference_id  =  1265 UNION SELECT staff_ID ,  role FROM conference_participation WHERE conference_id  =  1377'\n    ORDER BY role;"
  },
  {
    "id": 999,
    "db_id": "conference",
    "question": {
      "id": 999,
      "db_id": "conference",
      "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of everbody who has participated in both the ACL and NACCL conferences?[SQL]\\nSELECT role FROM conference_participation WHERE Conference_ID IN (1 , 2) INTERSECT SELECT role FROM conference_participation WHERE Conference_ID  =  3'\n        ;"
  },
  {
    "id": 1000,
    "db_id": "conference",
    "question": {
      "id": 1000,
      "db_id": "conference",
      "question": "Show all staff names who attend a conference in 2003 or 2004."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all staff names who attend a conference in 2003 or 2004.[SQL]\\nSELECT institution.staff_ID FROM institution \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1001,
    "db_id": "conference",
    "question": {
      "id": 1001,
      "db_id": "conference",
      "question": "What are the staff names who participated in conferences between 2003 or 2004?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the staff names who participated in conferences between 2003 or 2004?[SQL]\\nSELECT role FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE YEAR BETWEEN 2003 AND 2004) GROUP BY role ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1002,
    "db_id": "conference",
    "question": {
      "id": 1002,
      "db_id": "conference",
      "question": "Show the conference name and year and the number of participants for each conference."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the conference name and year and the number of participants for each conference.[SQL]\\nSELECT Conference_ID FROM conference_participation;"
  },
  {
    "id": 1003,
    "db_id": "conference",
    "question": {
      "id": 1003,
      "db_id": "conference",
      "question": "For each conference id, what are their names, year, and number of participants?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each conference id, what are their names, year, and number of participants?[SQL]\\nSELECT Conference_ID FROM conference_participation;"
  },
  {
    "id": 1004,
    "db_id": "conference",
    "question": {
      "id": 1004,
      "db_id": "conference",
      "question": "Find the name of the conferences that have the top 2 most number of attendants."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the conferences that have the top 2 most number of attendants.[SQL]\\nSELECT Conference_ID FROM conference_participation WHERE role  =  'attendee' GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2' <MID>_ID') REFERENCES `institution`(`Institution_ID`)\n    GROUP BY Conference_ID;"
  },
  {
    "id": 1005,
    "db_id": "conference",
    "question": {
      "id": 1005,
      "db_id": "conference",
      "question": "What are the names of the conferences that have the top 2 most people attending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the conferences that have the top 2 most people attending?[SQL]\\nSELECT Conference_ID FROM conference_participation WHERE role  =  'attendee' GROUP BY Conference_ID ORDER BY count(*) DESC LIMIT 2' <MID>_ID`, `role`) VALUES (103 ,  3 ,  'attendee')',\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1006,
    "db_id": "conference",
    "question": {
      "id": 1006,
      "db_id": "conference",
      "question": "Find the name and nationality of the people who did not participate in any ACL conference."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and nationality of the people who did not participate in any ACL conference.[SQL]\\nSELECT institution.staff_ID FROM institution WHERE role != 'participant' AND YEAR != 2017 CONNECT BY prior institution_id INSTEAD OF UNION SELECT name ,  Nationality FROM staff EXCEPT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name ,  Nationality FROM staff INTERSECT SELECT name"
  },
  {
    "id": 1007,
    "db_id": "conference",
    "question": {
      "id": 1007,
      "db_id": "conference",
      "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and nationalities of the people who did not participate in any ACL conferences?[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.sTaff_ID NOT IN (SELECT staff.sTaff_ID FROM staff JOIN conference_participation ON staff.sTaff_ID  =  conference_participation.sTaff_ID WHERE conference_participation.Conference_ID  =  1) AS T1(sTaff_ID) JOIN staff ON T1.sTaff_ID  =  staff.sTaff_ID SELECT name ,  Nationality FROM staff EXCEPT SELECT name ,  Nationality FROM staff JOIN conference_participation ON staff.sTaff_ID  =  conference_participation.sTaff_ID WHERE conference_participation.Conference_ID  =  1 AS T2(name ,  Nationality)', 'SELECT name ,  Nationality FROM staff EXCEPT SELECT name ,  Nationality FROM staff JOIN"
  },
  {
    "id": 1008,
    "db_id": "conference",
    "question": {
      "id": 1008,
      "db_id": "conference",
      "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and location of the universities that did not have any staff participated in any conference in 2004.[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.sTaff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE YEAR  =  2004) <MID>\n    GROUP BY institution.staff_ID;"
  },
  {
    "id": 1009,
    "db_id": "conference",
    "question": {
      "id": 1009,
      "db_id": "conference",
      "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[SQL]\\nSELECT institution.staff_ID FROM institution WHERE institution.sTaff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE YEAR  =  2004) <MID>_ID`, `role` FROM conference_participation WHERE YEAR  =  2004) AS T1 ON T1.staff_id  =  T2.staff_id GROUP BY T2.institution_id HAVING count(*)  =  0) AS T3 JOIN institution AS T4 ON T3.institution_id  =  T4.institution_id'\n        ;"
  },
  {
    "id": 1010,
    "db_id": "pilot_1",
    "question": {
      "id": 1010,
      "db_id": "pilot_1",
      "question": "What is the name of the oldest pilot?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the oldest pilot?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  =  (SELECT max(age) FROM PilotSkills) LIMIT 1'\n\n    LIMIT 1' SELECT pilot_name FROM pilotskills ORDER BY age DESC LIMIT 1' <MID>\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1011,
    "db_id": "pilot_1",
    "question": {
      "id": 1011,
      "db_id": "pilot_1",
      "question": "Return the name of the oldest pilot."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the name of the oldest pilot.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  =  (SELECT max(age) FROM PilotSkills) <MID>\n    LIMIT 1;'\n\n    ;"
  },
  {
    "id": 1012,
    "db_id": "pilot_1",
    "question": {
      "id": 1012,
      "db_id": "pilot_1",
      "question": "What are the names of pilots whose age is below the average age, ordered by age?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots whose age is below the average age, ordered by age?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY PilotSkills.age ASC'\n\n    LIMIT = 100000 # arbitrary large number\n\n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1013,
    "db_id": "pilot_1",
    "question": {
      "id": 1013,
      "db_id": "pilot_1",
      "question": "Return the names of pilots who are younger than average, ordered by age ascending."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of pilots who are younger than average, ordered by age ascending.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age ASC'\n\n    LIMIT = 100000\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1014,
    "db_id": "pilot_1",
    "question": {
      "id": 1014,
      "db_id": "pilot_1",
      "question": "Find all information of on pilots whose age is less than 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all information of on pilots whose age is less than 30.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  <  30'\n\n    LIMIT 251'\n\n    ;"
  },
  {
    "id": 1015,
    "db_id": "pilot_1",
    "question": {
      "id": 1015,
      "db_id": "pilot_1",
      "question": "What is all the information about pilots who are younger than 30 ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is all the information about pilots who are younger than 30 ?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  <  30'\n\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1016,
    "db_id": "pilot_1",
    "question": {
      "id": 1016,
      "db_id": "pilot_1",
      "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of all pilots who have a plane named Piper Cub and is under 35.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name  =  'Piper Cub' AND PilotSkills.age  <  35' <MID>\n    LIMIT 251'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1017,
    "db_id": "pilot_1",
    "question": {
      "id": 1017,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  <  35 AND PilotSkills.plane_name  =  'Piper Cub' UNION SELECT T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.location  =  'Chicago' INTERSECT SELECT T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.location  =  'New York' MINUS SELECT T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T"
  },
  {
    "id": 1018,
    "db_id": "pilot_1",
    "question": {
      "id": 1018,
      "db_id": "pilot_1",
      "question": "Where is the plane F-14 Fighter located?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Where is the plane F-14 Fighter located?[SQL]\\nSELECT location FROM Hangar WHERE plane_name  =  'F-14 Fighter' <MID>\n    LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1019,
    "db_id": "pilot_1",
    "question": {
      "id": 1019,
      "db_id": "pilot_1",
      "question": "Return the location of the hangar in which F-14 Fighter is located."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the location of the hangar in which F-14 Fighter is located.[SQL]\\nSELECT location FROM Hangar WHERE plane_name  =  'F-14 Fighter' <MID>\n    LIMIT 10000;\n    ;"
  },
  {
    "id": 1020,
    "db_id": "pilot_1",
    "question": {
      "id": 1020,
      "db_id": "pilot_1",
      "question": "How many different places have some plane?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different places have some plane?[SQL]\\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills) GROUP BY location HAVING count(*)  >  1'\n\n    LIMIT 1'\n\n    ;"
  },
  {
    "id": 1021,
    "db_id": "pilot_1",
    "question": {
      "id": 1021,
      "db_id": "pilot_1",
      "question": "Count the number of different locations of hangars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different locations of hangars.[SQL]\\nSELECT location FROM HangarGROUP BY locationORDER BY location;"
  },
  {
    "id": 1022,
    "db_id": "pilot_1",
    "question": {
      "id": 1022,
      "db_id": "pilot_1",
      "question": "Which plane does the pilot Jones with age 32 has?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which plane does the pilot Jones with age 32 has?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32' SELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32' SELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32' SELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32' SELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32' SELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32' SELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32' SELECT plane_name"
  },
  {
    "id": 1023,
    "db_id": "pilot_1",
    "question": {
      "id": 1023,
      "db_id": "pilot_1",
      "question": "What are the names of planes that the pilot Jones who is 32 has?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of planes that the pilot Jones who is 32 has?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Jones' AND age  =  32'\n\n  ORDER BY plane_name;"
  },
  {
    "id": 1024,
    "db_id": "pilot_1",
    "question": {
      "id": 1024,
      "db_id": "pilot_1",
      "question": "How many pilots who are older than 40?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many pilots who are older than 40?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  >  40'\n\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1025,
    "db_id": "pilot_1",
    "question": {
      "id": 1025,
      "db_id": "pilot_1",
      "question": "Count the number of pilots with age greater than 40."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of pilots with age greater than 40.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  >  40 GROUP BY PilotSkills.pilot_name HAVING count(*)  >=  2'\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n"
  },
  {
    "id": 1026,
    "db_id": "pilot_1",
    "question": {
      "id": 1026,
      "db_id": "pilot_1",
      "question": "How many plane B-52 Bomber owned by the pilot who is under 35?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many plane B-52 Bomber owned by the pilot who is under 35?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'B-52 Bomber' GROUP BY plane_name HAVING count(*)  >=  1' <MID>\n    GROUP BY plane_name;"
  },
  {
    "id": 1027,
    "db_id": "pilot_1",
    "question": {
      "id": 1027,
      "db_id": "pilot_1",
      "question": "Count the number of B-52 Bombers owned by pilots under 35."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of B-52 Bombers owned by pilots under 35.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'B-52 Bomber' GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1028,
    "db_id": "pilot_1",
    "question": {
      "id": 1028,
      "db_id": "pilot_1",
      "question": "Who is the youngest pilot to fly the plane Piper Cub?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who is the youngest pilot to fly the plane Piper Cub?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name  =  'Piper Cub' ORDER BY PilotSkills.age ASC LIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1029,
    "db_id": "pilot_1",
    "question": {
      "id": 1029,
      "db_id": "pilot_1",
      "question": "Return the name of the youngest pilot to fly Piper Cub."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the name of the youngest pilot to fly Piper Cub.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' ORDER BY age ASC LIMIT 1'\n\n    LIMIT is not a valid keyword. (near 'LIMIT': Syntax error)\n\n    ;"
  },
  {
    "id": 1030,
    "db_id": "pilot_1",
    "question": {
      "id": 1030,
      "db_id": "pilot_1",
      "question": "What is the name of the most popular plane?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the most popular plane?[SQL]\\nSELECT plane_name FROM HangarGROUP BY plane_nameORDER BY plane_nameLIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1031,
    "db_id": "pilot_1",
    "question": {
      "id": 1031,
      "db_id": "pilot_1",
      "question": "What is the name of the plane that is flown the most often?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the plane that is flown the most often?[SQL]\\nSELECT plane_name FROM PilotSkillsGROUP BY plane_nameORDER BY plane_nameLIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1032,
    "db_id": "pilot_1",
    "question": {
      "id": 1032,
      "db_id": "pilot_1",
      "question": "What is the name of the least popular plane?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the least popular plane?[SQL]\\nSELECT plane_name FROM HangarGROUP BY plane_nameORDER BY plane_name;"
  },
  {
    "id": 1033,
    "db_id": "pilot_1",
    "question": {
      "id": 1033,
      "db_id": "pilot_1",
      "question": "What is the name of the plane that is flown the least often?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the plane that is flown the least often?[SQL]\\nSELECT plane_name FROM HangarGROUP BY plane_nameORDER BY plane_name;"
  },
  {
    "id": 1034,
    "db_id": "pilot_1",
    "question": {
      "id": 1034,
      "db_id": "pilot_1",
      "question": "How many pilots whose planes are in Chicago?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many pilots whose planes are in Chicago?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name IN (SELECT hangar.plane_name FROM hangar WHERE hangar.location  =  'Chicago') GROUP BY PilotSkills.pilot_name HAVING count(*)  >=  2'\n\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1035,
    "db_id": "pilot_1",
    "question": {
      "id": 1035,
      "db_id": "pilot_1",
      "question": "Count the number of pilots who have planes in Chicago."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of pilots who have planes in Chicago.[SQL]\\nSELECT plane_name FROM Hangar WHERE LOCATION  =  'Chicago' GROUP BY plane_name HAVING count(*)  >=  2 UNION SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE LOCATION  =  'Chicago') GROUP BY pilot_name HAVING count(*)  >=  2]\n\n  ORDER BY plane_name;"
  },
  {
    "id": 1036,
    "db_id": "pilot_1",
    "question": {
      "id": 1036,
      "db_id": "pilot_1",
      "question": "What are the planes owned by pilot Smith with age 41?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the planes owned by pilot Smith with age 41?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Smith' AND age  =  41'\n\n    ORDER BY plane_name;"
  },
  {
    "id": 1037,
    "db_id": "pilot_1",
    "question": {
      "id": 1037,
      "db_id": "pilot_1",
      "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Smith' AND age  =  41'\n\n  ORDER BY plane_name;"
  },
  {
    "id": 1038,
    "db_id": "pilot_1",
    "question": {
      "id": 1038,
      "db_id": "pilot_1",
      "question": "How many distinct planes are owned across all pilots?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many distinct planes are owned across all pilots?[SQL]\\nSELECT plane_name FROM PilotSkillsGROUP BY plane_nameHAVING count(*)  >  1'\n\n    LIMIT 100'\n\n    ;"
  },
  {
    "id": 1039,
    "db_id": "pilot_1",
    "question": {
      "id": 1039,
      "db_id": "pilot_1",
      "question": "Count the number of different plane names across all pilots."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different plane names across all pilots.[SQL]\\nSELECT plane_name FROM PilotSkillsGROUP BY plane_nameORDER BY plane_nameLIMIT 10'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1040,
    "db_id": "pilot_1",
    "question": {
      "id": 1040,
      "db_id": "pilot_1",
      "question": "How many planes are owned by the pilot whose name is Smith?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many planes are owned by the pilot whose name is Smith?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE pilot_name  =  'Smith' GROUP BY plane_name HAVING count(*)  =  1 UNION SELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  'Smith' GROUP BY T2.plane_name HAVING count(*)  >  1' <MID>\n    GROUP BY plane_name;"
  },
  {
    "id": 1041,
    "db_id": "pilot_1",
    "question": {
      "id": 1041,
      "db_id": "pilot_1",
      "question": "Count the number of planes Smith owns."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of planes Smith owns.[SQL]\\nSELECT plane_name FROM Hangar WHERE pilot_name  =  'Smith' GROUP BY plane_name'\n\n  ORDER BY location;"
  },
  {
    "id": 1042,
    "db_id": "pilot_1",
    "question": {
      "id": 1042,
      "db_id": "pilot_1",
      "question": "How many planes are controlled by the pilots whose age is older than 40?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many planes are controlled by the pilots whose age is older than 40?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  >  40 GROUP BY plane_name'\n\n    ORDER BY plane_name;"
  },
  {
    "id": 1043,
    "db_id": "pilot_1",
    "question": {
      "id": 1043,
      "db_id": "pilot_1",
      "question": "Count the number of planes flown by pilots older than 40."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of planes flown by pilots older than 40.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  >  40 GROUP BY plane_name'\n\n    LIMIT 20'\n\n    ;"
  },
  {
    "id": 1044,
    "db_id": "pilot_1",
    "question": {
      "id": 1044,
      "db_id": "pilot_1",
      "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age BETWEEN 30 AND 40 ORDER BY PilotSkills.age ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1045,
    "db_id": "pilot_1",
    "question": {
      "id": 1045,
      "db_id": "pilot_1",
      "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age BETWEEN 30 AND 40 ORDER BY PilotSkills.age ASC'\n\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1046,
    "db_id": "pilot_1",
    "question": {
      "id": 1046,
      "db_id": "pilot_1",
      "question": "List all pilot names sorted by their ages in the descending order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all pilot names sorted by their ages in the descending order.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age != 'Null' ORDER BY PilotSkills.age DESC'\n\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1047,
    "db_id": "pilot_1",
    "question": {
      "id": 1047,
      "db_id": "pilot_1",
      "question": "What are the names of pilots, ordered by age descending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots, ordered by age descending?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age != 'Null' ORDER BY PilotSkills.age DESC' <MID>\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1048,
    "db_id": "pilot_1",
    "question": {
      "id": 1048,
      "db_id": "pilot_1",
      "question": "Find all locations of planes sorted by the plane name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all locations of planes sorted by the plane name.[SQL]\\nSELECT location FROM HangarORDER BY plane_name;"
  },
  {
    "id": 1049,
    "db_id": "pilot_1",
    "question": {
      "id": 1049,
      "db_id": "pilot_1",
      "question": "What are the locations of the different planes, ordered by plane name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the locations of the different planes, ordered by plane name?[SQL]\\nSELECT location FROM HangarORDER BY plane_name;"
  },
  {
    "id": 1050,
    "db_id": "pilot_1",
    "question": {
      "id": 1050,
      "db_id": "pilot_1",
      "question": "List all distinct types of planes owned by all pilots in alphabetic order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all distinct types of planes owned by all pilots in alphabetic order?[SQL]\\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills) ORDER BY location ASC'\n\n    LIMIT 100'\n\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1051,
    "db_id": "pilot_1",
    "question": {
      "id": 1051,
      "db_id": "pilot_1",
      "question": "What are the different plane names, ordered alphabetically?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different plane names, ordered alphabetically?[SQL]\\nSELECT plane_name FROM HangarORDER BY plane_name;"
  },
  {
    "id": 1052,
    "db_id": "pilot_1",
    "question": {
      "id": 1052,
      "db_id": "pilot_1",
      "question": "How many pilots who are older than 40 or younger than 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many pilots who are older than 40 or younger than 30?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  >  40 OR age  <  30'\n\n    LIMIT 1000'\n\n    ;"
  },
  {
    "id": 1053,
    "db_id": "pilot_1",
    "question": {
      "id": 1053,
      "db_id": "pilot_1",
      "question": "Count the number of pilots with age greater than 40 or less than 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of pilots with age greater than 40 or less than 30.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  >  40 UNION SELECT plane_name FROM PilotSkills WHERE age  <  30'\n\n    LIMIT = 60000\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1054,
    "db_id": "pilot_1",
    "question": {
      "id": 1054,
      "db_id": "pilot_1",
      "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  >  35 AND PilotSkills.plane_name  =  'Piper Cub' UNION SELECT PilotSkills.pilot_name FROM PilotSkills WHERE PilotSkills.age  <  30 AND PilotSkills.plane_name  =  'F-14 Fighter' ORDER BY PilotSkills.pilot_name ASC'\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1055,
    "db_id": "pilot_1",
    "question": {
      "id": 1055,
      "db_id": "pilot_1",
      "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT plone_name FROM PilotSkills WHERE plane_name  =  'F-14 Fighter' AND age  <  30' <MID>\n    ORDER BY plane_name;"
  },
  {
    "id": 1056,
    "db_id": "pilot_1",
    "question": {
      "id": 1056,
      "db_id": "pilot_1",
      "question": "Find pilots who own plane Piper Cub but not B-52 Bomber."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find pilots who own plane Piper Cub but not B-52 Bomber.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT plane_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber' <MID>\n    LIMIT 251;\n    ;"
  },
  {
    "id": 1057,
    "db_id": "pilot_1",
    "question": {
      "id": 1057,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name  =  'Piper Cub' EXCEPT SELECT PilotSkills.pilot_name FROM PilotSkills WHERE PilotSkills.plane_name  =  'B-52 Bomber' <MID>\n  GROUP BY plane_name;"
  },
  {
    "id": 1058,
    "db_id": "pilot_1",
    "question": {
      "id": 1058,
      "db_id": "pilot_1",
      "question": "Find pilots who own planes Piper Cub and B-52 Bomber."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find pilots who own planes Piper Cub and B-52 Bomber.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'B-52 Bomber' GROUP BY pilot_name HAVING count(*)  >=  2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1059,
    "db_id": "pilot_1",
    "question": {
      "id": 1059,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots who own both Piper Cub and the B-52 Bomber?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber') <MID> plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(*)  =  2) T2 ON T1.pilot_name  =  T2.pilot_name ORDER BY T1.age DESC NULLS LAST;'\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n "
  },
  {
    "id": 1060,
    "db_id": "pilot_1",
    "question": {
      "id": 1060,
      "db_id": "pilot_1",
      "question": "What are the average and smallest ages of all pilots?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average and smallest ages of all pilots?[SQL]\\nSELECT plane_name, avg(age) FROM pilotskills GROUP BY plane_name ORDER BY avg(age) ASC LIMIT 1'\n\n  , '24' , 'SELECT min(age) FROM pilotskills' ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1061,
    "db_id": "pilot_1",
    "question": {
      "id": 1061,
      "db_id": "pilot_1",
      "question": "Return the average and minimum ages across all pilots."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average and minimum ages across all pilots.[SQL]\\nSELECT plane_name, avg(age) ,  min(age) FROM PilotSkills GROUP BY plane_name'\n\n    FROM Hangar WHERE hangar.plane_name  =  pilotskills.plane_name'\n\n    GROUP BY plane_name;"
  },
  {
    "id": 1062,
    "db_id": "pilot_1",
    "question": {
      "id": 1062,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have planes in both Austin and Boston?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots who have planes in both Austin and Boston?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location  =  'Austin') INTERSECT SELECT plane_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location  =  'Boston')' <MID> plane_name IN (SELECT plane_name FROM Hangar WHERE location  =  'Austin') INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location  =  'Boston')'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1063,
    "db_id": "pilot_1",
    "question": {
      "id": 1063,
      "db_id": "pilot_1",
      "question": "Give the names of pilots who have planes in Austin and Boston."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the names of pilots who have planes in Austin and Boston.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name IN (SELECT hangar.plane_name FROM hangar WHERE hangar.location  =  'Austin' OR hangar.location  =  'Boston') <MID>\n    LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1064,
    "db_id": "pilot_1",
    "question": {
      "id": 1064,
      "db_id": "pilot_1",
      "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter' GROUP BY pilot_name HAVING count(*)  >=  1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1065,
    "db_id": "pilot_1",
    "question": {
      "id": 1065,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name  =  'Piper Cub' OR PilotSkills.plane_name  =  'F-14 Fighter' GROUP BY PilotSkills.pilot_name HAVING COUNT(*)  >=  1' <MID> pilot_name FROM PilotSkills WHERE plane_name  =  'Cessna 172' GROUP BY pilot_name HAVING COUNT(*)  >  1'\n\n  ORDER BY PilotSkills.plane_name;"
  },
  {
    "id": 1066,
    "db_id": "pilot_1",
    "question": {
      "id": 1066,
      "db_id": "pilot_1",
      "question": "What is the average age of pilots for different types of planes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average age of pilots for different types of planes?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT avg(age) FROM PilotSkills GROUP BY plane_name) ORDER BY avg(age) DESC LIMIT 1'\n    LIMIT 1'\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1067,
    "db_id": "pilot_1",
    "question": {
      "id": 1067,
      "db_id": "pilot_1",
      "question": "Return the average age of pilots for each plane name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average age of pilots for each plane name.[SQL]\\nSELECT plane_name\t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t \t "
  },
  {
    "id": 1068,
    "db_id": "pilot_1",
    "question": {
      "id": 1068,
      "db_id": "pilot_1",
      "question": "Find the number of planes for each type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of planes for each type.[SQL]\\nSELECT plane_name FROM HangarGROUP BY plane_nameORDER BY plane_name;"
  },
  {
    "id": 1069,
    "db_id": "pilot_1",
    "question": {
      "id": 1069,
      "db_id": "pilot_1",
      "question": "Count the number of entries for each plane name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of entries for each plane name.[SQL]\\nSELECT plane_name FROM HangarGROUP BY plane_nameORDER BY plane_name;"
  },
  {
    "id": 1070,
    "db_id": "pilot_1",
    "question": {
      "id": 1070,
      "db_id": "pilot_1",
      "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the oldest pilot for each type of plane, and order the results by plane name.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  =  (SELECT max(age) FROM pilotskills WHERE plane_name  =  'Plane_Name') ORDER BY plane_name ASC'\n\n  ORDER BY plane_name;"
  },
  {
    "id": 1071,
    "db_id": "pilot_1",
    "question": {
      "id": 1071,
      "db_id": "pilot_1",
      "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  =  (SELECT max(age) FROM pilotskills WHERE plane_name  =  T1.plane_name) GROUP BY plane_name ORDER BY plane_name ASC'\n\n  ORDER BY plane_name;"
  },
  {
    "id": 1072,
    "db_id": "pilot_1",
    "question": {
      "id": 1072,
      "db_id": "pilot_1",
      "question": "What are the names of oldest pilots for each type of plane?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of oldest pilots for each type of plane?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  =  (SELECT max(age) FROM pilotskills WHERE plane_name  =  T1.plane_name) GROUP BY plane_name ORDER BY min(age) DESC LIMIT 3'\n\n    LIMIT 3'\n\n    ;"
  },
  {
    "id": 1073,
    "db_id": "pilot_1",
    "question": {
      "id": 1073,
      "db_id": "pilot_1",
      "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of the different planes, as well as the names of the oldest pilots who flew each.[SQL]\\nSELECT plane_name FROM Hangar WHERE location  =  'T1' UNION SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1'\n\n    LIMIT 1'\n\n    ;"
  },
  {
    "id": 1074,
    "db_id": "pilot_1",
    "question": {
      "id": 1074,
      "db_id": "pilot_1",
      "question": "Find the max age for each group of pilots with the same name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the max age for each group of pilots with the same name.[SQL]\\nSELECT PilotSkills.plane_name, max(age) FROM PilotSkills GROUP BY pilot_name'\n\n    , 'max_age': 32, 'pilot_name': 'Joe'}\n\n    , {'location': 'Paris', 'plane_name': 'B747', 'age': 28, 'pilot_name': 'Joe'}\n\n    , {'location': 'London', 'plane_name': 'A380', 'age': 32, 'pilot_name': 'Joe'}\n\n    , {'location': 'New York', 'plane_name': '747', 'age': 24, 'pilot_name': 'Joe'}\n\n    , {'location': 'Tokyo', 'plane_name': '747', 'age': 32, '"
  },
  {
    "id": 1075,
    "db_id": "pilot_1",
    "question": {
      "id": 1075,
      "db_id": "pilot_1",
      "question": "What are the different pilot names, and what are the maximum ages of pilots for each?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different pilot names, and what are the maximum ages of pilots for each?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE age  =  (SELECT max(age) FROM PilotSkills) GROUP BY PilotSkills.pilot_name ORDER BY max(age) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1076,
    "db_id": "pilot_1",
    "question": {
      "id": 1076,
      "db_id": "pilot_1",
      "question": "For each city, find the number and average age of pilots who have a plane."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each city, find the number and average age of pilots who have a plane.[SQL]\\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills) GROUP BY location'\n\n    LIMIT = 400\n\n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1077,
    "db_id": "pilot_1",
    "question": {
      "id": 1077,
      "db_id": "pilot_1",
      "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[SQL]\\nSELECT location FROM HangarGROUP BY locationORDER BY location;"
  },
  {
    "id": 1078,
    "db_id": "pilot_1",
    "question": {
      "id": 1078,
      "db_id": "pilot_1",
      "question": "Find the number of pilots for the plane types with average pilot age below 35."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of pilots for the plane types with average pilot age below 35.[SQL]\\nSELECT plane_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) GROUP BY plane_name HAVING count(*)  <  10'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1079,
    "db_id": "pilot_1",
    "question": {
      "id": 1079,
      "db_id": "pilot_1",
      "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[SQL]\\nSELECT plane_name FROM PilotSkills WHERE average_pilot_age  <  35 GROUP BY plane_name'\n\n  GROUP BY plane_name;"
  },
  {
    "id": 1080,
    "db_id": "pilot_1",
    "question": {
      "id": 1080,
      "db_id": "pilot_1",
      "question": "Find the location of the plane that is owned by the youngest pilot."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the location of the plane that is owned by the youngest pilot.[SQL]\\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1) <MID>\n    LIMIT 1;'\n\n    ;"
  },
  {
    "id": 1081,
    "db_id": "pilot_1",
    "question": {
      "id": 1081,
      "db_id": "pilot_1",
      "question": "What is the location of the plane that was flown by the pilot with the lowest age?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the location of the plane that was flown by the pilot with the lowest age?[SQL]\\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1) <MID>\n    LIMIT 1;'\n\n    ;"
  },
  {
    "id": 1082,
    "db_id": "pilot_1",
    "question": {
      "id": 1082,
      "db_id": "pilot_1",
      "question": "Find the name and age of pilots who have a plane in Austin."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and age of pilots who have a plane in Austin.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name IN (SELECT hangar.plane_name FROM hangar WHERE hangar.location  =  'Austin')'\n\n    LIMIT 1'\n\n    ;"
  },
  {
    "id": 1083,
    "db_id": "pilot_1",
    "question": {
      "id": 1083,
      "db_id": "pilot_1",
      "question": "What are the names and ages of pilots who have planes located in Austin?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ages of pilots who have planes located in Austin?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name IN (SELECT Hangar.plane_name FROM Hangar WHERE Hangar.location  =  'Austin')'\n\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1084,
    "db_id": "pilot_1",
    "question": {
      "id": 1084,
      "db_id": "pilot_1",
      "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  >  (SELECT min(age) FROM PilotSkills WHERE pilot_name  =  'John') ORDER BY pilot_name ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1085,
    "db_id": "pilot_1",
    "question": {
      "id": 1085,
      "db_id": "pilot_1",
      "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  >  (SELECT max(age) FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub')) ORDER BY pilot_name ASC'\n\n  ORDER BY plane_name;"
  },
  {
    "id": 1086,
    "db_id": "pilot_1",
    "question": {
      "id": 1086,
      "db_id": "pilot_1",
      "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[SQL]\\nSELECT location FROM Hangar WHERE plane_name  =  'F-14 Fighter' UNION SELECT count(*) FROM PilotSkills WHERE age  <  (SELECT min(age) FROM PilotSkills) AND plane_name  =  'F-14 Fighter' <MID>\n    LIMIT 1;\n    ;"
  },
  {
    "id": 1087,
    "db_id": "pilot_1",
    "question": {
      "id": 1087,
      "db_id": "pilot_1",
      "question": "How many pilots are younger than all pilots who own the F-14 Fighter?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many pilots are younger than all pilots who own the F-14 Fighter?[SQL]\\nSELECT plane_name FROM Hangar WHERE location LIKE '%USA%' AND plane_name != 'F-14' ORDER BY age LIMIT 1; SELECT count(*) FROM PilotSkills WHERE age  <  (SELECT max(age) FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'F-14')) ;'\n\n  ORDER BY plane_name;"
  },
  {
    "id": 1088,
    "db_id": "pilot_1",
    "question": {
      "id": 1088,
      "db_id": "pilot_1",
      "question": "Find all different planes whose names contain substring 'Bomber'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all different planes whose names contain substring 'Bomber'.[SQL]\\nSELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' <MID>\n    GROUP BY plane_name;"
  },
  {
    "id": 1089,
    "db_id": "pilot_1",
    "question": {
      "id": 1089,
      "db_id": "pilot_1",
      "question": "What are the different plane names that contain the word Bomber?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different plane names that contain the word Bomber?[SQL]\\nSELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' <MID>\n  GROUP BY plane_name;"
  },
  {
    "id": 1090,
    "db_id": "pilot_1",
    "question": {
      "id": 1090,
      "db_id": "pilot_1",
      "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[SQL]\\nSELECT location FROM Hangar WHERE plane_name  =  'Piper Cub' AND age  >  (SELECT max(age) FROM PilotSkills)'; SELECT count(*) FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills)'; SELECT count(*) FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills)'; SELECT count(*) FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills)'; SELECT count(*) FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills)'; SELECT count(*) FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills)'; SELECT count(*) FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills)'; SELECT count(*) FROM"
  },
  {
    "id": 1091,
    "db_id": "pilot_1",
    "question": {
      "id": 1091,
      "db_id": "pilot_1",
      "question": "How many pilots are older than the youngest pilot who has Piper Cub?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many pilots are older than the youngest pilot who has Piper Cub?[SQL]\\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.age  >  (SELECT min(age) FROM PilotSkills WHERE PilotSkills.plane_name  =  'Piper Cub') AND PilotSkills.plane_name  =  'Piper Cub' GROUP BY PilotSkills.pilot_name HAVING count(*)  >=  2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1092,
    "db_id": "district_spokesman",
    "question": {
      "id": 1092,
      "db_id": "district_spokesman",
      "question": "Find the name of the district which has the largest area."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the district which has the largest area.[SQL]\\nSELECT District_ID FROM district WHERE Area_km  =  ( SELECT MAX(Area_km) FROM district )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1093,
    "db_id": "district_spokesman",
    "question": {
      "id": 1093,
      "db_id": "district_spokesman",
      "question": "Select the area and government website of the district with the smallest population."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the area and government website of the district with the smallest population.[SQL]\\nSELECT District_ID FROM district WHERE Population  =  (SELECT MIN(Population) FROM district) LIMIT 1; SELECT Area_km ,  Government_website FROM district WHERE District_ID  =  (SELECT District_ID FROM district WHERE Population  =  (SELECT MIN(Population) FROM district)) LIMIT 1; <MID>\n    LIMIT 1; SELECT Area_km ,  Government_website FROM district WHERE District_ID  =  (SELECT District_ID FROM district WHERE Population  =  (SELECT MIN(Population) FROM district)) LIMIT 1;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1094,
    "db_id": "district_spokesman",
    "question": {
      "id": 1094,
      "db_id": "district_spokesman",
      "question": "Find the names and populations of the districts whose area is greater than the average area."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names and populations of the districts whose area is greater than the average area.[SQL]\\nSELECT District_ID FROM district WHERE Area_km  >  (SELECT AVG(Area_km) FROM district)';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1095,
    "db_id": "district_spokesman",
    "question": {
      "id": 1095,
      "db_id": "district_spokesman",
      "question": "Give me the biggest and average areas of all districts."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the biggest and average areas of all districts.[SQL]\\nSELECT district.District_ID FROM district WHERE district.Area_km  =  ( SELECT max(Area_km) FROM district ) UNION SELECT district.District_ID FROM district WHERE district.Area_km  =  ( SELECT avg(Area_km) FROM district )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1096,
    "db_id": "district_spokesman",
    "question": {
      "id": 1096,
      "db_id": "district_spokesman",
      "question": "What is the total population of the districts whose areas are in the top 3?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total population of the districts whose areas are in the top 3?[SQL]\\nSELECT Spokesman_ID FROM spokesman_district WHERE District_ID IN ( SELECT District_ID FROM district ORDER BY Area_km LIMIT 3 ) GROUP BY Spokesman_ID'\n        ;"
  },
  {
    "id": 1097,
    "db_id": "district_spokesman",
    "question": {
      "id": 1097,
      "db_id": "district_spokesman",
      "question": "List the ids, names, and government websites of all districts sorted by population."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the ids, names, and government websites of all districts sorted by population.[SQL]\\nSELECT District_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1098,
    "db_id": "district_spokesman",
    "question": {
      "id": 1098,
      "db_id": "district_spokesman",
      "question": "Find the names of districts whose government links use a 'gov' domain."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of districts whose government links use a 'gov' domain.[SQL]\\nSELECT District_ID FROM district WHERE Government_website LIKE '%.gov/%' <MID>\n    GROUP BY District_ID;"
  },
  {
    "id": 1099,
    "db_id": "district_spokesman",
    "question": {
      "id": 1099,
      "db_id": "district_spokesman",
      "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[SQL]\\nSELECT District_ID FROM district WHERE Population  >  4000 OR Area_km  >  3000'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1100,
    "db_id": "district_spokesman",
    "question": {
      "id": 1100,
      "db_id": "district_spokesman",
      "question": "Find all spokesman's names and speech titles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all spokesman's names and speech titles.[SQL]\\nSELECT Spokesman_ID FROM spokesman WHERE Name IN (SELECT T1.Name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID  =  T2.Spokesman_ID WHERE T2.Start_year BETWEEN 1980 AND 1989 GROUP BY T1.Name HAVING COUNT(*)  >  350) ORDER BY Speach_title ASC NULLS LAST; <MID>T1.Name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID  =  T2.Spokesman_ID WHERE T2.Start_year BETWEEN 1980 AND 1989 GROUP BY T1.Name HAVING COUNT(*)  >  350) ORDER BY Speach_title ASC NULLS LA"
  },
  {
    "id": 1101,
    "db_id": "district_spokesman",
    "question": {
      "id": 1101,
      "db_id": "district_spokesman",
      "question": "Find the average points and average ages of all spokesmen whose rank position is 1."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average points and average ages of all spokesmen whose rank position is 1.[SQL]\\nSELECT Spokesman_ID FROM spokesman WHERE Rank_position  =  1; SELECT avg(Points) ,  avg(Age) FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district); SELECT avg(Points) ,  avg(Age) FROM spokesman WHERE Rank_position  =  1; SELECT avg(Points) ,  avg(Age) FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district); SELECT avg(Points) ,  avg(Age) FROM spokesman WHERE Rank_position  =  1; SELECT avg(Points) ,  avg(Age) FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district); SELECT avg(Points) ,  avg("
  },
  {
    "id": 1102,
    "db_id": "district_spokesman",
    "question": {
      "id": 1102,
      "db_id": "district_spokesman",
      "question": "What are the names and points of spokesmen who are younger than 40?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and points of spokesmen who are younger than 40?[SQL]\\nSELECT Spokesman_ID FROM spokesman WHERE Age  <  40 UNION SELECT Name ,  Points FROM spokesman WHERE Age  <  40 UNION SELECT Speach_title FROM spokesman WHERE Age  <  40 UNION SELECT Rank_position FROM spokesman WHERE Age  <  40 UNION SELECT Age FROM spokesman WHERE Age  <  40 ORDER BY Age ASC LIMIT 10'\n        ;"
  },
  {
    "id": 1103,
    "db_id": "district_spokesman",
    "question": {
      "id": 1103,
      "db_id": "district_spokesman",
      "question": "Who is the oldest spokesman?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who is the oldest spokesman?[SQL]\\nSELECT Spokesman_ID FROM spokesman WHERE Age  =  (SELECT max(Age) FROM spokesman) LIMIT 1; SELECT Name FROM spokesman WHERE Spokesman_ID  =  (SELECT Spokesman_ID FROM spokesman WHERE Age  =  (SELECT max(Age) FROM spokesman)) LIMIT 1; SELECT Start_year FROM spokesman_district WHERE Spokesman_ID  =  (SELECT Spokesman_ID FROM spokesman WHERE Age  =  (SELECT max(Age) FROM spokesman)) LIMIT 1;'\n        ;"
  },
  {
    "id": 1104,
    "db_id": "district_spokesman",
    "question": {
      "id": 1104,
      "db_id": "district_spokesman",
      "question": "Which spokesman has lower points than the average?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which spokesman has lower points than the average?[SQL]\\nSELECT Spokesman_ID FROM spokesman WHERE Points  <  (SELECT avg(Points) FROM spokesman) ORDER BY Points ASC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1105,
    "db_id": "district_spokesman",
    "question": {
      "id": 1105,
      "db_id": "district_spokesman",
      "question": "Find the name of the district which has greatest number of spokesmen."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the district which has greatest number of spokesmen.[SQL]\\nSELECT district.District_ID FROM district WHERE district.District_ID IN (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1) SELECT Name FROM district WHERE District_ID IN (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT Name FROM district WHERE district_ID NOT IN (SELECT district_id FROM spokesman_district) ORDER BY Population DESC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 1106,
    "db_id": "district_spokesman",
    "question": {
      "id": 1106,
      "db_id": "district_spokesman",
      "question": "Find the names of spokesmen who have served some district before 2004."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of spokesmen who have served some district before 2004.[SQL]\\nSELECT District_ID FROM spokesman_district WHERE Start_Year  <  2004; SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_Year  <  2004);'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1107,
    "db_id": "district_spokesman",
    "question": {
      "id": 1107,
      "db_id": "district_spokesman",
      "question": "Find the number of spokesmen for each district, and the show district names as well."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of spokesmen for each district, and the show district names as well.[SQL]\\nSELECT District_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1108,
    "db_id": "district_spokesman",
    "question": {
      "id": 1108,
      "db_id": "district_spokesman",
      "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of the districts which have had both spokesman with rank position 1 and 2.[SQL]\\nSELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position  =  1 INTERSECT SELECT Spokesman_ID FROM spokesman WHERE Rank_position  =  2) GROUP BY District_ID HAVING COUNT(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1109,
    "db_id": "district_spokesman",
    "question": {
      "id": 1109,
      "db_id": "district_spokesman",
      "question": "Find the names of districts which have more than one spokesman."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of districts which have more than one spokesman.[SQL]\\nSELECT District_ID FROM spokesman_district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(*)  >  1) SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(*)  >  1))'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1110,
    "db_id": "district_spokesman",
    "question": {
      "id": 1110,
      "db_id": "district_spokesman",
      "question": "Find the number of districts which have no spokesmen."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of districts which have no spokesmen.[SQL]\\nSELECT district.District_ID FROM district WHERE district.District_ID NOT IN(SELECT district_id FROM spokesman_district) COUNT(*) FROM district'\n       \n   \n   \n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1111,
    "db_id": "district_spokesman",
    "question": {
      "id": 1111,
      "db_id": "district_spokesman",
      "question": "Find the name of spokesmen who do not speak for any district."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of spokesmen who do not speak for any district.[SQL]\\nSELECT Spokesman_ID FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district) AND Name != 'null' AND Speach_title  !=  'null' ORDER BY Name ASC; <MID>_ID = T1.District_ID GROUP BY T1.District_ID HAVING COUNT(*)  >  500 ORDER BY SUM(T1.Area_km) DESC LIMIT 3; SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district); SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district) AND Name != 'null' AND Speach_title  !=  'null' ORDER BY Name ASC; SELECT Name FROM spokesman WHERE Name IN (SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT"
  },
  {
    "id": 1112,
    "db_id": "district_spokesman",
    "question": {
      "id": 1112,
      "db_id": "district_spokesman",
      "question": "Find the total and average population of the districts which have some spokesman."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"district\" (\n\"District_ID\" int,\n\"Name\" text,\n\"Area_km\" real,\n\"Population\" real,\n\"Density_km\" real,\n\"Government_website\" text,\nPRIMARY KEY (\"District_ID\")\n)\nCREATE TABLE \"spokesman\" (\n\"Spokesman_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Speach_title\" text,\n\"Rank_position\" real,\n\"Points\" real,\nPRIMARY KEY (\"Spokesman_ID\")\n)\nCREATE TABLE \"spokesman_district\" (\n\"Spokesman_ID\" int,\n\"District_ID\" int,\n\"Start_year\" text,\nPRIMARY KEY (\"Spokesman_ID\"),\nFOREIGN KEY (\"Spokesman_ID\") REFERENCES \"spokesman\"(\"Spokesman_ID\"),\nFOREIGN KEY (\"District_ID\") REFERENCES \"district\"(\"District_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total and average population of the districts which have some spokesman.[SQL]\\nSELECT district.District_ID FROM district WHERE district_ID IN ( SELECT district_ID FROM spokesman_district ) GROUP BY district_ID ORDER BY SUM(government_website) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1113,
    "db_id": "art_1",
    "question": {
      "id": 1113,
      "db_id": "art_1",
      "question": "What is the title of the sculpture that was created in the most recent year ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title of the sculpture that was created in the most recent year ?[SQL]\\nSELECT title FROM Sculptures WHERE YEAR  =  (SELECT max(YEAR) FROM Sculptures) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1114,
    "db_id": "art_1",
    "question": {
      "id": 1114,
      "db_id": "art_1",
      "question": "What is the name of the scuplture that was created most recently ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the scuplture that was created most recently ?[SQL]\\nSELECT title FROM Sculptures WHERE year  =  (SELECT max(year) FROM Sculptures) ORDER BY title LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1115,
    "db_id": "art_1",
    "question": {
      "id": 1115,
      "db_id": "art_1",
      "question": "What is the title and location of the oldest painting ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the title and location of the oldest painting ?[SQL]\\nSELECT title FROM Paintings WHERE YEAR  =  (SELECT min(YEAR) FROM paintings) UNION SELECT location FROM Paintings WHERE YEAR  =  (SELECT min(YEAR) FROM paintings) LIMIT 1'\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1116,
    "db_id": "art_1",
    "question": {
      "id": 1116,
      "db_id": "art_1",
      "question": "What is the name of the oldest painting and where is it located?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the oldest painting and where is it located?[SQL]\\nSELECT title FROM Paintings WHERE YEAR  =  (SELECT min(YEAR) FROM paintings) AND location  =  (SELECT location FROM paintings WHERE YEAR  =  (SELECT min(YEAR) FROM paintings))'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1117,
    "db_id": "art_1",
    "question": {
      "id": 1117,
      "db_id": "art_1",
      "question": "Find the names of all sculptures located in gallery 226."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of all sculptures located in gallery 226.[SQL]\\nSELECT title FROM Sculptures WHERE location  =  'gallery 226' UNION SELECT title FROM Paintings WHERE location  =  'gallery 226' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1118,
    "db_id": "art_1",
    "question": {
      "id": 1118,
      "db_id": "art_1",
      "question": "What are the names of all sculptures in gallery 226?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all sculptures in gallery 226?[SQL]\\nSELECT title FROM Sculptures WHERE location  =  'gallery 226' UNION SELECT title FROM Paintings WHERE location  =  'gallery 226' <MID>1970', 'Medium': 'Oil', 'mediumOn': '', 'location': 'gallery 226'}, {'title': 'Self-portrait', 'year': '1986', 'height_mm': '50', 'width_mm': '30', 'medium': 'Oil', 'mediumOn': '', 'location': 'gallery 226'}], 'Sculptors': [{'lname': 'Dalco', 'fname': 'Jesus', 'birthYear': '1948', 'deathYear': '2015', 'sculptorID': '17X6'}]}\n\n    ORDER BY title"
  },
  {
    "id": 1119,
    "db_id": "art_1",
    "question": {
      "id": 1119,
      "db_id": "art_1",
      "question": "List the title and location of all paintings."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the title and location of all paintings.[SQL]\\nSELECT title FROM Paintings WHERE location  =  'Room 236' UNION SELECT title FROM Paintings WHERE location  =  'Room 234' UNION SELECT title FROM Paintings WHERE location  =  'Room 235' UNION SELECT title FROM Paintings WHERE location  =  'Room 237' UNION SELECT title FROM Paintings WHERE location  =  'Room 238' UNION SELECT title FROM Paintings WHERE location  =  'Room 239' UNION SELECT title FROM Paintings WHERE location  =  'Room 240' UNION SELECT title FROM Paintings WHERE location  =  'Room 241' UNION SELECT title FROM Paintings WHERE location  =  'Room 243' UNION SELECT title FROM Paintings WHERE location  =  'Room 244' UNION"
  },
  {
    "id": 1120,
    "db_id": "art_1",
    "question": {
      "id": 1120,
      "db_id": "art_1",
      "question": "What are the paintings called and where are they located?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the paintings called and where are they located?[SQL]\\nSELECT title FROM Paintings WHERE location  =  'Room 237' UNION SELECT title FROM Paintings WHERE location  =  'Room 235' UNION SELECT title FROM Paintings WHERE location  =  'Room 240' UNION SELECT title FROM Paintings WHERE location  =  'Room 241' UNION SELECT title FROM Paintings WHERE location  =  'Room 238' UNION SELECT title FROM Paintings WHERE location  =  'Room 239' UNION SELECT title FROM Paintings WHERE location  =  'Room 243' UNION SELECT title FROM Paintings WHERE location  =  'Room 242' UNION SELECT title FROM Paintings WHERE location  =  'Room 244' UNION SELECT title FROM Paintings WHERE location  =  'Room 245' UNION"
  },
  {
    "id": 1121,
    "db_id": "art_1",
    "question": {
      "id": 1121,
      "db_id": "art_1",
      "question": "List the title and location of all sculptures."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the title and location of all sculptures.[SQL]\\nSELECT title FROM Sculptures;"
  },
  {
    "id": 1122,
    "db_id": "art_1",
    "question": {
      "id": 1122,
      "db_id": "art_1",
      "question": "What are the sculptures called and where are they located?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the sculptures called and where are they located?[SQL]\\nSELECT title FROM Sculptures WHERE location  =  'Basement' UNION SELECT title FROM Sculptures WHERE location  =  'Attic' UNION SELECT title FROM Sculptures WHERE location  =  'Hallway' UNION SELECT title FROM Sculptures WHERE location  =  'Living Room' UNION SELECT title FROM Sculptures WHERE location  =  'Kitchen' UNION SELECT title FROM Sculptures WHERE location  =  'Bedroom' UNION SELECT title FROM Sculptures WHERE location  =  'Nursery' UNION SELECT title FROM Sculptures WHERE location  =  'Recreation Room' UNION SELECT title FROM Sculptures WHERE location  =  'Office' UNION SELECT title FROM Sculptures WHERE location  =  'Terrace' UNION SELECT title FROM Sculptures WHERE location  =  'Utility Room' UNION SELECT title FROM Scul"
  },
  {
    "id": 1123,
    "db_id": "art_1",
    "question": {
      "id": 1123,
      "db_id": "art_1",
      "question": "What are the medium types of the painting with id = 80"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the medium types of the painting with id = 80[SQL]\\nSELECT medium FROM Paintings WHERE paintingID  =  80 UNION SELECT mediumOn FROM Paintings WHERE paintingID  =  80' |]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1124,
    "db_id": "art_1",
    "question": {
      "id": 1124,
      "db_id": "art_1",
      "question": "What mediums were used for the painting with id 80 ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What mediums were used for the painting with id 80 ?[SQL]\\nSELECT medium FROM Paintings WHERE paintingID  =  80\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1125,
    "db_id": "art_1",
    "question": {
      "id": 1125,
      "db_id": "art_1",
      "question": "Find the first and last names of all artists who were born after 1850."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the first and last names of all artists who were born after 1850.[SQL]\\nSELECT location FROM Artists WHERE birthYear  >  1850] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 AND deathYear  <  1925] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 AND deathYear  <  1925 AND gender  =  'Male'] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 AND deathYear  <  1925 AND gender  =  'Female'] SELECT DISTINCT T2.fname ,  T2.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1."
  },
  {
    "id": 1126,
    "db_id": "art_1",
    "question": {
      "id": 1126,
      "db_id": "art_1",
      "question": "What are the full names of artists born after 1850?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the full names of artists born after 1850?[SQL]\\nSELECT location FROM Artists WHERE birthYear  >  1850 ORDER BY lname ,  fname ASC;[]] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 ORDER BY lname ,  fname ASC;[]] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 ORDER BY lname ,  fname ASC;[]] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 ORDER BY lname ,  fname ASC;[]] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 ORDER BY lname ,  fname ASC;[]] SELECT fname ,  lname FROM Artists WHERE birthYear  >  1850 ORDER BY lname ,  fname ASC;[]] SELECT fname ,  lname FROM Artists"
  },
  {
    "id": 1127,
    "db_id": "art_1",
    "question": {
      "id": 1127,
      "db_id": "art_1",
      "question": "Find the names and years of all sculptures that are not located in gallery 226."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names and years of all sculptures that are not located in gallery 226.[SQL]\\nSELECT title FROM Sculptures WHERE location != 'Gallery 226' AND year IS NOT NULL' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1128,
    "db_id": "art_1",
    "question": {
      "id": 1128,
      "db_id": "art_1",
      "question": "What are the names and dates created for all sculptures not located in gallery 226?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and dates created for all sculptures not located in gallery 226?[SQL]\\nSELECT title FROM Sculptures WHERE location != 'Gallery 226' AND year IS NOT NULL' <MID>1970', 'Medium: mixed media', 'Location: Studio', 'Sculptor: Alonso Umbral'], ['Sculpture 8', '1984', 'Medium: marble', 'Location: Studio', 'Sculptor: Flavio Corpa'], ['Sculpture 9', '1958', 'Medium: marble', 'Location: Gallery 226', 'Sculptor: Rufino Tamayo']]\n\n    ORDER BY year;"
  },
  {
    "id": 1129,
    "db_id": "art_1",
    "question": {
      "id": 1129,
      "db_id": "art_1",
      "question": "What are the first and last names of all distinct artists who made sculptures before 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first and last names of all distinct artists who made sculptures before 1900?[SQL]\\nSELECT title FROM Sculptures WHERE sculptorID IN (SELECT DISTINCT artistID FROM Artists WHERE birthYear  <  1900) UNION SELECT t2.title FROM paintings AS t1 JOIN sculputres AS t2 ON t1.painterID  =  t2.sculptorID WHERE t1.year  <  1900'\n       \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1130,
    "db_id": "art_1",
    "question": {
      "id": 1130,
      "db_id": "art_1",
      "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the first and last name of each distinct artists who made a sculpture before 1900?[SQL]\\nSELECT title FROM Sculptures WHERE sculptorID IN (SELECT DISTINCT artistID FROM Artists WHERE birthYear  <  1900) UNION SELECT t2.title FROM paintings AS t1 JOIN sculptures AS t2 ON t1.painterID  =  t2.sculptorID WHERE t1.year  <  1900'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1131,
    "db_id": "art_1",
    "question": {
      "id": 1131,
      "db_id": "art_1",
      "question": "Find the birth years of all distinct artists who made sculptures after 1920?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the birth years of all distinct artists who made sculptures after 1920?[SQL]\\nSELECT title FROM Sculptures WHERE year  >  1920 UNION SELECT t1.birthYear FROM Artists AS t1 JOIN Sculptures AS t2 ON t1.artistID  =  t2.sculptorID WHERE t2.year  >  1920 GROUP BY t1.birthYear HAVING count(*)  >=  2'\n       \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 1132,
    "db_id": "art_1",
    "question": {
      "id": 1132,
      "db_id": "art_1",
      "question": "What is the birth year of each distinct artists who created sculptures after 1920?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the birth year of each distinct artists who created sculptures after 1920?[SQL]\\nSELECT title FROM Sculptures WHERE year  >  1920; SELECT t2.birthyear FROM artists AS t1 JOIN sculpters AS t2 ON t1.artistid  =  t2.artistid WHERE t1.deathyear  -  t1.birthyear  >  70;'\n   \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1133,
    "db_id": "art_1",
    "question": {
      "id": 1133,
      "db_id": "art_1",
      "question": "What are the first and last names of the artist who lived the longest?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first and last names of the artist who lived the longest?[SQL]\\nSELECT location FROM Artists WHERE birthYear  =  (SELECT max(birthYear) FROM Artists) ORDER BY birthYear DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1134,
    "db_id": "art_1",
    "question": {
      "id": 1134,
      "db_id": "art_1",
      "question": "Give the full name of the artist who lived the longest."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the full name of the artist who lived the longest.[SQL]\\nSELECT location FROM Artists WHERE birthyear  =  (SELECT max(birthyear) FROM artists) ORDER BY lname LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1135,
    "db_id": "art_1",
    "question": {
      "id": 1135,
      "db_id": "art_1",
      "question": "What is the age of the artist who had the shortest life?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the age of the artist who had the shortest life?[SQL]\\nSELECT medium FROM Paintings WHERE height_mm  =  120 AND width_mm  =  160 UNION SELECT medium FROM Sculptures WHERE year  =  1955 AND title  =  'Self-portrait' LIMIT 1; <MID>\n    ORDER BY location;"
  },
  {
    "id": 1136,
    "db_id": "art_1",
    "question": {
      "id": 1136,
      "db_id": "art_1",
      "question": "How old is the artist who lived the shortest life?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How old is the artist who lived the shortest life?[SQL]\\nSELECT location FROM Artists WHERE birthyear  =  (SELECT min(birthyear) FROM artists) ORDER BY locaion DESC LIMIT 1; SELECT locaion FROM Artists WHERE birthyear  =  (SELECT min(birthyear) FROM artists) ORDER BY locaion DESC LIMIT 1; SELECT min(birthyear) FROM artists; SELECT max(birthyear) FROM artists; SELECT count(*) FROM artists; SELECT avg(birthyear) FROM artists; SELECT sum(birthyear) FROM artists; SELECT min(birthyear) FROM artists; SELECT max(birthyear) FROM artists; SELECT count(*) FROM artists; SELECT avg(birthyear) FROM artists; SELECT sum(birthyear) FROM artists; SELECT min(birthyear) FROM artists; SELECT max(birthyear) FROM artists; SELECT count(*) FROM artists; SELECT avg(birthyear) FROM artists; SELECT"
  },
  {
    "id": 1137,
    "db_id": "art_1",
    "question": {
      "id": 1137,
      "db_id": "art_1",
      "question": "What are the first name and age of the artist who had the longest life?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first name and age of the artist who had the longest life?[SQL]\\nSELECT location FROM Artists WHERE birthYear = (SELECT min(birthYear) FROM artists) AND deathYear = (SELECT max(deathYear) FROM artists) ORDER BY age DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1138,
    "db_id": "art_1",
    "question": {
      "id": 1138,
      "db_id": "art_1",
      "question": "What is the first name and age of the artist who lived the longest?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the first name and age of the artist who lived the longest?[SQL]\\nSELECT title FROM Artists WHERE birthYear  =  (SELECT max(birthYear) FROM Artists) ORDER BY age DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1139,
    "db_id": "art_1",
    "question": {
      "id": 1139,
      "db_id": "art_1",
      "question": "How many paintings are exhibited at gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many paintings are exhibited at gallery 240?[SQL]\\nSELECT title FROM Paintings WHERE location  =  'gallery 240' UNION SELECT title FROM Paintings WHERE location  =  'At Home' EXCEPT SELECT title FROM Paintings WHERE location  =  'gallery 240' AND height_mm  >  1600' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1140,
    "db_id": "art_1",
    "question": {
      "id": 1140,
      "db_id": "art_1",
      "question": "What is the total number of paintings exhibited in gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total number of paintings exhibited in gallery 240?[SQL]\\nSELECT title FROM Paintings WHERE location LIKE '%gallery%240%'';' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1141,
    "db_id": "art_1",
    "question": {
      "id": 1141,
      "db_id": "art_1",
      "question": "How many paintings did the artist with the longest life make ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many paintings did the artist with the longest life make ?[SQL]\\nSELECT title FROM Artists WHERE birthYear = (SELECT max(birthYear) FROM artists) AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID; SELECT count(*) FROM Paintings WHERE painterID  =  (SELECT artistid FROM artists WHERE birthYear  =  (SELECT max(birthYear) FROM artists));'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1142,
    "db_id": "art_1",
    "question": {
      "id": 1142,
      "db_id": "art_1",
      "question": "What is the painting count of the artist with the longest life ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the painting count of the artist with the longest life ?[SQL]\\nSELECT title FROM Artists WHERE birthyear  =  (SELECT max(birthyear) FROM artists) JOIN Paintings ON Paintings.painterID  =  Artists.artistID GROUP BY title HAVING COUNT(*)  =  (SELECT count(*) FROM artists WHERE birthyear  =  (SELECT max(birthyear) FROM artists)) ORDER BY COUNT(*) DESC LIMIT 1'\n       \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1143,
    "db_id": "art_1",
    "question": {
      "id": 1143,
      "db_id": "art_1",
      "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[SQL]\\nSELECT title FROM Paintings WHERE painterID IN (SELECT artistid FROM Artists WHERE fname  =  'Mary') AND YEAR IN (SELECT YEAR FROM Paintings WHERE painterID IN (SELECT artistid FROM Artists WHERE fname  =  'Mary'))' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1144,
    "db_id": "art_1",
    "question": {
      "id": 1144,
      "db_id": "art_1",
      "question": "What is the name and year of each painting created by the artist whose first name is Mary?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and year of each painting created by the artist whose first name is Mary?[SQL]\\nSELECT title FROM Paintings WHERE painterID IN (SELECT artistid FROM artists WHERE fname  =  'Mary') AND YEAR != 'null' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1145,
    "db_id": "art_1",
    "question": {
      "id": 1145,
      "db_id": "art_1",
      "question": "What are the widths of the paintings that were created by the artist who was born before 1850?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the widths of the paintings that were created by the artist who was born before 1850?[SQL]\\nSELECT title FROM Paintings WHERE YEAR IN (SELECT YEAR FROM Artists WHERE birthyear  <  1850) AND height_mm  =  (SELECT max(height_mm) FROM Paintings WHERE YEAR IN (SELECT YEAR FROM Artists WHERE birthyear  <  1850))'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1146,
    "db_id": "art_1",
    "question": {
      "id": 1146,
      "db_id": "art_1",
      "question": "How wide were the paintings by the artist who was born prior to 1850?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How wide were the paintings by the artist who was born prior to 1850?[SQL]\\nSELECT title FROM Paintings WHERE painterID IN (SELECT artistid FROM artists WHERE birthyear  <  1850) AND YEAR IN (SELECT max(YEAR) FROM Paintings WHERE painterID IN (SELECT artistid FROM artists WHERE birthyear  <  1850))', '24.5' , '39.8' , '46.7' , '53.6' , '68.2' , '83.5' , '101.5' , '117.4' , '133.3' , '149.2' , '165' , '180.9' , '196.8' , '212.7' , '228.6' , '244.5' , '260.4' , '276.3' ,"
  },
  {
    "id": 1147,
    "db_id": "art_1",
    "question": {
      "id": 1147,
      "db_id": "art_1",
      "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[SQL]\\nSELECT location FROM Paintings WHERE painterID IN (SELECT artistid FROM Artists WHERE firstname  =  'Pablo') AND medium != 'null' UNION SELECT medium FROM Paintings WHERE painterID IN (SELECT artistid FROM Artists WHERE firstname  =  'Pablo') AND location != 'null' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1148,
    "db_id": "art_1",
    "question": {
      "id": 1148,
      "db_id": "art_1",
      "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[SQL]\\nSELECT title FROM Paintings WHERE painterID  =  (SELECT artistID FROM Artists WHERE fname  =  'Pablo') AND location != '' AND medium != ''; SELECT title FROM Sculptures WHERE sculptorID = (SELECT artistID FROM Artists WHERE fname  =  'Pablo') AND location != ''; SELECT title FROM Paintings WHERE painterID  =  (SELECT artistID FROM Artists WHERE fname  =  'Pablo') AND mediumOn != ''; SELECT title FROM Paintings WHERE painterID  =  (SELECT artistID FROM Artists WHERE fname  =  'Pablo') AND medium != ''; SELECT title FROM Paintings WHERE painterID  =  (SELECT artistID FROM Artists WHERE fname  =  'Pablo') AND height_mm > 200 AND width_mm  >  200; SELECT title FROM Paintings WHERE painterID  =  (SELECT"
  },
  {
    "id": 1149,
    "db_id": "art_1",
    "question": {
      "id": 1149,
      "db_id": "art_1",
      "question": "Find the first and last names of the artists who have both works of paintings and sculptures?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the first and last names of the artists who have both works of paintings and sculptures?[SQL]\\nSELECT title FROM Paintings WHERE title != '' AND artistID IN (SELECT DISTINCT artistID FROM Sculptures) UNION SELECT t2.title FROM Paintings AS t1 JOIN Sculptures AS t2 ON t1.artistID  =  t2.artistID WHERE t1.title != '' AND t2.title != '''\n       \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1150,
    "db_id": "art_1",
    "question": {
      "id": 1150,
      "db_id": "art_1",
      "question": "Give the full names of artists who have created paintings and sculptures."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the full names of artists who have created paintings and sculptures.[SQL]\\nSELECT title FROM Paintings WHERE painterID IN (SELECT firstname FROM Artists) UNION SELECT t1.title FROM Sculptures AS t1 JOIN Artists AS t2 ON t1.sculptorID  =  t2.artistID WHERE t2.firstname IN (SELECT t3.firstname FROM Paintings AS t3 JOIN Artists AS t4 ON t3.painterID  =  t4.artistID) ORDER BY title ASC'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 1151,
    "db_id": "art_1",
    "question": {
      "id": 1151,
      "db_id": "art_1",
      "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' INTERSECT SELECT title FROM Paintings WHERE medium  =  'lithographic' <MID>\n    LIMIT 1000;', con=conn)\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1152,
    "db_id": "art_1",
    "question": {
      "id": 1152,
      "db_id": "art_1",
      "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first and last names of artists who have painted using both oil and lithographic mediums?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' INTERSECT SELECT title FROM Paintings WHERE medium  =  'lithographic' <MID>\n    LIMIT 1000;', con=conn)\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1153,
    "db_id": "art_1",
    "question": {
      "id": 1153,
      "db_id": "art_1",
      "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the birth year of the artist who created a painting in 1884 that is on canvas?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'canvas' AND YEAR  =  1884; SELECT t2.birthyear FROM artists AS t1 JOIN paintings AS t2 ON t1.artistid  =  t2.painterid WHERE t2.title IN (SELECT t2.title FROM artists AS t1 JOIN paintings AS t2 ON t1.artistid  =  t2.painterid WHERE t2.YEAR  =  1884 AND t2.medium  =  'canvas');' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1154,
    "db_id": "art_1",
    "question": {
      "id": 1154,
      "db_id": "art_1",
      "question": "In what year was the artist who created a painting in 1884 born?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In what year was the artist who created a painting in 1884 born?[SQL]\\nSELECT title FROM Paintings WHERE YEAR  =  1884; SELECT t2.lname FROM artists AS t1 JOIN paintings AS t2 ON t1.artistid  =  t2.painterid WHERE t1.birthyear  =  1884; SELECT t3.lname FROM artists AS t2 JOIN scultures AS t3 ON t2.artistid  =  t3.sculptorid WHERE t2.birthyear  =  1884; SELECT t4.lname FROM artists AS t3 JOIN paintings AS t4 ON t3.artistid  =  t4.painterid WHERE t3.birthyear  =  1884; SELECT t5.lname FROM artists AS t4 JOIN scultures AS t5 ON t4.artistid  =  t5.sculptor"
  },
  {
    "id": 1155,
    "db_id": "art_1",
    "question": {
      "id": 1155,
      "db_id": "art_1",
      "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the unique first names of the artists who had medium oil paintings located in gallery 241?[SQL]\\nSELECT location FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 241' UNION SELECT T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'oil' AND T2.location  =  'gallery 241' GROUP BY T1.fname HAVING count(*)  =  1' <MID>T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'oil' AND T2.location  =  'gallery 241' GROUP BY T1.fname HAVING count(*)  =  1' SELECT DISTINCT T1"
  },
  {
    "id": 1156,
    "db_id": "art_1",
    "question": {
      "id": 1156,
      "db_id": "art_1",
      "question": "What are first names of the artists with oil paintings in gallery 241?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are first names of the artists with oil paintings in gallery 241?[SQL]\\nSELECT title FROM Paintings WHERE location  =  'gallery 241' AND medium  =  'oil' UNION SELECT t1.fname FROM Artists AS t1 JOIN Paintings AS t2 ON t1.artistid  =  t2.painterid WHERE t2.location  =  'gallery 241' AND t2.medium  =  'oil' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1157,
    "db_id": "art_1",
    "question": {
      "id": 1157,
      "db_id": "art_1",
      "question": "What are the numbers of works for different medium type?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the numbers of works for different medium type?[SQL]\\nSELECT medium FROM Paintings WHERE medium  =  'Oil' UNION SELECT medium FROM Paintings WHERE medium  =  'Watercolor' UNION SELECT medium FROM Paintings WHERE medium  =  'Acrylic' UNION SELECT medium FROM Paintings WHERE medium  =  'Canvas' UNION SELECT medium FROM Paintings WHERE medium  =  'Marble' UNION SELECT medium FROM Paintings WHERE medium  =  'Ceramic' UNION SELECT medium FROM Paintings WHERE medium  =  'Plywood' UNION SELECT medium FROM Paintings WHERE medium  =  'Concrete' UNION SELECT medium FROM Paintings WHERE medium  =  'Plaster' UNION SELECT medium FROM Paintings WHERE medium  =  'Silver' UNION SELECT medium FROM Paintings WHERE medium  =  'Books' UNION SELECT medium FROM Paintings WHERE medium  =  'Photographs' UNION SELECT medium FROM"
  },
  {
    "id": 1158,
    "db_id": "art_1",
    "question": {
      "id": 1158,
      "db_id": "art_1",
      "question": "How many works are there in each medium?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many works are there in each medium?[SQL]\\nSELECT medium FROM Paintings WHERE medium != '' GROUP BY medium ORDER BY count(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 1159,
    "db_id": "art_1",
    "question": {
      "id": 1159,
      "db_id": "art_1",
      "question": "What are the average height of paintings for different medium types?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average height of paintings for different medium types?[SQL]\\nSELECT title, AVG(height_mm) ,  medium FROM paintings GROUP BY medium ORDER BY AVG(height_mm) DESC'\n        , 'SELECT title ,  AVG(height_mm) FROM paintings WHERE medium  =  'Oil' GROUP BY title ORDER BY AVG(height_mm) DESC'\n        , 'SELECT title ,  AVG(height_mm) FROM paintings WHERE medium  =  'Watercolor' GROUP BY title ORDER BY AVG(height_mm) DESC'\n        , 'SELECT title ,  AVG(height_mm) FROM paintings WHERE medium  =  'Acrylic' GROUP BY title ORDER BY AVG(height_mm) DESC'\n        , 'SELECT title ,  AVG(height_mm) FROM paintings WHERE medium  =  'Canvas' GROUP BY title ORDER BY AVG(height_mm) DESC'\n        , 'SELECT"
  },
  {
    "id": 1160,
    "db_id": "art_1",
    "question": {
      "id": 1160,
      "db_id": "art_1",
      "question": "What is the average height of paintings for different medium types?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average height of paintings for different medium types?[SQL]\\nSELECT medium, avg(height_mm) FROM Paintings GROUP BY medium ORDER BY avg(height_mm) DESC LIMIT 1'\n        , 'SELECT medium ,  avg(height_mm) FROM Paintings GROUP BY medium ORDER BY avg(height_mm) DESC LIMIT 1'\n        , ['medium']\n    , ['Height']\n    , ['TALL']\n    , []\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 1161,
    "db_id": "art_1",
    "question": {
      "id": 1161,
      "db_id": "art_1",
      "question": "What are the numbers of paintings created before 1900 in different places?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the numbers of paintings created before 1900 in different places?[SQL]\\nSELECT title, YEAR ,  location FROM paintings WHERE YEAR  <  1900 GROUP BY location'\n        , 'SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION'\n    , 'SELECT count(*) ,  null FROM paintings WHERE YEAR  <  1900'\n    , 'SELECT count(*) FROM paintings WHERE YEAR  <  1900'\n     , 'SELECT count(*) FROM paintings WHERE YEAR  <  1900 GROUP BY location'\n    , 'SELECT count(*) FROM paintings WHERE YEAR  <  1900 GROUP BY null'\n    , 'SELECT count(*) FROM paintings WHERE YEAR  <  1900 GROUP BY title'\n    , 'SELECT count(*) FROM paintings WHERE YEAR  <  1900 GROUP BY YEAR'\n   "
  },
  {
    "id": 1162,
    "db_id": "art_1",
    "question": {
      "id": 1162,
      "db_id": "art_1",
      "question": "How many paintings were created before 1900 in different locations?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many paintings were created before 1900 in different locations?[SQL]\\nSELECT title FROM Paintings WHERE YEAR  <  1900 GROUP BY LOCATION'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1163,
    "db_id": "art_1",
    "question": {
      "id": 1163,
      "db_id": "art_1",
      "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of paintings that are created after 1910 and whose medium is oil?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' AND YEAR  >  1910' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1164,
    "db_id": "art_1",
    "question": {
      "id": 1164,
      "db_id": "art_1",
      "question": "Give the names of all oil paintings created after 1910."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the names of all oil paintings created after 1910.[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' AND YEAR  >  1910' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1165,
    "db_id": "art_1",
    "question": {
      "id": 1165,
      "db_id": "art_1",
      "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 240' UNION SELECT t1.title FROM Paintings AS t1 JOIN Sculptures AS t2 ON t1.painterID  =  t2.sculptorID WHERE t2.location  =  'gallery 240' <MID>\n    GROUP BY title;"
  },
  {
    "id": 1166,
    "db_id": "art_1",
    "question": {
      "id": 1166,
      "db_id": "art_1",
      "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 240' UNION SELECT t1.title FROM Paintings AS t1 JOIN Sculptures AS t2 ON t1.painterID  =  t2.sculptorID WHERE t1.medium  =  'oil' AND t2.location  =  'gallery 240''; SELECT DISTINCT t1.artistID FROM Artists AS t1 JOIN Paintings AS t2 ON t1.artistID  =  t2.painterID WHERE t2.location  =  'gallery 240' INTERSECT SELECT DISTINCT t1.artistID FROM Artists AS t1 JOIN Sculptures AS t2 ON t1.artistID  =  t2.sculptorID"
  },
  {
    "id": 1167,
    "db_id": "art_1",
    "question": {
      "id": 1167,
      "db_id": "art_1",
      "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[SQL]\\nSELECT title FROM Paintings WHERE height_mm > (SELECT max(height_mm) FROM paintings WHERE medium  =  'Canvas') UNION SELECT title FROM Paintings EXCEPT SELECT title FROM Paintings WHERE medium  =  'Canvas' <MID>\n    LIMIT 10000;', con=conn)\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1168,
    "db_id": "art_1",
    "question": {
      "id": 1168,
      "db_id": "art_1",
      "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct titles of every painting that has a greater height than some painting on canvas?[SQL]\\nSELECT title FROM Paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE medium  =  'Canvas') UNION SELECT title FROM Paintings EXCEPT SELECT title FROM Paintings WHERE medium  =  'Canvas' <MID>\n    LIMIT 10000;',\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1169,
    "db_id": "art_1",
    "question": {
      "id": 1169,
      "db_id": "art_1",
      "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the distinct ids of all paintings that are older than some painting at location gallery 240.[SQL]\\nSELECT title FROM Paintings WHERE location != 'gallery 240' AND YEAR < (SELECT YEAR FROM Paintings WHERE location  =  'gallery 240')'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1170,
    "db_id": "art_1",
    "question": {
      "id": 1170,
      "db_id": "art_1",
      "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct ids of every painting that is older than some painting in gallery 240?[SQL]\\nSELECT title FROM Paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE location  =  'Gallery 240') UNION SELECT title FROM Paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE location  =  'Gallery 240') INTERSECT SELECT DISTINCT paintingID FROM Paintings WHERE location  =  'Gallery 240' <MID>1976', 'Medium: Oil on Canvas', 'Location: Gallery 240'], ['The Scream', '1895', '45.3x53.7cm', 'Medium: Oil on Canvas', 'Location: Gallery 240'], ['Self-portrait', '1904', '61x45.5cm', 'Medium: Oil on Canvas', 'Location"
  },
  {
    "id": 1171,
    "db_id": "art_1",
    "question": {
      "id": 1171,
      "db_id": "art_1",
      "question": "Find the id of the oldest painting."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id of the oldest painting.[SQL]\\nSELECT sculptorID FROM Artists WHERE birthYear  =  (SELECT min(birthYear) FROM Artists) LIMIT 1 UNION SELECT painterID FROM Paintings ORDER BY year ASC LIMIT 1'\n       \n   \n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1172,
    "db_id": "art_1",
    "question": {
      "id": 1172,
      "db_id": "art_1",
      "question": "What is the id of the oldest painting?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the oldest painting?[SQL]\\nSELECT Paintings.year FROM Paintings WHERE Paintings.year  =  (SELECT min(YEAR) FROM paintings) LIMIT 1; SELECT painterID FROM Paintings WHERE Paintings.year  =  (SELECT min(YEAR) FROM paintings) LIMIT 1; SELECT artistID FROM Artists WHERE birthYear  =  (SELECT min(birthYear) FROM artists) LIMIT 1; SELECT fname FROM Artists WHERE birthYear  =  (SELECT min(birthYear) FROM artists) LIMIT 1; SELECT lname FROM Artists WHERE birthYear  =  (SELECT min(birthYear) FROM artists) LIMIT 1; SELECT YEAR FROM Paintings ORDER BY YEAR ASC; SELECT title FROM Paintings ORDER BY title ASC; SELECT title FROM Sculptures ORDER BY title ASC; SELECT title FROM Paintings ORDER BY title DESC; SELECT title FROM Sculptures"
  },
  {
    "id": 1173,
    "db_id": "art_1",
    "question": {
      "id": 1173,
      "db_id": "art_1",
      "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?[SQL]\\nSELECT title FROM Sculptures WHERE title LIKE '%female%' UNION SELECT t2.lname ,  t2.fname FROM Artists AS t2 JOIN Sculptures AS t1 ON t1.sculptorID  =  t2.artistID'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1174,
    "db_id": "art_1",
    "question": {
      "id": 1174,
      "db_id": "art_1",
      "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the full name of the artist with a sculpture whose title includes the word \"female\"?[SQL]\\nSELECT title FROM Sculptures WHERE title LIKE '%female%' UNION SELECT t2.lname\t ,  t2.fname FROM Artists AS t2 JOIN Sculptures AS t1 ON t1.sculptorID  =  t2.artistID WHERE title LIKE '%female%' AND LENGTH(title) - LENGTH(replace(title ,  'female' ,  ''))  =  1 <MID>\n    LIMIT 1000;',\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1175,
    "db_id": "art_1",
    "question": {
      "id": 1175,
      "db_id": "art_1",
      "question": "List the names of all distinct paintings in alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of all distinct paintings in alphabetical order.[SQL]\\nSELECT title FROM Paintings WHERE title != '' ORDER BY title ASC'\n        ;"
  },
  {
    "id": 1176,
    "db_id": "art_1",
    "question": {
      "id": 1176,
      "db_id": "art_1",
      "question": "What is the name of every distinct painting in alphabetical order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of every distinct painting in alphabetical order?[SQL]\\nSELECT title FROM Paintings WHERE title != '' ORDER BY title ASC'\n        ;"
  },
  {
    "id": 1177,
    "db_id": "art_1",
    "question": {
      "id": 1177,
      "db_id": "art_1",
      "question": "List the names of all distinct paintings ordered by length."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of all distinct paintings ordered by length.[SQL]\\nSELECT title FROM Paintings WHERE LENGTH(title) ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title) ASC NULLS LAST] SELECT DIST"
  },
  {
    "id": 1178,
    "db_id": "art_1",
    "question": {
      "id": 1178,
      "db_id": "art_1",
      "question": "List the names of all distinct paintings from shortest to longest in height."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of all distinct paintings from shortest to longest in height.[SQL]\\nSELECT title FROM Paintings WHERE height_mm != 'null' ORDER BY height_mm ASC NULLS LAST' <MID>\n    LIMIT 100'\n\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1179,
    "db_id": "art_1",
    "question": {
      "id": 1179,
      "db_id": "art_1",
      "question": "What are the names of both paintings and sculptures created between 1900 and 1950?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of both paintings and sculptures created between 1900 and 1950?[SQL]\\nSELECT title FROM Paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE YEAR BETWEEN 1900 AND 1950'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1180,
    "db_id": "art_1",
    "question": {
      "id": 1180,
      "db_id": "art_1",
      "question": "What are the names of  paintings and scupltures created between 1900 and 1950?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of  paintings and scupltures created between 1900 and 1950?[SQL]\\nSELECT title FROM Paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE YEAR BETWEEN 1900 AND 1950' , 'SELECT title FROM Paintings WHERE YEAR BETWEEN 1900 AND 1950 INTERSECT SELECT title FROM Sculptures WHERE YEAR BETWEEN 1900 AND 1950' ] }] }, { name: '2.', question: 'Which artists were born in 1874?', answers: [{ option: 'Dali', correct: true }, { option: 'Miro', correct: false }, { option: 'Picasso', correct: false }, { option: 'Matisse', correct: false }], correctAnswer: 0 }, { name: '3.', question: 'Which"
  },
  {
    "id": 1181,
    "db_id": "art_1",
    "question": {
      "id": 1181,
      "db_id": "art_1",
      "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles of paintings and sculpture works made by the artist whose id is 222?[SQL]\\nSELECT title FROM Paintings WHERE painterID  =  222 UNION SELECT title FROM Sculptures WHERE sculptorID  =  222'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1182,
    "db_id": "art_1",
    "question": {
      "id": 1182,
      "db_id": "art_1",
      "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of all paintings and sculpture works made by the artist whose id is 222?[SQL]\\nSELECT title FROM Paintings WHERE painterID  =  222 UNION SELECT title FROM Sculptures WHERE sculptorID  =  222'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1183,
    "db_id": "art_1",
    "question": {
      "id": 1183,
      "db_id": "art_1",
      "question": "What is the id of the artist who has the highest number of painting works before 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the artist who has the highest number of painting works before 1900?[SQL]\\nSELECT Artists.medium FROM Artists WHERE Artists.birthYear  <  1900 JOIN Paintings ON Paintings.painterID  =  Artists.artistID GROUP BY Artists.lname HAVING count(*)  =  (SELECT max(count(*) ) FROM Artists WHERE Artists.birthYear  <  1900 JOIN Paintings ON Paintings.painterID  =  Artists.artistID GROUP BY Artists.lname) ORDER BY count(*) DESC LIMIT 1'\n       \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1184,
    "db_id": "art_1",
    "question": {
      "id": 1184,
      "db_id": "art_1",
      "question": "What is the id of the artist with the most paintings before 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the artist with the most paintings before 1900?[SQL]\\nSELECT Artists.medium FROM Artists WHERE Artists.birthYear  <  1900 JOIN Paintings ON Paintings.painterID  =  Artists.artistID GROUP BY Artists.lname HAVING count(*)  =  (SELECT max(count(*) ) FROM Artists WHERE Artists.birthYear  <  1900 JOIN Paintings ON Paintings.painterID  =  Artists.artistID GROUP BY Artists.lname) ORDER BY count(*) DESC LIMIT 1'\n       \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1185,
    "db_id": "art_1",
    "question": {
      "id": 1185,
      "db_id": "art_1",
      "question": "What is the first name of the artist who has the highest number of sculptures?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the first name of the artist who has the highest number of sculptures?[SQL]\\nSELECT title FROM Sculptures WHERE sculptorID  =  (SELECT artistID FROM artists GROUP BY artistID ORDER BY count(*) DESC LIMIT 1) UNION SELECT t2.title FROM paintings AS t1 JOIN sculptures AS t2 ON t1.paintingID  =  t2.sculptureID WHERE t2.sculptorID  =  (SELECT artistID FROM artists GROUP BY artistID ORDER BY count(*) DESC LIMIT 1) UNION SELECT t1.title FROM paintings AS t1 JOIN sculptures AS t2 ON t1.paintingID  =  t2.sculptureID WHERE t2.sculptorID  =  (SELECT artistID FROM artists GROUP BY artistID ORDER BY count(*) DESC LIMIT 1)';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1186,
    "db_id": "art_1",
    "question": {
      "id": 1186,
      "db_id": "art_1",
      "question": "What is the first name of the sculptor with the greatest number of works?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the first name of the sculptor with the greatest number of works?[SQL]\\nSELECT title FROM Sculptures WHERE sculptorID  =  (SELECT artistid FROM artists GROUP BY artistid ORDER BY count(*) DESC LIMIT 1) UNION SELECT t2.title FROM paintings AS t2 JOIN artists AS t1 ON t2.painterid  =  t1.artistid WHERE t1.artistid  =  (SELECT artistid FROM artists GROUP BY artistid ORDER BY count(*) DESC LIMIT 1) UNION SELECT t3.title FROM sculptures AS t3 JOIN artists AS t4 ON t3.sculptorid  =  t4.artistid WHERE t4.artistid  =  (SELECT artistid FROM artists GROUP BY artistid ORDER BY count(*) DESC LIMIT 1) UNION SELECT t5.title FROM sculptures AS t5 JOIN artists AS t6 ON t5.sculptorid  =  t6.artistid WHERE t"
  },
  {
    "id": 1187,
    "db_id": "art_1",
    "question": {
      "id": 1187,
      "db_id": "art_1",
      "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of paintings whose width is less than 600 or height is larger than 800?[SQL]\\nSELECT title FROM Paintings WHERE width_mm  <  600 OR height_mm >  800'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1188,
    "db_id": "art_1",
    "question": {
      "id": 1188,
      "db_id": "art_1",
      "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[SQL]\\nSELECT title FROM Paintings WHERE width_mm  <  600 OR height_mm  >  800'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1189,
    "db_id": "art_1",
    "question": {
      "id": 1189,
      "db_id": "art_1",
      "question": "Which locations have paintings created before 1885 or after 1930?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which locations have paintings created before 1885 or after 1930?[SQL]\\nSELECT location FROM Paintings WHERE YEAR  <  1885 UNION SELECT location FROM Paintings WHERE YEAR  >  1930'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1190,
    "db_id": "art_1",
    "question": {
      "id": 1190,
      "db_id": "art_1",
      "question": "What locations have works painted before 1885 or after 1930?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What locations have works painted before 1885 or after 1930?[SQL]\\nSELECT location FROM Paintings WHERE YEAR  <  1885 UNION SELECT location FROM Paintings WHERE YEAR  >  1930'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1191,
    "db_id": "art_1",
    "question": {
      "id": 1191,
      "db_id": "art_1",
      "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the ids of paintings whose height is bigger than 500 and less than 2000?[SQL]\\nSELECT Paintings.title FROM Paintings WHERE Painting.height_mm  >  500 AND Painting.height_mm  <  2000'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1192,
    "db_id": "art_1",
    "question": {
      "id": 1192,
      "db_id": "art_1",
      "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of paintings that are taller than 500 and shorter than 2000?[SQL]\\nSELECT Paintings.title FROM Paintings WHERE Painting.height_mm  >  500 AND Painting.width_mm  <  2000'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1193,
    "db_id": "art_1",
    "question": {
      "id": 1193,
      "db_id": "art_1",
      "question": "Which locations have paintings in the mediums of on panel and on canvas?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which locations have paintings in the mediums of on panel and on canvas?[SQL]\\nSELECT location FROM Paintings WHERE medium  =  'on panel' INTERSECT SELECT location FROM Paintings WHERE medium  =  'on canvas' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1194,
    "db_id": "art_1",
    "question": {
      "id": 1194,
      "db_id": "art_1",
      "question": "What are the locations that have paintings in the mediums of on panels and on canvas?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the locations that have paintings in the mediums of on panels and on canvas?[SQL]\\nSELECT location FROM Paintings WHERE medium  =  'on panel' UNION SELECT location FROM Paintings WHERE medium  =  'canvas' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1195,
    "db_id": "art_1",
    "question": {
      "id": 1195,
      "db_id": "art_1",
      "question": "Find the locations that have paintings created before 1885 and after 1930?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the locations that have paintings created before 1885 and after 1930?[SQL]\\nSELECT location FROM Paintings WHERE YEAR  <  1885 UNION SELECT location FROM Paintings WHERE YEAR  >  1930'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1196,
    "db_id": "art_1",
    "question": {
      "id": 1196,
      "db_id": "art_1",
      "question": "What are the locations that have works painted before 1885 and after 1930?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the locations that have works painted before 1885 and after 1930?[SQL]\\nSELECT location FROM Paintings WHERE YEAR  <  1885 UNION SELECT location FROM Paintings WHERE YEAR  >  1930'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1197,
    "db_id": "art_1",
    "question": {
      "id": 1197,
      "db_id": "art_1",
      "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average height and width of paintings that are oil medium in the place of gallery 241?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 241' GROUP BY title HAVING avg(width_mm) >  0 AND avg(height_mm) >  0] SELECT avg(width_mm) ,  avg(height_mm) FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 241' GROUP BY title HAVING avg(width_mm) >  0 AND avg(height_mm) >  0] SELECT count(*) FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 241' GROUP BY title HAVING avg(width_mm) >  0 AND avg(height_mm) >  0] SELECT count(*) FROM Paintings WHERE medium  =  'oil'"
  },
  {
    "id": 1198,
    "db_id": "art_1",
    "question": {
      "id": 1198,
      "db_id": "art_1",
      "question": "What is the average height and width of paintings that are oil medium in gallery 241?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average height and width of paintings that are oil medium in gallery 241?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 241' ON average' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1199,
    "db_id": "art_1",
    "question": {
      "id": 1199,
      "db_id": "art_1",
      "question": "What are the maximum height and id of paintings painted before 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum height and id of paintings painted before 1900?[SQL]\\nSELECT title, max(height_mm) ,  paintingID FROM paintings WHERE year  <  1900 GROUP BY title'\n        , 'title' : 'Max Height' ,  'type' : 'plot'}]\n    \n    , 'task2' : [{'question': 'What are the average height and id of paintings painted after 1950?', 'answer': 'SELECT avg(height_mm) ,  paintingID FROM paintings WHERE YEAR  >  1950' ,  'type' : 'data'} , {'question': 'What are the average height and id of paintings painted after 1950?', 'answer': 'SELECT avg(height_mm) ,  paintingID FROM paintings WHERE YEAR  >  1950' ,  'type' : 'data'} , {'question': 'What are the average height and id of paint"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": {
      "id": 1200,
      "db_id": "art_1",
      "question": "What is the height and id of the tallest painting created before 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the height and id of the tallest painting created before 1900?[SQL]\\nSELECT title, height_mm ,  paintingID FROM paintings WHERE YEAR  <  1900 ORDER BY height_mm DESC LIMIT 1'\n        , '432', 'TALL PAINTING BEFORE 1900'],\n   \n      \n     \n   \n    \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": {
      "id": 1201,
      "db_id": "art_1",
      "question": "What are the maximum height and width of paintings for each year?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum height and width of paintings for each year?[SQL]\\nSELECT title, YEAR ,  max(height_mm) ,  max(width_mm) FROM paintings GROUP BY YEAR ORDER BY YEAR ASC'\n        , '245.5' ,  '361.8' ,  '1970' ,  '245.5' ,  '361.8' ,  '1975' ,  '245.5' ,  '361.8' ,  '1980' ,  '245.5' ,  '361.8' ,  '1985' ,  '245.5' ,  '361.8' ,  '1990' ,  '245.5' ,  '361.8' ,  '1995' ,  '245.5'"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": {
      "id": 1202,
      "db_id": "art_1",
      "question": "What are largest height and width dimensions for paintings in each year?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are largest height and width dimensions for paintings in each year?[SQL]\\nSELECT title, height_mm ,  width_mm ,  YEAR FROM paintings ORDER BY YEAR DESC LIMIT 1'\n        , '245x300' : 'SELECT max(width_mm) ,  max(height_mm) FROM paintings'\n    , '245x300': 'SELECT max(width_mm) ,  max(height_mm) FROM paintings'\n    , '245x300': 'SELECT max(width_mm) ,  max(height_mm) FROM paintings'\n    , '245x300': 'SELECT max(width_mm) ,  max(height_mm) FROM paintings'\n    , '245x300': 'SELECT max(width_mm) ,  max(height_mm) FROM paintings'\n    , '245x300':"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": {
      "id": 1203,
      "db_id": "art_1",
      "question": "What are the average height and width of paintings grouped by painters and ordered by name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average height and width of paintings grouped by painters and ordered by name?[SQL]\\nSELECT title, AVG(height_mm) ,  AVG(width_mm) ,  T1.fname ,  T1.lname FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T1.painterID ORDER BY T1.fname ASC'\n        , 'SELECT title ,  AVG(height_mm) ,  AVG(width_mm) FROM paintings GROUP BY null'\n    , 'SELECT title ,  AVG(height_mm) ,  AVG(width_mm) FROM paintings GROUP BY null ORDER BY title ASC'\n    , 'SELECT title ,  AVG(height_mm) ,  AVG(width_mm) FROM paintings GROUP BY null ORDER BY title DESC'\n    , 'SELECT title ,  AVG(height_mm) ,  AVG("
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": {
      "id": 1204,
      "db_id": "art_1",
      "question": "Find the average height and width of paintings grouped by painters and ordered by name"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average height and width of paintings grouped by painters and ordered by name[SQL]\\nSELECT title, AVG(height_mm) ,  AVG(width_mm) ,  painterid FROM paintings GROUP BY painterid ORDER BY t1.lname ,  t1.fname'\n        , 'painters' : {1: {'height': 453.25 ,  'width': 678.75 ,  'painters': ['Claude Monet']}} , 2: {'height': 305.5 ,  'width': 415.75 ,  'painters': ['Edgar Degas']}} , 3: {'height': 396.25 ,  'width': 597.75 ,  'painters': ['Pablo Picasso']}}}}]}}]}\n\n    , 'answer': [{'test_case_number': 1 ,  'expected_"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": {
      "id": 1205,
      "db_id": "art_1",
      "question": "Find the first names and number of works of all artists who have at least two paintings?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the first names and number of works of all artists who have at least two paintings?[SQL]\\nSELECT title FROM Paintings WHERE painterID  =  ( SELECT painterID FROM Paintings GROUP BY painterID HAVING count(*)  >=  2 ) UNION SELECT t1.fname FROM Artists AS t1 JOIN Paintings AS t2 ON t1.artistID  =  t2.painterID GROUP BY t2.painterID HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": {
      "id": 1206,
      "db_id": "art_1",
      "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first names of all artists who have at least two paintings, and how many works did each create?[SQL]\\nSELECT title FROM Paintings WHERE painterID  =  1 UNION SELECT t2.title FROM Paintings AS t2 JOIN Artists AS t1 ON t2.painterID  =  t1.artistID GROUP BY t1.fname HAVING COUNT(*)  >=  2' , 'SELECT t1.fname ,  COUNT(*) FROM Paintings AS t2 JOIN Artists AS t1 ON t2.painterID  =  t1.artistID GROUP BY t1.fname' ]}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": {
      "id": 1207,
      "db_id": "art_1",
      "question": "Find the death year of all artists who have at most 3 paintings?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the death year of all artists who have at most 3 paintings?[SQL]\\nSELECT title FROM Artists WHERE deathyear  <=  (SELECT max(deathyear) FROM Artists) AND artistid IN (SELECT painterid FROM Paintings GROUP BY painterid HAVING count(*)  <=  3) UNION SELECT t1.title FROM Sculptures AS t1 JOIN Artists AS t2 ON t1.sculptorid  =  t2.artistid WHERE t2.deathyear  <=  (SELECT max(deathyear) FROM Artists) AND t2.artistid IN (SELECT painterid FROM Paintings GROUP BY painterid HAVING count(*)  <=  3) ORDER BY title ASC'\n       \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": {
      "id": 1208,
      "db_id": "art_1",
      "question": "When did each artist who created less than 4 paintings die ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, When did each artist who created less than 4 paintings die ?[SQL]\\nSELECT title FROM Artists WHERE artistID NOT IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING count(*)  <  4) AND deathyear IS NOT NULL ORDER BY deathyear'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": {
      "id": 1209,
      "db_id": "art_1",
      "question": "Find the death year of the artist who made the least number of sculptures?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the death year of the artist who made the least number of sculptures?[SQL]\\nSELECT title FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY count(*) LIMIT 1) AND deathyear != 'null' UNION SELECT '' AS title; <MID>\n    ORDER BY title;"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": {
      "id": 1210,
      "db_id": "art_1",
      "question": "When did the artist who made the fewest sculptures die?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, When did the artist who made the fewest sculptures die?[SQL]\\nSELECT title FROM Artists WHERE deathYear  =  (SELECT min(deathYear) FROM Artists GROUP BY deathYear ORDER BY count(*) ASC LIMIT 1) AND artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Unknown' WHERE NULL = (SELECT tiltle FROM Artists WHERE deathYear  =  (SELECT min(deathYear) FROM Artists GROUP BY deathYear ORDER BY count(*) ASC LIMIT 1) AND artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY count(*) DESC LIMIT 1)) LIMIT 1; <MID>\n    ORDER BY title;"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": {
      "id": 1211,
      "db_id": "art_1",
      "question": "What are the id and height of the painting with the longest width in gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id and height of the painting with the longest width in gallery 240?[SQL]\\nSELECT title FROM Paintings WHERE width_mm  =  (SELECT max(width_mm) FROM paintings WHERE location  =  'gallery240') UNION SELECT title FROM Paintings WHERE width_mm  =  (SELECT max(width_mm) FROM paintings WHERE location != 'gallery240') ORDER BY height_mm DESC LIMIT 1' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": {
      "id": 1212,
      "db_id": "art_1",
      "question": "Tell me the height and id number of the widest painting in gallery 240."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Tell me the height and id number of the widest painting in gallery 240.[SQL]\\nSELECT title \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": {
      "id": 1213,
      "db_id": "art_1",
      "question": "What are the ids of the paintings created before all of the paintings in gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of the paintings created before all of the paintings in gallery 240?[SQL]\\nSELECT sculptureID FROM Sculptures WHERE location  =  'gallery 240' UNION SELECT paintingID FROM Paintings WHERE location != 'gallery 240' AND year  <  (SELECT max(year) FROM Paintings WHERE location != 'gallery 240')'\n    ;"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": {
      "id": 1214,
      "db_id": "art_1",
      "question": "What is the id of every painting created before the oldest painting in gallery 240?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of every painting created before the oldest painting in gallery 240?[SQL]\\nSELECT title FROM Paintings WHERE YEAR  <  (SELECT min(YEAR) FROM Paintings WHERE location  =  'gallery 240') UNION SELECT paintingID FROM Paintings WHERE YEAR  <  (SELECT min(YEAR) FROM Paintings WHERE location  =  'gallery 240')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": {
      "id": 1215,
      "db_id": "art_1",
      "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[SQL]\\nSELECT title FROM Paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900) UNION SELECT title FROM Paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings) ORDER BY title ASC'\n       \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": {
      "id": 1216,
      "db_id": "art_1",
      "question": "List the ids of all paintings that are taller than the longest painting created after 1900."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the ids of all paintings that are taller than the longest painting created after 1900.[SQL]\\nSELECT title FROM Paintings WHERE height_mm  >  (SELECT max(height_mm) FROM Paintings WHERE birthYear  >  1900) AS TALL_PAINTINGS WHERE height_mm  >  (SELECT max(height_mm) FROM Paintings WHERE birthYear  >  1900) AS TALL_PAINTINGS'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": {
      "id": 1217,
      "db_id": "art_1",
      "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the top 3 artists who have the biggest number of painting works whose medium is oil?[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' UNION SELECT t1.title FROM Paintings AS t1 JOIN Paintings AS t2 ON t1.year  =  t2.year WHERE t1.medium  =  'oil' ORDER BY t2.title DESC LIMIT 3' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": {
      "id": 1218,
      "db_id": "art_1",
      "question": "Which artists have the most paintings in oil?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which artists have the most paintings in oil?[SQL]\\nSELECT Artists.location FROM Artists WHERE name IN (SELECT T1.name FROM PAINTINGS AS T1 JOIN ARTISTS AS T2 ON T1.painterID  =  T2.artistID WHERE T1.medium  =  'oil') GROUP BY Artists.lname ORDER BY count(*) DESC LIMIT 1'\n    ;"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": {
      "id": 1219,
      "db_id": "art_1",
      "question": "List the painting id, location and title of the medium oil paintings ordered by year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the painting id, location and title of the medium oil paintings ordered by year.[SQL]\\nSELECT title FROM Paintings WHERE medium  =  'oil' ORDER BY YEAR DESC' <MID>\n    LIMIT 50'\n    ;"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": {
      "id": 1220,
      "db_id": "art_1",
      "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Order all of the oil paintings by date of creation and list their ids, locations, and titles.[SQL]\\nSELECT location \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": {
      "id": 1221,
      "db_id": "art_1",
      "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the year, location and title of paintings whose height is longer than 1000 ordered by title.[SQL]\\nSELECT title FROM Paintings WHERE height_mm  >  1000 ORDER BY title ASC NULLS LAST'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": {
      "id": 1222,
      "db_id": "art_1",
      "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[SQL]\\nSELECT title FROM Paintings WHERE height_mm  >  1000 ORDER BY title ASC NULLS LAST'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": {
      "id": 1223,
      "db_id": "art_1",
      "question": "Find the first and last name of artists who have painting but no sculpture work."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the first and last name of artists who have painting but no sculpture work.[SQL]\\nSELECT title FROM Paintings WHERE painterID IN (SELECT painterID FROM Sculptures) UNION SELECT t2.lname ,  t2.fname FROM Artists AS t1 JOIN Paintings AS t2 ON t1.artistID  =  t2.painterID EXCEPT SELECT t3.lname ,  t3.fname FROM Artists AS t1 JOIN Sculptures AS t3 ON t1.artistID  =  t3.sculptorID'\n        ;"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": {
      "id": 1224,
      "db_id": "art_1",
      "question": "What are the first and last names of the artists who did not sculpt but could paint."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first and last names of the artists who did not sculpt but could paint.[SQL]\\nSELECT location FROM Artists WHERE artistid NOT IN (SELECT sculptorid FROM Sculptures) AND artistid NOT IN (SELECT painterid FROM Paintings) ORDER BY lname LIMIT 10'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": {
      "id": 1225,
      "db_id": "art_1",
      "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the locations that have paintings before 1885 and no work with medium on canvas?[SQL]\\nSELECT location FROM Paintings WHERE YEAR  <  1885 EXCEPT SELECT location FROM Paintings WHERE medium  =  'canvas' <MID>\n    ORDER BY title;"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": {
      "id": 1226,
      "db_id": "art_1",
      "question": "Where do you have paintings that were created before 1885 that are not on canvas?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Artists (\n  artistID INTEGER,\n  lname TEXT,\n  fname TEXT,\n  birthYear INTEGER,\n  deathYear INTEGER,\n  PRIMARY KEY (artistID)\n)\nCREATE TABLE Paintings (\n  paintingID INTEGER,\n  title TEXT,\n  year INTEGER,\n  height_mm INTEGER,\n  width_mm INTEGER,\n  medium TEXT,\n  mediumOn TEXT,\n  location TEXT,\n  painterID INTEGER,\n  PRIMARY KEY (paintingID),\n  FOREIGN KEY (painterID) REFERENCES Artists (artistID)\n)\nCREATE TABLE Sculptures (\n  sculptureID INTEGER,\n  title TEXT,\n  year INTEGER,\n  medium TEXT,\n  location TEXT,\n  sculptorID INTEGER,\n  PRIMARY KEY (sculptureID),\n  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Where do you have paintings that were created before 1885 that are not on canvas?[SQL]\\nSELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  <  1885' UNION SELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  >  1885' UNION SELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  =  1885' UNION SELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  !=  1885' UNION SELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  <=  1885' UNION SELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  >=  1885' UNION SELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  =  1885' UNION SELECT title FROM Paintings WHERE medium != 'Canvas' AND YEAR  !=  1885' UNION SELECT title FROM Paintings WHERE medium"
  },
  {
    "id": 1227,
    "db_id": "car_road_race",
    "question": {
      "id": 1227,
      "db_id": "car_road_race",
      "question": "How many races are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many races are there?[SQL]\\nSELECT Driver_ID FROM race WHERE Drivrer_ID != 'null' GROUP BY Drivrer_ID HAVING count(*)  =  2' <MID>\n    LIMIT 100'\n    ;"
  },
  {
    "id": 1228,
    "db_id": "car_road_race",
    "question": {
      "id": 1228,
      "db_id": "car_road_race",
      "question": "Count the number of races."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of races.[SQL]\\nSELECT Driver_ID FROM race WHERE Drivrer_ID != 'null' GROUP BY Drivrer_ID ORDER BY count(*) DESC LIMIT 10'\n       \n   \n   \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1229,
    "db_id": "car_road_race",
    "question": {
      "id": 1229,
      "db_id": "car_road_race",
      "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[SQL]\\nSELECT Winning_driver FROM race WHERE Report = 'True' ORDER BY Winning_team ASC NULLS LAST' <MID>\n    LIMIT 100'\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1230,
    "db_id": "car_road_race",
    "question": {
      "id": 1230,
      "db_id": "car_road_race",
      "question": "What are the winning drivers and teams of races, ordered alphabetically by team?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the winning drivers and teams of races, ordered alphabetically by team?[SQL]\\nSELECT Winning_driver FROM race WHERE pole_position  =  'Yes' UNION SELECT Winning_team FROM race WHERE pole_position  =  'No' ORDER BY Winning_driver ASC'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1231,
    "db_id": "car_road_race",
    "question": {
      "id": 1231,
      "db_id": "car_road_race",
      "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which winning drivers of races had pole position that is not \"Junior Strous\"?[SQL]\\nSELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous' <MID>\n    LIMIT 100'\n\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 1232,
    "db_id": "car_road_race",
    "question": {
      "id": 1232,
      "db_id": "car_road_race",
      "question": "Return the winning drivers of races who did not have the pole position of Junior Strous."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the winning drivers of races who did not have the pole position of Junior Strous.[SQL]\\nSELECT Winning_driver FROM race WHERE pole_position != 'Junior Strous' <MID>\n    LIMIT 100'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1233,
    "db_id": "car_road_race",
    "question": {
      "id": 1233,
      "db_id": "car_road_race",
      "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who are the constructors of drivers sorted by drivers' age in ascending order?[SQL]\\nSELECT Driver_ID FROM driver WHERE Constructor IS NOT NULL ORDER BY Age ASC'\n        ;"
  },
  {
    "id": 1234,
    "db_id": "car_road_race",
    "question": {
      "id": 1234,
      "db_id": "car_road_race",
      "question": "Return the different constructors of drivers, ordered by age ascending."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the different constructors of drivers, ordered by age ascending.[SQL]\\nSELECT Driver_ID FROM driver WHERE Constructor != '' ORDER BY Age ASC'\n        ;"
  },
  {
    "id": 1235,
    "db_id": "car_road_race",
    "question": {
      "id": 1235,
      "db_id": "car_road_race",
      "question": "What are the distinct entrant types of drivers aged 20 or older?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct entrant types of drivers aged 20 or older?[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  >=  20 GROUP BY Entrant ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1236,
    "db_id": "car_road_race",
    "question": {
      "id": 1236,
      "db_id": "car_road_race",
      "question": "Give the different entrant types for drivers at least 20 years old."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the different entrant types for drivers at least 20 years old.[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  >=  20 GROUP BY Entrant ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1237,
    "db_id": "car_road_race",
    "question": {
      "id": 1237,
      "db_id": "car_road_race",
      "question": "What are the maximum and minimum age of driver?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum age of driver?[SQL]\\nSELECT Fastest_Lap FROM race WHERE Race_Name = 'Fastest Lap' UNION SELECT max(Age) , min(Age) FROM driver'\n   \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1238,
    "db_id": "car_road_race",
    "question": {
      "id": 1238,
      "db_id": "car_road_race",
      "question": "Return the maximum and minimum age across drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the maximum and minimum age across drivers.[SQL]\\nSELECT Fastest_Lap FROM race WHERE Report = 'Good' UNION SELECT max(Age) , min(Age) FROM driver'\n        GROUP BY Fastest_Lap;"
  },
  {
    "id": 1239,
    "db_id": "car_road_race",
    "question": {
      "id": 1239,
      "db_id": "car_road_race",
      "question": "How many different engines are used by drivers with age older than 30 or younger than 20?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different engines are used by drivers with age older than 30 or younger than 20?[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  >  30 OR Age  <  20 GROUP BY Engine HAVING count(*)  >=  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1240,
    "db_id": "car_road_race",
    "question": {
      "id": 1240,
      "db_id": "car_road_race",
      "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different engines used by drivers who had an age either over 30 or under 20.[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  >  30 OR Age  <  20 GROUP BY Engine ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1241,
    "db_id": "car_road_race",
    "question": {
      "id": 1241,
      "db_id": "car_road_race",
      "question": "List all names of drivers in descending alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all names of drivers in descending alphabetical order.[SQL]\\nSELECT driver.Driver_ID, driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n        ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_"
  },
  {
    "id": 1242,
    "db_id": "car_road_race",
    "question": {
      "id": 1242,
      "db_id": "car_road_race",
      "question": "What are the names of drivers, ordered descending alphabetically?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of drivers, ordered descending alphabetically?[SQL]\\nSELECT driver.Driver_ID, driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n        ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_ID ,  driver.Driver_name FROM driver ORDER BY driver.Driver_name DESC'\n    ,'SELECT driver.Driver_"
  },
  {
    "id": 1243,
    "db_id": "car_road_race",
    "question": {
      "id": 1243,
      "db_id": "car_road_race",
      "question": "Please show the names of drivers and the names of races they participate in."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the names of drivers and the names of races they participate in.[SQL]\\nSELECT Driver_ID FROM race WHERE Drivre_ID  =  1 UNION SELECT T2.Drivre_ID FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Drivre_ID'\n        ;"
  },
  {
    "id": 1244,
    "db_id": "car_road_race",
    "question": {
      "id": 1244,
      "db_id": "car_road_race",
      "question": "What are the names of drivers and the names of the races they took part in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of drivers and the names of the races they took part in?[SQL]\\nSELECT Driver_ID FROM driver WHERE Driver_name  =  'Kimi Raikkonen' UNION SELECT T2.Road FROM race AS T1 JOIN driver AS T2 ON T1.driver_id  =  T2.driver_id WHERE T1.Race_Name  =  'Monza' ORDER BY T1.Road ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1245,
    "db_id": "car_road_race",
    "question": {
      "id": 1245,
      "db_id": "car_road_race",
      "question": "Please show the names of drivers and the number of races they participate in."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the names of drivers and the number of races they participate in.[SQL]\\nSELECT Driver_ID FROM race WHERE Driver_ID IS NOT NULL GROUP BY Driver_ID ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1246,
    "db_id": "car_road_race",
    "question": {
      "id": 1246,
      "db_id": "car_road_race",
      "question": "How many races did each driver participate in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many races did each driver participate in?[SQL]\\nSELECT Driver_ID FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver) GROUP BY Driver_ID ORDER BY count(*) DESC LIMIT 10'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1247,
    "db_id": "car_road_race",
    "question": {
      "id": 1247,
      "db_id": "car_road_race",
      "question": "Please show the age of the driver who participated in the most number of races."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the age of the driver who participated in the most number of races.[SQL]\\nSELECT Driver_ID FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY count(*) DESC LIMIT 1)',\n        LIMIT : 100,\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1248,
    "db_id": "car_road_race",
    "question": {
      "id": 1248,
      "db_id": "car_road_race",
      "question": "What is the age of the driver who raced in the most races?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the age of the driver who raced in the most races?[SQL]\\nSELECT Driver_ID FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY count(*) DESC LIMIT 1) AND DRIVER_ID IN (SELECT max(DRIVER_ID) FROM race)', '25')]\n\n    LIMIT = 4\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1249,
    "db_id": "car_road_race",
    "question": {
      "id": 1249,
      "db_id": "car_road_race",
      "question": "Please show the names and ages of the drivers who participated in at least two races."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the names and ages of the drivers who participated in at least two races.[SQL]\\nSELECT Driver_ID FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING count(*)  >=  2) ORDER BY Driver_ID ASC'\n        ;"
  },
  {
    "id": 1250,
    "db_id": "car_road_race",
    "question": {
      "id": 1250,
      "db_id": "car_road_race",
      "question": "What are the names and ages of drivers who raced in two or more races?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ages of drivers who raced in two or more races?[SQL]\\nSELECT Driver_ID FROM race WHERE Driver_ID IN(SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING count(*)  >=  2) ORDER BY age DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1251,
    "db_id": "car_road_race",
    "question": {
      "id": 1251,
      "db_id": "car_road_race",
      "question": "Please list the names of races with drivers aged 26 or older participating."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please list the names of races with drivers aged 26 or older participating.[SQL]\\nSELECT Driver_ID FROM race WHERE Drivr_ID IN(SELECT T1.Drivr_ID FROM race AS T1 JOIN driver AS T2 ON T1.Drivr_ID  =  T2.Driver_ID WHERE T2.Age  >=  26) <MID>\n    LIMIT 3'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1252,
    "db_id": "car_road_race",
    "question": {
      "id": 1252,
      "db_id": "car_road_race",
      "question": "What are the names of races in which drivers 26 or older took part?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of races in which drivers 26 or older took part?[SQL]\\nSELECT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age  >=  26) <MID>\n    LIMIT 100'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1253,
    "db_id": "car_road_race",
    "question": {
      "id": 1253,
      "db_id": "car_road_race",
      "question": "List the names of drivers whose constructor is not \"Bugatti\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of drivers whose constructor is not \"Bugatti\".[SQL]\\nSELECT driver.Driver_ID FROM driver WHERE constructor != 'Bugatti' AND driver.constructor != 'null' AND driver.constructor != '' AND driver.constructor IS NOT NULL AND driver.constructor != 'Red Bull' AND driver.constructor != 'null' AND driver.constructor != '' AND driver.constructor IS NOT NULL AND driver.constructor != 'Williams' AND driver.constructor != 'null' AND driver.constructor != '' AND driver.constructor IS NOT NULL AND driver.constructor != 'Alfa Romeo' AND driver.constructor != 'null' AND driver.constructor != '' AND driver.constructor IS NOT NULL AND driver.constructor != 'McLaren' AND driver.constructor != 'null' AND driver.constructor != '' AND driver.constructor IS NOT NULL AND driver.constructor != ' Ferrari' AND driver.constructor != 'null' AND driver.constructor != '' AND driver.constructor IS NOT NULL AND driver.constructor != 'Mercedes' AND"
  },
  {
    "id": 1254,
    "db_id": "car_road_race",
    "question": {
      "id": 1254,
      "db_id": "car_road_race",
      "question": "What are the names od drivers who did not have the constructor Bugatti?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names od drivers who did not have the constructor Bugatti?[SQL]\\nSELECT Driver_ID FROM driver WHERE Constructor != 'Bugatti' AND Entrant = 'Yes' EXCEPT SELECT Driver_ID FROM race WHERE fastest_lap  =  'Fastest' AND winning_driver  =  'Fastest' AND winning_team  =  'Team' AND report  =  'Report' AND pole_position  =  'Pole' AND race_name  =  'Race' AND driver_id IN (SELECT driver_id FROM race WHERE fastest_lap  =  'Fastest' AND winning_driver  =  'Fastest' AND winning_team  =  'Team' AND report  =  'Report' AND pole_position  =  'Pole' AND race_name  =  'Race')'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1255,
    "db_id": "car_road_race",
    "question": {
      "id": 1255,
      "db_id": "car_road_race",
      "question": "List different constructors and the number of drivers that use each constructor."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List different constructors and the number of drivers that use each constructor.[SQL]\\nSELECT Driver_ID FROM driver WHERE Constructor != 'null' GROUP BY Constructor ORDER BY count(*) DESC LIMIT 3'\n   \n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1256,
    "db_id": "car_road_race",
    "question": {
      "id": 1256,
      "db_id": "car_road_race",
      "question": "How many drivers use each constructor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers use each constructor?[SQL]\\nSELECT Driver_ID FROM driver WHERE Constructor  =  'Williams' GROUP BY Constructor HAVING count(*)  =  2' <MID>\n    LIMIT 100'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   "
  },
  {
    "id": 1257,
    "db_id": "car_road_race",
    "question": {
      "id": 1257,
      "db_id": "car_road_race",
      "question": "List the most common type of engine used by drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the most common type of engine used by drivers.[SQL]\\nSELECT race.Pole_Position FROM race WHERE race.Pole_Position LIKE '%Engine%' GROUP BY race.Pole_Position ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 1258,
    "db_id": "car_road_race",
    "question": {
      "id": 1258,
      "db_id": "car_road_race",
      "question": "What is the most common type of engine?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common type of engine?[SQL]\\nSELECT Fastest_Lap FROM race WHERE Fastest_Lap  =  'Turbo' GROUP BY Fastest_Lap ORDER BY COUNT(*) DESC LIMIT 1' <MID>\n    LIMIT 1'\n    ;"
  },
  {
    "id": 1259,
    "db_id": "car_road_race",
    "question": {
      "id": 1259,
      "db_id": "car_road_race",
      "question": "List the types of engines that are used by at least two drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the types of engines that are used by at least two drivers.[SQL]\\nSELECT Driver_ID FROM driver WHERE Engine IN(SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2) ORDER BY Driver_ID ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1260,
    "db_id": "car_road_race",
    "question": {
      "id": 1260,
      "db_id": "car_road_race",
      "question": "What are the engine types that are used by two or more drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the engine types that are used by two or more drivers?[SQL]\\nSELECT Driver_ID FROM driver WHERE Engine IN(SELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2) ORDER BY Driver_ID ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1261,
    "db_id": "car_road_race",
    "question": {
      "id": 1261,
      "db_id": "car_road_race",
      "question": "List the names of drivers that do not participate in any race."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of drivers that do not participate in any race.[SQL]\\nSELECT Driver_ID FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race)')\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1262,
    "db_id": "car_road_race",
    "question": {
      "id": 1262,
      "db_id": "car_road_race",
      "question": "What are names of drivers who did not take part in a race?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are names of drivers who did not take part in a race?[SQL]\\nSELECT Driver_ID FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race) AND driver_name != 'null' AND constructor != 'null' AND chassis != 'null' AND engine != 'null' AND age != -1' > drivers_who_did_not_take_part_in_a_race.sql' <MID>_ID FROM race WHERE driver_id NOT IN (SELECT driver_id FROM driver) AND race_name != 'null' AND reporting_format != 'null' AND fastest_lap != 'null' AND winning_driver != 'null' AND winning_team != 'null') AS T1 ON T0.road = T1.road' > drivers_who_took_part_in_at_least_one_race.sql'\n\n    LIMIT 200' > drivers_who_took_part_in_at_least_"
  },
  {
    "id": 1263,
    "db_id": "car_road_race",
    "question": {
      "id": 1263,
      "db_id": "car_road_race",
      "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  <  20 INTERSECT SELECT Driver_ID FROM driver WHERE Age  >  30'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1264,
    "db_id": "car_road_race",
    "question": {
      "id": 1264,
      "db_id": "car_road_race",
      "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[SQL]\\nSELECT Driver_ID FROM driver WHERE age  <  20 INTERSECT SELECT Driver_ID FROM driver WHERE age  >  30'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1265,
    "db_id": "car_road_race",
    "question": {
      "id": 1265,
      "db_id": "car_road_race",
      "question": "Find the teams that won more than once."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the teams that won more than once.[SQL]\\nSELECT Driver_ID FROM race WHERE Winning_team  =  'Team1' GROUP BY Drivers_ID HAVING count(*)  >  1 UNION SELECT Drivers_ID FROM race WHERE Winning_team  =  'Team2' GROUP BY Drivers_ID HAVING count(*)  >  1 UNION SELECT Drivers_ID FROM race WHERE Winning_team  =  'Team3' GROUP BY Drivers_ID HAVING count(*)  >  1 UNION SELECT Drivers_ID FROM race WHERE Winning_team  =  'Team4' GROUP BY Drivers_ID HAVING count(*)  >  1 UNION SELECT Drivers_ID FROM race WHERE Winning_team  =  'Team5' GROUP BY Drivers_ID HAVING count(*)  >  1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1266,
    "db_id": "car_road_race",
    "question": {
      "id": 1266,
      "db_id": "car_road_race",
      "question": "Which teams won more than 1 race?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which teams won more than 1 race?[SQL]\\nSELECT Winning_team FROM race WHERE reporting = 'True' GROUP BY Winning_team HAVING count(*)  >  1' <MID>\n    LIMIT 3'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1267,
    "db_id": "car_road_race",
    "question": {
      "id": 1267,
      "db_id": "car_road_race",
      "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.[SQL]\\nSELECT Driver_ID FROM race WHERE Pole_Position  =  'James Hinchcliffe' INTERSECT SELECT Driveer_ID FROM race WHERE Pole_Position  =  'Carl Skerlong' <MID>\n    LIMIT 1000;\n    ;"
  },
  {
    "id": 1268,
    "db_id": "car_road_race",
    "question": {
      "id": 1268,
      "db_id": "car_road_race",
      "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[SQL]\\nSELECT driver.Driver_ID FROM race WHERE pole_position  =  'James Hinchcliffe' INTERSECT SELECT driver.Driver_ID FROM race WHERE pole_position  =  'Carl Skerlong' <MID>\n    LIMIT 1000;\n    ;"
  },
  {
    "id": 1269,
    "db_id": "car_road_race",
    "question": {
      "id": 1269,
      "db_id": "car_road_race",
      "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, find the name of drivers who were never in \"James Hinchcliffe\" pole position before.[SQL]\\nSELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID NOT IN (SELECT race.Driver_ID FROM race WHERE race.Pole_Position  =  'James Hinchcliffe') ORDER BY driver.Driver_ID ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1270,
    "db_id": "car_road_race",
    "question": {
      "id": 1270,
      "db_id": "car_road_race",
      "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Driver_Name\" text,\n\"Entrant\" text,\n\"Constructor\" text,\n\"Chassis\" text,\n\"Engine\" text,\n\"Age\" int,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"race\" (\n\"Road\" int,\n\"Driver_ID\" int,\n\"Race_Name\" text,\n\"Pole_Position\" text,\n\"Fastest_Lap\" text,\n\"Winning_driver\" text,\n\"Winning_team\" text,\n\"Report\" text,\nPRIMARY KEY (\"Road\"),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of drivers except for those who had the pole position James Hinchcliffe?[SQL]\\nSELECT driver.Driver_ID FROM race WHERE race.pole_position != 'James Hinchcliffe' JOIN driver ON race.driver_id = driver.driver_id  '\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1271,
    "db_id": "country_language",
    "question": {
      "id": 1271,
      "db_id": "country_language",
      "question": "How many languages are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many languages are there?[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.overall_score  >  2.5 UNION SELECT official_languages.country_id FROM official_languages WHERE official_languages.language_id  =  1 INTERSECT SELECT official_languages.country_id FROM official_languages WHERE official_languages.language_id  =  2 INTERSECT SELECT official_languages.country_id FROM official_languages WHERE official_languages.language_id  =  3 INTERSECT SELECT official_languages.country_id FROM official_languages WHERE official_languages.language_id  =  4 INTERSECT SELECT official_languages.country_id FROM official_languages WHERE official_languages.language_id  =  5 INTERSECT SELECT official_languages.country_id FROM official_languages WHERE official_languages.language_"
  },
  {
    "id": 1272,
    "db_id": "country_language",
    "question": {
      "id": 1272,
      "db_id": "country_language",
      "question": "Count the number of languages."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of languages.[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.country_id NOT IN (SELECT country_id FROM official_languages) GROUP BY countries.country_id HAVING count(*)  =  1'\n        ;"
  },
  {
    "id": 1273,
    "db_id": "country_language",
    "question": {
      "id": 1273,
      "db_id": "country_language",
      "question": "List the name of languages in ascending alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of languages in ascending alphabetical order.[SQL]\\nSELECT language_id FROM languages WHERE name IN (SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id ORDER BY T1.name ASC) UNION SELECT name FROM languages WHERE name NOT IN (SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id) ORDER BY name ASC'\n        LIMIT 100'\n    ;"
  },
  {
    "id": 1274,
    "db_id": "country_language",
    "question": {
      "id": 1274,
      "db_id": "country_language",
      "question": "What are the names of languages, in alphabetical order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of languages, in alphabetical order?[SQL]\\nSELECT language_id FROM official_languages WHERE country_id = 123 ORDER BY name ASC'\n        LIMIT 1' , 'SELECT name FROM languages ORDER BY name ASC' ]\n    ;"
  },
  {
    "id": 1275,
    "db_id": "country_language",
    "question": {
      "id": 1275,
      "db_id": "country_language",
      "question": "What are the names of languages that contain the word \"ish\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of languages that contain the word \"ish\"?[SQL]\\nSELECT language_id FROM official_languages WHERE country_id IN (SELECT country_id FROM countries WHERE name LIKE '%ish%') UNION SELECT T1.language_id FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.id WHERE T2.name LIKE '%ish%' <MID>_score FROM countries WHERE name LIKE '%ish%' UNION SELECT T1.language_id FROM official_languages AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.id WHERE T2.name LIKE '%ish%' AND T2.overall_score  >  40 EQUAL 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1276,
    "db_id": "country_language",
    "question": {
      "id": 1276,
      "db_id": "country_language",
      "question": "Return the names of langauges that contain the substring \"ish\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of langauges that contain the substring \"ish\".[SQL]\\nSELECT language_id FROM languages WHERE name LIKE '%ish%' UNION SELECT T1.language_id FROM languages AS T1 JOIN countries AS T2 ON T1.id  =  T2.id WHERE T2.name LIKE '%ish%' ORDER BY language_id'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1277,
    "db_id": "country_language",
    "question": {
      "id": 1277,
      "db_id": "country_language",
      "question": "Show the names of countries in descending order of overall scores."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of countries in descending order of overall scores.[SQL]\\nSELECT country_id FROM countries WHERE overall_score != 0 ORDER BY overall_score DESC'\n        ;"
  },
  {
    "id": 1278,
    "db_id": "country_language",
    "question": {
      "id": 1278,
      "db_id": "country_language",
      "question": "What are the names of the countries, ordered descending by overall score?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the countries, ordered descending by overall score?[SQL]\\nSELECT country_id FROM countries WHERE overall_score != 'null' ORDER BY overall_score DESC NULLS LAST' <MID> languages AS T1 ON T1.country_id  =  T2.id JOIN countries AS T3 ON T3.id  =  T2.id WHERE T3.overall_score != 'null' ORDER BY T3.overall_score DESC NULLS LAST'>,\n    LIMIT 10'\n    ;"
  },
  {
    "id": 1279,
    "db_id": "country_language",
    "question": {
      "id": 1279,
      "db_id": "country_language",
      "question": "What is the average justice scores among countries?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average justice scores among countries?[SQL]\\nSELECT countries.country_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1280,
    "db_id": "country_language",
    "question": {
      "id": 1280,
      "db_id": "country_language",
      "question": "Give the average justice scores across all countries."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the average justice scores across all countries.[SQL]\\nSELECT countries.country_id  FROM countries WHERE countries.justice_score != 'null' GROUP BY countries.country_id ORDER BY avg(countries.justice_score) DESC LIMIT 10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1281,
    "db_id": "country_language",
    "question": {
      "id": 1281,
      "db_id": "country_language",
      "question": "What are the maximum and minimum health scores among countries that are not \"Norway\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum health scores among countries that are not \"Norway\".[SQL]\\nSELECT official_languages.country_id FROM official_languages WHERE official_languages.country_id NOT IN (SELECT country_id FROM countries WHERE name  =  'Norway') ORDER BY health_score ASC OR health_score DESC LIMIT 1 OFFSET 0'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1282,
    "db_id": "country_language",
    "question": {
      "id": 1282,
      "db_id": "country_language",
      "question": "Return the maximum and minimum health scores across all countries other than Norway."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the maximum and minimum health scores across all countries other than Norway.[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.name != 'Norway' ORDER BY countries.health_score DESC LIMIT 1 OFFSET 0 SELECT countries.country_id FROM countries WHERE countries.name != 'Norway' ORDER BY countries.health_score ASC LIMIT 1 OFFSET 0'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1283,
    "db_id": "country_language",
    "question": {
      "id": 1283,
      "db_id": "country_language",
      "question": "How many different official languages are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different official languages are there?[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.justice_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.health_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.education_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.economics_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.politics_score  >  75'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1284,
    "db_id": "country_language",
    "question": {
      "id": 1284,
      "db_id": "country_language",
      "question": "Count the number of different official languages."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different official languages.[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.justice_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.economics_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.education_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.politics_score  >  75 UNION SELECT countries.country_id FROM countries WHERE countries.health_score  >  75'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1285,
    "db_id": "country_language",
    "question": {
      "id": 1285,
      "db_id": "country_language",
      "question": "List names of countries in descending order of education_score."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List names of countries in descending order of education_score.[SQL]\\nSELECT country_id FROM countries WHERE education_score  >  0 ORDER BY education_score DESC NULLS LAST; SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages);'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1286,
    "db_id": "country_language",
    "question": {
      "id": 1286,
      "db_id": "country_language",
      "question": "What are the names of the countries, ordered descending by education score?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the countries, ordered descending by education score?[SQL]\\nSELECT country_id FROM countries WHERE overall_score != 'null' ORDER BY education_score DESC NULLS LAST' <MID> languages AS T1 ON T1.country_id  =  T2.id JOIN countries AS T3 ON T3.id  =  T2.id WHERE T3.overall_score != 'null' ORDER BY T3.education_score DESC NULLS LAST'>,\n    LIMIT 10'\n    ;"
  },
  {
    "id": 1287,
    "db_id": "country_language",
    "question": {
      "id": 1287,
      "db_id": "country_language",
      "question": "List the name of the country with the biggest score in politics."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of the country with the biggest score in politics.[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.politics_score  =  (SELECT max(politics_score) FROM countries) ORDER BY countries.politics_score DESC LIMIT 1; SELECT countries.name FROM countries WHERE countries.country_id  =  (SELECT country_id FROM countries WHERE politics_score  =  (SELECT max(politics_score) FROM countries)) LIMIT 1;'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1288,
    "db_id": "country_language",
    "question": {
      "id": 1288,
      "db_id": "country_language",
      "question": "What is the name of the country with the highest politics score?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the country with the highest politics score?[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.politics_score  =  ( SELECT MAX ( politics_score ) FROM countries ) ORDER BY countries.politics_score DESC LIMIT 1;SELECT countries.name FROM countries WHERE countries.country_id  =  ( SELECT countries.country_id FROM countries WHERE countries.politics_score  =  ( SELECT MAX ( politics_score ) FROM countries ) ORDER BY countries.politics_score DESC LIMIT 1 );'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1289,
    "db_id": "country_language",
    "question": {
      "id": 1289,
      "db_id": "country_language",
      "question": "Show the names of countries and their official languages."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of countries and their official languages.[SQL]\\nSELECT countries.country_id  FROM countries WHERE countries.country_id IN (SELECT country_id FROM official_languages) ORDER BY countries.country_id ASC'\n        ;"
  },
  {
    "id": 1290,
    "db_id": "country_language",
    "question": {
      "id": 1290,
      "db_id": "country_language",
      "question": "What are the names of the countries, as well as the names of their official langauges?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the countries, as well as the names of their official langauges?[SQL]\\nSELECT country_id FROM official_languages;"
  },
  {
    "id": 1291,
    "db_id": "country_language",
    "question": {
      "id": 1291,
      "db_id": "country_language",
      "question": "Show the official languages and the number of countries speaking each language."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the official languages and the number of countries speaking each language.[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.id IN (SELECT country_id FROM official_languages) GROUP BY countries.country_id ORDER BY count DESC'\n        ;"
  },
  {
    "id": 1292,
    "db_id": "country_language",
    "question": {
      "id": 1292,
      "db_id": "country_language",
      "question": "What are the names of the different official languages, as well as the number of countries that speak each?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the different official languages, as well as the number of countries that speak each?[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.justice_score  >  70 UNION SELECT counties.country_id FROM counties WHERE counties.health_score  >  70 UNION SELECT countries.country_id FROM countries WHERE countries.education_score  >  70 UNION SELECT countries.country_id FROM countries WHERE countries.economics_score  >  70 UNION SELECT countries.country_id FROM countries WHERE countries.politics_score  >  70'\n        LIMIT 10'\n    ;"
  },
  {
    "id": 1293,
    "db_id": "country_language",
    "question": {
      "id": 1293,
      "db_id": "country_language",
      "question": "Show the official language spoken by the most number of countries."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the official language spoken by the most number of countries.[SQL]\\nSELECT language_id FROM official_languages WHERE country_id  =  (SELECT country_id FROM official_languages GROUP BY language_id ORDER BY count(*) DESC LIMIT 1) <MID> languages that are spoken in more than one country. The result should be a list of those languages with their names in alphabetical order. If there are no such languages then return an empty list. [SQL] SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id HAVING count(*)  >  1 ORDER BY T1.name ASC'\n    LIMIT 50'\n    ;"
  },
  {
    "id": 1294,
    "db_id": "country_language",
    "question": {
      "id": 1294,
      "db_id": "country_language",
      "question": "What is the official language that is most common?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the official language that is most common?[SQL]\\nSELECT language_id FROM official_languages WHERE country_id  =  123 GROUP BY language_id ORDER BY count(*) DESC LIMIT 1; SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id WHERE T2.country_id  =  123; SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id WHERE T2.country_id  =  456 GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1;'\n        GROUP BY country_id;"
  },
  {
    "id": 1295,
    "db_id": "country_language",
    "question": {
      "id": 1295,
      "db_id": "country_language",
      "question": "Show the official languages spoken by at least two countries."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the official languages spoken by at least two countries.[SQL]\\nSELECT language_id FROM official_languages WHERE country_id IN (SELECT country_id FROM official_languages GROUP BY language_id HAVING count(*)  >=  2) ORDER BY language_id ASC'\n        ;"
  },
  {
    "id": 1296,
    "db_id": "country_language",
    "question": {
      "id": 1296,
      "db_id": "country_language",
      "question": "Which official languages are spoken in two or more countries?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which official languages are spoken in two or more countries?[SQL]\\nSELECT language_id FROM official_languages WHERE country_id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING count(*)  >=  2) UNION SELECT language_id FROM official_languages WHERE country_id NOT IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING count(*)  >=  2) ORDER BY language_id ASC'\n        LIMIT 100'\n    ;"
  },
  {
    "id": 1297,
    "db_id": "country_language",
    "question": {
      "id": 1297,
      "db_id": "country_language",
      "question": "Show the average overall scores of countries whose official language is \"English\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the average overall scores of countries whose official language is \"English\".[SQL]\\nSELECT country_id FROM official_languages WHERE language_id  =   (SELECT id FROM languages WHERE name  =  'English') GROUP BY country_id HAVING avg(overall_score) >  5.5'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1298,
    "db_id": "country_language",
    "question": {
      "id": 1298,
      "db_id": "country_language",
      "question": "What is the average overall score across countries with English as their official language?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average overall score across countries with English as their official language?[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.id IN ( SELECT country_id FROM official_languages WHERE language_id  =   ( SELECT id FROM languages WHERE name  =  'English' ) ) GROUP BY countries.country_id HAVING countries.overall_score  >  ( SELECT avg(overall_score) FROM countries WHERE id IN ( SELECT country_id FROM official_languages WHERE language_id  =   ( SELECT id FROM languages WHERE name  =  'English' ) ) ) ORDER BY overall_score DESC LIMIT 1;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1299,
    "db_id": "country_language",
    "question": {
      "id": 1299,
      "db_id": "country_language",
      "question": "Show the three official languages that are most commonly spoken."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the three official languages that are most commonly spoken.[SQL]\\nSELECT language_id FROM official_languages WHERE country_id  =  124 GROUP BY language_id ORDER BY count(*) DESC LIMIT 3'\n        ;"
  },
  {
    "id": 1300,
    "db_id": "country_language",
    "question": {
      "id": 1300,
      "db_id": "country_language",
      "question": "What are the names of the three official languages spoken in the most countries?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the three official languages spoken in the most countries?[SQL]\\nSELECT languages.language_id FROM languages WHERE languages.language_id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY count(*) DESC LIMIT 3) ORDER BY languages.name ASC'\n        LIMIT 3'\n    ;"
  },
  {
    "id": 1301,
    "db_id": "country_language",
    "question": {
      "id": 1301,
      "db_id": "country_language",
      "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the official languages sorted in descending order by the average overall scores among countries speaking them.[SQL]\\nSELECT countries.language_id FROM countries WHERE countries.justice_score  >  50 ORDER BY avg(countries.overall_score) DESC NULLS LAST; SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id; SELECT T3.name FROM languages AS T3 JOIN official_languages AS T4 ON T3.id  =  T4.language_id WHERE T4.country_id IN (SELECT country_id FROM countries WHERE overall_score  >  750);'\n        GROUP BY languages.language_id;"
  },
  {
    "id": 1302,
    "db_id": "country_language",
    "question": {
      "id": 1302,
      "db_id": "country_language",
      "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[SQL]\\nSELECT language_id FROM official_languages WHERE country_id IN (SELECT country_id FROM countries GROUP BY country_id HAVING avg(overall_score)  >=  2.5) ORDER BY avg(overall_score) DESC NULLS LAST; SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id WHERE T2.country_id IN (SELECT country_id FROM countries GROUP BY country_id HAVING avg(overall_score)  >=  2.5) ORDER BY avg(overall_score) DESC NULLS LAST;'\n        LIMIT 10;'\n        ;"
  },
  {
    "id": 1303,
    "db_id": "country_language",
    "question": {
      "id": 1303,
      "db_id": "country_language",
      "question": "Show the name of the country that has the greatest number of official languages."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name of the country that has the greatest number of official languages.[SQL]\\nSELECT countries.country_id FROM countries WHERE countries.country_id IN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Multiple' FROM official_languages GROUP BY country_id HAVING count(*)  >  1 <MID> languages.id FROM languages JOIN official_languages ON languages.id  =  official_languages.language_id GROUP BY official_languages.country_id ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Multiple' FROM official_languages GROUP BY country_id HAVING count(*)  >  1) AS T1 JOIN countries ON T1.country_id  =  countries.country_id ORDER BY countries.overall_score DESC LIMIT 1;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1304,
    "db_id": "country_language",
    "question": {
      "id": 1304,
      "db_id": "country_language",
      "question": "Which country has the greatest number of official languages?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which country has the greatest number of official languages?[SQL]\\nSELECT country_id FROM official_languages WHERE language_id  =  (SELECT id FROM languages GROUP BY id ORDER BY count(*) DESC LIMIT 1) GROUP BY country_id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1305,
    "db_id": "country_language",
    "question": {
      "id": 1305,
      "db_id": "country_language",
      "question": "List the names of languages that are not the official language of any countries."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of languages that are not the official language of any countries.[SQL]\\nSELECT language_id FROM official_languages WHERE country_id != 'null' EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages) <MID>. The query should return a single column of non-official languages. Write a SQL query for the above task.  | Official Languages | Non-Official Languages |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1306,
    "db_id": "country_language",
    "question": {
      "id": 1306,
      "db_id": "country_language",
      "question": "What are the names of languages that are not the official language of any country?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of languages that are not the official language of any country?[SQL]\\nSELECT language_id FROM official_languages;"
  },
  {
    "id": 1307,
    "db_id": "country_language",
    "question": {
      "id": 1307,
      "db_id": "country_language",
      "question": "List the names of countries that do not have any official language."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of countries that do not have any official language.[SQL]\\nSELECT country_id FROM official_languages WHERE language_id IS NULL GROUP BY country_id HAVING count(*)  =  0'\n        ;"
  },
  {
    "id": 1308,
    "db_id": "country_language",
    "question": {
      "id": 1308,
      "db_id": "country_language",
      "question": "What are the names of countries that do not have an official language?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of countries that do not have an official language?[SQL]\\nSELECT country_id FROM official_languages WHERE language_id IS NULL GROUP BY country_id HAVING count(*)  =  (SELECT count(*) FROM countries) ORDER BY name ASC'\n        ;"
  },
  {
    "id": 1309,
    "db_id": "country_language",
    "question": {
      "id": 1309,
      "db_id": "country_language",
      "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[SQL]\\nSELECT languages.language_id FROM languages WHERE languages.language_id IN ( SELECT country_id FROM countries WHERE overall_score  >  95 ) INTERSECT SELECT languages.language_id FROM languages WHERE languages.language_id IN ( SELECT country_id FROM countries WHERE overall_score  <  90 )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1310,
    "db_id": "country_language",
    "question": {
      "id": 1310,
      "db_id": "country_language",
      "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"languages\" (\n\"id\" integer,\n\"name\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"countries\" (\n\"id\" integer,\n\"name\" text,\n\"overall_score\" real,\n\"justice_score\" real,\n\"health_score\" real,\n\"education_score\" real,\n\"economics_score\" real,\n\"politics_score\" real,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"official_languages\" (\n\"language_id\" integer,\n\"country_id\" integer,\nPRIMARY KEY (\"language_id\", \"country_id\"),\nFOREIGN KEY (\"language_id\") REFERENCES \"languages\"(\"id\"),\nFOREIGN KEY (\"country_id\") REFERENCES \"countries\"(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[SQL]\\nSELECT language_id FROM countries WHERE overall_score BETWEEN 95 AND 90 AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score BETWEEN 95 AND 90'\n        LIMIT 100'\n    ;"
  },
  {
    "id": 1311,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1311,
      "db_id": "real_estate_rentals",
      "question": "Which countries and cities are included in addresses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which countries and cities are included in addresses?[SQL]\\nSELECT Addresses.user_id FROM Addresses WHERE country = 'United Kingdom' AND town_city = 'London' UNION SELECT Addresses.user_id FROM Addresses WHERE country = 'United States' AND town_city = 'New York' UNION SELECT Addresses.user_id FROM Addresses WHERE country = 'Canada' AND town_city = 'Toronto' UNION SELECT Addresses.user_id FROM Addresses WHERE country = 'Germany' AND town_city = 'Berlin' UNION SELECT Addresses.user_id FROM Addresses WHERE country = 'France' AND town_city = 'Paris' UNION SELECT Addresses.user_id FROM Addresses WHERE country = 'Spain' AND town_city = 'Madrid' UNION SELECT Addresses.user_id FROM Addresses WHERE country = 'Italy' AND town_city = 'Rome' UNION SELECT Addresses.user_id FROM"
  },
  {
    "id": 1312,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1312,
      "db_id": "real_estate_rentals",
      "question": "What are the countries and cities for each address?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the countries and cities for each address?[SQL]\\nSELECT Addresses.user_id FROM Addresses WHERE country = 'United States' AND town_city != '' ORDER BY town_city ASC <MID>_categories AS T1 JOIN Ref_age_categories AS T2 ON T1.age_category_code  =  T2.age_category_code WHERE T1.user_category_code  =  T2.user_category_code'\n\n    ORDER BY user_id;"
  },
  {
    "id": 1313,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1313,
      "db_id": "real_estate_rentals",
      "question": "In which states are each of the the properties located?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In which states are each of the the properties located?[SQL]\\nSELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%Texas%' UNION SELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%Florida%' UNION SELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%California%' UNION SELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%New York%' UNION SELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%Pennsylvania%' UNION SELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%Michigan%' UNION SELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%Illinois%' UNION SELECT Addresses.user_id FROM Addresses WHERE county_state_province LIKE '%Ohio%' UNION SELECT Addresses.user_id FROM Addresses WHERE county"
  },
  {
    "id": 1314,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1314,
      "db_id": "real_estate_rentals",
      "question": "Give the states or provinces corresponding to each property."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the states or provinces corresponding to each property.[SQL]\\nSELECT Addresses.search_string FROM Addresses WHERE county_state_province IN ( SELECT DISTINCT county_state_province FROM addresses ) AND town_city  =  'New York' AND line_3_area_locality  =  'Manhattan' AND line_1_number_building LIKE '%Chelsea%' AND line_2_number_street LIKE '%West 23rd Street%' UNION SELECT DISTINCT county_state_province FROM addresses WHERE town_city  =  'New York' AND line_3_area_locality  =  'Manhattan' AND line_1_number_building LIKE '%Chelsea%' AND line_2_number_street LIKE '%West 23rd Street%' EXCEPT SELECT DISTINCT county_state_province FROM addresses WHERE town_city  =  'New York' AND line_3_area"
  },
  {
    "id": 1315,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1315,
      "db_id": "real_estate_rentals",
      "question": "How is the feature rooftop described?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How is the feature rooftop described?[SQL]\\nSELECT Features.user_id FROM Features WHERE Feature_Name = 'rooftop' AND Feature_Description = 'has a flat roof' AND Feature_ID = 4; SELECT Ref_Age_Categories.age_category_description FROM Ref_Age_Categories JOIN Users ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Users.first_name = 'Joe' AND Users.last_name = 'Smith'; SELECT Ref_User_Categories.user_category_description FROM Ref_User_Categories JOIN Users ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Users.first_name = 'Joe' AND Users.last_name = 'Smith'; SELECT Addresses.line_1_number_building FROM Addresses JOIN Users ON Users.user_address_id = Addresses."
  },
  {
    "id": 1316,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1316,
      "db_id": "real_estate_rentals",
      "question": "Return the description of the feature 'rooftop'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the description of the feature 'rooftop'.[SQL]\\nSELECT Features.user_id FROM Features WHERE Feature_Name  =  'rooftop' SELECT T1.feature_description FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id WHERE T2.Feature_Name  =  'rooftop' SELECT T1.property_id FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id  =  T2.property_id WHERE T2.Feature_Name  =  'rooftop' SELECT T1.property_id FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id  =  T2.property_id WHERE T2.Feature_Name  =  'rooftop' SELECT T1.property_id FROM Properties AS T1 JOIN Property_Features AS"
  },
  {
    "id": 1317,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1317,
      "db_id": "real_estate_rentals",
      "question": "What are the feature name and description of the most commonly seen feature across properties?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the feature name and description of the most commonly seen feature across properties?[SQL]\\nSELECT Features.user_id FROM Features WHERE Features.feature_name = 'Most Common Feature' AND Features.feature_description = 'Most Common Feature Description' GROUP BY Features.feature_name ORDER BY count(*) DESC LIMIT 1; SELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T2.property_id  =  T3.property_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1; SELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T"
  },
  {
    "id": 1318,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1318,
      "db_id": "real_estate_rentals",
      "question": "Give the feature name and description for the most common feature across all properties."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the feature name and description for the most common feature across all properties.[SQL]\\nSELECT Features.user_id FROM Features WHERE Features.feature_name = 'Most Common Feature' AND Features.feature_description = 'Most Common Feature Description' GROUP BY Features.feature_name HAVING count(*)  =  (SELECT count(*) FROM Features GROUP BY Features.feature_name ORDER BY count(*) DESC LIMIT 1) UNION SELECT FEATURE_NAME ,  FEATURE_DESCRIPTION FROM FEATURES GROUP BY FEATURE_NAME ORDER BY count(*) DESC LIMIT 1'\n\n    ORDER BY Features.user_id;"
  },
  {
    "id": 1319,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1319,
      "db_id": "real_estate_rentals",
      "question": "What is the minimum number of rooms in a property?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the minimum number of rooms in a property?[SQL]\\nSELECT Rooms.search_seq FROM Rooms WHERE room_size  =  ( SELECT min(room_size) FROM Rooms ) ORDER BY Room_number ASC LIMIT 1;[No Data]'\n        ;"
  },
  {
    "id": 1320,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1320,
      "db_id": "real_estate_rentals",
      "question": "What is the lowest room count across all the properties?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the lowest room count across all the properties?[SQL]\\nSELECT Rooms.search_seq FROM Rooms WHERE room_count  =  ( SELECT min(room_count) FROM Properties ) ORDER BY searc_seq ASC LIMIT 1;[]'\n        ;"
  },
  {
    "id": 1321,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1321,
      "db_id": "real_estate_rentals",
      "question": "How many properties have 1 parking lot or 1 garage?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many properties have 1 parking lot or 1 garage?[SQL]\\nSELECT Property_Photos.user_id FROM Property_Photos WHERE photo_description LIKE '%park%' OR photo_description LIKE '%garage%' GROUP BY Property_Photos.user_id HAVING count(*)  =  1 UNION SELECT T1.owner_user_id FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code WHERE T2.property_type_description LIKE '%park%' OR T2.property_type_description LIKE '%garage%' GROUP BY T1.owner_user_id HAVING count(*)  =  1'\n    ;"
  },
  {
    "id": 1322,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1322,
      "db_id": "real_estate_rentals",
      "question": "Count the number of properties that have 1 parking lot or 1 garage."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of properties that have 1 parking lot or 1 garage.[SQL]\\nSELECT Property_Photos.user_id FROM Property_Photos WHERE photo_description LIKE '%park%' OR photo_description LIKE '%garage%' GROUP BY Property_Photos.user_id HAVING count(*)  =  1 UNION SELECT Properties.owner_user_id FROM Properties WHERE garage_yn  =  'Y' OR parkling_lots  =  1 GROUP BY Properties.owner_user_id HAVING count(*)  =  1'\n\n    ORDER BY User_Property_History.user_id;"
  },
  {
    "id": 1323,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1323,
      "db_id": "real_estate_rentals",
      "question": "For users whose description contain the string 'Mother', which age categories are they in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For users whose description contain the string 'Mother', which age categories are they in?[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category_description LIKE '%Mother%' <MID>_categories.age_category_description LIKE '%Father%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category_description LIKE '%Mother%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category_description LIKE '%Daughter%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category_description LIKE '%Son%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category"
  },
  {
    "id": 1324,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1324,
      "db_id": "real_estate_rentals",
      "question": "What are the age categories for users whose description contains the string Mother?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the age categories for users whose description contains the string Mother?[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE Ref_Age_Categories.user_category_description LIKE '%Mother%' <MID>_categories.user_category_description LIKE '%Father%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.user_category_description LIKE '%Mother%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.user_category_description LIKE '%Daughter%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.user_category_description LIKE '%Son%' UNION SELECT Ref_Age_Categories.age_category_code FROM Ref_Age_Categories WHERE Ref_Age_Categories.user_category"
  },
  {
    "id": 1325,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1325,
      "db_id": "real_estate_rentals",
      "question": "What is the first name of the user who owns the greatest number of properties?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the first name of the user who owns the greatest number of properties?[SQL]\\nSELECT Users.user_id FROM Users WHERE OWNER_USER_ID  =  ( SELECT property_id FROM Properties GROUP BY property_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT first_name FROM Users WHERE OWNER_USER_ID  =  ( SELECT property_id FROM Properties GROUP BY property_id ORDER BY count(*) DESC LIMIT 1 )'\n        ;"
  },
  {
    "id": 1326,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1326,
      "db_id": "real_estate_rentals",
      "question": "Return the first name of the user who owns the most properties."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the first name of the user who owns the most properties.[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code  =  'Buyer' UNION SELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code  =  'Seller' ORDER BY count(*) DESC LIMIT 1; SELECT first_name FROM Users WHERE user_id  =  (SELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code  =  'Buyer' UNION SELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code  =  'Seller' ORDER BY count(*) DESC LIMIT 1);'}]}\n\n    ORDER BY Ref_Age_Categories.user_id;"
  },
  {
    "id": 1327,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1327,
      "db_id": "real_estate_rentals",
      "question": "List the average room count of the properties with gardens."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the average room count of the properties with gardens.[SQL]\\nSELECT Ref_Room_Types.search_string FROM Ref_Room_Types WHERE Ref_Room_Types.room_type_description LIKE '%garden%' GROUP BY Ref_Room_Types.room_type_code ORDER BY avg(room_count) DESC LIMIT 1;[No SQL] SELECT avg(room_count) FROM ROOMS WHERE Ref_Room_Types.room_type_code IN ( SELECT Ref_Room_Types.room_type_code FROM Ref_Room_Types WHERE Ref_Room_Types.room_type_description LIKE '%garden%' );[Python] def average_room_count(): SELECT avg(room_count) FROM ROOMS WHERE Ref_Room_Types.room_type_code IN ( SELECT Ref_Room_Types.room_type_code FROM Ref_Room_Types WHERE Ref_Room"
  },
  {
    "id": 1328,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1328,
      "db_id": "real_estate_rentals",
      "question": "On average, how many rooms do properties with garden features have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, On average, how many rooms do properties with garden features have?[SQL]\\nSELECT Ref_Room_Types.user_id FROM Ref_Room_Types WHERE room_type_code = 'garden' GROUP BY Ref_Room_Types.user_id HAVING count(*)  >  100 / (SELECT count(*) FROM Ref_Room_Types) ORDER BY avg(Ref_Room_Types.room_size) DESC LIMIT 1; SELECT Ref_Room_Types.user_id FROM Ref_Room_Types WHERE room_type_code = 'garden' GROUP BY Ref_Room_Types.user_id ORDER BY avg(Ref_Room_Types.room_size) DESC LIMIT 1; SELECT Ref_Room_Types.user_id FROM Ref_Room_Types WHERE room_type_code = 'garden' GROUP BY Ref_Room_Types.user_id ORDER BY avg(Ref_Room_"
  },
  {
    "id": 1329,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1329,
      "db_id": "real_estate_rentals",
      "question": "In which cities are there any properties equipped with a swimming pool?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In which cities are there any properties equipped with a swimming pool?[SQL]\\nSELECT Addresses.user_id FROM Addresses WHERE town_city LIKE '%swimming%pool%' AND property_address_id IN (SELECT property_address_id FROM Properties) UNION SELECT T1.user_id FROM Addresses AS T1 JOIN User_Property_History AS T2 ON T1.address_id  =  T2.property_address_id JOIN Properties AS T3 ON T2.property_id  =  T3.property_id WHERE T1.town_city LIKE '%swimming%pool%' AND T3.swimming_pool_yn  =  'Y' GROUP BY T1.user_id HAVING count(*)  >  0 UNION SELECT T1.user_id FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.swimming_pool_yn  =  'Y'"
  },
  {
    "id": 1330,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1330,
      "db_id": "real_estate_rentals",
      "question": "Return the cities in which there exist properties that have swimming pools."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the cities in which there exist properties that have swimming pools.[SQL]\\nSELECT Addresses.user_id FROM Addresses WHERE property_address_id IN ( SELECT property_address_id FROM Properties WHERE swimming_pool_yn  =  'Y' ) GROUP BY Addresses.user_id HAVING count(*)  >  0 ORDER BY count(*) DESC LIMIT 1000;[No SQL]SELECT Addresses.user_id FROM Addresses WHERE property_address_id IN ( SELECT property_address_id FROM Properties WHERE swimming_pool_yn  =  'Y' ) GROUP BY Addresses.user_id ORDER BY count(*) DESC LIMIT 1000;[No SQL]SELECT DISTINCT town_city FROM addresses WHERE property_address_id IN ( SELECT property_address_id FROM properties WHERE swimming_pool_yn  =  'Y' ) ORDER BY count(*) DESC LIMIT 1000;[No SQL]SELECT DISTINCT town_city FROM"
  },
  {
    "id": 1331,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1331,
      "db_id": "real_estate_rentals",
      "question": "Which property had the lowest price requested by the vendor? List the id and the price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which property had the lowest price requested by the vendor? List the id and the price.[SQL]\\nSELECT Property_Photos.user_id FROM Property_Photos WHERE Property_Photos.photo_filename = 'lowest_price' LIMIT 1; SELECT Properties.property_id ,  Properties.vendor_requested_price FROM Properties ORDER BY Properties.vendor_requested_price ASC LIMIT 1; SELECT Properties.property_id ,  Properties.vendor_requested_price FROM Properties ORDER BY Properties.vendor_requested_price DESC LIMIT 1; SELECT Properties.property_id ,  Properties.vendor_requested_price FROM Properties ORDER BY Properties.vendor_requested_price ASC LIMIT 1; SELECT Properties.property_id ,  Properties.vendor_requested_price FROM Properties ORDER BY Properties.vendor_requested_price DESC LIMIT 1; SELECT Properties.property_id ,  Properties.vendor_requested_price FROM Properties ORDER BY Properties.vendor_requested_price ASC LIMIT 1;"
  },
  {
    "id": 1332,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1332,
      "db_id": "real_estate_rentals",
      "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the property that had the lowest requested price from the vendor, and what was that price?[SQL]\\nSELECT Property_Photos.user_id FROM Property_Photos WHERE Property_Photos.photo_filename = '1476964371_img_42.jpg' AND Property_Photos.photo_title = 'Requested Price' ORDER BY Property_Photos.photo_value ASC LIMIT 1; SELECT Property_Photos.photo_value FROM Property_Photos WHERE Property_Photos.photo_filename = '1476964371_img_42.jpg' AND Property_Photos.photo_title = 'Requested Price' ORDER BY Property_Photos.photo_value ASC LIMIT 1; SELECT Properties.vendor_requested_price FROM Properties ORDER BY Properties.vendor_requested_price ASC LIMIT 1; SELECT Properties.vendor_requested_price FROM Properties ORDER BY Properties.vendor_requested_price DESC LIMIT 1; SELECT"
  },
  {
    "id": 1333,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1333,
      "db_id": "real_estate_rentals",
      "question": "On average, how many rooms does a property have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, On average, how many rooms does a property have?[SQL]\\nSELECT Ref_Room_Types.user_id FROM Ref_Room_Types WHERE room_type_description = 'Master Bedroom' GROUP BY Ref_Room_Types.user_id HAVING count(*)  >  256 ORDER BY avg(Ref_Room_Types.room_count) DESC LIMIT 1; SELECT Ref_Room_Types.room_count FROM Ref_Room_Types WHERE room_type_description = 'Master Bedroom' GROUP BY Ref_Room_Types.user_id ORDER BY avg(Ref_Room_Types.room_count) DESC LIMIT 1; SELECT avg(Ref_Room_Types.room_count) FROM Ref_Room_Types WHERE room_type_description = 'Master Bedroom' GROUP BY Ref_Room_Types.user_id ORDER BY avg(Ref_Room_Types.room_count)"
  },
  {
    "id": 1334,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1334,
      "db_id": "real_estate_rentals",
      "question": "What is the average number of rooms in a property?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average number of rooms in a property?[SQL]\\nSELECT Ref_Room_Types.user_id FROM Ref_Room_Types WHERE room_type_description = 'Master Bedroom' GROUP BY Ref_Room_Types.user_id HAVING count(*)  >  2 AND count(*)  <  4; SELECT avg(room_size) FROM ROOMS; <MID>_categories ON USERS.age_category_code  =  Ref_Age_Categories.age_category_code JOIN Ref_User_Categories ON USERS.user_category_code  =  Ref_User_Categories.user_category_code JOIN ADDRESSES ON USERS.user_address_id  =  ADDRESSES.address_id JOIN Properties ON Properties.owner_user_id  =  USERS.user_id JOIN Property_Photoes ON Properties.property_id  =  Property_Photoes.property_id JOIN Property_"
  },
  {
    "id": 1335,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1335,
      "db_id": "real_estate_rentals",
      "question": "How many kinds of room sizes are listed?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many kinds of room sizes are listed?[SQL]\\nSELECT Rooms.search_string FROM Rooms WHERE Room_Size = 'Large' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Small' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Medium' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Extra Large' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Extra Small' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Regular' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Tiny' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Mini' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Average' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Standard' UNION SELECT Room_Size FROM Rooms WHERE Room_Size = 'Sumptuous' UNION SELECT Room_Size"
  },
  {
    "id": 1336,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1336,
      "db_id": "real_estate_rentals",
      "question": "Return the number of different room sizes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the number of different room sizes.[SQL]\\nSELECT Rooms.search_string FROM Rooms WHERE room_size != '' GROUP BY room_size ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1337,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1337,
      "db_id": "real_estate_rentals",
      "question": "What are the ids of users who have searched at least twice, and what did they search?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of users who have searched at least twice, and what did they search?[SQL]\\nSELECT user_id FROM User_Searches WHERE search_seq  >=  2; SELECT search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_seq  >=  2);'\n        ;"
  },
  {
    "id": 1338,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1338,
      "db_id": "real_estate_rentals",
      "question": "Return the ids of users who have performed two or more searches, as well as their search sequence."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids of users who have performed two or more searches, as well as their search sequence.[SQL]\\nSELECT user_id FROM User_SearchesGROUP BY user_idHAVING count(*)  >=  2 ORDER BY search_seq DESC LIMIT 100'\n        ;"
  },
  {
    "id": 1339,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1339,
      "db_id": "real_estate_rentals",
      "question": "When was the time of the latest search by a user?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, When was the time of the latest search by a user?[SQL]\\nSELECT search_datetime FROM User_SearchesORDER BY search_datetime;"
  },
  {
    "id": 1340,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1340,
      "db_id": "real_estate_rentals",
      "question": "What was the time of the most recent search?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What was the time of the most recent search?[SQL]\\nSELECT search_datetime FROM User_SearchesORDER BY search_datetime;"
  },
  {
    "id": 1341,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1341,
      "db_id": "real_estate_rentals",
      "question": "What are all the user searches time and content? Sort the result descending by content."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the user searches time and content? Sort the result descending by content.[SQL]\\nSELECT search_datetime FROM User_Searches WHERE search_string IS NOT NULL ORDER BY search_string DESC'\n        ;"
  },
  {
    "id": 1342,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1342,
      "db_id": "real_estate_rentals",
      "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[SQL]\\nSELECT search_string  FROM User_Searches WHERE search_string IS NOT NULL SORT BY search_string DESC'\n        ;"
  },
  {
    "id": 1343,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1343,
      "db_id": "real_estate_rentals",
      "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the zip codes of properties which do not belong to users who own at most 2 properties?[SQL]\\nSELECT Addresses.search_string FROM Addresses WHERE address_id NOT IN ( SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN ( SELECT user_id FROM User_Property_History GROUP BY user_id HAVING count(*)  <=  2 ) ) AND town_city LIKE '%Los%Angeles%' AND zip_postcode LIKE '%90046%' <MID>_category_code = 'Ref_Age_Categories' AND age_category_code = 'Ref_Age_Categories' AND user_category_code = 'Ref_User_Categories' AND is_buyer = 'Yes' AND is_seller = 'No' ORDER BY date_registered DESC LIMIT 10; SELECT login_name FROM USERS WHERE age_category_code = 'Ref_Age_Categories' AND user_category_code = 'Ref_User_Categories"
  },
  {
    "id": 1344,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1344,
      "db_id": "real_estate_rentals",
      "question": "Return the zip codes for properties not belonging to users who own two or fewer properties."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the zip codes for properties not belonging to users who own two or fewer properties.[SQL]\\nSELECT Addresses.search_string FROM Addresses WHERE address_id NOT IN ( SELECT property_address_id FROM Properties EXCEPT SELECT property_address_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 ) <MID>_category_code` VARCHAR(15) NOT NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1345,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1345,
      "db_id": "real_estate_rentals",
      "question": "What are the users making only one search? List both category and user id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the users making only one search? List both category and user id.[SQL]\\nSELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_category_code ORDER BY count(*) DESC LIMIT 1; SELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_id ORDER BY count(*) DESC LIMIT 1; SELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_category_code ORDER BY count(*) DESC LIMIT 1; SELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_id ORDER BY count(*) DESC LIMIT 1; SELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_category_code ORDER BY count(*) DESC LIMIT 1; SELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_id ORDER BY count(*) DESC LIMIT 1; SELECT user_id FROM User_Search"
  },
  {
    "id": 1346,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1346,
      "db_id": "real_estate_rentals",
      "question": "What are the ids of users who have only made one search, and what are their category codes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of users who have only made one search, and what are their category codes?[SQL]\\nSELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_id ORDER BY count(*) DESC LIMIT 1; SELECT user_category_code FROM USERS WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_id ORDER BY count(*) DESC LIMIT 1); SELECT age_category_code FROM USERS WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_seq  =  1 GROUP BY user_id ORDER BY count(*) DESC LIMIT 1);'\n        ;"
  },
  {
    "id": 1347,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1347,
      "db_id": "real_estate_rentals",
      "question": "What is the age range category of the user who made the first search?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the age range category of the user who made the first search?[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code = ( SELECT Users.age_category_code FROM Users JOIN User_Searches ON Users.user_id = User_Searches.user_id ORDER BY User_Searches.search_datetime LIMIT 1 )'\n        ;"
  },
  {
    "id": 1348,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1348,
      "db_id": "real_estate_rentals",
      "question": "Return the age category for the user who made the earliest search."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the age category for the user who made the earliest search.[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code = ( SELECT Users.age_category_code FROM Users JOIN User_Searches ON Users.user_id  =  User_Searches.user_id ORDER BY User_Searches.search_datetime LIMIT 1 )'\n        ;"
  },
  {
    "id": 1349,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1349,
      "db_id": "real_estate_rentals",
      "question": "Find the login names of all senior citizen users ordered by their first names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the login names of all senior citizen users ordered by their first names.[SQL]\\nSELECT user_id FROM Users WHERE age_category_code  =  'Senior' ORDER BY first_name ASC NULLS LAST; SELECT login_name FROM Users WHERE age_category_code  =  'Senior' ORDER BY first_name ASC NULLS LAST; SELECT T1.login_name ,  T1.first_name FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T2.user_category_description  =  'Senior' ORDER BY T1.first_name ASC NULLS LAST; SELECT T1.login_name ,  T1.first_name FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T2"
  },
  {
    "id": 1350,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1350,
      "db_id": "real_estate_rentals",
      "question": "What are the login names of all senior citizens, sorted by first name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the login names of all senior citizens, sorted by first name?[SQL]\\nSELECT user_id FROM Users WHERE age_category_code  =  'Senior' ORDER BY first_name ASC NULLS LAST;' SELECT T1.login_name FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T2.user_category_description  =  'Senior' ORDER BY T1.first_name ASC NULLS LAST;' SELECT T1.login_name FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T2.user_category_description  =  'Senior' ORDER BY T1.first_name ASC NULLS LAST;' SELECT T1.login_name FROM Users AS T1 JOIN Ref_User"
  },
  {
    "id": 1351,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1351,
      "db_id": "real_estate_rentals",
      "question": "How many searches do buyers make in total?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many searches do buyers make in total?[SQL]\\nSELECT search_seq FROM User_Searches WHERE is_buyer  =  1 UNION ALL SELECT search_seq FROM User_Searches WHERE is_seller  =  1'\n        ;"
  },
  {
    "id": 1352,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1352,
      "db_id": "real_estate_rentals",
      "question": "Count the number of searches made by buyers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of searches made by buyers.[SQL]\\nSELECT user_id FROM Users WHERE is_buyer  =  'Y' AND search_string IS NOT NULL JOIN User_Searches ON Users.user_id  =  User_Searches.user_id GROUP BY search_string ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1353,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1353,
      "db_id": "real_estate_rentals",
      "question": "When did the user with login name ratione register?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, When did the user with login name ratione register?[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE Ref_Age_Categories.login_name  =  'ratione' AND Ref_Age_Categories.date_registered  =  (SELECT max(date_registered) FROM Ref_Age_Categories WHERE login_name  =  'ratione')'\n    ;"
  },
  {
    "id": 1354,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1354,
      "db_id": "real_estate_rentals",
      "question": "What was the registration date for the user whose login name is ratione?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What was the registration date for the user whose login name is ratione?[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE Ref_Age_Categories.login_name  =  'ratione' ORDER BY Ref_Age_Categories.date_registered DESC LIMIT 1; SELECT Ref_Age_Categories.date_registered FROM Ref_Age_Categories WHERE Ref_Age_Categories.login_name  =  'ratione' ORDER BY Ref_Age_Categories.date_registered DESC LIMIT 1; SELECT Ref_Age_Categories.date_registered FROM Ref_Age_Categories WHERE Ref_Age_Categories.login_name  =  'ratione' ORDER BY Ref_Age_Categories.date_registered DESC LIMIT 1; SELECT Ref_Age_Categories.date_registered FROM Ref_Age_Categories WHERE Ref_Age_Categories.login_name  ="
  },
  {
    "id": 1355,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1355,
      "db_id": "real_estate_rentals",
      "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[SQL]\\nSELECT Users.user_id FROM Users WHERE is_seller = '1' UNION SELECT Users.first_name ,  Users.middle_name ,  Users.last_name ,  Users.login_name FROM Users WHERE is_seller = '1' <MID>_category_description FROM Ref_Age_Categories ORDER BY age_category_code ASC'\n    GROUP BY user_id;"
  },
  {
    "id": 1356,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1356,
      "db_id": "real_estate_rentals",
      "question": "What are the first, middle, last, and login names for all users who are sellers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first, middle, last, and login names for all users who are sellers?[SQL]\\nSELECT Features.user_id FROM Features WHERE Features.feature_name = 'is_seller' AND Features.feature_value  =  'Y' UNION SELECT T1.user_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  T2.login_name FROM Users AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id WHERE T2.is_buyer != 'Y' ORDER BY T1.first_name ASC; <MID>_category_code` VARCHAR(15) NOT NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1357,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1357,
      "db_id": "real_estate_rentals",
      "question": "Where do the Senior Citizens live? List building, street, and the city."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Where do the Senior Citizens live? List building, street, and the city.[SQL]\\nSELECT Addresses.search_string FROM Addresses WHERE county_state_province  =  'Senior Citizens Residence' AND TYPE = 'Building' UNION SELECT line_2_number_street ,  town_city FROM Addresses WHERE county_state_province  =  'Senior Citizens Residence' AND TYPE = 'Street' UNION SELECT town_city FROM Addresses WHERE county_state_province  =  'Senior Citizens Residence' AND TYPE = 'City' UNION SELECT town_city FROM Addresses WHERE county_state_province  =  'Senior Citizens Residence' AND TYPE = 'Town' ORDER BY town_city ASC'\n    GROUP BY search_string;"
  },
  {
    "id": 1358,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1358,
      "db_id": "real_estate_rentals",
      "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[SQL]\\nSELECT Addresses.search_string FROM Addresses WHERE town_city LIKE '%senior%' AND line_1_number_building LIKE '%building%' AND line_2_number_street LIKE '%street%' AND line_3_area_locality LIKE '%city%' ORDER BY search_string DESC LIMIT 5;' <MID>_categories ON Users.age_category_code = Ref_Age_Categories.age_category_code JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code JOIN Addresses ON Users.user_address_id = Addresses.address_id JOIN Properties ON Properties.owner_user_id = Users.user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id JOIN Rooms ON Properties.property_id = Rooms.property_id JOIN Property_Features"
  },
  {
    "id": 1359,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1359,
      "db_id": "real_estate_rentals",
      "question": "How many properties are there with at least 2 features?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many properties are there with at least 2 features?[SQL]\\nSELECT Property_Features.user_id FROM Property_Features WHERE feature_id IN ( SELECT feature_id FROM Features GROUP BY feature_id HAVING count(*)  >=  2 ) ORDER BY Property_Features.user_id DESC LIMIT 1000'\n        ;"
  },
  {
    "id": 1360,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1360,
      "db_id": "real_estate_rentals",
      "question": "Count the number of properties with at least two features."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of properties with at least two features.[SQL]\\nSELECT Property_Features.user_id FROM Property_Features WHERE feature_id  =  1 GROUP BY Property_Features.user_id HAVING count(*)  >=  2'\n        ;"
  },
  {
    "id": 1361,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1361,
      "db_id": "real_estate_rentals",
      "question": "How many photos does each property have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many photos does each property have?[SQL]\\nSELECT Property_Photos.user_id  FROM Property_Photos WHERE photo_filename != 'null' GROUP BY Property_Photos.property_id ORDER BY count(*) DESC LIMIT 100; SELECT Property_Photos.property_id FROM Property_Photos WHERE photo_filename != 'null' GROUP BY Property_Photos.property_id ORDER BY count(*) DESC LIMIT 1; SELECT Property_Photos.property_id FROM Property_Photos WHERE photo_filename != 'null' GROUP BY Property_Photos.property_id ORDER BY count(*) DESC LIMIT 10; SELECT Property_Photos.property_id FROM Property_Photos WHERE photo_filename != 'null' GROUP BY Property_Photos.property_id ORDER BY count(*) DESC LIMIT 100; SELECT Property_"
  },
  {
    "id": 1362,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1362,
      "db_id": "real_estate_rentals",
      "question": "Count the number of property photos each property has by id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of property photos each property has by id.[SQL]\\nSELECT Property_Photos.user_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1363,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1363,
      "db_id": "real_estate_rentals",
      "question": "How many photos does each owner has of his or her properties? List user id and number of photos."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many photos does each owner has of his or her properties? List user id and number of photos.[SQL]\\nSELECT User_Property_History.user_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1364,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1364,
      "db_id": "real_estate_rentals",
      "question": "What are the user ids of property owners who have property photos, and how many do each of them have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the user ids of property owners who have property photos, and how many do each of them have?[SQL]\\nSELECT Users.user_id FROM Users WHERE Users.user_id IN ( SELECT Property_Photos.property_id FROM Property_Photos ) GROUP BY Users.user_id ORDER BY count(*) DESC LIMIT 10;'\n        ;"
  },
  {
    "id": 1365,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1365,
      "db_id": "real_estate_rentals",
      "question": "What is the total max price of the properties owned by single mothers or students?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total max price of the properties owned by single mothers or students?[SQL]\\nSELECT Ref_User_Categories.user_id FROM Ref_User_Categories WHERE Ref_User_Categories.user_category_code  =  'Student' UNION SELECT Ref_User_Categories.user_id FROM Ref_User_Categories WHERE Ref_User_Categories.user_category_code  =  'Single Mother' INTERSECT SELECT T1.user_id FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id ORDER BY sum(T2.price_min) DESC LIMIT 1'\n    ;"
  },
  {
    "id": 1366,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1366,
      "db_id": "real_estate_rentals",
      "question": "Give the total max price corresponding to any properties owned by single mothers or students."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the total max price corresponding to any properties owned by single mothers or students.[SQL]\\nSELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code  =  'Mother' UNION SELECT Ref_Age_Categories.user_id FROM Ref_Age_Categories WHERE age_category_code  =  'Student' INTERSECT SELECT T1.user_id FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id HAVING max(T2.price_min) OR min(T2.price_max) ORDER BY sum(Ref_Age_Categories.user_id) DESC LIMIT 1;' ]]]]\n\n    ORDER BY Ref_Age_Categories.user_id;"
  },
  {
    "id": 1367,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1367,
      "db_id": "real_estate_rentals",
      "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the date stamps and property names for each item of property history, ordered by date stamp?[SQL]\\nSELECT Property_Photos.user_id FROM Property_Photos WHERE photo_filename LIKE '%.jpg' ORDER BY Property_Photos.datestamp DESC ,  Property_Photos.property_name ASC LIMIT 1000000; SELECT Property_Photos.property_name FROM Property_Photos WHERE photo_filename LIKE '%.jpg' ORDER BY Property_Photos.datestamp DESC ,  Property_Photos.property_name ASC LIMIT 1000000; SELECT Property_Photos.datestamp FROM Property_Photos WHERE photo_filename LIKE '%.jpg' ORDER BY Property_Photos.datestamp DESC ,  Property_Photos.property_name ASC LIMIT 1000000; SELECT Property_Photos.property_name FROM Property_Photos WHERE photo_filename LIKE '%.jpg' ORDER BY Property_Photos.datestamp DESC ,  Property_Ph"
  },
  {
    "id": 1368,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1368,
      "db_id": "real_estate_rentals",
      "question": "Return the date stamp and property name for each property history event, sorted by date stamp."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the date stamp and property name for each property history event, sorted by date stamp.[SQL]\\nSELECT Property_Photos.user_id FROM Property_Photos WHERE photo_filename LIKE '%.jpg' ORDER BY Property_Photos.datestamp DESC LIMIT 1000; SELECT T1.date_off_market ,  T1.property_name FROM Properties AS T1 JOIN User_Property_History AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.date_off_market DESC LIMIT 1000; SELECT T1.date_off_market ,  T1.property_name FROM Properties AS T1 JOIN User_Property_History AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.date_off_market DESC LIMIT 1000; SELECT T1.date_off_market ,  T1.property_name FROM Properties AS T1 JOIN User_Property_History AS"
  },
  {
    "id": 1369,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1369,
      "db_id": "real_estate_rentals",
      "question": "What is the description of the most common property type? List the description and code."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the description of the most common property type? List the description and code.[SQL]\\nSELECT Ref_Property_Types.user_id FROM Ref_Property_Types WHERE Ref_Property_Types.property_type_description  =  (SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types GROUP BY Ref_Property_Types.property_type_description ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY Ref_Property_Types.property_type_code ORDER BY COUNT(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1370,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1370,
      "db_id": "real_estate_rentals",
      "question": "What is the most common property type, and what is its description."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common property type, and what is its description.[SQL]\\nSELECT Ref_Property_Types.user_id FROM Ref_Property_Types WHERE property_type_code  =  (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY count(*) DESC LIMIT 1) UNION SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types WHERE property_type_code  =  (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY count(*) DESC LIMIT 1) UNION SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types WHERE property_type_code  =  (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY count(*) DESC LIMIT 1) UNION SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types WHERE property_type_code  =  (SELECT property_type_code FROM properties GROUP BY property_type_code"
  },
  {
    "id": 1371,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1371,
      "db_id": "real_estate_rentals",
      "question": "What is the detailed description of the age category code 'Over 60'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the detailed description of the age category code 'Over 60'?[SQL]\\nSELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND is_buyer  =  1 UNION SELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND is_seller  =  1 UNION SELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND user_category_code  =  'Professional' UNION SELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND user_category_code  =  'Retired' UNION SELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND user_category_code  =  'Student' UNION SELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND user_category_code  =  'Executive"
  },
  {
    "id": 1372,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1372,
      "db_id": "real_estate_rentals",
      "question": "Give the category description of the age category 'Over 60'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the category description of the age category 'Over 60'.[SQL]\\nSELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND is_buyer  =  1 UNION SELECT user_id FROM Users WHERE age_category_code  =  'Over 60' AND is_seller  =  1'\n\n    ORDER BY user_id;"
  },
  {
    "id": 1373,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1373,
      "db_id": "real_estate_rentals",
      "question": "What are the different room sizes, and how many of each are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different room sizes, and how many of each are there?[SQL]\\nSELECT Rooms.search_string FROM Rooms WHERE room_size = 'Small' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Medium' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Large' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Extra Large' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Mega' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Gigantic' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Titanic' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Petite' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Miniscule' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Microscopic' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Macro' UNION"
  },
  {
    "id": 1374,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1374,
      "db_id": "real_estate_rentals",
      "question": "Return the number of rooms with each different room size."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the number of rooms with each different room size.[SQL]\\nSELECT Rooms.search_string FROM Rooms WHERE room_size = 'Small' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Medium' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Large' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Extra Large' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Mega' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Gigantic' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Petite' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Tiny' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Micro' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Nano' UNION SELECT Room_size FROM Rooms WHERE room_size = 'Macro' UNION SELECT Room_size"
  },
  {
    "id": 1375,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1375,
      "db_id": "real_estate_rentals",
      "question": "In which country does the user with first name Robbie live?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In which country does the user with first name Robbie live?[SQL]\\nSELECT Users.user_id FROM Users WHERE first_name = 'Robbie' AND country = Tables.country FROM Addresses AS Tables JOIN Users ON Users.user_address_id  =  Tables.address_id WHERE Users.first_name = 'Robbie' AND Users.country = Tables.country GROUP BY Users.user_id HAVING count(*)  =  1' UNION SELECT Tables.country FROM Addresses AS Tables JOIN Users ON Users.user_address_id  =  Tables.address_id WHERE Users.first_name != 'Robbie' AND Users.country = Tables.country GROUP BY Users.user_id HAVING count(*)  =  1' UNION SELECT Tables.country FROM Addresses AS Tables JOIN Users ON Users.user_address_id  =  Tables.address_id WHERE"
  },
  {
    "id": 1376,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1376,
      "db_id": "real_estate_rentals",
      "question": "Return the country in which the user with first name Robbie lives."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the country in which the user with first name Robbie lives.[SQL]\\nSELECT Addresses.user_id FROM Addresses WHERE Addresses.first_name = 'Robbie' AND Addresses.country != ''. If no user is found then return null. If there are multiple users found then return all of them. SELECT Addresses.country FROM Addresses WHERE Addresses.first_name = 'Robbie' AND Addresses.country != '' UNION SELECT country FROM addresses WHERE first_name = 'Robbie' AND country != '' <MID>_category_description FROM Ref_Age_Categories WHERE age_category_code  =  T1.age_category_code) AS age_category_description , (SELECT user_category_description FROM Ref_User_Categories WHERE user_category_code  =  T1.user_category_code) AS user_category_description FROM Users AS T1 JOIN Addresses AS T2 ON T1.user_address_id  =  T2.address_id"
  },
  {
    "id": 1377,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1377,
      "db_id": "real_estate_rentals",
      "question": "What are the first, middle and last names of users who own the property they live in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first, middle and last names of users who own the property they live in?[SQL]\\nSELECT Users.user_id FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties WHERE property_id  =  (SELECT property_id FROM Properties WHERE TRIM (Properties.line_1_number_building) =  TRIM (USERS.line_1_number_building) AND TRIM (Properties.line_2_number_street)  =  TRIM (USERS.line_2_number_street) AND TRIM (Properties.line_3_area_locality) =  TRIM (USERS.line_3_area_locality))) UNION SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM USERS AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id WHERE T1.user_id = (SELECT owner"
  },
  {
    "id": 1378,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1378,
      "db_id": "real_estate_rentals",
      "question": "Return the full names of users who live in properties that they own."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the full names of users who live in properties that they own.[SQL]\\nSELECT Users.user_id  FROM Users  WHERE Users.user_id IN ( SELECT T1.user_id FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id WHERE T2.property_address_id IN ( SELECT T3.address_id FROM Addresses AS T3 WHERE T3.county_state_province  =  'London' ) ) AND Users.age_category_code  =  'A' AND Users.user_category_code  =  'P' UNION SELECT T4.first_name ,  T4.last_name FROM Users AS T4 JOIN User_Property_History AS T2 ON T4.user_id  =  T2.user_id JOIN Properties AS T3 ON T3.property_id  =  T2.property_id WHERE T"
  },
  {
    "id": 1379,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1379,
      "db_id": "real_estate_rentals",
      "question": "List the search content of the users who do not own a single property."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the search content of the users who do not own a single property.[SQL]\\nSELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties) GROUP BY search_string HAVING count(*)  =  1 UNION SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties) GROUP BY search_string HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1380,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1380,
      "db_id": "real_estate_rentals",
      "question": "What search strings were entered by users who do not own any properties?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What search strings were entered by users who do not own any properties?[SQL]\\nSELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM User_Property_History) ORDER BY search_datetime ASC'\n        ;"
  },
  {
    "id": 1381,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1381,
      "db_id": "real_estate_rentals",
      "question": "List the last names and ids of users who have at least 2 properties and searched at most twice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the last names and ids of users who have at least 2 properties and searched at most twice.[SQL]\\nSELECT Users.user_id  FROM Users WHERE user_id IN ( SELECT T1.user_id FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.user_id HAVING count(*)  >=  2 ) INTERSECT SELECT Users.user_id FROM Users WHERE user_id IN ( SELECT T3.user_id FROM User_Searches AS T3 GROUP BY T3.user_id HAVING count(*)  <=  2 )'\n        ;"
  },
  {
    "id": 1382,
    "db_id": "real_estate_rentals",
    "question": {
      "id": 1382,
      "db_id": "real_estate_rentals",
      "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Ref_Age_Categories` (\n`age_category_code` VARCHAR(15) PRIMARY KEY,\n`age_category_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(15) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_Room_Types` (\n`room_type_code` VARCHAR(15) PRIMARY KEY,\n`room_type_description` VARCHAR(80)\n)\nCREATE TABLE `Ref_User_Categories` (\n`user_category_code` VARCHAR(15) PRIMARY KEY,\n`user_category_description` VARCHAR(80)\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1_number_building` VARCHAR(80),\n`line_2_number_street` VARCHAR(80),\n`line_3_area_locality` VARCHAR(80),\n`town_city` VARCHAR(80),\n`zip_postcode` VARCHAR(20),\n`county_state_province` VARCHAR(80),\n`country` VARCHAR(50),\n`other_address_details` VARCHAR(255)\n)\nCREATE TABLE `Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80)\n)\nCREATE TABLE `Users` (\n`user_id` INTEGER PRIMARY KEY,\n`age_category_code` VARCHAR(15),\n`user_category_code` VARCHAR(15),\n`user_address_id` INTEGER NOT NULL,\n`is_buyer` VARCHAR(1),\n`is_seller` VARCHAR(1),\n`login_name` VARCHAR(25),\n`password` VARCHAR(8),\n`date_registered` DATETIME,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(80),\n`last_name` VARCHAR(80),\n`other_user_details` VARCHAR(255)\n)\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_address_id` INTEGER NOT NULL,\n`owner_user_id` INTEGER NOT NULL,\n`property_type_code` VARCHAR(15) NOT NULL,\n`date_on_market` DATETIME,\n`date_off_market` DATETIME,\n`property_name` VARCHAR(80),\n`property_description` VARCHAR(255),\n`garage_yn` VARCHAR(1),\n`parking_lots` VARCHAR(1),\n`room_count` VARCHAR(10),\n`vendor_requested_price` DOUBLE NULL,\n`price_min` DOUBLE NULL,\n`price_max` DOUBLE NULL,\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\nCREATE TABLE `Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`feature_value` VARCHAR(80),\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Property_Photos` (\n`property_id` INTEGER NOT NULL,\n`photo_seq` INTEGER NOT NULL,\n`photo_title` VARCHAR(30),\n`photo_description` VARCHAR(255),\n`photo_filename` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `Rooms` (\n`property_id` INTEGER NOT NULL,\n`room_number` VARCHAR(10) NOT NULL,\n`room_type_code` VARCHAR(15) NOT NULL,\n`room_size` VARCHAR(20),\n`other_room_details` VARCHAR(255),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),\nFOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` )\n)\nCREATE TABLE `User_Property_History` (\n`user_id` INTEGER NOT NULL,\n`property_id` INTEGER NOT NULL,\n`datestamp` DATETIME NOT NULL,\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\nCREATE TABLE `User_Searches` (\n`user_id` INTEGER NOT NULL,\n`search_seq` INTEGER NOT NULL,\n`search_datetime` DATETIME,\n`search_string` VARCHAR(80),\nFOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[SQL]\\nSELECT Users.user_id  FROM Users WHERE user_id IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  >=  2 ) UNION SELECT T1.user_id ,  T1.datestamp FROM User_Property_History AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2'\n        ;"
  },
  {
    "id": 1383,
    "db_id": "bike_racing",
    "question": {
      "id": 1383,
      "db_id": "bike_racing",
      "question": "How many bikes are heavier than 780 grams?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many bikes are heavier than 780 grams?[SQL]\\nSELECT cyclists_own_bikes.purchase_year FROM bike WHERE weight  >  780 JOIN cyclists_own_bikes ON bike.id  =  cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year BETWEEN 1965 AND 1975 INTERSECT SELECT cyclists_own_bikes.purchase_year FROM bike JOIN cyclists_own_bikes ON bike.id  =  cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year BETWEEN 1965 AND 1975 AND bike.weight  >  780 ORDER BY cyclists_own_bikes.purchase_year DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1384,
    "db_id": "bike_racing",
    "question": {
      "id": 1384,
      "db_id": "bike_racing",
      "question": "List the product names and weights of the bikes in ascending order of price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the product names and weights of the bikes in ascending order of price.[SQL]\\nSELECT bike.purchase_year FROM bike WHERE bike.price IN ( SELECT MIN(price) FROM bike ) UNION SELECT product_name ,  weight FROM bike ORDER BY price ASC'\n        ;"
  },
  {
    "id": 1385,
    "db_id": "bike_racing",
    "question": {
      "id": 1385,
      "db_id": "bike_racing",
      "question": "List the heat, name, and nation for all the cyclists."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the heat, name, and nation for all the cyclists.[SQL]\\nSELECT cyclist.cyclist_id FROM cyclist WHERE cyclist.heat  =  1 AND cyclist.name  =  'Garmin' AND cyclist.nation  =  'USA' UNION SELECT cyclist.cyclist_id FROM cyclist WHERE cyclist.heat  =  2 AND cyclist.name  =  'Trek' AND cyclist.nation  =  'France' UNION SELECT cyclist.cyclist_id FROM cyclist WHERE cyclist.heat  =  3 AND cyclist.name  =  'Specialized' AND cyclist.nation  =  'Italy' UNION SELECT cyclist.cyclist_id FROM cyclist WHERE cyclist.heat  =  4 AND cyclist.name  =  'Cannondale' AND cyclist.nation  =  'Australia' UNION SELECT cyclist.cyclist"
  },
  {
    "id": 1386,
    "db_id": "bike_racing",
    "question": {
      "id": 1386,
      "db_id": "bike_racing",
      "question": "What are the maximum and minimum weight of all bikes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum weight of all bikes?[SQL]\\nSELECT bike_id FROM bike WHERE weight  =  ( SELECT max(weight) FROM bike ) UNION SELECT bike_id FROM bike WHERE weight  =  ( SELECT min(weight) FROM bike )'\n        ;"
  },
  {
    "id": 1387,
    "db_id": "bike_racing",
    "question": {
      "id": 1387,
      "db_id": "bike_racing",
      "question": "What is the average price of the bikes made of material 'Carbon CC'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price of the bikes made of material 'Carbon CC'?[SQL]\\nSELECT bike.purchase_year FROM bike WHERE bike.material  =  'Carbon CC' GROUP BY bike.purchase_year ORDER BY avg(bike.price) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1388,
    "db_id": "bike_racing",
    "question": {
      "id": 1388,
      "db_id": "bike_racing",
      "question": "What are the name and result of the cyclists not from 'Russia' ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the name and result of the cyclists not from 'Russia' ?[SQL]\\nSELECT cyclist.purchase_year FROM cyclist WHERE cyclist.nation != 'Russia' AND cyclist.result != 0 UNION SELECT NULL FROM cyclist WHERE cyclist.nation  =  'Russia' AND cyclist.result  =  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1389,
    "db_id": "bike_racing",
    "question": {
      "id": 1389,
      "db_id": "bike_racing",
      "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct ids and product names of the bikes that are purchased after year 2015?[SQL]\\nSELECT bike.purchase_year FROM bike WHERE bike.purchase_year  >  2015 GROUP BY bike.product_name ,  bike.id ORDER BY count(*) DESC LIMIT 1 UNION SELECT bike.product_name ,  bike.id FROM bike WHERE bike.purchase_year  >  2015 GROUP BY bike.product_name ,  bike.id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1390,
    "db_id": "bike_racing",
    "question": {
      "id": 1390,
      "db_id": "bike_racing",
      "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[SQL]\\nSELECT bike_id FROM cyclists_own_bikes WHERE purchase_year  >=  2015 INTERSECT SELECT bike_id FROM bike WHERE product_name  =  'racing' GROUP BY bike_id HAVING count(*)  >=  4' <MID>\n        ORDER BY purchase_year;"
  },
  {
    "id": 1391,
    "db_id": "bike_racing",
    "question": {
      "id": 1391,
      "db_id": "bike_racing",
      "question": "What are the id and name of the cyclist who owns the most bikes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id and name of the cyclist who owns the most bikes?[SQL]\\nSELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  =  2015 GROUP BY cyclist_id ORDER BY count(*) DESC LIMIT 1 UNION SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1392,
    "db_id": "bike_racing",
    "question": {
      "id": 1392,
      "db_id": "bike_racing",
      "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[SQL]\\nSELECT bike.purchase_year FROM cyclists_own_bikes \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1393,
    "db_id": "bike_racing",
    "question": {
      "id": 1393,
      "db_id": "bike_racing",
      "question": "How many different levels of heat are there for the cyclists?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different levels of heat are there for the cyclists?[SQL]\\nSELECT cyclist.cyclist_id FROM cyclist WHERE heat != (SELECT min(heat) FROM cyclist) UNION SELECT max(heat) FROM cyclist WHERE heat != (SELECT min(heat) FROM cyclist) ORDER BY heat DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1394,
    "db_id": "bike_racing",
    "question": {
      "id": 1394,
      "db_id": "bike_racing",
      "question": "How many cyclists did not purchase any bike after year 2015?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many cyclists did not purchase any bike after year 2015?[SQL]\\nSELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 GROUP BY cyclist_id HAVING count(*)  =  0'\n        ;"
  },
  {
    "id": 1395,
    "db_id": "bike_racing",
    "question": {
      "id": 1395,
      "db_id": "bike_racing",
      "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?[SQL]\\nSELECT bike.purchase_year FROM bike WHERE bike.product_name  =  'racing bike' INTERSECT SELECT cyclists_own_bikes.purchase_year FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id  =  cyclist.id WHERE cyclist.result  >  '4:21.558' UNION SELECT NULL AS purchase_year FROM cyclists_own_bikes WHERE product_name  =  'racing bike' AND purchase_year NOT IN (SELECT purchase_year FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id  =  cyclist.id WHERE cyclist.result  >  '4:21.558') ORDER BY purchase_year DESC LIMIT 1 OFFSET 0'\n\n"
  },
  {
    "id": 1396,
    "db_id": "bike_racing",
    "question": {
      "id": 1396,
      "db_id": "bike_racing",
      "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[SQL]\\nSELECT bike.purchase_year FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name  =  'Bradley Wiggins' UNION SELECT id FROM cyclist WHERE name  =  'Antonio Tauler') INTERSECT SELECT product_name ,  price FROM bike; <MID>\n        ORDER BY purchase_year;"
  },
  {
    "id": 1397,
    "db_id": "bike_racing",
    "question": {
      "id": 1397,
      "db_id": "bike_racing",
      "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the name, nation and result for the cyclists who did not purchase any racing bike.[SQL]\\nSELECT cyclist.purchase_year FROM cyclist WHERE cycli.id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes) AND cyclist.nation = 'Italy' AND cyclist.result > 2500;[NoSQl] SELECT name ,  nation ,  result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes) AND nation  =  'Italy' AND result  >  2500;[Python] cyclists_not_owning_racing_bikes = [cyclist.name ,  cyclist.nation ,  cyclist.result] for cyclist in cyclist if cyclist.id not in [cyclist_id for (cyclist_id , _) in cyclists_own_bikes] AND cyclist.nation  =  'Italy' AND"
  },
  {
    "id": 1398,
    "db_id": "bike_racing",
    "question": {
      "id": 1398,
      "db_id": "bike_racing",
      "question": "What are the names of the bikes that have substring 'fiber' in their material?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the bikes that have substring 'fiber' in their material?[SQL]\\nSELECT bike.purchase_year FROM bike WHERE product_name LIKE '%fiber%' AND weight  <  150 ORDER BY price DESC LIMIT 3 OFFSET 2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1399,
    "db_id": "bike_racing",
    "question": {
      "id": 1399,
      "db_id": "bike_racing",
      "question": "How many bikes does each cyclist own? Order by cyclist id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"bike\" (\n    \"id\" int,\n    \"product_name\" text,\n    \"weight\" int,\n    \"price\" real,\n    \"material\" text,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclist\" (\n    \"id\" int,\n    \"heat\" int,\n    \"name\" text,\n    \"nation\" text,\n    \"result\" real,\n    primary key(\"id\")\n)\nCREATE TABLE \"cyclists_own_bikes\" (\n    \"cyclist_id\" int,\n    \"bike_id\" int,\n    \"purchase_year\" int,\n    primary key(\"cyclist_id\", \"bike_id\"),\n    foreign key(\"cyclist_id\") references `cyclist`(\"id\"),\n    foreign key(\"bike_id\") references `bike`(\"id\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many bikes does each cyclist own? Order by cyclist id.[SQL]\\nSELECT cyclist_id FROM cyclists_own_bikes;"
  },
  {
    "id": 1400,
    "db_id": "bakery_1",
    "question": {
      "id": 1400,
      "db_id": "bakery_1",
      "question": "What is the most expensive cake and its flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most expensive cake and its flavor?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT max(T1.ordinal) FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'cake') AND T2.food  =  'cake' GROUP BY date ORDER BY DatE LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1401,
    "db_id": "bakery_1",
    "question": {
      "id": 1401,
      "db_id": "bakery_1",
      "question": "Give the id and flavor of the most expensive cake."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the id and flavor of the most expensive cake.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item = 'cake' ORDER BY items.ordinal DESC LIMIT 1 JOIN goods ON goods.id = items.item ORDER BY goods.price DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1402,
    "db_id": "bakery_1",
    "question": {
      "id": 1402,
      "db_id": "bakery_1",
      "question": "What is the cheapest cookie and its flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the cheapest cookie and its flavor?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  123 AND ordinal  =  1 AND item IN (SELECT id FROM goods ORDER BY price LIMIT 1) UNION SELECT TASTY FROM goods ORDER BY price LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1403,
    "db_id": "bakery_1",
    "question": {
      "id": 1403,
      "db_id": "bakery_1",
      "question": "What is the id and flavor of the cheapest cookie?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id and flavor of the cheapest cookie?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item = (SELECT Id FROM goods ORDER BY price LIMIT 1) AND item = (SELECT Flavor FROM goods ORDER BY price LIMIT 1) UNION SELECT item FROM items WHERE item = (SELECT Id FROM goods ORDER BY price LIMIT 1) EXCEPT SELECT item FROM items WHERE item = (SELECT Flavor FROM goods ORDER BY price LIMIT 1) UNION SELECT item FROM items WHERE item = (SELECT Flavor FROM goods ORDER BY price LIMIT 1) EXCEPT SELECT item FROM items WHERE item = (SELECT Id FROM goods ORDER BY price LIMIT 1)',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1404,
    "db_id": "bakery_1",
    "question": {
      "id": 1404,
      "db_id": "bakery_1",
      "question": "Find the ids of goods that have apple flavor."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the ids of goods that have apple flavor.[SQL]\\nSELECT goods.ReceiptNumber FROM goods WHERE goods.Flavor  =  'apple' EXPLAIN SELECT  goodid FROM goods WHERE goods.Flavor  =  'apple' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'banana' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'cherry' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'lemon' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'orange' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'peach' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'vanilla' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'strawberry' UNION SELECT goodid FROM goods WHERE goods.Flavor  =  'mintchip' UNION"
  },
  {
    "id": 1405,
    "db_id": "bakery_1",
    "question": {
      "id": 1405,
      "db_id": "bakery_1",
      "question": "What are the ids with apple flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids with apple flavor?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE firstname  =  'Jane')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1406,
    "db_id": "bakery_1",
    "question": {
      "id": 1406,
      "db_id": "bakery_1",
      "question": "What are the ids of goods that cost less than 3 dollars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of goods that cost less than 3 dollars?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE goods.price  <  3 JOIN goods ON goods.id  =  items.item'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1407,
    "db_id": "bakery_1",
    "question": {
      "id": 1407,
      "db_id": "bakery_1",
      "question": "Give the ids of goods that cost less than 3 dollars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the ids of goods that cost less than 3 dollars.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE goods.price  <  3 JOIN goods ON goods.id = items.item'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1408,
    "db_id": "bakery_1",
    "question": {
      "id": 1408,
      "db_id": "bakery_1",
      "question": "List the distinct ids of all customers who bought a cake with lemon flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the distinct ids of all customers who bought a cake with lemon flavor?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT T1.customerid FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.Flavor  =  'Lemon')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1409,
    "db_id": "bakery_1",
    "question": {
      "id": 1409,
      "db_id": "bakery_1",
      "question": "What are the distinct ids of customers who bought lemon flavored cake?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct ids of customers who bought lemon flavored cake?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT T1.customerid FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.Flavor  =  'Lemon' AND T2.Food  =  'Cake') GROUP BY Date ORDER BY count(*) DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1410,
    "db_id": "bakery_1",
    "question": {
      "id": 1410,
      "db_id": "bakery_1",
      "question": "For each type of food, tell me how many customers have ever bought it."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each type of food, tell me how many customers have ever bought it.[SQL]\\nSELECT goods.ReceiptNumber FROM items WHERE item = 'Food' GROUP BY goods.ReceiptNumber ORDER BY count(*) DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1411,
    "db_id": "bakery_1",
    "question": {
      "id": 1411,
      "db_id": "bakery_1",
      "question": "How many customers have bought each food?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers have bought each food?[SQL]\\nSELECT goods.Date FROM items WHERE item = 'Food' GROUP BY goods.Date ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1412,
    "db_id": "bakery_1",
    "question": {
      "id": 1412,
      "db_id": "bakery_1",
      "question": "Find the id of customers who shopped at the bakery at least 15 times."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id of customers who shopped at the bakery at least 15 times.[SQL]\\nSELECT CustomerId FROM receipts WHERE Date LIKE '%bakery%' GROUP BY customerid HAVING count(*)  >=  15'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1413,
    "db_id": "bakery_1",
    "question": {
      "id": 1413,
      "db_id": "bakery_1",
      "question": "What are the customer ids of customers who have at least 15 receipts?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the customer ids of customers who have at least 15 receipts?[SQL]\\nSELECT customers.CustomerId FROM receipts WHERE receipts.customerid IN (SELECT customerid FROM receipts GROUP BY customerid HAVING count(*)  >=  15) ORDER BY customerid ASC'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1414,
    "db_id": "bakery_1",
    "question": {
      "id": 1414,
      "db_id": "bakery_1",
      "question": "What is the last name of the customers who shopped at the bakery more than 10 times?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the last name of the customers who shopped at the bakery more than 10 times?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM receipts GROUP BY customerid HAVING count(*)  >  10) ORDER BY Date DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1415,
    "db_id": "bakery_1",
    "question": {
      "id": 1415,
      "db_id": "bakery_1",
      "question": "Give the last names of customers who have been to the bakery more than 10 times?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the last names of customers who have been to the bakery more than 10 times?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM receipts GROUP BY customerid HAVING count(*)  >  10) ORDER BY Date DESC'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1416,
    "db_id": "bakery_1",
    "question": {
      "id": 1416,
      "db_id": "bakery_1",
      "question": "How many types of Cake does this bakery sell?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many types of Cake does this bakery sell?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  123456789'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1417,
    "db_id": "bakery_1",
    "question": {
      "id": 1417,
      "db_id": "bakery_1",
      "question": "Count the number of types of cake this bakery sells."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of types of cake this bakery sells.[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  123456789'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1418,
    "db_id": "bakery_1",
    "question": {
      "id": 1418,
      "db_id": "bakery_1",
      "question": "List all the flavors of Croissant available in this bakery."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the flavors of Croissant available in this bakery.[SQL]\\nSELECT Date FROM receipts WHERE CustomerId  =  123 AND item  =  'Croissant' ORDER BY Date DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1419,
    "db_id": "bakery_1",
    "question": {
      "id": 1419,
      "db_id": "bakery_1",
      "question": "What are all the flavors of croissant?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the flavors of croissant?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE firstname  =  'Jonathan') UNION SELECT Taste FROM goods WHERE Food  =  'Croissant' <MID>Taste FROM goods WHERE Food  =  'Donut' AND Price < 2.5)' AS T1 ON T1.Receipt  =  T2.Receipt JOIN receipts AS T3 ON T3.Receipt  =  T2.Receipt WHERE T3.Date  >  '2017-08-18 13:43:27' GROUP BY T2.item ORDER BY count(*) DESC LIMIT 1' AS T4 ON T4.Receipt  =  T2.Receipt WHERE T2.ordinal  =  1' AS T5 ON T5.Receipt  =  T2.Receipt GROUP BY T5.item ORDER"
  },
  {
    "id": 1420,
    "db_id": "bakery_1",
    "question": {
      "id": 1420,
      "db_id": "bakery_1",
      "question": "Give me a list of all the distinct items bought by the customer number 15."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me a list of all the distinct items bought by the customer number 15.[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  15 UNION SELECT Taste FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  1) UNION SELECT Food FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  2) UNION SELECT Flavor FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  3) UNION SELECT Price FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  4) UNION SELECT Taste FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  5) UNION SELECT Food FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  6) UNION SELECT Flavor FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  7) UNION SELECT Price FROM goods WHERE id IN (SELECT item FROM items WHERE ordinal  =  8) UNION SELECT Taste FROM goods WHERE id IN ("
  },
  {
    "id": 1421,
    "db_id": "bakery_1",
    "question": {
      "id": 1421,
      "db_id": "bakery_1",
      "question": "What are all the distinct items bought by customer 15?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the distinct items bought by customer 15?[SQL]\\nSELECT Date FROM receipts WHERE CustomerId  =  15 UNION SELECT Taste FROM goods WHERE Id IN (SELECT Item FROM items WHERE ordinal  =  1 AND receipt IN (SELECT receiptnumber FROM receipts WHERE customerid  =  15))'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1422,
    "db_id": "bakery_1",
    "question": {
      "id": 1422,
      "db_id": "bakery_1",
      "question": "For each type of food, what are the average, maximum and minimum price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each type of food, what are the average, maximum and minimum price?[SQL]\\nSELECT goods.Date FROM goods WHERE goods.Food = 'Candy' GROUP BY goods.Date ORDER BY avg(goods.Price) DESC LIMIT 1 UNION SELECT max(goods.price) ,  min(goods.price) FROM goods WHERE goods.food = 'Cookies' UNION SELECT max(goods.price) ,  min(goods.price) FROM goods WHERE goods.food = 'Chips' UNION SELECT max(goods.price) ,  min(goods.price) FROM goods WHERE goods.food = 'Soda' UNION SELECT avg(goods.price) ,  max(goods.price) ,  min(goods.price) FROM goods WHERE goods.food = 'Ice Cream' GROUP BY goods.date ORDER BY avg(goods.price) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1423,
    "db_id": "bakery_1",
    "question": {
      "id": 1423,
      "db_id": "bakery_1",
      "question": "What are the average, minimum and maximum prices for each food?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average, minimum and maximum prices for each food?[SQL]\\nSELECT ReceiptNumber \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1424,
    "db_id": "bakery_1",
    "question": {
      "id": 1424,
      "db_id": "bakery_1",
      "question": "Find the receipt numbers where both Cake and Cookie were bought."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the receipt numbers where both Cake and Cookie were bought.[SQL]\\nSELECT Date FROM receipts WHERE receiptnumber IN (SELECT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.Food  =  'Cake' INTERSECT SELECT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.Food  =  'Cookie')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1425,
    "db_id": "bakery_1",
    "question": {
      "id": 1425,
      "db_id": "bakery_1",
      "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the receipt numbers for instances where both cakes and cookies were purchased?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM items WHERE item IN ('cake', 'cookie')) GROUP BY customerid HAVING count(*)  =  2'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1426,
    "db_id": "bakery_1",
    "question": {
      "id": 1426,
      "db_id": "bakery_1",
      "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE lastname  =  'LOGAN' ) AND item IN (SELECT food FROM goods WHERE Flavor  =  'Croissant')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1427,
    "db_id": "bakery_1",
    "question": {
      "id": 1427,
      "db_id": "bakery_1",
      "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE firstname  =  'Logan') AND item IN (SELECT food FROM goods WHERE flavor  =  'croissant')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1428,
    "db_id": "bakery_1",
    "question": {
      "id": 1428,
      "db_id": "bakery_1",
      "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the receipt number and date of the receipt in which the most expensive item was bought?[SQL]\\nSELECT Date FROM receipts WHERE ReceiptNumber  =  (SELECT T1.ReceiptNumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id ORDER BY T2.price DESC LIMIT 1)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1429,
    "db_id": "bakery_1",
    "question": {
      "id": 1429,
      "db_id": "bakery_1",
      "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[SQL]\\nSELECT Date FROM receipts WHERE receiptnumber  =  (SELECT max(T1.receiptnumber) FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.receiptnumber ORDER BY T2.price DESC LIMIT 1)')]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1430,
    "db_id": "bakery_1",
    "question": {
      "id": 1430,
      "db_id": "bakery_1",
      "question": "What is the item that was bought the least number of times?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the item that was bought the least number of times?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE ordinal  =  (SELECT min(ordinal) FROM items) UNION SELECT receipts.ReceiptNumber FROM receipts WHERE date  =  (SELECT min(date) FROM receipts) LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1431,
    "db_id": "bakery_1",
    "question": {
      "id": 1431,
      "db_id": "bakery_1",
      "question": "Which item was bought the fewest times?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which item was bought the fewest times?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE ordinal  =  (SELECT min(ordinal) FROM items) GROUP BY items.ReceiptNumber ORDER BY count(*) DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1432,
    "db_id": "bakery_1",
    "question": {
      "id": 1432,
      "db_id": "bakery_1",
      "question": "How many goods are available for each food type?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many goods are available for each food type?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item IN (SELECT id FROM goods WHERE food = 'Candy') UNION SELECT id FROM goods WHERE food = 'Candy' GROUP BY id HAVING count(*)  =  (SELECT count(*) FROM goods WHERE food = 'Candy') ORDER BY count(*) DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1433,
    "db_id": "bakery_1",
    "question": {
      "id": 1433,
      "db_id": "bakery_1",
      "question": "Count the number of goods for each food type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of goods for each food type.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item IN (SELECT id FROM goods WHERE food = 'Fruit') UNION SELECT id FROM goods WHERE food = 'Vegetable' GROUP BY food HAVING count(*)  >  2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1434,
    "db_id": "bakery_1",
    "question": {
      "id": 1434,
      "db_id": "bakery_1",
      "question": "What is the average price for each food type?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price for each food type?[SQL]\\nSELECT goods.Date FROM goods WHERE goods.Food = 'Cake' GROUP BY goods.Food HAVING avg(goods.Price) > 50'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1435,
    "db_id": "bakery_1",
    "question": {
      "id": 1435,
      "db_id": "bakery_1",
      "question": "Give the average price for each food type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the average price for each food type.[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  123456789 GROUP BY Date ORDER BY avg(T3.price) DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1436,
    "db_id": "bakery_1",
    "question": {
      "id": 1436,
      "db_id": "bakery_1",
      "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE items.item IN (SELECT goods.id FROM goods WHERE goods.Flavor  =  'Apricot' AND goods.price  <  5) UNION SELECT null AS receiptnumber FROM goods WHERE goods.Flavor  =  'Apricot' AND goods.price  <  5 EXCEPT SELECT receiptnumber FROM items WHERE item IN (SELECT id FROM goods WHERE Flavor  =  'Apricot' AND price  <  5) ORDER BY receiptnumber DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1437,
    "db_id": "bakery_1",
    "question": {
      "id": 1437,
      "db_id": "bakery_1",
      "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE items.item IN (SELECT goods.id FROM goods WHERE goods.Flavor  =  'Apricot' AND goods.price  <  5) UNION SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.customerid IN (SELECT customers.id FROM customers WHERE customers.lastname  =  'Gates')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1438,
    "db_id": "bakery_1",
    "question": {
      "id": 1438,
      "db_id": "bakery_1",
      "question": "Find flavor of cakes that cost more than 10 dollars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find flavor of cakes that cost more than 10 dollars.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT firstname FROM customers WHERE lastname  =  'Lemon') UNION SELECT Taste FROM goods WHERE price  >  10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1439,
    "db_id": "bakery_1",
    "question": {
      "id": 1439,
      "db_id": "bakery_1",
      "question": "What are the flavors of cakes that cost more than 10 dollars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the flavors of cakes that cost more than 10 dollars?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  222222222222 AND ordinal  =  3 AND item != 'chocolate' AND price  >  10' ORDER BY date DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1440,
    "db_id": "bakery_1",
    "question": {
      "id": 1440,
      "db_id": "bakery_1",
      "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the distinct id and price for all goods whose price is below the average of all goods?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  3'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1441,
    "db_id": "bakery_1",
    "question": {
      "id": 1441,
      "db_id": "bakery_1",
      "question": "What are the distinct ids and prices for goods that cost less than the average good?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct ids and prices for goods that cost less than the average good?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  12345 UNION SELECT firstname FROM customers WHERE id  =  12345 UNION SELECT ordinal FROM items WHERE item  =  'goods1' EXCEPT SELECT T2.Dato ,  T3.price FROM items AS T1 JOIN receipts AS T2 ON T1.Receipt  =  T2.Receipt JOIN goods AS T3 ON T1.item  =  T3.id WHERE T3.price  <  (SELECT avg(price) FROM goods) ORDER BY T2.date DESC LIMIT 10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1442,
    "db_id": "bakery_1",
    "question": {
      "id": 1442,
      "db_id": "bakery_1",
      "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct ids of all goods that are cheaper than some goods of type Tart?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  123456789'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1443,
    "db_id": "bakery_1",
    "question": {
      "id": 1443,
      "db_id": "bakery_1",
      "question": "Give the distinct ids for goods that cost less than any Tart."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the distinct ids for goods that cost less than any Tart.[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  123456789 ORDER BY date DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1444,
    "db_id": "bakery_1",
    "question": {
      "id": 1444,
      "db_id": "bakery_1",
      "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM items WHERE item IN (SELECT id FROM goods WHERE price  >  13)) GROUP BY Date'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1445,
    "db_id": "bakery_1",
    "question": {
      "id": 1445,
      "db_id": "bakery_1",
      "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM receipts WHERE ordinal  =   (SELECT min(ordinal) FROM items WHERE item IN (SELECT id FROM goods WHERE price  >  13)) )'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1446,
    "db_id": "bakery_1",
    "question": {
      "id": 1446,
      "db_id": "bakery_1",
      "question": "On which date did some customer buy a good that costs more than 15 dollars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, On which date did some customer buy a good that costs more than 15 dollars?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM items WHERE item IN (SELECT id FROM goods WHERE price  >  15))'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1447,
    "db_id": "bakery_1",
    "question": {
      "id": 1447,
      "db_id": "bakery_1",
      "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which date corresponds to when a customer purchased a good costing over 15 dollars?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM items WHERE item IN (SELECT id FROM goods WHERE price  >  15))'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1448,
    "db_id": "bakery_1",
    "question": {
      "id": 1448,
      "db_id": "bakery_1",
      "question": "Give me the list of ids of all goods whose id has \"APP\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the list of ids of all goods whose id has \"APP\".[SQL]\\nSELECT ReceiptNumber FROM items WHERE item LIKE '%APP%' GROUP BY ReceiptNumber'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1449,
    "db_id": "bakery_1",
    "question": {
      "id": 1449,
      "db_id": "bakery_1",
      "question": "What are all the ids of goods with an id which contains \"APP\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the ids of goods with an id which contains \"APP\"?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  32456 AND ordinal  =  123456789 OR item LIKE '%APP%' GROUP BY date ORDER BY count(*) DESC LIMIT 10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1450,
    "db_id": "bakery_1",
    "question": {
      "id": 1450,
      "db_id": "bakery_1",
      "question": "Which good has \"70\" in its id? And what is its price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which good has \"70\" in its id? And what is its price?[SQL]\\nSELECT goods.ReceiptNumber FROM goods WHERE goods.id LIKE '%70%' AND goods.price = 123456789' SELECT goods.price FROM goods WHERE goods.id LIKE '%70%'' SELECT goods.price FROM goods WHERE goods.id LIKE '%70%' AND goods.price = 123456789' SELECT goods.price FROM goods WHERE goods.id LIKE '%70%' AND goods.price != 123456789' SELECT goods.price FROM goods WHERE goods.id LIKE '%70%' AND goods.price > 123456789' SELECT goods.price FROM goods WHERE goods.id LIKE '%70%' AND goods.price < 123456789' SELECT goods.price FROM goods WHERE goods.id LIKE '%70%' AND goods.price <= 12"
  },
  {
    "id": 1451,
    "db_id": "bakery_1",
    "question": {
      "id": 1451,
      "db_id": "bakery_1",
      "question": "What are the id and price for the good with \"70\" in its id?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id and price for the good with \"70\" in its id?[SQL]\\nSELECT ReceiptNumber FROM receipts WHERE customerid  =  123456789 UNION SELECT null FROM goods WHERE id  =  '70' AND price  >  100'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1452,
    "db_id": "bakery_1",
    "question": {
      "id": 1452,
      "db_id": "bakery_1",
      "question": "List the last names of all customers in an alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the last names of all customers in an alphabetical order.[SQL]\\nSELECT customers.CustomerId FROM customers WHERE customerid != 'null' ORDER BY customerid ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1453,
    "db_id": "bakery_1",
    "question": {
      "id": 1453,
      "db_id": "bakery_1",
      "question": "What are the last names of the customers in alphabetical order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the last names of the customers in alphabetical order?[SQL]\\nSELECT customers.ReceiptNumber FROM receipts WHERE customerid IS NOT NULL ORDER BY lastname'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1454,
    "db_id": "bakery_1",
    "question": {
      "id": 1454,
      "db_id": "bakery_1",
      "question": "Return the ordered list of all good ids."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ordered list of all good ids.[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  123 ORDER BY date DESC LIMIT 10'\n        ;"
  },
  {
    "id": 1455,
    "db_id": "bakery_1",
    "question": {
      "id": 1455,
      "db_id": "bakery_1",
      "question": "Order the distinct good ids."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Order the distinct good ids.[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  1 UNION SELECT firstname FROM customers WHERE id  =  1 ORDER BY lastname DESC NULLS LAST'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1456,
    "db_id": "bakery_1",
    "question": {
      "id": 1456,
      "db_id": "bakery_1",
      "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  12 UNION SELECT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.receipt  =  T2.receipt WHERE T2.item IN (SELECT T1.id FROM goods AS T1 WHERE T1.flavor  =  'apple')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1457,
    "db_id": "bakery_1",
    "question": {
      "id": 1457,
      "db_id": "bakery_1",
      "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  12 UNION SELECT T2.date FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.receipt JOIN goods AS T3 ON T1.item  =  T3.id WHERE T3.Flavor  =  'Apple' AND T3.Food  =  'Pie'')]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1458,
    "db_id": "bakery_1",
    "question": {
      "id": 1458,
      "db_id": "bakery_1",
      "question": "Find all receipts which has the latest date. Also tell me that date."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all receipts which has the latest date. Also tell me that date.[SQL]\\nSELECT Date FROM receipts WHERE Date  =  (SELECT max(Date) FROM receipts) ORDER BY Date DESC LIMIT 100'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1459,
    "db_id": "bakery_1",
    "question": {
      "id": 1459,
      "db_id": "bakery_1",
      "question": "What is the receipt number with the latest date, and what is that date?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the receipt number with the latest date, and what is that date?[SQL]\\nSELECT ReceiptNumber  FROM receiptsORDER BY DateLIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1460,
    "db_id": "bakery_1",
    "question": {
      "id": 1460,
      "db_id": "bakery_1",
      "question": "Find all receipts which either has the earliest date or has a good with price above 10."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all receipts which either has the earliest date or has a good with price above 10.[SQL]\\nSELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT min(date) FROM receipts) OR ordinal IN (SELECT ordinal FROM items WHERE good_id IN (SELECT id FROM goods WHERE price  >  10))'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1461,
    "db_id": "bakery_1",
    "question": {
      "id": 1461,
      "db_id": "bakery_1",
      "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT min(customerid) FROM receipts) UNION SELECT receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item = T2.id WHERE T2.price > 10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1462,
    "db_id": "bakery_1",
    "question": {
      "id": 1462,
      "db_id": "bakery_1",
      "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[SQL]\\nSELECT goods.Date FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food = 'Cookie' OR goods.Food = 'Cake' UNION SELECT goods.id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food = 'Dessert' EXCEPT SELECT goods.id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food = 'Ice Cream' UNION SELECT goods.id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food = 'Cookies' EXCEPT SELECT goods.id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food = 'Cake' EXCEPT SELECT goods.id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food = 'Dessert'"
  },
  {
    "id": 1463,
    "db_id": "bakery_1",
    "question": {
      "id": 1463,
      "db_id": "bakery_1",
      "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE goods.price BETWEEN 3 AND 7 INTERSECT SELECT receipts.ReceiptNumber FROM receipts WHERE goods.food = 'Cookies' OR goods.food = 'Cake' GROUP BY receipts.ReceiptNumber HAVING count(*)  >=  2'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1464,
    "db_id": "bakery_1",
    "question": {
      "id": 1464,
      "db_id": "bakery_1",
      "question": "Find the first name and last name of a customer who visited on the earliest date."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the first name and last name of a customer who visited on the earliest date.[SQL]\\nSELECT Date FROM receipts WHERE DATAE = (SELECT min(DATE) FROM receipts) JOIN customers ON receipts.customerid = customers.id'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1465,
    "db_id": "bakery_1",
    "question": {
      "id": 1465,
      "db_id": "bakery_1",
      "question": "What is the full name of the customer who visited on the earliest date?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the full name of the customer who visited on the earliest date?[SQL]\\nSELECT Date FROM receipts WHERE DATAE  =  (SELECT min(DATE) FROM receipts) JOIN customers ON receipts.customerid  =  customers.id'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1466,
    "db_id": "bakery_1",
    "question": {
      "id": 1466,
      "db_id": "bakery_1",
      "question": "What is average price of goods whose flavor is blackberry or blueberry?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is average price of goods whose flavor is blackberry or blueberry?[SQL]\\nSELECT CustomerId FROM receipts WHERE date  =  '2018-03-15' UNION SELECT ordinal FROM items WHERE item IN (SELECT id FROM goods WHERE food  =  'banana' ) ORDER BY ordinal DESC LIMIT 1' <MID>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1467,
    "db_id": "bakery_1",
    "question": {
      "id": 1467,
      "db_id": "bakery_1",
      "question": "What are the average prices of goods with blackberry or blueberry flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average prices of goods with blackberry or blueberry flavor?[SQL]\\nSELECT ReceiptNumber FROM items WHERE item IN ( SELECT id FROM goods WHERE Flavor  =  'blackberry' OR Flavor  =  'blueberry' ) GROUP BY ReceiptNumber HAVING count(*)  >  253 ORDER BY avg(Tax) ASC LIMIT 10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1468,
    "db_id": "bakery_1",
    "question": {
      "id": 1468,
      "db_id": "bakery_1",
      "question": "Return the cheapest price for goods with cheese flavor."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the cheapest price for goods with cheese flavor.[SQL]\\nSELECT ReceiptNumber FROM items WHERE item IN (SELECT id FROM goods WHERE flavor  =  'cheese') ORDER BY ordinal LIMIT 1 UNION SELECT null FROM goods WHERE flavor  =  'cheese' ORDER BY price LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1469,
    "db_id": "bakery_1",
    "question": {
      "id": 1469,
      "db_id": "bakery_1",
      "question": "What is the cheapest good with cheese flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the cheapest good with cheese flavor?[SQL]\\nSELECT goods.Date FROM goods WHERE goods.Flavor  =  'cheese' ORDER BY goods.Price LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1470,
    "db_id": "bakery_1",
    "question": {
      "id": 1470,
      "db_id": "bakery_1",
      "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[SQL]\\nSELECT goods.ReceiptNumber FROM items WHERE item = 'goods' GROUP BY goods.Flavor ORDER BY avg(goods.price) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1471,
    "db_id": "bakery_1",
    "question": {
      "id": 1471,
      "db_id": "bakery_1",
      "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item IN (SELECT id FROM goods WHERE food = 'Cake' ) UNION SELECT null FROM goods WHERE food = 'Cake' GROUP BY flavor ORDER BY max(Price) DESC LIMIT 100'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1472,
    "db_id": "bakery_1",
    "question": {
      "id": 1472,
      "db_id": "bakery_1",
      "question": "Return the lowest and highest prices of goods grouped and ordered by food type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the lowest and highest prices of goods grouped and ordered by food type.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item IN (SELECT id FROM goods ORDER BY price LIMIT 1) UNION SELECT ordinal ,  receiptnumber FROM items EXCEPT SELECT ordinal ,  receiptnumber FROM items WHERE item IN (SELECT id FROM goods ORDER BY price DESC LIMIT 1) ORDER BY itesm.ReceiptNumber'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1473,
    "db_id": "bakery_1",
    "question": {
      "id": 1473,
      "db_id": "bakery_1",
      "question": "What are the minimum and maximum prices of food goods, ordered by food?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the minimum and maximum prices of food goods, ordered by food?[SQL]\\nSELECT Date FROM receipts WHERE customerid  =  1 ORDER BY date DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1474,
    "db_id": "bakery_1",
    "question": {
      "id": 1474,
      "db_id": "bakery_1",
      "question": "Find the top three dates with the most receipts."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the top three dates with the most receipts.[SQL]\\nSELECT Date FROM receiptsGROUP BY DateORDER BY customers.DateLIMIT 3'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1475,
    "db_id": "bakery_1",
    "question": {
      "id": 1475,
      "db_id": "bakery_1",
      "question": "What are the three dates for which the most receipts were given?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the three dates for which the most receipts were given?[SQL]\\nSELECT Date FROM receiptsGROUP BY DateORDER BY customers.ReceiptNumberLIMIT 3'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1476,
    "db_id": "bakery_1",
    "question": {
      "id": 1476,
      "db_id": "bakery_1",
      "question": "Which customer shopped most often? How many times?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customer shopped most often? How many times?[SQL]\\nSELECT customers.CustomerId FROM receipts WHERE Date  =  ( SELECT max(date) FROM receipts ) GROUP BY customerid ORDER BY count(*) DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1477,
    "db_id": "bakery_1",
    "question": {
      "id": 1477,
      "db_id": "bakery_1",
      "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[SQL]\\nSELECT CustomerId FROM items WHERE item IN (SELECT GoodsId FROM items GROUP BY GoodsId ORDER BY count(*) DESC LIMIT 1) UNION SELECT null FROM items GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1478,
    "db_id": "bakery_1",
    "question": {
      "id": 1478,
      "db_id": "bakery_1",
      "question": "For each date, return how many distinct customers visited on that day."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each date, return how many distinct customers visited on that day.[SQL]\\nSELECT Date  FROM receipts WHERE customerid != 'null' GROUP BY date ORDER BY count(*) DESC LIMIT 10'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1479,
    "db_id": "bakery_1",
    "question": {
      "id": 1479,
      "db_id": "bakery_1",
      "question": "How many cusomters visited on each date?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many cusomters visited on each date?[SQL]\\nSELECT Date  FROM receiptsGROUP BY DateORDER BY Date;"
  },
  {
    "id": 1480,
    "db_id": "bakery_1",
    "question": {
      "id": 1480,
      "db_id": "bakery_1",
      "question": "Give me the first name and last name of customers who have bought apple flavor Tart."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the first name and last name of customers who have bought apple flavor Tart.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT T1.customerid FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.Flavor  =  'apple' AND T2.Food  =  'Tart')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1481,
    "db_id": "bakery_1",
    "question": {
      "id": 1481,
      "db_id": "bakery_1",
      "question": "What are the full names of customers who bought apple flavored Tarts?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the full names of customers who bought apple flavored Tarts?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT T1.customerid FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.Flavor  =  'apple' AND T2.Food  =  'Tart')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1482,
    "db_id": "bakery_1",
    "question": {
      "id": 1482,
      "db_id": "bakery_1",
      "question": "What are the ids of Cookies whose price is lower than any Croissant?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of Cookies whose price is lower than any Croissant?[SQL]\\nSELECT goods.ReceiptNumber FROM goods WHERE food  =  'Croissant' AND price  <  (SELECT max(price) FROM goods WHERE food  =  'Cookies')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1483,
    "db_id": "bakery_1",
    "question": {
      "id": 1483,
      "db_id": "bakery_1",
      "question": "Give the ids of cookes that are cheaper than any croissant."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the ids of cookes that are cheaper than any croissant.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE firstname  =  'Cookie') INTERSECT SELECT max(date) FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE firstname  =  'Croissant')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1484,
    "db_id": "bakery_1",
    "question": {
      "id": 1484,
      "db_id": "bakery_1",
      "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me the ids of Cakes whose price is at least as much as the average price of Tart?[SQL]\\nSELECT goods.ReceiptNumber FROM goods WHERE food  =  'Cake' AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  'Tart')'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1485,
    "db_id": "bakery_1",
    "question": {
      "id": 1485,
      "db_id": "bakery_1",
      "question": "What are the ids of cakes that are at least as expensive as the average Tart?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of cakes that are at least as expensive as the average Tart?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE items.item IN (SELECT goods.id FROM goods WHERE goods.price  >=  (SELECT avg(Tart) FROM goods)) UNION SELECT null FROM goods WHERE goods.food  =  'Cake' AND goods.price  >=  (SELECT avg(Tart) FROM goods)',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1486,
    "db_id": "bakery_1",
    "question": {
      "id": 1486,
      "db_id": "bakery_1",
      "question": "What are the ids of goods whose price is above twice the average price of all goods?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of goods whose price is above twice the average price of all goods?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE ordinal  =  1 AND item IN (SELECT goods.id FROM goods WHERE goods.price  >  (SELECT avg(price) FROM goods)) UNION SELECT i0.ReceiptNumber FROM items AS i0 JOIN goods AS g0 ON i0.item  =  g0.id WHERE g0.price  >  (SELECT avg(price) FROM goods) ORDER BY i0.ReceiptNumber'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": {
      "id": 1487,
      "db_id": "bakery_1",
      "question": "Give the ids of goods that are more than twice as expensive as the average good."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the ids of goods that are more than twice as expensive as the average good.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item IN (SELECT goods.id FROM goods WHERE price  >   (SELECT avg(price) FROM goods)) GROUP BY itesm.ReceiptNumber HAVING count(*)  >  2'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": {
      "id": 1488,
      "db_id": "bakery_1",
      "question": "List the id, flavor and type of food of goods ordered by price."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the id, flavor and type of food of goods ordered by price.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE items.item IN (SELECT goods.id FROM goods ORDER BY goods.price) UNION SELECT null FROM goods ORDER BY goods.price'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": {
      "id": 1489,
      "db_id": "bakery_1",
      "question": "What are the ids, flavors, and food types of goods, ordered by price?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids, flavors, and food types of goods, ordered by price?[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE item IN (SELECT id FROM goods ORDER BY price) ORDER BY price ASC'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": {
      "id": 1490,
      "db_id": "bakery_1",
      "question": "Return a list of the id and flavor for Cakes ordered by flavor."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return a list of the id and flavor for Cakes ordered by flavor.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE firstname  =  'Jane') ORDER BY Datetime DESC LIMIT 100'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": {
      "id": 1491,
      "db_id": "bakery_1",
      "question": "What are the ids and flavors of cakes, ordered by flavor?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and flavors of cakes, ordered by flavor?[SQL]\\nSELECT goods.ReceiptNumber FROM goods WHERE food  =  'Cake' ORDER BY flavor ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": {
      "id": 1492,
      "db_id": "bakery_1",
      "question": "Find all the items that have chocolate flavor but were not bought more than 10 times."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all the items that have chocolate flavor but were not bought more than 10 times.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM items WHERE item IN (SELECT id FROM goods WHERE Flavor  =  'Chocolate') GROUP BY item HAVING count(*)  >  10) ORDER BY Dates DESC LIMIT 10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": {
      "id": 1493,
      "db_id": "bakery_1",
      "question": "What are the items with chocolate flavor that were purchased at most 10 times."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the items with chocolate flavor that were purchased at most 10 times.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE items.item IN (SELECT goods.id FROM goods WHERE goods.flavor  =  'chocolate') GROUP BY items.ReceiptNumber ORDER BY count(*) DESC LIMIT 10'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": {
      "id": 1494,
      "db_id": "bakery_1",
      "question": "What are the flavors available for Cake but not for Tart?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the flavors available for Cake but not for Tart?[SQL]\\nSELECT Date FROM receipts WHERE CustomerId NOT IN (SELECT Id FROM customers) UNION SELECT Flavor FROM goods EXCEPT SELECT Flavor FROM goods WHERE Food  =  'Tart' <MID>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": {
      "id": 1495,
      "db_id": "bakery_1",
      "question": "Give the flavors of Cakes that are not available for Tart."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the flavors of Cakes that are not available for Tart.[SQL]\\nSELECT Date FROM receipts WHERE CustomerID  =  1234567890 AND ordinal  =  2 AND item != 'Tart' AND flavor != 'Chocolate' UNION SELECT Date FROM receipts WHERE CustomerID  =  1234567890 AND ordinal  =  2 AND item != 'Tart' AND flavor != 'Vanilla' UNION SELECT Date FROM receipts WHERE CustomerID  =  1234567890 AND ordinal  =  2 AND item != 'Tart' AND flavor != 'Strawberry' UNION SELECT Date FROM receipts WHERE CustomerID  =  1234567890 AND ordinal  =  2 AND item != 'Tart' AND flavor != 'Lemon' UNION SELECT Date FROM receipts WHERE"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": {
      "id": 1496,
      "db_id": "bakery_1",
      "question": "What is the three most popular goods in this bakery?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the three most popular goods in this bakery?[SQL]\\nSELECT goods.Date FROM goods WHERE goods.Flavor  =  'Chocolate' OR goods.Flavor  =  'Strawberry' ORDER BY goods.Price DESC LIMIT 3'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": {
      "id": 1497,
      "db_id": "bakery_1",
      "question": "Give the three most purchased items at this bakery."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the three most purchased items at this bakery.[SQL]\\nSELECT goods.Date FROM items WHERE goods.Food = (SELECT goods.Food FROM goods ORDER BY goods.Price LIMIT 3)',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": {
      "id": 1498,
      "db_id": "bakery_1",
      "question": "Find the ids of customers who have spent more than 150 dollars in total."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the ids of customers who have spent more than 150 dollars in total.[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM receipts GROUP BY customerid HAVING sum(food.price)  >  150) ORDER BY date DESC'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": {
      "id": 1499,
      "db_id": "bakery_1",
      "question": "What are the ids of customers who have spent over 150 dollars in total?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of customers who have spent over 150 dollars in total?[SQL]\\nSELECT Date FROM receipts WHERE sum(T2.price)  >  150'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": {
      "id": 1500,
      "db_id": "bakery_1",
      "question": "Find the ids of customers whose average spending for each good is above 5."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the ids of customers whose average spending for each good is above 5.[SQL]\\nSELECT items.ReceiptNumber FROM items WHERE ordinal  =  1 GROUP BY items.ReceiptNumber HAVING avg(items.item)  >  5'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": {
      "id": 1501,
      "db_id": "bakery_1",
      "question": "What are the ids of customers who spend more than 5 on average for each good?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of customers who spend more than 5 on average for each good?[SQL]\\nSELECT Date FROM receipts WHERE customerid IN (SELECT customerid FROM items GROUP BY customerid HAVING avg(price)  >  5) ORDER BY date DESC'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": {
      "id": 1502,
      "db_id": "bakery_1",
      "question": "On which day did the bakery sell more than 100 dollars in total."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, On which day did the bakery sell more than 100 dollars in total.[SQL]\\nSELECT Date FROM receipts WHERE sum(T2.price)  >  100'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": {
      "id": 1503,
      "db_id": "bakery_1",
      "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"customers\" (\n\t\"Id\" INTEGER PRIMARY KEY,\n\t\"LastName\" TEXT,\n\t\"FirstName\" TEXT\n)\nCREATE TABLE \"goods\" (\n\t\"Id\" TEXT PRIMARY KEY,\n\t\"Flavor\" TEXT,\n\t\"Food\" TEXT,\n\t\"Price\" REAL\n)\nCREATE TABLE \"items\" (\n\t\"Receipt\" INTEGER,\n\t\"Ordinal\" INTEGER,\n\t\"Item\" TEXT,\n\tPRIMARY KEY(Receipt, Ordinal),\n\tFOREIGN KEY (Item) REFERENCES goods(Id)\n)\nCREATE TABLE \"receipts\" (\n\t\"ReceiptNumber\" INTEGER PRIMARY KEY,\n\t\"Date\" TEXT,\n\t\"CustomerId\" INTEGER,\n\tFOREIGN KEY(CustomerId) REFERENCES customers(Id)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, On what dates did the bakery sell more than 100 dollars worth of goods in total?[SQL]\\nSELECT Date FROM receipts WHERE sum(T2.price)  >  100 JOIN items AS T1 ON T1.receipt  =  T2.receipt JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY Date'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1504,
    "db_id": "car_racing",
    "question": {
      "id": 1504,
      "db_id": "car_racing",
      "question": "How many drivers are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers are there?[SQL]\\nSELECT country.Driver_ID FROM country WHERE Country = 'United States' AND Regoin = 'North America' AND Official_native_language = 'English' UNION SELECT county.Driver_ID FROM county WHERE Country = 'Canada' AND Regoin = 'North America' AND Official_native_language = 'English' <MID>\n    LIMIT 1000;',\n    ;"
  },
  {
    "id": 1505,
    "db_id": "car_racing",
    "question": {
      "id": 1505,
      "db_id": "car_racing",
      "question": "Find the total number of drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total number of drivers.[SQL]\\nSELECT country.Driver_ID FROM country WHERE Country = 'United States' AND Capcity LIKE '%Washington%' UNION SELECT driver.Driver_ID FROM driver WHERE country  =  'United Kingdom' AND city LIKE '%London%' <MID>\n    LIMIT 10000;',\n    ;"
  },
  {
    "id": 1506,
    "db_id": "car_racing",
    "question": {
      "id": 1506,
      "db_id": "car_racing",
      "question": "Find the number of drivers whose points are greater than 150 for each make."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of drivers whose points are greater than 150 for each make.[SQL]\\nSELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION SELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION SELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION SELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION SELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION SELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION SELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION SELECT country.Team_ID FROM country WHERE Trip_duration  >  24 HOURS UNION"
  },
  {
    "id": 1507,
    "db_id": "car_racing",
    "question": {
      "id": 1507,
      "db_id": "car_racing",
      "question": "How many drivers receive points greater than 150 for each make? Show the make and the count."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers receive points greater than 150 for each make? Show the make and the count.[SQL]\\nSELECT Team_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1508,
    "db_id": "car_racing",
    "question": {
      "id": 1508,
      "db_id": "car_racing",
      "question": "Find the average age of drivers for each make."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average age of drivers for each make.[SQL]\\nSELECT Driver_ID, AVG(Age) ,  Make FROM driver GROUP BY Make'\n        , 'country': 'country'\n        , 'team': 'team'\n        , 'driver': 'driver'\n        , 'team_driver': 'team_driver'\n    , }\n\n    FROM country WHERE country.Country_Id = driver.Country} SELECT avg(Age) ,  manager FROM team WHERE team.team_id = team_driver.team_id GROUP BY team.team_id'\n        ;"
  },
  {
    "id": 1509,
    "db_id": "car_racing",
    "question": {
      "id": 1509,
      "db_id": "car_racing",
      "question": "What is the average age of drivers for each make? Return the average age and make."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average age of drivers for each make? Return the average age and make.[SQL]\\nSELECT Driver_ID, AVG(Age) ,  Make FROM driver GROUP BY Make'\n        , 'SELECT Driver_ID ,  avg(Age) ,  Make FROM driver GROUP BY Make'\n    , ['SELECT Driver_ID ,  avg(Age) ,  Make FROM driver GROUP BY Make']]\n\n    , [r'''SELECT country_id ,  capital ,  official_native_language FROM country WHERE country_id = 108'\n        , 'SELECT country_id ,  capital ,  official_native_language FROM country WHERE country_id = 108'\n    , ['SELECT country_id ,  capital ,  official_native_language FROM country WHERE country_id = 108']]\n\n    , [r'''SELECT team_id ,  team FROM team WHERE team = 'Williams' AND manager = 'Rory Byrne"
  },
  {
    "id": 1510,
    "db_id": "car_racing",
    "question": {
      "id": 1510,
      "db_id": "car_racing",
      "question": "What are the average laps of all the drivers who are younger than 20?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average laps of all the drivers who are younger than 20?[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  <  20 GROUP BY Driver_ID HAVING avg(Laps) >  150,347.692308,54535435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435435"
  },
  {
    "id": 1511,
    "db_id": "car_racing",
    "question": {
      "id": 1511,
      "db_id": "car_racing",
      "question": "Compute the average laps of drivers under the age of 20."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Compute the average laps of drivers under the age of 20.[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  <  20 UNION ALL SELECT TD.Driver_ID FROM team_driver AS TD JOIN driver AS D ON TD.Driver_ID  =  D.Driver_ID WHERE D.Age  <  20 GROUP BY D.Driver_ID ORDER BY avg(D.Laps) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1512,
    "db_id": "car_racing",
    "question": {
      "id": 1512,
      "db_id": "car_racing",
      "question": "What are the managers and sponsors of teams? Sort the results by Car Owners."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the managers and sponsors of teams? Sort the results by Car Owners.[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver_ID IN(SELECT MAX(Driver_ID) FROM driver GROUP BY Car_#) ORDER BY Sponsor ASC <MID>\n    LIMIT 100'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1513,
    "db_id": "car_racing",
    "question": {
      "id": 1513,
      "db_id": "car_racing",
      "question": "Find the manager and sponsor for each team and order them by the car owner."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the manager and sponsor for each team and order them by the car owner.[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver_ID IN(SELECT MAX(Driver_ID) FROM team_driver GROUP BY Team_ID) ORDER BY Car_Owner ASC'\n        ;"
  },
  {
    "id": 1514,
    "db_id": "car_racing",
    "question": {
      "id": 1514,
      "db_id": "car_racing",
      "question": "Find the make that has more than one team."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the make that has more than one team.[SQL]\\nSELECT Team_ID FROM team WHERE Make IN (SELECT MAKE FROM team GROUP BY MAKE HAVING COUNT(*)  >  1) ORDER BY TIMe_ID ASC'\n        ;"
  },
  {
    "id": 1515,
    "db_id": "car_racing",
    "question": {
      "id": 1515,
      "db_id": "car_racing",
      "question": "Which make has more than one team?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which make has more than one team?[SQL]\\nSELECT Team_ID FROM team_driver WHERE Make  =  'Ferrari' GROUP BY Make HAVING COUNT(*)  >  1' <MID>\n    LIMIT 2'\n    ;"
  },
  {
    "id": 1516,
    "db_id": "car_racing",
    "question": {
      "id": 1516,
      "db_id": "car_racing",
      "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the makes of the teams with car owner \"Buddy Arrington\"?[SQL]\\nSELECT Team_ID FROM team WHERE Car_Owner  =  'Buddy Arrington' <MID>\n    LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1517,
    "db_id": "car_racing",
    "question": {
      "id": 1517,
      "db_id": "car_racing",
      "question": "Find the make of the team whose car owner is \"Buddy Arrington\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the make of the team whose car owner is \"Buddy Arrington\".[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver_ID  =  (SELECT Driver_ID FROM driver WHERE Car_Owner  =  'Buddy Arrington') AND TYPE = 'member' GROUP BY TeaM_ID HAVING COUNT(*)  =  2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,95,97,101,103,107,109,113,115,119,121,125,127,129,133,135,139,141,145,14"
  },
  {
    "id": 1518,
    "db_id": "car_racing",
    "question": {
      "id": 1518,
      "db_id": "car_racing",
      "question": "What are the maximum and minimum points of drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum points of drivers.[SQL]\\nSELECT Team_ID FROM team_driver WHERE Points  =  (SELECT max(Points) FROM driver) UNION SELECT Team_ID FROM team_driver WHERE Points  =  (SELECT min(Points) FROM driver) <MID>\n    LIMIT 1000'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1519,
    "db_id": "car_racing",
    "question": {
      "id": 1519,
      "db_id": "car_racing",
      "question": "Find the highest and lowest points of drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the highest and lowest points of drivers.[SQL]\\nSELECT Team_ID FROM team_driver;"
  },
  {
    "id": 1520,
    "db_id": "car_racing",
    "question": {
      "id": 1520,
      "db_id": "car_racing",
      "question": "How many drivers have points smaller than 150?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have points smaller than 150?[SQL]\\nSELECT country.Driver_ID FROM country WHERE points  <  150'\n        ;"
  },
  {
    "id": 1521,
    "db_id": "car_racing",
    "question": {
      "id": 1521,
      "db_id": "car_racing",
      "question": "Count the number of drivers whose points are below 150."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of drivers whose points are below 150.[SQL]\\nSELECT country.Team_ID FROM team_driver WHERE driver.Points  <  150'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1522,
    "db_id": "car_racing",
    "question": {
      "id": 1522,
      "db_id": "car_racing",
      "question": "List all the driver names in ascending order of age."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the driver names in ascending order of age.[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  < 25 UNION SELECT Driver_ID FROM driver WHERE Age  > 35 ORDER BY Age ASC'\n        ;"
  },
  {
    "id": 1523,
    "db_id": "car_racing",
    "question": {
      "id": 1523,
      "db_id": "car_racing",
      "question": "Sort the driver names by age in ascending order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort the driver names by age in ascending order.[SQL]\\nSELECT Driver_ID FROM driver WHERE Age  >  25 UNION SELECT Driver_ID FROM driver WHERE Age  <=  25 ORDER BY Age ASC, Driver DESC'\n        ;"
  },
  {
    "id": 1524,
    "db_id": "car_racing",
    "question": {
      "id": 1524,
      "db_id": "car_racing",
      "question": "List all the driver names in descending order of points."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the driver names in descending order of points.[SQL]\\nSELECT Driver_ID FROM driver WHERE Points  >  0 ORDER BY Points DESC'\n        ;"
  },
  {
    "id": 1525,
    "db_id": "car_racing",
    "question": {
      "id": 1525,
      "db_id": "car_racing",
      "question": "What is the list of drivers ordered by points in descending order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the list of drivers ordered by points in descending order?[SQL]\\nSELECT Driver_ID  FROM driver WHERE Points != 0 ORDER BY Points DESC'\n        ;"
  },
  {
    "id": 1526,
    "db_id": "car_racing",
    "question": {
      "id": 1526,
      "db_id": "car_racing",
      "question": "Please show the names of drivers, and countries they are from."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the names of drivers, and countries they are from.[SQL]\\nSELECT Driver_ID  FROM driver WHERE Country != 'null' UNION SELECT country FROM country'\n\n    LIMIT 25'\n\n    ;"
  },
  {
    "id": 1527,
    "db_id": "car_racing",
    "question": {
      "id": 1527,
      "db_id": "car_racing",
      "question": "For each driver, return his or her name and country."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each driver, return his or her name and country.[SQL]\\nSELECT Driver_ID  FROM driver WHERE Country  =  124 UNION SELECT T1.Driver_ID ,  T2.driver FROM team_driver AS T1 JOIN driver AS T2 ON T1.driver_id  =  T2.driver_id WHERE T1.team_id  =  123 UNION SELECT T1.Driver_ID ,  T2.driver FROM team_driver AS T1 JOIN driver AS T2 ON T1.driver_id  =  T2.driver_id WHERE T1.team_id  =  125'\n        ;"
  },
  {
    "id": 1528,
    "db_id": "car_racing",
    "question": {
      "id": 1528,
      "db_id": "car_racing",
      "question": "Show the maximum points of the drivers from countries with capital \"Dublin\""
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the maximum points of the drivers from countries with capital \"Dublin\"[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver_ID IN(SELECT T1.driver_id FROM driver AS T1 JOIN country AS T2 ON T1.country  =  T2.country_id WHERE T2.capital  =  'Dublin' AND T1.points  =  (SELECT max(T1.points) FROM driver AS T1 JOIN country AS T2 ON T1.country  =  T2.country_id WHERE T2.capital  =  'Dublin')) UNION SELECT NULL FROM DUAL WHERE 1 = 0 <MID>\n    LIMIT 1000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1529,
    "db_id": "car_racing",
    "question": {
      "id": 1529,
      "db_id": "car_racing",
      "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum points of the drivers from a country whose capital is \"Dublin\"?[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver.Country IN (SELECT Country_id FROM country WHERE Capital  =  'Dublin') ORDER BY Points DESC LIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1530,
    "db_id": "car_racing",
    "question": {
      "id": 1530,
      "db_id": "car_racing",
      "question": "What is the average age of drivers from countries with official native language \"English\""
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average age of drivers from countries with official native language \"English\"[SQL]\\nSELECT country.Team_ID FROM country WHERE country.Official_native_language  =  'English' GROUP BY country.Tean_ID HAVING avg(age) >  25 UNION SELECT team_driver.driver_id FROM team_driver JOIN driver ON team_driver.driver_id  =  driver.driver_id JOIN team ON team_driver.team_id  =  team.team_id WHERE team.team  =  'Red Bull' AND driver.age  >  25 GROUP BY driver.country_id ORDER BY avg(age) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1531,
    "db_id": "car_racing",
    "question": {
      "id": 1531,
      "db_id": "car_racing",
      "question": "Find the average age of the drivers from the countries that use \"English\" as official native language."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average age of the drivers from the countries that use \"English\" as official native language.[SQL]\\nSELECT country.Team_ID FROM country WHERE country.Official_native_language  =  'Englis' GROUP BY country.Team_ID HAVING avg(country.age) >  25' <MID>\n    LIMIT 100'\n    ;"
  },
  {
    "id": 1532,
    "db_id": "car_racing",
    "question": {
      "id": 1532,
      "db_id": "car_racing",
      "question": "What are the countries that have drivers with points larger than 150?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the countries that have drivers with points larger than 150?[SQL]\\nSELECT Team_ID FROM team_driver WHERE Points  >  150; SELECT country FROM driver WHERE Points  >  150;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1533,
    "db_id": "car_racing",
    "question": {
      "id": 1533,
      "db_id": "car_racing",
      "question": "Find all the countries where some drivers have points above 150."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all the countries where some drivers have points above 150.[SQL]\\nSELECT country.Team_ID FROM country WHERE country.Team_ID IN (SELECT driver.Country FROM driver WHERE driver.Points  >  150) <MID>\n    LIMIT 251'\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1534,
    "db_id": "car_racing",
    "question": {
      "id": 1534,
      "db_id": "car_racing",
      "question": "What is the capital of the country where the driver with the most points is from?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the capital of the country where the driver with the most points is from?[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver_ID  =  (SELECT MAX(Points) FROM driver) AND T1.region  =  T2.region WHERE T1.country  =  T2.country_id <MID>\n    LIMIT 1'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1535,
    "db_id": "car_racing",
    "question": {
      "id": 1535,
      "db_id": "car_racing",
      "question": "Which country is the driver with the highest points from? Give me the capital of the country."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which country is the driver with the highest points from? Give me the capital of the country.[SQL]\\nSELECT team_driver.Driver_ID  FROM team_driver WHERE team_driver.points  =  ( SELECT max(points) FROM driver) AND driver.country IN (SELECT capital FROM country) <MID>\n    LIMIT 1;'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1536,
    "db_id": "car_racing",
    "question": {
      "id": 1536,
      "db_id": "car_racing",
      "question": "List each make with the number of drivers with that make."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List each make with the number of drivers with that make.[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver IN (SELECT Driver FROM driver WHERE Make  =  'Mercedes') GROUP BY Team_ID ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1537,
    "db_id": "car_racing",
    "question": {
      "id": 1537,
      "db_id": "car_racing",
      "question": "For each make, return the make and the count of drivers with that make."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each make, return the make and the count of drivers with that make.[SQL]\\nSELECT Team_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1538,
    "db_id": "car_racing",
    "question": {
      "id": 1538,
      "db_id": "car_racing",
      "question": "List the make that are associated with most drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the make that are associated with most drivers.[SQL]\\nSELECT Team_ID FROM team_driver;"
  },
  {
    "id": 1539,
    "db_id": "car_racing",
    "question": {
      "id": 1539,
      "db_id": "car_racing",
      "question": "Which make does the most drivers have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which make does the most drivers have?[SQL]\\nSELECT Team_ID FROM team_driver;"
  },
  {
    "id": 1540,
    "db_id": "car_racing",
    "question": {
      "id": 1540,
      "db_id": "car_racing",
      "question": "List the driver makes that are associated with at least three drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the driver makes that are associated with at least three drivers.[SQL]\\nSELECT Driver_ID FROM driver WHERE Make IN (SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3) ORDER BY Driver_ID ASC'\n        ;"
  },
  {
    "id": 1541,
    "db_id": "car_racing",
    "question": {
      "id": 1541,
      "db_id": "car_racing",
      "question": "Which make is associated with 3 or more drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which make is associated with 3 or more drivers?[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Make HAVING COUNT(*)  >=  3) ORDER BY Team_ID ASC LIMIT 100'\n        ;"
  },
  {
    "id": 1542,
    "db_id": "car_racing",
    "question": {
      "id": 1542,
      "db_id": "car_racing",
      "question": "List the names of teams that do not have any drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of teams that do not have any drivers.[SQL]\\nSELECT Team_ID FROM team_driver WHERE Driver_ID IS NULL'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1543,
    "db_id": "car_racing",
    "question": {
      "id": 1543,
      "db_id": "car_racing",
      "question": "Which team does not have drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which team does not have drivers?[SQL]\\nSELECT Team_ID FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)'\n        ;"
  },
  {
    "id": 1544,
    "db_id": "car_racing",
    "question": {
      "id": 1544,
      "db_id": "car_racing",
      "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?[SQL]\\nSELECT country.Team_ID FROM country WHERE country.Telephone LIKE '%@%' AND country.Address LIKE '%Street%' <MID>\n    LIMIT 2'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1545,
    "db_id": "car_racing",
    "question": {
      "id": 1545,
      "db_id": "car_racing",
      "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".[SQL]\\nSELECT country.Team_ID FROM country WHERE country.Tdriver_ID IN ( SELECT Tdriver_ID FROM driver WHERE driver.Make  =  'Dodge' ) INTERSECT SELECT country.Tdriver_ID FROM country WHERE country.Tdriver_ID IN ( SELECT Tdriver_ID FROM driver WHERE driver.Make  =  'Chevrolet' )' <MID>\n    LIMIT 100'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n"
  },
  {
    "id": 1546,
    "db_id": "car_racing",
    "question": {
      "id": 1546,
      "db_id": "car_racing",
      "question": "Show total and average points of all drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show total and average points of all drivers.[SQL]\\nSELECT country.Team_ID FROM country WHERE T1.country = T2.country GROUP BY T1.country HAVING avg(T1.Points) > 300'\n        ;"
  },
  {
    "id": 1547,
    "db_id": "car_racing",
    "question": {
      "id": 1547,
      "db_id": "car_racing",
      "question": "What are the total and average points of drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the total and average points of drivers?[SQL]\\nSELECT country.Team_ID FROM country WHERE T1.country = T2.country GROUP BY T1.country HAVING avg(T1.Points) > 350 <MID>\n    LIMIT 100'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1548,
    "db_id": "car_racing",
    "question": {
      "id": 1548,
      "db_id": "car_racing",
      "question": "Find the countries where no driver come from."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the countries where no driver come from.[SQL]\\nSELECT country.Team_ID FROM country WHERE country.Country_id NOT IN (SELECT driver.Country FROM driver) <MID>\n    LIMIT 251'\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1549,
    "db_id": "car_racing",
    "question": {
      "id": 1549,
      "db_id": "car_racing",
      "question": "Which countries do not have any drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which countries do not have any drivers?[SQL]\\nSELECT country.Team_ID FROM country WHERE country.Team_ID NOT IN (SELECT team_driver.Team_ID FROM team_driver) <MID>\n    LIMIT 100'\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1550,
    "db_id": "car_racing",
    "question": {
      "id": 1550,
      "db_id": "car_racing",
      "question": "What are the manager and sponsor of the team that has the most drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the manager and sponsor of the team that has the most drivers?[SQL]\\nSELECT Team_ID FROM driverGROUP BY Team_IDORDER BY country.Driver_IDLIMIT 1;SELECT manager ,  sponsor FROM team WHERE team_id  =  (SELECT teamb_id FROM team_driver GROUP BY teamb_id ORDER BY count(*) DESC LIMIT 1);'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1551,
    "db_id": "car_racing",
    "question": {
      "id": 1551,
      "db_id": "car_racing",
      "question": "Find the manager and sponsor of the team that has the most drivers."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the manager and sponsor of the team that has the most drivers.[SQL]\\nSELECT Team_ID FROM driver;"
  },
  {
    "id": 1552,
    "db_id": "car_racing",
    "question": {
      "id": 1552,
      "db_id": "car_racing",
      "question": "What are the manager and car owner of the team that has at least 2 drivers?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the manager and car owner of the team that has at least 2 drivers?[SQL]\\nSELECT Team_ID FROM driverGROUP BY Team_IDHAVING COUNT(*)  >=  2) JOIN team_driver ON driver_IDIN(SELECT max(driver_ID) FROM driverGROUP BY Team_IDHAVING COUNT(*)  >=  2) JOIN team ON team.Team_ID = team_driver.Team_ID SELECT team.Manager ,  team.Car_Owner FROM team WHERE team.Team_ID IN(SELECT max(driver_ID) FROM driverGROUP BY Team_IDHAVING count(*)  >=  2) UNION SELECT NULL ,  NULL FROM DUAL'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1553,
    "db_id": "car_racing",
    "question": {
      "id": 1553,
      "db_id": "car_racing",
      "question": "Find the team with two or more drivers and return the the manager and car owner of the team."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"country\" (\n\"Country_Id\" int,\n\"Country\" text,\n\"Capital\" text,\n\"Official_native_language\" text,\n\"Regoin\" text,\nPRIMARY KEY (\"Country_Id\")\n)\nCREATE TABLE `team` (\n\"Team_ID\" int,\n\"Team\" text,\n\"Make\" text,\n\"Manager\" text,\n\"Sponsor\" text,\n\"Car_Owner\" text,\nPRIMARY KEY (\"Team_ID\")\n)\nCREATE TABLE `driver` (\n\"Driver_ID\" int,\n\"Driver\" text,\n\"Country\" int,\n\"Age\" int,\n\"Car_#\" real,\n\"Make\" text,\n\"Points\" text,\n\"Laps\" real,\n\"Winnings\" text,\nPRIMARY KEY (\"Driver_ID\"),\nFOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`)\n)\nCREATE TABLE `team_driver` (\n\"Team_ID\" int,\n\"Driver_ID\" int,\nPRIMARY KEY (\"Team_ID\",\"Driver_ID\"),\nFOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),\nFOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the team with two or more drivers and return the the manager and car owner of the team.[SQL]\\nSELECT Team_ID FROM driver;"
  },
  {
    "id": 1554,
    "db_id": "institution_sports",
    "question": {
      "id": 1554,
      "db_id": "institution_sports",
      "question": "How many institutions are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many institutions are there?[SQL]\\nSELECT institution.Institution_ID FROM institution WHERE affiliation  =  'Private' GROUP BY institution.Institution_ID HAVING count(*)  >=  250' <MID>,\n    LIMIT 10'\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1555,
    "db_id": "institution_sports",
    "question": {
      "id": 1555,
      "db_id": "institution_sports",
      "question": "Count the number of institutions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of institutions.[SQL]\\nSELECT institution.Institution_ID FROM institution;"
  },
  {
    "id": 1556,
    "db_id": "institution_sports",
    "question": {
      "id": 1556,
      "db_id": "institution_sports",
      "question": "List the names of institutions in ascending alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of institutions in ascending alphabetical order.[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution.Nickname != '' ORDER BY institution.Nickname ASC'\n        ;"
  },
  {
    "id": 1557,
    "db_id": "institution_sports",
    "question": {
      "id": 1557,
      "db_id": "institution_sports",
      "question": "What are the names of institutions, ordered alphabetically?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of institutions, ordered alphabetically?[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution.Nickname != '' ORDER BY institution.Nickname ASC'\n        ;"
  },
  {
    "id": 1558,
    "db_id": "institution_sports",
    "question": {
      "id": 1558,
      "db_id": "institution_sports",
      "question": "List the names of institutions in ascending order of founded year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of institutions in ascending order of founded year.[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution.Founded IS NOT NULL ORDER BY institution.Founded ASC'\n        ;"
  },
  {
    "id": 1559,
    "db_id": "institution_sports",
    "question": {
      "id": 1559,
      "db_id": "institution_sports",
      "question": "What are the names of institutions, ordered by the years in which they were founded?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of institutions, ordered by the years in which they were founded?[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution.Nickname != '' ORDER BY institution.Founded ASC'\n        ;"
  },
  {
    "id": 1560,
    "db_id": "institution_sports",
    "question": {
      "id": 1560,
      "db_id": "institution_sports",
      "question": "What are the cities and provinces of institutions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the cities and provinces of institutions?[SQL]\\nSELECT Championship.Nickname FROM Championship;"
  },
  {
    "id": 1561,
    "db_id": "institution_sports",
    "question": {
      "id": 1561,
      "db_id": "institution_sports",
      "question": "Return the cities and provinces of institutions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the cities and provinces of institutions.[SQL]\\nSELECT Championship.Number_of_Championships FROM institution WHERE city  =  'Toronto' AND province  =  'Ontario' UNION SELECT nickname FROM championship WHERE joined  =  2015 AND number_of_championships  >  750; <MID>, T2.capacity FROM stadium AS T1 JOIN facility AS T2 ON T1.facility_id  =  T2.facility_id;'\n    ORDER BY Nickname;"
  },
  {
    "id": 1562,
    "db_id": "institution_sports",
    "question": {
      "id": 1562,
      "db_id": "institution_sports",
      "question": "What are the maximum and minimum enrollment of all institutions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum enrollment of all institutions?[SQL]\\nSELECT Institution_ID FROM institution;"
  },
  {
    "id": 1563,
    "db_id": "institution_sports",
    "question": {
      "id": 1563,
      "db_id": "institution_sports",
      "question": "Return the maximum and minimum enrollment across all institutions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the maximum and minimum enrollment across all institutions.[SQL]\\nSELECT Institution_ID FROM institution;"
  },
  {
    "id": 1564,
    "db_id": "institution_sports",
    "question": {
      "id": 1564,
      "db_id": "institution_sports",
      "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the affiliations of institutions that are not in city \"Vancouver\"?[SQL]\\nSELECT Institution_ID FROM institution WHERE city != 'Vancouver' GROUP BY Institution_ID HAVING count(*)  =  1' <MID>,\n    LIMIT 50'\n\n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1565,
    "db_id": "institution_sports",
    "question": {
      "id": 1565,
      "db_id": "institution_sports",
      "question": "Return the affiliations of instituions that are not in the city of Vancouver."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the affiliations of instituions that are not in the city of Vancouver.[SQL]\\nSELECT Institution_ID FROM institution WHERE city != 'Vancouver' GROUP BY affiliation EXCEPT SELECT affiliation FROM institution WHERE city  =  'Vancouver' GROUP BY affiliation'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1566,
    "db_id": "institution_sports",
    "question": {
      "id": 1566,
      "db_id": "institution_sports",
      "question": "What are the stadiums of institutions in descending order of the capacity."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the stadiums of institutions in descending order of the capacity.[SQL]\\nSELECT institution.Nickname FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stadium != 'null' ORDER BY capacity DESC] SELECT institution.stadium FROM institution WHERE stad"
  },
  {
    "id": 1567,
    "db_id": "institution_sports",
    "question": {
      "id": 1567,
      "db_id": "institution_sports",
      "question": "Return the stadiums of institutions, ordered by capacity descending."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the stadiums of institutions, ordered by capacity descending.[SQL]\\nSELECT institution.Nickname FROM institution WHERE stadium IS NOT NULL ORDER BY capacity DESC'\n        ;"
  },
  {
    "id": 1568,
    "db_id": "institution_sports",
    "question": {
      "id": 1568,
      "db_id": "institution_sports",
      "question": "What is the stadium of the institution with the largest enrollment?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the stadium of the institution with the largest enrollment?[SQL]\\nSELECT institution.Nickname FROM institution WHERE enrollment  =  (SELECT max(enrollment) FROM institution) JOIN championship ON institution.institution_id  =  championship.institution_id ORDER BY institution.enrollment DESC LIMIT 1; <MID>,\n    LIMIT 1;'\n\n    ;"
  },
  {
    "id": 1569,
    "db_id": "institution_sports",
    "question": {
      "id": 1569,
      "db_id": "institution_sports",
      "question": "Give the stadium of the institution which is the greatest enrollment."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the stadium of the institution which is the greatest enrollment.[SQL]\\nSELECT institution.Nickname FROM institution WHERE enrollment  =  (SELECT max(enrollment) FROM institution) JOIN championship ON institution.institution_id  =  championship.institution_id'\n        ;"
  },
  {
    "id": 1570,
    "db_id": "institution_sports",
    "question": {
      "id": 1570,
      "db_id": "institution_sports",
      "question": "What are the names and nicknames of institutions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and nicknames of institutions?[SQL]\\nSELECT Nickname  FROM institution;"
  },
  {
    "id": 1571,
    "db_id": "institution_sports",
    "question": {
      "id": 1571,
      "db_id": "institution_sports",
      "question": "Return the names of institutions, as well as their nicknames."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of institutions, as well as their nicknames.[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution.Nickname != 'null' UNION SELECT name FROM institution WHERE institution.Nickname  =  'null' <MID>\n    LIMIT 100;',\n    ;"
  },
  {
    "id": 1572,
    "db_id": "institution_sports",
    "question": {
      "id": 1572,
      "db_id": "institution_sports",
      "question": "What is the nickname of the institution with the smallest enrollment?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the nickname of the institution with the smallest enrollment?[SQL]\\nSELECT Nickname FROM institution WHERE enrollment  =  (SELECT min(enrollment) FROM institution) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1573,
    "db_id": "institution_sports",
    "question": {
      "id": 1573,
      "db_id": "institution_sports",
      "question": "Return the nickname of the institution with the lowest enrollment."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the nickname of the institution with the lowest enrollment.[SQL]\\nSELECT Nickname FROM institution WHERE enrollment  =  (SELECT min(enrollment) FROM institution) LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1574,
    "db_id": "institution_sports",
    "question": {
      "id": 1574,
      "db_id": "institution_sports",
      "question": "List the names of institutions in descending order of the number of championships."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of institutions in descending order of the number of championships.[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution_id IN (SELECT institution_id FROM championship) ORDER BY Number_of_Championships DESC'\n        ;"
  },
  {
    "id": 1575,
    "db_id": "institution_sports",
    "question": {
      "id": 1575,
      "db_id": "institution_sports",
      "question": "What are the names of institutions, ordered descending by their number of championships?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of institutions, ordered descending by their number of championships?[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution.Institution_ID IN (SELECT institution_id FROM championship) ORDER BY Number_of_Championships DESC'\n        ;"
  },
  {
    "id": 1576,
    "db_id": "institution_sports",
    "question": {
      "id": 1576,
      "db_id": "institution_sports",
      "question": "List the names of institutions with at least one championship."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of institutions with at least one championship.[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution_id IN (SELECT institution_id FROM championship) ORDER BY institution.Nickname ASC'\n        ;"
  },
  {
    "id": 1577,
    "db_id": "institution_sports",
    "question": {
      "id": 1577,
      "db_id": "institution_sports",
      "question": "What are the names of institutions that have 1 or more championships?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of institutions that have 1 or more championships?[SQL]\\nSELECT institution.Nickname FROM institution WHERE institution_id IN (SELECT institution_id FROM championship) UNION SELECT name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM championship) ORDER BY nickname ASC'\n        ;"
  },
  {
    "id": 1578,
    "db_id": "institution_sports",
    "question": {
      "id": 1578,
      "db_id": "institution_sports",
      "question": "What is the total number of championship of institution with public affiliation?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total number of championship of institution with public affiliation?[SQL]\\nSELECT Number_of_Championships FROM Championship WHERE institution_id IN (SELECT institution_id FROM institution WHERE affilitation  =  'Public') SUM(number_of_championships) AS total_championships' <MID>, T2.nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.affiliation  =  'Public' UNION SELECT count(*) FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.affiliation  =  'Private' UNION SELECT count(*) FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.affiliation  =  'Rural' UNION SELECT count(*) FROM championship AS T1 JOIN institution AS"
  },
  {
    "id": 1579,
    "db_id": "institution_sports",
    "question": {
      "id": 1579,
      "db_id": "institution_sports",
      "question": "Return the total number of championships of institutions that have a Public affiliation."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the total number of championships of institutions that have a Public affiliation.[SQL]\\nSELECT Number_of_Championships FROM institution WHERE Affiliation  =  'Public' AND nickname IN (SELECT nickname FROM championship) UNION SELECT sum(Number_of_Championships) FROM institution WHERE Affiliation  =  'Public' <MID>nickname IN (SELECT nickname FROM championship) UNION SELECT sum(Number_of_Championships) FROM institution WHERE Affiliation  =  'Private' AND nickname IN (SELECT nickname FROM championship) AS T1 JOIN championship AS T2 ON T1.nickname  =  T2.nickname GROUP BY T2.nickname HAVING count(*)  >=  25' AS public_champs FROM institution WHERE Affiliation  =  'Public' AND nickname IN (SELECT nickname FROM championship) UNION SELECT sum(Number_of_Championships) FROM institution WHERE Affiliation  =  'Public' AND nickname IN (SELECT nick"
  },
  {
    "id": 1580,
    "db_id": "institution_sports",
    "question": {
      "id": 1580,
      "db_id": "institution_sports",
      "question": "What are different types of affiliations of institutions and the corresponding number of institutions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are different types of affiliations of institutions and the corresponding number of institutions?[SQL]\\nSELECT Institution_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1581,
    "db_id": "institution_sports",
    "question": {
      "id": 1581,
      "db_id": "institution_sports",
      "question": "How many institutions are there for each type of affiliation?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many institutions are there for each type of affiliation?[SQL]\\nSELECT Institution_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1582,
    "db_id": "institution_sports",
    "question": {
      "id": 1582,
      "db_id": "institution_sports",
      "question": "What is the most common type of affiliation for institutions?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common type of affiliation for institutions?[SQL]\\nSELECT Institution_ID FROM institution WHERE affiliation  =  (SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1) UNION SELECT * FROM championship JOIN institution ON championship.institution_id  =  institution.institution_ID WHERE institution.affiliation  =  (SELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1) ORDER BY nickname ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1583,
    "db_id": "institution_sports",
    "question": {
      "id": 1583,
      "db_id": "institution_sports",
      "question": "Return the most common type of affiliation across all institutions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the most common type of affiliation across all institutions.[SQL]\\nSELECT Institution_ID FROM institutionGROUP BY institution.Institution_IDORDER BY Number_of_ChampionshipsLIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1584,
    "db_id": "institution_sports",
    "question": {
      "id": 1584,
      "db_id": "institution_sports",
      "question": "In which years were more than one institution founded?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In which years were more than one institution founded?[SQL]\\nSELECT Nickname FROM Championship WHERE Number_of_Championships  >  1 GROUP BY Joined HAVING count(*)  >  1 ORDER BY joined ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1585,
    "db_id": "institution_sports",
    "question": {
      "id": 1585,
      "db_id": "institution_sports",
      "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[SQL]\\nSELECT Nickname FROM Championship WHERE Joined IN ( SELECT Joined FROM championship GROUP BY Joined HAVING count(*)  >  1 ) UNION SELECT Name FROM institution WHERE Founded IN ( SELECT Founded FROM institution GROUP BY Founded HAVING count(*)  >  1 )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1586,
    "db_id": "institution_sports",
    "question": {
      "id": 1586,
      "db_id": "institution_sports",
      "question": "List the nicknames of institutions in descending order of capacity."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the nicknames of institutions in descending order of capacity.[SQL]\\nSELECT Nickname FROM institutionORDER BY Number_of_ChampionshipsLIMIT 10'\n        ;"
  },
  {
    "id": 1587,
    "db_id": "institution_sports",
    "question": {
      "id": 1587,
      "db_id": "institution_sports",
      "question": "What are the nicknames of institutions, ordered descending by their capacities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the nicknames of institutions, ordered descending by their capacities?[SQL]\\nSELECT Nickname FROM institutionORDER BY Number_of_Championships;"
  },
  {
    "id": 1588,
    "db_id": "institution_sports",
    "question": {
      "id": 1588,
      "db_id": "institution_sports",
      "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?[SQL]\\nSELECT Institution_ID FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' UNION SELECT institution_id FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' <MID>_ID FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' UNION SELECT institution_id FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' GROUP BY institution_id ORDER BY sum(enrollment) DESC LIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1589,
    "db_id": "institution_sports",
    "question": {
      "id": 1589,
      "db_id": "institution_sports",
      "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .[SQL]\\nSELECT Institution_ID FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' UNION SELECT enrollment FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary' <MID>, T2.number_of_championships FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.city  =  'Vancouver' OR T2.city  =  'Calgary' ORDER BY T2.enrollment DESC LIMIT 3'\n\n    ORDER BY Institution_ID;"
  },
  {
    "id": 1590,
    "db_id": "institution_sports",
    "question": {
      "id": 1590,
      "db_id": "institution_sports",
      "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[SQL]\\nSELECT Institution_ID FROM institution WHERE Founded  <  1920 INTERSECT SELECT Institution_ID FROM institution WHERE Founded  >  1950'\n        ;"
  },
  {
    "id": 1591,
    "db_id": "institution_sports",
    "question": {
      "id": 1591,
      "db_id": "institution_sports",
      "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[SQL]\\nSELECT Institution_ID FROM institution WHERE Founded  <  1920 UNION SELECT Institution_ID FROM institution WHERE Founded  >  1950'\n        ;"
  },
  {
    "id": 1592,
    "db_id": "institution_sports",
    "question": {
      "id": 1592,
      "db_id": "institution_sports",
      "question": "How many distinct provinces are the institutions in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many distinct provinces are the institutions in?[SQL]\\nSELECT Institution_ID FROM institution WHERE province != 'null' GROUP BY province ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1593,
    "db_id": "institution_sports",
    "question": {
      "id": 1593,
      "db_id": "institution_sports",
      "question": "Count the number of different provinces that have institutions."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"institution\" (\n\"Institution_ID\" int,\n\"Name\" text,\n\"Team\" text,\n\"City\" text,\n\"Province\" text,\n\"Founded\" real,\n\"Affiliation\" text,\n\"Enrollment\" real,\n\"Endowment\" text,\n\"Stadium\" text,\n\"Capacity\" real,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"Championship\" (\n\"Institution_ID\" int,\n\"Nickname\" text,\n\"Joined\" real,\n\"Number_of_Championships\" real,\nPRIMARY KEY (\"Institution_ID\"),\nFOREIGN KEY (\"Institution_ID\") REFERENCES `institution`(\"Institution_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different provinces that have institutions.[SQL]\\nSELECT Number_of_Championships FROM institution WHERE affiliation  =  'University' GROUP BY province HAVING count(*)  >=  2 <MID>,\n    LIMIT 1000000;',\n    ;"
  },
  {
    "id": 1594,
    "db_id": "warehouse_1",
    "question": {
      "id": 1594,
      "db_id": "warehouse_1",
      "question": "Select all details of all warehouses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select all details of all warehouses.[SQL]\\nSELECT Code  FROM Warehouses WHERE capacity  >  100'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1595,
    "db_id": "warehouse_1",
    "question": {
      "id": 1595,
      "db_id": "warehouse_1",
      "question": "What is all the information about the warehouses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is all the information about the warehouses?[SQL]\\nSELECT Code  FROM Warehouses  WHERE location  =  'London' UNION SELECT code FROM Boxes WHERE warehouse IN (SELECT code FROM Warehouses WHERE LOCATION  =  'London') <MID>\n        LIMIT 100'\n    ;"
  },
  {
    "id": 1596,
    "db_id": "warehouse_1",
    "question": {
      "id": 1596,
      "db_id": "warehouse_1",
      "question": "Find all different contents stored in New York."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all different contents stored in New York.[SQL]\\nSELECT Boxes.Contents FROM Boxes WHERE Boxe.warehouse  =   (SELECT Code FROM Warehouses WHERE LOCATION  =  'New York') UNION SELECT Boxe.Contents FROM Boxe WHERE Boxe.warehouse  =  (SELECT Code FROM Warehouses WHERE LOCATION  =  'New York')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1597,
    "db_id": "warehouse_1",
    "question": {
      "id": 1597,
      "db_id": "warehouse_1",
      "question": "What are all the different contents stored in boxes in New York?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the different contents stored in boxes in New York?[SQL]\\nSELECT Contents FROM Boxes WHERE warehouse  =  1; SELECT T3.Contents FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.code  =  T2.warehouse JOIN boxes AS T3 ON T1.code  =  T3.warehouse WHERE T1.location  =  'New York' UNION SELECT T3.Contents FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.code  =  T2.warehouse JOIN boxes AS T3 ON T1.code  =  T3.warehouse WHERE T1.location  =  'New York' AND T2.contents  =  T3.contents;'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1598,
    "db_id": "warehouse_1",
    "question": {
      "id": 1598,
      "db_id": "warehouse_1",
      "question": "Select contents of all boxes with a value larger than $150."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select contents of all boxes with a value larger than $150.[SQL]\\nSELECT Contents FROM Boxes WHERE value  >  150'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1599,
    "db_id": "warehouse_1",
    "question": {
      "id": 1599,
      "db_id": "warehouse_1",
      "question": "What are the contents of boxes with value greater than 150?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the contents of boxes with value greater than 150?[SQL]\\nSELECT Contents FROM Boxes WHERE value  >  150; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse  =  T2.warehouse WHERE T1.value  >  T2.value ORDER BY T1.value DESC LIMIT 1; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse  =  T2.warehouse WHERE T1.value  >  T2.value ORDER BY T1.value DESC LIMIT 1; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse  =  T2.warehouse WHERE T1.value  >  T2.value ORDER BY T1.value DESC LIMIT 1; SELECT T1.Contents FROM Boxes AS T1 JOIN Boxes AS T2 ON T1.warehouse"
  },
  {
    "id": 1600,
    "db_id": "warehouse_1",
    "question": {
      "id": 1600,
      "db_id": "warehouse_1",
      "question": "Select the warehouse code and the average value of the boxes in each warehouse."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the warehouse code and the average value of the boxes in each warehouse.[SQL]\\nSELECT Warehouse \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1601,
    "db_id": "warehouse_1",
    "question": {
      "id": 1601,
      "db_id": "warehouse_1",
      "question": "What is the average value of boxes for each warehouse?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average value of boxes for each warehouse?[SQL]\\nSELECT Boxes.Warehouse \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1602,
    "db_id": "warehouse_1",
    "question": {
      "id": 1602,
      "db_id": "warehouse_1",
      "question": "Find the average and total values of all boxes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average and total values of all boxes.[SQL]\\nSELECT Contents FROM Boxes WHERE CONTENTS != 'null' UNION SELECT sum(value) FROM Boxes WHERE CONTENTS  =  'null' GROUP BY CONTENTS ORDER BY avg(value) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1603,
    "db_id": "warehouse_1",
    "question": {
      "id": 1603,
      "db_id": "warehouse_1",
      "question": "What are the average and total values across all boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average and total values across all boxes?[SQL]\\nSELECT Contents FROM Boxes WHERE CONTENTS != 'null' GROUP BY ContentTypes HAVING avg(value)  >  1000 UNION SELECT contenttypes FROM boxes GROUP BY contenttypes ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1604,
    "db_id": "warehouse_1",
    "question": {
      "id": 1604,
      "db_id": "warehouse_1",
      "question": "Find the average and total capacity of all warehouses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average and total capacity of all warehouses.[SQL]\\nSELECT Contents FROM Boxes WHERE Warehouse  =  1 UNION SELECT avg(T1.capacity) ,  sum(T1.capacity) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T2.warehouse HAVING count(*)  >  100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1605,
    "db_id": "warehouse_1",
    "question": {
      "id": 1605,
      "db_id": "warehouse_1",
      "question": "What are the average and total capacities across all warehouses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average and total capacities across all warehouses?[SQL]\\nSELECT Boxes.Warehouse, avg(T1.capacity) ,  sum(T1.capacity) FROM Warehouses AS T1 JOIN Boxes ON T1.code  =  Boxes.warehouse GROUP BY Boxes.warehouse'\n        ,'SELECT avg(T1.capacity) ,  sum(T1.capacity) FROM Warehouses AS T1'\n    ,'SELECT avg(T1.capacity) ,  sum(T1.capacity) FROM Warehouses AS T1'\n     ,'SELECT avg(T1.capacity) ,  sum(T1.capacity) FROM Warehouses AS T1'\n     ,'SELECT avg(T1.capacity) ,  sum(T1.capacity) FROM Warehouses AS T1'\n     ,'SELECT avg("
  },
  {
    "id": 1606,
    "db_id": "warehouse_1",
    "question": {
      "id": 1606,
      "db_id": "warehouse_1",
      "question": "Find the average and maximum value for each different content."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average and maximum value for each different content.[SQL]\\nSELECT Contents \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1607,
    "db_id": "warehouse_1",
    "question": {
      "id": 1607,
      "db_id": "warehouse_1",
      "question": "What are the average and maximum values for each type of content in boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average and maximum values for each type of content in boxes?[SQL]\\nSELECT Contents  FROM Boxes WHERE contents  =  'letter' GROUP BY contents HAVING avg(value)  >  (SELECT avg(value) FROM boxes WHERE contents  =  'picture') ORDER BY avg(value) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1608,
    "db_id": "warehouse_1",
    "question": {
      "id": 1608,
      "db_id": "warehouse_1",
      "question": "Find the content that has the highest total values in all boxes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the content that has the highest total values in all boxes.[SQL]\\nSELECT Contents FROM Boxes WHERE value  =  (SELECT max(value) FROM Boxes) GROUP BY Contents ORDER BY sum(value) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1609,
    "db_id": "warehouse_1",
    "question": {
      "id": 1609,
      "db_id": "warehouse_1",
      "question": "What is the content with the greatest value across all boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the content with the greatest value across all boxes?[SQL]\\nSELECT Contents FROM Boxes WHERE value  =  (SELECT max(value) FROM Boxes) LIMIT 1 <MID>\n    LIMIT 1;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1610,
    "db_id": "warehouse_1",
    "question": {
      "id": 1610,
      "db_id": "warehouse_1",
      "question": "Select the average value of all the boxes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the average value of all the boxes.[SQL]\\nSELECT Boxes.Value FROM Boxes WHERE Contents != 'null' GROUP BY Contents ORDER BY avg(Boxes.Value) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1611,
    "db_id": "warehouse_1",
    "question": {
      "id": 1611,
      "db_id": "warehouse_1",
      "question": "What is the average value of boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average value of boxes?[SQL]\\nSELECT Boxes.Value FROM Boxes WHERE Contents != 'null' GROUP BY Contents ORDER BY avg(Boxes.Value) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1612,
    "db_id": "warehouse_1",
    "question": {
      "id": 1612,
      "db_id": "warehouse_1",
      "question": "Select all distinct contents in all the boxes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select all distinct contents in all the boxes.[SQL]\\nSELECT Contents FROM Boxes WHERE Contents != 'null' GROUP BY Contents ORDER BY count(*) DESC LIMIT 10'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1613,
    "db_id": "warehouse_1",
    "question": {
      "id": 1613,
      "db_id": "warehouse_1",
      "question": "What are the different contents in boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different contents in boxes?[SQL]\\nSELECT Contents FROM Boxes WHERE CONTENTS != 'null' GROUP BY Contents ORDER BY COUNT(*) DESC LIMIT 10'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1614,
    "db_id": "warehouse_1",
    "question": {
      "id": 1614,
      "db_id": "warehouse_1",
      "question": "Find the number of all distinct contents in all the boxes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of all distinct contents in all the boxes.[SQL]\\nSELECT Contents FROM Boxes WHERE CONTENTS != 'null' GROUP BY Contents ORDER BY COUNT(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1615,
    "db_id": "warehouse_1",
    "question": {
      "id": 1615,
      "db_id": "warehouse_1",
      "question": "How many different contents are stored in boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different contents are stored in boxes?[SQL]\\nSELECT Contents FROM Boxes WHERE CONTENTS != 'null' GROUP BY Contents ORDER BY COUNT(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1616,
    "db_id": "warehouse_1",
    "question": {
      "id": 1616,
      "db_id": "warehouse_1",
      "question": "Find all distinct locations of warehouses."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all distinct locations of warehouses.[SQL]\\nSELECT Contents FROM Boxes WHERE Warehouse IN (SELECT DISTINCT LOCATION FROM Warehouses) UNION SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.code WHERE T2.location  =  'Athens' EXCEPT SELECT T3.Contents FROM Boxes AS T3 JOIN Warehouses AS T4 ON T3.Warehouse  =  T4.code WHERE T4.location  =  'Athens' <MID>\n        LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1617,
    "db_id": "warehouse_1",
    "question": {
      "id": 1617,
      "db_id": "warehouse_1",
      "question": "What are the different locations of warehouses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different locations of warehouses?[SQL]\\nSELECT Value FROM Warehouses WHERE LOCATION != '' GROUP BY LOCATION'\n        ;"
  },
  {
    "id": 1618,
    "db_id": "warehouse_1",
    "question": {
      "id": 1618,
      "db_id": "warehouse_1",
      "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the code of boxes that are stored at the warehouses located at Chicago or New York.[SQL]\\nSELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Code FROM Warehouses WHERE LOCATION  =  'Chicago' OR LOCATION  =  'New York') <MID>\n        LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1619,
    "db_id": "warehouse_1",
    "question": {
      "id": 1619,
      "db_id": "warehouse_1",
      "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the codes of boxes stored in warehouses in either Chicago or New York?[SQL]\\nSELECT Boxes.Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE LOCATION  =  'Chicago' UNION SELECT Code FROM Warehouses WHERE LOCATION  =  'New York') <MID>\n    LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1620,
    "db_id": "warehouse_1",
    "question": {
      "id": 1620,
      "db_id": "warehouse_1",
      "question": "Find the total value of boxes in the warehouses located at Chicago or New York."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total value of boxes in the warehouses located at Chicago or New York.[SQL]\\nSELECT Warehouse FROM Warehouses WHERE LOCATION  =  'Chicago' OR LOCATION  =  'New York' UNION SELECT T1.warehouse FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.LOCATION  =  'Chicago' OR T2.LOCATION  =  'New York' GROUP BY T1.warehouse ORDER BY sum(T1.value) DESC LIMIT 1'\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1621,
    "db_id": "warehouse_1",
    "question": {
      "id": 1621,
      "db_id": "warehouse_1",
      "question": "What is the total value of boxes located in Chicago or New York?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total value of boxes located in Chicago or New York?[SQL]\\nSELECT Value FROM Boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE LOCATION  =  'Chicago' OR LOCATION  =  'New York') <MID>\n        LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1622,
    "db_id": "warehouse_1",
    "question": {
      "id": 1622,
      "db_id": "warehouse_1",
      "question": "Find all contents present in warehouses located in Chicago and those located in New York."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find all contents present in warehouses located in Chicago and those located in New York.[SQL]\\nSELECT Contents FROM Boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location  =  'Chicago' UNION SELECT code FROM warehouses WHERE location  =  'New York') <MID>\n        LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1623,
    "db_id": "warehouse_1",
    "question": {
      "id": 1623,
      "db_id": "warehouse_1",
      "question": "Find the contents that are stored in both Chicago and New York."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the contents that are stored in both Chicago and New York.[SQL]\\nSELECT Contents FROM Boxes WHERE warehouse  =  1 INTERSECT SELECT Contents FROM Boxes WHERE warehouse  =  3 <MID>\n        LIMIT 1000'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   "
  },
  {
    "id": 1624,
    "db_id": "warehouse_1",
    "question": {
      "id": 1624,
      "db_id": "warehouse_1",
      "question": "Find the type of contents that are not in the warehouses located at New York."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the type of contents that are not in the warehouses located at New York.[SQL]\\nSELECT Boxes.Contents FROM Boxes WHERE Boxes.warehouse NOT IN (SELECT code FROM warehouses WHERE LOCATION  =  'New York') UNION SELECT Contents FROM boxeS WHERE warehouse IN (SELECT code FROM warehouses WHERE LOCATION  =  'New York') EXCEPT SELECT Contents FROM boxeS WHERE warehouse IN (SELECT code FROM warehouses WHERE LOCATION  =  'New York')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1625,
    "db_id": "warehouse_1",
    "question": {
      "id": 1625,
      "db_id": "warehouse_1",
      "question": "What types of contents cannot be found in warehouses in New York?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What types of contents cannot be found in warehouses in New York?[SQL]\\nSELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE LOCATION != 'New York')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1626,
    "db_id": "warehouse_1",
    "question": {
      "id": 1626,
      "db_id": "warehouse_1",
      "question": "Find the location of the warehouses which have contents Rocks but not Scissors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the location of the warehouses which have contents Rocks but not Scissors.[SQL]\\nSELECT Warehouse FROM Boxes WHERE Contents  =  'Rocks' EXCEPT SELECT Warehouse FROM Boxes WHERE Contents  =  'Scissors' <MID>\n        LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1627,
    "db_id": "warehouse_1",
    "question": {
      "id": 1627,
      "db_id": "warehouse_1",
      "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the locations of warehouses that have boxes containing Rocks but not Scissors?[SQL]\\nSELECT Warehouse FROM Boxes WHERE Contents LIKE '%Rock%' EXCEPT SELECT Warehouse FROM Boxes WHERE Contents LIKE '%Scissors%' <MID>. You can use this file to submit your work.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1628,
    "db_id": "warehouse_1",
    "question": {
      "id": 1628,
      "db_id": "warehouse_1",
      "question": "Find the warehouses which store contents Rocks or Scissors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the warehouses which store contents Rocks or Scissors.[SQL]\\nSELECT Warehouse FROM Boxes WHERE Contents  =  'Rocks' OR Contents  =  'Scissors' GROUP BY Warehouse HAVING COUNT(*)  >=  2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1629,
    "db_id": "warehouse_1",
    "question": {
      "id": 1629,
      "db_id": "warehouse_1",
      "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[SQL]\\nSELECT Code FROM Boxes WHERE Contents  =  'Rocks' OR Contents  =  'Scissors' GROUP BY Code HAVING count(*)  >=  1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1630,
    "db_id": "warehouse_1",
    "question": {
      "id": 1630,
      "db_id": "warehouse_1",
      "question": "Find the location of the warehouses which store contents Rocks and Scissors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the location of the warehouses which store contents Rocks and Scissors.[SQL]\\nSELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location LIKE '%Rocks%' OR Warehouses.Location LIKE '%Scissors%' AND Warehouses.Capacity  =  100'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1631,
    "db_id": "warehouse_1",
    "question": {
      "id": 1631,
      "db_id": "warehouse_1",
      "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[SQL]\\nSELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN ( SELECT Box.Warehouse FROM Boxes AS Box WHERE Box.Contents  =  'Rocks' OR Box.Contents  =  'Scissors' ) UNION SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location NOT IN ( SELECT Box.Warehouse FROM Boxes AS Box WHERE Box.Contents  =  'Rocks' OR Box.Contents  =  'Scissors' ) AND Warehouses.location != '' AND Warehouses.location != 'null' AND Warehouses.location != 'undefined' AND Warehouses.location != 'NaN' AND Warehouses.location != '0' AND Warehouses.location != '1' AND Warehouses.location != '2' AND Warehouses.location != '"
  },
  {
    "id": 1632,
    "db_id": "warehouse_1",
    "question": {
      "id": 1632,
      "db_id": "warehouse_1",
      "question": "List the code and contents of all boxes sorted by their values."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the code and contents of all boxes sorted by their values.[SQL]\\nSELECT Code FROM BoxesORDER BY Value;"
  },
  {
    "id": 1633,
    "db_id": "warehouse_1",
    "question": {
      "id": 1633,
      "db_id": "warehouse_1",
      "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the codes and corresponding contents of all the boxes, ordered by their values?[SQL]\\nSELECT Code \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1634,
    "db_id": "warehouse_1",
    "question": {
      "id": 1634,
      "db_id": "warehouse_1",
      "question": "Find the code and contents of the box with the lowest value."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the code and contents of the box with the lowest value.[SQL]\\nSELECT Code \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1635,
    "db_id": "warehouse_1",
    "question": {
      "id": 1635,
      "db_id": "warehouse_1",
      "question": "What is the code and contents for the box that has the smallest value?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the code and contents for the box that has the smallest value?[SQL]\\nSELECT Code \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1636,
    "db_id": "warehouse_1",
    "question": {
      "id": 1636,
      "db_id": "warehouse_1",
      "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the unique contents of all boxes whose value is higher than the average value of all boxes.[SQL]\\nSELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes)'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1637,
    "db_id": "warehouse_1",
    "question": {
      "id": 1637,
      "db_id": "warehouse_1",
      "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different contents of boxes for which the value is higher than the average value across all boxes?[SQL]\\nSELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes) ORDER BY value DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1638,
    "db_id": "warehouse_1",
    "question": {
      "id": 1638,
      "db_id": "warehouse_1",
      "question": "List all different types of contents ordered by contents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all different types of contents ordered by contents.[SQL]\\nSELECT Contents FROM Boxes WHERE Contents != 'null' GROUP BY Contents ORDER BY Contents ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1639,
    "db_id": "warehouse_1",
    "question": {
      "id": 1639,
      "db_id": "warehouse_1",
      "question": "What are the different contents of boxes, ordered alphabetically?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different contents of boxes, ordered alphabetically?[SQL]\\nSELECT Contents FROM Boxes WHERE CONTENTS != '' ORDER BY Contents ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1640,
    "db_id": "warehouse_1",
    "question": {
      "id": 1640,
      "db_id": "warehouse_1",
      "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[SQL]\\nSELECT Code FROM Boxes WHERE value  >  (SELECT max(value) FROM Boxes WHERE Contents  =  'Rocks')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1641,
    "db_id": "warehouse_1",
    "question": {
      "id": 1641,
      "db_id": "warehouse_1",
      "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[SQL]\\nSELECT Code FROM Boxes WHERE value  >  (SELECT max(value) FROM Boxes WHERE contents LIKE '%Rock%')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1642,
    "db_id": "warehouse_1",
    "question": {
      "id": 1642,
      "db_id": "warehouse_1",
      "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[SQL]\\nSELECT Code FROM Boxes WHERE value  >  (SELECT max(value) FROM Boxes WHERE Contents  =  'Scissors')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1643,
    "db_id": "warehouse_1",
    "question": {
      "id": 1643,
      "db_id": "warehouse_1",
      "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[SQL]\\nSELECT Code FROM Boxes WHERE value  >  (SELECT max(value) FROM Boxes WHERE Contents  =  'Scissors')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1644,
    "db_id": "warehouse_1",
    "question": {
      "id": 1644,
      "db_id": "warehouse_1",
      "question": "Find the total value of boxes stored in the warehouse with the largest capacity."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total value of boxes stored in the warehouse with the largest capacity.[SQL]\\nSELECT Value FROM Boxes WHERE Warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0; SELECT sum(Value) FROM (SELECT Value FROM Boxes WHERE Warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0) AS T1; SELECT sum(value) FROM (SELECT Value FROM Boxes WHERE Warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0) AS T1; SELECT sum(value) FROM (SELECT Value FROM Boxes WHERE Warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0) AS T1; SELECT sum(value) FROM (SELECT Value FROM Boxes WHERE Warehouse  =  (SELECT code FROM warehouses ORDER BY capacity"
  },
  {
    "id": 1645,
    "db_id": "warehouse_1",
    "question": {
      "id": 1645,
      "db_id": "warehouse_1",
      "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total value of boxes kept in the warehouse with the greatest capacity?[SQL]\\nSELECT Value FROM Boxes WHERE warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0; SELECT sum(value) FROM (SELECT Value FROM Boxes WHERE warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0) AS T1; SELECT sum(value) FROM (SELECT Value FROM Boxes WHERE warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0) - (SELECT min(value) FROM (SELECT Value FROM Boxes WHERE warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) UNION ALL SELECT 0)) AS T1; SELECT sum(value) FROM (SELECT Value FROM Boxes WHERE warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT"
  },
  {
    "id": 1646,
    "db_id": "warehouse_1",
    "question": {
      "id": 1646,
      "db_id": "warehouse_1",
      "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[SQL]\\nSELECT Warehouse FROM BoxesGROUP BY WarehouseHAVING avg(Value)  >  150'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1647,
    "db_id": "warehouse_1",
    "question": {
      "id": 1647,
      "db_id": "warehouse_1",
      "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the average values of boxes for each warehouse than has an average value greater than 150?[SQL]\\nSELECT Boxes.Warehouse FROM Boxes WHERE avg(Boxes.value)  >  150 GROUP BY Boxes.Warehouse HAVING avg(Boxes.value)  >  150 ORDER BY avg(Boxes.value) DESC LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1648,
    "db_id": "warehouse_1",
    "question": {
      "id": 1648,
      "db_id": "warehouse_1",
      "question": "Find the total value and number of boxes for each content type."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total value and number of boxes for each content type.[SQL]\\nSELECT Contents FROM BoxesGROUP BY ContentsORDER BY Value;"
  },
  {
    "id": 1649,
    "db_id": "warehouse_1",
    "question": {
      "id": 1649,
      "db_id": "warehouse_1",
      "question": "For each content, what is the total value and number of boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each content, what is the total value and number of boxes?[SQL]\\nSELECT Contents \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1650,
    "db_id": "warehouse_1",
    "question": {
      "id": 1650,
      "db_id": "warehouse_1",
      "question": "Find the total, average, and maximum capacity for different locations."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total, average, and maximum capacity for different locations.[SQL]\\nSELECT Contents FROM Boxes WHERE Warehouse IN (SELECT LOCATION FROM Warehouses) GROUP BY CONTENTS'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1651,
    "db_id": "warehouse_1",
    "question": {
      "id": 1651,
      "db_id": "warehouse_1",
      "question": "For each location, what are the total, average, and maximum capacities of warehouses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each location, what are the total, average, and maximum capacities of warehouses?[SQL]\\nSELECT Warehouse FROM Boxes WHERE Warehouse  >  1 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1652,
    "db_id": "warehouse_1",
    "question": {
      "id": 1652,
      "db_id": "warehouse_1",
      "question": "Find the total capacity of all warehouse locations."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total capacity of all warehouse locations.[SQL]\\nSELECT Code FROM Warehouses WHERE location  =  'London' UNION SELECT code FROM Warehouses WHERE location  =  'Paris' UNION SELECT code FROM Warehouses WHERE location  =  'New York' UNION SELECT code FROM Warehouses WHERE location  =  'Tokyo' UNION SELECT code FROM Warehouses WHERE location  =  'Mumbai' UNION SELECT code FROM Warehouses WHERE location  =  'Seoul' UNION SELECT code FROM Warehouses WHERE location  =  'Singapore' UNION SELECT code FROM Warehouses WHERE location  =  'Shanghai' UNION SELECT code FROM Warehouses WHERE location  =  'Jakarta' UNION SELECT code FROM Warehouses WHERE location  =  'Dubai' UNION SELECT code FROM Warehouses WHERE location  =  'Los Angeles' UNION SELECT code FROM Ware"
  },
  {
    "id": 1653,
    "db_id": "warehouse_1",
    "question": {
      "id": 1653,
      "db_id": "warehouse_1",
      "question": "What is the total capacity of all warehouses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total capacity of all warehouses?[SQL]\\nSELECT Code FROM Warehouses WHERE capacity  =  (SELECT max(capacity) FROM Warehouses) UNION SELECT code FROM Warehouses EXCEPT SELECT code FROM Boxes GROUP BY warehouse HAVING count(*)  >  100'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1654,
    "db_id": "warehouse_1",
    "question": {
      "id": 1654,
      "db_id": "warehouse_1",
      "question": "Find the value of the most expensive boxes saved in each warehouse location."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the value of the most expensive boxes saved in each warehouse location.[SQL]\\nSELECT Warehouse FROM Boxes WHERE value  =  (SELECT max(value) FROM Boxes GROUP BY Warehouse) GROUP BY Warehouse LOCATION'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1655,
    "db_id": "warehouse_1",
    "question": {
      "id": 1655,
      "db_id": "warehouse_1",
      "question": "For each warehouse location, what is the value of the most expensive box?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each warehouse location, what is the value of the most expensive box?[SQL]\\nSELECT Value FROM Boxes WHERE warehouse  =  (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) ORDER BY value DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1656,
    "db_id": "warehouse_1",
    "question": {
      "id": 1656,
      "db_id": "warehouse_1",
      "question": "Select the warehouse codes along with the number of boxes in each warehouse."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the warehouse codes along with the number of boxes in each warehouse.[SQL]\\nSELECT Warehouse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1657,
    "db_id": "warehouse_1",
    "question": {
      "id": 1657,
      "db_id": "warehouse_1",
      "question": "How many boxes are there with each warehouse ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many boxes are there with each warehouse ?[SQL]\\nSELECT Warehouse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1658,
    "db_id": "warehouse_1",
    "question": {
      "id": 1658,
      "db_id": "warehouse_1",
      "question": "Find the number of different locations where Rocks are stored."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of different locations where Rocks are stored.[SQL]\\nSELECT Code FROM Boxes WHERE Contents  =  'Rocks' GROUP BY CodelocatioN()'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1659,
    "db_id": "warehouse_1",
    "question": {
      "id": 1659,
      "db_id": "warehouse_1",
      "question": "In how many different warehouses are Rocks stored within boxes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, In how many different warehouses are Rocks stored within boxes?[SQL]\\nSELECT Warehouse FROM Boxes WHERE contents  =  'Rocks' GROUP BY Warehouse HAVING count(*)  >=  2'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1660,
    "db_id": "warehouse_1",
    "question": {
      "id": 1660,
      "db_id": "warehouse_1",
      "question": "Select the code of each box, along with the name of the city the box is located in."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the code of each box, along with the name of the city the box is located in.[SQL]\\nSELECT Warehouse FROM Boxes WHERE code  =  103 UNION SELECT Warehouse FROM Boxes WHERE code  =  104 UNION SELECT Warehouse FROM Boxes WHERE code  =  105 UNION SELECT Warehouse FROM Boxes WHERE code  =  106 UNION SELECT Warehouse FROM Boxes WHERE code  =  107 UNION SELECT Warehouse FROM Boxes WHERE code  =  108 UNION SELECT Warehouse FROM Boxes WHERE code  =  109 UNION SELECT Warehouse FROM Boxes WHERE code  =  110 UNION SELECT Warehouse FROM Boxes WHERE code  =  111 UNION SELECT Warehouse FROM Boxes WHERE code  =  112 UNION SELECT Warehouse FROM Boxes WHERE code  =  113 UNION SELECT Warehouse FROM Boxes WHERE code  =  114 UNION SELECT Warehouse FROM Boxes WHERE"
  },
  {
    "id": 1661,
    "db_id": "warehouse_1",
    "question": {
      "id": 1661,
      "db_id": "warehouse_1",
      "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the codes of all boxes, as well as the locations of the warehouses they are in?[SQL]\\nSELECT Boxes.Code FROM Boxes WHERE Boxe.warehouse IN (SELECT Warehouses.location FROM Warehouses) UNION SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location LIKE '%New%' EXCEPT SELECT T3.code FROM boxes AS T3 JOIN warehouses AS T4 ON T3.warehouse  =  T4.code WHERE T4.location LIKE '%Old%''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1662,
    "db_id": "warehouse_1",
    "question": {
      "id": 1662,
      "db_id": "warehouse_1",
      "question": "Select the codes of all the boxes located in Chicago."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the codes of all the boxes located in Chicago.[SQL]\\nSELECT Boxes.Code FROM Boxes WHERE Boxes.warehouse IN (SELECT Warehouses.code FROM Warehouses WHERE Warehouses.location  =  'Chicago')'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1663,
    "db_id": "warehouse_1",
    "question": {
      "id": 1663,
      "db_id": "warehouse_1",
      "question": "What are the codes of boxes stored in warehouses in Chicago?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the codes of boxes stored in warehouses in Chicago?[SQL]\\nSELECT Boxes.Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE LOCATION  =  'Chicago') <MID>\n        LIMIT 100'\n    ;"
  },
  {
    "id": 1664,
    "db_id": "warehouse_1",
    "question": {
      "id": 1664,
      "db_id": "warehouse_1",
      "question": "Find the number of boxes saved in each warehouse."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of boxes saved in each warehouse.[SQL]\\nSELECT Warehouse FROM BoxesGROUP BY WarehouseORDER BY Boxes.Warehouse;"
  },
  {
    "id": 1665,
    "db_id": "warehouse_1",
    "question": {
      "id": 1665,
      "db_id": "warehouse_1",
      "question": "How many boxes are stored in each warehouse?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many boxes are stored in each warehouse?[SQL]\\nSELECT Warehouse FROM BoxesGROUP BY WarehouseORDER BY Boxes.Warehouse;"
  },
  {
    "id": 1666,
    "db_id": "warehouse_1",
    "question": {
      "id": 1666,
      "db_id": "warehouse_1",
      "question": "Find the number of distinct types of contents in each warehouse."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of distinct types of contents in each warehouse.[SQL]\\nSELECT Warehouse FROM BoxesGROUP BY WarehouseHAVING count(DISTINCT Contents)  >  100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1667,
    "db_id": "warehouse_1",
    "question": {
      "id": 1667,
      "db_id": "warehouse_1",
      "question": "How many different types of contents are stored in each warehouse?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different types of contents are stored in each warehouse?[SQL]\\nSELECT Warehouse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1668,
    "db_id": "warehouse_1",
    "question": {
      "id": 1668,
      "db_id": "warehouse_1",
      "question": "Select the codes of all warehouses that are above capacity."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the codes of all warehouses that are above capacity.[SQL]\\nSELECT Code FROM Warehouses WHERE capacity  >  (SELECT count(*) FROM boxes WHERE warehouse  =  Code) <MID>\n        LIMIT 100'\n    ;"
  },
  {
    "id": 1669,
    "db_id": "warehouse_1",
    "question": {
      "id": 1669,
      "db_id": "warehouse_1",
      "question": "What are the codes of warehouses that have more boxes than their capacity?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the codes of warehouses that have more boxes than their capacity?[SQL]\\nSELECT Warehouse FROM BoxesGROUP BY WarehouseHAVING count(*)  >  (SELECT capacity FROM warehouses WHERE code  =  Warehouse) UNION SELECT code FROM warehouses WHERE capacity  <  (SELECT count(*) FROM boxes GROUP BY Warehouse) ORDER BY Warehouse DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1670,
    "db_id": "warehouse_1",
    "question": {
      "id": 1670,
      "db_id": "warehouse_1",
      "question": "Find the total values of boxes that are not in the warehouses located at Chicago."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the total values of boxes that are not in the warehouses located at Chicago.[SQL]\\nSELECT Value FROM Boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location  =  'Chicago')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1671,
    "db_id": "warehouse_1",
    "question": {
      "id": 1671,
      "db_id": "warehouse_1",
      "question": "What is the total value of boxes contained in any location but Chicago?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Warehouses (\n   Code INTEGER NOT NULL,\n   Location VARCHAR(255) NOT NULL ,\n   Capacity INTEGER NOT NULL,\n   PRIMARY KEY (Code)\n )\nCREATE TABLE Boxes (\n    Code CHAR(4) NOT NULL,\n    Contents VARCHAR(255) NOT NULL ,\n    Value REAL NOT NULL ,\n    Warehouse INTEGER NOT NULL,\n    PRIMARY KEY (Code),\n    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)\n )\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total value of boxes contained in any location but Chicago?[SQL]\\nSELECT Value FROM Boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE LOCATION  =  'Chicago') UNION SELECT VaLUE FROM Boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE LOCATION != 'Chicago') <MID>\n    LIMIT 100'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1672,
    "db_id": "university_rank",
    "question": {
      "id": 1672,
      "db_id": "university_rank",
      "question": "Show name, city, and state for all universities in  alphabetical order of university name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show name, city, and state for all universities in  alphabetical order of university name.[SQL]\\nSELECT University_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1673,
    "db_id": "university_rank",
    "question": {
      "id": 1673,
      "db_id": "university_rank",
      "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university)."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, cities, and states of all universities in alphabetical order (by name of the university).[SQL]\\nSELECT University_ID  FROM universityORDER BY University_IDLIMIT 1000'\n        ;"
  },
  {
    "id": 1674,
    "db_id": "university_rank",
    "question": {
      "id": 1674,
      "db_id": "university_rank",
      "question": "How many universities are in Illinois or Ohio?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many universities are in Illinois or Ohio?[SQL]\\nSELECT university.University_ID FROM university WHERE city  =  'Illinois' OR city  =  'Ohio'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1675,
    "db_id": "university_rank",
    "question": {
      "id": 1675,
      "db_id": "university_rank",
      "question": "What is the total number of universities located in Illinois or Ohio?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total number of universities located in Illinois or Ohio?[SQL]\\nSELECT University_ID FROM university WHERE City IN ('Chicago','Cleveland') UNION SELECT University_ID FROM university WHERE State IN ('Illinois','Ohio')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1676,
    "db_id": "university_rank",
    "question": {
      "id": 1676,
      "db_id": "university_rank",
      "question": "What is the maximum, average, and minimum enrollment for universities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum, average, and minimum enrollment for universities?[SQL]\\nSELECT major_ranking.Rank FROM major_ranking WHERE university_id  =  123456789'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1677,
    "db_id": "university_rank",
    "question": {
      "id": 1677,
      "db_id": "university_rank",
      "question": "What is the maximum, average, and minimum enrollment for all universities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum, average, and minimum enrollment for all universities?[SQL]\\nSELECT University_ID FROM university;"
  },
  {
    "id": 1678,
    "db_id": "university_rank",
    "question": {
      "id": 1678,
      "db_id": "university_rank",
      "question": "List team name for all universities with enrollments above the average."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List team name for all universities with enrollments above the average.[SQL]\\nSELECT university.University_ID FROM university WHERE university.Enrollment  >  (SELECT avg(Enrollment) FROM university) AND university.Team_Name IS NOT NULL;[NoSQL] SELECT university.University_ID FROM university WHERE university.Enrollment  >  (SELECT avg(Enrollment) FROM university) AND university.Team_Name IS NOT NULL;[Files] SELECT university.University_ID FROM university WHERE university.Enrollment  >  (SELECT avg(Enrollment) FROM university) AND university.Team_Name IS NOT NULL;[Python] SELECT university.University_ID FROM university WHERE university.Enrollment  >  (SELECT avg(Enrollment) FROM university) AND university.Team_Name IS NOT NULL;[Java] SELECT university.University_ID FROM university WHERE university.Enrollment  >  (SELECT avg(Enrollment)"
  },
  {
    "id": 1679,
    "db_id": "university_rank",
    "question": {
      "id": 1679,
      "db_id": "university_rank",
      "question": "What are the names of all teams from universities that have more people enrolled than average ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all teams from universities that have more people enrolled than average ?[SQL]\\nSELECT university.University_ID FROM university WHERE university.Enrollment  >  (SELECT avg(Enrollment) FROM university) AND team_name NOT LIKE '%Men%' AND team_name NOT LIKE '%Women%' ORDER BY Enrollment DESC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1680,
    "db_id": "university_rank",
    "question": {
      "id": 1680,
      "db_id": "university_rank",
      "question": "Show all home conferences."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all home conferences.[SQL]\\nSELECT university.University_ID FROM university WHERE home_conference IS NOT NULL GROUP BY universiy.University_ID'\n        ;"
  },
  {
    "id": 1681,
    "db_id": "university_rank",
    "question": {
      "id": 1681,
      "db_id": "university_rank",
      "question": "What are the different home conferences from the university table?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different home conferences from the university table?[SQL]\\nSELECT university.University_ID FROM university WHERE home_conference != '' GROUP BY universiy.University_ID'', HOME_CONFERENCE ORDER BY COUNT(*) DESC'\n    LIMIT 10'\n    ;"
  },
  {
    "id": 1682,
    "db_id": "university_rank",
    "question": {
      "id": 1682,
      "db_id": "university_rank",
      "question": "Show all home conferences and the number of universities in each conference."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all home conferences and the number of universities in each conference.[SQL]\\nSELECT major_ranking.Rank FROM major_ranking WHERE major_ranking.University_ID IN (SELECT university_id FROM overall_ranking ORDER BY total DESC LIMIT 10) UNION SELECT 1 FROM major_ranking WHERE major_ranking.University_ID IN (SELECT university_id FROM overall_ranking ORDER BY total DESC LIMIT 10) ORDER BY rank ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1683,
    "db_id": "university_rank",
    "question": {
      "id": 1683,
      "db_id": "university_rank",
      "question": "For every home conference, how many universities attended that conference?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For every home conference, how many universities attended that conference?[SQL]\\nSELECT university.University_ID FROM university WHERE university.Home_Conference IN (SELECT home_conference FROM university GROUP BY home_conference HAVING count(*)  =  (SELECT max(count(*)) FROM university GROUP BY home_conference))'\n        ;"
  },
  {
    "id": 1684,
    "db_id": "university_rank",
    "question": {
      "id": 1684,
      "db_id": "university_rank",
      "question": "Which state has most number of universities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which state has most number of universities?[SQL]\\nSELECT major_ranking.University_ID FROM major_ranking WHERE major_ranking.rank  =  1 GROUP BY major_ranking.University_ID ORDER BY COUNT(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1685,
    "db_id": "university_rank",
    "question": {
      "id": 1685,
      "db_id": "university_rank",
      "question": "What is the state with the most universities?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the state with the most universities?[SQL]\\nSELECT major.Major_ID FROM major WHERE major.Major_Name  =  'Computer Science' ORDER BY total DESC LIMIT 10' <MID>ity_ID IN (SELECT university_id FROM overall_ranking) GROUP BY university.city HAVING count(*)  =  (SELECT count(*) FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking)) ORDER BY sum(reputation_point) / count(university_id) DESC LIMIT 1'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n"
  },
  {
    "id": 1686,
    "db_id": "university_rank",
    "question": {
      "id": 1686,
      "db_id": "university_rank",
      "question": "Show all home conferences with average enrollment of universities above 2000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all home conferences with average enrollment of universities above 2000.[SQL]\\nSELECT major_ranking.Rank FROM major_ranking WHERE major_ranking.total  >  2000 GROUP BY major_ranking.Rank HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1687,
    "db_id": "university_rank",
    "question": {
      "id": 1687,
      "db_id": "university_rank",
      "question": "What are the home conferences that have an average university enrollment above 2000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the home conferences that have an average university enrollment above 2000?[SQL]\\nSELECT major_ranking.Rank FROM major_ranking WHERE major_ranking.university_id IN (SELECT university_id FROM university WHERE enrollment  >  2000) GROUP BY major_ranking.Rank HAVING avg(university.enrollment)  >  2000'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1688,
    "db_id": "university_rank",
    "question": {
      "id": 1688,
      "db_id": "university_rank",
      "question": "Which conference has the least number of total enrollment?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which conference has the least number of total enrollment?[SQL]\\nSELECT University_ID FROM university WHERE home_conference IN (SELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1) GROUP BY home_conference ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1689,
    "db_id": "university_rank",
    "question": {
      "id": 1689,
      "db_id": "university_rank",
      "question": "What are the home conferences with the fewest number of people enrolled?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the home conferences with the fewest number of people enrolled?[SQL]\\nSELECT major_ranking.Rank FROM major_ranking WHERE major_ranking.University_ID IN (SELECT university_id FROM overall_ranking ORDER BY total DESC LIMIT 10) AND major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name  =  'Computer Science') UNION SELECT rank FROM major_ranking WHERE major_ranking.University_ID IN (SELECT university_id FROM overall_ranking ORDER BY total DESC LIMIT 10) AND major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name  =  'Electrical Engineering and Computer Sciences')'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1690,
    "db_id": "university_rank",
    "question": {
      "id": 1690,
      "db_id": "university_rank",
      "question": "List all major name and major code in the order of their major code"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all major name and major code in the order of their major code[SQL]\\nSELECT Major_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1691,
    "db_id": "university_rank",
    "question": {
      "id": 1691,
      "db_id": "university_rank",
      "question": "What are the names and codes for all majors ordered by their code?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and codes for all majors ordered by their code?[SQL]\\nSELECT Major_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1692,
    "db_id": "university_rank",
    "question": {
      "id": 1692,
      "db_id": "university_rank",
      "question": "Show all majors and major ranks for the university with name Augustana College."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all majors and major ranks for the university with name Augustana College.[SQL]\\nSELECT major.Major_ID  FROM major WHERE university_id  =  ( SELECT university_id FROM university WHERE University_name  =  'Augustana College' ) ORDER BY major_ranking.Total DESC NULLS LAST'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1693,
    "db_id": "university_rank",
    "question": {
      "id": 1693,
      "db_id": "university_rank",
      "question": "What are the ranks and names of all majors at Augustana College?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ranks and names of all majors at Augustana College?[SQL]\\nSELECT major_ranking.Rank FROM major_ranking WHERE university_id  =  123'\n        ;"
  },
  {
    "id": 1694,
    "db_id": "university_rank",
    "question": {
      "id": 1694,
      "db_id": "university_rank",
      "question": "What is the name, city, state of the university with a rank 1 on Accounting major?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name, city, state of the university with a rank 1 on Accounting major?[SQL]\\nSELECT University_ID FROM major_ranking WHERE Major_ID  =  2 AND Rank  =  1 ORDER BY Total DESC LIMIT 1; SELECT t1.city ,  t1.state FROM university AS t1 JOIN major_ranking AS t2 ON t1.university_id  =  t2.university_id WHERE t2.rank  =  1 AND t2.major_id  =  2; SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.university_id  =  t2.university_id WHERE t2.rank  =  1 AND t2.major_id  =  2; SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.university_id  =  t2.university_id WHERE t2.rank  ="
  },
  {
    "id": 1695,
    "db_id": "university_rank",
    "question": {
      "id": 1695,
      "db_id": "university_rank",
      "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name, city, and state of the university with number 1 ranked Accounting major?[SQL]\\nSELECT university.University_ID FROM major_ranking WHERE major_id = ( SELECT major_id FROM major WHERE Major_Name  =  'Accounting' ) ORDER BY rank LIMIT 1 JOIN university ON major_ranking.University_ID  =  university.University_ID SELECT university_name ,  city ,  state FROM university WHERE university_id  =  university_id LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1696,
    "db_id": "university_rank",
    "question": {
      "id": 1696,
      "db_id": "university_rank",
      "question": "What is the name of the university that has most number of majors with rank 1?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the university that has most number of majors with rank 1?[SQL]\\nSELECT University_ID FROM major_ranking WHERE Rank  =  1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1697,
    "db_id": "university_rank",
    "question": {
      "id": 1697,
      "db_id": "university_rank",
      "question": "What is the name of the university with the most majors ranked number 1?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the university with the most majors ranked number 1?[SQL]\\nSELECT University_ID FROM major_ranking WHERE Rank  =  1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1698,
    "db_id": "university_rank",
    "question": {
      "id": 1698,
      "db_id": "university_rank",
      "question": "Show all university names without a major with rank 1?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all university names without a major with rank 1?[SQL]\\nSELECT university.University_ID FROM university WHERE university.University_ID NOT IN (SELECT ranking.University_ID FROM major_ranking AS ranking JOIN major AS m ON ranking.Major_ID  =  m.Major_ID WHERE m.Major_Name  =  'Computer Science' AND ranking.Rank  =  1) UNION SELECT university.University_ID FROM university WHERE university.University_ID IN (SELECT ranking.University_ID FROM major_ranking AS ranking JOIN major AS m ON ranking.Major_ID  =  m.Major_ID WHERE m.Major_Name  =  'Computer Science' AND ranking.Rank  =  1) ORDER BY TOTAL DESC LIMIT 100' <MID>ity_ID FROM overall_ranking ORDER BY Total DESC LIMIT 100' | python3"
  },
  {
    "id": 1699,
    "db_id": "university_rank",
    "question": {
      "id": 1699,
      "db_id": "university_rank",
      "question": "What are the names of all universities without any majors ranked number 1?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all universities without any majors ranked number 1?[SQL]\\nSELECT university.University_ID FROM university WHERE university.University_ID NOT IN (SELECT major_ranking.University_ID FROM major_ranking WHERE major_ranking.rank  =  1) ORDER BY university.University_ID ASC'\n        ;"
  },
  {
    "id": 1700,
    "db_id": "university_rank",
    "question": {
      "id": 1700,
      "db_id": "university_rank",
      "question": "Show all university names with both major Accounting and major Urban Education."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all university names with both major Accounting and major Urban Education.[SQL]\\nSELECT university.University_ID FROM university WHERE Team_Name  =  'Accounting' INTERSECT SELECT univversity.University_ID FROM university WHERE Team_Name  =  'Urban Education' AS T1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1701,
    "db_id": "university_rank",
    "question": {
      "id": 1701,
      "db_id": "university_rank",
      "question": "What are the names of all universities that have both Accounting and Urban Education majors?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all universities that have both Accounting and Urban Education majors?[SQL]\\nSELECT University_ID FROM major_ranking WHERE Major_ID  =  104 UNION SELECT University_ID FROM major_ranking WHERE Major_ID  =  123'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1702,
    "db_id": "university_rank",
    "question": {
      "id": 1702,
      "db_id": "university_rank",
      "question": "What is the name and overall ranking of universities in Wisconsin state?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and overall ranking of universities in Wisconsin state?[SQL]\\nSELECT university.University_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1703,
    "db_id": "university_rank",
    "question": {
      "id": 1703,
      "db_id": "university_rank",
      "question": "What is the name and rank of every university in Wisconsin?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and rank of every university in Wisconsin?[SQL]\\nSELECT University_ID FROM university WHERE city LIKE '%Wisconsin%' ORDER BY reputation_point DESC NULLS LAST, research_point DESC NULLS LAST , citation_point DESC NULLS LAST , total DESC NULLS LAST , University_Name ASC;' <MID>ity_ID FROM overall_ranking ORDER BY reputation_point DESC NULLS LAST , research_point DESC NULLS LAST , citation_point DESC NULLS LAST , total DESC NULLS LAST , University_Name ASC;'\n\n    ORDER BY overall_ranking.University_ID;"
  },
  {
    "id": 1704,
    "db_id": "university_rank",
    "question": {
      "id": 1704,
      "db_id": "university_rank",
      "question": "What is the university name with highest research point?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the university name with highest research point?[SQL]\\nSELECT University_ID FROM overall_ranking WHERE Reputation_point  =  (SELECT max(Reputation_point) FROM overall_ranking) AND Research_point  =  (SELECT max(Research_point) FROM overall_ranking) ORDER BY University_ID ASC LIMIT 1; SELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.Research_point  =  (SELECT max(Research_point) FROM overall_ranking) ORDER BY t2.Reputation_point DESC LIMIT 1;'\n        ;"
  },
  {
    "id": 1705,
    "db_id": "university_rank",
    "question": {
      "id": 1705,
      "db_id": "university_rank",
      "question": "What is the name of the university with the most research points?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the university with the most research points?[SQL]\\nSELECT University_ID FROM overall_ranking WHERE Reputation_point  =  ( SELECT max(Reputation_point) FROM overall_ranking ) AND Research_point  =  ( SELECT max(Research_point) FROM overall_ranking ) ORDER BY Total DESC LIMIT 1; SELECT university_name FROM university WHERE university_id  =  ( SELECT university_id FROM overall_ranking WHERE Reputation_point  =  ( SELECT max(Reputation_point) FROM overall_ranking ) AND Research_point  =  ( SELECT max(Research_point) FROM overall_ranking ) ORDER BY Total DESC LIMIT 1 ) ;'\n\n    ORDER BY Rank;"
  },
  {
    "id": 1706,
    "db_id": "university_rank",
    "question": {
      "id": 1706,
      "db_id": "university_rank",
      "question": "List all university names in ascending order of their reputation points."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all university names in ascending order of their reputation points.[SQL]\\nSELECT university.University_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1707,
    "db_id": "university_rank",
    "question": {
      "id": 1707,
      "db_id": "university_rank",
      "question": "What are the names of all universities in ascending order of reputation points?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all universities in ascending order of reputation points?[SQL]\\nSELECT university.University_ID  FROM overall_ranking  WHERE Reputation_point  =  ( SELECT max(Reputation_point) FROM overall_ranking ) ORDER BY Research_point DESC NULLS LAST; <MID>ity_ID IN ( SELECT university_id FROM major_ranking );'\n    GROUP BY university.University_ID;"
  },
  {
    "id": 1708,
    "db_id": "university_rank",
    "question": {
      "id": 1708,
      "db_id": "university_rank",
      "question": "What is the name of university with major Accounting ranked 3 or above?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of university with major Accounting ranked 3 or above?[SQL]\\nSELECT University_ID FROM major_ranking WHERE Major_ID  =  1 AND Rank  >=  3 ORDER BY Rank LIMIT 1; SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Rank  <=  3 AND T2.Major_ID  =  1;'\n    LIMIT 1', 'Accounting', 3] AS query: SELECT University_Name FROM university JOIN major_ranking ON university.University_ID  =  major_ranking.University_ID WHERE major_ranking.Rank  <=  3 AND major_ranking.Major_ID  =  1;'\n    ;"
  },
  {
    "id": 1709,
    "db_id": "university_rank",
    "question": {
      "id": 1709,
      "db_id": "university_rank",
      "question": "What are the names of the university with an Accounting major ranked 3 or higher?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the university with an Accounting major ranked 3 or higher?[SQL]\\nSELECT University_ID FROM major_ranking WHERE Major_ID  =  12 AND Rank  >=  3'\n        ;"
  },
  {
    "id": 1710,
    "db_id": "university_rank",
    "question": {
      "id": 1710,
      "db_id": "university_rank",
      "question": "What is the total enrollment of universities with a overall rank 5 or below?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total enrollment of universities with a overall rank 5 or below?[SQL]\\nSELECT university.University_ID FROM university WHERE university.University_ID IN (SELECT university_id FROM overall_ranking ORDER BY Total DESC LIMIT 5) UNION SELECT university.University_ID FROM university WHERE university.Enrollment  =  (SELECT max(Enrollment) FROM university) UNION SELECT university.University_ID FROM university WHERE university.Enrollment  =  (SELECT min(Enrollment) FROM university)', '218463']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1711,
    "db_id": "university_rank",
    "question": {
      "id": 1711,
      "db_id": "university_rank",
      "question": "What is the total number of students enrolled in an university with a rank of 5 or below?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total number of students enrolled in an university with a rank of 5 or below?[SQL]\\nSELECT university.University_ID FROM overall_ranking WHERE reputation_point  +  Research_point  +  Citation_point  <=  150 AND rank  <=  5 JOIN university ON overall_ranking.University_ID  =  university.University_ID GROUP BY university.University_ID ORDER BY sum(enrollment) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1712,
    "db_id": "university_rank",
    "question": {
      "id": 1712,
      "db_id": "university_rank",
      "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and Citation point of the universities whose reputation points are top 3 and above.[SQL]\\nSELECT University_ID FROM overall_ranking WHERE Reputation_point  >=  (SELECT min(Reputation_point) FROM overall_ranking) ORDER BY Reputation_point DESC LIMIT 3'\n        ;"
  },
  {
    "id": 1713,
    "db_id": "university_rank",
    "question": {
      "id": 1713,
      "db_id": "university_rank",
      "question": "What is the name and citation point of the unversities with the top 3 reputation points?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name and citation point of the unversities with the top 3 reputation points?[SQL]\\nSELECT university.University_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1714,
    "db_id": "university_rank",
    "question": {
      "id": 1714,
      "db_id": "university_rank",
      "question": "which states do have more than two universities with enrollment smaller than 3000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, which states do have more than two universities with enrollment smaller than 3000?[SQL]\\nSELECT university.University_ID FROM university WHERE enrollment  <  3000 GROUP BY university.State HAVING count(*)  >  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1715,
    "db_id": "university_rank",
    "question": {
      "id": 1715,
      "db_id": "university_rank",
      "question": "What are the states that have more than 2 universities with an enrollment less than 3000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"university\" (\n\"University_ID\" int,\n\"University_Name\" text,\n\"City\" text,\n\"State\" text,\n\"Team_Name\" text,\n\"Affiliation\" text,\n\"Enrollment\" int,\n\"Home_Conference\" text,\nPRIMARY KEY (\"University_ID\")\n)\nCREATE TABLE \"overall_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Reputation_point\" int,\n\"Research_point\" int,\n\"Citation_point\" int,\n\"Total\" int,\nPRIMARY KEY (\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`)\n)\nCREATE TABLE \"major\" (\n\"Major_ID\" int,\n\"Major_Name\" text,\n\"Major_Code\" int,\nPRIMARY KEY (\"Major_ID\")\n)\nCREATE TABLE \"major_ranking\" (\n\"Rank\" int,\n\"University_ID\" int,\n\"Major_ID\" int,\nPRIMARY KEY (\"Rank\",\"Major_ID\",\"University_ID\"),\nFOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),\nFOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the states that have more than 2 universities with an enrollment less than 3000?[SQL]\\nSELECT major_ranking.University_ID FROM major_ranking WHERE major_ranking.enrollment  <  3000 GROUP BY major_ranking.state HAVING count(*)  >  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1716,
    "db_id": "movie_2",
    "question": {
      "id": 1716,
      "db_id": "movie_2",
      "question": "Find the titles of movies that don\u2019t have any rating."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles of movies that don\u2019t have any rating.[SQL]\\nSELECT Movie FROM Movies WHERE Rating != 'Good' INTERSECT SELECT Title FROM Movies EXCEPT SELECT Title FROM Movies WHERE Rating  =  'Good' <MID>.movietheaters AS T1 ON T1.movie  =  T2.code WHERE T1.name  =  'New York Movie Theater' AND T2.title  =  'Spider-Man' UNION SELECT T2.title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.name  =  'Los Angeles Movie Theater' AND T2.title  =  'Spider-Man' UNION SELECT T2.title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T1.name  =  'Chicago Movie Theater' AND T2.title  =  '"
  },
  {
    "id": 1717,
    "db_id": "movie_2",
    "question": {
      "id": 1717,
      "db_id": "movie_2",
      "question": "What are the names of movies that do not have any ratings?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of movies that do not have any ratings?[SQL]\\nSELECT Name FROM Movies WHERE Rating IS NULL'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1718,
    "db_id": "movie_2",
    "question": {
      "id": 1718,
      "db_id": "movie_2",
      "question": "Find the names of movies whose rating is \u2018G\u2019."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of movies whose rating is \u2018G\u2019.[SQL]\\nSELECT Name FROM Movies WHERE Rating  =  'G'*/ <MID>.movie_theater AS T1 ON T1.movie  =  T2.code WHERE T2.name  =  'Movie Theater XYZ' AND T2.city  =  'City 1' AND T2.state  =  'State 1' ORDER BY T1.title DESC LIMIT 3'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1719,
    "db_id": "movie_2",
    "question": {
      "id": 1719,
      "db_id": "movie_2",
      "question": "What are names of movies that have a 'G' ratings?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are names of movies that have a 'G' ratings?[SQL]\\nSELECT Name FROM Movies WHERE Rating  =  'G' <MID> SELECT name FROM MovieTheaters;'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1720,
    "db_id": "movie_2",
    "question": {
      "id": 1720,
      "db_id": "movie_2",
      "question": "Find the title of the movie that is played in the Odeon theater."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the title of the movie that is played in the Odeon theater.[SQL]\\nSELECT Movies.Code FROM MovieTheaters \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1721,
    "db_id": "movie_2",
    "question": {
      "id": 1721,
      "db_id": "movie_2",
      "question": "What are the movie titles for ones that are played in the Odeon theater?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the movie titles for ones that are played in the Odeon theater?[SQL]\\nSELECT Movies.Code FROM MovieTheaters WHERE MovieTHEATERS.Name  =  'Odeon' JOIN MOVIES ON MovieTHEATERS.Movie  =  MOVIES.Code SELECT Movies.Title FROM MOVIES JOIN MovieTHEATERS ON MovieTHEATERS.Movie  =  MOVIES.Code WHERE MovieTHEATERS.Name  =  'Odeon' <MID>T13:49:20Z'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1722,
    "db_id": "movie_2",
    "question": {
      "id": 1722,
      "db_id": "movie_2",
      "question": "Find the names of movies that are played in any theater and the name of the corresponding theater."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of movies that are played in any theater and the name of the corresponding theater.[SQL]\\nSELECT Movies.Name FROM MovieTheaters \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1723,
    "db_id": "movie_2",
    "question": {
      "id": 1723,
      "db_id": "movie_2",
      "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the movies that are played in any theater and the name of the corresponding theater?[SQL]\\nSELECT Movies.Name FROM MovieTheaters \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1724,
    "db_id": "movie_2",
    "question": {
      "id": 1724,
      "db_id": "movie_2",
      "question": "Find the number of movies whose rating is \u2018G\u2019."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of movies whose rating is \u2018G\u2019.[SQL]\\nSELECT Movie FROM Movies WHERE Rating  =  'G' GROUP BY Movie ORDER BY count(*) DESC LIMIT 10' <MID>.com/en/latest/tutorial/index.html).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1725,
    "db_id": "movie_2",
    "question": {
      "id": 1725,
      "db_id": "movie_2",
      "question": "How many movies had a 'G' rating?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many movies had a 'G' rating?[SQL]\\nSELECT Movie FROM Movies WHERE Rating  =  'G' COUNT(*) FROM Movies WHERE Rating  =  'G' <MID> SELECT count(*) FROM Movies WHERE Rating  =  'G' GROUP BY Rating ORDER BY count DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1726,
    "db_id": "movie_2",
    "question": {
      "id": 1726,
      "db_id": "movie_2",
      "question": "How many movies are playing across all theaters?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many movies are playing across all theaters?[SQL]\\nSELECT Movie FROM MovieTheaters;"
  },
  {
    "id": 1727,
    "db_id": "movie_2",
    "question": {
      "id": 1727,
      "db_id": "movie_2",
      "question": "How many movies are playing in theaters?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many movies are playing in theaters?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE Moviie IS NOT NULL GROUP BY Moviie HAVING COUNT(*)  >  100' , 'SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' ] , [3] , ['SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' , 3] , ['SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' , 3] , ['SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' , 3] , ['SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' , 3] , ['SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' , 3] , ['SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' , 3] , ['SELECT count(*) FROM MovieTheaters WHERE Moviie IS NOT NULL' , 3"
  },
  {
    "id": 1728,
    "db_id": "movie_2",
    "question": {
      "id": 1728,
      "db_id": "movie_2",
      "question": "How many distinct movies are on in theaters?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many distinct movies are on in theaters?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE LENGTH  >  0 GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1729,
    "db_id": "movie_2",
    "question": {
      "id": 1729,
      "db_id": "movie_2",
      "question": "How many different movies are playing?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different movies are playing?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE Moviie != 'null' GROUP BY Moviie HAVING COUNT(*)  >  100' <MID> SELECT count(DISTINCT title) FROM Movies'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1730,
    "db_id": "movie_2",
    "question": {
      "id": 1730,
      "db_id": "movie_2",
      "question": "How many distinct movie theaters are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many distinct movie theaters are there?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE TYPE = 'Regular' GROUP BY Movie ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1731,
    "db_id": "movie_2",
    "question": {
      "id": 1731,
      "db_id": "movie_2",
      "question": "How many different movie theaters exist?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different movie theaters exist?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE TYPE = 'Regular' GROUP BY Movie ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1732,
    "db_id": "movie_2",
    "question": {
      "id": 1732,
      "db_id": "movie_2",
      "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the rating of the movie whose name includes the word \u2018Citizen\u2019.[SQL]\\nSELECT Movies.Name FROM Movies WHERE TITLE LIKE '%Citizen%' INTERSECT SELECT T1.Rating FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1733,
    "db_id": "movie_2",
    "question": {
      "id": 1733,
      "db_id": "movie_2",
      "question": "What is the rating of the movie what has a name including a word like 'Citizen'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the rating of the movie what has a name including a word like 'Citizen'?[SQL]\\nSELECT Movies.Movie FROM Movies WHERE TITLE LIKE '%Citizen%' INTERSECT SELECT T1.Movies FROM Moviestheaters AS T1 JOIN Moviestheaters AS T2 ON T1.movie  =  T2.movie WHERE T1.name LIKE '%Cinema%' AND T2.name LIKE '%Ambassador%''}],\n     \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1734,
    "db_id": "movie_2",
    "question": {
      "id": 1734,
      "db_id": "movie_2",
      "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.[SQL]\\nSELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating  =  'G' OR Rating  =  'PG') <MID>. The output format is in HTML using CSS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1735,
    "db_id": "movie_2",
    "question": {
      "id": 1735,
      "db_id": "movie_2",
      "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[SQL]\\nSELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating  =  'G' OR Rating  =  'PG') <MID>.movietheaters AS T1 ON T1.movie  =  T2.code WHERE T2.Rating  =  'PG' UNION SELECT T1.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T2.Rating  =  'G' <MID>T1.movie  =  T2.code WHERE T2.Rating  =  'PG' UNION SELECT T1.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T2.Rating  =  'G' ORDER BY T1.name ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1736,
    "db_id": "movie_2",
    "question": {
      "id": 1736,
      "db_id": "movie_2",
      "question": "Find the name of the movies that are played in either cinema Odeon or Imperial."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the movies that are played in either cinema Odeon or Imperial.[SQL]\\nSELECT Movies.Name FROM MovieTheaters \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1737,
    "db_id": "movie_2",
    "question": {
      "id": 1737,
      "db_id": "movie_2",
      "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of all the movies that played at the Odeon or Imperial theater?[SQL]\\nSELECT Movies.Code FROM MovieTheaters \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1738,
    "db_id": "movie_2",
    "question": {
      "id": 1738,
      "db_id": "movie_2",
      "question": "Find the name of the movie that is on in both Odeon and Imperial theaters."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the movie that is on in both Odeon and Imperial theaters.[SQL]\\nSELECT Movies.Name FROM MovieTheaters WHERE Movie  =  (SELECT Code FROM MovieTheaters WHERE Name  =  'Odeon') INTERSECT SELECT Movies.Name FROM MovieTheaters WHERE Movie  =  (SELECT Code FROM MovieTheaters WHERE Name  =  'Imperial')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1739,
    "db_id": "movie_2",
    "question": {
      "id": 1739,
      "db_id": "movie_2",
      "question": "What movie is playing at both the Odeon and Imperial theater?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What movie is playing at both the Odeon and Imperial theater?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE name  =  'Odeon' INTERSECT SELECT Movie FROM MovieTheaters WHERE name  =  'Imperial' <MID>. The movie theater has one or more movies playing. A movie can be played at multiple movie theaters. Design a database schema for the above scenario.**_ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1740,
    "db_id": "movie_2",
    "question": {
      "id": 1740,
      "db_id": "movie_2",
      "question": "Find the name of all movies that are not played in Odeon theater."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of all movies that are not played in Odeon theater.[SQL]\\nSELECT Movies.Name FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name  =  'Odeon') <MID> SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie EXCEPT SELECT T1.title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' GROUP BY T1.title HAVING count(*)  >  100'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1741,
    "db_id": "movie_2",
    "question": {
      "id": 1741,
      "db_id": "movie_2",
      "question": "What are the names of every movie that is not playing at the Odeon theater?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of every movie that is not playing at the Odeon theater?[SQL]\\nSELECT Movies.Name FROM Movies WHERE Movies.Code NOT IN (SELECT Movie FROM MovieTheaters WHERE MovieTheaters.Name  =  'Odeon')' <MID> SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' EXCEPT SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE name  =  'Odeon')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1742,
    "db_id": "movie_2",
    "question": {
      "id": 1742,
      "db_id": "movie_2",
      "question": "List in alphabetical order the titles of all movies."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List in alphabetical order the titles of all movies.[SQL]\\nSELECT Movie FROM MovieTheaters WHERE TYPE  =  'Regular' ORDER BY Title ASC' <MID>. The movie theater is of a regular type and shows more than 3 movies. List the title of the movie shown at the movie theater. Sort the titles in ascending order. List only one title per movie theater in the output.| Regular | 3 | TITLE1 , TITLE4 | TITLE1 , TITLE4 |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1743,
    "db_id": "movie_2",
    "question": {
      "id": 1743,
      "db_id": "movie_2",
      "question": "What are the movie names in alphabetical order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the movie names in alphabetical order?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL ORDER BY TITLE ASC' , 'SELECT Title FROM Movies ORDER BY TITLE ASC' ] ,\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1744,
    "db_id": "movie_2",
    "question": {
      "id": 1744,
      "db_id": "movie_2",
      "question": "Find the titles of all movies sorted by their ratings."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles of all movies sorted by their ratings.[SQL]\\nSELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.movie != 'null' ORDER BY T1.Rating DESC' <MID>\n        LIMIT 3'\n    ;"
  },
  {
    "id": 1745,
    "db_id": "movie_2",
    "question": {
      "id": 1745,
      "db_id": "movie_2",
      "question": "What are the movie names sorted by rating?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the movie names sorted by rating?[SQL]\\nSELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.movie IN (SELECT T1.code FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie ORDER BY T1.Rating DESC) ORDER BY MovieTheaters.Name'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1746,
    "db_id": "movie_2",
    "question": {
      "id": 1746,
      "db_id": "movie_2",
      "question": "Find the name of the theater that is playing the most number of movies."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the theater that is playing the most number of movies.[SQL]\\nSELECT Movies.Code FROM Movies WHERE TITLE  =  'Avatar' UNION SELECT MovieTheaters.Code FROM MovieTheaters WHERE NAME  =  'Cineplex' ORDER BY count(*) DESC LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1747,
    "db_id": "movie_2",
    "question": {
      "id": 1747,
      "db_id": "movie_2",
      "question": "What is the name of the theater playing the most movies?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the theater playing the most movies?[SQL]\\nSELECT Movies.Code FROM MovieTheaters WHERE MovieTheaters.Movie IN (SELECT MIN(Movie) FROM MovieTheaters) UNION SELECT Movies.Code FROM MovieTheaters WHERE MovieTheaters.Movie IN (SELECT MAX(Movie) FROM MovieTheaters) ORDER BY Movies.Title DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1748,
    "db_id": "movie_2",
    "question": {
      "id": 1748,
      "db_id": "movie_2",
      "question": "Find the name of the movie that is played in the most number of theaters."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the movie that is played in the most number of theaters.[SQL]\\nSELECT Movies.Name FROM MovieTheaters \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1749,
    "db_id": "movie_2",
    "question": {
      "id": 1749,
      "db_id": "movie_2",
      "question": "What is the name of the film playing at the most number of theaters?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the film playing at the most number of theaters?[SQL]\\nSELECT Movies.Name FROM MovieTheaters \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1750,
    "db_id": "movie_2",
    "question": {
      "id": 1750,
      "db_id": "movie_2",
      "question": "Find the number of movies in each rating."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of movies in each rating.[SQL]\\nSELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie IN (SELECT Code FROM Movies WHERE Rating  =  'G') UNION SELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie IN (SELECT Code FROM Movies WHERE Rating  =  'PG') UNION SELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie IN (SELECT Code FROM Movies WHERE Rating  =  'NC-17') UNION SELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie IN (SELECT Code FROM Movies WHERE Rating  =  'R')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1751,
    "db_id": "movie_2",
    "question": {
      "id": 1751,
      "db_id": "movie_2",
      "question": "How many movies exist for each rating?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many movies exist for each rating?[SQL]\\nSELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie  =  1034678956; SELECT count(*) FROM Movies GROUP BY Rating; SELECT count(*) FROM Movies WHERE Rating  =  'PG'; SELECT count(*) FROM Movies WHERE Rating  =  'G'; SELECT count(*) FROM Movies WHERE Rating  =  'NC-17'; SELECT count(*) FROM Movies WHERE Rating  =  'R'; SELECT count(*) FROM Movies WHERE Rating  =  'TV-MA'; SELECT count(*) FROM Movies WHERE Rating  =  'TV-14'; SELECT count(*) FROM Movies WHERE Rating  =  'TV-Y'; SELECT count(*) FROM Movies WHERE Rating  =  'TV-Y7'; SELECT count(*) FROM Movies WHERE Rating  =  'TV-G'; SELECT count(*) FROM Movies"
  },
  {
    "id": 1752,
    "db_id": "movie_2",
    "question": {
      "id": 1752,
      "db_id": "movie_2",
      "question": "Find the number of movies whose rating is not null."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of movies whose rating is not null.[SQL]\\nSELECT Movie FROM Movies WHERE Rating != 'null' GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1753,
    "db_id": "movie_2",
    "question": {
      "id": 1753,
      "db_id": "movie_2",
      "question": "How many movies have a rating that is not null?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many movies have a rating that is not null?[SQL]\\nSELECT Movie FROM Movies WHERE Rating != 'null' AND Rating != '' AND Rating != 'NULL' AND Rating != NULL GROUP BY Rating ORDER BY COUNT(*) DESC LIMIT 10'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1754,
    "db_id": "movie_2",
    "question": {
      "id": 1754,
      "db_id": "movie_2",
      "question": "Find the name of theaters that has at least one movie playing."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of theaters that has at least one movie playing.[SQL]\\nSELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters)']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1755,
    "db_id": "movie_2",
    "question": {
      "id": 1755,
      "db_id": "movie_2",
      "question": "What are the names of every theater with at least one movie playing?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of every theater with at least one movie playing?[SQL]\\nSELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters) ORDER BY Name'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1756,
    "db_id": "movie_2",
    "question": {
      "id": 1756,
      "db_id": "movie_2",
      "question": "Select the name of all movie theaters that are not currently showing a movie."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the name of all movie theaters that are not currently showing a movie.[SQL]\\nSELECT Name FROM MovieTheaters WHERE code NOT IN (SELECT Movie FROM MovieTheaters) <MID>. The movie theater is empty if it does not have a movie assigned to it. Design a query that will return the names of all movie theaters that are not currently showing a movie. The query result format is shown below. Note: The query must use the MovieTheaters table only. Do not use the Movies table in any way.  </p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1757,
    "db_id": "movie_2",
    "question": {
      "id": 1757,
      "db_id": "movie_2",
      "question": "What are the names of all cinemas not showing any movies?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all cinemas not showing any movies?[SQL]\\nSELECT Name FROM MovieTheaters WHERE code NOT IN (SELECT Movie FROM MovieTheaters) ORDER BY Name ASC; SELECT Name FROM MovieTheaters EXCEPT SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code GROUP BY T1.name HAVING count(*)  =  0 ORDER BY Name ASC; SELECT Name FROM MovieTheaters EXCEPT SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code GROUP BY T1.name HAVING count(*)  =  0 ORDER BY Name ASC; SELECT Name FROM MovieTheaters EXCEPT SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code GROUP BY T1.name HAVING count(*)  =  0 ORDER BY Name ASC;"
  },
  {
    "id": 1758,
    "db_id": "movie_2",
    "question": {
      "id": 1758,
      "db_id": "movie_2",
      "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.[SQL]\\nSELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating  =  'G') <MID>. The movie theater has only one movie playing at a time. A movie can be played in multiple movie theaters. A movie has a rating either 'G' or 'PG'. Design a database schema for the above scenario. Then write SQL queries to answer each of the following questions: 1) Find the name of the movie theaters that are playing the movies whose rating is 'G'. 2) Find the names of the movie theaters that are not playing any movies with a rating of 'G'. 3) Find the names of the movie theaters that are playing at least two movies. 4) Find the names of the movie theaters that are playing all movies with a rating of 'G'. 5) Find the names of the movie theaters that are not playing any movies with a rating of 'G"
  },
  {
    "id": 1759,
    "db_id": "movie_2",
    "question": {
      "id": 1759,
      "db_id": "movie_2",
      "question": "What are the names of theaters playing 'G' rated movies?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of theaters playing 'G' rated movies?[SQL]\\nSELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating  =  'G') <MID> SELECT name FROM MovieTheaters WHERE movie IN (SELECT code FROM Movies WHERE rating  =  'G')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1760,
    "db_id": "movie_2",
    "question": {
      "id": 1760,
      "db_id": "movie_2",
      "question": "Select the title of all movies."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Select the title of all movies.[SQL]\\nSELECT Movie FROM MovieTheaters WHERE Movie != 'null' GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1'\n        GROUP BY Movie;"
  },
  {
    "id": 1761,
    "db_id": "movie_2",
    "question": {
      "id": 1761,
      "db_id": "movie_2",
      "question": "What are all of the movie names?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all of the movie names?[SQL]\\nSELECT Name FROM Movies WHERE Rating  =  'PG' UNION SELECT Name FROM Movies WHERE Rating  =  'NC-17' <MID>.movietheaters AS T1 ON T1.movie  =  T2.code WHERE T2.Name  =  'Movie Theater XYZ' AND T2.city  =  'City Z' AND T2.state  =  'State A' ORDER BY T1.title DESC LIMIT 3'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1762,
    "db_id": "movie_2",
    "question": {
      "id": 1762,
      "db_id": "movie_2",
      "question": "Show all the distinct ratings in the database."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all the distinct ratings in the database.[SQL]\\nSELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Rating != 'null' GROUP BY MovieTheaters.Rating ORDER BY MovieTheaters.Rating ASC'\n       \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
  },
  {
    "id": 1763,
    "db_id": "movie_2",
    "question": {
      "id": 1763,
      "db_id": "movie_2",
      "question": "What are the different movie ratings?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different movie ratings?[SQL]\\nSELECT Movies.Code FROM Movies WHERE Rating  =  'PG' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'NC-17' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'R' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'UNRATED' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'G' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'PG-13' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'TV-MA' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'TV-14' UNION SELECT Movies.Code FROM Movies WHERE Rating  =  'TV-Y' UNION SELECT Movies.Code FROM Movies WHERE Rating "
  },
  {
    "id": 1764,
    "db_id": "movie_2",
    "question": {
      "id": 1764,
      "db_id": "movie_2",
      "question": "Show all information of all unrated movies."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all information of all unrated movies.[SQL]\\nSELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie IS NULL'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1765,
    "db_id": "movie_2",
    "question": {
      "id": 1765,
      "db_id": "movie_2",
      "question": "What is all the information about the unrated movies?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is all the information about the unrated movies?[SQL]\\nSELECT Code FROM Movies WHERE Rating IS NULL'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1766,
    "db_id": "movie_2",
    "question": {
      "id": 1766,
      "db_id": "movie_2",
      "question": "Show the titles of movies not currently being shown in any theaters."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the titles of movies not currently being shown in any theaters.[SQL]\\nSELECT Movie FROM MovieTheaters WHERE Movie != TITLE_ID AND TIME_SHOWING != '00:00:00' UNION SELECT Title FROM Movies EXCEPT SELECT TITLE_ID FROM MovieTheaters WHERE TIME_SHOWING != '00:00:00' ORDER BY Title ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1767,
    "db_id": "movie_2",
    "question": {
      "id": 1767,
      "db_id": "movie_2",
      "question": "What are the names of the movies not being shown in any theaters?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Movies (\n  Code INTEGER PRIMARY KEY,\n  Title VARCHAR(255) NOT NULL,\n  Rating VARCHAR(255) \n)\nCREATE TABLE MovieTheaters (\n  Code INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Movie INTEGER,  \n    FOREIGN KEY (Movie) REFERENCES Movies(Code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the movies not being shown in any theaters?[SQL]\\nSELECT Movie FROM MovieTheaters WHERE Movie NOT IN (SELECT Movie FROM MovieTheaters) ORDER BY TITLE ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1768,
    "db_id": "planet_1",
    "question": {
      "id": 1768,
      "db_id": "planet_1",
      "question": "Who receieved the heaviest package?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who receieved the heaviest package?[SQL]\\nSELECT Recipient FROM PackageORDER BY Weight;"
  },
  {
    "id": 1769,
    "db_id": "planet_1",
    "question": {
      "id": 1769,
      "db_id": "planet_1",
      "question": "What is the name of the client who received the heaviest package?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the client who received the heaviest package?[SQL]\\nSELECT Client.Contents FROM Package WHERE weight = (SELECT max(weight) FROM Package) JOIN ClienT ON Package.Sender = ClienT.AccountNumber OR Package.Recipient = ClienT.AccountNumber'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 1770,
    "db_id": "planet_1",
    "question": {
      "id": 1770,
      "db_id": "planet_1",
      "question": "What is the total weight of all the packages that customer Leo Wong sent?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total weight of all the packages that customer Leo Wong sent?[SQL]\\nSELECT Sender FROM Package WHERE Sender IN (SELECT T1.AccountNumber FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber  =  T2.Sender WHERE T1.Name  =  'Leo Wong')'\n\n    LIMIT 1'\n\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1771,
    "db_id": "planet_1",
    "question": {
      "id": 1771,
      "db_id": "planet_1",
      "question": "What is the total weight for all packages that Leo Wong sent?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total weight for all packages that Leo Wong sent?[SQL]\\nSELECT Sender FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong') UNION SELECT sum(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong')'\n\n    ORDER BY Sender;"
  },
  {
    "id": 1772,
    "db_id": "planet_1",
    "question": {
      "id": 1772,
      "db_id": "planet_1",
      "question": "What is the position of Amy Wong?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the position of Amy Wong?[SQL]\\nSELECT Package.Contents FROM Package WHERE Package.Contents  =  'Amy Wong' <MID>\n    GROUP BY Employee.PackageNumber;"
  },
  {
    "id": 1773,
    "db_id": "planet_1",
    "question": {
      "id": 1773,
      "db_id": "planet_1",
      "question": "What position does Amy Wong have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What position does Amy Wong have?[SQL]\\nSELECT Package.Contents FROM Package WHERE Package.Weight  =  170 UNION SELECT T1.Name FROM Employee AS T1 JOIN Has_clearance AS T2 ON T1.EmployeeID  =  T2.employee JOIN Planet AS T3 ON T2.planet  =  T3.PlanetID WHERE T3.name  =  'Earth' UNION SELECT T4.name FROM Employee AS T4 JOIN Has_clearance AS T5 ON T4.EmployeeID  =  T5.employee JOIN Planet AS T6 ON T5.planet  =  T6.PlanetID WHERE T6.name  =  'Mars' UNION SELECT T7.name FROM Employee AS T7 JOIN Has_clearance AS T8 ON T7.EmployeeID  =  T8.employee JOIN Planet AS T9 ON T8.planet  =  T9.PlanetID WHERE"
  },
  {
    "id": 1774,
    "db_id": "planet_1",
    "question": {
      "id": 1774,
      "db_id": "planet_1",
      "question": "What is Turanga Leela's salary and position?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is Turanga Leela's salary and position?[SQL]\\nSELECT Sender FROM Package WHERE Contents = 'Turanga Leela' AND Sender != -1' SELECT T1.Position ,  T1.Salary FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID  =  T2.Manager WHERE T2.Date  =  '2016-05-25' AND T2.ShipmentID  =  1' SELECT T1.Position ,  T1.Salary FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID  =  T2.Manager WHERE T2.Date  =  '2016-05-25' AND T2.ShipmentID  =  2' SELECT T1.Position ,  T1.Salary FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID  =  T2.Manager"
  },
  {
    "id": 1775,
    "db_id": "planet_1",
    "question": {
      "id": 1775,
      "db_id": "planet_1",
      "question": "What is the salary and position of the employee named Turanga Leela?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the salary and position of the employee named Turanga Leela?[SQL]\\nSELECT Sender FROM Package WHERE Contents = 'Turanga Leela' AND Sender != -1' SELECT T1.name ,  T1.position FROM Employee AS T1 JOIN Has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  3' SELECT T1.name ,  T1.position FROM Employee AS T1 JOIN Has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  3' SELECT T1.name ,  T1.position FROM Employee AS T1 JOIN Has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  3' SELECT T1.name ,  T1.position FROM Employee AS T1 JOIN Has_clearance AS T2 ON T1.employeeid  = "
  },
  {
    "id": 1776,
    "db_id": "planet_1",
    "question": {
      "id": 1776,
      "db_id": "planet_1",
      "question": "What is the average salary of all intern jobs?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average salary of all intern jobs?[SQL]\\nSELECT Employee.Sender FROM Package WHERE Contents = 'Intern' GROUP BY Employee.Sender ORDER BY AVG(Employee.Salary) DESC LIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1777,
    "db_id": "planet_1",
    "question": {
      "id": 1777,
      "db_id": "planet_1",
      "question": "What is the average salary of an intern?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average salary of an intern?[SQL]\\nSELECT Weight FROM Package WHERE Contents = 'Intern' GROUP BY Contents HAVING avg(Weight) > 100' <MID>\n    GROUP BY ContentsHAVING avg(Weight) > 100'\n    ORDER BY Contents;"
  },
  {
    "id": 1778,
    "db_id": "planet_1",
    "question": {
      "id": 1778,
      "db_id": "planet_1",
      "question": "What level is Physician?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What level is Physician?[SQL]\\nSELECT Planet.Contents FROM Has_Clearance WHERE LEVEL  =  3 AND TYPE  =  'Physician' UNION SELECT PHYSICIAN.Contents FROM PHYSICIAN WHERE TYPE  =  'Physician' EXCEPT SELECT PHYSICIAN.Contents FROM PHYSICIAN WHERE TYPE  =  'Physician' INTERSECT SELECT PHYSICIAN.Contents FROM PHYSICIAN WHERE TYPE  =  'Physician' INTERSECT SELECT PHYSICIAN.Contents FROM PHYSICIAN WHERE TYPE  =  'Physician' EXCEPT SELECT PHYSICIAN.Contents FROM PHYSICIAN WHERE TYPE  =  'Physician' INTERSECT SELECT PHYSICIAN.Contents FROM PHYSICIAN WHERE T"
  },
  {
    "id": 1779,
    "db_id": "planet_1",
    "question": {
      "id": 1779,
      "db_id": "planet_1",
      "question": "What is the clearance level of a physician?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the clearance level of a physician?[SQL]\\nSELECT Employee.Recipient FROM Has_Clearance WHERE Has_Clearance.Level  =  3 AND Has_Clearance.employee IN (SELECT T1.employee FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.employee  =  T2.EmployeeID WHERE T2.position  =  'Physician')'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1780,
    "db_id": "planet_1",
    "question": {
      "id": 1780,
      "db_id": "planet_1",
      "question": "List Package Number of all package sent by Leo Wong?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List Package Number of all package sent by Leo Wong?[SQL]\\nSELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong')'\n\n    LIMIT 100'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n"
  },
  {
    "id": 1781,
    "db_id": "planet_1",
    "question": {
      "id": 1781,
      "db_id": "planet_1",
      "question": "What is the number of all packages that Leo Wong sent?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of all packages that Leo Wong sent?[SQL]\\nSELECT Sender FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong')'\n\n    LIMIT 100'\n\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1782,
    "db_id": "planet_1",
    "question": {
      "id": 1782,
      "db_id": "planet_1",
      "question": "List all package numbers received by Leo Wong ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all package numbers received by Leo Wong ?[SQL]\\nSELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong')'\n\n    LIMIT 100'\n\n    ;"
  },
  {
    "id": 1783,
    "db_id": "planet_1",
    "question": {
      "id": 1783,
      "db_id": "planet_1",
      "question": "What are all of the package numbers received by Leo Wong?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all of the package numbers received by Leo Wong?[SQL]\\nSELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong') AND Sender != Recipient'\n\n    LIMIT 100'\n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   \n\n   "
  },
  {
    "id": 1784,
    "db_id": "planet_1",
    "question": {
      "id": 1784,
      "db_id": "planet_1",
      "question": "List all package sent or received by Leo Wong."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all package sent or received by Leo Wong.[SQL]\\nSELECT Sender FROM Package WHERE Contents LIKE '%Leo Wong%' UNION SELECT Recipient FROM Package WHERE Contents LIKE '%Leo Wong%' <MID>\n    GROUP BY Sender;"
  },
  {
    "id": 1785,
    "db_id": "planet_1",
    "question": {
      "id": 1785,
      "db_id": "planet_1",
      "question": "What are all the different package numbers that Leo Wong sent or received?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the different package numbers that Leo Wong sent or received?[SQL]\\nSELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong') UNION SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong')'\n\n    LIMIT 1000'\n\n    ;"
  },
  {
    "id": 1786,
    "db_id": "planet_1",
    "question": {
      "id": 1786,
      "db_id": "planet_1",
      "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[SQL]\\nSELECT Sender FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong') AND Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'Ogden Wernstrom')'\n\n    LIMIT 100'\n\n    ;"
  },
  {
    "id": 1787,
    "db_id": "planet_1",
    "question": {
      "id": 1787,
      "db_id": "planet_1",
      "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many packages sent by Ogden Wernstrom and received by Leo Wong?[SQL]\\nSELECT Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name  =  'Leo Wong')'\n\n    ORDER BY Weight;"
  },
  {
    "id": 1788,
    "db_id": "planet_1",
    "question": {
      "id": 1788,
      "db_id": "planet_1",
      "question": "What are the contents of package sent by John Zoidfarb?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the contents of package sent by John Zoidfarb?[SQL]\\nSELECT Package.Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'John Zoidfarb') AND shipment IN (SELECT shipment FROM Package GROUP BY shipment HAVING count(*)  >  1) UNION SELECT Package.Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'John Zoidfarb') AND shipment NOT IN (SELECT shipment FROM Package GROUP BY shipment HAVING count(*)  >  1) ORDER BY Package.Contents'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1789,
    "db_id": "planet_1",
    "question": {
      "id": 1789,
      "db_id": "planet_1",
      "question": "What are the package contents of all those sent by John Zoidfarb?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the package contents of all those sent by John Zoidfarb?[SQL]\\nSELECT Package.Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name  =  'John Zoidfarb') UNION SELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.Manager  =  T3.EmployeeID WHERE T3.Name  =  'John Zoidfarb' UNION SELECT T4.Contents FROM Package AS T4 JOIN Shipment AS T5 ON T4.Shipment  =  T5.Shipment JOIN Employee AS T6 ON T5.Manager  =  T6.EmployeeID WHERE T6.Name  =  'John Zoidfarb' UNION SELECT T7.Contents FROM Package AS T7 JOIN Shipment AS T8 ON T7.Shipment  =  T8.Shipment JOIN Employee AS"
  },
  {
    "id": 1790,
    "db_id": "planet_1",
    "question": {
      "id": 1790,
      "db_id": "planet_1",
      "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[SQL]\\nSELECT PackageNumber FROM Package WHERE Sender IN ( SELECT T1.AccountNumber FROM CLIENT AS T1 JOIN Package AS T2 ON T1.AccountNumber  =  T2.Sender WHERE T1.Name LIKE '%John%' ) ORDER BY WEIGHT DESC LIMIT 1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1791,
    "db_id": "planet_1",
    "question": {
      "id": 1791,
      "db_id": "planet_1",
      "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[SQL]\\nSELECT PackageNumber FROM Package WHERE Sender LIKE '%John%' ORDER BY WEIGHT DESC LIMIT 1'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1792,
    "db_id": "planet_1",
    "question": {
      "id": 1792,
      "db_id": "planet_1",
      "question": "List package number and weight of top 3 lightest packages."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List package number and weight of top 3 lightest packages.[SQL]\\nSELECT PackageNumber FROM Package WHERE WEIGHT  =  (SELECT min(WEIGHT) FROM Package) LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1793,
    "db_id": "planet_1",
    "question": {
      "id": 1793,
      "db_id": "planet_1",
      "question": "What is the package number and weight of the 3 lightest packages?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the package number and weight of the 3 lightest packages?[SQL]\\nSELECT PackageNumber FROM Package WHERE WEIGHT  =  ( SELECT min(WEIGHT) FROM package ) LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1794,
    "db_id": "planet_1",
    "question": {
      "id": 1794,
      "db_id": "planet_1",
      "question": "Who sent most number of packages? List client name and number of packages sent by that client."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who sent most number of packages? List client name and number of packages sent by that client.[SQL]\\nSELECT Client.Sender FROM Client WHERE Sender IN (SELECT Sender FROM Package GROUP BY Sender ORDER BY count(*) DESC LIMIT 1) UNION SELECT ClienT.Name FROM ClienT WHERE Name NOT IN (SELECT Recipient FROM Package) ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1795,
    "db_id": "planet_1",
    "question": {
      "id": 1795,
      "db_id": "planet_1",
      "question": "What is the name of the client who sent the most packages and how many were there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the client who sent the most packages and how many were there?[SQL]\\nSELECT Client.Sender FROM Package WHERE Sender != -1 GROUP BY Sender ORDER BY count(*) DESC LIMIT 1'\n    LIMIT = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1796,
    "db_id": "planet_1",
    "question": {
      "id": 1796,
      "db_id": "planet_1",
      "question": "Who received least number of packages ? List client name and number of packages received by that client ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who received least number of packages ? List client name and number of packages received by that client .[SQL]\\nSELECT Client.Sender FROM Package WHERE Sender != -1 GROUP BY Sender ORDER BY count(*) ASC LIMIT 1'\n    LIMIT = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1797,
    "db_id": "planet_1",
    "question": {
      "id": 1797,
      "db_id": "planet_1",
      "question": "What is the smallest number of packages received and by whom ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the smallest number of packages received and by whom ?[SQL]\\nSELECT Sender FROM Package WHERE weight  =  (SELECT min(weight) FROM package) UNION SELECT Recipient FROM Package WHERE weight  =  (SELECT min(weight) FROM package) ORDER BY Sender ASC LIMIT 1'\n       \n   \n   \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
  },
  {
    "id": 1798,
    "db_id": "planet_1",
    "question": {
      "id": 1798,
      "db_id": "planet_1",
      "question": "Who sent more than one packages? List the client's name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who sent more than one packages? List the client's name.[SQL]\\nSELECT Client.Contents FROM Client WHERE ClienT.AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING count(*)  >  1) UNION SELECT ClienT.ContentS FROM Client WHERE ClienT.AccountNumber IN (SELECT Recipient FROM Package GROUP BY Recipient HAVING count(*)  >  1) <MID>\n    GROUP BY SenderHAVING count(*)  >  1) UNION SELECT ClienT.ContentS FROM Client WHERE ClienT.AccountNumber IN (SELECT Recipient FROM Package GROUP BY Recipient HAVING count(*)  >  1) ORDER BY ClienT.Contents ASC'\n    LIMIT 3'\n    ;"
  },
  {
    "id": 1799,
    "db_id": "planet_1",
    "question": {
      "id": 1799,
      "db_id": "planet_1",
      "question": "What is the name of all clients who sent more than one package?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of all clients who sent more than one package?[SQL]\\nSELECT Client.Sender FROM Package WHERE weight  >  100 JOIN ClienT ON Package.Sender = ClienT.AccountNumber GROUP BY ClienT.Name HAVING count(*)  >  1'\n    LIMIT 3'\n    ;"
  },
  {
    "id": 1800,
    "db_id": "planet_1",
    "question": {
      "id": 1800,
      "db_id": "planet_1",
      "question": "What are the Coordinates of planet Mars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the Coordinates of planet Mars?[SQL]\\nSELECT Contents FROM Planet WHERE Name  =  'Mars' <MID> SELECT T1.name FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid  =  T2.manager ORDER BY T2.date DESC LIMIT 1'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 1801,
    "db_id": "planet_1",
    "question": {
      "id": 1801,
      "db_id": "planet_1",
      "question": "What are the coordinates of the planet named Mars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the coordinates of the planet named Mars?[SQL]\\nSELECT Contents FROM Planet WHERE Name  =  'Mars' <MID>\n    GROUP BY Employee.PackageNumber;"
  },
  {
    "id": 1802,
    "db_id": "planet_1",
    "question": {
      "id": 1802,
      "db_id": "planet_1",
      "question": "List all Planets' names and coordinates in alphabetical order of name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all Planets' names and coordinates in alphabetical order of name.[SQL]\\nSELECT Employee.Recipient FROM Package WHERE Package.Sender = 101 ORDER BY TIMESTAMP DIFF TIMESTAMP; SELECT name FROM planet ORDER BY name ASC; SELECT coordinates FROM planet ORDER BY coordinates ASC; SELECT TIMESTAMP DIFF TIMESTAMP FROM shipment; SELECT date FROM shipment ORDER BY date DESC; SELECT manager FROM shipment ORDER BY manager ASC; SELECT level FROM has_clearance ORDER BY level DESC; SELECT employee FROM has_clearance ORDER BY employee ASC; SELECT planet FROM has_clearance ORDER BY planet ASC; SELECT name FROM employee ORDER BY name ASC; SELECT position FROM employee ORDER BY position ASC; SELECT remarks FROM employee ORDER BY remarks ASC; SELECT name FROM client ORDER BY name ASC; SELECT accountnumber FROM client ORDER BY accountnumber ASC; SELECT sender FROM package ORDER BY sender ASC; SELECT recipient FROM package ORDER BY recipient ASC; SELECT contents FROM package ORDER BY contents ASC; SELECT weight FROM"
  },
  {
    "id": 1803,
    "db_id": "planet_1",
    "question": {
      "id": 1803,
      "db_id": "planet_1",
      "question": "What are the names and coordinates of all planets in alphabetical order by name?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and coordinates of all planets in alphabetical order by name?[SQL]\\nSELECT Employee.Recipient FROM Package WHERE Sender = 1 ORDER BY T1.name ASC'\n    LIMIT 10'\n    ;"
  },
  {
    "id": 1804,
    "db_id": "planet_1",
    "question": {
      "id": 1804,
      "db_id": "planet_1",
      "question": "List all shipment id under Phillip J. Fry's management."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all shipment id under Phillip J. Fry's management.[SQL]\\nSELECT Shipment FROM Has_Clearance WHERE Employee  =   (SELECT EmployeeID FROM Employee WHERE Name  =  'Phillip J. Fry')'\n\n    LIMIT 1'\n\n    ;"
  },
  {
    "id": 1805,
    "db_id": "planet_1",
    "question": {
      "id": 1805,
      "db_id": "planet_1",
      "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the shipment IDs of every delivery managed by Phillip J Fry?[SQL]\\nSELECT Shipment FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name  =  'Phillip J Fry')'\n\n    ORDER BY Shipment;"
  },
  {
    "id": 1806,
    "db_id": "planet_1",
    "question": {
      "id": 1806,
      "db_id": "planet_1",
      "question": "List the dates of all shipments."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the dates of all shipments.[SQL]\\nSELECT Shipment.Sender FROM Shipment WHERE Shipment.Date IS NOT NULL ORDER BY Shipment.Date ASC'\n    LIMIT 10'\n    ;"
  },
  {
    "id": 1807,
    "db_id": "planet_1",
    "question": {
      "id": 1807,
      "db_id": "planet_1",
      "question": "What are the dates of every shipment in the database?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the dates of every shipment in the database?[SQL]\\nSELECT Shipment.Sender FROM Shipment WHERE date LIKE '%04%' AND date LIKE '%17%' AND date LIKE '%2020%' UNION SELECT Shipment.date FROM Shipment WHERE date LIKE '%04%' AND date LIKE '%17%' AND date LIKE '%2020%' ORDER BY Shipment.date ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1808,
    "db_id": "planet_1",
    "question": {
      "id": 1808,
      "db_id": "planet_1",
      "question": "List all shipment ids for the planet Mars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all shipment ids for the planet Mars.[SQL]\\nSELECT Shipment FROM Has_Clearance WHERE Planet  =  3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1809,
    "db_id": "planet_1",
    "question": {
      "id": 1809,
      "db_id": "planet_1",
      "question": "What are the shipment ids for the planet Mars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the shipment ids for the planet Mars?[SQL]\\nSELECT Shipment FROM Has_Clearance WHERE EMPLOYEE IN (SELECT employeeid FROM has_clearance WHERE planet  =  3) UNION SELECT shipment FROM shipment WHERE planet  =  3' | python manage.py shell\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1810,
    "db_id": "planet_1",
    "question": {
      "id": 1810,
      "db_id": "planet_1",
      "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all shipment ids for the planet Mars and under the management of Turanga Leela.[SQL]\\nSELECT Shipment FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Has_Clearance WHERE planet = (SELECT PlanetID FROM planet WHERE name  =  'Mars') ) AND LEVEL  <  5 ORDER BY Shipment DESC LIMIT 3'\n    LIMIT 3'\n    ;"
  },
  {
    "id": 1811,
    "db_id": "planet_1",
    "question": {
      "id": 1811,
      "db_id": "planet_1",
      "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[SQL]\\nSELECT Shipment FROM Has_Clearance WHERE LEVEL  =  2 AND planet  =  (SELECT planetid FROM planet WHERE name  =  'Mars') INTERSECT SELECT T1.shipment FROM has_clearance AS T1 JOIN employee AS T2 ON T1.employee  =  T2.employeeid WHERE T2.name  =  'Turanga Leela' <MID>\n    GROUP BY Shipment;"
  },
  {
    "id": 1812,
    "db_id": "planet_1",
    "question": {
      "id": 1812,
      "db_id": "planet_1",
      "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all shipment ids on the planet Mars or under the management of Turanga Leela.[SQL]\\nSELECT Shipment FROM Shipment WHERE planet  =  3 UNION SELECT T1.shipment FROM Has_clearance AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' UNION SELECT T1.shipment FROM Shipment AS T1 JOIN Employee AS T2 ON T1.manager  =  T2.employeeid WHERE T2.Name  =  'Turanga Leela' <MID>\n    GROUP BY Shipment;"
  },
  {
    "id": 1813,
    "db_id": "planet_1",
    "question": {
      "id": 1813,
      "db_id": "planet_1",
      "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids for all shipments on the planet Mars that Turanga Leela manages?[SQL]\\nSELECT Shipment FROM Shipment WHERE manager = (SELECT EmployeeID FROM Has_clearance WHERE planet  =  (SELECT PlanetID FROM Planet WHERE name  =  'Mars') AND LEVEL  =  5) AND TYPE  =  'Mars' <MID>T13:49:07.867Z', manager: 1 } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] }"
  },
  {
    "id": 1814,
    "db_id": "planet_1",
    "question": {
      "id": 1814,
      "db_id": "planet_1",
      "question": "What is the total shipments in each planet? List the planet name and total shipments."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the total shipments in each planet? List the planet name and total shipments.[SQL]\\nSELECT Planet.Shipment FROM Shipment WHERE Shipment.planet = Plainet.planetid GROUP BY Shipment.planet ORDER BY sum(Shipment.date) DESC LIMIT 1'\n    LIMIT = 1\n    ;"
  },
  {
    "id": 1815,
    "db_id": "planet_1",
    "question": {
      "id": 1815,
      "db_id": "planet_1",
      "question": "How many shipments take place on each planet?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many shipments take place on each planet?[SQL]\\nSELECT Planet.Sender FROM Shipment WHERE date = '2016-07-04' GROUP BY Planet.Sendere ORDER BY count(*) DESC LIMIT 3'\n   \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"
  },
  {
    "id": 1816,
    "db_id": "planet_1",
    "question": {
      "id": 1816,
      "db_id": "planet_1",
      "question": "Which planet has most shipments? List the planet name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which planet has most shipments? List the planet name.[SQL]\\nSELECT Planet.Contents FROM Planet WHERE planetid IN (SELECT planet FROM shipment GROUP BY planet ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Earth' WHERE planetid NOT IN (SELECT planet FROM shipment GROUP BY planet ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Mars' WHERE planetid NOT IN (SELECT planet FROM shipment GROUP BY planet ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Jupiter' WHERE planetid NOT IN (SELECT planet FROM shipment GROUP BY planet ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Saturn' WHERE planetid NOT IN (SELECT planet FROM shipment GROUP BY planet ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Uranus' WHERE planetid NOT IN (SELECT planet FROM shipment GROUP BY planet ORDER BY count(*) DESC LIMIT 1) UNION SELECT 'Neptune' WHERE planetid NOT IN (SELECT planet FROM shipment"
  },
  {
    "id": 1817,
    "db_id": "planet_1",
    "question": {
      "id": 1817,
      "db_id": "planet_1",
      "question": "What is the name of the planet with the most shipments?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the planet with the most shipments?[SQL]\\nSELECT Planet.Shipment FROM Has_Clearance \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1818,
    "db_id": "planet_1",
    "question": {
      "id": 1818,
      "db_id": "planet_1",
      "question": "List the manger's name and number of shipments under his management."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the manger's name and number of shipments under his management.[SQL]\\nSELECT Employee.Recipient, count(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Employee ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Recipient ORDER BY count(*) DESC LIMIT 1'\n    , 'SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee JOIN planet AS T3 ON T2.planet  =  T3.planetid'\n    , 'SELECT T3.Name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee JOIN planet AS T3 ON T2.planet  =  T3.planetID'\n    , 'SELECT T3.Name FROM employee AS T1 JOIN has_clearance AS T2 ON T1"
  },
  {
    "id": 1819,
    "db_id": "planet_1",
    "question": {
      "id": 1819,
      "db_id": "planet_1",
      "question": "What are the number of shipments managed and names of each manager?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the number of shipments managed and names of each manager?[SQL]\\nSELECT Employee.Recipient, count(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Employee ON Package.Sender = Employee.AccountNumber GROUP BY Employee.Rrecipient'\n    , 'SELECT count(*) FROM Shipment'\n    , 'SELECT T1.name FROM Employee AS T1 JOIN Shipment AS T2 ON T1.employeeid  =  T2.manager WHERE T1.position  =  'Manager''\n    , 'SELECT T1.name FROM Employee AS T1 JOIN Shipment AS T2 ON T1.employeeid  =  T2.manager WHERE T1.position  =  'Manager' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 3'\n    , 'SELECT T1.name FROM Employee AS T1 JOIN Shipment AS T2 ON T1.employeeid  =  T"
  },
  {
    "id": 1820,
    "db_id": "planet_1",
    "question": {
      "id": 1820,
      "db_id": "planet_1",
      "question": "Calculate total weight of package shipped on Mars."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Calculate total weight of package shipped on Mars.[SQL]\\nSELECT Package.Weight FROM Package WHERE Package.shipment IN (SELECT shipment FROM shipment WHERE planet  =  3) UNION SELECT sum(Package.Weight) FROM Package WHERE Package.shipment IN (SELECT shipment FROM shipment WHERE planet  =  3) ORDER BY Package.Weight DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1821,
    "db_id": "planet_1",
    "question": {
      "id": 1821,
      "db_id": "planet_1",
      "question": "what is the total weight of all packages shipped on Mars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what is the total weight of all packages shipped on Mars?[SQL]\\nSELECT Package.Weight FROM Package WHERE Package.planet = (SELECT planetid FROM planet WHERE name = 'Mars') UNION SELECT sum(T1.Weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment WHERE T2.planet = (SELECT planetid FROM planet WHERE name = 'Mars')'\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1822,
    "db_id": "planet_1",
    "question": {
      "id": 1822,
      "db_id": "planet_1",
      "question": "Calculate total weight of package shipped in each planet . show the name of each planet ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Calculate total weight of package shipped in each planet . show the name of each planet .[SQL]\\nSELECT Package.Contents FROM Package WHERE Package.Shipment IN (SELECT shipment FROM shipment WHERE planet IN (SELECT planetid FROM has_clearance)) GROUP BY shipment ORDER BY sum(weight) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1823,
    "db_id": "planet_1",
    "question": {
      "id": 1823,
      "db_id": "planet_1",
      "question": "what is the total package weight for each planet, list its name ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what is the total package weight for each planet, list its name ?[SQL]\\nSELECT Package.Weight FROM Package WHERE Package.planet IN (SELECT name FROM planet) ORDER BY TOTAL_WEIGHT DESC LIMIT 1'\n    LIMIT = 1\n    ;"
  },
  {
    "id": 1824,
    "db_id": "planet_1",
    "question": {
      "id": 1824,
      "db_id": "planet_1",
      "question": "Which planet has total weight of shipment greater than 30? List planet name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which planet has total weight of shipment greater than 30? List planet name.[SQL]\\nSELECT Planet.Contents FROM Has_Clearance \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1825,
    "db_id": "planet_1",
    "question": {
      "id": 1825,
      "db_id": "planet_1",
      "question": "What are the names of all planets tjat have a total shipment weight greater than 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all planets tjat have a total shipment weight greater than 30?[SQL]\\nSELECT Planet.Contents FROM Has_Clearance \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1826,
    "db_id": "planet_1",
    "question": {
      "id": 1826,
      "db_id": "planet_1",
      "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[SQL]\\nSELECT PackageNumber FROM Package WHERE Shipment IN ( SELECT T1.ShipmentID FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.PlanetID WHERE T2.name  =  'Omicron Persei 8' ) AND Sender  =  ( SELECT accountnumber FROM client WHERE name  =  'Zapp Brannigan' ) ORDER BY PackageNumber ASC LIMIT 3'\n    ;"
  },
  {
    "id": 1827,
    "db_id": "planet_1",
    "question": {
      "id": 1827,
      "db_id": "planet_1",
      "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[SQL]\\nSELECT Sender FROM Package WHERE Shipment IN (SELECT Shipment FROM Shipment WHERE planet  =  4) AND Sender  =  1036973302'\n        ;"
  },
  {
    "id": 1828,
    "db_id": "planet_1",
    "question": {
      "id": 1828,
      "db_id": "planet_1",
      "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[SQL]\\nSELECT PackageNumber FROM Package WHERE shipment IN ( SELECT T1.shipment FROM has_clearance AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Omicron Persei 8' ) OR Sender  =  ( SELECT accountnumber FROM client WHERE name  =  'Zapp Brannigan' ) <MID>\n    GROUP BY Sender;"
  },
  {
    "id": 1829,
    "db_id": "planet_1",
    "question": {
      "id": 1829,
      "db_id": "planet_1",
      "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[SQL]\\nSELECT Package.PackageNumber FROM Package WHERE Package.shipment IN ( SELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Omicron Persei 8' ) OR Package.Sender  =  ( SELECT T3.AccountNumber FROM Client AS T3 WHERE T3.name  =  'Zapp Brannigan') ORDER BY Package.PackageNumber DESC LIMIT 3 OFFSET 3'\n\n    ORDER BY Package.PackageNumber;"
  },
  {
    "id": 1830,
    "db_id": "planet_1",
    "question": {
      "id": 1830,
      "db_id": "planet_1",
      "question": "Which packages have weight between 10 and 30? List the package number and weight."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which packages have weight between 10 and 30? List the package number and weight.[SQL]\\nSELECT PackageNumber FROM Package WHERE Weight BETWEEN 10 AND 30'\n        ;"
  },
  {
    "id": 1831,
    "db_id": "planet_1",
    "question": {
      "id": 1831,
      "db_id": "planet_1",
      "question": "What are the package numbers and weights that are between 10 and 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the package numbers and weights that are between 10 and 30?[SQL]\\nSELECT PackageNumber FROM Package WHERE Weight BETWEEN 10 AND 30'\n        ;"
  },
  {
    "id": 1832,
    "db_id": "planet_1",
    "question": {
      "id": 1832,
      "db_id": "planet_1",
      "question": "Which employees do not have clearance in Mars? List employee's name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which employees do not have clearance in Mars? List employee's name.[SQL]\\nSELECT Employee.Sender FROM Has_Clearance WHERE planet  =  3 EXCEPT SELECT Employee.Name FROM Employee WHERE EmployeeID IN (SELECT employee FROM Has_Clearance WHERE planet  =  3) <MID>\n    GROUP BY Sender;"
  },
  {
    "id": 1833,
    "db_id": "planet_1",
    "question": {
      "id": 1833,
      "db_id": "planet_1",
      "question": "What are the names of all employees who don't have clearance on Mars?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all employees who don't have clearance on Mars?[SQL]\\nSELECT Employee.Recipient FROM Has_Clearance WHERE planet = 3 EXCEPT SELECT Employee.Name FROM Employee WHERE POSITION  =  'Recipient' <MID>\n    GROUP BY Employee.Recipient;"
  },
  {
    "id": 1834,
    "db_id": "planet_1",
    "question": {
      "id": 1834,
      "db_id": "planet_1",
      "question": "Which employees have clearance in Omega III? List employees' name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which employees have clearance in Omega III? List employees' name.[SQL]\\nSELECT Employee.Sender FROM Has_Clearance WHERE Has_Clearance.planet  =  3 INTERSECT SELECT Employee.Name FROM Employee WHERE Employee.Position  =  'Senior Manager' <MID>\n    GROUP BY Sender;"
  },
  {
    "id": 1835,
    "db_id": "planet_1",
    "question": {
      "id": 1835,
      "db_id": "planet_1",
      "question": "What are the names of all employees with clearance on Omega III?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all employees with clearance on Omega III?[SQL]\\nSELECT Employee.Sender FROM Has_Clearance WHERE Planet  =  3 JOIN Employee ON Has_Clearance.Employee  =  Employee.EmployeeID'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 1836,
    "db_id": "planet_1",
    "question": {
      "id": 1836,
      "db_id": "planet_1",
      "question": "Which planets that have exact one employee has clearance? List planets' name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which planets that have exact one employee has clearance? List planets' name.[SQL]\\nSELECT Planet.Contents FROM Has_Clearance WHERE level  =  1 JOIN Planet ON Has_clearance.planet  =  planet.planetid GROUP BY planet.planetid HAVING count(*)  =  1 UNION SELECT P1.Coordinates FROM Has_Clearance AS T1 JOIN Planet AS T2 ON T1.planet  =  T2.planetid JOIN Employee AS T3 ON T3.EmployeeID  =  T1.employee EXCEPT SELECT P1.Coordinates FROM Has_Clearance AS T1 JOIN Planet AS T2 ON T1.planet  =  T2.planetid JOIN Employee AS T3 ON T3.EmployeeID  =  T1.employee WHERE level  =  2 GROUP BY T2.planetid HAVING count(*)  =  1 UNION SELECT P1.Coordinates FROM Has_Clearance AS T"
  },
  {
    "id": 1837,
    "db_id": "planet_1",
    "question": {
      "id": 1837,
      "db_id": "planet_1",
      "question": "What are the names of all planets with one employee that has clearance?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all planets with one employee that has clearance?[SQL]\\nSELECT Planet.Recipient FROM Has_Clearance WHERE LEVEL  =  1 JOIN Plane ON Has_Clearance.planet = Plane.planetid JOIN Employee ON Has_clearance.employee = Employee.employeeid SELECT T1.name FROM PLANET AS T1 JOIN SHIPMENT AS T2 ON T1.planetid  =  T2.planet JOIN Package AS T3 ON T2.shipment  =  T3.shipment JOIN Client AS T4 ON T3.sender  =  T4.accountnumber JOIN Employee AS T5 ON T4.accountnumber  =  T5.employeeid WHERE T5.Name  =  'Mars' UNION SELECT T1.name FROM PLANET AS T1 JOIN SHIPMENT AS T2 ON T1.planetid  =  T2.planet JOIN Package AS T3 ON T2."
  },
  {
    "id": 1838,
    "db_id": "planet_1",
    "question": {
      "id": 1838,
      "db_id": "planet_1",
      "question": "Which employees have salaries between 5000 and 10000? List employees' name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which employees have salaries between 5000 and 10000? List employees' name.[SQL]\\nSELECT Employee.Sender FROM Package WHERE Sender = 1002 AND Contents LIKE '%orange%' <EOT> __author__ = 'michael'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1839,
    "db_id": "planet_1",
    "question": {
      "id": 1839,
      "db_id": "planet_1",
      "question": "What are the employees's names for those that have salaries between 5000 and 10000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the employees's names for those that have salaries between 5000 and 10000?[SQL]\\nSELECT Employee.Recipient FROM Package WHERE Sender = 4 AND Contents LIKE '%Python%'[No SQL] Python is a nice language to use for sending files around.[No SQL] The client with account number 4 has sent 8 packages containing the contents 'Python' to 8 different recipients. [No SQL] List the recipients of the packages sent by the client with account number 4 that contain the word 'Python'.[No SQL] List all the managers who have clearances for both Earth and Mars. [SQL] SELECT manager FROM has_clearance WHERE planet  =  1 UNION SELECT manager FROM has_clearance WHERE planet  =  2 SELECT DISTINCT manager FROM has_clearance EXCEPT SELECT manager FROM has_clearance GROUP BY manager HAVING count(*)  >=  2 SELECT manager FROM has_clearance WHERE level  >  10 INTERSECT SELECT manager FROM has_clearance GROUP"
  },
  {
    "id": 1840,
    "db_id": "planet_1",
    "question": {
      "id": 1840,
      "db_id": "planet_1",
      "question": "Find the name of employees whose salary is above the average salary or more than 5000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of employees whose salary is above the average salary or more than 5000.[SQL]\\nSELECT Employee.Sender FROM Package WHERE Sender.Weight  >  500'\n    LIMIT 1'\n    ;"
  },
  {
    "id": 1841,
    "db_id": "planet_1",
    "question": {
      "id": 1841,
      "db_id": "planet_1",
      "question": "What are the names of all employees who have a salary greater than average or more than 5000?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all employees who have a salary greater than average or more than 5000?[SQL]\\nSELECT Employee.Sender FROM Package WHERE Sender.Name LIKE '%Test%' AND Sender.Remarks = 'Good' UNION SELECT Employee.Position FROM Employee WHERE Employee.Salary > (SELECT avg(Employee.Salary) FROM Employee) OR Employee.Salary > 5000'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1842,
    "db_id": "planet_1",
    "question": {
      "id": 1842,
      "db_id": "planet_1",
      "question": "Find the number of employees who do not have clearance in Mars ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of employees who do not have clearance in Mars .[SQL]\\nSELECT Employee.Sender FROM Has_Clearance WHERE planet = 3 INTERSECT SELECT count(*) FROM Employee WHERE position != 'Manager' AND T1.Sender NOT IN (SELECT EmployeeID FROM Has_Clearance WHERE planet  =  3) AS T1 JOIN Package ON T1.Sender = Package.Sender'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1843,
    "db_id": "planet_1",
    "question": {
      "id": 1843,
      "db_id": "planet_1",
      "question": "What is the number of employees that do not have clearance on Mars ?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Employee (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Position VARCHAR(255) NOT NULL,\n  Salary REAL NOT NULL,\n  Remarks VARCHAR(255)\n)\nCREATE TABLE Planet (\n  PlanetID INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL,\n  Coordinates REAL NOT NULL\n)\nCREATE TABLE Shipment (\n  ShipmentID INTEGER PRIMARY KEY,\n  Date DATE,\n  Manager INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Has_Clearance (\n  Employee INTEGER NOT NULL,\n  Planet INTEGER NOT NULL,\n  Level INTEGER NOT NULL,\n  PRIMARY KEY(Employee, Planet),\n  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),\n  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID)\n)\nCREATE TABLE Client (\n  AccountNumber INTEGER PRIMARY KEY,\n  Name VARCHAR(255) NOT NULL\n)\nCREATE TABLE Package (\n  Shipment INTEGER NOT NULL,\n  PackageNumber INTEGER NOT NULL,\n  Contents VARCHAR(255) NOT NULL,\n  Weight REAL NOT NULL,\n  Sender INTEGER NOT NULL,\n  Recipient INTEGER NOT NULL,\n  PRIMARY KEY(Shipment, PackageNumber),\n  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),\n  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),\n  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of employees that do not have clearance on Mars ?[SQL]\\nSELECT Employee.Sender FROM Has_Clearance WHERE planet  =  3 EXCEPT SELECT T1.Sender FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee  =  T2.EmployeeID WHERE T2.Position  =  'Manager' <MID>\n    GROUP BY Employee.Sender;"
  },
  {
    "id": 1844,
    "db_id": "video_game",
    "question": {
      "id": 1844,
      "db_id": "video_game",
      "question": "How many games are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many games are there?[SQL]\\nSELECT game_player.Game_ID FROM game_player WHERE game_player.If_active  =  1 GROUP BY game_player.Game_ID ORDER BY COUNT(*) DESC LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1845,
    "db_id": "video_game",
    "question": {
      "id": 1845,
      "db_id": "video_game",
      "question": "Count the number of games."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of games.[SQL]\\nSELECT Game_ID FROM game WHERE title = 'Mortal Kombat' AND developers = 'Visceral' AND release_date BETWEEN '1992-09-25' AND '1994-03-17' AND franchise = 'Arcade' AND Platform_ID = 1; SELECT count(*) FROM game WHERE title = 'Mortal Kombat' AND developers = 'Visceral' AND release_date BETWEEN '1992-09-25' AND '1994-03-17' AND franchise = 'Arcade' AND Platform_ID = 1; SELECT count(*) FROM game WHERE title = 'Mortal Kombat' AND developers = 'Visceral' AND release_date BETWEEN '1992-09-25' AND '1994-03"
  },
  {
    "id": 1846,
    "db_id": "video_game",
    "question": {
      "id": 1846,
      "db_id": "video_game",
      "question": "List the Title and Developers of all games ordered by units sold from large to small."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the Title and Developers of all games ordered by units sold from large to small.[SQL]\\nSELECT game.If_active \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1847,
    "db_id": "video_game",
    "question": {
      "id": 1847,
      "db_id": "video_game",
      "question": "What are the titles and developers of all games, sorted by units sold descending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and developers of all games, sorted by units sold descending?[SQL]\\nSELECT game.If_active  FROM game WHERE game.If_active  =  1 ORDER BY game.Units_sold_Millions DESC'\n        GROUP BY game.If_active;"
  },
  {
    "id": 1848,
    "db_id": "video_game",
    "question": {
      "id": 1848,
      "db_id": "video_game",
      "question": "What is the average units sold in millions of the games that are not developed by Nintendo?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average units sold in millions of the games that are not developed by Nintendo?[SQL]\\nSELECT If_active FROM game WHERE developers != 'Nintendo' GROUP BY If_active HAVING avg(Units_sold_Millions) > 200' <MID>_ID IN (SELECT Platform_ID FROM game WHERE developers != 'Nintendo') GROUP BY If_active HAVING avg(Units_sold_Millions) > 200'\n    ORDER BY If_active;"
  },
  {
    "id": 1849,
    "db_id": "video_game",
    "question": {
      "id": 1849,
      "db_id": "video_game",
      "question": "Return the average number of units sold in millions for games not developed by Nintendo."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average number of units sold in millions for games not developed by Nintendo.[SQL]\\nSELECT If_active FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM game WHERE Developers  =  'Nintendo') GROUP BY If_active HAVING avg(Units_sold_Millions) != 0' <MID>_ID IN (SELECT Platform_ID FROM game WHERE Developers  =  'Nintendo') GROUP BY If_active HAVING avg(Units_sold_Millions) != 0'\n    LIMIT 100'\n    ;"
  },
  {
    "id": 1850,
    "db_id": "video_game",
    "question": {
      "id": 1850,
      "db_id": "video_game",
      "question": "What are the names and market districts of all platforms?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and market districts of all platforms?[SQL]\\nSELECT platform.Player_ID FROM platform WHERE platform.Market_district  =  'Asia' UNION SELECT platform.Platfomr_ID FROM platform WHERE platform.Market_district  =  'Europe' UNION SELECT platform.Platfomr_ID FROM platform WHERE platform.Market_district  =  'North America' UNION SELECT platform.Platfomr_ID FROM platform WHERE platform.Market_district  =  'Australia' UNION SELECT platform.Platfomr_ID FROM platform WHERE platform.Market_district  =  'Latin America' UNION SELECT platform.Platfomr_ID FROM platform WHERE platform.Market_district  =  'Africa' UNION SELECT platform.Platfomr_ID FROM platform WHERE platform.Market_district  =  'Middle East' UNION SELECT platform.Pl"
  },
  {
    "id": 1851,
    "db_id": "video_game",
    "question": {
      "id": 1851,
      "db_id": "video_game",
      "question": "Return all platform names and corresponding market districts."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return all platform names and corresponding market districts.[SQL]\\nSELECT platform.Player_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1852,
    "db_id": "video_game",
    "question": {
      "id": 1852,
      "db_id": "video_game",
      "question": "What are the names and id of platforms whose download rank is 1?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and id of platforms whose download rank is 1?[SQL]\\nSELECT platform.Player_ID FROM platform WHERE Download_rank  =  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1853,
    "db_id": "video_game",
    "question": {
      "id": 1853,
      "db_id": "video_game",
      "question": "Return the names and ids of all platforms with the download rank of 1."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names and ids of all platforms with the download rank of 1.[SQL]\\nSELECT platform.Player_ID FROM platform WHERE Download_rank  =  1 UNION SELECT platform.Platfom_ID ,  platform_name FROM platform WHERE Download_rank  =  1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1854,
    "db_id": "video_game",
    "question": {
      "id": 1854,
      "db_id": "video_game",
      "question": "What are the maximum and minimum rank of the year of players."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the maximum and minimum rank of the year of players.[SQL]\\nSELECT If_active FROM player WHERE Rank_of_the_year  =  (SELECT max(Rank_of_the_year) FROM player) OR Rank_of_the_year  =  (SELECT min(Rank_of_the_year) FROM player) <MID>_rank FROM platform ORDER BY download_rank ASC LIMIT 3'\n    ORDER BY platform.If_active;"
  },
  {
    "id": 1855,
    "db_id": "video_game",
    "question": {
      "id": 1855,
      "db_id": "video_game",
      "question": "Give the maximum and minimum rank of the year across all players."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the maximum and minimum rank of the year across all players.[SQL]\\nSELECT If_active FROM player WHERE Rank_of_the_year  =  (SELECT max(Rank_of_the_year) FROM player) OR Rank_of_the_year  =  (SELECT min(Rank_of_the_year) FROM player) <MID>_rank FROM platform ORDER BY download_rank ASC LIMIT 3'\n    ORDER BY platform.If_active;"
  },
  {
    "id": 1856,
    "db_id": "video_game",
    "question": {
      "id": 1856,
      "db_id": "video_game",
      "question": "How many players have rank of the year smaller than 3?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many players have rank of the year smaller than 3?[SQL]\\nSELECT Player_ID FROM player WHERE Rank_of_the_year  <  3'\n        ;"
  },
  {
    "id": 1857,
    "db_id": "video_game",
    "question": {
      "id": 1857,
      "db_id": "video_game",
      "question": "Count the number of players that have a rank of year of at most 3."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of players that have a rank of year of at most 3.[SQL]\\nSELECT Player_ID FROM player WHERE Rank_of_the_year  <=  3 GROUP BY Player_ID HAVING count(*)  >=  2'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1858,
    "db_id": "video_game",
    "question": {
      "id": 1858,
      "db_id": "video_game",
      "question": "List all player names in ascending alphabetical order."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all player names in ascending alphabetical order.[SQL]\\nSELECT Player_ID FROM player WHERE Rank_of_the_year  <  150 ORDER BY player_name ASC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1859,
    "db_id": "video_game",
    "question": {
      "id": 1859,
      "db_id": "video_game",
      "question": "What are the names of all players in alphabetical order?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all players in alphabetical order?[SQL]\\nSELECT Player_ID FROM player WHERE Position  =  'Forward' AND College  =  'University of Michigan' ORDER BY player_name ASC' <MID>_ID IN (SELECT Platform_ID FROM game WHERE title  =  'Mortal Kombat')'\n    LIMIT 5'\n    ;"
  },
  {
    "id": 1860,
    "db_id": "video_game",
    "question": {
      "id": 1860,
      "db_id": "video_game",
      "question": "List names and colleges of all players in descending order of rank of the year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List names and colleges of all players in descending order of rank of the year.[SQL]\\nSELECT Player_ID  FROM player WHERE Rank_of_the_year  >  0 ORDER BY Rank_of_the_year DESC'\n        ;"
  },
  {
    "id": 1861,
    "db_id": "video_game",
    "question": {
      "id": 1861,
      "db_id": "video_game",
      "question": "What are the names and colleges of all players, ordered by rank of year descending?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and colleges of all players, ordered by rank of year descending?[SQL]\\nSELECT Player_ID  FROM player WHERE Rank_of_the_year != 0 ORDER BY Rank_of_the_year DESC'\n        ;"
  },
  {
    "id": 1862,
    "db_id": "video_game",
    "question": {
      "id": 1862,
      "db_id": "video_game",
      "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the names and rank of players that have played the game titled \"Super Mario World\".[SQL]\\nSELECT Player_ID FROM game_player WHERE Game_ID  =  (SELECT Game_ID FROM game WHERE Title  =  'Super Mario World') UNION SELECT T1.Player_ID ,  IFNULL(T2.Rank ,  999999999999999) FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN game AS T3 ON T2.Game_ID  =  T3.Game_ID WHERE T3.Title  =  'Super Mario World' ORDER BY IFNULL(T2.Rank ,  999999999999999) ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1863,
    "db_id": "video_game",
    "question": {
      "id": 1863,
      "db_id": "video_game",
      "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and ranks of players who have played the game with the title \"Super Mario World\"?[SQL]\\nSELECT Player_ID FROM game_player WHERE Game_ID  =  (SELECT Game_ID FROM game WHERE Title  =  'Super Mario World') UNION SELECT T1.Player_ID ,  IFNULL(T2.Rank ,  999999999999999) FROM player AS T1 JOIN game_player AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN game AS T3 ON T2.Game_ID  =  T3.Game_ID WHERE T3.Title  =  'Super Mario World' ORDER BY IFNULL(T2.Rank ,  999999999999999) ASC'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1864,
    "db_id": "video_game",
    "question": {
      "id": 1864,
      "db_id": "video_game",
      "question": "Show the distinct developer of games played by players that go to college \"Auburn\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the distinct developer of games played by players that go to college \"Auburn\".[SQL]\\nSELECT game.Game_ID FROM game_player WHERE game_id IN ( SELECT game_id FROM player WHERE College  =  'Auburn' ) GROUP BY game.developers HAVING count(*)  >=  2,3,4,5,6,7,8,9 TYPE = 'pc' ORDER BY game.download_rank DESC LIMIT 3;[No SQL]'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1865,
    "db_id": "video_game",
    "question": {
      "id": 1865,
      "db_id": "video_game",
      "question": "What are the different developers of games that are played by players that attend Auburn college?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different developers of games that are played by players that attend Auburn college?[SQL]\\nSELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College  =  'Auburn University') GROUP BY Game_ID ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1866,
    "db_id": "video_game",
    "question": {
      "id": 1866,
      "db_id": "video_game",
      "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average number of units sold in millions of games played by players with position \"Guard\"?[SQL]\\nSELECT If_active FROM game_player WHERE Player_id IN (SELECT player_id FROM player WHERE POSITION  =  'Guard') GROUP BY If_active HAVING avg(If_active) >  500000' <MID>_rank DESC LIMIT 3'\n    ORDER BY platform.Player_ID;"
  },
  {
    "id": 1867,
    "db_id": "video_game",
    "question": {
      "id": 1867,
      "db_id": "video_game",
      "question": "Return the average number of units sold in millions among games played by players who have the position Guard."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average number of units sold in millions among games played by players who have the position Guard.[SQL]\\nSELECT If_active FROM game_player WHERE Player_id IN (SELECT player_id FROM player WHERE POSITION  =  'Guard' ) GROUP BY If_active HAVING count(*)  >  150, AVG(Units_sold_Millions)  >  400; <MID>\n    GROUP BY If_activeHAVING count(*)  >  150 ,  AVG(Units_sold_Millions)  >  400;'\n\n    ORDER BY If_active;"
  },
  {
    "id": 1868,
    "db_id": "video_game",
    "question": {
      "id": 1868,
      "db_id": "video_game",
      "question": "Please list the title and platform name of games."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please list the title and platform name of games.[SQL]\\nSELECT Game_ID  FROM game WHERE Platform_ID  =  1 UNION SELECT TITLE ,  ( SELECT platform_name FROM platform WHERE Platform_ID  =  game.Platform_ID ) FROM game'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1869,
    "db_id": "video_game",
    "question": {
      "id": 1869,
      "db_id": "video_game",
      "question": "What are the titles and platform names of all games?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles and platform names of all games?[SQL]\\nSELECT Game_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1870,
    "db_id": "video_game",
    "question": {
      "id": 1870,
      "db_id": "video_game",
      "question": "Please list the title of games with platforms that have market district in Asia or USA."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please list the title of games with platforms that have market district in Asia or USA.[SQL]\\nSELECT game.Player_ID  FROM game WHERE game.Platform_ID IN (SELECT platform.Platform_ID FROM platform WHERE platform.Market_district  =  'Asia' OR platform.Market_district  =  'USA')'\n\n    GROUP BY game.Player_ID;"
  },
  {
    "id": 1871,
    "db_id": "video_game",
    "question": {
      "id": 1871,
      "db_id": "video_game",
      "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of games that have platforms in the market districts of Asia or the USA?[SQL]\\nSELECT game.Game_ID FROM game WHERE game.Platform_ID IN (SELECT platform.Platform_ID FROM platform WHERE platform.Market_district  =  'Asia' OR platform.Market_district  =  'USA') UNION SELECT game.Game_ID FROM game WHERE game.Platform_ID IN (SELECT platform.Platform_ID FROM platform WHERE platform.Market_district  =  'Asia' OR platform.Market_district  =  'USA')'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1872,
    "db_id": "video_game",
    "question": {
      "id": 1872,
      "db_id": "video_game",
      "question": "List the name of each franchise and the number of games belonging to that franchise."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of each franchise and the number of games belonging to that franchise.[SQL]\\nSELECT game.Game_ID FROM game WHERE franchise != 'null' GROUP BY franchise ORDER BY count(*) DESC LIMIT 10'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1873,
    "db_id": "video_game",
    "question": {
      "id": 1873,
      "db_id": "video_game",
      "question": "How many games are there from each Franchise?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many games are there from each Franchise?[SQL]\\nSELECT game.Game_ID FROM game WHERE franchise  =  'Mortal Kombat' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'Resident Evil' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'God of War' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'Tomb Raider' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'Halo' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'Assassin''s Creed' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'Minecraft' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'Super Mario Bros.' UNION SELECT game.Game_ID FROM game WHERE franchise  =  'Starcraft' UNION SELECT game.Game_ID FROM game WHERE franch"
  },
  {
    "id": 1874,
    "db_id": "video_game",
    "question": {
      "id": 1874,
      "db_id": "video_game",
      "question": "List the name of franchise that have the most number of games."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of franchise that have the most number of games.[SQL]\\nSELECT game.Game_ID FROM game WHERE title IN (SELECT title FROM game GROUP BY title ORDER BY count(*) DESC LIMIT 1) UNION SELECT franchise FROM game GROUP BY franchise ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1875,
    "db_id": "video_game",
    "question": {
      "id": 1875,
      "db_id": "video_game",
      "question": "Which franchise has the most games?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which franchise has the most games?[SQL]\\nSELECT game.Game_ID FROM game WHERE title IN (SELECT T2.title FROM game AS T1 JOIN franchise AS T2 ON T1.franchise  =  T2.franchise GROUP BY T2.franchise ORDER BY count(*) DESC LIMIT 1) GROUP BY game.title ORDER BY count(*) DESC LIMIT 3'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1876,
    "db_id": "video_game",
    "question": {
      "id": 1876,
      "db_id": "video_game",
      "question": "List the names of franchises that have at least two games."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of franchises that have at least two games.[SQL]\\nSELECT game.Game_ID FROM game WHERE franchise IN (SELECT franchise FROM game GROUP BY franchise HAVING count(*)  >=  2) ORDER BY title'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1877,
    "db_id": "video_game",
    "question": {
      "id": 1877,
      "db_id": "video_game",
      "question": "What are the names of franchises that have two or more games?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of franchises that have two or more games?[SQL]\\nSELECT game.Game_ID FROM game WHERE title IN ( SELECT title FROM game GROUP BY title HAVING count(*)  >=  2 ) ORDER BY release_date DESC'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1878,
    "db_id": "video_game",
    "question": {
      "id": 1878,
      "db_id": "video_game",
      "question": "List the name of players that do not play any game."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of players that do not play any game.[SQL]\\nSELECT Player_ID FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)',\n        LIMIT = 100,\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1879,
    "db_id": "video_game",
    "question": {
      "id": 1879,
      "db_id": "video_game",
      "question": "What are the names of players who do not play any games?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of players who do not play any games?[SQL]\\nSELECT Player_ID FROM game_player WHERE If_active  =  0 UNION SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player) <MID>_rank FROM platform ORDER BY download_rank ASC LIMIT 3'\n    ORDER BY game_player.If_active;"
  },
  {
    "id": 1880,
    "db_id": "video_game",
    "question": {
      "id": 1880,
      "db_id": "video_game",
      "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".[SQL]\\nSELECT game.If_active FROM game_player  WHERE game_id IN ( SELECT T1.game_id FROM game_player AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T2.College  =  'Oklahoma' INTERSECT SELECT T1.game_id FROM game_player AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T2.College  =  'Auburn' ) GROUP BY game.If_active HAVING count(*)  >=  2' <MID>_rank FROM platform ORDER BY download_rank ASC LIMIT 3'\n    ORDER BY platform.If_active;"
  },
  {
    "id": 1881,
    "db_id": "video_game",
    "question": {
      "id": 1881,
      "db_id": "video_game",
      "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of games that are played by players from Oklahoma college or Auburn college?[SQL]\\nSELECT game.Game_ID FROM game_player  WHERE game_id IN ( SELECT player_id FROM player WHERE College = 'Oklahoma' OR College = 'Auburn') AND if_active != 0'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1882,
    "db_id": "video_game",
    "question": {
      "id": 1882,
      "db_id": "video_game",
      "question": "Show all distinct franchises of games."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all distinct franchises of games.[SQL]\\nSELECT platform.Player_ID FROM game_player WHERE platform.Platfomr_ID = game_player.Platfomr_ID GROUP BY franchise HAVING count(*)  >=  250'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1883,
    "db_id": "video_game",
    "question": {
      "id": 1883,
      "db_id": "video_game",
      "question": "What are all the distinct franchises?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the distinct franchises?[SQL]\\nSELECT platform.Player_ID FROM game_player WHERE platform.Platfom_ID = game_player.Platfom_ID GROUP BY franchise HAVING count(*)  >=  250 ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1884,
    "db_id": "video_game",
    "question": {
      "id": 1884,
      "db_id": "video_game",
      "question": "Show the title of games that are not played by any player who is in the Guard position."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the title of games that are not played by any player who is in the Guard position.[SQL]\\nSELECT game.If_active FROM game WHERE game.game_id NOT IN(SELECT game_id FROM game_player AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T2.Position  =  'Guard') AND game.If_active  =  1'\n\n    GROUP BY game.If_active;"
  },
  {
    "id": 1885,
    "db_id": "video_game",
    "question": {
      "id": 1885,
      "db_id": "video_game",
      "question": "What are the titles of games not played by any players who play the Guard position?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"platform\" (\n\"Platform_ID\" int,\n\"Platform_name\" text,\n\"Market_district\" text,\n\"Download_rank\" int,\nPRIMARY KEY (\"Platform_ID\")\n)\nCREATE TABLE \"game\" (\n\"Game_ID\" int,\n\"Title\" text,\n\"Release_Date\" text,\n\"Franchise\" text,\n\"Developers\" text,\n\"Platform_ID\" int,\n\"Units_sold_Millions\" int,\nPRIMARY KEY (\"Game_ID\"),\nFOREIGN KEY (\"Platform_ID\") REFERENCES platform(\"Platform_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" int,\n\"Rank_of_the_year\" int,\n\"Player_name\" text,\n\"Position\" text,\n\"College\" text,\nPRIMARY KEY (\"Player_ID\")\n)\nCREATE TABLE \"game_player\" (\n\"Player_ID\" int,\n\"Game_ID\" int,\n\"If_active\" bool,\nPRIMARY KEY (\"Player_ID\",\"Game_ID\"),\nFOREIGN KEY (\"Player_ID\") REFERENCES player(\"Player_ID\"),\nFOREIGN KEY (\"Game_ID\") REFERENCES game(\"Game_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the titles of games not played by any players who play the Guard position?[SQL]\\nSELECT game.Game_ID FROM game WHERE game_player.If_active  =  0 EXCEPT SELECT T1.game_id FROM game AS T1 JOIN game_player AS T2 ON T1.game_ID  =  T2.player_ID WHERE T2.Position  =  'Guard' <MID>\n    GROUP BY game.Game_ID;"
  },
  {
    "id": 1886,
    "db_id": "book_press",
    "question": {
      "id": 1886,
      "db_id": "book_press",
      "question": "list all the names of press in descending order of the profit of the year."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, list all the names of press in descending order of the profit of the year.[SQL]\\nSELECT press.Title FROM press WHERE YEAR_Profits_billion  >  0 ORDER BY YEAR_Profits_billion DESC'\n        ;"
  },
  {
    "id": 1887,
    "db_id": "book_press",
    "question": {
      "id": 1887,
      "db_id": "book_press",
      "question": "Sorted all the press by year profits in descending order, and return press names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sorted all the press by year profits in descending order, and return press names.[SQL]\\nSELECT press.Release_date FROM book WHERE press.Year_Profits_billion IN (SELECT max(Year_Profits_billion) FROM press) ORDER BY press.Year_Profits_billion DESC; SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC; SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC NULLS LAST; SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC NULLS FIRST; SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC LIMIT 1; SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC OFFSET 1; SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC LIMIT 2; SELECT"
  },
  {
    "id": 1888,
    "db_id": "book_press",
    "question": {
      "id": 1888,
      "db_id": "book_press",
      "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[SQL]\\nSELECT Title FROM book WHERE Press_ID IN ( SELECT Press_ID FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1 ) ORDER BY TITLE ASC LIMIT 100'\n        ;"
  },
  {
    "id": 1889,
    "db_id": "book_press",
    "question": {
      "id": 1889,
      "db_id": "book_press",
      "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[SQL]\\nSELECT press.Press_ID FROM press WHERE press.Year_Profits_billion  >  15 OR press.Month_Profits_billion  >  1000000000. Press_ID IN (SELECT press_id FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1000000000) SELECT name FROM press WHERE press.Press_ID IN (SELECT press_id FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1000000000) <MID>\n    GROUP BY press.Press_ID;"
  },
  {
    "id": 1890,
    "db_id": "book_press",
    "question": {
      "id": 1890,
      "db_id": "book_press",
      "question": "what are the average and maximum profit of a year for all presses?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what are the average and maximum profit of a year for all presses?[SQL]\\nSELECT Author_ID FROM book WHERE YEAR  =  2017 GROUP BY press_id ORDER BY sum(sale_amount) DESC LIMIT 1; SELECT avg(month_profits_billion) ,  max(month_profits_billion) FROM press;'\n        ;"
  },
  {
    "id": 1891,
    "db_id": "book_press",
    "question": {
      "id": 1891,
      "db_id": "book_press",
      "question": "Find the average and maximum yearly profit for each press."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the average and maximum yearly profit for each press.[SQL]\\nSELECT Title  FROM press;"
  },
  {
    "id": 1892,
    "db_id": "book_press",
    "question": {
      "id": 1892,
      "db_id": "book_press",
      "question": "Find the name of the publisher whose monthly profit is the highest."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the publisher whose monthly profit is the highest.[SQL]\\nSELECT Title FROM book WHERE Press_ID  =  (SELECT press_id FROM press ORDER BY month_profits_billion DESC LIMIT 1) UNION SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 <MID>.com/problems/highest-profit-publisher/description/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1893,
    "db_id": "book_press",
    "question": {
      "id": 1893,
      "db_id": "book_press",
      "question": "Which press has the largest monthly profit? Give me the press name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which press has the largest monthly profit? Give me the press name.[SQL]\\nSELECT press.Press_ID FROM press WHERE press.Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press) AND press.Year_Profits_billion  =  (SELECT min(Year_Profits_billion) FROM press) AND press.name != 'Special' AND press.name != 'University' AND press.name != 'for Children' AND press.name != 'Classics' AND press.name != 'Mystery' AND press.name != 'Thriller' AND press.name != 'Sci-fi' AND press.name != 'Romance' AND press.name != 'Self-help' AND press.name != 'Newspapers' AND press.name != 'Journals' AND press.name != 'Magazines' AND press.name != 'Comics' AND press."
  },
  {
    "id": 1894,
    "db_id": "book_press",
    "question": {
      "id": 1894,
      "db_id": "book_press",
      "question": "Find the name of the publisher whose monthly profit is the highest or the lowest."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the publisher whose monthly profit is the highest or the lowest.[SQL]\\nSELECT Title FROM book WHERE Press_ID  =   ( SELECT Press_ID FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 ) UNION SELECT TITLE FROM book WHERE Press_ID  =   ( SELECT Press_ID FROM press ORDER BY Month_Profits_billion ASC LIMIT 1 )'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1895,
    "db_id": "book_press",
    "question": {
      "id": 1895,
      "db_id": "book_press",
      "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[SQL]\\nSELECT press.Title FROM press WHERE MONTH_Profits_billion  =  (SELECT min(MONTH_Profits_billion) FROM press) OR MONTH_Profits_billion  =  (SELECT max(MONTH_Profits_billion) FROM press) ORDER BY MONTH_Profits_billion DESC LIMIT 1 OFFSET 0'\n        ;"
  },
  {
    "id": 1896,
    "db_id": "book_press",
    "question": {
      "id": 1896,
      "db_id": "book_press",
      "question": "how many authors are under age 30?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, how many authors are under age 30?[SQL]\\nSELECT Author_ID FROM author WHERE Age  <  30 GROUP BY Author_ID HAVING count(*)  >=  10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1897,
    "db_id": "book_press",
    "question": {
      "id": 1897,
      "db_id": "book_press",
      "question": "Count the number of authors of age below 30."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of authors of age below 30.[SQL]\\nSELECT Author_ID FROM author WHERE Age  <  30 GROUP BY Name HAVING count(*)  >  10'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 1898,
    "db_id": "book_press",
    "question": {
      "id": 1898,
      "db_id": "book_press",
      "question": "find the average age of authors for each gender."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, find the average age of authors for each gender.[SQL]\\nSELECT author.Author_ID \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1899,
    "db_id": "book_press",
    "question": {
      "id": 1899,
      "db_id": "book_press",
      "question": "For each gender, return gender and the average age of authors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each gender, return gender and the average age of authors.[SQL]\\nSELECT Title FROM book WHERE Author_ID  =  1'\n        GROUP BY Title;"
  },
  {
    "id": 1900,
    "db_id": "book_press",
    "question": {
      "id": 1900,
      "db_id": "book_press",
      "question": "find the number of authors who are older than 30 for each gender."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, find the number of authors who are older than 30 for each gender.[SQL]\\nSELECT author.Title FROM author WHERE aothr.age  >  30 GROUP BY aothr.gender ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1901,
    "db_id": "book_press",
    "question": {
      "id": 1901,
      "db_id": "book_press",
      "question": "How many authors are of age above 30 for each gender?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many authors are of age above 30 for each gender?[SQL]\\nSELECT Title FROM book WHERE Author_ID IN (SELECT Author_ID FROM author WHERE Age  >  30 AND Gender  =  'Male') UNION SELECT TITLE FROM book WHERE Author_ID IN (SELECT Author_ID FROM author WHERE Age  >  30 AND Gender  =  'Female')'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1902,
    "db_id": "book_press",
    "question": {
      "id": 1902,
      "db_id": "book_press",
      "question": "List all book titles in the order of their release date from the most recent to the past."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all book titles in the order of their release date from the most recent to the past.[SQL]\\nSELECT Title FROM bookORDER BY Release_date;"
  },
  {
    "id": 1903,
    "db_id": "book_press",
    "question": {
      "id": 1903,
      "db_id": "book_press",
      "question": "Sort all the books in descending order of release date, and return the book titles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort all the books in descending order of release date, and return the book titles.[SQL]\\nSELECT Title FROM bookORDER BY Release_date;"
  },
  {
    "id": 1904,
    "db_id": "book_press",
    "question": {
      "id": 1904,
      "db_id": "book_press",
      "question": "Find the number of books for each series."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of books for each series.[SQL]\\nSELECT Book_Series FROM book WHERE Book_Series != '' GROUP BY Book_Series ORDER BY COUNT(*) DESC LIMIT 10'\n        ;"
  },
  {
    "id": 1905,
    "db_id": "book_press",
    "question": {
      "id": 1905,
      "db_id": "book_press",
      "question": "How many books does each book series have? Return the counts and book series."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many books does each book series have? Return the counts and book series.[SQL]\\nSELECT Book_Series FROM bookGROUP BY Book_SeriesORDER BY TitleLIMIT 5'\n        ;"
  },
  {
    "id": 1906,
    "db_id": "book_press",
    "question": {
      "id": 1906,
      "db_id": "book_press",
      "question": "Find the titles and publish dates of the top 5 best sale books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the titles and publish dates of the top 5 best sale books.[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  =  (SELECT MAX(Sale_Amount) FROM book) ORDER BY Release_date LIMIT 5'\n        ;"
  },
  {
    "id": 1907,
    "db_id": "book_press",
    "question": {
      "id": 1907,
      "db_id": "book_press",
      "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the 5 best books in terms of sale amount? Give me their titles and release dates.[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  =  (SELECT MAX(Sale_Amount) FROM book) LIMIT 5'\n        ;"
  },
  {
    "id": 1908,
    "db_id": "book_press",
    "question": {
      "id": 1908,
      "db_id": "book_press",
      "question": "Find the book series that have some book selling more than 1000 and some book less 500."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the book series that have some book selling more than 1000 and some book less 500.[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  >  1000 INTERSECT SELECT Tile FROM book WHERE Sale_Amount  <  500'\n        ;"
  },
  {
    "id": 1909,
    "db_id": "book_press",
    "question": {
      "id": 1909,
      "db_id": "book_press",
      "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[SQL]\\nSELECT Title FROM book WHERE sale_amount BETWEEN 1000 AND 500 FOR BOOK_SERIES]'\n        ;"
  },
  {
    "id": 1910,
    "db_id": "book_press",
    "question": {
      "id": 1910,
      "db_id": "book_press",
      "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of authors who publish their books in both \"MM\" and \"LT\" series.[SQL]\\nSELECT Title FROM book WHERE Book_Series  =  'MM' INTERSECT SELECT Title FROM book WHERE Book_Series  =  'LT' <MID>.com/problems/find-the-name-of-authors-who-publish-their-books-in-both-mm-and-lt-series/1\n\nGROUP BY Author_ID;"
  },
  {
    "id": 1911,
    "db_id": "book_press",
    "question": {
      "id": 1911,
      "db_id": "book_press",
      "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.[SQL]\\nSELECT Title FROM book WHERE Book_Series  =  'MM' INTERSECT SELECT Title FROM book WHERE Book_Series  =  'LT' <MID>\n    GROUP BY author.Author_ID;"
  },
  {
    "id": 1912,
    "db_id": "book_press",
    "question": {
      "id": 1912,
      "db_id": "book_press",
      "question": "Find the name and age of the authors who do not have any book in the record."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and age of the authors who do not have any book in the record.[SQL]\\nSELECT Title FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)',\n       \n      \n     \n   \n  \n \n    \n \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
  },
  {
    "id": 1913,
    "db_id": "book_press",
    "question": {
      "id": 1913,
      "db_id": "book_press",
      "question": "Which authors in the record have not published any books ? Give me their names ."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which authors in the record have not published any books ? Give me their names .[SQL]\\nSELECT Title FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)  SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)  SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book) <MID>. Presses are identified by press IDs. Books are identified by book IDs. A book can be sold by either a series or alone. A book series is a group of books released at almost the same time. Sales Amount is the amount sold for each book. Release Date is the date the book was released. An author writes one or more books. Each book has an author, but an author does not necessarily write a book. For example John Smith only wrote one book. Select the name of the author. Find all authors that have not written any books. List their names. Order the results by ascending names. [SQL] SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author"
  },
  {
    "id": 1914,
    "db_id": "book_press",
    "question": {
      "id": 1914,
      "db_id": "book_press",
      "question": "Find the names of authors who have more than one book in the database."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of authors who have more than one book in the database.[SQL]\\nSELECT Title FROM book WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*)  >  1) UNION SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*)  >  1) <MID>.com/problems/find-authors-with-multiple-books/description/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1915,
    "db_id": "book_press",
    "question": {
      "id": 1915,
      "db_id": "book_press",
      "question": "Which authors have published more than 1 book according to the database? Give me their names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which authors have published more than 1 book according to the database? Give me their names.[SQL]\\nSELECT Title FROM author WHERE name IN (SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.name HAVING count(*)  >  1) ORDER BY TITLE ASC'\n        ;"
  },
  {
    "id": 1916,
    "db_id": "book_press",
    "question": {
      "id": 1916,
      "db_id": "book_press",
      "question": "Find the title, author name, and publisher name for the top 3 best sales books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the title, author name, and publisher name for the top 3 best sales books.[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  =  (SELECT MAX(Sale_Amount) FROM book) ORDER BY Title LIMIT 3 UNION SELECT T1.Title ,  T3.name ,  T2.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id ORDER BY T1.Sale_Amount DESC LIMIT 3'\n        ;"
  },
  {
    "id": 1917,
    "db_id": "book_press",
    "question": {
      "id": 1917,
      "db_id": "book_press",
      "question": "What are the 3 best selling books? Show their titles, author names, and press names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the 3 best selling books? Show their titles, author names, and press names.[SQL]\\nSELECT Title \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1918,
    "db_id": "book_press",
    "question": {
      "id": 1918,
      "db_id": "book_press",
      "question": "Find the name and total book sale amount of each press."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and total book sale amount of each press.[SQL]\\nSELECT Title  FROM book WHERE Sale_Amount  =  ( SELECT SUM(Sale_Amount) FROM book GROUP BY Press_ID ) ORDER BY TITLE ASC'\n        ;"
  },
  {
    "id": 1919,
    "db_id": "book_press",
    "question": {
      "id": 1919,
      "db_id": "book_press",
      "question": "What are the name and total book sale amount of each press?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the name and total book sale amount of each press?[SQL]\\nSELECT Title  FROM book WHERE Press_ID  =  1 UNION SELECT T2.Name ,  sum(T1.Sale_Amount) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID  =  T2.Press_ID GROUP BY T2.Name'\n        ;"
  },
  {
    "id": 1920,
    "db_id": "book_press",
    "question": {
      "id": 1920,
      "db_id": "book_press",
      "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  >  1000 JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Name'\n        ;"
  },
  {
    "id": 1921,
    "db_id": "book_press",
    "question": {
      "id": 1921,
      "db_id": "book_press",
      "question": "For each press, return its name and the number of books that have sale amount above 1000."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each press, return its name and the number of books that have sale amount above 1000.[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  >  1000 AND press_id IN ( SELECT press_id FROM press ) GROUP BY press_id HAVING COUNT(*)  >=  1'\n        ;"
  },
  {
    "id": 1922,
    "db_id": "book_press",
    "question": {
      "id": 1922,
      "db_id": "book_press",
      "question": "What is the name of the author of best selling book?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the author of best selling book?[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  =  (SELECT max(Sale_Amount) FROM book) INTERSECT SELECT Title FROM author WHERE Author_ID  =  (SELECT Author_ID FROM book WHERE Sale_Amount  =  (SELECT max(Sale_Amount) FROM book))'\n        ;"
  },
  {
    "id": 1923,
    "db_id": "book_press",
    "question": {
      "id": 1923,
      "db_id": "book_press",
      "question": "Who wrote the best selling book? Give me the author name."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who wrote the best selling book? Give me the author name.[SQL]\\nSELECT Title FROM book WHERE Sale_Amount  =  (SELECT max(Sale_Amount) FROM book) UNION SELECT Name FROM author WHERE Author_ID  =  (SELECT Author_ID FROM book WHERE Sale_Amount  =  (SELECT max(Sale_Amount) FROM book))'\n        ;"
  },
  {
    "id": 1924,
    "db_id": "book_press",
    "question": {
      "id": 1924,
      "db_id": "book_press",
      "question": "find the name and gender of the author who published the most books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, find the name and gender of the author who published the most books.[SQL]\\nSELECT Title FROM book;"
  },
  {
    "id": 1925,
    "db_id": "book_press",
    "question": {
      "id": 1925,
      "db_id": "book_press",
      "question": "Who wrote the largest number of books? Give me the author name and gender."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who wrote the largest number of books? Give me the author name and gender.[SQL]\\nSELECT Title FROM author;"
  },
  {
    "id": 1926,
    "db_id": "book_press",
    "question": {
      "id": 1926,
      "db_id": "book_press",
      "question": "Find the names of the authors who did not have any book with the \"Accor\" press."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the names of the authors who did not have any book with the \"Accor\" press.[SQL]\\nSELECT Title FROM book WHERE Press_ID != 3'\n        ;"
  },
  {
    "id": 1927,
    "db_id": "book_press",
    "question": {
      "id": 1927,
      "db_id": "book_press",
      "question": "Which authors have never published under the \"Accor\" press? Give me their names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which authors have never published under the \"Accor\" press? Give me their names.[SQL]\\nSELECT Title FROM author WHERE Author_ID NOT IN (SELECT T1.author_id FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T2.name  =  'Accor') <MID>\n    GROUP BY Title;"
  },
  {
    "id": 1928,
    "db_id": "book_press",
    "question": {
      "id": 1928,
      "db_id": "book_press",
      "question": "Find the name and the yearly profit in billion for press that published more than two books."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and the yearly profit in billion for press that published more than two books.[SQL]\\nSELECT Title FROM book WHERE Press_ID  =   ( SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*)  >  2 ) AND YEAR  =   ( SELECT MAX (YEAR) FROM book GROUP BY Press_ID HAVING COUNT(*)  >  2 )'\n        ;"
  },
  {
    "id": 1929,
    "db_id": "book_press",
    "question": {
      "id": 1929,
      "db_id": "book_press",
      "question": "Find the press that published more than two books, and return its name and yearly profit in billion."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE \"author\" (\n\"Author_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Gender\" text,\nPRIMARY KEY (\"Author_ID\")\n)\nCREATE TABLE \"press\" (\n\"Press_ID\" int,\n\"Name\" text,\n\"Month_Profits_billion\" real,\n\"Year_Profits_billion\" real,\nPRIMARY KEY (\"Press_ID\")\n)\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Book_Series\" text,\n\"Author_ID\" int,\n\"Press_ID\" int,\n\"Sale_Amount\" text,\n\"Release_date\" text,\nPRIMARY KEY (\"Book_ID\"),\nFOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),\nFOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the press that published more than two books, and return its name and yearly profit in billion.[SQL]\\nSELECT Title FROM book WHERE Press_ID IN ( SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*)  >  2 ) UNION SELECT name ,  yearlyprofit FROM press WHERE press_id IN ( SELECT press_id FROM book GROUP BY press_id HAVING count(*)  >  2 )'\n        ;"
  },
  {
    "id": 1930,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1930,
      "db_id": "cre_Doc_Workflow",
      "question": "How many authors do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many authors do we have?[SQL]\\nSELECT date_from FROM Staff_in_Processes WHERE staff_role_code  =  'Author' AND process_id  =  7634 AND date_from  >  '2004-01-01' GROUP BY author_name ORDER BY count(*) DESC LIMIT 1' | ['1']]\n\n    ORDER BY date_from;"
  },
  {
    "id": 1931,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1931,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all author names."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all author names.[SQL]\\nSELECT Documents.document_id FROM Documents WHERE author_name IN ( SELECT author_name FROM Authors )'\n        ;"
  },
  {
    "id": 1932,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1932,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the names and other details for all authors."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names and other details for all authors.[SQL]\\nSELECT other_details FROM Authors WHERE author_name = 'Author 1' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 2' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 3' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 4' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 5' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 6' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 7' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 8' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 9' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 10' UNION SELECT other_details FROM Authors WHERE author_name = 'Author 11' UNION"
  },
  {
    "id": 1933,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1933,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the other details for the author Addison Denesik."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the other details for the author Addison Denesik.[SQL]\\nSELECT other_details FROM Authors WHERE author_name  =  'Addison Denesik' <MID>_id INTEGER NOT NULL , date_from DATETIME , date_to DATETIME , other_details VARCHAR(255) , PRIMARY KEY (document_id , process_id , staff_id) ) CREATE TABLE Staff_in_Processes AS SELECT document_id ,  process_id ,  staff_id ,  date_from ,  date_to ,  other_details FROM Documents_Processes JOIN Business_Processes ON Documents_Processes.process_id = Business_Processes.process_id JOIN Staff ON Documents_Processes.staff_id = Staff.staff_id WHERE Business_Processes.process_name = 'Doctor' AND Staff.staff_details LIKE '%female%' EXPLAIN SELECT document_id ,  process_id , "
  },
  {
    "id": 1934,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1934,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of documents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the number of documents.[SQL]\\nSELECT document_id FROM Documents WHERE document_name  =  'Test' GROUP BY document_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1935,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1935,
      "db_id": "cre_Doc_Workflow",
      "question": "Who is the author of the document with id 4?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who is the author of the document with id 4?[SQL]\\nSELECT document_id FROM Documents WHERE document_id = 4'\n        ;"
  },
  {
    "id": 1936,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1936,
      "db_id": "cre_Doc_Workflow",
      "question": "Who is the author of the document \"Travel to Brazil\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Who is the author of the document \"Travel to Brazil\"?[SQL]\\nSELECT other_details FROM Documents WHERE document_name  =  'Travel to Brazil' AND author_name IN ( SELECT author_name FROM Authors )'\n\n    ORDER BY other_details;"
  },
  {
    "id": 1937,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1937,
      "db_id": "cre_Doc_Workflow",
      "question": "How many documents does has the author Era Kerluke written?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many documents does has the author Era Kerluke written?[SQL]\\nSELECT other_details FROM Documents WHERE author_name  =  'Era Kerluke' AND document_name LIKE '%document%' GROUP BY other_details HAVING count(*)  =  1 UNION SELECT other_details FROM Documents WHERE author_name  =  'Era Kerluke' AND document_name LIKE '%document%' GROUP BY other_details HAVING count(*)  >  1 ORDER BY count(*) DESC LIMIT 1' AS T1 JOIN Authors ON T1.author_name  =  Authors.author_name WHERE Authors.author_name  =  'Era Kerluke' AND T1.document_name LIKE '%document%' GROUP BY T1.other_details HAVING count(*)  =  1 UNION SELECT other_details FROM Documents WHERE author_name  =  'Era Kerluke' AND document_name LIKE '%document%' GROUP BY other_details HAV"
  },
  {
    "id": 1938,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1938,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the names and descriptions for all documents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names and descriptions for all documents.[SQL]\\nSELECT document_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1939,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1939,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the ids and names for all documents by author Bianka Cummings."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the ids and names for all documents by author Bianka Cummings.[SQL]\\nSELECT document_id FROM Documents WHERE author_name  =  'Bianka Cummings' UNION SELECT document_id FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id WHERE T2.process_name  =  'Send to Editor' UNION SELECT document_id FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id WHERE T2.process_name  =  'Editorial' UNION SELECT document_id FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id WHERE T2.process_name  =  'Publish' UNION SELECT document_id FROM Documents_Processes AS T1 JOIN Business_Processes AS T"
  },
  {
    "id": 1940,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1940,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the author name and details for the document \"Travel to China\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the author name and details for the document \"Travel to China\".[SQL]\\nSELECT other_details FROM Documents WHERE document_name  =  'Travel to China' AND author_name IN ( SELECT author_name FROM Authors )'\n\n    ORDER BY other_details;"
  },
  {
    "id": 1941,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1941,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all author names and number of documents corresponding to each."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all author names and number of documents corresponding to each.[SQL]\\nSELECT Documents.document_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1942,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1942,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the name of the author with most number of documents?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the author with most number of documents?[SQL]\\nSELECT document_id FROM Documents WHERE author_name  =  ( SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT document_id FROM Documents WHERE author_name  =  ( SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1 OFFSET 1 )'\n        ;"
  },
  {
    "id": 1943,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1943,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the names for authors with at least two documents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the names for authors with at least two documents.[SQL]\\nSELECT Documents.document_id FROM Documents WHERE author_name IN ( SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2 ) ORDER BY Documents.document_id ASC'\n        ;"
  },
  {
    "id": 1944,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1944,
      "db_id": "cre_Doc_Workflow",
      "question": "How many business processes do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many business processes do we have?[SQL]\\nSELECT process_id FROM Business_Processes WHERE process_name = 'Business Process Name' GROUP BY process_name HAVING count(*)  =  3' | business_processes | 0 | SELECT count(*) FROM Business_Processes WHERE process_name  =  'Business Process Name' | 3 | SELECT count(*) FROM Business_Processes WHERE process_name  =  'Another Business Process Name' | 4 | SELECT count(*) FROM Business_Processes WHERE process_name  =  'Yet Another Business Process Name' | 2 | SELECT count(*) FROM Business_Processes WHERE process_name  =  'Last Business Process Name' | 1 | SELECT count(*) FROM Business_Processes WHERE process_name  =  'Business Process Name' GROUP BY process_name HAVING count(*)  =  3 | 3 | SELECT count(*) FROM Business_Processes WHERE process_name  ="
  },
  {
    "id": 1945,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1945,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the next process id, process name, process description for process with id 9."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the next process id, process name, process description for process with id 9.[SQL]\\nSELECT process_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1946,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1946,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the process name for the next process of the process with id 9?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the process name for the next process of the process with id 9?[SQL]\\nSELECT process_id FROM Business_Processes WHERE process_id = 9 AND process_name != 'null' ORDER BY process_name LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1947,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1947,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of process outcomes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the number of process outcomes.[SQL]\\nSELECT process_id FROM Documents_Processes WHERE process_outcome_code  =  'Delayed' GROUP BY process_outcome_code HAVING count(*)  >  10'\n\n    ORDER BY process_id;"
  },
  {
    "id": 1948,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1948,
      "db_id": "cre_Doc_Workflow",
      "question": "List the codes and descriptions for all process outcomes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the codes and descriptions for all process outcomes.[SQL]\\nSELECT process_id FROM Business_Processes WHERE process_name  =  'Document Approval' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Rejection' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Follow Up' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Escalation' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Compliance' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Access Request' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Access Granted' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Access Denied' UNION SELECT process_id FROM Business_Processes WHERE process_name  =  'Document Access Revoked"
  },
  {
    "id": 1949,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1949,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the description for the process outcome code working?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the description for the process outcome code working?[SQL]\\nSELECT process_id FROM Documents_Processes WHERE process_outcome_code  =  'Working' UNION SELECT process_id FROM Staff_in_Processes WHERE process_outcome_code  =  'Working' <MID>_id INTEGER NOT NULL,\n    LIMIT 1000000,\n    ;"
  },
  {
    "id": 1950,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1950,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of process status."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the number of process status.[SQL]\\nSELECT process_id FROM Business_Processes WHERE process_status_code = 'Approved' GROUP BY process_id'\n\n    ORDER BY process_id;"
  },
  {
    "id": 1951,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1951,
      "db_id": "cre_Doc_Workflow",
      "question": "List the codes and descriptions for all process status."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the codes and descriptions for all process status.[SQL]\\nSELECT process_id FROM Business_Processes WHERE process_description = 'Document Status' UNION SELECT process_status_code ,  process_status_description FROM Process_Status'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1952,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1952,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the description for process status code ct?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the description for process status code ct?[SQL]\\nSELECT process_id FROM Business_Processes WHERE process_status_code  =  'ct' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  'rt' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  'pp' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  'fa' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  'na' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  're' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  'in' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  'sp' UNION SELECT process_id FROM Business_Processes WHERE process_status_code  =  'ip' UNION SELECT process"
  },
  {
    "id": 1953,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1953,
      "db_id": "cre_Doc_Workflow",
      "question": "How many staff do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many staff do we have?[SQL]\\nSELECT date_from FROM Staff_in_Processes WHERE staff_role_code  =  'Ref_Staff_Roles.staff_role_code' AND process_id  =  123456789 AND date_from  >  '2018-01-01' GROUP BY staff_id ORDER BY count(*) DESC LIMIT 1' <MID>_id INTEGER NOT NULL,\n    LIMIT 1'\n\n    ;"
  },
  {
    "id": 1954,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1954,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the ids and details for all staff."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the ids and details for all staff.[SQL]\\nSELECT staff_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1955,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1955,
      "db_id": "cre_Doc_Workflow",
      "question": "What are the details for the staff member with id 100."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the details for the staff member with id 100.[SQL]\\nSELECT staff_id FROM Staff WHERE staff_id  =  100 UNION SELECT date_from FROM Staff_in_Processes WHERE staff_id  =  100 UNION SELECT date_to FROM Staff_in_Processes WHERE staff_id  =  100 UNION SELECT other_details FROM Staff_in_Processes WHERE staff_id  =  100 UNION SELECT staff_details FROM Staff WHERE staff_id  =  100 UNION SELECT ref_staff_roles.staff_role_description FROM Ref_Staff_Roles JOIN Staff_in_Processes ON ref_staff_roles.staff_role_code  =  Staff_in_Processes.staff_role_code WHERE Staff_in_Processes.staff_id  =  100 UNION SELECT documents_processes.process_outcome_code FROM Documents_Processes JOIN Staff"
  },
  {
    "id": 1956,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1956,
      "db_id": "cre_Doc_Workflow",
      "question": "Show the number of staff roles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the number of staff roles.[SQL]\\nSELECT Ref_Staff_Roles.staff_role_code FROM Ref_Staff_Roles;"
  },
  {
    "id": 1957,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1957,
      "db_id": "cre_Doc_Workflow",
      "question": "List the codes and descriptions for all staff roles."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the codes and descriptions for all staff roles.[SQL]\\nSELECT staff_role_code FROM Ref_Staff_Roles WHERE 1'\n        ;"
  },
  {
    "id": 1958,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1958,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the description for staff role code HR?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the description for staff role code HR?[SQL]\\nSELECT staff_role_code FROM Ref_Staff_Roles WHERE staff_role_code  =  'HR' <MID>_id INTEGER NOT NULL,\n    LIMIT 1000000\n    ;"
  },
  {
    "id": 1959,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1959,
      "db_id": "cre_Doc_Workflow",
      "question": "How many documents have a process?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many documents have a process?[SQL]\\nSELECT document_id FROM Documents_Processes WHERE process_id != 'null' GROUP BY document_id HAVING count(*)  =  1 UNION SELECT document_id FROM Documents_Processes WHERE process_id != 'null' GROUP BY document_id HAVING count(*)  >  1'\n\n    ORDER BY document_id;"
  },
  {
    "id": 1960,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1960,
      "db_id": "cre_Doc_Workflow",
      "question": "List all process ids with a document."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all process ids with a document.[SQL]\\nSELECT process_id FROM Documents_Processes WHERE document_id  =  123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"
  },
  {
    "id": 1961,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1961,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all document ids without a process."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all document ids without a process.[SQL]\\nSELECT document_id FROM Documents_Processes WHERE process_id IS NULL'\n        ;"
  },
  {
    "id": 1962,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1962,
      "db_id": "cre_Doc_Workflow",
      "question": "List all process ids with no document."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all process ids with no document.[SQL]\\nSELECT process_id FROM Business_Processes WHERE process_id NOT IN ( SELECT process_id FROM Documents_Processes )'\n        ;"
  },
  {
    "id": 1963,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1963,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the process outcome description and process status description for the document with id 0?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the process outcome description and process status description for the document with id 0?[SQL]\\nSELECT process_id FROM Documents_Processes WHERE document_id = 0 UNION SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_Processes AS T1 JOIN Process_Outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0 GROUP BY T1.process_id ORDER BY T1.process_id ASC'\n        ;"
  },
  {
    "id": 1964,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1964,
      "db_id": "cre_Doc_Workflow",
      "question": "What is the process name for the document \"Travel to Brazil\"?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the process name for the document \"Travel to Brazil\"?[SQL]\\nSELECT process_id FROM Documents_Processes WHERE document_name  =  'Travel to Brazil' AND process_name != '' ORDER BY process_name LIMIT 1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1965,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1965,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all process ids and the number of documents in each process."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all process ids and the number of documents in each process.[SQL]\\nSELECT process_id FROM Documents_Processes WHERE document_id != -1 GROUP BY process_id'\n        ;"
  },
  {
    "id": 1966,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1966,
      "db_id": "cre_Doc_Workflow",
      "question": "How many staff are the document with id 0 and process with id 9."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many staff are the document with id 0 and process with id 9.[SQL]\\nSELECT date_from FROM Staff_in_Processes WHERE document_id  =  0 AND process_id  =  9'\n        ;"
  },
  {
    "id": 1967,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1967,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all staff ids and the number of document processes for each staff."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all staff ids and the number of document processes for each staff.[SQL]\\nSELECT staff_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1968,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1968,
      "db_id": "cre_Doc_Workflow",
      "question": "Show all staff role codes and the number of document processes for each role."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all staff role codes and the number of document processes for each role.[SQL]\\nSELECT Ref_Staff_Roles.staff_role_code\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1969,
    "db_id": "cre_Doc_Workflow",
    "question": {
      "id": 1969,
      "db_id": "cre_Doc_Workflow",
      "question": "How many different roles does the staff with id 3 have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE Staff (\nstaff_id INTEGER NOT NULL,\nstaff_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_id)\n)\nCREATE TABLE Ref_Staff_Roles (\nstaff_role_code CHAR(15) NOT NULL,\nstaff_role_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (staff_role_code)\n)\nCREATE TABLE Process_Outcomes (\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_outcome_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_outcome_code)\n)\nCREATE TABLE Process_Status (\nprocess_status_code CHAR(15) NOT NULL,\nprocess_status_description VARCHAR(255) NOT NULL,\nPRIMARY KEY (process_status_code)\n)\nCREATE TABLE Authors (\nauthor_name VARCHAR(255) NOT NULL,\nother_details VARCHAR(255) NOT NULL,\nPRIMARY KEY (author_name)\n)\nCREATE TABLE Documents (\ndocument_id INTEGER NOT NULL,\nauthor_name VARCHAR(255) NOT NULL,\ndocument_name VARCHAR(255) NOT NULL,\ndocument_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id),\nFOREIGN KEY (author_name) REFERENCES Authors (author_name)\n)\nCREATE TABLE Business_Processes (\nprocess_id INTEGER NOT NULL,\nnext_process_id INTEGER,\nprocess_name VARCHAR(255) NOT NULL,\nprocess_description VARCHAR(255) NOT NULL,\nother_details VARCHAR(255),\nPRIMARY KEY (process_id)\n)\nCREATE TABLE Documents_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nprocess_outcome_code CHAR(15) NOT NULL,\nprocess_status_code CHAR(15) NOT NULL,\nPRIMARY KEY (document_id, process_id),\nFOREIGN KEY (document_id) REFERENCES Documents (document_id),\nFOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),\nFOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),\nFOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code)\n)\nCREATE TABLE Staff_in_Processes (\ndocument_id INTEGER NOT NULL,\nprocess_id INTEGER NOT NULL,\nstaff_id INTEGER NOT NULL,\nstaff_role_code CHAR(15) NOT NULL,\ndate_from DATETIME,\ndate_to DATETIME,\nother_details VARCHAR(255),\nPRIMARY KEY (document_id, process_id, staff_id),\nFOREIGN KEY (staff_id) REFERENCES Staff (staff_id),\nFOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),\nFOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different roles does the staff with id 3 have?[SQL]\\nSELECT date_from FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY date_from, date_to, other_details HAVING count(*)  >= all (SELECT count(*) FROM Staff_in_Processes GROUP BY date_from ,  date_to ,  other_details) ORDER BY date_from DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1970,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1970,
      "db_id": "advertising_agencies",
      "question": "How many agencies do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many agencies do we have?[SQL]\\nSELECT Agencies.staff_id FROM Agencies WHERE agency_details LIKE '%Marketing%' UNION SELECT Staff.staff_id FROM Staff WHERE staff_details LIKE '%Accounts%' UNION SELECT Clients.client_id FROM Clients WHERE client_details LIKE '%New Business%' UNION SELECT Meetings.meeting_id FROM Meetings WHERE purpose_of_meeting LIKE '%Negotiation%' UNION SELECT Invoices.invoice_id FROM Invoices WHERE invoice_status LIKE 'Paid' UNION SELECT Payments.payment_id FROM Payments WHERE payment_details LIKE 'Conclusion'')] AS count FROM Agencie AS Agenciees UNION SELECT count(*) FROM Staff AS Staff UNION SELECT count(*) FROM Clients AS Clients UNION SELECT count(*) FROM Meetings AS Meetings UNION SELECT count(*) FROM Invoices AS Invoices UNION SELECT count"
  },
  {
    "id": 1971,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1971,
      "db_id": "advertising_agencies",
      "question": "Count the number of agencies."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of agencies.[SQL]\\nSELECT Agencies.staff_id FROM Agencies WHERE agency_details LIKE '%Marketing%' GROUP BY Agencies.agency_id HAVING count(*)  >  1'\n        ;"
  },
  {
    "id": 1972,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1972,
      "db_id": "advertising_agencies",
      "question": "Show all agency ids and details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all agency ids and details.[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id  =  1 UNION SELECT client_id FROM Clients WHERE agency_id  =  1 UNION SELECT meeting_id FROM Meetings UNION SELECT invoice_id FROM Invoices'\n        ;"
  },
  {
    "id": 1973,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1973,
      "db_id": "advertising_agencies",
      "question": "What are all the agency ids and details?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the agency ids and details?[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id  =  1 UNION SELECT client_id FROM Clients WHERE agency_id  =  1 UNION SELECT meeting_id FROM Meetings UNION SELECT invoice_id FROM Invoices UNION SELECT payment_id FROM Payments'\n        ;"
  },
  {
    "id": 1974,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1974,
      "db_id": "advertising_agencies",
      "question": "Show the number of clients."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the number of clients.[SQL]\\nSELECT Agencies.staff_id FROM Agencies WHERE agency_details = 'Client' GROUP BY Agencie.staff_id ORDER BY count(*) DESC LIMIT 1' <MID>_id` ) REFERENCES `Clients`(`client_id` )'\n    ORDER BY meeting_id;"
  },
  {
    "id": 1975,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1975,
      "db_id": "advertising_agencies",
      "question": "How many clients are there?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many clients are there?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE agency_id = 1'\n        ;"
  },
  {
    "id": 1976,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1976,
      "db_id": "advertising_agencies",
      "question": "List all client ids and client details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all client ids and client details.[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE agency_id  =  1 UNION SELECT Clients.client_id ,  client_details FROM Clients WHERE agency_id  =  1 UNION SELECT Clients.client_id ,  client_details FROM Clients WHERE agency_id  =  2 UNION SELECT Clients.client_id ,  client_details FROM Clients WHERE agency_id  =  3 UNION SELECT Clients.client_id ,  client_details FROM Clients WHERE agency_id  =  4 UNION SELECT Clients.client_id ,  client_details FROM Clients WHERE agency_id  =  5 UNION SELECT Clients.client_id ,  client_details FROM Clients WHERE agency_id  =  6 UNION SELECT Clients.client_id ,  client_details FROM"
  },
  {
    "id": 1977,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1977,
      "db_id": "advertising_agencies",
      "question": "What are all the client ids and details?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the client ids and details?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id = 103'\n        ;"
  },
  {
    "id": 1978,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1978,
      "db_id": "advertising_agencies",
      "question": "Show agency ids and the number of clients for each agency."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show agency ids and the number of clients for each agency.[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id = 1 UNION SELECT Clients.agency_id , count(*) FROM Clients GROUP BY Clients.agency_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1979,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1979,
      "db_id": "advertising_agencies",
      "question": "How many clients does each agency have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many clients does each agency have?[SQL]\\nSELECT Clients.staff_id  FROM Clients WHERE agency_id  =  1 UNION SELECT Clients.staff_id FROM Clients WHERE agency_id  =  2 UNION SELECT Clients.staff_id FROM Clients WHERE agency_id  =  3 UNION SELECT Clients.staff_id FROM Clients WHERE agency_id  =  4 UNION SELECT Clients.staff_id FROM Clients WHERE agency_id  =  5 UNION SELECT Clients.staff_id FROM Clients WHERE agency_id  =  6 UNION SELECT Clients.staff_id FROM Clients WHERE agency_id  =  7 UNION SELECT Clients.staff_id FROM Clients WHERE agency_id  =  8 UNION SELECT Clients.staff_id FROM Clients WHERE"
  },
  {
    "id": 1980,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1980,
      "db_id": "advertising_agencies",
      "question": "What is the agency id and details with most number of clients?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the agency id and details with most number of clients?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id  =  ( SELECT agency_id FROM Clients GROUP BY Clients.agency_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT agency_id ,  agency_details FROM Agencies WHERE agency_id  =  ( SELECT agency_id FROM Clients GROUP BY Clients.agency_id ORDER BY count(*) DESC LIMIT 1 )'\n        ;"
  },
  {
    "id": 1981,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1981,
      "db_id": "advertising_agencies",
      "question": "Return the agency id and details for the agency with the greatest number of clients."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the agency id and details for the agency with the greatest number of clients.[SQL]\\nSELECT Clients.staff_id FROM Meetings WHERE meeting_type  =  'Client' GROUP BY Clients.agency_id ORDER BY count(*) DESC LIMIT 1' <MID>\n    GROUP BY Clients.staff_id;"
  },
  {
    "id": 1982,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1982,
      "db_id": "advertising_agencies",
      "question": "Show agency ids and details with at least 2 clients."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show agency ids and details with at least 2 clients.[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING count(*)  >=  2 ) UNION SELECT agencies.agency_id ,  agencies.agency_details FROM agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING count(*)  <  2 )'\n        ;"
  },
  {
    "id": 1983,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1983,
      "db_id": "advertising_agencies",
      "question": "What are the agency ids and details agencies with at least 2 clients?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the agency ids and details agencies with at least 2 clients?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id IN ( SELECT T1.agency_id FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2 ) ORDER BY Clients.agency_id'\n        ;"
  },
  {
    "id": 1984,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1984,
      "db_id": "advertising_agencies",
      "question": "Show agency details for client with detail 'Mac'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show agency details for client with detail 'Mac'.[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE client_details  =  'Mac' UNION SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T2.agency_id HAVING count(*)  >  1'\n    ;"
  },
  {
    "id": 1985,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1985,
      "db_id": "advertising_agencies",
      "question": "What are the agency details for clients with the detail Mac?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the agency details for clients with the detail Mac?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE client_details LIKE '%Mac%' GROUP BY Clients.agency_id' <MID>_id` ) REFERENCES `Agencies`(`agency_id` )'\n    ORDER BY Clients.staff_id;"
  },
  {
    "id": 1986,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1986,
      "db_id": "advertising_agencies",
      "question": "Show details for all clients and the details of their corresponding agents."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show details for all clients and the details of their corresponding agents.[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id  =  1 UNION SELECT Staff.staff_details FROM Staff WHERE Staff.staff_id  =  12345'\n        ;"
  },
  {
    "id": 1987,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1987,
      "db_id": "advertising_agencies",
      "question": "What are the client details for each client and the corresponding details of their agencies?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the client details for each client and the corresponding details of their agencies?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id  =  1 UNION SELECT T1.client_details ,  T1.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_id  =  1'\n        ;"
  },
  {
    "id": 1988,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1988,
      "db_id": "advertising_agencies",
      "question": "Show all sic codes and the number of clients with each code."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all sic codes and the number of clients with each code.[SQL]\\nSELECT Staff_in_Meetings.staff_id FROM Staff_in_Meetings WHERE Staff_in_Meetings.meeting_id  =  3 GROUP BY Staff_in_Meetings.staff_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1989,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1989,
      "db_id": "advertising_agencies",
      "question": "How many clients are there for each sic code?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many clients are there for each sic code?[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id  =  1 UNION SELECT client_id FROM Clients WHERE agency_id  =  1 GROUP BY sic_code ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 1990,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1990,
      "db_id": "advertising_agencies",
      "question": "Show all client ids and details with sic code \"Bad\"."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all client ids and details with sic code \"Bad\".[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id  =  1 UNION SELECT client_id FROM Clients WHERE sic_code  =  'Bad' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting LIKE '%bad%' EXCEPT SELECT invoice_id FROM Invoices WHERE invoice_status  =  'Paid' UNION SELECT payment_id FROM Payments WHERE payment_details LIKE '%bad%' ORDER BY staff_id DESC LIMIT 10 OFFSET 5'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1991,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1991,
      "db_id": "advertising_agencies",
      "question": "What are the client ideas and details for clients with the sic code Bad?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the client ideas and details for clients with the sic code Bad?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE sic_code  =  'Bad' UNION SELECT T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id WHERE T2.invoice_status  =  'Paid' UNION SELECT T3.client_details FROM Clients AS T3 JOIN Meetings AS T4 ON T3.client_id  =  T4.client_id WHERE T4.meeting_outcome  =  'Good' UNION SELECT T5.client_details FROM Clients AS T5 JOIN Payments AS T6 ON T5.client_id  =  T6.client_id'\n    ;"
  },
  {
    "id": 1992,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1992,
      "db_id": "advertising_agencies",
      "question": "Show all agency ids and details for agencies with a client."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all agency ids and details for agencies with a client.[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING min(sic_code) != max(sic_code) ) UNION SELECT agency_id ,  agency_details FROM Agencies EXCEPT SELECT staff_id ,  agency_id FROM Staff_in_Meetings'\n        ;"
  },
  {
    "id": 1993,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1993,
      "db_id": "advertising_agencies",
      "question": "What are the agency ids and agency details for all agencies who have a client?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the agency ids and agency details for all agencies who have a client?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.agency_id IS NOT NULL GROUP BY Clients.agency_id ORDER BY count(*) DESC LIMIT 1'\n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1994,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1994,
      "db_id": "advertising_agencies",
      "question": "Show all agency ids without any client."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all agency ids without any client.[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id NOT IN (SELECT agency_id FROM Clients) UNION SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id HAVING count(*)  =  0 <MID>_id` ) REFERENCES `Clients`(`client_id` )'\n    LIMIT 3'\n    ;"
  },
  {
    "id": 1995,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1995,
      "db_id": "advertising_agencies",
      "question": "What are ids of agencies that do not have any clients?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are ids of agencies that do not have any clients?[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id NOT IN (SELECT agency_id FROM Clients) UNION SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients GROUP BY agency_id HAVING count(*)  =  0 <MID>\n    GROUP BY meeting_id;"
  },
  {
    "id": 1996,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1996,
      "db_id": "advertising_agencies",
      "question": "How many invoices do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many invoices do we have?[SQL]\\nSELECT Agencies.staff_id FROM Agencies WHERE agency_details  =  'New York' UNION SELECT Clients.client_id FROM Clients WHERE sic_code  =  'NY' UNION SELECT Invoices.invoice_id FROM Invoices WHERE invoice_status  =  'Paid' UNION SELECT Payments.payment_id FROM Payments WHERE payment_details  =  'Concluded' UNION SELECT Meetings.meeting_id FROM Meetings WHERE meeting_outcome  =  'Success' AND purpose_of_meeting  =  'Client Meeting' OR purpose_of_meeting  =  'Staff Meeting' OR purpose_of_meeting  =  'Administrative' OR purpose_of_meeting  =  'Sales' OR purpose_of_meeting  =  'Training' OR purpose_of"
  },
  {
    "id": 1997,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1997,
      "db_id": "advertising_agencies",
      "question": "Count the number of invoices."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of invoices.[SQL]\\nSELECT Agencies.staff_id FROM Agencies WHERE agency_details  =  'New York' UNION SELECT Clients.client_id FROM Clients WHERE sic_code  =  'NY' UNION SELECT Invoices.invoice_id FROM Invoices WHERE invoice_status  =  'Paid' UNION SELECT Payments.payment_id FROM Payments WHERE payment_details  =  'Conference' UNION SELECT Meetings.meeting_id FROM Meetings WHERE meeting_outcome  =  'Success' AND purpose_of_meeting  =  'Confidential' AND billable_yn  =  'Y' ORDER BY start_date_time DESC LIMIT 5' <MID>\n    GROUP BY staff_id;"
  },
  {
    "id": 1998,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1998,
      "db_id": "advertising_agencies",
      "question": "Show ids, status codes, and details for all invoices for clients."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show ids, status codes, and details for all invoices for clients.[SQL]\\nSELECT Invoices.staff_id  FROM Invoices WHERE Invoice_status  =  'Paid' OR Invoice_status  =  'Unpaid' OR Invoice_status  =  'Partially Paid' OR Invoice_status  =  'Past Due' OR Invoice_status  =  'Overdue' OR Invoice_status  =  'On Hold' OR Invoice_status  =  'Cancelled' OR Invoice_status  =  'Refunded' OR Invoice_status  =  'Void' OR Invoice_status  =  'Returned' OR Invoice_status  =  'Late Fees Accrued' OR Invoice_status  =  'Write Off' OR Invoice_status  =  'Charged Back' OR Invoice_status  =  'Failure' OR Invoice_status"
  },
  {
    "id": 1999,
    "db_id": "advertising_agencies",
    "question": {
      "id": 1999,
      "db_id": "advertising_agencies",
      "question": "What are the ids, statuses, and details for all invoices?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids, statuses, and details for all invoices?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE agency_id = 1 AND client_details LIKE '%Details%' UNION SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices WHERE invoice_status = 'Paid' UNION SELECT payment_id ,  'Pending' ,  'No Details Available' FROM Payments EXCEPT SELECT meeting_id ,  'Pending' ,  'No Details Available' FROM Meetings WHERE purpose_of_meeting LIKE '%Details%' UNION SELECT staff_id ,  'Pending' ,  'No Details Available' FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE purpose_of_meeting LIKE '%Details%') UNION SELECT staff_id ,  'Pending' ,  'No Details Available' FROM Staff WHERE staff_details LIKE '%"
  },
  {
    "id": 2000,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2000,
      "db_id": "advertising_agencies",
      "question": "Show all client ids and the number of invoices for each client."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all client ids and the number of invoices for each client.[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.client_id = Invoices.client_id GROUP BY Clients.staff_id HAVING count(*)  >  3'\n        ;"
  },
  {
    "id": 2001,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2001,
      "db_id": "advertising_agencies",
      "question": "How many invoices are there for each client id?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many invoices are there for each client id?[SQL]\\nSELECT Clients.staff_id FROM Payments WHERE invoice_id IN ( SELECT invoice_id FROM Invoices WHERE client_id  =  1 ) UNION SELECT  Client_id FROM Clients GROUP BY Client_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2002,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2002,
      "db_id": "advertising_agencies",
      "question": "List the client id and detail with most number of invoices."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the client id and detail with most number of invoices.[SQL]\\nSELECT Clients.staff_id FROM Payments WHERE Payments.invoice_id  =  Clients.client_id GROUP BY Clients.sic_code ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2003,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2003,
      "db_id": "advertising_agencies",
      "question": "What are the client id and details for the client with the most invoices?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the client id and details for the client with the most invoices?[SQL]\\nSELECT Clients.staff_id FROM Payments WHERE Payments.invoice_id  =  Clients.client_id GROUP BY Clients.client_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2004,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2004,
      "db_id": "advertising_agencies",
      "question": "What are client ids for clients with at least 2 invoices."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are client ids for clients with at least 2 invoices.[SQL]\\nSELECT Clients.staff_id FROM Payments WHERE Payments.invoice_id IN ( SELECT Invoice.invoice_id FROM Invoice GROUP BY Invoice.client_id HAVING count(*)  >=  2 ) ORDER BY Clients.sic_code ASC'\n        ;"
  },
  {
    "id": 2005,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2005,
      "db_id": "advertising_agencies",
      "question": "Return the client ids for clients with two or more invoices?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the client ids for clients with two or more invoices?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.client_id IN ( SELECT T1.client_id FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.client_id HAVING count(*)  >  2 )'\n        ;"
  },
  {
    "id": 2006,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2006,
      "db_id": "advertising_agencies",
      "question": "Show all invoice status codes and the number of invoices with each status."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all invoice status codes and the number of invoices with each status.[SQL]\\nSELECT Payments.staff_id FROM Payments WHERE invoice_status  =  'Paid' GROUP BY Payment.invoice_status ORDER BY count(*) DESC LIMIT 1' <MID>\n    LIMIT 1;'''\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "
  },
  {
    "id": 2007,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2007,
      "db_id": "advertising_agencies",
      "question": "How many invoices are there for each status code?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many invoices are there for each status code?[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice_status  =  'Paid' GROUP BY Invoice_status ORDER BY count(*) DESC LIMIT 1' <MID>\n    GROUP BY Invoices.staff_id;"
  },
  {
    "id": 2008,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2008,
      "db_id": "advertising_agencies",
      "question": "What is the invoice status code with most number of invoices."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the invoice status code with most number of invoices.[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE invoice_status  =  'Paid' GROUP BY Invoice_status ORDER BY count(*) DESC LIMIT 1' <MID>\n    GROUP BY Invoices.staff_id;"
  },
  {
    "id": 2009,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2009,
      "db_id": "advertising_agencies",
      "question": "Return the invoice status that has the most invoices."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the invoice status that has the most invoices.[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice_status  =  'Paid' GROUP BY Invoice_status ORDER BY count(*) DESC LIMIT 1' <MID>\n    GROUP BY Invoices.staff_id;"
  },
  {
    "id": 2010,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2010,
      "db_id": "advertising_agencies",
      "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all invoice status codes and details and the corresponding client id and details and agency id and details.[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice_status  =  'Paid' UNION SELECT Clients.client_id ,  Clients.client_details ,  Clients.agency_id ,  Clients.agency_details FROM Clients WHERE Clients.sic_code  =  '1337' UNION SELECT Meetings.meeting_id ,  Meetings.purpose_of_meeting ,  Meetings.start_date_time ,  Meetings.end_date_time FROM Meetings WHERE Meetings.meeting_outcome  =  'Success' AND Meetings.billable_yn  =  'Y' UNION SELECT Payments.payment_id ,  Payments.payment_details FROM Payments WHERE Payments.invoice_id  =  133"
  },
  {
    "id": 2011,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2011,
      "db_id": "advertising_agencies",
      "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice_status  =  'Paid' AND Invoice_details LIKE '%Client%Details%' GROUP BY Invoice_details ORDER BY count(*) DESC LIMIT 10' <MID>_id` ) REFERENCES `Agencies`(`agency_id` )'\n\n    ORDER BY meeting_id;"
  },
  {
    "id": 2012,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2012,
      "db_id": "advertising_agencies",
      "question": "List all meeting type codes and details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all meeting type codes and details.[SQL]\\nSELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Client' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Staff' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Admin' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Other' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Director' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Consultant' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Senior Consultant' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Partner' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Detached' UNION SELECT meeting_id  FROM Meetings"
  },
  {
    "id": 2013,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2013,
      "db_id": "advertising_agencies",
      "question": "What are all meeting types and other details?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all meeting types and other details?[SQL]\\nSELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Other' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Regular' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Special' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Emergency' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'Urgent' UNION SELECT meeting_id  FROM Meetings WHERE meeting_type  =  'None' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'Client Meeting' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'Staff Meeting' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'Sales Call'"
  },
  {
    "id": 2014,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2014,
      "db_id": "advertising_agencies",
      "question": "Show all meeting outcomes and purposes."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all meeting outcomes and purposes.[SQL]\\nSELECT meeting_id  FROM Meetings WHERE meeting_outcome  =  'Success' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'To discuss the company's financial status' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'To discuss the company's new product' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'To discuss the company's latest business plan' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'To discuss the company's latest advertisement' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'To discuss the company's latest marketing strategy' UNION SELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'To discuss the company"
  },
  {
    "id": 2015,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2015,
      "db_id": "advertising_agencies",
      "question": "What are all meeting outcomes and purposes?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all meeting outcomes and purposes?[SQL]\\nSELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Success' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Failure' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting  =  'To discuss' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting  =  'To plan' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting  =  'To execute' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting  =  'To review' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting  =  'To close' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting  =  'To train' UNION SELECT meeting_id FROM Meetings WHERE purpose_of_meeting  =  'To evaluate'"
  },
  {
    "id": 2016,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2016,
      "db_id": "advertising_agencies",
      "question": "Show all payment ids and details for invoices whose status is 'Working'."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all payment ids and details for invoices whose status is 'Working'.[SQL]\\nSELECT Payments.staff_id FROM Payments WHERE Invoices.invoice_status = 'Working' <MID>_id` ) REFERENCES `Agencies`(`agency_id` )',\n           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2017,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2017,
      "db_id": "advertising_agencies",
      "question": "What are all payment ids and payment details for invoices with status Working?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all payment ids and payment details for invoices with status Working?[SQL]\\nSELECT Payments.staff_id FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment_details FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment_details FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment_details FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment_details FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment_details FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment_details FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment_details FROM Payments WHERE Payments.invoice_status  =  'Working' UNION SELECT Payment"
  },
  {
    "id": 2018,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2018,
      "db_id": "advertising_agencies",
      "question": "Show all invoice ids and statuses without a payment."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all invoice ids and statuses without a payment.[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice_status  =  'Unpaid' EXCEPT SELECT Payment.invoice_id FROM Payment'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2019,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2019,
      "db_id": "advertising_agencies",
      "question": "What are the invoice ids and statuses for invoices without a payment?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the invoice ids and statuses for invoices without a payment?[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice_status  =  'Unpaid' EXCEPT SELECT Payment.invoice_id FROM Payment'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2020,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2020,
      "db_id": "advertising_agencies",
      "question": "How many payments do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many payments do we have?[SQL]\\nSELECT Meetings.meeting_id FROM Meetings WHERE purpose_of_meeting = 'Client Meeting' AND meeting_outcome = 'Success' AND start_date_time > '2017-09-13 04:12:26' AND end_date_time < '2017-09-27 12:22:31' GROUP BY Meetings.meeting_id ORDER BY count(*) DESC LIMIT 1' SELECT count(*) FROM Payments' SELECT count(*) FROM Meetings WHERE purpose_of_meeting  =  'Client Meeting' AND meeting_outcome = 'Success' AND start_date_time > '2017-09-13 04:12:26' AND end_date_time < '2017-09-27 12:2"
  },
  {
    "id": 2021,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2021,
      "db_id": "advertising_agencies",
      "question": "Count the number of payments."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of payments.[SQL]\\nSELECT Meetings.meeting_id FROM Meetings WHERE purpose_of_meeting  =  'Client Meeting' AND billable_yn  =  'Y' GROUP BY Meetings.meeting_id ORDER BY count(*) DESC LIMIT 1'\n    ;"
  },
  {
    "id": 2022,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2022,
      "db_id": "advertising_agencies",
      "question": "List all payment ids and its corresponding invoice ids and details."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all payment ids and its corresponding invoice ids and details.[SQL]\\nSELECT Payments.staff_id  FROM Payments WHERE Payment_id = 1234'\n        ;"
  },
  {
    "id": 2023,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2023,
      "db_id": "advertising_agencies",
      "question": "What are the payment ids, invoice ids, and payment details for all payments?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the payment ids, invoice ids, and payment details for all payments?[SQL]\\nSELECT Payments.staff_id FROM Payments WHERE Payment_details LIKE '%cash%' UNION SELECT invoice_id ,  payment_details FROM Payments WHERE Payment_details LIKE '%check%' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%credit card%' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%debit card%' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%online payment' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%self service' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%store credit' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%traveler check' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%visa' UNION SELECT invoice_id FROM Payments WHERE Payment_details LIKE '%"
  },
  {
    "id": 2024,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2024,
      "db_id": "advertising_agencies",
      "question": "Show all the different invoice ids and statuses of the payments"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all the different invoice ids and statuses of the payments[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice.invoice_status  =  'Paid' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status  =  'Unpaid' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status  =  'Refunded' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status  =  'Partially Refunded' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status  =  'Void' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status  =  'Returned' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status  = "
  },
  {
    "id": 2025,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2025,
      "db_id": "advertising_agencies",
      "question": "What are the distinct invoice ids and statuses for all payments?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct invoice ids and statuses for all payments?[SQL]\\nSELECT Invoices.staff_id FROM Invoices WHERE Invoice.invoice_status = 'Paid' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status = 'Unpaid' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status = 'Refunded' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status = 'Partially Refunded' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status = 'Past Due' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status = 'Void' UNION SELECT Invoice.invoice_id FROM Invoices WHERE Invoice.invoice_status = 'Cancelled' UNION SELECT Invoice.invoice_id"
  },
  {
    "id": 2026,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2026,
      "db_id": "advertising_agencies",
      "question": "Show all invoice ids and the number of payments for each invoice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all invoice ids and the number of payments for each invoice.[SQL]\\nSELECT Invoices.staff_id FROM Payments WHERE InvoiceID  =  StaffID GROUP BY InvoiceID ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2027,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2027,
      "db_id": "advertising_agencies",
      "question": "How many payments are there for each invoice?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many payments are there for each invoice?[SQL]\\nSELECT Invoices.staff_id  FROM Invoices WHERE Invoice_status  =  'Paid' GROUP BY Invoice_details ORDER BY count(*) DESC LIMIT 1' <MID>_id` ) REFERENCES `Agencies`(`agency_id` )',\n           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2028,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2028,
      "db_id": "advertising_agencies",
      "question": "What is the invoice id, status code, and details for the invoice with most number of payments."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the invoice id, status code, and details for the invoice with most number of payments.[SQL]\\nSELECT Invoices.staff_id FROM Payments WHERE Invoice_id  =  Invoice_id ORDER BY payment_id DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2029,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2029,
      "db_id": "advertising_agencies",
      "question": "Return the invoice ids, statuses, and details for invoices with the most payments?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the invoice ids, statuses, and details for invoices with the most payments?[SQL]\\nSELECT Invoices.staff_id FROM Payments WHERE Invoice_id IN ( SELECT Invoice_id FROM Payments GROUP BY Invoice_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices WHERE invoice_id IN ( SELECT Invoice_id FROM Payments GROUP BY Invoice_id ORDER BY count(*) DESC LIMIT 1 )'\n        ;"
  },
  {
    "id": 2030,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2030,
      "db_id": "advertising_agencies",
      "question": "How many staff do we have?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many staff do we have?[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id = 1 UNION SELECT staff_id FROM Staff WHERE agency_id = 2 UNION SELECT staff_id FROM Staff WHERE agency_id = 3 UNION SELECT staff_id FROM Staff WHERE agency_id = 4 UNION SELECT staff_id FROM Staff WHERE agency_id = 5 UNION SELECT staff_id FROM Staff WHERE agency_id = 6 UNION SELECT staff_id FROM Staff WHERE agency_id = 7 UNION SELECT staff_id FROM Staff WHERE agency_id = 8 UNION SELECT staff_id FROM Staff WHERE agency_id = 9 UNION SELECT staff_id FROM Staff WHERE agency_id = 10'\n   \n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2031,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2031,
      "db_id": "advertising_agencies",
      "question": "Count the number of staff."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of staff.[SQL]\\nSELECT staff_id FROM Staff;"
  },
  {
    "id": 2032,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2032,
      "db_id": "advertising_agencies",
      "question": "Show the agency ids and the number of staff in each agent?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the agency ids and the number of staff in each agent?[SQL]\\nSELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  1 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  2 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  3 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  4 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  5 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  6 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  7 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  8 UNION SELECT Staff.staff_id  FROM Staff WHERE Staff.agency_id  =  9 UNION SELECT Staff"
  },
  {
    "id": 2033,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2033,
      "db_id": "advertising_agencies",
      "question": "Return the agency ids and number of staff in each."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the agency ids and number of staff in each.[SQL]\\nSELECT Agencies.staff_id  FROM Staff_in_Meetings WHERE Staff_in_Meetings.staff_id IN ( SELECT agency_id FROM Agencies ) GROUP BY Staff_in_Meetings.staff_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2034,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2034,
      "db_id": "advertising_agencies",
      "question": "What is the agent id and details for the agency with most staff?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the agent id and details for the agency with most staff?[SQL]\\nSELECT staff_id FROM Staff WHERE agency_id  =  ( SELECT agency_id FROM Agencies GROUP BY agency_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT agency_id ,  details FROM Agencies WHERE agency_id  =  ( SELECT agency_id FROM Staff WHERE agency_id  =  ( SELECT agency_id FROM Agencies GROUP BY agency_id ORDER BY count(*) DESC LIMIT 1 ) )'\n   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2035,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2035,
      "db_id": "advertising_agencies",
      "question": "Return the id and detail for the agency with the most staff."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the id and detail for the agency with the most staff.[SQL]\\nSELECT Agencies.staff_id  FROM Staff WHERE Agency_id  =  Staff.agency_id GROUP BY Agency_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2036,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2036,
      "db_id": "advertising_agencies",
      "question": "Show meeting outcome codes and the number of meeting in each outcome."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show meeting outcome codes and the number of meeting in each outcome.[SQL]\\nSELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Positive' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Negative' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Neutral' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Null' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Unknown' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Prospective' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Planned' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Forecasted' UNION SELECT meeting_id FROM Meetings WHERE meeting_outcome  =  'Projected' UNION SELECT meeting_id FROM Meetings"
  },
  {
    "id": 2037,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2037,
      "db_id": "advertising_agencies",
      "question": "How many meetings had each meeting outcome?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many meetings had each meeting outcome?[SQL]\\nSELECT meeting_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2038,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2038,
      "db_id": "advertising_agencies",
      "question": "List the client ids and the number of meeting for each client."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the client ids and the number of meeting for each client.[SQL]\\nSELECT Meetings.staff_id FROM Meetings WHERE Meetings.client_id = 1 GROUP BY Meetings.staff_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2039,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2039,
      "db_id": "advertising_agencies",
      "question": "How many meetings are there for each client id?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many meetings are there for each client id?[SQL]\\nSELECT meeting_id  FROM Meetings WHERE purpose_of_meeting  =  'Client Meeting' GROUP BY client_id' <MID>_id` ) REFERENCES `Agencies`(`agency_id` )',\n           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2040,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2040,
      "db_id": "advertising_agencies",
      "question": "Show the meeting type codes and the number of meeting for each client."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the meeting type codes and the number of meeting for each client.[SQL]\\nSELECT Meetings.meeting_id  FROM Meetings WHERE purpose_of_meeting = 'Client Meeting' GROUP BY Meetings.client_id ORDER BY count(*) DESC LIMIT 1'\n    LIMIT 1' <MID>\n        ;"
  },
  {
    "id": 2041,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2041,
      "db_id": "advertising_agencies",
      "question": "How many meetings are there for each meeting type?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many meetings are there for each meeting type?[SQL]\\nSELECT meeting_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2042,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2042,
      "db_id": "advertising_agencies",
      "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[SQL]\\nSELECT Meetings.meeting_id  FROM Meetings WHERE Meetings.client_id IS NOT NULL'\n    LIMIT 10'\n    ;"
  },
  {
    "id": 2043,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2043,
      "db_id": "advertising_agencies",
      "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[SQL]\\nSELECT Meetings.meeting_id FROM Meetings WHERE Meetings.meeting_outcome  =  'Positive' AND Meetings.meeting_type  =  'Individual' UNION SELECT T1.meeting_id ,  T2.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id WHERE T1.meeting_outcome  =  'Negative' AND T1.meeting_type  =  'Group' ORDER BY T1.start_date_time DESC'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2044,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2044,
      "db_id": "advertising_agencies",
      "question": "Show the meeting ids and the number of staff in each meeting."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the meeting ids and the number of staff in each meeting.[SQL]\\nSELECT meeting_id \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2045,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2045,
      "db_id": "advertising_agencies",
      "question": "Count the number of staff in each meeting by meeting id."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of staff in each meeting by meeting id.[SQL]\\nSELECT meeting_id  FROM Staff_in_MeetingsGROUP BY meeting_idORDER BY meeting_id;"
  },
  {
    "id": 2046,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2046,
      "db_id": "advertising_agencies",
      "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[SQL]\\nSELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN ( SELECT meeting_id FROM Meetings GROUP BY meeting_id ORDER BY count(*) ASC LIMIT 1 ) GROUP BY staff_id ORDER BY count(*) DESC LIMIT 1'\n        ;"
  },
  {
    "id": 2047,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2047,
      "db_id": "advertising_agencies",
      "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the staff id of the staff who attended the least meetings but attended some meeting?[SQL]\\nSELECT staff_id FROM Staff_in_MeetingsGROUP BY staff_idORDER BY meeting_idLIMIT 1'\n        ;"
  },
  {
    "id": 2048,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2048,
      "db_id": "advertising_agencies",
      "question": "How many staff have attended a meeting?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many staff have attended a meeting?[SQL]\\nSELECT meeting_id FROM Staff_in_Meetings WHERE staff_id != 'null' GROUP BY meeting_id ORDER BY count(*) DESC LIMIT 1'\n    LIMIT 1' <MID>\n        ;"
  },
  {
    "id": 2049,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2049,
      "db_id": "advertising_agencies",
      "question": "Return the number of distinct staff who have attended a meeting?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the number of distinct staff who have attended a meeting?[SQL]\\nSELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN ( SELECT DISTINCT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING count(*)  >=  1 ) ORDER BY meeting_id ASC'\n        ;"
  },
  {
    "id": 2050,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2050,
      "db_id": "advertising_agencies",
      "question": "How many staff did not attend any meeting?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many staff did not attend any meeting?[SQL]\\nSELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Meetings)'\n        ;"
  },
  {
    "id": 2051,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2051,
      "db_id": "advertising_agencies",
      "question": "Count the number of staff who did not attend any meeting."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of staff who did not attend any meeting.[SQL]\\nSELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings) GROUP BY staff_id HAVING count(*)  =  0'\n        ;"
  },
  {
    "id": 2052,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2052,
      "db_id": "advertising_agencies",
      "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and details of the clients who have attended any meeting or have any invoice?[SQL]\\nSELECT Clients.staff_id FROM Clients WHERE Clients.sic_code  =  'Attended Meeting' OR Clients.sic_code  =  'Has Invoice' UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id WHERE T2.meeting_outcome  =  'Attended' UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2053,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2053,
      "db_id": "advertising_agencies",
      "question": "Return the ids and details of clients who have attended a meeting or had an invoice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids and details of clients who have attended a meeting or had an invoice.[SQL]\\nSELECT Clients.staff_id FROM Meetings WHERE meeting_outcome  =  'Attended' UNION SELECT client_id FROM Invoices WHERE invoice_status  =  'Paid' <MID>\n    GROUP BY staff_id;"
  },
  {
    "id": 2054,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2054,
      "db_id": "advertising_agencies",
      "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?[SQL]\\nSELECT staff_id FROM Staff_in_Meetings WHERE meeting_type  =  's' GROUP BY staff_id HAVING count(*)  >=  1 UNION SELECT agency_id ,  staff_details FROM Staff WHERE staff_details  =  's' <MID>_id` INTEGER NOT NULL,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 2055,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2055,
      "db_id": "advertising_agencies",
      "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[SQL]\\nSELECT staff_id FROM Staff WHERE staff_details LIKE '%s%' INTERSECT SELECT T1.staff_id FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.staff_id HAVING count(*)  >=  1' <MID>\n    GROUP BY staff_id;"
  },
  {
    "id": 2056,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2056,
      "db_id": "advertising_agencies",
      "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[SQL]\\nSELECT Clients.staff_id FROM Meetings WHERE purpose_of_meeting = 'Client Attended' GROUP BY Clients.sic_code HAVING count(*)  =  1 INTERSECT SELECT staff_id ,  sic_code ,  agency_id FROM Clients WHERE staff_id IN ( SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN ( SELECT meeting_id FROM Meetings WHERE purpose_of_meeting = 'Client Attended' ) )'\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2057,
      "db_id": "advertising_agencies",
      "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[SQL]\\nSELECT Clients.staff_id FROM Meetings WHERE meeting_outcome  =  'Positive' GROUP BY Clients.sic_code HAVING count(*)  =  1 INTERSECT SELECT client_id FROM Invoices WHERE invoice_status  =  'Paid' AND purpose_of_meeting  =  'Consultation' GROUP BY client_id HAVING count(*)  =  1'\n\n    ORDER BY staff_id;"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2058,
      "db_id": "advertising_agencies",
      "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail."
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the start time, end time of each meeting, and the corresponding client detail and staff detail.[SQL]\\nSELECT Meetings.staff_id FROM Meetings WHERE TYPE  =  'Private' UNION SELECT MIN(T1.start_date_time) ,  MAX(T1.end_date_time) ,  T2.client_details ,  T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff AS T3 ON T1.staff_id  =  T3.staff_id WHERE TYPE  =  'Public' GROUP BY T2.client_details ORDER BY MIN(T1.start_date_time) ASC' > meetings.sql'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": {
      "id": 2059,
      "db_id": "advertising_agencies",
      "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?"
    },
    "answer": "### Database Schema\\ n\\n['CREATE TABLE `Agencies` (\n`agency_id` INTEGER PRIMARY KEY,\n`agency_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Staff` (\n`staff_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`staff_details` VARCHAR(255) NOT NULL\n)\nCREATE TABLE `Clients` (\n`client_id` INTEGER PRIMARY KEY,\n`agency_id` INTEGER NOT NULL,\n`sic_code` VARCHAR(10) NOT NULL,\n`client_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`invoice_status` VARCHAR(10) NOT NULL,\n`invoice_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Meetings` (\n`meeting_id` INTEGER PRIMARY KEY,\n`client_id` INTEGER NOT NULL,\n`meeting_outcome` VARCHAR(10) NOT NULL,\n`meeting_type` VARCHAR(10) NOT NULL,\n`billable_yn` VARCHAR(1),\n`start_date_time` DATETIME,\n`end_date_time` DATETIME,\n`purpose_of_meeting` VARCHAR(255),\n`other_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` )\n)\nCREATE TABLE `Payments` (\n`payment_id` INTEGER NOT NULL ,\n`invoice_id` INTEGER NOT NULL,\n`payment_details` VARCHAR(255) NOT NULL,\nFOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` )\n)\nCREATE TABLE `Staff_in_Meetings` (\n`meeting_id` INTEGER NOT NULL,\n`staff_id` INTEGER NOT NULL,\nFOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),\nFOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[SQL]\\nSELECT Meetings.staff_id FROM Meetings WHERE meeting_type  =  'Client' UNION SELECT Clients.client_id FROM Clients WHERE sic_code  =  '68-999' UNION SELECT Invoices.invoice_id FROM Invoices WHERE invoice_status  =  'Paid' UNION SELECT Payments.payment_id FROM Payments WHERE payment_details  =  'Conference fees' UNION SELECT Staff.staff_id FROM Staff WHERE staff_details  =  'Senior Management' EXCEPT SELECT meeting_id FROM Staff_in_Meetings WHERE meeting_type  =  'Client' UNION SELECT T1.client_id FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id WHERE T2.invoice_status  =  '"
  }
]