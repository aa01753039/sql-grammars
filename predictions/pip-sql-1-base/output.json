[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "SELECT COUNT(T1.Club_ID_name__str__len__punctuation2479833650723663858376981108626999792501567063260418238036495167679823577618212"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.Events_number ) AS num FROM club_events_results164358609073148140696372313492921281165513627753166739905324670398985335833"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.Name FROM club_player_sales.player AS T , club_player_sales.Club AS T WHERE T1.club = T2.Club ORDER BY T2.Name LIMIT 1;"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "SELECT DISTINCT T2.Name FROM club.player AS T INNER JOIN club__events__number__groupingASG14306589371141943521ONTARGET_EVENTS__NAME__custID_005716047598832723387067157636888856020"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "SELECT DISTINCT T2.Name FROM club_player_managers_captains_tbl11345800679060000000_a2acd6c576b1d49_s2414525_table_as7_b36362b0613_w4039365_34481510_"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": "SELECT DISTINCT T2.Name FROM club_manager_captain_player__inversed__club_members__club_id_to_name_as_player_ids_names_as_manager_and_captain_AS_IDS__innerjoin_other_player_players_as_club_ids_as_IDs___WHERE_CLUB_ID__ref_INTEGER_IN_CLEARANCE_OF_NULL"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": "SELECT DISTINCT T2.Name FROM club_manufacturers.player AS T INNER JOIN (SELECT DISTINCT T1.club_name FROM club_manufacturers.player AS T WHERE T1.company = 'Nike') AS T  ON T1.Club_ID = T2.Club_ID ORDER BY T2.Name LIMIT 10000000000000000000"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "SELECT T1.name FROM club_manufacturers.dbo AS T INNER JOIN player.Club AS T  ON T1.club = T.Club_ID ORDER BY T2.name.startswithIgnoreCaseAndTrimNotWordSpaceAndSuffixesNameIsNikeForNowINLINE LIMIT 4500000000000000000000000000000"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "SELECT DISTINCT T2.Name FROM player1.player AS T INNER JOIN club1.club AS T  ON T1.Player_ID = T2.Club_ID ORDER BY Wins_count LIMIT 10000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "SELECT DISTINCT T2.Name FROM player1.player AS T INNER JOIN club1.club AS T  ON T1.Player_ID = T2.Club_ID ORDER BY COUNTIFTINETYTHATWINS_COUNT , T3.Count_events_number LIMIT 200000000000000000000000000000000000"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "SELECT T1.name FROM player_summary.player AS T INNER JOIN club_memberships.club_members AS T  ON T1.Player_ID = T2.Club_ID ORDER BY SUMTHATplayer.Wins_count LIMIT 1500000000000000000000000000000000000000000000"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "SELECT T1.Name FROM player_wins2017_08_36_aswinstriker11995940623649170450019166795WHERESTRSINCETITLESUBSETTITLESTGivenMoneyID12084273921209410689296261"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "SELECT T1.country FROM player_player_sales_money_earns_distinct_by_player_ID.T1 AS T , player_player_sales_money_EARNS_DISTINCT_BY_player_ID_AS_PRIMARY_KEY.T AS T WHERE T2 = 1200000 ORDER BY COUNT_DISTINCT_VALUES_OF_DESCENDING_PERCENTI"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "SELECT T1.Country FROM player_data.player AS T INNER JOIN club_id_people.club AS T  ON T1.Player_ID = T.Club_ID GROUP BY T1.Country ORDER BY COUNT.total_revenue__rk2__qs16872034274953001510__pk267377663 LIMIT 2000000"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "SELECT DISTINCT T1.Country FROM (SELECT DISTINCT T2.country , COUNT(T2.Earnings_count ) AS num FROM player_winning_matches110753839640482436386569746227420339739958614997839434231623"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "SELECT DISTINCT T1.Country FROM (SELECT DISTINCT T1.name , SUM(T3.Wins_count ) AS total FROM player_winning_player20011346817950421__T228326751321745630_Winner1354904395083424111_Winner"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "SELECT DISTINCT T1.Name FROM playerAS.player AS T , clubb.Club AS T WHERE T2.name = 'Mason' ORDER BY T1.country , T1.Player_ID LIMIT 3000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "SELECT DISTINCT T2.Name FROM player123456789T10103891038610203858858710031105705505561353789460435811723904289474295034533555"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": "SELECT DISTINCT T1.Name FROM club_player_wins_table206478519023268000000SASASMGTHKTGQNWU3K26NASMGTHKTGQNWU3K26NASMGTHKTGQNWU3K27NGHJA7LBG5C419"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "SELECT DISTINCT T2.name FROM club_player_matches_by_players1938704596239600000_to_40700055303712400000_as2716174736165461874669944000198212525"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "SELECT DISTINCT T2.Name FROM player190734846491982639000000000023175ASP_CLOUDERS.CLUB AS t INNER JOIN club22167513115723831750000004877313568992300"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "SELECT DISTINCT T2.Name FROM player_club_manager_transfer20146371581932960000022346580188203703436193505786294736802455277154649010467035821"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": "SELECT DISTINCT T2.Name FROM player1.club AS T INNER JOIN club2.club AS T  ON T1.Club_ID = T2.Club_ID ORDER BY AVGVALS2DEGREE22140.Wins_count LIMIT 1;"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "SELECT DISTINCT T1.Name FROM club_player_attributes_v2018_2019.club AS T , T1.Club_ID ORDER BY SUMIFNTHEWERB00357015.name.AVERAGE , T1.club_id , T2.name LIMIT 15 OFFSET 2004697850648000000"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": "SELECT DISTINCT T2.Manufacturer , COUNT(T1.Club_ID ) FROM club_info_results_table_2016_09222723758313842498__player_id_t2.LEFT AS T LEFT JOIN manufacturer_club_manager_table_2016_092239393011821243"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "SELECT DISTINCT T2.Name FROM club_player_table.player AS T INNER JOIN manufacturer_table.manufacturer AS T  ON T1.Player_ID = T2.Manufacturer_ID GROUP BY T2.name ORDER BY T2.manufacturer_name LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": "SELECT DISTINCT T2.Manufacturer FROM club_names.player AS t INNER JOIN manufacturers.name AS t  ON t.club_id = t1.club_ID GROUP BY t2.manufacturer ORDER BY COUNTallsortsfirstORDER LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "SELECT T1.name FROM club_manufacturers.manufacturers AS T ORDER BY COUNT_MANIFESTS.NAME LIMIT 10000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": "SELECT DISTINCT T2.Manufacturer FROM player_data.player AS t INNER JOIN clubs_by_manufacturer_and_country.club AS t  ON t1.Player_ID = t2.Club_ID ORDER BY COUNTDISTINCTT2.Manufacturer LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "SELECT DISTINCT T2.Manufacturer FROM club_details.player AS T INNER JOIN club_details.club AS T  ON T1.Club_ID = T2.Club_ID GROUP BY T1.Manufacturer ORDER BY COUNTWITHIN LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "SELECT DISTINCT T2.Country FROM (SELECT DISTINCT T1.country , COUNT(T1.player_id ) AS num FROM club.player AS T INNER JOIN club_player2064383597851156618163_player12887423839788499844977625848484900"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": "SELECT T1.Country FROM club_player_grouping2015.players AS T , T1.country AS T WHERE T1.club = 'club' GROUP BY T1.country ORDER BY COUNT_by_club_country1 LIMIT 200000000000000000000000000000000000000000000"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "SELECT T1.name FROM club_player_groups.player AS T INNER JOIN events_group.events AS T  ON T.Player_ID = T2.Player_ID GROUP BY T2.Club_ID ORDER BY COUNTIFSANDNOTFIELDSSET.VALUE LIMIT 1;"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "SELECT T1.Name FROM club_player_info_data2014AST__3365_LEFTJOINclub_player_info_data2019_ALLMATCHBYID__136782541___table_name_2628706408843000611448_ONASPW1339708232013"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "SELECT DISTINCT T2.Country FROM player__salary__earnings_prices18_503792612966163080000234063669595WHEREplayer__name__likeT2.NickName ORDER BY T2.Name LIMIT 25000000000000000000"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "SELECT DISTINCT T2.Country FROM player169187573714808182016810101241241720093906793492253905400364861310833544267898101405369132"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "SELECT COUNT(DISTINCT ), DISTINCT  FROM playerGROUPBYcountryHEREFORERelativeNameINCLUDE_123456789064590ULLWHERECountryIDInSORTORDERWHILEGETdistinctCOUNTFROMplayerGROUPBYcountryHEREFORERelativeNameINCLUDE_123456789064590WHERECountryIDInSORTORDERWHILEGET"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "SELECT COUNT(DISTINCT ), T2.Country FROM (SELECT DISTINCT T1.country FROM player__manufacturer__sponsor__player_id__club__name__custid__player_name__events_number__events_grouped_by_club_ID_grouped_by_names__all_matches__ALL_MATCHES_TOTALDISTINCTs__player_names__country__all_matches__player"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "SELECT DISTINCT T1.Earnings FROM player_matches20218954706093102000000_player186426025632422913125318920359816330826844637877600867886862"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "SELECT DISTINCT T1.Earnings FROM player_country_player_records2009__357964846660624874095_289969941960118787480919850334961487397049335262368355"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": "SELECT DISTINCT T1.customer_first_name , T1.customer_middle_initial FROM Customers.customer_payment_methods AS T INNER JOIN Orders.order_items ON T1.customer_id = ORders.order_item_id GROUP BY T1.customer_id ORDER BY COUNTOFSUBSETINGTOTALSumsubstitutingSumsubstitutedSUBSTIT"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "SELECT T1.first_name , T2.last_name FROM Customers1278095943161300000002TASGU659377968511C46211017WHERE123295834309103671874972216"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "SELECT T1.order_item_id , T2.product_id FROM Order_ItemsT34078689958393000000TAS__PURCHASE_ITEM_LIGHTTING_PICTURES_FINEST_BRAILLE_DESIGN_COLOR_THIANS_NORREWITTEN171"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "SELECT COUNT(T1.product_id ), T2.invoice_number , T2.customer_id FROM Orders_items_details__products_order_items_listing_view_with_statuses_and_ids_2019_1058731506197984100886394834277810667512"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "SELECT DISTINCT T2.date_order_placed FROM Orders_details_sales.ORDER AS T INNER JOIN order_items_details_sales.order_item AS T  ON T1.order_id = T2.order_item_id ORDER BY T1.date_order_placed LIMIT 1000000000000000000000000000"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "SELECT strftimeleft.date_order_placed , strftimeleft.date_order_completed FROM Orders__invoice_sequence__order_items_list_tbl_GROUPBYdate__ORDER_ITEM_ID__time__LEFTWHEREdate__date_order_placed__LIKEdate__dayOFWEEK__TIMEINSECOND_STORED.order_id ORDER BY strftimeleft.date_order"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": "SELECT T2.first_name , T2.middle_initial , T2.last_name FROM Customers.customer_payments AS T INNER JOIN Orders.order ON T1.customer_id = Orders.order_id GROUP BY T2.first_name , T2.middle_initial , T2.last_name ORDER BY COUNT  LIMIT 100000000000000000000"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "SELECT DISTINCT T1.first_name , T2.last_name FROM Customers_Invoices.customer AS T INNER JOIN Orders.order_items AS T  ON T1.customer_id = T2.order_id GROUP BY T1.first_name , T2.last_name ORDER BY COUNTIFSNULLTOSTrieveNameFirstAndLastNameFROMOrderItemsWHEREOrderIDNOTINCEREPORT LIMIT "
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "SELECT T1.product_name , T2.price , T3.color FROM Orders_Invoices_Billable_Order_Items_T201934796708323000168__T2019_0979592772033875173306774401070755"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "SELECT T1.product_name FROM Orders_items_customers_details12594807330616680000024378536198202923_ASINA481847126574500005156445199480108345"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "SELECT T2.order_item_id FROM Orders_Items_tbl_as_obj_i304815679793200000020430038602766_table_name_1297500897400300721579387179387826602010"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "SELECT T1.order_item_id FROM Order_Items_listing_and_detail_objectives20162398374353341340_980313_0712_96216164_6319_ALL_ORDERS_INSIDE_ITEMS.order_items INNER JOIN product_details2016239837"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "SELECT DISTINCT T2.product_name , T1.product_price , COUNT(T3.invoice_number ) FROM Orders_items_by_order_id_customer_first_name_middle_initials_login_name_telephone_number_address_line_1_town_city_county_country_countrycode_gender_code_customer_second_initial_lower_initial_email_address_login_name_"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "SELECT T1.product_name , T2.price FROM Customers_orders_itemsT1.products AS T INNER JOIN order_items_t1.order_item AS T  ON T1.customer_id = T2.order_id ORDER BY T1.order_item_status_code LIMIT 10000000100011000000000000000000"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "SELECT DISTINCT T2.order_item_id FROM Orders_items102978543316961000000ASTZ86KXWJQFU2MV6LUS12832818791137410000326597814877591939103520"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "SELECT T2.order_item_status_code FROM Orders_items_detail_listingT114835690276000000020L01119005T16D38338467M3055C738205P1844S1271A881806L023280"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "SELECT DISTINCT T2.payment_method_code FROM Invoices.order AS T INNER JOIN Customers.customer_payments AS T  ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name , T2.customer_middle_initial , T2.customer_last_name LIMIT 100000000000000000000000"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "SELECT DISTINCT T2.payment_method_code FROM Customer_Payment_Methods_v1.Customer_Payment_Methods AS T INNER JOIN Orders_items_v1.Invoice ON T1.customer_id = T2.order_id ORDER BY T2.invoice_date LIMIT 10000000000000000000000000000000"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "SELECT DISTINCT T1.gender , SUM(T2.product_price ) FROM Customers_by_Product_Category__Inventory_Price_Levels_By_Product_Code__Product__grouping_by_customer_first_name__user_middle_initial_last_name__product_description_groups1_as_grouped__product_groupings1_as_grouped1_as_grouped2_as_grouped3"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "SELECT COUNT(T2.product_id__G13560994486201__customer_id__cust_first_name__cust_middle_initial__cust_last_name__email_address__phone_number__address_line_1__town_city__COUNTA_INVENTORY.gender_code__23915117867310__customer_id__"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "SELECT T1.customer_first_name , SUM(T2.invoice_number_by_gender__gvk.gender_code__to_s__str__list__narrowed_to_first_letter_of_word__value_to_string__first_letter_and_space__split_first_letter_and_num__first_letters_with_spaces_3000__substring_last_5000"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "SELECT T1.gender_code , SUM(CASE ) AS total FROM Customers_by_Gender__PercentageTotals_AST20131175996538_WITHIN_ORDERS_BY_EMAIL_ADDRESS_AND_PROMOTIONAL_REQUESTS_FROM_COMPANY_TABLES2012147616404_WHERE_TOTAL"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": "SELECT DISTINCT T2.first_name , T2.middle_initial , T1.last_name FROM Customers.customer AS T  INNER JOIN Orders.order ON T2.customer_id = ORders.order_id GROUP BY T3.first_name , T3.middle_initial , T2.last_name ORDER BY strftimeofdateoforder.last_status LIMIT 10000000000"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "SELECT DISTINCT T1.first_name , T2.middle_initial FROM Customers_Invoices_CustomersT1.customer AS T INNER JOIN Customers_Payment_Methods_T1.customer AS T  ON T.customer_id = T1.customer_id ORDER BY T1.last_name , T1.first_name , T2.middle_initial LIMIT 400000000000"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "SELECT DISTINCT T1.invoice_status_code FROM Orders_items_subscriptions_details2019113786549042170561292308598722261132953117786250964047827477583826820163"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "SELECT T2.order_item_status_code , T3.order_item_date FROM Order_Items_details_lines_v2410698559647579872001_order_ITEM_STATUS_CODES_ALL.as_detail AS D ORDER BY T2.order_item_status_code , T3.order_item_date LIMIT 1000000"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": "SELECT DISTINCT T1.product_name , strftime_date_from_now_FORMAT_STR FROM Orders_items_purchase_details_v234006459723803766_3322979150031_i3639848849726_c60686104350031"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "SELECT DISTINCT T1.product_name FROM Orders_items_shippings__products_as_lines_as_ids_as_order_items_as_shipped_sales_purchase_items_as_lines_as_id_order_item_shipments_ANDWHERETARGETERVISTASIZEFROMDISTINCTTARGETERVISTASIZEWHERETARGETERVISISTAS"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "SELECT DISTINCT T2.order_item_status_code FROM Orders_items_purchase_order_details_customers_as_purchased_by_customer_as_pending_payment_methods_as_describes_each_order_item_status_code__invoice_number___20130879519963387__order_items_as_shipped_and"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "SELECT T1.order_item_status_code FROM Order_Items.order_item AS T INNER JOIN Orders.order_id ON T.order_item_id = Orders.order_id ORDER BY T2.order_tracking_numbers LIMIT 100000000000000000000000000000000000"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "SELECT DISTINCT T1.product_name , T2.color FROM Orders_Items_CUSTOMER_ORDERS_ITEMS_SHIPPED_AS_DESCENDANTS_T349865496570118983_A085D52E358D42B9_2552_F26C069167140"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "SELECT DISTINCT T1.product_name , T2.color FROM Orders_Invoices_Payment_Methodssales_ProductsTblASGINVOICEORDERS_STATUS_COUNTRY_CountryTblASFKT096573382754217700000D2614A214E6B222D05274250"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": "SELECT T1.product_name , T2.product_price , T3.product_description FROM Customers.customer_payment_methods AS T INNER JOIN Orders.order_items AS T  ON T.customer_id = C1.customer_id ORDER BY T.order_item_status_code LIMIT 0 OFFSET 1800000003474620000000000"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "SELECT T1.product_name , T2.price FROM Products_Customers_invoices_orders_payments_received_invoice_details_by_gender_code__customer_first_name__last_name_lower_CASETEXT_TO_LOWERCASETIMILY_TEXTTUPLE__customer_id_table_as_model__customer_id_as_first_name__email_address_as_second_"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "SELECT T2.invoice_status FROM Orders_Invoice_Details_Order_items_Shipment_Statuses_To_Customer_IDs_WITH_SUMTHISWHEREASDUNGUITAYTHERMOMETRICSINVENTORYSHIPPEDLIMITATINGHYPERREALISTICINVOICESECUREDWHEREABOARDACCEPTABLETHEREUNSHOULDERSTAND"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "SELECT T1.invoice_status FROM Orders_Invoices_Summary__Invoices__Invoice_Items_Listing_Summary__Order_Items_Listing__Listings__Invoice_Status_Code_Summary_Titles_as_Listings_SUMMARY__Pending_Orders__orders_WHERE_order_NOT_INVOLVED_WITH_PAYMENT_METHODS_WHERE_in"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "SELECT T1.total_cost FROM Orders_items_lines_bill_amounts_20171003T1458968WHEREORDERID__INS_OF__T23883502AASG041123_984975684840826370331951880436556"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "SELECT T2.order_item_id , strftimeLEFTDATE , SUM(T3.payment_method_code.price_in_usd__usd__cust_order__total_amount__currency_code__currency_format__unit_of_measurement__percentage1500290046788966179367559383479864822"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "SELECT COUNT(customer_id ) FROM Orders__Customer_Payment_Methods_Invoices_byOrder__InvoiceNumber__order_items__order_item_status_code__Order_Item__order_items__order_items_to_credit_as_payment_method_code__customer_first_name__customer_middle_initial__customer_last_name__login_name__login_password__phone_number__address_line_"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "SELECT COUNT(T1.customer_id ) FROM Customers.customer_payments AS T INNER JOIN Orders_items_detail_records_v2013101849436799158592__records_v201310184866969619895513587_INVOICE_RECORDS_ASKT"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "SELECT COUNT(T1.order_item_id ) FROM Order_Items_model.products AS T INNER JOIN Orders_models.orders AS T  ON T.product_id = T1.product_id GROUP BY T1.order_item_name ORDER BY COUNT_OF_ORDER_ITEMS_RELATED_TO_T2 LIMIT 1000000000000000000000"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.order_item_status_code ) AS total FROM Order_Items__items_listing_as_items_result__invoice_numbering_order_item_status_codes__orders_where_invoice_date__customer_first_name_last_name_email_address_password_creditcard_customer_id_object__customer_id_table_as_columns_listing"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "SELECT COUNT(T1.payment_method_code ) FROM Customer_Payment_Methods__restaurant_sales__Order_Items__type2_customer_first_name_last_name__T1.payment_method AS T INNER JOIN Invoices__restaurant_sales__Customer_IDT389760_T21104243__currency_code_t25_11032"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "SELECT COUNT(T1.payment_method_code ) FROM Customers_Payment_Methods.customer AS T , Customer_Payment_Methods.customer_first_name AS m , Customer_Payment_Methods.customer_middle_initial AS T , customer_payments.customer_id AS C ORDER BY T2.phone_number , T1.customer_last_name LIMIT 30 OFFSET 5000000000"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "SELECT DISTINCT T3.login_name FROM Customers.customer_first_name AS T  INNER JOIN orders.order_item AS T  ON T.customer_id = T3.customer_id ORDER BY T.order_item_status_code , T1.phone_number , strftimeLEFTTOSHAREASPERSONS  ASC\n            LIMIT 15045678794240"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "SELECT DISTINCT T3.login_name FROM Customers.customer_first_name AS T , Customers.customer_middle_initial AS T , Customers.customer_last_name AS T , Customers.email_address AS T INNER JOIN Invoices.invoice_number AS T  ON T1.customer_id = T2.customer_id ORDER BY strftime__str_ltc_format.timezone_to_"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "SELECT DISTINCT T1.product_name FROM Orders_items_listings_records_products_info_20131029T16425748ASSEMBLY21239595ASSET0188594ASSET03971686ASSET89955586T287336730ASSET2203"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "SELECT DISTINCT T1.product_name FROM Products__inventory_status_history.Product AS T INNER JOIN Order_Items__items_details.T AS T  ON T.product_id = T1.order_item_id ORDER BY t.product_description.contains_words , t.product_name LIMIT 1000000000000000000000000000"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "SELECT DISTINCT T1.product_price FROM Orders_items_total321950748316168300000WHERETOTAL_NUMERIC_POSITIVE_EXCEPT1974221515551527960000WITHINTHEMILKINBIGNUMERICS.PRODUCT_SIZE ORDER BY T1"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "SELECT DISTINCT T1.price , T2.size FROM Orders_Invoice_Data__RANGE_SUMTITLE_TEXT__INVOICE_DATA__RANGE_MEANINGS_TEXT_INVOICE_STARTERDARGENTIERENCE0743597486313421577827699220714169112"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), NULL FROM CustomersWHEREcustomer_last_name.not_sold INNER JOIN Order_Items__outstanding_subscriptions___invoices__payment_method_codes_of_orders2013__invoice_status201505649780703577687349000395316152"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "SELECT COUNT(T1.product_id ) FROM Orders_items_tblASTWHERETITLE__text_14253789062670690580__TEXT__NOT_FOUND__inoremovement_no_215708197986001923898__TEXT__NOT_FOUND__inoremovement_no_215"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "SELECT COUNT(T1.customer_id_201837476896216233512_201837220425436412_2018230141440543117_2018301148720727492_201831031"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "SELECT COUNT(T1.customer_id_cust2key.value__00567492820313630000010060582146301966__p3678464942579783600201675304177220867833212"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "SELECT T2.order_item_status_code , T3.date_order_placed FROM Orders_items_records_v10.ORDER_ITEM AS T , Customer_Orders_records_v10.ORDER AS T INNER JOIN order_items_records_v10.ORDER_STATUS AS T  ON T2.order_id = T1.order_id ORDER BY T2.order_item_status_"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "SELECT T2.order_item_status_code , T3.order_item_date FROM Orders_items_all_orders_placed_by_customer_id_and_invoice_number_as_XXXXXXXT1A9WASMZ0X4L5J108G4A5C2865KY2EHG72M1AQ3F2W6M6W7D19"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "SELECT DISTINCT T1.address_line_1 , T2.town FROM Customers_addresses.address AS T INNER JOIN customers_states.state AS T  ON T1.customer_id = T2.customer_id ORDER BY T2.country LIMIT 30000000000000000000000000000000000000000"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "SELECT DISTINCT T2.address_line1 , T3.town_city , T4.county FROM Customers.customer_payments AS T  INNER JOIN Orders.order AS T  ON T.customer_id = T1.customer_id ORDER BY T1.customer_country LIMIT 50000000000000000000000000000000"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": "SELECT T2.first_name , T1.product_name FROM Orders.invoice AS T INNER JOIN Customers.customer_payments_method AS T  ON T1.customer_id = T2.customer_id ORDER BY T1.invoice_number LIMIT 100000001876945532347067277616529233141"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": "SELECT DISTINCT T1.first_name FROM Customers.customer AS T ORDER BY T2.last_name , T1.first_name LIMIT 10000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "SELECT COUNT(T1.order_item_id ) FROM Order_Items_Tracker_Stub.order_items AS T INNER JOIN Orders_Items_Stub.Orders AS T  ON T.order_item_id = T.order_item_id ORDER BY T.order_item_status_code LIMIT 1000000000000000000000000000"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "SELECT COUNT(T1.product_id ) FROM Orders_items_shippings__products_as_billable_items_as_ordered_by_customer_id_foreign_KEY_REFERENCES_customers.customer_order_item_ids AS T ORDER BY order_item_status_code LIMIT 100000000000000000000000000"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "SELECT CASTA.price FROM Orders_invoices.orders AS T ORDER BY invoice_date LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "SELECT SUM(SUMIFS.value__long_column__026103053803931400000__product_price__order_items__first_name__customer_id__last_name__invoice_number__invoice_status_code__payment_method_code__phone_number__address_line_1__town_city__country__customer_id__login_name__login_password"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "SELECT CASTAVG FROM OrdersWHEREinvoice_number.product_name  INNER JOIN Customer_Payment_Methods2016238945382087560013ONorder_item_id.product_id AS T \n        AS T  ON t.order_item_id.product_id = OrderItems.product_id GROUP BY CASTAVG ORDER BY SUM_price LIMIT "
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "SELECT AVG(T2.price_per_item__gte00485176229343800000__to_46143596270235786988696980560264983833465144814509823970266266"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "SELECT DISTINCT T2.town , T3.city , T2.county FROM Customers_payments_methods_customer_details1980645431475162961_159052607816571019_n0023379147781721481_WHERE_ORDER_ITEM_STATUS"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "SELECT DISTINCT T2.email_address , T3.city , T2.country FROM Orders_items_customers_as_idsT108642568959737960000_s_T111084596987480000_c_T28630847626"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": "SELECT strftimeutcnow FROM Orders__Order_Items__Customer_Payment_Methods_2WHEREpayment_method__code__counts__order_id__invoice_date__customer_first_name__middle_initial__login_name__login_password__phone_number__address_line_1__town_city__country__payment_method__status_code__first_name__last_name__gender_code__customer_id__"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "SELECT DISTINCT T1.date_order_placed FROM Orders_records.ORDER_ITEM AS T INNER JOIN ORDER_Items_records.ORDER_ITEM AS T  ON T1.order_item_id = T2.ORDER_ITEM_ID ORDER BY T3.order_item_status_code LIMIT 15000000000000000000000"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "SELECT COUNT(T1.order_item_status_code_desc__c2.order_status_code_desc__c2005_0638754289982176300161__grouped_desc__desc__too_short_group_name__group_name__longer_group_name__group_name___label_name__longer_group_name__group_"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "SELECT T1.order_item_status_code FROM Orders_items_records.ORDER_ITEM AS T ORDER BY T2.order_item_status_code LIMIT 100000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": "SELECT product_id FROM ProductsWHEREproductpriceLessThan3_1407665900028000000000LITHUARO_FROM_BESIGMARINABYTOBAGDALARULIVESITICKETORDERORSOMETHINGSASAZOOPIDANDDESCRIPTION38675790014223"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "SELECT product_id FROM OrdersWHEREorder_status_code__longitude__degreeBETWEEN3GROUPBYproduct_nameORDERBYorder_item_description.desc ORDER BY product_name , product_price LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "SELECT DISTINCT T1.invoice_date , T3.order_id FROM Invoices_listing_table.ORDER AS T , Orders_listing_table.Invoice AS T INNER JOIN Customers_payment_methods_tbl.customer_payment_method_code AS C  ON T1.customer_id = C.customer_id ORDER BY CASE \n            LIMIT 2019071805"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "SELECT DISTINCT T1.invoice_number , T1.invoice_date , T2.customer_id FROM Invoices_lines_items_shipment_items_customers_orders_payment_methods_order_line_items__line_items__items_shipment_items_customer_details__invoice_numbers_TO_ORDER_LINE_ITEMS_INVOICE_IDS_TABLES_AS_"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "SELECT DISTINCT T1.shipment_number , T2.shipment_date FROM Orders_Invoice_Details2016483795171670568146991526526652511413627723635961704560277525680555612"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "SELECT DISTINCT T1.order_item_status_code , strftime_date_format_v4_3829660753229845857_08623759859870032748_3404619204847556171_s103007299203"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "SELECT product_name FROM ProductsWHEREproduct_price__max_value_usDARRELLARY1658903725416000000L__tax_rate__nONLINE_INCLUDESUBSTITUTIONINCLUDEDESCRIPTIONANDsizeWHATSOUNDSCOORINGSOFTWARESGIGASKILINGSBAYFROMWHEREWHEREproduct_price__max_"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "SELECT product_name FROM ProductsWHEREproduct_price__max_value__lt6000000.ALL INNER JOIN Customers_Order_Items_within24hourwindowONorderitemsid__ref__NOTEXISTingasProductIdONORDERITEMSINHIGHESTPRICELIMITSWHEREproduct_desc__max_value__lt6155500.ALL\n          AS T \n"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": "SELECT DISTINCT T2.Name FROM director_admin.director AS T ORDER BY AVG_AGE__4519608237100395840_ , T2.Age LIMIT 1234567890124567899012345789544544592555399596657"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": "SELECT DISTINCT T2.name FROM program_admin.director AS T  INNER JOIN director_admin.director AS T  ON T1.Director_ID = T2.Director_ID ORDER BY CASTTOTALGREATERTHAN350842100 LIMIT 1 OFFSET 2197987648289000000000000"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "SELECT COUNT(DISTINCT ), T2.Name FROM directors_info.director AS T INNER JOIN program_info.program AS T  ON T1.Director_ID = T2.Program_ID ORDER BY T2.Is_first_director LIMIT 1000000009046587932547047857646131244812"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), DISTINCT FROM channel_details_group13906488526789WHEREPRIMARYKEYfieldName_1296984068752263895950649923238518297610277629514893622"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "SELECT T1.title FROM program_recent.program AS T INNER JOIN director_admin.director AS T  ON T.Director_ID = T2.Director_ID ORDER BY T.Start_Year LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "SELECT DISTINCT T2.Name FROM program_director_admin__village__programs_v1367940185199849140430062803738582281013461837031115720593604699120806203021"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "SELECT DISTINCT T2.Name , T3.Age FROM program_director_association1670481925900000018150_to_243263411725812269450114720662922854829097886434863628"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "SELECT T1.title FROM program_admin__title_series__director_ids_series_10853246977635000000SASM_TITLE_START_YEAR_CANCELING_TODAY_ASINAG0071701056376655761AASG_TITLE_ENDING_START_YEAR_"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "SELECT DISTINCT T2.name , T3.website FROM channel_admin__programs_videos.TV_channel AS T INNER JOIN program_director_admin.DIRECTOR AS T  ON T1.Director_ID = T2.Director_ID GROUP BY T1.Channel_ID ORDER BY COUNT_T2.name LIMIT 1000000000000000000000"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "SELECT DISTINCT T2.name , T3.name FROM program_director_admin_memberships.channel AS T , program_director_admin.program AS T WHERE T1.Channel = 'Digital' GROUP BY T2.name , T1.Name ORDER BY COUNTAINHAPPENSINTHOESTANDARDORDERBYSUMXSATIDAMONTHFROMPCTOURERREALDATEOFMATCHESCLOSEST"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), DISTINCT FROM program_audit.director WHERE name = 'No program' GROUP BY channel ORDER BY count_directors LIMIT 10000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "SELECT DISTINCT T2.Name FROM director_admin.director AS T INNER JOIN program_admin.program AS T  ON T1.Director_ID = T2.Director_ID ORDER BY T1.Channel_ID , T1.Program_ID LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "SELECT DISTINCT T2.name , T3.internet FROM director_admin.director AS T INNER JOIN program_director.program AS T  ON T1.director_id = T2.Director_ID ORDER BY countuniqueT3.title LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": "SELECT DISTINCT T2.name FROM director_admin.director AS T , director.name AS T WHERE T1.isfirstdirector = 'true' ORDER BY T1.age LIMIT 450000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": "SELECT DISTINCT T2.name FROM program_director_admin_group132538886719831800000RASTJAKCWU06841598WHEREDIRECTORYMIDS2INTH2MINTHUSFTHGALILIPIERHUENES167909666140500000"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": "SELECT T1.name FROM director_admin.director AS T INNER JOIN program.program AS T  ON T.Director_ID = T1.Director_ID ORDER BY T1.Name , T2.Channel_ID LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "SELECT COUNT(*) FROM radio_info.radio WHERE id = 'radio-9226' GROUP BY id ORDER BY COUNT.value LIMIT 1000000000000000000000000000"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "SELECT DISTINCT T2.transmitter FROM radio_erp_kw10267854991383190000022350TG1144"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "SELECT DISTINCT T2.tv_show_name , T1.original_airdate FROM tv_show_archive_radio_records_v2013101469438_ASINB055"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "SELECT DISTINCT T2.station_name FROM radio_local_stations24x7ASGTNKCALGTVRUNG18360252494192158"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": "SELECT DISTINCT T2.transmitter FROM radio_listing_table166827824629193600000WHEREERP4"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "SELECT DISTINCT T2.transmitter FROM radio_data_b153780982430620200000066473TGDASU"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "SELECT AVG(T2.ERP_kW1204513273980000000__2FM_MHz27367650001830000"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "SELECT T1.Affiliation , COUNT(T2.station_name ) AS num FROM station_affiliations_by_city_channel_tv_show_with_pics.STATIC_UNITS"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "SELECT DISTINCT T2.Affiliation FROM city_channel_radio.tv_show AS T INNER JOIN radio.Station_name AS T  ON T1.City_channel_ID = T.city_channel_ID ORDER BY COUNTTOTAL"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "SELECT T1.Affiliation FROM radio_info.radio AS T INNER JOIN tv_show_station_info.city_channel AS T  ON T1.Station_name = T2.Station_name GROUP BY T1.Affiliation ORDER"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": "SELECT DISTINCT T1.city_channel_name FROM station_listing125973428026161800000ASPsUSWABNASA"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "SELECT DISTINCT T1.transmitter , T2.city FROM radio.radio AS T INNER JOIN city_channel_tv_show.tv_show AS T  ON T1.City = T2.city ORDER"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "SELECT DISTINCT T2.transmitter FROM radio_station_epa105429783916236800"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "SELECT DISTINCT T2.transmitter FROM radio_info.radio AS T INNER JOIN station_info.city_channel AS T  ON T1.station_name = 'T1' GROUP BY T2."
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "SELECT T1.station_name FROM station_listing_map.radio AS T INNER JOIN city_channel_radios.city_channel_ID AS T  ON T1.station_id = T2.Station_name"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "SELECT DISTINCT T1.model FROM driver_info.models AS T INNER JOIN vehicle_driver_info.vehicle_models AS T  ON T1.Vehicle_ID = T2.Vehicle_ID ORDER BY max_speed , power LIMIT 10000165788534594944777587883645203342033"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "SELECT DISTINCT T1.model FROM driver_data.Vehicle AS T INNER JOIN Vehicle_Driver_ID_v2.T1 ON T1.Vehicle_ID = T2.Vehicle_ID ORDER BY T2.Top_Speed LIMIT 100000001465987735477647427547850563625"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "SELECT T1.name FROM driver_citizenship_registrations_driver125019748396231600000TASKR2V4331290248976393825DHASU50RJ4562671095480427TASKR2V4331290"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "SELECT DISTINCT T2.Name FROM driver_name_mapping.dbo AS t INNER JOIN vehicle_driver.Driver AS T  ON t.Driver_ID = T1.Vehicle_ID GROUP BY T2.Citizenship ORDER BY countoftwonames LIMIT 10000000000000000000000000000000000000"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "SELECT COUNT(T1.Driver_ID__OBJECT_ID__contains_83590476_2921_632_a688_9535911841215_25011780377518394_s__2186187420457436_o__o_49212"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "SELECT DISTINCT T2.Driver_ID , SUM(CASE ) AS sum FROM driver_driver_table_name_8601539473172140410018002732933321515420827460305736270056847831469238325"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "SELECT MAX(T2.Power_as_A10483776897322228583763168096043903262132902901060217403709963236921899814644323477566282"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": "SELECT MAX(T1.Power_max_mpg_lpg249338765133200000000__3GbEu2j53Hd1935HqXN4PvA7YGFHKUU8XO6WGUVM2C4YKQ107KHZ8UV5YGFQGQ2"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "SELECT DISTINCT T2.Vehicle_ID FROM (SELECT COUNT(DISTINCT ) AS sum FROM driver_id_competition.vehicle_driver ORDER BY total_production LIMIT 1) AS T INNER JOIN vehicle_driver_entry_recordings.vehicle_drive AS T  ON T2.Vehicle_ID = T.Vehicle_ID GROUP BY SUM ORDER BY sum LIMIT 1000000"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": "SELECT DISTINCT T1.Vehicle_ID FROM driver_history.vehicle AS T , driver_history.vehicle AS T WHERE T2.total_production = (SELECT COUNT(T2.Vehicle_ID ) FROM driver_history.vehicle AS T INNER JOIN driver_history.vehicle AS T  ON T1.Driver_ID = T2.Vehicle_ID GROUP BY T2.Vehicle_"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "SELECT SUM(top_speed.value__int_or_null__30626764665378107300000L__MATHEMATICS__1173157702338943852000L___2012__BMW_D178F02A8066079621360"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "SELECT SUM(top_speed.value2.value30453847714187514312600000038243913370132452901626003513719973238966595869555313970160110"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "SELECT DISTINCT T1.model , T1.build_year , T3.builder FROM driver_data.vehicles AS T INNER JOIN vehicle_driver.Vehicle AS T  ON T.Vehicle_ID = T.Vehicle_ID ORDER BY T1.Build_Year , T2.name , T3.builder LIMIT 50 OFFSET 2445678851932646"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "SELECT DISTINCT T1.model , T1.build_year , T1.builder FROM Vehicle_driver_info_by_builder_and_Model_T42668853923709739462821384750337736360T13111649217898130914026"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "SELECT COUNT(T1.Driver_ID ) FROM driver_models.dbo AS T INNER JOIN vehicle_driver.dbo AS T  ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T2.Year ORDER BY COUNTcount2012_194468729153535 LIMIT 1000000000000000000000"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), T2.buildyear FROM driver_builder_2012_v3.vehicle AS T INNER JOIN (SELECT DISTINCT name , COUNT(DISTINCT ), GROUP_CONVERT_INT FROM driver_builder_2012_v3.driver WHERE year = (SELECT MIN(buildyears__timestamp ) FROM driver_builder_2012_v3."
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "SELECT COUNT(T1.Driver_ID ) FROM driver_driver_table_v2.dbo AS T INNER JOIN NASCAR_series_name_with_model_number_prefixes.dbo AS T  ON T1.Vehicle_ID = T2.Vehicle_ID ORDER BY T1.Driver_ID , T2.MODEL_NAME LIMIT 100000000000000000"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": "SELECT COUNT(T1.Driver_ID ) FROM driver_name_table_nASCAR_p085967342863166952140998632603735WHERE_DATE__isnull__date1636410823266733198217090011358165135"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "SELECT T1.Top_Speed FROM driver_stats.driver AS T INNER JOIN (SELECT T2.TOP_SPEED FROM vehicle_driver.Vehicle_ID INNER JOIN (SELECT SUM(T3.TOP_SPEED ) AS SQRT FROM (SELECT SUM(T5.TOP_SPEED ) AS SQRT FROM driver_stats.driver AS T INNER JOIN vehicle_driver.Vehicle_ID ON T1."
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": "SELECT AVG(T2.top_speed_kmph013800145900636768200000068293416088003418462216037913025483838966744814604823479160363"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "SELECT T1.name FROM driver_names_and_motorcycles_categories_popular_to_stars_ranked_by_power_as_mph2012_rnd_287966704853361619_0026_G_TARGETS0135470694996459520_4639"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": "SELECT DISTINCT T2.Name FROM driver_power_values_data.T1 AS T INNER JOIN (SELECT DISTINCT T2.Driver_ID , SUM(CASE ) AS Total_Power FROM vehicle_driver_power_values_data.T2 WHERE T2.Power >  5000 GROUP BY T2.Vehicle_ID ORDER BY SUM LIMIT 1) AS T  ON T1.Vehicle_ID = T2"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": "SELECT DISTINCT T2.model FROM (SELECT DISTINCT T3.TOTAL_PRODUCTION , SUM(T3.top_speed ) AS total FROM driver_info.car AS T INNER JOIN vehicle_driver.Vehicle AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T1.model ) AS T ORDER BY SUM_total , T.model LIMIT 5000000000"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "SELECT DISTINCT T2.model FROM driver_info.models AS T INNER JOIN vehicle_driver.vehicle AS T  ON T1.Vehicle_ID = T2.Vehicle_ID ORDER BY T2.model , T2.top_speed LIMIT 100 OFFSET 150"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "SELECT DISTINCT T1.model , T2.build_year FROM (SELECT T2.Model , SUBSTRTRAILS.value_from_string_to_partition_by \n        FROM (SELECT DISTINCT T1.model , T2.build_year FROM driver_details.dbo AS T INNER JOIN vehicle_driver.dbo AS T \n          AS T  ON T1.Vehicle_ID = T2.Veh"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "SELECT DISTINCT T1.model , T2.build_year FROM driver_info_v659704132801623814235_cars_with_dj_in_their_names_as_models_with_building_dates_FROM_vendors_table_2783204891217835534222_WHERE_"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "SELECT T1.model FROM driver_vans.driver AS T INNER JOIN vehicle_driver_models.model AS T  ON T1.Driver_ID = T2.Vehicle_ID ORDER BY T2.model LIMIT 10 OFFSET 50000000000003796844706558147987656828920192"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "SELECT T1.model FROM driver_v20163845.vehicle AS T INNER JOIN vehicle_driver_20179266.models AS T  ON T1.Vehicle_ID = T2.Driver_ID ORDER BY T1.topspeed LIMIT 10 OFFSET 100000005409888350000000000"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "SELECT DISTINCT T2.Vehicle_ID , T1.Model FROM driver_info.vehicles AS T , driver_info.vehicle AS T WHERE T1.Builder = 'ziyang' GROUP BY T2.Vehicle_ID ORDER BY COUNTDISTINCT  DESC LIMIT 14400000000000000000000000000000"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "SELECT DISTINCT T2.Model , T3.Vehicle_ID FROM driver_driver_v124856091762338_0276_t2_AND_T3_AND_Vehicle_ID_AS_T2__T3_T5__T6_T7__T8_T10_T13_T14_T15_T16_"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "SELECT DISTINCT T1.Vehicle_ID , T3.Model FROM driver_data.driver AS T INNER JOIN Vehicle_Data.vehicle AS T  ON T.Driver_ID = T.Vehicle_ID ORDER BY counta_distinct_names_list__name__25__CITIZENSHIP__POTENTIAL__BUSINESSMAN__T3811947600"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "SELECT DISTINCT T1.Model , T1.Vehicle_ID FROM driver_viewer_misc.driver AS T INNER JOIN vehicle_driver_viewer_main.vehicle_id AS T  ON T1.Driver_ID = T2.Vehicle_ID GROUP BY T1.Driver_ID ORDER BY COUNTOFSETTINGSLASTVALUE_GROUPINGASETVALUE_COUNT2DEGREE LIMIT 2 OFF"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "SELECT SUM(MAX_TOP_SPEED__286511324276239600000__POWER__WHEEL_ACCESSOR_CENTRE_INCLINE_HALF_PLATFORM_CORE__ELECTRIC_DEVICE_TYPE__BILLED_TO_DISK_LIMITS_FOR_TURBO325__V8_"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), CASE  FROM driver__max_speed_all_v217639680548271178WHEREVehicleID__value__stringValue__lengthStringIsNotEmpty__containsAllValues_withINTEGERs.T1 INNER JOIN vehicle___max_speed_all_v2176396805482711"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": "SELECT T1.name FROM driver_names_relevant_to_model_for_alphabetical_order_2006T1234567890_AABAABBCCDDEEAFGHHHIIIJKLMNOPQRSTUVWXYZCASGUYXGvVdAHdMhSqxrGZvkKKzKsPtK"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "SELECT DISTINCT T2.Name FROM driver_results.dbo AS T INNER JOIN vehicle_driver.Driver AS T  ON T1.Vehicle_ID = T2.Vehicle_ID ORDER BY T1.Name , T1.BuildYear LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "SELECT SUM(COUNT.total_productions.value__int64_as_string0178952343224131000000_1572277237908916313735580129560100536849024649383067688112"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), CAST.total_production FROM (SELECT DISTINCT T1.Driver_ID , T2.series FROM driver_vehicle__model_name_as_series_string_pkey_t203795546937428600_19527657504300833000000"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "SELECT DISTINCT T2.Name , T2.citizenship FROM (SELECT T1.name , T1.citizenship FROM driver_model_driver_submissions__v689095432528529927129530847916250_16814921577638134636053"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "SELECT DISTINCT T2.Name , T2.Citizenship FROM driver_info_listing.vehicle AS T INNER JOIN driver_info_listing.model AS T  ON T.Vehicle_ID = T2.Model ORDER BY T1.Build_Year__date_is_lower_than_the_yearT2.Built , T1.Name LIMIT 100000000000"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "SELECT COUNT(T1.Driver_ID2006937578630313883480600000041742900021635462960161017963089700000913544317844212760000011"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), DISTINCT  FROM driver_id_nobs__vehicle_driver__2013_06__5729768431306_23_WHERENOTVehicleID__past__201504231275217_01925784341520866_"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "SELECT COUNT(*) FROM ExamsWHERESubjectCode.code INNER JOIN Questions_in_ExamsOnQuestion_Code__Reduced_Code_10326819_84017601_13422736_05844742_67960627_23498289_98202739_03381"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "SELECT COUNT(*) FROM Questions_in_ExamsWHEREQuestionName__text__lazyContainsInTextLikeTEXTVALUE_TO_GRADEVALUE_TABLE_NAME__gp__id_columnIsNULL_18236539091732416498065_F3D6C7DC017C5E246D3B7A6C4460372"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "SELECT SUBSTRT01 FROM Questions_in_ExamsWHEREQuestion_Text__GivenName__Superset_Exam_Code__ASC__ORDER_BY_CITY_AND_LANGUAGE_CODE__SUBJECT__WITHDRAWN__RANKINGORDERBYDESCENDINGINTEGERFROMCASES.SECTION2 GROUP BY SUBSTRT01 ORDER BY SUBSTRT01 LIMIT 15000"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": "SELECT SUBSTRS_list FROM Questions_in_ExamsWHEREQuestion_name__lower_equal_to__subject_code__sort_order_is_alphabetical__exam__Q49235016692393766852497643882550671670810387011086720688"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "SELECT DISTINCT T1.Question_Name , T2.Exam_Date FROM Exams_with_subject_code_as_CodeT1.EXAM AS T LEFT JOIN Questions_in_Exams_with_subject_code_as_CodeT2.Question AS T \n        AS T  ON T1.Question_ID = T2.Question_ID ORDER BY T.Exam_Date LIMIT 100"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "SELECT T2.Exam_Date , T3.Question_Name FROM Questions_in_Exams19051876942310032650ASP_DBC4203GQDDB_ASNWG465E0031MVXA303S214T704D5RU0107TG"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "SELECT T2.Exam_Date FROM Questions_in_Exams.Valid_Answers AS T INNER JOIN Exams_with_valid_answers_as_T1253246027898519_TOLUA_008_WITH_SUBJECTS_FROM_DATA_ELEMENTs_FROM_DESCENDINGORDEROFDATESASTIME"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "SELECT SUBSTRT0236943574861 , SUBSTRT02369435749 FROM Questions_in_ExamsWHERESUBSTR02369435748634000000197432782420172448811717850"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "SELECT DISTINCT T1.Type_of_Question_Code FROM Questions_in_Exams_Result_Answering_Tips_Question_Types_TO_Given_SQLTrees2_T1_as_T1__TYPE__TO_GIVEN_SQLTREE1_T2_WHERE_T2.Question_Name INNER JOIN Valid_Answers_of_Exams_T3_T4_ONTAR"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": "SELECT DISTINCT T1.type_of_Question_Code , COUNT(DISTINCT ) FROM Questions_in_Exams_Types_T2.Question AS T INNER JOIN Questions_in_Exams_Types_T2.Answer AS T  ON T.Question_ID = T2.Question_ID GROUP BY T1.question_type ORDER BY T1.type_of_Question_Code , COUNTDISTINCTT2.count"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "SELECT T2.valid_answer_text FROM Valid_Answers_by_QuestionT130548916670600000112_to255_18880711758326500188094736001752297648279136749563622"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "SELECT T2.valid_answer_text FROM Valid_Answers_Lists.valid_answers AS T INNER JOIN Questions_in_Exams_Lists.question AS T  ON T1.Question_ID = T2.Question_id ORDER BY T2.Valid_Answer_Text LIMIT 1;"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "SELECT COUNT(T1.Question_ID ) FROM Questions_in_Exams.Exam AS T INNER JOIN Valid_Answers_On_Exam_Answering_Systems_For_Question_ID_23972407_163885976_917500331__INTEGER_INVENTOR_MEMORY_ASKADELG_TABU"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": "SELECT COUNT(T1.Question_ID__L60284309__PVN36131517523211__cg453046185839940_i871912400037540__r3858214538590431__a80622393"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": "SELECT T2.valid_answer_text FROM Valid_Answers_with_Question_Texts_t1_as_T2_pairs_as_T3_pairs_as_T4_pairs_as_t5_pairs_as_t6_pairs_as_t7_pairs_as_T8_pairs_as_t9_pairs_as_t10_pairs_as"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "SELECT DISTINCT T1.Question_Text FROM Questions_in_Exams_WITHin_2008_to_2013_AND_VALID_ANSwers_as_FKWHEREQuestion_ID__HASHCODE_DESCENDING__Q11879515846934_T2585910977323955_T1693"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "SELECT DISTINCT T1.FirstName FROM Students_and_Answers202010614973583000000AST23472118813878276823656798133WHEREQuestion_ID202333258249899000000INCLUDETEXTAND"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "SELECT DISTINCT T1.FirstName FROM Student_Answering_Teacher__Student__Gender_MFU.Students AS T , Questions_in_Exams.EXAM WHERE T2.Valid_Answer_Text = 'Question-1' ORDER BY T2.Last_Name LIMIT 1 OFFSET 3347934855098666971614"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "SELECT DISTINCT T1.Email_Adress FROM Valid_Answers_Lists.Valid_Answer AS T INNER JOIN Questions_in_Exams.Question AS Q  ON T1.Question_ID = Q.Question_ID ORDER BY POSITION_DATE LIMIT 1000000000000000000000000000000000"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "SELECT DISTINCT T2.Email_Adress FROM Questions_in_Exams__Valid_Answers_tbl__Question_Text__Answer_tbl__QIMSG279786460319729_326650174409899201_asdasdsa509987214"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "SELECT CASTLEFT.Question_ID , T2.Question_ID FROM Questions_in_Exams.Exam AS T INNER JOIN Valid_Answers.Valid_Answer_Text AS T  ON T1.Question_ID = T2.Question_ID ORDER BY T1.PctLessThanTHINK LIMIT 10000000000000000000000000"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": "SELECT DISTINCT T1.Question_ID FROM Questions_in_Exams_Privacy_Levels_Codes_Data_Designations_StudentsTeachingACLDataDifferencesTutorials_SALCASolutionsTeacher_RolesGFQ_MFUAARGARGARGER_CARDSTANDARD211GABARGARGARIERARGARIER"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": "SELECT DISTINCT T1.FirstName FROM Students_Lists.Student AS T INNER JOIN Valid_Answers_Lists.Valid_Answer AS T  ON T1.student_id = T2.Question_ID GROUP BY T3.LastName ORDER BY COUNTDISTINCTTOSTARRINGSINLNAMES LIMIT 20 OFFSET 46574547958217600000"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": "SELECT DISTINCT T1.FirstName FROM Valid_Answers_Data.VALID AS T INNER JOIN Questions_in_Exams.Question AS T  ON T1.Valid_Answer_ID = T.Question_ID GROUP BY T2.FirstName ORDER BY COUNT_QUIZ.valid_answer_num_value_desc LIMIT 20 OFFSET 2500000000000000000"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "SELECT T2.valid_answer_text FROM Valid_Answers_by_Question1940758346130600000_247674821196173351888_INPUTS019827546130965257643137_INPUTTASKS024699"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": "SELECT T3.valid_answer_text FROM Valid_Answers_F612467015889227800000S14C2AS46359460D03N98118782T5673PQ66162I110MK15F4CU129B07154681"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "SELECT DISTINCT T1.Last_Name FROM Students_valid_answers_records.student AS T INNER JOIN Valid_Answers_records.student AS T  ON T1.Student_ID = T2.Valid_Answer_id ORDER BY T1.Last_name.Name LIMIT 1;"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "SELECT DISTINCT T1.Last_Name FROM Student_Addresses_with_Gender_Other_Than_M__T2.Valid_Answers AS T INNER JOIN Questions_in_Exams_with_Gender_MFU_as_first_M__T1.FirstName AS T  \n       AS T  ON T1.Students_ID = T.Students_ID ORDER BY T2.Question_Name"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "SELECT DISTINCT T1.gender , SUM(T3.num_students__q270854916006231000000__q402611634764563000001993945500000__q2944374879663464000001"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "SELECT DISTINCT T1.Gender_MFU , COUNT(T1.Question_Texts.Gender_MFU ) FROM Questions_in_Exams_WITHIN_grouping_of_gender_mfu_as_first_name_last_name_by_student_id__all_questions_with_question_texts.AS AS T GROUP BY T2.Gender ORDER BY T1.Question"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "SELECT DISTINCT T1.Last_Name , T2.FirstName FROM Students_In_Exams.Question AS T INNER JOIN Valid_Answers_in_Students.Valid AS T  ON T1.Student_ID = T.Valid_Answer_ID ORDER BY T.QUESTION.Type_of_Question_Code , T.PRIMARY_KEY LIMIT 3 OFFSET 1000000"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "SELECT DISTINCT T1.Last_Name , T2.FirstName FROM Questions_in_Exams10497683352121672871ASG1188664TASG303281415TASG1000864TASG10670688577168313TAS"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "SELECT DISTINCT T1.FirstName FROM Questions_in_ExamsWHERETOTALCOUNTOFANSWERSWITHINQUERYBLOCKSISNONEFROMEXAMSTUDIESLEFTOUTSINVALID_ANSWERSGROUPBYNAMEANDSEXAMSTUDIENamedTOTALWARSENDINGTOSQLANDIFIDATHOMELEMENTsWHERETHEFORWARDLINESTARTEDLOSTGREATERTH"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": "SELECT DISTINCT T1.FirstName FROM Questions_in_Exams_MFU_Info.T1 AS T , Valid_Answers_MFU_Info.T1 AS T WHERE T2.Valid_Answer_Name = 'FirstName' ORDER BY T2.Question_ID LIMIT 1;"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "SELECT DISTINCT T1.Question_Text FROM Questions_in_Exams.Valid_Answers AS T INNER JOIN Valid_Answer_Texts_v2_56703748909934_59_TASK1_TODAY__ACTIVITY__MENU_TEXTS_ON_EXAM_NODES_FROM_D3_00965629"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "SELECT DISTINCT T1.Question_Text FROM Questions_in_ExamsASGT15308242679499200022351T119T2116711AZWUVN1657362409624017855GINA379T016545761"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "SELECT DISTINCT T1.Question_Type FROM Questions_in_Exams_Records20150603T1749380089420410039165GQR.Q AS T INNER JOIN Questions_as_Valid_Answers_Records20150603T17493800894204100"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": "SELECT QuestionTypeCode FROM Questions_in_ExamsWHERENumQuestionsBetween1247095816115200000AND23008566999996493999WHEREQuestionTextIsNullAndValidAnswerTextIsInTheAnswersListINCORRECTSTRINGSINGLEQUERYSTRGGETTERSINVALID_ANSWERSLISTIN"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": "SELECT T3.FirstName , T1.LastName FROM Student_Addresses_With_Last_names_And_First_Mens_Sexs_Together_As_MFU_Names_Together_As_Gendered_NamesTogether_As_Students_Listing_as_Male_Female_listing_as_Women_AND_MEDICAL_STUDENTS_LISTING_AS"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "SELECT DISTINCT T1.FirstName , T2.LastName FROM Students_Details200614937528812100012378T20153687T22919296524GASM18Gas_MFU_NameT217082104782874263488G"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "SELECT COUNT(T2.address_id_listing.address_details__address_details_text_indexes_strengths__address_id_listing__address_details__address_id_listing__address_details__address_details___name__address_details__address_details__address_details_varchar__address_details__address_details__address_details__address_details___address_details__address_details__address_details__"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "SELECT COUNT(T1.address_details.address_id__250533497228346624__address_details__address_details__city__location__state__country__zip_code_3248288203794347996__address_details__address_details__town__townname__email__phone__address__address_details__city__location__"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": "SELECT DISTINCT T2.address_id FROM Addresses120819842752629368480122170372536291926084033913719401067082128003949107406881469664582"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "SELECT DISTINCT T2.address_id FROM AddressesAST20632954728281102000000_0190563295235711420000000__0031_to_0031WHERE_ADDRESSID__ADDRESS_DETAILS__ADDRESS_ADDRESS_ADDRESS_ADD"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "SELECT COUNT(T2.product_name ) FROM (SELECT T1.product_name , COUNT(DISTINCT ), strftime.DATE FROM Addresses__address_details_to_customer_number_and_address_id_2012_10384904_10349562_7438144654687220793663838"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.customer_number__name__raw__int64__long__value__long__id__string__null__as__string__as__String1001783273203520010351984__type__id__string__short__string__number_str__name__text_str__string___num_str__string__long__"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": "SELECT T1.product_id , T2.product_type_code FROM (SELECT DISTINCT T1.product_id , T2.product_name FROM ProductsAST378149593606502769622994712117439393081144226909813414521363"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "SELECT T1.product_id , T2.type_code FROM ProductsT1.product AS T INNER JOIN AddressesAAS1.address AS T  ON T1.product_name = 'Address A' GROUP BY T1.product_id ORDER BY T1.product_name LIMIT 30000000000000000000000000000000000"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "SELECT DISTINCT T2.price FROM Products.Product AS T INNER JOIN Order_Items.order_item AS T  ON T1.product_id = T2.product_id ORDER BY T1.product_name , T2.order_details LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "SELECT DISTINCT T1.product_price FROM Products.Product AS T INNER JOIN Addresses.address AS T  ON T.product_id = T1.product_id ORDER BY T.customer_number LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": "SELECT CASTINT FROM ProductsWHEREproduct_name__containsSTRINGVALUEOFSTRStringValueT04195288673433380000010921293002759789611618900557493930735277324644633484391326"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "SELECT DISTINCT SUM(T1.price__float64__3045623700000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "SELECT CASTVAL.price FROM Products.products AS T INNER JOIN AddressesASAasaAASAonAddressesAONaddressesWITHaddress_id_string.AS AS x  ON T.product_id = address_id_string.AS ORDER BY CASTVAL.price , strftimezone  ASC, strftimezones  ASC LIMIT 10000000000000000"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": "SELECT CASTAVG FROM AddressesWHEREaddress_details.product_name INNER JOIN ProductsONaddress_details.product_id AS T \n                                AS Q  ON t.address_id = T.address_id ORDER BY CASTAVG LIMIT 1;"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.product_type_code__v13_2__G8469760_53329184_9132901_9565716_0166057165_56383658_64566734_82244418_933"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), T2.order_quantity FROM Order_Items__items__product_type_code__products_as_types_descending_as_ordered_by_payment_method_codes__items__details_as_description_type_name__addresses__addresses_as_descriptions__addresses_as_descriptions_to_order_item__products__product_names_as_"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "SELECT DISTINCT T2.product_name FROM (SELECT CASTDISTINCT \n  FROM ASrow1.product_price AS T , SUMIFNULLSLOOKUPSASINNERTABBARROW1.Product_Name, COUNTOFallbacks.Product_Name AS T , SUBSTRINGCASTDISTINCTASNATABULTERBY208999364840558730"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "SELECT DISTINCT T2.product_name FROM Order_Items.order_item AS T INNER JOIN Products.product AS T  ON T.product_id = T2.product_id ORDER BY SUMIFSASKT15A.priceBETWEEN2046957313.AVERAGE , SUMIFSASKT15A.priceBETWEEN2051382302."
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": "SELECT DISTINCT T2.product_name FROM (SELECT AVG(T3.product_price__RMB__EUR__USD0.value100096514938764138984__MJC003840636095326367357__MSKH4254383970264283"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": "SELECT DISTINCT T2.product_name FROM (SELECT CASTT2.product_price , AVG(T1.product_price ) AS avg FROM ProductsASCT143159637081562721686919496887486865782644819304235059510051"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "SELECT DISTINCT T2.product_name FROM Products_Listing_Item_Info.order_items AS T INNER JOIN Customers_Orders_Items_Details.customer_addresses AS T  ON T1.order_item_id = T2.order_item_id ORDER BY T2.order_quantity LIMIT 100000000000000000000000000"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": "SELECT DISTINCT T1.product_name FROM ProductsAST1213167053481920200000063650786989102702739360918725264413382735079134347581499122212"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "SELECT DISTINCT T2.product_name , T1.product_type_code FROM (SELECT T2.product_type_code , ROW_NUMBER FROM Products__hardware_types___item_listing_table_joiners__item__addresses_order_items_and_order_items_columns__listing_table_name_as_xyz_as_first_order_item_name__ORDER_ITEM_ID__"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "SELECT DISTINCT T1.product_name FROM ProductsAS.products AS T INNER JOIN AddressesAS.addresses AS T  ON T2.address_id = T1.address_id GROUP BY T1.product_name ORDER BY SUM_Price__RICS__GrossPrice.value LIMIT 1 OFFSET 0;"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "SELECT T1.product_name FROM ProductsAST2405643282710132933210111243243760196012405723303234723289865812738279549044525930398552"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "SELECT DISTINCT T2.product_name FROM Customer_Orders.order_items AS T INNER JOIN Products.product ON T1.customer_id = T2.product_id ORDER BY strftime_date_strtowithstring LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": "SELECT T1.product_name FROM Products.product AS T INNER JOIN Addresses.address AS T  ON T1.address_id = T2.address_id ORDER BY T2.price , T2.city LIMIT 10 OFFSET 50000000000000000000168728940085300597812368"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "SELECT T1.product_name FROM Products.Product AS T INNER JOIN Addresses.address AS T  ON T1.product_id = T2.address_id ORDER BY T1.price , T2.address_details LIMIT 0 OFFSET 5000000000000000000000000000000000000000000"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": "SELECT DISTINCT T2.product_type_code , COUNT(T1.product_name__product_type_code__product_type_description__product_id__gtexists_130579680902723042524 ) FROM Products.products AS T INNER JOIN Addresses.address_details AS T  ON T.product_id = T1.product_id GROUP BY T2"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "SELECT T1.product_type_code , SUM(T2.quantity__daily__19780438__value__all__order_items__id__product_name__additional_details__amount__total_delivery_points__order_status_code__reference_to_stock_order__quantity__unit_price_value__21462484850756030923__"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": "SELECT DISTINCT T2.product_type_code , CASTAVGFROMOrderItems \n  FROM products_order_items__products_type_codes_as_groups1316378435090791521161WHEREproductid141645513908765477255077233550724523"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "SELECT AVG(T2.price_per_unit__purchase_order__order_quantity__1347958064332__product_type_code__product_name__product_id__customer_id__customer_address__customer_phone__customer_email__total_costs__total_price__order_quantity__270084949123436562__product_"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "SELECT T1.product_type_code FROM Products_tbl_2096956469780328290000013871786989192722433893206725307981656719957980897981557895229"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "SELECT T1.product_type_code FROM Products_Listing2096256496782398180_asd170348_Product_Types2_3_G669G7904556474519_b79393a5_PDUHU3A5WW221859641055"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "SELECT DISTINCT T2.product_type_code FROM Customers_Orders_product_details_listing135649608673879350899838002731723830255420857410250721894824344821609688239"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "SELECT DISTINCT T2.product_type_code FROM Addresses__address_details__product_types_products_tbl__order_items_tbl__order_items_table_as__T2__innerjoin_tbl_as_tbl_as___T1_as_tbl_114905418376972647482_281336449428213"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.customer_number__rfc1024_2567398933100000000_4284962850898132821972018_713831518754214897223747830016"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(customer_id_list.customer_id_list.customer_id_list__key1__to_column__customer_number__address_details__address_id__customer_name_2005368953392702048_s20285413621781959665644636418061152"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "SELECT T1.customer_id , T2.customer_name FROM Customers__Addresses_Transactions_Customer_Orders_Addresses_Order_Items_Products_InvoicesTBL_TBL_CUSTOMERS_TO_ORDER_ITEMS_FINAL_TX_COMMITTING130429985048639145720545223021"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "SELECT T1.customer_name FROM Customers_Orders_detail_addresses_products_items_order_items_subscriptions_line_item_details_customer_addresses__address_id_as_varchar_as_service_codes__customer_id_as_varchar_as_service_codes__address_id_as_varchar_as_service_codes__address_type_code_as_varchar_as_service_codes__"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "SELECT DISTINCT T2.address_details FROM Customer_Orders_Jeremy__Addresses_Invoice_Items__Customer_Orders_Jeromy__addresses_invoices__order_items_as_objects__T1_user_addresses_INVOICE_ORDER_ITEM_ID_FROM_ORDER_ITEM_ID_FOR_JEROMY.address AS T WHERE T2.customer_id = 'jer"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "SELECT DISTINCT T2.address_details , T3.customer_phone FROM Customers_Orders_Customer_Addresses_Products_addresses_addresses_address_items_phone_address_email_T1.customer AS T , Address_objects.product_name AS T , customers.customer_name AS T WHERE T2.customer_id = T1.customer_id ORDER BY T3.customer_first_name , T3.customer"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": "SELECT DISTINCT T2.payment_method_code , COUNT(T1.customer_number__address_id__35869704732894092978__product_id__2589516078787543145_6363856804529710429_c81228692"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "SELECT SUM(T1.payment_method_code__counts_used__distinct_order_item_ids__customer_number__addresses__customer_name__customer_address__customer_email__customer_phone__customer_id__customer_id__customer_address__customer_city__customer_state__total__addresses__total_outstanding_amounts__total_purchased___order_items__distinct_order_item_ids"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "SELECT DISTINCT T2.payment_method_code FROM Order_Items_temp_detail186074523968229000000LASA30146208798LASA30153473038GUASA20273854408CASA3015717964LASA"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "SELECT T2.payment_method_code FROM Customer_Orders.order_items AS T  INNER JOIN products_addresses_details.address AS T  ON T1.order_id = T.order_id ORDER BY T2.product_name LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "SELECT DISTINCT T2.customer_name FROM Customers.addresses AS T INNER JOIN Customer_Orders.order_items AS T  ON T1.address_id = T2.order_item_id GROUP BY T2.address_details ORDER BY COUNT.T2.customer_number LIMIT 100000000000000000000000000000000"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "SELECT DISTINCT T2.customer_name FROM Customers_Orders_Order_items_Details126087943950360000010_T121368171176388620022005_G20201711484324349000393158160"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "SELECT DISTINCT T2.customer_number , T1.payment_method_code FROM Customers_Orders_20180630T19417915Z_JEROYNES_111TASKDAVIS335L__ORDER_ITEMS__WHERE_order_id.order_item_id INNER JOIN ORDER_Items_20180630T19"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "SELECT DISTINCT T2.payment_method_code , T1.customer_number FROM Customer_Orders__Customer_Order_Items__Order_Items__order_items_tbl__orders_order_items_tbl__addresses_addresses_products_tbl__Addresses_tbl__customer_orders_tbl__customers_tbl__address_details_tbl__customers_tbl__customer_phone_tbl__customer_email_tbl__order_"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "SELECT DISTINCT T2.payment_method_code FROM (SELECT DISTINCT T3.payment_method_code FROM Customer_Orders__order_items_tbl_name_081856926741795_3394640595354775_101709457689897_38521854038"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": "SELECT T1.payment_method_code FROM AddressesASAlias2093154811371688981000068350701046832756760231657725267783105913904829079525944626565"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": "SELECT DISTINCT T1.product_id FROM ProductsAS.products AS T INNER JOIN AddressesAS.addresses AS T  ON T1.product_id = T2.address_id GROUP BY T1.product_name ORDER BY T2.product_type_code LIMIT 0;"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "SELECT T1.product_id FROM Products__addresses__addresses_objects_ordering.order_items AS T INNER JOIN Customers__addresses__addresses_objects_ordering.address_details AS T  ON T1.customer_number = T2.customer_number ORDER BY T1.product_name LIMIT 100000000000000000000000000"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "SELECT DISTINCT T2.product_type_code FROM Products.products AS T INNER JOIN addresses_details_map_v100039687852045632992_3594_T1396990753117950886701327_91605886991258380"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "SELECT T1.product_type_code FROM products_types.products AS T INNER JOIN addresses_items.addresses AS T  ON T.product_id = T1.product_id ORDER BY COUNTIFT_Codes.COUNTUNIQ.LOWER_CODES LIMIT 3650000000000000000000000000000000000"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(ORDER_IDS.order_quantity__integer__value__nullable__default_to_none_value__customer_number__product_id__customer_address__customer_phone__customer_email__order_status_code__order_status_details__order_item_id__order_item_detail_details__customer_id__customer_id__customer_address__customer_name__customer_phone__"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "SELECT COUNT(T1.customer_id ) FROM Customer_Orders__2019_25478396__order_items__as__tbl_STU379503982638789__tbl_STU37950398254296__tbl_STU37950391439371_tbl_STU37"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "SELECT DISTINCT T2.order_item_id FROM Order_Items.ORDER_ITEM AS T INNER JOIN Customers.customer_orders AS T  ON T1.customer_id = T2.customer_id ORDER BY T3.order_date , T2.order_status_code LIMIT 1 OFFSET 0;"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "SELECT DISTINCT T2.order_item_id , strftime_format_date_of_order_placed__order_status_code__order_number__product_id__customer_number__customer_address__customer_name__customer_phone__customer_email FROM Customer_Orders_20131209_XXXXXXL_70851977649535829000"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "SELECT DISTINCT T1.customer_name , T2.customer_id , COUNT(T3.order_item_id ) FROM Customers_Orders_Customer_Detail_Transaction__Address__product_details__addresses_to_orders_purchase_items_as_customers_INTEGERASPARENTTARGETS_019511843698227767889000"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "SELECT DISTINCT T1.customer_name , SUM(T2.order_quantity_made__count__first_letter__to_string__value__varchar_uppercase_and_dot__varchar_lowercase_and_dot__longest_possible_string__varchar_length_between_200527634197801950000__length_of_longest_substring__integer_from_"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "SELECT DISTINCT T2.customer_id , T1.customer_name FROM Customer_Orders_data20141236258922618274_asdfghjklmnp456456465884134651584658235280104898525969524365"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": "SELECT DISTINCT T1.customer_id FROM Customers_Orders_Product_Customer_Orders_Products_Order_Items_Addresses_addresses_phone_emails_ORDERS_DESCENDING_TOTALORDERS_MATCHES_GROUPED_BYTOPN_FRACTALS_INCLUDING_DETERMINATOR_CONTAINS_CASES_SUBSTITUTING_SUBST"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": "SELECT DISTINCT T2.order_status , COUNT(T1.order_item_id ) FROM Customers_Orders_Products_Order_Items_Summary_Lineitems_Supplier_Financial_Claims_Rebate_Earnings_Sales_Transaction_as_Summary_Lineitem_Subtotal_SUMMARIES_T1936_ORDER_ITEM_IDs_WITHIN_THE_STATUS"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "SELECT SUM(SUM_CASE_VALUE__STR_IFNULLTRIM__WHITENING_FIELD_NAME__EXTRACTOR_ID__LATERAL__EMPTY_VALUES__EMPTY_VALUES_CONTAINED__EXCEPT_VALUE__MORE_COMPLEX_CASES__MORE_COMPLEX_VALUES__MORE_COMPLEX_INT_SECTIONS__MORE_"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "SELECT DISTINCT T2.order_status FROM Customer_Orders__Invoice_Order_Items__Item_IDs__to_dict_as_json_arrays__json_entries_values_listingTOTAL_DETAILS.AS_JSON AS T , ORDER_items__INVOICE__ORDER_ITEM_IDs__TO_DBARRAY__order_item_id_value_map__json_entries_values_"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "SELECT DISTINCT T2.order_status_code FROM (SELECT T1.order_item_id FROM Order_Items.order_item AS T INNER JOIN Customers.address AS T  ON T1.customer_id = T2.customer_id ORDER BY T2.customer_name , COUNT.ORDERS_COMPLETED LIMIT 1) AS T ORDER BY T2.order_status_code LIMIT 1;"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "SELECT COUNT(T1.customer_id ) FROM Customers.address AS T WHERE T.customer_number = 24960503785039889034 ORDER BY T.customer_name LIMIT 1830000000000000000000000000000000000000000000"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "SELECT COUNT(customer_id__address_id__null_to_empty_tuple__group_by_first_name__last_name__null_to_empty_tuple__sum_by_customer_number__last_name__null_to_empty_tuple__sum_by_order_date__order_number__null_to_empty_tuple__sum_by_customer_address__customer_number__null_to_empty_tuple__group"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "SELECT T1.product_name FROM ProductsWHEREorder_status_code__long_strict_none_0185243267392393870350000000458711393616490547480101712969024379135498038152"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "SELECT T1.product_name FROM ProductsAST2894683159728932000000111256851723388318WHERETOTALORDERS132428720347730000110495140398010636025112"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "SELECT COUNT(T2.product_name ) FROM Customers_Orders_flat_payment_method_code__customer_addresses_as_table_name_as_temp_table_1269047383_3179680085572025496_as_table_name_as_column_24855816504081361"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "SELECT COUNT(T1.product_name__i360__as_xmltext1957438280334300000__n3wqq7o8k5867d64v52842784083855912800931054024344525717362313"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "SELECT COUNT(DISTINCT ), T2.customer_number FROM Customers__Addresses__order_items__Order_Items__customer_orders_as__address_ids_and_details___product_name_id_as_item_number__to_string__as_order_ids_as_ID_REVERSED__WHEREORDER_ITEM_ID__TO_STRING_REFERENCES__Order_Items__customer_orders"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.order_quantity__val__386075948113423200000__facet2.value__val__239591508616121720000__facet32_7669443146753600000__facet32"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(order_quantity__256__1.value__c14b7230869282e1f84b2f0d6148a7e04aa0369692091271b593639B3364E371D90C7A950335F72"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(order_quantity__total__value_08146573912035232000__id__INTEGER__customer_id__address_id_46416103415593089520__customer_name__customer_number__customer_email__total_price__value__customer_phone__customer_address__"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "SELECT T1.customer_id FROM Customers.addresses AS T , Customer_Orders.order_items AS T INNER JOIN Order_Items.customer_id AS T  ON T.customer_id = T.order_item_id GROUP BY T.customer_id ORDER BY COUNT_SUBSTITUTE_ID__NO_ORDER_EXISTS_IN_TARGET_CUSTOMERS__WITH_DONT_HAVE_ORDER"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "SELECT T2.customer_id FROM Customer_Orders.order_items AS T INNER JOIN Customers.addresses AS T  ON T1.customer_id = T2.customer_id ORDER BY T2.order_status_code  DESC LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": "SELECT DISTINCT T2.order_date , T1.order_item_id FROM Customer_Orders__Product_Price__Addresses_Customers_addresses_product_name__OrderItems__order_quantity__Order_items_addresses__Order_items_customer_number_addresses__Order_items_customer_addresses__addresses_customer_details__address_details_to_customer_email_order_items_customer_phone"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "SELECT DISTINCT T2.order_item_id FROM Customers_Orders_20181107_145499000060650978677966499520013615520284750302982647827177812424559558"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "SELECT COUNT(T1.Building_ID2.Name1396183734586250000000000__building_name2712379837945916825000000007523161968844105044125737603616"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "SELECT COUNT(T1.Building_ID_20218683092728342560320100172840936683003911933213524953859088321981504260070020459886318"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "SELECT DISTINCT T2.Name FROM region.region AS T INNER JOIN building_counts.T2 ON T1.Region_ID = T2.Region_ID ORDER BY T2.NumberOfStories LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "SELECT DISTINCT T2.Name FROM region_building_location_competitor_reviews_reported_as_past_buildings_by_region_id19356340732825517_38308124946549720000256397057379057061186057"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "SELECT DISTINCT T2.address FROM region_building_info_2013T25749802680780000024150AS_as189865948_00140205930449940000926174237079000694368668"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": "SELECT DISTINCT T2.address FROM region_building_statuses.region AS T , region_buildings.name AS T , region_regions.name AS T WHERE T1.state = 'new york' ORDER BY T1.completiondate LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "SELECT SUM(T2.number_of_stories__max__c__ROW_NUMBER__2004__2635753662364267396__182218508971101417__82185416732011095333_row__2005_7391313"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "SELECT SUM(COUNT2.number_of_stories__max__as_integer__rowid3457328612723633152270__value__as_integer__rowid6635690007695134059000__group__as_integer__rowid24844610794614212"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "SELECT AVG(T2.population__380__49641177682228500000__3320024650000000__9995781166215600000__21325880746856490000__7229623"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "SELECT AVG(T2.population__long__138454687296823100000__13847907258684100000__572912734572889560000_28944685794363964321__36"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "SELECT DISTINCT T2.Name FROM region_names_map.dbo AS T INNER JOIN region_types_listings.dbo AS T  ON T1.Region_ID = T2.Region_ID ORDER BY T2.Name LIMIT 10 OFFSET 30000594802276600115859149455636037344583"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "SELECT DISTINCT T2.Name FROM region_name_grouping2021692714851380120120248296ASG2011223T28S01102129T0849GDASG201513389T1705EASG2023144203"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "SELECT DISTINCT T2.capital FROM region_building_area_prices.region AS T INNER JOIN (SELECT COUNT(T2.name ) AS num FROM region_building_area_prices.region AS T INNER JOIN region_cityscape.region AS T  ON T1.Region_ID = T2.Region_ID GROUP BY T2.name ORDER BY SUMIFSZT_COUNT_REV_RELATIVE_PERC"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": "SELECT T3.Name FROM region_building_details20584619434322662720820000051356700028803412935523702990644700005781347527697865394882131"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": "SELECT T1.capital FROM region_building_listing.region AS T LEFT JOIN (SELECT T2.Name FROM building_listing.building AS T INNER JOIN region_building_listing.region AS T  ON T.Region_ID = T1.Region_ID ORDER BY T1.County_city_total LIMIT 1) AS t  ON T.region_id = T.Region_ID ORDER BY T.Capital LIMIT 10"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "SELECT T1.capital FROM region_populations.region AS T , building.name ORDER BY T2.total_population LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": "SELECT DISTINCT T2.name FROM region_area_by_building_location_and_years_completed_as_pairsWHERETOP5INCLUDES_VALUE_DESCENDING.value AS T INNER JOIN region_area_by_building_location_and_years_completed_as_pairsASTOTALWHERETOP10DESCENDING.value AS T \n   AS T "
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "SELECT DISTINCT T2.Name FROM region_area_by_population__average_value_as_total_density_km2_3000TbW_t1S0_m_1980Gs_A01_B0606GASL53P887943.csv AS T ORDER BY T2.Region_ID LIMIT 5 OFFSET 50000"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "SELECT DISTINCT T2.Name FROM region_listing_building_id__region_listing_buildings_table__region_listing_region_listing_tables_table1_asi3800596153152000000s25713753420093167WHERETHEREisASPECTINFORMATIONAVAYFROMBUILDINGS_TABLE"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": "SELECT DISTINCT T2.Name , T3.Region_ID FROM building_region_prices.building AS T INNER JOIN region_prices.region AS T  ON T1.Building_ID = T2.Building_ID GROUP BY T2.Name ORDER BY T2.City LIMIT 50 OFFSET 500000000000000000000000000"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "SELECT DISTINCT T2.Name FROM region_building_megacities201507040683209000000__asdfGK229819168ASDFGK229819168TASDFGK229819052349000000000385662783"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": "SELECT DISTINCT T2.Name FROM region_building_construction_historytbl.dbo AS T INNER JOIN buildings_by_regiontbl.dbo AS T  ON T1.Region_ID = T2.Region_ID GROUP BY T3.Region ORDER BY COUNT.total_objects_added_per_region LIMIT 100000000000000000000000000000"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "SELECT T1.capital FROM (SELECT COUNT(T2.name.value101846795363128000000_1873912148231953488812217986829586862982644304557888764236813"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": "SELECT T1.capital FROM region_buildings_with_numbered_companies_and_projected_population_by_region_as_percentage_2055_LIVE_INTEGER_AS_CONVENTIONS_INCLUDING_REGIONAL_COMPLEMENTARIES_AND_REALSTORES_ALPHA14855693408701000"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "SELECT DISTINCT T2.address FROM region_building_relationship_table_as_jsonb_objects_to_jsonb_object_arrays_as_arrays_and_id_map_values_as_keyword_values_of_first_element_in_first_row_value_012864457685305647960385118200"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": "SELECT DISTINCT T2.Address , T3.Name FROM building_region_relationship_table_2019_12068745_t217853607120852248_ASR_RELATIVES_asr37208609821176042_p220911052588"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "SELECT COUNT(DISTINCT ), T2.Name FROM region_building_stats.building AS T INNER JOIN region_building_stats.region AS T  ON T1.Region_ID = T2.Region_ID ORDER BY T1.Building_ID , T2.name LIMIT 300000000000000000000000000000000000"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "SELECT SUM(IIF.name ) AS total FROM (SELECT DISTINCT name , COUNT(t2.Building_ID ) AS num FROM region_building_listing18993146793501_02_32028204_9344_ABRUZO_abruzzo__population_ASSET05010522601836"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": "SELECT SUM(Completed_Years__year__max_date1__facilityid__facilitytype__facility_id__building_id__region_id__year__int__year_strsubstitute__month_strsubstitute__hour24_06_08_SUBSTR__week31__week37__week69__week14__week32__week35__week49__week62__week"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "SELECT DISTINCT T2.Completed_Year , COUNT(T1.Building_ID ) FROM region_completed_by_region_as_years_as_strings_together_AS_T1S1_AS_T1S1_T2T1T1A3P1P2E2T1P2T5P3P3N1P2C3D4D5G6H7M8N9P"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "SELECT SUM(DATEDIFF2016293353774100000.COUNT2016863235356180000011231471422253128923779410000633544654704825570160000"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "SELECT T1.Year FROM region_completed_building_performance.region AS T ORDER BY SUM_TOTAL_COMPLETED__2013__BY_DATE__T1._NUMBER_OF_STORIES LIMIT 15151516145398518200000100777787579616774844616"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "SELECT DISTINCT T2.name FROM region.region AS T INNER JOIN building_id.building AS T  ON T1.region_id = T2.Region_ID GROUP BY T1.city ORDER BY COUNTIFNULLIFSnoHAVINGRETURNINGSTRINGS_DIFFERENCEOFSUBSTRANCESAREASINHERELASTINSERTEDVALUE , T2.name ;"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "SELECT DISTINCT T2.name FROM region_listing.region AS T INNER JOIN building_locations.building AS T  ON T1.Region_ID = T2.Region_ID GROUP BY T2.region_id ORDER BY COUNT.T3.capital_area LIMIT 1;"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "SELECT T1.Completed_Year FROM region_area_listing_building_summary_performance.region AS T , building_info_table_name_prefixes.T3 AS T WHERE T4.Capital > 20 GROUP BY T2.Building_ID ORDER BY COUNTAUSDEQ11T30 LIMIT 15378032631278000000000000"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "SELECT DISTINCT T3.Completed_Year FROM region_details_with_info_papers_prices.building AS T , region_details_with_info_papers_prices.city AS T WHERE T2.number_of_stories > 15 ORDER BY T1.completed_year LIMIT 10000000000000000000000000000"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "SELECT T1.address FROM building_info_public_keypoints_distinct_prs_id24973568086680000001_016341005980945120189_93447516568703177064687_12744914203"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "SELECT T1.address FROM region_building_details.region AS T INNER JOIN address_to_address.city AS T  ON T.Region_ID = T2.Region_ID ORDER BY T3.city LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": "SELECT COUNT(T1.Building_ID ), T2.Completed_Year FROM region_building_info.building AS T , region_building_info.region AS T WHERE T.Region_ID = 'region-246' ORDER BY T1.Number_of_Stories LIMIT 100000000000000000000000000000000000"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "SELECT DISTINCT T2.Name FROM region_building_data.region AS T INNER JOIN building_completion_data.Building AS T \n       AS T  ON T1.Region_ID = T2.Region_ID ORDER BY T2.Stories LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "SELECT T1.Channel_Details FROM Customers_and_Services_details.Service AS T INNER JOIN channels_and_services.channel AS T  ON T.Customer_ID = T1.Customer_ID ORDER BY T.Channel_Name.AlphabeticalFirst LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "SELECT T1.Channel_Details FROM Customers_and_Services_details.customer AS T INNER JOIN channels_and_services_details.channel AS T  ON T.Customer_ID = CUSTOMER_AND_SERVICES_ID ORDER BY T.Channel_Name LIMIT 1 OFFSET 0;"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "SELECT COUNT(Service_ID.Service_Details__r.description__c1784956002383001000000L__1780126440039119200000L_SECTION_HEADER1566981931549687875L_SECTION_HEADER15669"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "SELECT COUNT(T1.Service_Details_ID ) FROM Customers_and_Services_details__service_names2text.services AS T INNER JOIN Customers_and_Services_details1.Customers AS T  ON T.Customer_ID =  T1.Customer_ID GROUP BY T1.Service_name ORDER BY COUNTIFS_per_group LIMIT 3000000000000000000"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "SELECT CASE \n  FROM Customers_and_Services_Details.Channel AS T INNER JOIN Services_and_Channels_Details.Service AS S  ON T.Customer_ID = S.Customer_ID ORDER BY T.Status_Code , T.Company_Name LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "SELECT DISTINCT T1.analytical_layer_type FROM Customers_and_Services_Details_T205639687433249140490082808743721821793760234700886768294834299115934208825"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "SELECT T2.Service_Details FROM Customers_and_Services_details.dbo AS T INNER JOIN Services_and_Channels_details.dbo AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T.Customer_Id LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "SELECT T2.Service_Details FROM Customers_and_Services_details.dbo AS T INNER JOIN Services_and_Channels_details.dbo AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T.Channel_Detail_Code , T2.Service_detail_code LIMIT 2500000000000000000000000000000"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "SELECT T2.Service_Details FROM Customers_and_Services_details.customer AS t INNER JOIN Customers_interactions.Customer_Interaction AS t  ON t.Customer_ID = t1.Customer_ID GROUP BY t2.service ORDER BY COUNT__COUNT__ LIMIT 30000000000000000000000000000000000000"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "SELECT DISTINCT T1.Service_Details FROM Customers_and_Services_details__reviews__status_codes_with_replies__services_as_results_json_objects_.T1 AS T INNER JOIN Customers_interactions_detail___service_details__reviews__status_codes_with_replies__services_as_results_json_objects_29561934003083_297"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": "SELECT DISTINCT T1.Customer_Details FROM Customers_and_Services_details2034578946018200000100AST739353168799T0188116375162728000075297D1871A789C731E7849B"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": "SELECT T1.customer_details FROM Customers_and_Services_Details.customers AS T  INNER JOIN customers_and_services_details_ascte.T2 AS T  ON T2.Customer_ID = T1.customer_id GROUP BY T1.customer_id ORDER BY COUNT.T1.COUNTY LIMIT 10000000000000000000000000"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "SELECT DISTINCT T1.Customer_Details FROM Customers_and_Services_details__service_statuses__customer_interactions__customers_and_services_id__type210246865399413410738385941837460201789293099293088086023020"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "SELECT T1.Customer_Details FROM Customers_and_Services_details.service AS T INNER JOIN Customers_and_Services_details.customer AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T3.Status_Code LIMIT 10000000005786941955237059293616387558415"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "SELECT T2.Service_Details FROM Customers_and_Services_details.Service AS T INNER JOIN Customers_and_Services_details.Customer AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T3.ServiceName , T3.Status_Code LIMIT 1000 OFFSET 100000000000000000000000000"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "SELECT T2.customer_details FROM Customers_and_Services_customers_and_services_ids_t1.Customers AS T , Customers_and_Services_customers_and_services_ids_t2.Customer_ID AS t INNER JOIN Customers_and_Services_customers_and_services_ids_t3.Service AS T  ON T.customer_id = T3.customer_id ORDER BY T1.customer"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "SELECT T2.Customer_Details FROM Customers_and_Services_details.Service AS T INNER JOIN Customers_and_Services_details.Channel AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY COUNTROWS_BETWEEN LIMIT 0 OFFSET 3493000000650543842582700222145455"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "SELECT T2.Customer_Details FROM Customers_and_Services_details.services AS T , Customer_Interactions.Customer_ID AS T , Customers_and_Services.Service_Details AS T WHERE T.status_code = 'NA' GROUP BY T1.Customer_ID ORDER BY SUM_TOTAL LIMIT 10000000000000000000000000000"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "SELECT DISTINCT T2.services_details FROM Customers_and_Services_Details__T1.customer AS T , Customer_Interactions_Details__T1.Customer AS T WHERE T1.customer = 'customername' GROUP BY t2.company ORDER BY COUNT_DISTINCTTABS_COUNT__T2.services_details LIMIT 10000000000000000000000"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "SELECT COUNT(T1.Customer_ID ) FROM Customers_and_Services_Details__Details2_384076590000000__Customers_And_Services_Details__Name_as_X02A6C17B990A5D1F5T2E587AB105D9D4F5LHU23G3M130199"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "SELECT T1.Customer_Name FROM Customers_and_Services_details.dbo AS T INNER JOIN Customers_and_Services_details.dbo AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY strftime.chr_strtoll_pattern.search1605452937887894793175_ARGINAL197425934"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "SELECT T1.Customer_Details FROM Customers_and_Services_details.CUSTOMERS AS T , CHANNEL_DETAILS.PART_OF AS T WHERE T.Service = 'Kutch' INNER JOIN Customers_and_Services_details.CHANNELs AS T  ON T.Customer_ID = T2.Customer_ID GROUP BY T1.customer_id ORDER BY strftime_date_strtime"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": "SELECT DISTINCT T1.Service_Details FROM Customers_and_Services_details2users2customersT2c__services_as_codes_and_labels_detail2users3c2s_details3user_interactions3ratedT3c2s_details4customers_and_services6INTEGERSASINNOVA2936106709583469163221"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "SELECT DISTINCT T1.Services_details FROM Customers_and_Services_Details2059473846628200000_1948512056103739_46303214951547710000602329139597331469156631"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": "SELECT T1.Channel_Details FROM Customers_and_Services_Details.customer AS T INNER JOIN Services_and_Channels_Details.service AS T  ON T.Customer_ID = T1.Customer_ID ORDER BY T1.Service_Rating LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "SELECT DISTINCT T1.Services_details FROM Customers_and_Services_Details204357989662821100018250561259209765_T1.Customer AS T , Services_and_Channels_Details20435814177387455000849160244"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": "SELECT T3.Channel_Details FROM Customers_and_Services_Details.CHANNEL_DETAILS AS T INNER JOIN Services_and_Channels_Details.Service_details AS T  ON T.Customer_ID = T1.Customers_and_Services_ID ORDER BY T2.ServiceCode LIMIT 1500000000000000000000000000"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "SELECT T3.Channel_Details FROM Customers_and_Services_details.Channels AS T INNER JOIN Customers_interactions.Customer_Interaction AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY strftimeLEFTDATE_TIMESTAMPTZ.codes_first LIMIT 3 OFFSET 0;"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "SELECT T2.service_details FROM Customers_and_Services_Details.services AS T INNER JOIN Customers_interactions_details.Customer AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.Status_Code , T2.Service_ID , T2.Service_id , T2.Channel_details , T2.service_details , T3.status_code , T2.customer_details LIMIT "
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": "SELECT T1.Customer_Details FROM Customers_and_Services_details.dbo AS T INNER JOIN Customers_interactions.dbo AS T  ON T1.Customer_ID = T2.customer_id ORDER BY T2.Status_Code LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), COUNT(DISTINCT ), CASE  FROM Customers_and_Services_Integrations_Successful_Status_Codes__CASES102645832501500000009WHERESTATUSCODEs.INTEGER INNER JOIN Services_and_Channels_Details__LANGUAGES_AND_TYPES__LANGUAGE"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), COUNT(DISTINCT ), CASE  FROM Customers_and_Services_details_integration_platforms_tableWHEREserviceidstartswithSUNSETANDSTATUSCODE__contains__strftime340561721729247658803_36025640287886545232051"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "SELECT T1.Customer_Details FROM Customers_and_Services_details.dbo AS T INNER JOIN Customers_and_Services_details.dbo AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T3.Service_id LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": "SELECT T2.Customer_Details FROM Customers_and_Services_details.service AS T INNER JOIN Customers_interactions.customer AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Status_Code LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "SELECT T1.Customer_Details FROM Customers_and_Services_details.SERVICE AS T INNER JOIN Customers_interactions.Customer AS T  ON T.Customer_ID = CUSTOMER_INTERACTIONS.Customer_ID ORDER BY Customer_Interaction_ID LIMIT 1000000000000000000000000000000000000"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "SELECT T2.service_details FROM Customers_and_Services_Details.service AS T INNER JOIN Customers_and_Services_Details.Customer AS T  ON T1.customer_id = T2.customer_id ORDER BY T3.service_name LIMIT 0 OFFSET 240000000000859722682495016595957459"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": "SELECT T2.Code FROM Customers_and_Services_details.Customers AS T , Customer_Interactions.Customer_Details AS T WHERE T.Service_ID = 'SI045306' GROUP BY T2.LayerTypeCode ORDER BY SUM_usage_count LIMIT 1280000000000000000000000000000000000"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "SELECT DISTINCT T2.AnalyticalLayerTypeCode , COUNT(T2.analyticalLayertypeid_name ) FROM Customers_and_Services_Details.Services AS T  INNER JOIN Customers_and_Services_details_details17098466307158957101ONTRIPASDMYZNYXQ3TUJG3E5KLU2MG"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "SELECT T2.services_details FROM Customers_and_Services_Details.dbo AS T INNER JOIN Customers_and_Services_Details.dbo AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T3.status_code LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "SELECT T1.Service_Details FROM Customers_and_Services_Details.SERVICE AS T INNER JOIN Services_and_Channels_Details.Service AS T  ON T.Customer_ID = T1.Customer_ID ORDER BY CASE \n                LIMIT 2009245656983576455641017309656471852866"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.type_of_powertrain__Cust_Id__T1.Name__Cust_Id__T235628690458726986962__Model_Year__Id__Renting_History_id__Discount_Name__discount_Type_of_powertrain__T1385632233"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.Price_per_unit__100mph__6845__3379_12075243_62295835987_0__41826459_47_02373252_79568020632_58728225_"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles_2003__model_year_as_vendorsT1.Vehicle AS T INNER JOIN Customers_2009_as_VENDORST1.Customer AS C  ON T1.id = C.customer_id ORDER BY CASTT1.model_year_vendorsT1.model_year_desc LIMIT 1"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles_v2.Vehicle AS T INNER JOIN Renting_history_v2.Renting_History AS T  ON T1.id = T2.vehicles_id ORDER BY T2.model_year LIMIT 300000000000000000000000000000000000"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": "SELECT T1.Model_year FROM Vehicles_Type_of_powertrain_type2_45T220V3700T18M_W6_CJKASA3_NX5A53U32242418_LG43FUN09305_CALTROPILOTALONATP125784155010"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles_info_discounts.models AS T INNER JOIN Vehicles_info_discounts.powertrains AS T  ON T1.id = T2.id GROUP BY T2.model_year ORDER BY T3.type_of_power_source_name , t3.name LIMIT 500000000000000000"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "SELECT DISTINCT T1.name , T1.model_year FROM Vehicles_2013_or_2014T1_as_T2a16v2c87680592706C85179154T3067GASL2502GASL243114279260707T1523T"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "SELECT DISTINCT T2.name , T3.model_year FROM Vehicles_type_of_powertrain_and_years_as_fuel_costs_on_PRIMARY_KEY_NAMES_OF_T13_TO_T201314_AS_VALUES_IN_TABLETOPRATE__DISTINCT_POWERTRAIN_MODELS_TOTAL_FUEL"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles_type_info.v1 AS T INNER JOIN (SELECT CAST_T2.model_year FROM Vehicles_type_info.v1 AS T INNER JOIN cars_model_details.dbo AS C  ON T.id = C.Vehicle_ID ORDER BY CAST_T2.Model_Year  DESC, DATEPART__YEAR__ADD_DATE , T2."
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "SELECT DISTINCT T2.model_year , T2.name FROM Vehicles_Membership_Credit_Balance.Vehicle AS T INNER JOIN Renting_history.renting_history AS T  ON T2.id = T1.vehicles_id ORDER BY T1.Year.month , T1.Township_no__strftimeformat.concat_date_column LIMIT 100000"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles_Type_Of_PowerTech_Table_20160308T145760039S_T218883_39VX33214T3G5044UZ30315V354A_T156VK120WBM2233T1"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "SELECT T1.model_year , SUM(CASE ) AS total FROM Vehicles_type_of_powertrain__combined_fuel_economy_rate__2012__type_of_power_engine___name__discounts_innerjoinVehicles__groupingbyproductmodelname__groupingbyproductproductmodelname__modelyears__GROUPINGBYAVEHOLDERIDENTIFIERASINTH"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles_Type_Of_PowerTechrysts.Vehicles AS T INNER JOIN Customers_Discounts_Types__Into_Membership_Credit_types_AS.T AS T  ON T1.name = T2.Name GROUP BY T2.model_year ORDER BY SUMCOUNT_TYPE__INTO_Membership_Credit__type__SUM__SUM"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles_Type_Of_Powertrains_byModelYearsT10063945805029743000000ASN21R6197993848355D710203G3684453927L123R55161881"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": "SELECT AVG(T2.total_fuel_costs__f_rate__395147088616563000000000L ), MAX(T2.total_fuel_costs__f_rate__3951470886165630000000L ) FROM cars_discount_rental_history.vehicles"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "SELECT AVG(T2.total_fuel_costs__lte90m3i179453600__c18b22aa2a9d952b11634d10.total_fuel_costs__r4374o51313141185__c191ebac69e54a187262"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": "SELECT DISTINCT T1.name , T2.model_year FROM Vehicles_cityfueling_table_data190436785373970490000001798T1ASWJT36GF8604GH46122A219T518C50T120LW0025151"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "SELECT DISTINCT T1.name , T2.model_year FROM Vehicles_data2017_12396084000032345536692102722758891835420607920202721544684247865409121081"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles_Type_Of_PowerTrain_Rental_History__Vehicle_Types_T1_T3_T5_T7_T8_T9_T10__Renting_history_table1506097842212732944134677161888225130"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles_FuelEconomy_Studies_by_PowertrainT10396527194518332101D01F22396967D3063S_CARS_as__Gasoline__ALL_STANDARD_COUNTRYMKES_2016_"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "SELECT DISTINCT T1.name , T1.age , T2.membership_credit FROM Customers_detail_reports.customers AS T INNER JOIN discounts_details_reports.discount AS T  ON T1.customer_id = T2.id GROUP BY T1.id ORDER BY T1.name LIMIT 1000000000000000000000"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "SELECT DISTINCT T1.name , T2.age FROM Customers_303857400996829800000__Customer_Powertrain_290002732502260000000164TG1306T025D7584277584677000000"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "SELECT T2.name , T1.age FROM customers_info.customers AS T , discounts.vehicles AS T INNER JOIN customers_info.customer AS T  ON T1.ID = T2.id ORDER BY T.membership_credit LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "SELECT DISTINCT T1.name , T1.age FROM CustomersT32785040902610800000038271590138613452_v1391282420657750000511079309877511734123111"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "SELECT CAST.age FROM Customers_Membership_Credit_AVERAGE_ONLY.customers AS T INNER JOIN Vehicles_ID_Age_AVG.Vehicle ON T.id = Vehicles_Id ORDER BY MINVAL , MAXVAL LIMIT 1000000000000000000000000000000000000"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": "SELECT CASTDISTINCT \n    FROM Customers.name AS T , Discounts.customers AS T INNER JOIN Vehicles.vehicle_model AS T  ON T.id = Vehicles.ID ORDER BY AVG \n         LIMIT 150208675224300000000 OFFSET 241950332551000"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "SELECT T2.name FROM Discounts_all_vouchers.T2 AS T INNER JOIN Vehicles_discounts.T1 AS T  ON T1.id = T2.vehicle_id ORDER BY T.name LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "SELECT T2.name FROM Customers.membership_credit AS T LEFT JOIN Vehicles.model_year AS T  ON T1.customer_id = T2.id GROUP BY T2.name ORDER BY COUNT.T3.FLIGHTS_PER_YEAR_RATE LIMIT 0 OFFSET 15149731641539860483561543"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": "SELECT DISTINCT T1.name , SUM(T2.total_hours__real__86400__value__value__time__value__value__value__value__time__value__value__value__value__value__value__time__value__value__value__value__value__value__time__value__value__value__value__value__value__value__value__value__value__value__value__value__value__value"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "SELECT DISTINCT T1.name , SUM(T2.total_hours__per_365_rental_days__vehicle__discount_id__customer_id__value__auto_date__time__first__vehicles__type_of_powertrain_name__last_day_vehicle__years_since_preproduction_release_FROM ) AS total , SUM(T2.total_hours"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles_Renting_HISTORY_tblvehiclestheatre_as_vehicle_model_years_table10783954266788_0013138578165799000025WHERETRIPDONEMENTSTAMPWITHINTOTALDOWNTIME1280"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles_not_rented.Vehicle AS T INNER JOIN Renting_history.Vehicle AS T  ON T1.id = T2.vehicles_id GROUP BY T1.name ORDER BY COUNT.total_hours LIMIT 10 OFFSET 500000000000000000000000000"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": "SELECT DISTINCT T1.name FROM Customers_renting_history_table_v2.customer AS T , Renting_history_table_v2.vehicles AS T WHERE COUNT  =   (SELECT COUNT(T3.id024958268507609401300428875365477323714103125"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "SELECT T1.name FROM Customers_Renting_History_Recordings121049758326628100000T1096493188308798WHERE1.total_hours INNER JOIN Renting_history_recordings2134702978773502360000T1"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": "SELECT T1.name , T2.model_year FROM customers_renting_history_table16850469734366000000sT0218113647115300000sT181945746126750000sT0945222899602000"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "SELECT DISTINCT T1.name , T2.model_year FROM Renting_history_customers_vehicles_rental_history_table_1990T03_56426873793793825205T20143520306T2017729585458572905T201"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": "SELECT DISTINCT T1.name FROM (SELECT DISTINCT T2.model_year FROM vehicles_info.Vehicles AS T INNER JOIN Renting_history.renting_hours ON T1.id = rental_details.vehicle_id ORDER BY SUM_RENTING_HOURS.value LIMIT 1) AS t ORDER BY total_hours LIMIT 100000000000000"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles_Renting_Hours_by_Vehicle_Model_Year_and_Type_of_Powertrain_TOTAL_HOURS_as_Five_2768540294963557400000201389038987000227153163"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "SELECT DISTINCT T2.name FROM Renting_history.Vehicles AS T INNER JOIN Customers.name AS T  ON T1.customer_id = T2.id GROUP BY T1.name ORDER BY COUNT_STRS_OF_IDENTITY_FROM_T1_30484195_27769147_W26RJHX_INNER_LEFT_COUNTER_"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "SELECT DISTINCT T1.name FROM Customers_rents_history_purchases_subscriptions_offers_discounts_as_rewards_customers_as_customers_id_str_202857743926489410000000000522899124877000000000000"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": "SELECT DISTINCT T1.name , T2.model_year FROM Vehicles_renting_historyT1.Vehicle AS T INNER JOIN Renting_historyT1.Car AS T  ON T1.vehicle_id = T2.id ORDER BY T2.total_hours LIMIT 30 OFFSET 30000000011956671484110"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "SELECT DISTINCT T1.name , T2.model_year FROM Renting_history_data21785649831130000000D1TASWU1A9A8GD41802567L9874SALR1996ASUZWJL28D4UV123M5H357486"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "SELECT AVG(T2.City_fuel_economy_rate01489657135326130000010150486183162422966186585453509763836916594814644383577881203"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "SELECT AVG(T2.fuel_economy_rate__doubled__7560039168004000000__3953596257203468988648927983874900000982854105694323717810000"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "SELECT AVG(T2.amount_of_loan__dollars_paid__Currency__code__decimal100000536887389700000000000000000000000000000000.ToString2659494849623888101010"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": "SELECT AVG(T2.amount_of_loan__total_amounts__2014__789935642383614164398__2014__652751829293059374506__2011__18000848403630198812__2"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": "SELECT DISTINCT T1.biographical_data , T1.student_details FROM (SELECT DISTINCT T2.T3.student_id , T2.T2.detention_type_c FROM Addresses_listing154589000161467215710121763577551047565404780553"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.addresses AS T INNER JOIN Transcripts.transcript AS T  ON T1.transcript_id = T2.transcript_id GROUP BY T1.student_details ORDER BY COUNT.total_duration LIMIT 10 OFFSET 300649812541532750228146115"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "SELECT DISTINCT T2.address_details FROM Addresses__address_type_code__address_type_description__prefix_net_as_text_108985446913326708465D72052483D4094B328256G0309E25359D8A230C821D58"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": "SELECT DISTINCT T1.address_details FROM Addresses.address AS T LEFT JOIN Detention_Type.classroom AS T  ON T.address_id = T2.address_id ORDER BY T2.detention_type_description LIMIT 200000000000000000000169722430577896283853639"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.stu_students AS T INNER JOIN Addresses.address_details AS T  ON T1.student_id = T2.student_id ORDER BY T1.student_details LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.stu AS T INNER JOIN Student_Details.student AS T  ON T1.student_id = T2.student_id ORDER BY T2.first_name , T2.last_name LIMIT 20000 OFFSET 300000000005665948222726646"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "SELECT T3.address_details FROM Addresses__Ref_Achievement_Types__Addresses__address_id_list160000000935738780000000LG0764630624950234760000LG077929735420000LG07813"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "SELECT DISTINCT T2.achievement_type_description FROM Addresses__addresses_t3158476091368000000L_c12052664749962376400TGU47NQ68T24NXW6ZZT5WGYXM6CZ3L159939"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "SELECT DISTINCT T2.teacher_id FROM Behaviour_Monitoring_details.address AS T INNER JOIN Transcripts_details.student AS T  ON T1.behaviour_monitoring_id = T2.student_id ORDER BY COUNTDISTINCTT1.transcript_detail__r.first_name_middle_initial LIMIT 100000000000000000"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "SELECT DISTINCT T2.teacher_name FROM Behaviour_Monitoring_Student_Teacher_Registration_Data_Change_Requests_2018_v2439590762895_52270261_52523315_52135197_16174525119324550"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "SELECT T1.description FROM Addresses_20141231WHEREaddressIDINLISTREF_Achievement_Type.achievement_type_code ORDER BY T2.DESCRIPTION LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "SELECT T1.description FROM Behaviour_Monitoring_events_details__event_types__ref_event_types_details__addresses_as_descriptions__detention_type__address_type_codes_as_titles_in_descending_order_WHERETAS_DESCENDING_ASCENDING_IDDENIZATION_ORDERED_RESULTS_WITH_PERIODS_AND_DESCRIPT"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": "SELECT DISTINCT T2.address_type_description FROM Behaviour_Monitoring.students AS T INNER JOIN Addresses.address AS T  ON T1.student_id = T2.student_id ORDER BY T1.behaviour_monitoring_details.DETAILS LIMIT 5000000000000000000000000000000"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "SELECT DISTINCT T2.address_details , T1.address_type_description FROM Addresses_events_registrations_and_notes_of_interest_events_registrations_and_notes_of_interest_events_details_v3058946282718_828281_as_TEXT__SUBJECT_TYPE_REDACTED_FROM_TEXT_VOCABULARY"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": "SELECT DISTINCT T2.address_details FROM Addresses__Address_Types__Ref_Event_Types.T1 AS T INNER JOIN Ref_Achievement_Type.T3 ON T2.address_id = T3.address_type_code ORDER BY T2.address_id LIMIT 10 OFFSET 500000009049892670962163146"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "SELECT DISTINCT T2.address_details , T1.student_details FROM Addresses_Additions_Inserts1069483576340340590016203738581156928415089725652922649507477558418333836"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "SELECT DISTINCT T2.biographical_data , T3.date_of_transcript FROM Behaviour_Monitoring.behaviour_monitoring AS T INNER JOIN Students_Teacher_Achievement.addresses AS T  ON T1.student_id = T2.students_id ORDER BY T3.date_of_transcript LIMIT 50000000000000"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "SELECT DISTINCT T2.student_details , T1.date_of_transcript FROM Addresses_personalised_as_events_and_events_with_addresses_detailing_attendance_interactions_and_demographics.T1 AS T , T3.T4 AS T WHERE T1.student_id = (SELECT T2.student_id FROM Addresses_personalised_as_events_and_events_"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "SELECT SUM(T1.result_details__list__value__first__to__string__iso_8601__first__of__strftime__format__first_letter__grouping___type__group__first__of__text__substring_to_substring__substring__substring__first_letter__to___string__substring__substring__2nd__to__first__and___second__groups__first__as___strftime__format__first"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "SELECT COUNT(DISTINCT ), T2.description FROM Ref_Event_Types.behaviour_monitoring AS T INNER JOIN Behaviour_Monitoring.student_details AS T  ON T.student_id = T2.student_id GROUP BY T1.event_type_code ORDER BY SUMOFCOUNTARESULTSBETWEEN450327116890471120 LIMIT "
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.TRANSCRIPTS AS T INNER JOIN Students_Details_by_Addresses.T2 ON T2.students_id = T1.student_id ORDER BY T2.address_details LIMIT 300005984766705833000000000000000000"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": "SELECT DISTINCT T2.biographical_data , T2.details FROM Addresses.address AS T INNER JOIN Behaviour_Monitoring.behaviour_monitoring AS T  ON T1.address_id = T2.address_id ORDER BY T2.result , SUM_TOTAL24HoursBETWEENFROMTABLIGHTING  DESC LIMIT 300000000000"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.STUDENT AS T INNER JOIN Student_Details.T1 ON T1.student_id = T2.student_id ORDER BY T2.behavior_monitoring_details.common_result LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring_details_and_Rates_by_Student_ID.T1 AS T INNER JOIN Detention_type_codes_by_Student_ID.T AS T  AS T  ON T1.student_id = T2.students ORDER BY COUNT_BARCODES__TOSTATE__LIMIT__800 LIMIT 15000000"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.TRANSCRIPTS AS T INNER JOIN Students.student_details AS S  ON T2.student_id = S.student_id ORDER BY T3.date_of_transcript LIMIT 10 OFFSET 18946755991193585928666772674345"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "SELECT DISTINCT T2.event_details FROM Behaviour_Monitoring.Student AS T INNER JOIN Events.event AS T  ON T1.student_id = T2.student_id ORDER BY T1.date_of_transcript_details LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": "SELECT COUNT(DISTINCT ), T2.event_type_description FROM addresses.address_id AS T INNER JOIN ref_event_types.events AS T  ON T.address_id = T2.student_id ORDER BY COUNTA2T1045376373823_CASE001_IDLHNG4ZDG3T739683551150_C"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": "SELECT DISTINCT T2.event_type_description FROM Ref_Event_Types.addresses AS T INNER JOIN Ref_Achievement_Type.events AS T  ON T1.address_id = T2.address_id GROUP BY T3.event_type_code ORDER BY SUM_COUNT_OF_CASES_RETURNed_FROM.length , T2.event_description LIMIT 1000000000"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "SELECT DISTINCT T2.achievement_type_description FROM Addresses10987549331686120000021146512251309702925286884400224700303783297387217865949308520"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "SELECT T1.achievement_type_description , T2.event_type_description FROM Addresses_transcripts.address AS T INNER JOIN Ref_Event_Types.event_type AS T  ON T.address_id =  T2.event_type_code ORDER BY T.address_details LIMIT 100000000000000000000000000000"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "SELECT COUNT(DISTINCT ), T2.student_details FROM Student_achievement_type_code_table.behaviour_monitoring AS T INNER JOIN detention_types_detail.address AS T  ON T1.address_type_code = T2.address_type_description ORDER BY CASE \n                              LIMIT 0 OFFSET 2080539009763450"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": "SELECT COUNT(DISTINCT ), T2.event_type_description FROM Transcripts.student AS T INNER JOIN Addresses.address_id AS A  ON T1.student_id = A.student_id GROUP BY T2.event_type_code ORDER BY COUNT.COUNT_SUBSTR_INSTRS.FINDSTRS LIMIT 10000000000000000000000"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": "SELECT DISTINCT T2.date_of_transcripts , T1.transcript_details FROM Behaviour_Monitoring_details_events_transcripts_recordings_events_details_events_event_types_attributes_and_attributes_referenced_in_table_105714269337801410032WHEREeventtypeid__FK_REFERENCESRef_"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "SELECT DISTINCT T2.date_of_transcript FROM Behaviour_Monitoring_details.behaviour_monitoring AS T INNER JOIN Transcripts.student AS S  ON T1.student_id = S.student_id ORDER BY T2.date_of_transcript LIMIT 4000000000000000000000000000000"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": "SELECT DISTINCT T2.achievement_type_code , T1.achievement_type_description FROM Ref_Event_Types.event_type AS T  INNER JOIN Addresses.address_details AS T  ON T1.address_id = T2.address_id GROUP BY T2.achievement_type_code ORDER BY T2.date_of_transcript LIMIT 100000000000"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "SELECT DISTINCT T2.achievement_type_description , T1.event_type_code , T2.details FROM Ref_Achievement_Type.t1 AS T INNER JOIN Behaviour_Monitoring.behaviour_monitoring_details AS T  AS T  ON T2.student_id = T.student_id GROUP BY T2.achievement_type_description , T1.event_type_"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "SELECT DISTINCT T2.starttime , T2.endtime FROM Behaviour_Monitoring_Recordings_by_student_id_and_addresses.stu_detail AS t INNER JOIN Ref_Detention_Type.T2 AS t  ON t.detention_type_c = 'sat' ORDER BY T1.starttime , T2.endtime LIMIT 2000000000000"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "SELECT DISTINCT T2.starting_time , T1.ending_time FROM Student_Behaviour_Monitoring_Reports_Events_Taken_By_Students_RESTRICTED_TO_DATE__date_sub_milliseconds_AS_FUNCTIONS_AS_SELECT_SQL_TARGETS__03474253655189764228000"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "SELECT DISTINCT T2.student_details FROM Addresses_Listing_Table.Address AS T INNER JOIN Behaviour_Monitoring_Details_Table.Student AS T  ON T1.address_id = T2.student_id ORDER BY T2.student_details.substr__contains__suite_TITLE_SUITE__LATITUDE_EVERYWHERE__LONGITUDENTION_TEXT__SUBSTR__"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.TRANSCRIPTS AS T INNER JOIN Addresses.address_id AS A  ON T1.behaviour_monitoring_id = T2.address_id ORDER BY T2.SUBSTR__STRING_VALUE__ , A.STUDENT_ID_HERE LIMIT 30000000000000000000"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "SELECT DISTINCT T2.address_details FROM Behaviour_Monitoring.Student AS T INNER JOIN Addresses.Teacher AS T  ON T1.student_id = T2.student_id GROUP BY T2.first_name , T2.last_name ORDER BY t2.first_name , t2.last_name LIMIT 30 OFFSET 197456352834610"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "SELECT DISTINCT T2.student_id , T1.teacher_details FROM Students_transcripts.T1 AS T INNER JOIN Behaviour_monitoring.BM AS T  ON T1.student_id = T2.student_id GROUP BY T2.course_name ORDER BY CASTTRIM_STRINGEOLD39842044567795382323"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": "SELECT DISTINCT T2.course_id , T1.teacher_student_details.ID FROM Ref_Address_Types.address AS T INNER JOIN Student_Details.course AS T  ON T1.address_type_code = 'C' ORDER BY COUNTAINS.Teacher_student_details.course_id LIMIT 1000000000000000000000000"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "SELECT DISTINCT T2.teacher_id , COUNT(T1.course_title_ids_for_student_id_str_v2014080902347500000_a77D7F3C_UNKHNXGWGYHJZVLQC137246741400000_P78A32B"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "SELECT DISTINCT T2.course_id FROM Behaviour_Monitoring.Student AS T , Addresses.address_type AS T , Ref_Event_Types.event_type_description, ref_event_types.event_type_code LIMIT 1000000000001325647790143843679151362484645"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": "SELECT DISTINCT T2.student_id , SUM(CASE ) AS percents FROM Ref_Address_Types_Summary_Student_Courses_Details_Ref_Events_Behaviour_Monitoring_Summary_Event_Detail_RE_DETENNANCE_TYPE_COMMONS17496082T154143475175352175WHERECASETRIM"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": "SELECT DISTINCT T1.student_id FROM Behaviour_Monitoring.events AS T INNER JOIN Transcripts.transcript AS T  ON T1.behaviour_monitoring_id = T.transcript_id ORDER BY CASTT2.student_details_to_number LIMIT 5000000000000000000000000000000"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "SELECT DISTINCT T1.student_id FROM Behaviour_Monitoring.student AS T INNER JOIN Students.course AS T  ON T.student_id = T1.student_id GROUP BY T1.student_id ORDER BY COUNTWHATINLINEIDS_OFTWERK.STUFFER.course_name LIMIT 20000000099865107400000"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "SELECT DISTINCT T2.address_type_description FROM Behaviour_Monitoring.addresses AS T INNER JOIN Ref_Address_Types.address_type AS T  ON T1.address_id = T2.address_id ORDER BY strftime_date_name LIMIT 200000000000000000000000000000000000"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "SELECT DISTINCT T2.event_type_description FROM Behaviour_Monitoring.addresses AS T INNER JOIN Ref_Event_Types.event_type AS T  ON T.address_id = T1.address_id GROUP BY T3.detention_type ORDER BY COUNTDOWNSCATEGORY LIMIT 100000000000000000000000000"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "SELECT DISTINCT T2.student_details FROM Student_Bio_Data.Student AS T , Addresses.address_type AS T INNER JOIN Ref_Address_Types.Achievement_Type AS T  ON T1.student_id = T2.student_id ORDER BY SUMROLLINSTUDENT_AMOUNT LIMIT 0 OFFSET 6553539457112000000"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.TRANSCRIPTS AS T INNER JOIN Addresses.address_details AS T  ON T.address_id = A.address_id ORDER BY SUMTHABERIGECLOUD31607748387752391__1917532555_ LIMIT 1000000000"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "SELECT MAX(date_of_transcript.date_of_transcript_details__ref_achievement_type_description__c__G01632725978914671626C69_78617464413710416882G02900134799838034721212"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "SELECT MAX(T1.date_of_loan__029613272530426820200000031893586282203492758212117453069763131937744869695383075288213"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": "SELECT DISTINCT T2.student_details FROM Student_Details_Mentioning_Bio_Data_Aggregated_By_Addresses_as_Ref_Address_Types_Where_No_Loan_Value_Is_Taken_OUTSTANDING_ADDRESS_RESPONSE_T0912564_T1054889_LONDON_ADELPHIA_327"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "SELECT DISTINCT T2.student_details FROM Student_Details_Offerings_Records_Offering_Detail_Recordset1_T2018_795267_306984275693811838346_soldasg2018.msp AS T  WHERE T2.student_id = (SELECT T1.student_id FROM Student_"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "SELECT strftime_date__strftime_format__FORMATTED , strftime_date__strftime_format__DATE__STR_TO_TIMESTAMP FROM Student__TRANSCRIPTS__WHERE__student_details.payment_outcome INNER JOIN Addresses__REFS__ON__student_id__AND__address_id__INERTERACTIVE_UNITED_STATES_ASVADM19302"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "SELECT DISTINCT T2.date_of_transcript FROM Behaviour_Monitoring_Transcripts_byTeacher_Details_student_details_details19396270521483429_T1988431_10827456665_gmwAS4AY3X4IWZG3HBXG1LWK"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": "SELECT DISTINCT T2.address_details FROM Behaviour_Monitoring.students AS T INNER JOIN Addresses.student AS T  ON T.student_id = T2.student_id ORDER BY T2.date_of_transcript LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.student AS T INNER JOIN Transcripts.transcript AS T  ON T1.student_id = T2.student_id ORDER BY T2.date_of_transcript LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "SELECT DISTINCT T2.student_id , SUM(T1.loan__balance__c__5390846173822151473__balance__rq__rq_rq___539360605439154137__balance__rq__rq__rq___4963070668213"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": "SELECT DISTINCT T2.student_id , SUM(T1.loan_balance__longer_than_1000__c__amount__c__gross__13278639457906906928484983115563637916440369795323960116212"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": "SELECT DISTINCT T2.student_id , T1.course_details , COUNT(T3.course_id ) FROM Behaviour_Monitoring_Details_Event_Types_Codes_to_Detention_Type_code_Answers_List_AS_T2join_T3ONTeacher_INSTRUCTOR_TABLETOPLEFTONTOBEGINNIGHTTOTHERWHEREID__c.T1 AS"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": "SELECT DISTINCT T2.student_id , T1.bio_data__c1345709648124333228__c298a4b840824e50_n_283164_T1_FROMTales.T2 , SUM(T2.number_of_courses_taken__c324721362"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), strftime.fieldname FROM Student_Status_History_Details__Incident__Detention_Type_C20193346822759WHEREDate_List__strftime.formatdate__formattime__datetime_abbrv__datetime_abrv__timestamp___2019_11_22  AS S WHERE DATE_LIST__STR"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": "SELECT COUNT(DISTINCT ), T2.student_details FROM Addresses.address_id AS T INNER JOIN Behaviour_Monitoring.behaviour_monitoring_details AS B  ON T.address_id = B.address_id GROUP BY T2.student_name ORDER BY COUNT_CONVERT_DATE_FROM_FORMATS LIMIT 100000000000000000"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "SELECT DISTINCT T2.address_type_description FROM Addresses12237950014896382800000__asdf66a96340664742C30535D04E7592B3250008697D68738A38F144C844696"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "SELECT DISTINCT T2.address_type_description FROM Addresses_Listings_Changes_Records_by_Student_ID_as_T1103995716568622000_C3G8RGHU8D0WG419M73020192249456997_s20521893653"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.TRANSCRIPTS AS T INNER JOIN Student_Details.Student AS T  ON T1.student_id = T2.student_id ORDER BY T3.detention_type_c LIMIT 10 OFFSET 0"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring.addresses AS T INNER JOIN Ref_Address_Types.events AS T  ON T1.address_id = T2.address_id ORDER BY T.address_details LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": "SELECT DISTINCT T1.address_details FROM AddressesASA3634200700052800100000052089T00038806T25_6825873974399715000030294T0069T8965429561873"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "SELECT strftimeleft.starttime , strftimeleft.endtime FROM Behaviour_Monitoring_addresses__student_details_as_text_join_detention_type_description_as_string_join_detention_type__table_name__21842965_WHEREevent_type_code__description__c.stid INNER JOIN addresses_as_text__descrption_as_varchar_"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "SELECT strftimeutc FROM Ref_Event_TypesWHEREevent_type_description__started__20161134T095807.longitude INNER JOIN (SELECT DISTINCT T2.address_type_id , SUM(CASE ), CASTDOWNRIGHT FROM Behaviour_Monitoring1WHEREevent_type_description__started__20161134T0958"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "SELECT T1.date_of_detention FROM Behaviour_Monitoring.events AS T , Addresses.address_id AS T WHERE T2.student_id = '85913' ORDER BY T2.firstname , T1.lastname LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "SELECT T1.Name FROM Author_Books.Author AS T INNER JOIN Orders.Order ON T1.idOrder = T2.IdOrder ORDER BY T1.name LIMIT 100000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "SELECT DISTINCT T2.name FROM Orders_Inventory.Orders AS T  INNER JOIN Author_Book.Author AS T  ON T1.IdOrder = T3.idAuthor ORDER BY T2.NumCC LIMIT 1000000000000000000000000000000000000000000000000"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "SELECT DISTINCT T2.Name , T3.Address FROM Orders_Listing201847566923820000024849581678990569WHERETOTALREASONABLECLEARINGFORCEPAYMENTOF300982957024265000038361216"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "SELECT DISTINCT T2.Name , T3.Address FROM Orders_INVOICE.Client AS T INNER JOIN Orders_Invoice.T1 AS T  ON T.IdOrder = T1.id ORDER BY T1.Name , T3.Address LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": "SELECT DISTINCT T1.title , T2.PurchasePrice , T2.SalePrice FROM Books_OrderboardboardingTicketINGBOARDINGORDERSASOUNDBOOKTICKETINGORDERSWHEREISBN_ORIGINATEDFROMBooks_Orders2163077685491755689194377541868113595"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "SELECT DISTINCT T1.title , T2.ISBN , T3.purchaseprice FROM Orders_ListingT2006589740279840678946891T24GWC316461D7083TU52697TU513072D463TU5580362D51"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "SELECT COUNT(*) FROM Author_book.ISBN AS T INNER JOIN Orders_book.Book AS B  ON T.ISBN = B.ISBN ORDER BY T.title LIMIT 100000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": "SELECT COUNT(*) FROM OrdersWHERENumCCBINARY1500302193811749621511200055680930185256724963920534091647031255059887138870100840338201"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "SELECT COUNT(DISTINCTTAuthorA.Name ) FROM Author_BookWHEREPurchasePriceNearlyEqualTo100000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.author_idA1.quantity_received__amount__revenue__quantity_paid__total__amount__order_numCASLQ1650834423439367137951070463632911044869649323517218168"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(IdClient.Name ) FROM OrdersWHERENumCCIs0193785631498231611000016850736359993829856125490885440836129032807317387516847251696"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "SELECT COUNT(idClient.Name ) FROM OrdersWHEREAddresses.Address INNER JOIN ClientsOnAddressesONOrders.IdOrder AS T \n         AS T  ON T.NumCC = idClient.NumCC GROUP BY idClient ORDER BY COUNTDISTINCTTogetherCountsInsideORIGINALORDERINGFROMORIGINALORDERINGFORCECONTACTSUBJECTSINTERSECTIONSWHEREAddresses.Address"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "SELECT DISTINCT T1.Name , T2.Address FROM Orders_details_and_ClientsT208956934701148670AST1_FK_INNER_JOINclientT20924915869657800T213107739595AST1_LEFT_JOINClientsT2"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "SELECT DISTINCT T1.Name , T2.Address FROM Orders_AllTieredWHEREOrderEDGES.id ORDER BY T2.Name LIMIT 1000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": "SELECT DISTINCT T1.title , T2.name FROM Books_OrderboardingORDERSWHERETITLEIDs_WITHIN10MERGETITLEIDSANDAUTHORNAMEsWHATTIVES_CONTACTDESCRIPTIONWHATTIVESASINTHISMATCHRESULTTABLETITLEDIDsWHATTIVESINTERSEXSEGMENTWHEREARGUMENTCONTACTDESC"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "SELECT DISTINCT T2.name FROM Orders_inventory.books AS B INNER JOIN Author_book.author AS T  ON B.idOrder = T.Author ORDER BY T2.ISBN_name LIMIT 10000000163985000100004900000479823947305000434329000"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "SELECT DISTINCT T2.idClient , T1.name FROM Orders.Order AS T ORDER BY T.DateExped LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "SELECT DISTINCT T1.idOrder , T2.name FROM Orders_Orderline201569413289723000000_TASK_231893528590360000000_TASK_231866088526924000000_TASK_23"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": "SELECT T1.Name , SUM(T2.amounts_written__num__as__decimal_0184735669363218547396__to_total__as__sum__of_strings__022424593895513636086950034195323417515286"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "SELECT DISTINCT T2.name , SUM(T1.PurchasePrice ), COUNT(DISTINCTT1.Book_FK.ISBN_title__author_idA_text__amount__total_cost__title__grouped_by__first_book__grouping_type_label__first_book__grouping_type_key__first_order_number__author_order__grouping_type_description__grouping_type_"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": "SELECT DISTINCT T1.title , SUM(T2.amounts_billed_for__INTEGER__0__39856743209475398336__201931588772489573179963131917499614290013470186312"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "SELECT COUNT(T2.ISBN_id2137094678739821232530732212650873061687509768903687117903860973878028669479690391474168111"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "SELECT DISTINCT T1.title , SUM(T2.amount ) FROM Author_book.ISBN AS T INNER JOIN Orders.idOrder ON T1.ISBN = T2.IdOrder GROUP BY T1.title ORDER BY T2.amount LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "SELECT T2.IsBNS FROM Orders_order_detail_v241567301813980900000022673T20063892T02D98379757A4816A668586M1360T1596E4939G35976968"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": "SELECT T2.title FROM Orders_Order_Lists.Orders AS T INNER JOIN Author_Books.Book AS T  ON T.IdOrder = T1.Id ORDER BY COUNTAggregateT2.totalOrderCount LIMIT 10000000000000000000000000000000000000000000000"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "SELECT T1.title FROM Orders_in_Order_booking_TASK__INSTRs.Item AS T , Author_Books_Order.ISBN AS T INNER JOIN Books_order.title AS T  ON T.idBook = BOTH  ORDER BY COUNTOFTASK__INSTRs.ITEM.number LIMIT 200001059315864868714000"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "SELECT T2.title , T1.PurchasePrice FROM Books_Order_reports_orderlines_records.Book AS T INNER JOIN Orders_records.IdOrders AS T  ON T.idOrder = T2.Order_ID GROUP BY T2.title ORDER BY COUNTWITHINSUBSTITUTE LIMIT 100000000000000000000000000"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "SELECT T2.title , SUM(T1.PurchasePrice ) AS total_order FROM Orders_Inventory__totalorder_total_orders_by_author_and_ISBN_INVENTORY__total_order_total_items_with_order_number_as_title_083544396712718676195679010669256010"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "SELECT DISTINCT T1.title FROM Orders_inventory.orders AS T ORDER BY T.IdOrder LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "SELECT DISTINCT T1.title FROM Orders_invoice_item_transactional__books_order_item_within_last_5_years_as_foreign_keys_table_as_INVOICE_ITEM_ORDERING_ITEM_WHERE_DATE__STRATEGY__PAYMENT_DATE__T3.ID ORDER BY T1.OrderDate LIMIT 100000000000"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": "SELECT DISTINCT T1.Name FROM Orders_Order_CC_CCCASNWHERETOTALITEMSARELESSASNONETOGETTINGHIGHESTFROMDENSEARCHTABLESANDCONTAINSBOTHNUMBEROFORDERERUNDELTASGRADEHOUNDWITHACCEPTORESENTRYDEEPGRADEHULRANDINCLUDINGGRADENOWHEREWHERET"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "SELECT DISTINCT T1.Name FROM Orders_byAddresses.orders AS T ORDER BY T2.PurchasePrice , T2.numCC LIMIT 10000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "SELECT T1.Name , SUM(T2.numCCSalesorder__LIMIT__0_95786133472312000000__PurchasePrice__GDP__GDPW21L_CYP3635D0026_K12_21 ) AS total , COUNT(T2.numCCsalesorder__LIMIT__0_9578"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "SELECT DISTINCT T1.Name FROM Orders_Ordering_Data.T2 AS T ORDER BY COUNTDISTINCT \n     LIMIT 0 OFFSET 183176440000523759225718931489745456748267829890010747687559"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "SELECT T1.Name FROM Orders_Lists.Client AS T INNER JOIN Order_Items_Details_FORTAS.Address AS T  ON T.IdOrder = T1.Id ORDER BY countDISTINCTT2.numCC , T1.NumCC LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": "SELECT T1.Name FROM Orders_CustomerOrder_CC_Tier1client2order_customer_id3560978043162059290560143206783725880556725407945251716676347497543948119169"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": "SELECT T2.Name , SUM(T1.amounts.totalAmount__decimal483759634022723132048853903145137957981151726063760578238981059270759283474816362"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "SELECT DISTINCT T1.Name , SUM(T2.amount__price_usd__amount__25__60__63489732195500962281638566984816726063995083639016655879655383479167363"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": "SELECT T2.Name FROM Orders_Total.Book AS T INNER JOIN Author_Book.author AS T  ON T1.idOrder = T2.Author ORDER BY T3.amount LIMIT 100000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "SELECT T2.name FROM Orders_OrderByPurchasePrice_PriceTbl.Book AS T INNER JOIN Author_Books_Order.ISBN AS T  ON T1.idOrder = T3.ISBN ORDER BY T2.numCC LIMIT 500000000000000000000000000000000000000000000"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "SELECT DISTINCT T1.title FROM Books_Order.book AS T INNER JOIN Orders_details.title AS T  ON T1.ISBN = T2.ISBN ORDER BY T1.amount , T2.name LIMIT 10 OFFSET 0;"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "SELECT DISTINCT title FROM Author_bookWHEREnotOrderedWHATEVERANDCOUNTOFtotalorderedbooksINCORRECTED001132649537298950000000166844045903375292695454810308107378107947636921"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "SELECT DISTINCT T2.Name FROM Orders_Order_Clients__Invoice_Order_ClientT104986937053042130_WHERE_Order.id ORDER BY COUNTWITHOUTDELETE LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "SELECT DISTINCT T2.Name FROM Orders_byIDTASK417350836319000000WHEREDateEXPEDANDnumCC021246215759733251436860448845653834798338507465877667842"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "SELECT T2.PurchasePrice , SUM(T1.amount ) AS sum , MAX(T2.salePrice ) FROM Orders_Item_Price_Listing_Reviews_dbo.Items AS T INNER JOIN Orders_Order_Details_Facilities_tbl_f_LARGAS.Books_Order AS T  ON T1.idorder = T2.Idorder ORDER BY SUM_SalePrice , SUM_PurchasePrice"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "SELECT MIN(T1.salePrice201807325162466099000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "SELECT AVG(PurchasePrice.price_sales_purchased_prices.price_sales_purchases_total_value__float64__decimal_join_by_comma_as_nulls_dblinker_1278032419229925236920859615850013727620012"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "SELECT AVG(PurchasePrice.price_as_num ) AS avg_p , SUM(SalePrice.amount_as_num ) AS total FROM Author_Books_Order_v1302489660114958672WHEREISBNBETWEEN27893127511658265044250418305153"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "SELECT MAX(purchasePrice.price_amounts__218766365243192100000__600011053980000000000256646434980002423231410354787670000564647862"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": "SELECT MAX(SalePrice.price_in_usd2013Msvs26473591820530000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": "SELECT T1.title FROM Books_Order.ISBN AS T INNER JOIN Orders_Order2.Items AS T  ON T.ISBN = T1.ISBN ORDER BY SUMIFTHATSMALLERTHANAGERATEDDIVIDENDINGSCALARS__LSB__MINIMUMDETAILRATEDVALUE__LSB__MIDLINEFRAMEREVASIGNDIVIDEADISCOUNTEDVALUENOTH"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "SELECT DISTINCT T1.title FROM Orders_byDateORDERBYSUMXSalesPriceGREATERTHANAVALUEOFTALENDARGESTWHERENUMCCTARGETINTEGERGREATERTHANACASUERESULTTABLEINDEMODATADVANCEFORREJECTONLYWHERETITLESNUMBEREXCEPTTWELKWHERECASHDEPTIDEXCEPTTAMEXCEPTTAMPER"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "SELECT T1.title FROM Books_Order.ISBN AS T INNER JOIN Orders.IdOrder ON T1.idOrder = T2.IdOrder ORDER BY T1.amount LIMIT 100000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "SELECT DISTINCT T1.title FROM Orders_bookstores.books AS T INNER JOIN Book_Order_price_metas.Book AS T  ON T1.IdOrder = T2.ISBN ORDER BY T1.PurchasePrice LIMIT 0 OFFSET 0;"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "SELECT T1.title FROM Books_Order.ISBN AS T ORDER BY T2.amount , T2.saleprice LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "SELECT T1.title FROM Orders_byOrder_Price.books AS T , Author_Books.Book ORDER BY PurchasePrice LIMIT 100000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "SELECT CAST_STR2NUMSUM10568739493047887081 FROM Author_BookWHERETitle__containsGeorgeOrwell.name ORDER BY SUM105687394921027351375 LIMIT 11234566264217618479410880014394"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": "SELECT CAST_SUM_VALUE FROM Author_Books_OrderWHERETitle__first_letter_of_title_isNs__title__iso8601__ISBN_3582579491238788_60822799032135_00101741381385473_12094894266"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "SELECT T2.salePrice FROM Orders.Order AS T INNER JOIN Author_Book.Book AS T  ON T1.IdOrder = T2.idOrder ORDER BY T2.ISBN , T3.Title LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": "SELECT T2.salePrice FROM Orders100738689150362997422819123941149WHERETOTALFORDWITHINRATEGATESIZEAREARLYSEETHEYDESTAVARFROMORDER100738689150362997422819123"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "SELECT T1.title FROM Author_Books_Order.Book AS T INNER JOIN Orders_ASTOUTGWONTHEALTHS_ORDERS_TBLSA.ISBN AS T  ON T1.ISBN = T2.ISBN ORDER BY T1.price LIMIT 10000000000000000000000000000000000000"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "SELECT T2.title FROM Books_Order.ISBN AS T INNER JOIN Orders.IdOrder ON T1.idOrder = T2.IdOrder ORDER BY T1.amount LIMIT 100000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "SELECT T2.title FROM Orders_Order1691048832789311125_TASK_TITLE_INSTRUCTIONS.BOOK AS T ORDER BY SUM_PIECE__CALCULATED__GIVEN_AWARE__SUM_COST__01819563077646831920 LIMIT 10"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "SELECT T2.title FROM Orders_bookshiporder_lines_items_summary.Order AS T INNER JOIN Books_order.ISBN AS T  ON T.IdOrder = T1.Id ORDER BY T1.Amount , T1.salePrice LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "SELECT T1.Name FROM Author_Books_Order.book AS T INNER JOIN Orders_A_Order.Book AS T  ON T2.ISBN = T1.ISBN ORDER BY T2.author_name LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "SELECT T2.Name FROM Orders_Authorship_Orders.book AS T INNER JOIN Author_Book.author AS T  ON T1.idOrder = T2.author ORDER BY T2.title LIMIT 10000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "SELECT T1.title FROM Author_Books_Order.books AS T INNER JOIN Books_Order.book AS T  ON T1.ISBN = T2.ISBN ORDER BY strftime_datepart2strT04397006738800000L , strftime_datepart2strT06395772413530000L LIMIT 10000"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "SELECT T2.title FROM Books_Order.ISBN AS T INNER JOIN Author_Book.Titles AS T  ON T1.ISBN = T2.ISBN ORDER BY T3.name LIMIT 400000000906378000000000000000000000000000000000000000000"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "SELECT COUNT(DISTINCT ) FROM OrdersWHERETitleSatisfiedByIsbn158609433207860100176850546178206303855502357996649842113026477107340163587293662"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), COUNT(OrderID.IdOrder_FK135298706432191140430028606988990216526088180901802982949291850128577136281"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "SELECT DISTINCT T1.idOrder FROM Orders_details.Book AS B INNER JOIN Orders_details.Clients AS C  ON B.IdClient = C.Id ORDER BY T1.title , T2.title LIMIT 30549607103748439720000112295657322000257438814"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "SELECT id FROM OrdersWHERETitle.startswithI INNER JOIN Author_BookAssetsBASERelationshipT23109564871171970CALLINGCALLEDINASAONWITHAROLLARMEDIAGENEREFIRESTONEDICEDIDS23196470597CALLINGGRADEDAMIEDIDSAVERSECOND"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "SELECT DISTINCT T1.title FROM Author_Books_Order.ISBN AS T , BookBASINGORDEREDBYBOTHCLIENTSJAMES.T3 AS T INNER JOIN BooksBASINGORDEREDBYBOTHCLIENTsPETERDOE.T4 AS T  ON T.ISBN = B1284957150053596600 ORDER BY T.ISBN LIMIT 1"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "SELECT DISTINCT T1.isbn FROM Books_Order1.ISBN AS T INNER JOIN Orders2.client AS T  ON T.idClient = T1.IdOrder ORDER BY T1.Isbn183945922976031315742569934541 LIMIT 1;"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "SELECT T2.title FROM Orders_Order_Clients.Orders AS T  INNER JOIN Books_Order.ISBN AS T  ON T1.IdOrder = T2.idOrder ORDER BY T2.ISBN.title , T3.Name_author_alias__FK_PRINCE24772608917912495641WHERETOTALORDERS LIMIT 100000"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "SELECT DISTINCT T1.title FROM Author_Books_Order.ISBN AS T INNER JOIN Orders_Following_Author_Books_Order.ISBN AS T  ON T2.idAuthor = T1.author ORDER BY T2.OrderNum LIMIT 10000000005786340692537047197616228187616"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "SELECT DISTINCT T2.Name FROM Orders_Client__inventory.order AS T INNER JOIN Author_Book.author AS T  ON T1.IdOrder = T2.Author_FK ORDER BY T1.NumCC LIMIT 10000000000000000000000000000000000000000000000"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "SELECT DISTINCT T1.Name FROM Orders_Order_by_IdClientsT1.IdOrder AS T INNER JOIN Author_Book_T2.Book AS B  ON T1.idOrder = B.ISBN ORDER BY strftimeofdate__PrideAndPrejudiceDates__t2._ordernum LIMIT 10 OFFSET 0"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), T2.Rating FROM (SELECT DISTINCT  FROM AStbl10389497396015276308_ASbooksthebooksFROMbooklist.dbo) AS T INNER JOIN (SELECT T2.Book_ID FROM (SELECT T1.Book_ID , COUNT(DISTINCT ), SUM(DISTINCT ),"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T1.title FROM book_reviews.books AS T ORDER BY T2.Title LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": "SELECT DISTINCT T1.title FROM review_books_2014__pages_as_ISBN_t23598627663065314031_151282599752210523425687710258912277228299100744133668"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "SELECT DISTINCT T2.type , T2.release FROM review_books_by_type_and_release_date_as_title_of_book_as_TYPE_AND_RELEASES_IN_MILLION_AND_DATE_VALUES_AS_PRIMARY_KEYS_FOR_THESE_TABLES_WHERE_FIRST_REFERENCE_ALSO_HAVE_AT_LEAST_ONE_RE"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "SELECT SUM(chapters__max_chapter_number__i18n.value2__objectid__table__3267960453027447396__cms__127511578102765583509__chapters__max__26409387854383545610__page_"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "SELECT DISTINCT T1.title FROM reviewRatingT2049462725668013183_asfvwgAJE_G0MUYBJGWX7NVNO29338123345344985651D0873C2067D992904F899228"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "SELECT SUM(T1.Rating__r_62457853698219234000__GRADES_PERCLUSIVE_SEMIBLE__02869010_2023061987394993000__97614052924432375400__GRADE"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "SELECT DISTINCT T1.title , T2.rating FROM review_ratings_summary.review AS T INNER JOIN book_ratings_summary.book AS T  ON T1.Review_ID = T2.Book_ID GROUP BY T3.title ORDER BY SUM_RATINGS_IN_MILLENUM_FORWARD LIMIT 45000000000000000000"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "SELECT DISTINCT T2.Rating FROM (SELECT MAX(T1.pages_used_to_order_chapters_by_ratings__rating__group_concat_by_rank__sum_of_squares_divided_by_POINTS20839975129146800000__OrderBy_Piles_using_the_ordering_scheme_3186"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "SELECT SUM(CASE ) AS total FROM reviewGROUPEDBYPageNumWHEREPageNumberSameAsT124587603498864570696025134164702705341232745880736166057389158977516497893991"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "SELECT T1.title FROM review_rankings.book AS B INNER JOIN reviews_in_million.Review AS R  ON B.Book_ID = R.Book_ID ORDER BY R.Rank LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "SELECT AVG(T2.Rating__real__cge ), T3.Book_id FROM book_reviews_v2014_novels_bytypeasas_asw56823791T16__involved_with_T3ASW56810890T19_asW04G4A9BT19_P7W2M9D4C"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "SELECT DISTINCT T2.type , COUNT(T1.Book_IDs_of_type_to_review.book_id_string_to_number_format1_173256039840966_6819846045319972_238582905297144_12575280372"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "SELECT DISTINCT T2.type FROM book_reviews.books AS T , review_types.top_categories AS T ORDER BY COUNTIFS.topic_name_text.COUNT__RATING__ LIMIT 10000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "SELECT DISTINCT T2.type FROM book_reviews.books AS T , review_categories.books AS T INNER JOIN categories.book AS T  ON T1.Book_ID = T2.Book_ID ORDER BY COUNTIFCOUNTTOSTARTINGFROMTOTALSINCLUSIONS LIMIT 3 OFFSET 0;"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "SELECT DISTINCT T1.title FROM review_rating_books_and_notes.books AS T INNER JOIN book_ratings_as_dbs.T AS T  ON T.book_id = T2.Book_ID ORDER BY T2.Rating LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": "SELECT DISTINCT T1.title , T2.Audio FROM review_books.T3 AS T INNER JOIN book_audio.T2 AS T  ON T1.Book_ID = T2.Book_ID ORDER BY T2.Pages LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), DISTINCT FROM (SELECT COUNT(T2.Book_ID1.Title__Given_by__rated__book_ID264395078774408417361__type__name__textasvarchar20000787670039077200774303010"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": "SELECT DISTINCT T1.type FROM book_reviews.book AS T , review_types.Book AS T WHERE T1.chapter > 6 ORDER BY T2.num_pages LIMIT 450000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "SELECT COUNT(DISTINCT ), T2.type FROM book_review_model.books AS B INNER JOIN review_model.types AS T  ON B.Book_ID = T.Type ORDER BY T.type LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "SELECT DISTINCT T1.title FROM reviewTbl.Review AS T INNER JOIN bookTbl.Book AS T  ON T.Book_ID = T1.Book_ID ORDER BY T.Rating LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), MAX(CASE ), MIN(CASE ), CASE  FROM (SELECT DISTINCT T1.Customer_ID , T2.Level_of_Membership FROM customer_order.customer AS T INNER JOIN branch_order.branch AS T  ON T.Branch_ID = T.Branch_ID ORDER BY T1.Nationality , T2.years_opened LIMIT 1"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(T1.Customer_ID ) FROM customer_order_20203917__table_name_28665418614995_inner_join_foreign_key_rights_record__202039290061796_202310076048143_inner_join_foreign_key_rights"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "SELECT DISTINCT T1.Name FROM customer_order.Customer AS T INNER JOIN branch_order.branch AS T  ON T1.Branch_ID = T2.Branch_id ORDER BY T2.Level_of_Membership LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": "SELECT DISTINCT T2.Name FROM (SELECT DISTINCT T1.Customer_ID , COUNT(T3.Customer_ID ) AS num FROM branch_customer_order.customer AS T INNER JOIN customers_order.branch AS T  AS B  ON T1.Branch_ID = B.Branch_ID GROUP BY T2.Name ORDER BY T1.Level_of_Membership LIMIT 1) AS T ORDER BY T1.Customer"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "SELECT DISTINCT T2.Nationality , CASTT1.Card_Credit FROM (SELECT T1.Nationality , CASTT1.Card_Credit FROM customer_order.dish AS T INNER JOIN branch.manager ON T1.Branch_ID = T2.Branch_ID ORDER BY T1.Name , T3.Nationality , CASTT1.Card_Credit LIMIT 1) AS T INNER JOIN customers."
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "SELECT DISTINCT T2.Nationality , SUM(T3.Card_Credit ) FROM customer_order_2016_2017_branch_orders2017_52846692_c13d7727_48b5_a779_2e7f8db1375b_as51_f26_d10000000"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "SELECT DISTINCT T2.name FROM customer_order.customer AS T INNER JOIN branch.branch AS T  ON T1.Branch_ID = T2.Branch_ID ORDER BY T3.Nationality , T2.Name LIMIT 1;"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "SELECT DISTINCT T2.name FROM customer_order_activity_by_category.customer AS T , branch_locations.branch AS T INNER JOIN customers.Nationality AS T  ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Name , T2.Nation_code LIMIT 200000000000000000000000000000"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "SELECT AVG(T2.Card_Credit__RATE__2006_18957439370963600000__VATID_106283041141221663753__LOTBTZA0165897448241943839_v317193"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "SELECT SUM(DISTINCT ) AS avg FROM (SELECT T2.name , COUNT(T1.customer_id__card_credit__level__value__int__0998976524336947702282304962069562166965955227644823717366283"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "SELECT T1.card_credit FROM (SELECT DISTINCT T2.balance , MAX(T2.level_of_membership__balance__card_credit__revenue_percentage__2013__account_number_3947638194551974250__from_customer__Name_to_Number__total__card_credit__account_number_394"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": "SELECT DISTINCT T1.Name FROM (SELECT T2.name , SUM(T2.level_of_membership__double__2013__1835716724015000187_99698460953619900183 ) AS sum FROM (SELECT T1.name , MAX(T2.level_of_membership__"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": "SELECT DISTINCT T2.Nationality FROM (SELECT DISTINCT T1.Nationality , COUNT(T2.Customer_ID ) AS num FROM customer_order.customer AS T ORDER BY T.Branch_ID , T.Dish_Name ) AS T ORDER BY T.num LIMIT 30000000000000000000000000000000000"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "SELECT DISTINCT T2.Nationality , SUM(T1.Countries__counts__GDP__years_opened__Level_of_Membership__Branch_ID__Grouping_by_Customer_ID__GDP__amount__Customer_ID__Forecasting__PRIMARY_KEY__COUNT_by_group__Countries__GROUPED_by_Customer__group__Countries__Grouping_by_Customer__group"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": "SELECT DISTINCT T2.Nationality FROM customer_order.customer AS T  INNER JOIN branch_order.branch AS T  ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.Nationality ORDER BY COUNTDISTINCTT2.Countries__Germany__Code__codeSUMA LIMIT 100000000000000000000000000"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": "SELECT DISTINCT T2.Nationality FROM customer_order.customer AS T  INNER JOIN branch.branch AS T  ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.Nationality ORDER BY COUNTAuditCountPerRegionForT2.Customer_ID , SUMAuditCountForT2.Level_Of_Membership , SUMAuditCountForT2.Location_Of_Office LIMIT 10"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": "SELECT T1.nation FROM customer_order_data.customer AS T INNER JOIN branch_orders_details.branch AS T  ON T1.Branch_ID = T2.Branch_id ORDER BY T2.Level_of_Membership LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": "SELECT T1.nation FROM customer_order_20062368840116383980320112256296723182168789753502839701289851002903279327177451997029262"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "SELECT DISTINCT T1.name , T2.dish_name FROM (SELECT T1.name , T2.dish_name FROM customer_order_listing__table_alias_sub_table_name_table_alias__table_345680_as_a_foreign_key_to_customer_table22214473564496056_table_3456"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": "SELECT DISTINCT T2.name , T3.dish_name FROM customer_order_details_customers_details_branches_manager_locations_orders_quantity_sales160814798733786890514T21115430660402555026T35363554286335"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": "SELECT DISTINCT T2.name FROM customer_order_inventory1249785631039010100000012870531266603718539832357931829400100902344029879010955868111"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "SELECT DISTINCT T2.Name , T3.Dish_name FROM orders_billable_only.customer AS T INNER JOIN branch_orders_by_dish.T AS T  ON T1.Customer_ID = T2.Branch_ID ORDER BY T.Quantity , T2.nameDescEND LIMIT 100 OFFSET 0;"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": "SELECT DISTINCT T2.Name , SUM(T1.Quantity__revenue__gross__1st_qtr__1st_qty__total__amount__amount__QTY_AUD__NZD__AED_025489336891757__SUM_AED_017704727497538__sum_gross__GST__C"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "SELECT T1.name , SUM(T2.quantity__qty__as__int64_or_long__null_value__as__int64_or_long__null_value__to_num__sum__as__number__from__dish__list__WHERE__dishes_by_customer__name__in__T1.card_credit__as__string__by_cards__card__ID__as__string__by__"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": "SELECT DISTINCT T2.Name FROM customer_order_lineitem_customers_transactional_accounts.customer AS T INNER JOIN branch_orders_lines_items_order_lines_items__cust_info_as_table3.T ON T1.Customer_ID = T3.Branch_id ORDER BY T2.Quantity LIMIT 100000000000000000000"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": "SELECT DISTINCT T2.name FROM (SELECT DISTINCT T3.Name , SUM(CASE ) AS Total_Quantity FROM customer_order__customer_id_with_dishes_names_as_unique_ids_join_table1.T1 INNER JOIN branch_orders_from_branches__card_credit_total_balance_as_string2.T3 ON T1.Branch_ID = T3.Branch"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "SELECT DISTINCT T2.manager FROM branch_order_2014562718269083_as2014_115625_DISTINCTT1AS201063780366313T20159001823T153478373T1534345284566"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "SELECT T1.Name FROM branch_manager_listing20151731819132416806_asdfasf_48976758845381715411086262946449315816735404899894535730121629"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": "SELECT DISTINCT T1.name FROM customer_order_20137619_163541820722328649948_customer_id_398272038850810592055348_WHERE_order__isnull__as__name__in_the_list_of_customers_20137"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": "SELECT T2.name FROM (SELECT DISTINCT T1.customer_id , COUNT(T2.Customer_ID ) AS num FROM customer_order.customer AS T INNER JOIN branch.branch AS B  ON T1.Branch_ID = B.Branch_ID GROUP BY T2.Name ORDER BY SUMcountIFNULLIFSLASTValueForCustomerIdWithNoOrder LIMIT 1) AS T WHERE T.num = 0 GROUP BY T2"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.Member_ID ) AS num FROM club_leader_resulting_table_name_19036734608715822101522WHEREDATEOFJOINTAREAFORClubIDWASPCTGATT0792457814279600455235323"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "SELECT DISTINCT T2.Name FROM club_leader_table1623207456861980120000023250713082665418412831126981337465252910394167877225550116868"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "SELECT DISTINCT T2.Name , T3.Nationality FROM club_leader__members_with_clubs_and_team_sports_players_as_club_members_INCLUDE_ALLTITLE259_INC248702721197500000D_ANDNAME1TITLE1177638549282000"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "SELECT DISTINCT T2.Name FROM club_leader_data_members__club__name__members__grouped_by_Club_ID_as_Grouping_Table_ID_join_table_WHERE_T1.NATIONALITY INNER JOIN WHERECLUB_ID.FOLDER_NAME AS T    AS T  ON T2.Club_Name = T2.club_name ORDER BY T2"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": "SELECT DISTINCT T3.Name FROM club_leader_player_data.club AS T INNER JOIN member_leader_data.member AS T  ON T.Club_ID = T4.Club_ID ORDER BY T5.Age  DESC LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "SELECT T1.Name FROM club_leader_player_membership_sales202104252386397100022641486238860452WHEREyears_joined__gte_30145916601714695149099010363258161"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "SELECT DISTINCT T2.Nationality FROM club_leader.Club_Name AS T INNER JOIN member.Name AS T  ON T1.Member_ID = T2.Member_ID ORDER BY T2.Nationality , T3.Age LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "SELECT DISTINCT T2.Nationality FROM (SELECT DISTINCT T1.Name FROM club_leader.Club AS T INNER JOIN member_club.Member AS T  ON T.Club_ID = T1.Club_ID ORDER BY COUNTIFTURNSALARY , SUBSTRTRACTFINALFROM , SUBSTRSTRFROM ) AS T INNER JOIN member_club.member AS T  ON T.Member_ID = T2"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": "SELECT DISTINCT T2.Nationality FROM club_leader.Club_Name AS T , member.name AS T  INNER JOIN nation_club.nation AS T  ON T.Member_ID = T2.Member_ID ORDER BY COUNTROWS_BETWEEN LIMIT 100000000000000000000000000000000000"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "SELECT DISTINCT T2.Name FROM club_leader1203163427538389902200000T1976T00143993T25G96612687T0024ZU39268T0041S117105T12770892T13"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": "SELECT DISTINCT T2.Name FROM club_leader__rankings_1010834759960376000001017T__club_leaders_as_groupingsTASWHERE_TOTAL_ROUNDUP25024991033191487915537CALLING_SUBSTRWITHIN1600"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "SELECT DISTINCT T3.Name FROM club_leader__club_join__year_join_1947T2016T2018T2018T2025T2025T2038T2038T2039T2056T2056T2057T2058T2059T2060T206"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "SELECT DISTINCT T2.Club_Name FROM club_leader.club AS T INNER JOIN member_leader.member AS T  ON T1.Member_ID = T2.Member_ID ORDER BY T1.Year_Join LIMIT 1;"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": "SELECT DISTINCT T2.Name FROM club_leader_members_ranked_within_club_ranks_t11376980568018442000000ASMNHABALWKNJEAWHQLXGXPRLJZUZRFGLXNIAHAINAZARWMQFQWLIDNXOGKDVN"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "SELECT DISTINCT T3.Nationality FROM club_leader.club AS T INNER JOIN member_clubmembers_member.member AS T  ON T1.Club_ID = T2.club_id ORDER BY T1.Year_Join , strftimeBETWEEN  ASC, T1.Nationality LIMIT 300 OFFSET 78944672555727653000"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "SELECT AVG(T2.Year_Join_date__93511667284723100000__to_20210125_1811132708988810000_93715023738522877000__64363097677623"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "SELECT DISTINCT T2.club_name FROM club_leader_listings_t3985741360093000000_to_1123913305791_as_state_club_name_aas_with_quotations_as_the_heads_of_group_leader_charles_victor_martin_pereira_"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections_details_to_names_listing_viewer.Collections AS T INNER JOIN Documents_in_collections_viewers.Document_objects AS T  ON T1.Collection_ID = T2.Collection_ID ORDER BY T3.Collection_name , T4.collection_description LIMIT 1000000000000000000000"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections_Summary_Lists.COLLECTIONS AS T INNER JOIN Documents_in_Collections.Document_Object_ID ON T1.Collection_ID = T2.Collection_ID GROUP BY T3.Collection_Name ORDER BY COUNT_COUNT LIMIT 100000000000000000000000000000000"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "SELECT T1.description FROM Collections_Details.Collection_Subsets AS T INNER JOIN Documents_in_Collections.Documents_in_Collections AS T  ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T3.collection_name ORDER BY COUNTOFEXTRACTFROMT2HISTORYANDT3FORWARDSLeadingREMAINDEROFGETTOTALSEGMENTSFROMT2HIST"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "SELECT DISTINCT T2.Collection_Description FROM Documents_in_Collections__top_collection__parent_document_object_id_as_T1.Document_Object_ID AS T , Collection_Subsets__name_of_the_set_as_parent_document_object_ID_as_T1.Document_Subset AS T WHERE T1.Collection_Name = 'Top collection' ORDER BY T2.Collection_Description LIMIT "
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "SELECT T1.name FROM Documents_in_Collections_set16002131572490862912200178350531150209752722230364701837921010753934164877581430563612"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "SELECT T1.Document_Subset_Name FROM Documents_in_Collectionsas_subsets201503262429827185265_TODAY_TGI_FORTIFIEDAUDITS_2016TARGETS.COURSE AS T , T3.Document_Object AS T WHERE DATE = (SELECT MIN(Date_Subset_Details__TG"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "SELECT T3.description FROM Documents_in_Collections.Collection_Name AS T INNER JOIN Documents_in_Collections.Document_Object_ID AS T  ON T1.collection_id = T2.parent_collection_id ORDER BY T1.title , T1.title LIMIT 0 OFFSET 9865345250119738673646905651206"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "SELECT T3.Name FROM Documents_in_Collections_Nested_Details.Document AS T INNER JOIN Subsets_Details_Nested_Details.Document AS T  ON T1.Collection_Object_ID = T2.Parent_Document_Object_ID ORDER BY T2.Document_Subset_Details LIMIT 500000000000000000000000000000"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": "SELECT T2.Document_Object_ID FROM Documents_in_Collections.Collection_Object AS T INNER JOIN Documents_in_Collections.Document AS T  ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY COUNTAREACHENDINGTOTAL LIMIT 100000000000000000000"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "SELECT T1.Object_ID FROM Documents_in_Collections_Related__to_Documents_as_objects_by_Owner_and_Description_As_Objects_FOR_ANSI_TO_CREDIT_IN_EPISODE39264018691523_BLOCK_GRADETION_15975527926605486__ANSI_"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "SELECT DISTINCT T1.Parent_Document_Object_ID FROM Documents_in_Collections_MarlinT345689620000131947C82530104F61G92445987C5D19F9E2D86E214C382C13C85A69D24D4D8"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "SELECT T1.parent_collection_id FROM Collections_Object_Owner_Known.Documents AS T INNER JOIN Documents_in_Collections.Document_Objects AS T  ON T.Parent_Document_Object_ID = T2.document_object_id ORDER BY T2.Collection_Name LIMIT 100000000000000000000000000000000"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "SELECT T1.owner FROM Documents_in_Collections.Collection_Name AS T INNER JOIN Documents_in_Collections.Document_Object_ID AS T  ON T.Document_Object_ID = Documents_in_Collections.Document_Object_ID ORDER BY T.Collection_Description LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "SELECT T1.owner FROM Documents_in_Collections.documents AS T  INNER JOIN Collections.Collection_Subsets AS T  ON T.Collection_ID = T2.Collection_ID  GROUP BY T2.Collection_Name ORDER BY T.description LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "SELECT DISTINCT T1.Owner FROM Documents_in_Collections_ParentDocuments_ownedByT205937648963362670270D80179203TU5XLN6W2710F6247WL62623F749D013T0MU552B5058C225"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "SELECT T1.owner FROM Documents_in_Collections_Owners_table_19480732163501000001TASRMIDLGZVKXW4S6GXXXG14DW74FDB8890A628384B90C5D0439C7255D1D820020"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "SELECT T1.Description FROM Documents_in_Collections.parent AS T INNER JOIN Documents_in_Collections.Document_Object_ID AS T  ON T.Collection_ID =  T2.Collection_ID ORDER BY T1.Document_Object_Name LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "SELECT T1.description FROM Documents_in_Collections_detail_summary_groupedasubsets2020_9638845676248070720000001_51_45151303942197760000222677129677551838644115"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "SELECT COUNT(DISTINCT ), T2.owner FROM Documents_in_Collections_marlin_asdfa95638914073201340591845181735_62958530_9680_0186_072207920457788_w3c311983"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "SELECT COUNT(DISTINCT ), T2.owner FROM Documents_in_CollectionsAST0115837649836000000_AZQ88352008750536358308G98197420880456347617977816494826100"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": "SELECT DISTINCT T2.Document_Object_ID FROM Collections_listing_as_parents.Documents AS T INNER JOIN Documents_in_Collections_listings_as_parents.Documents AS T  ON T1.Collection_Object_ID = T2.Parent_Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY COUNT.EXPANDING_VALUE LIMIT 100000000"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "SELECT DISTINCT T2.Document_Object_ID FROM Collections_Details105973428206869200000T1A62F98253823A64U30259414WHERETOTALTHEREARENOTPARENTDOCUMENTSFORGETRESULTINGTHATTOCTOSEARCH.UNITEDSTATEOFDELA"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), SUM(T2.parent_document_object_id ) FROM Documents_in_Collections_Parent_Documents_And_Collection_NameSCOPE.Document AS T INNER JOIN (SELECT DISTINCT T1.Document_Object_ID , COUNT(DISTINCT ), SUM(CASE ) FROM Documents_in_Collections_Parent_Documents_And_Collection_NameSCOPE.Document AS"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "SELECT T1.Parent_Collection_ID , SUM(T2.Parent_Document_Object_ID ) FROM Collections_child_documents_with_parent_documents_and_owner__relation__to_collection_subsets1192804531689379673WHERECollection_Subset_Name__c.INTEGER INNER JOIN Documents_in_Collections2138983"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections1.Collections AS T INNER JOIN Documents_in_Collections1.Documents AS T  ON T1.Document_Object_ID = T1.Document_Object_ID ORDER BY T1.Collecrtion_Subset_Name LIMIT 100000000000000000000000000000000"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections1023366425769218863000000__documents_in_collections102336637154813131342000000_to_3766459104099250866000000"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "SELECT DISTINCT T2.Description FROM Collections_names.Collections AS T , Documents_in_Collections.Document_Object_ID AS T , Documents_in_collections.Collection_Name AS T WHERE T.collection_name = 'Best' INNER JOIN Documents_in_Collections.document_object_id AS T  ON T.Collection_ID = T.collection_id GROUP BY T1.collection_name ORDER BY T2.description LIMIT "
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "SELECT DISTINCT T2.Collection_Description FROM Collections_Info.Collections AS T INNER JOIN Documents_in_Collections_Info.Documents AS T  ON T1.Collecrtion_Subset_ID = T2.collection_id GROUP BY T2.collection_name ORDER BY T2.title__T2.title__T105872395669430324 LIMIT 1000"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections_Info.Collections AS T , Documents_in_Collections.Document_Object_ID AS T INNER JOIN Documents_in_Collections.Collection_ID AS T  ON T.collection_id = Documents_in_Collections.parent_collection_id ORDER BY T2.collection_name , T2.Document_Object_Name LIMIT 1000000000000"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "SELECT T1.parent_collection_name FROM Documents_in_Collections_Detail_subset10685372494223000000WHERETABID__EQUALTONICEANDTITLETEXT__RELATIVE_TITLE_STRING__HAS_DESCRIPTION1_DESCRIPTHETARGANTUNIT_NAME_24587693"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections1.Collection AS T INNER JOIN Documents_in_Collections1.Document AS T  ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T3.collection_name ORDER BY T1.Collection_ID LIMIT 100000000000000000000000000000"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "SELECT T1.Collection_Name FROM Collections_info.collection AS T , Documents_in_Collections.parent AS T WHERE T2.Collection_ID = 36 ORDER BY T1.parent_collection_id LIMIT 10000000000000000000000000000000000000000000000000"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "SELECT T1.Document_Object_ID FROM Documents_in_Collections_objects_tree2collection_object2documents_subset_table_20141126237958WHERECOUNTAlienProvinceANDDescriptionInList2OF1BASUBSETIDENDINGFORSEGMENTID2COLLECTIONIDENDINGINSEGMENTIDINPUTTODB2KEYWALLACESTRATEGY2"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "SELECT T1.Parent_Collection_ID FROM Collections_relationships.collections AS T , Documents_in_Collections.Document_Object_ID AS T , Documents_in_Collections.collection_name AS T WHERE T.parent = 'parentCollectionName' GROUP BY T2.Parent_Collection_ID ORDER BY COUNT.T1.Collection_ID LIMIT 1;"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "SELECT COUNT(Collection_Name__c.parent_collection_id__r.id__12789046233502330000000__343249238904980000000_92175483131511645000015131584665136"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "SELECT COUNT(T1.Collection_Name.INTEGER_NAMES_COUNTER_BEGINNING_START_END_DESCRIPTION_IDENTIFIER_NUMBER_LENGTH__202586954_C17223085__T1__RMU_PETROLOTA_ARANAGARI__CQA_COUNTER_BEGINNING_END_"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "SELECT T1.Document_Object_ID FROM Documents_in_Collections_027356429318981828000001C0D486E30A6E41AB7225C620A4B37AFE3D2D2E4623A26A8B9F0190E5C520D"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "SELECT T1.Parent_Collection_ID FROM Collections_info.Documents AS T INNER JOIN Documents_in_Collections_objects.Document AS T  ON T1.Parent_Collection_id = T2.Collection_ID ORDER BY T.Name , T2.Name LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": "SELECT T2.Collection_Subset_ID FROM Documents_in_CollectionsAST305947810696481100018650530148002738WHEREName2532425760547980100783559254699000858122531"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "SELECT T1.Collection_Subset_ID , T2.Collection_Name FROM Document_Subsets_Details20131027T1846990945ASP_B_3209T03M21642423T2035T600801_0257_1072A786C43E867F6D"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": "SELECT DISTINCT T2.Document_Object_ID , SUM(T1.Number_of_Child_Details__in__child__count__value__int32__36814490540734901916462610983809512536916790084670112069386262"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), DISTINCT FROM Documents_in_CollectionsGROUPBYCollection_NameWHEREparent_collection_id.value INNER JOIN parent_document_object_id.value ON collection_id = parent_collection_id.value GROUP BY Collection_ID ORDER BY COUNT_VALUE LIMIT 10000000000000000000000"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "SELECT T1.Document_Object_ID FROM Documents_in_Collections_Detail_Comparative_Descriptive_Procedure_TITLE_TABLES_INDIRECT_NONCONCURRENT_INTERACTIONS_PROVES_PRESSURE_POWERED_MERGERABLE_MESSAGES_DESCRIPTION_TEXT15393213046121801781"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "SELECT T1.Collection_ID FROM Documents_in_Collections_listing__group_by_all_parent_collections_objects_with_subset_details_and_description_str_substring_start_end_as_substringWHERENumberOfDocuments__gt_0_LIKEnullGROUPBYCollection_Objects__ID_STR_SUBSTRING_START_END__substring_starts_ends__substring_contains__substring_contains__substring_contains__"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "SELECT T3.Document_Object_ID , T1.Num_of_documents FROM Documents_in_Collections_Related_to_T1.Document AS T  INNER JOIN Collections_related_to_T2.Collection_Objects AS T  ON T1.Collection_Subset_ID = T2.Collection_Subset_id ORDER BY T2.Num_of_documents LIMIT 2 OFFSET 40000"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "SELECT DISTINCT T1.Collection_Subset_ID , COUNT(T3.Document_Object_ID__INTEGER__00286795858402583375000__documents.text__1314845038497436389500__doc_object_id29286495824382"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": "SELECT T1.owner FROM Documents_in_Collections_Parent_Collection_details_objects_names_id_listing_as_object_name_table_as_parent_collection_id_listing_as_object_name_table_as_owner_WHEREowner__strftime__format_sql2341897.document_object__10315056438550 INNER JOIN Documents"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "SELECT T1.owner FROM Documents_in_Collections.documents AS T , Documents_in_Collections.collection_name AS T WHERE T.Collection_ID = 6386417525509591192 INNER JOIN Documents_in_Collections.Document_Objects AS T  ON T.Collection_Object_ID = T.Document_Object_ID ORDER BY T1.owner LIMIT 100"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": "SELECT T1.Name FROM Documents_in_Collections_Braidtena321478509186193880000ASIN292582614006714GXMGHWVTK8003371201227521976254DUBLUZHVHF13256"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "SELECT T1.Name FROM Documents_in_Collections_subsets_with_owner__collection_objects__properties__subset_details_as_property_values_as_description_keys_as_owner_WHERETUNE.owner_name INNER JOIN collections_on_document_subsets_with_ownership_as_property_names_as_owner_ON_T1.Document_Object_ID AS T \n                        AS"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": "SELECT T1.Collection_Subset_Name , COUNT(DISTINCT ) AS DIMENSION , SUM(T2.Document_ID__N1__INTEGER__COLLECTION__SUBSET_ID__1966409758234169500017__PRIMARY_KEY__23675615807363464316212"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "SELECT T1.Collection_Subset_ID , T2.Name , COUNT(T3.Description_distinct_fromT2.Document_Object_ID ) AS num FROM Documents_in_Collections_subsets_as_T3A_Distinct_FromT2A_CUSTOMER_IDX246180_20514963054720994000000"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "SELECT T1.Name , SUM(T2.Count__total__3635373092831462823181398053981144834064966878420943450513836081555269699212747318111"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "SELECT T1.Parent_Collection_ID FROM Collections_and_Collections_Related_Objects__in_Collecron_Subsets__with_Documents_in_Collections_WHERECollectionName__contains_collection_name__GROUPINGCOUNTBYDESCENDINGFREQSFROMDIMENSIONSUBSETWHEREDocumentsInCollectionCountSummariesReturningPercentageSUMGiveFirstIndexOfListingTHEDETAILSFORTHEREOF"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": "SELECT T3.Document_Object_ID FROM Collection_Subsets.Document_Object_ID AS T INNER JOIN Documents_in_Collections.Document_Object_ID AS T   AS T  ON T1.Collection_Subset_ID = T2.Collection_Subset_ID ORDER BY T1.Parent_Collection_ID , T3.Description LIMIT 1;"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "SELECT T3.Document_Object_ID FROM Collection_Subsets.Document_Object_ID AS T INNER JOIN Documents_in_Collections.Document_Object_ID AS T  ON T.Collection_ID = T1.Collection_ID GROUP BY T1.Collection_Name ORDER BY T2.TOTAL_FLOW_TIME LIMIT 1500000000000000000000000"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "SELECT DISTINCT T1.Name , T2.Document_Subset_name FROM Documents_in_Collections_relatedtoT1.T2 AS T INNER JOIN Documents_in_Collections.T1 AS T  ON T.Parent_Collection_ID = T1.Collection_ID GROUP BY T2.T.Document_Object_id ORDER BY T1.T.Document_Subset_name LIMIT 100000000"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "SELECT T2.Name FROM Documents_in_Collections_In_SubsetsT10478359236214600000CASASABEATRASLARMUXCYNTHARHJTNALARGADDECWZMIRINFVETAINSTIKENRDIKGVAUDNEQDQGIMMIAOZQNIGI"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Documents_in_CollectionsAssetsT2014269537803000001C_v2961141606713A5D145759A687E9C10202WHERETOTALFOREIGNKEYFROMDocumentsInCollectionsAssetsT20142695"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Documents_in_Collectionsas_T2.T1 AS T INNER JOIN CollectionsAST2.T3 AS T  ON T2.parent_collection_id = T3.COLLECTION_ID ORDER BY T2.Document_Object_ID LIMIT 1;"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "SELECT COUNT(DISTINCT ), T2.Collection_ID FROM Documents_in_Collections1.Document AS T INNER JOIN Collections1.Collection AS T  ON T2.Parent_Collection_ID = T.Collection_ID ORDER BY T2.Collection_Name LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "SELECT COUNT(DISTINCT ), T2.Collection_Name FROM Documents_in_Collections1695401873866188679942_AS_AARON_TANZER.SET AS T WHERE T2.Document_Object_ID = 599 ORDER BY COUNTIFRIGHTSPEC__LUCHABURG_COLLECTION_COLLECTION_ID__B"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "SELECT COUNT(DISTINCT ), T2.Collection_Name FROM Collections.Collections AS T INNER JOIN Documents_in_Collections.Document AS T  ON T1.COLLECTION_ID = T2.Collection_ID GROUP BY T2.COLLECTION_NAME ORDER BY COUNTIFCOUNTing.Count_from_Group_ID LIMIT 400000000000000000000000"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "SELECT COUNT(DISTINCT ), T2.Collection_Name FROM Documents_in_Collections_by_Description_Name.Document_Objects AS T INNER JOIN Collections_details_by_NameOnDocument_Object_ID.T AS T  ON T1.Parent_Collection_ID = T2.Collection_id GROUP BY T2.Collection_name ORDER BY COUNT  DESC LIMIT 163450393788650"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": "SELECT T2.Document_Object_ID FROM Collections_Name_Numeric.Documents AS T INNER JOIN Documents_in_Collections_Numeric.Document AS T  ON T1.Document_ID = T2.Document_Object_ID ORDER BY T2.Collection_Name_Numeric.document_object_name__INTEGER LIMIT 100000000000000000000000"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "SELECT COUNT(DISTINCT ), T2.parent_collection_id FROM collections_names.Document_Objects AS T INNER JOIN collections_names.Collection_Subsets AS T  ON T.Collection_ID = T2.Collection_ID ORDER BY T3.Name LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections1.Collection AS T INNER JOIN Documents_in_Collections1.Document AS T  ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T3.collection ORDER BY COUNTIFSTHGSTT2_CASENUMBER LIMIT 100000000000000000000000000"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "SELECT DISTINCT T2.Collection_Name , T1.Document_Object_ID FROM Documents_in_Collections_v201703181934346725142806T2AQC914G31TK4877C01TZ23C850EU20RFZU21MJ6G155D41"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": "SELECT T2.Document_Object_ID FROM Collections_set_of_19341573_01826486_00142352112_2200851973568310675_947128262_002912955_8833910625025"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "SELECT T3.Collection_Subset_Name FROM Documents_in_CollectionsAST.Document_Objects AS T INNER JOIN Collection_SubsetsAST.Document_Subset ON T1.Document_Object_ID = T2.Parent_Document_Object_ID ORDER BY T1.Collection_Subset_Details.desc LIMIT 100000000000000000000000000"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": "SELECT T2.Collection_ID FROM Documents_in_Collections_BETWEEN_2001_346958172323350000__NATIVE_AZTEC118R2_TO_2006702039880000000_CLTIROZERAMSGWUW_GARGHANI_"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "SELECT T3.Collection_ID FROM Documents_in_Collections100763465228319600000_as_tnvvg_73302226370172616136446_t3n.xml AS T INNER JOIN Collections100763465228319600000_"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": "SELECT T1.Document_Object_ID FROM Documents_in_Collections_Subsets.Document AS T INNER JOIN Collection_Subsets.Collection AS T  ON T.Collection_Subset_ID = T.Collection_Subset_ID GROUP BY T.Document_Object_ID ORDER BY CASE \n    LIMIT 2003 OFFSET 2504834671726505900"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "SELECT T3.Document_Object_ID FROM Collection_Subsets.Collection_SUBSET_NAME AS T INNER JOIN Documents_in_Collections.Document_Object_ID AS T  ON T1.Collection_Subset_Name = T2.Collection_Subset_Name ORDER BY T1.Collection_Subset_Name LIMIT 100000000000000000000000000"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections1.Collections AS T INNER JOIN Documents_in_Collections1.Documents AS T  ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.T2.Object_ID LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections102336642522791886410000041376ASD2190864ASD2648846306745329845361902477633077665847238239"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "SELECT COUNT(T1.Collection_Name__name__c.TEXT02137456323948638000000_3653062146635911911221308980259712313423304507344213480103222"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "SELECT COUNT(DISTINCT ), T2.Collection_Name FROM Collections.Collections AS T INNER JOIN Documents_in_Collections.Document AS T  ON T1.parent_collection = T2.Collection_ID GROUP BY T1.collection_name ORDER BY COUNT_IN_SET  LIMIT 1000000000563966474024866549225433"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections.Collections AS T  INNER JOIN Documents_in_Collections.Documents AS T  ON T1.Document_Object_ID = T2.Document_Object_ID ORDER BY T.Collection_Subset_Details LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections_details_to_names_table.Document_Objects AS T INNER JOIN collections_subsets_details_to_name_table.Document AS T  ON T1.Parent_document_object_id = T2.Collection_ID GROUP BY T2.COLLECTION_SUBSET_NAME ORDER BY COUNT  DESC LIMIT 1000000000000000"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "SELECT COUNT(DISTINCT ), T2.name FROM performance_score.songs AS T INNER JOIN participant_records.participant AS T  ON T1.participant_id = T2.id GROUP BY T3.title ORDER BY COUNTIFEXTINGEQASONLANDGATEFIELDSRECORDIDNMATCHESLIFEFORWARDENDTASKIDSDISTINCT LIMIT 1000"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": "SELECT T1.name FROM (SELECT DISTINCT T2.name FROM performance_score.songs AS T INNER JOIN participant_audio_tracking.participants AS T  ON T1.id = T2.participant_id ORDER BY T2.language , T2.name ) AS T ORDER BY T.name LIMIT 1;"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "SELECT DISTINCT T2.name , T3.language FROM (SELECT T2.title , T1.lang_code FROM songs_languages.songs AS T INNER JOIN participants_music_sounds.participants AS T  ON T1.participant_id = T2.id ORDER BY T3.language LIMIT 1) AS T INNER JOIN (SELECT T2.title , T1.lang_code FROM songs_languages.song"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "SELECT SUM(vocal_sound_quality_score.value_max__min_value_max___max__250dB__173dB__846dB_977dB_680dB_798dB_812dB_845dB_888dB_840dB_671dB_655dB_638d"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "SELECT DISTINCT T2.voice_sound_quality , T1.rhythmn_tempo , T2.stage_presence FROM songs_performance_score_by_participants_and_name_with_popularity_rated_to_highest_priority_id_as_IDs_as_primary_id_AS_NAMED_BY_PERFORMERS_AS_NAMED_BY_POPULAR"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "SELECT DISTINCT T2.name FROM songs_labels_audioservices.Song AS T INNER JOIN participant_labels_audioservices.Participant AS T  ON T2.participant_id = T.id ORDER BY T1.language , T1.title LIMIT 10 OFFSET 100346810094718510638113136"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "SELECT DISTINCT T1.name , T2.original_artist FROM performances_score.songs AS T INNER JOIN songs_with_english_translations.song AS T  ON T1.id = T2.song_id ORDER BY T2.title , T2.original_artist LIMIT 300000000000000000000000000000"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "SELECT SUM(DISTINCT ), T2.stage_presence FROM (SELECT DISTINCT T1.songs_id FROM songs_score_vocalist_voice_sound_quality_scores_with_language_en_synthesis_signature_keywords_for_all_keywords_tokens_as_keys_strings_to_characters_strings_2004_19752382632"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "SELECT DISTINCT T2.name FROM performance_score.participants AS T INNER JOIN songs_performance.songs AS T  ON T1.id = T2.songs_id ORDER BY COUNTIFTINETYSETHQUARTERSINSTRFRAMES.SUMMERVALUEOFFORMATDESCRIPTION.ITEM_DESCRATED0127386296511460"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "SELECT id , name FROM participantsWHEREpopularity2017RANGEFROMTOP_1000000.songs ORDER BY COUNTIFSIDENTIFIERSREVIEW.id LIMIT 1000000984635419520001580000480777844702010824902210"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "SELECT T1.id , T2.name FROM performance_score_auditions.participants AS T , songs_records.song AS T INNER JOIN performances_score_auditions.song_results AS T  AS T  ON T.participant_id = T1.id GROUP BY T1.name ORDER BY SUMIFSLOW205811392798460466544345"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "SELECT DISTINCT T2.voice_sound_quality FROM performances_score.participant AS T INNER JOIN songs_vocals.song AS T  ON T1.name = T2.title_en ORDER BY T2.name LIMIT 1250000000376907184500161273047073690917955945"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "SELECT T1.name FROM (SELECT DISTINCT T2.name FROM performance_score__songs_with_vocals_as_performance_scores__participants_listing23647508_83378310_60872954846150012_67781457753648451_215"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.score__906324_5328381__962122_34879348__36723754292587386498__s4nk66769__92454020955383497813__p2"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "SELECT COUNT(DISTINCT ), T2.name FROM songs_listing105984793396000000000129WHERETITHATNOTINITIALISMISTRYNOTREBLENDINGFROMINFORMATIONGUIDEASANITIFORTHANUALANDESIFIEDPITCHASWELLNOGRADEDSTYLEREVENTSLISTING"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "SELECT AVG(T2.rhythm_tempo__fast_moving___376_95408018696326624__rate20p30s138_4175__9250__687__83784__83832.value_string35387299663949621216"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "SELECT T1.name FROM participants_english_translations_participant_speak_singing_songs_id_as_text_in_english_T1WITHDESCENDINGALSOUNDQUALITYWHERElanguageName__contains_ENGLISH__t2WITHDESCENDINGALSOUNDQUALITYWHEREPARTICIPANTID_as_TEXT__IN_ELASTMULTI_LINE_"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "SELECT T1.name , T2.popularity FROM performances_songs_videos_music_companies_us.participants AS T INNER JOIN songs_us.language AS T  ON T1.id = T2.songs_id GROUP BY T1.name ORDER BY COUNTIFTURNASCENDING LIMIT 10 OFFSET 47508337690248511560"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "SELECT DISTINCT T1.name FROM songs_names.T2 AS T INNER JOIN songs_titles.T3 AS T  ON T2.songs_id = T3.SongId GROUP BY T2.name ORDER BY CASE \n               LIMIT 16052987697546000000 OFFSET 44356019987880"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "SELECT DISTINCT T1.name FROM (SELECT T2.name FROM performances_score.songs AS T INNER JOIN participants_performance_score.participants AS T  ON T.id = T1.participant_id GROUP BY T3.name ORDER BY T1.voice_sound_quality LIMIT 1) AS T ORDER BY T2.voice_sound_quality LIMIT 1;"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "SELECT COUNT(city_code.city_name__id__ROW_NUMBER__ID__REFERENCE_INPUT_TABLE__19023687553104_3369423497748188680843_695713161081705605347_33880699213"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": "SELECT COUNT(*) FROM City_distance.city1 AS T INNER JOIN City.city1 AS B  ON T.city2_code = B.city_code GROUP BY T.city2_code ORDER BY COUNT_BY_NAME LIMIT 1500000000000000000000000000000000000000000000000"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": "SELECT T3.state FROM City_distance.city1_code AS T INNER JOIN State_info.state AS S  ON T2.city_code = S.city_name ORDER BY city_name LIMIT 500000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "SELECT T3.state FROM City_distance.city1_code AS T INNER JOIN City.city_name AS T  ON T2.city_code = T1.city_code ORDER BY T.city_code LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "SELECT COUNT(city_code.city_name1.city_name2_id1687405935382466328146341901203660905932832724946540736366056440133897162747233233"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "SELECT COUNT(city_code.city_name_36987091730212436580821362678472953203368955065158364065779052121002047167597612757683616"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "SELECT DISTINCT T1.city_name , T3.city_code FROM Citys_as_Names_V250866976462408500000__to_longitudelongitudeASDEGU10319745650996000010005769TASGEEG123814621666"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "SELECT DISTINCT T1.city_name FROM City_distances_data_2018_345786391201388461__city2_code_latitude_longitude_STU__ASINBH2244796818436205912294639194516422677816"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "SELECT T3.latitude , T3.longitude FROM City_distance.City AS T INNER JOIN direct_distance.city AS T  ON T1.city_code = T2.city_code ORDER BY T3.city_name , T3.distance LIMIT 50000000000000000000000000000000000000000"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "SELECT T3.longitude , T1.latitude FROM City_distance.City AS T INNER JOIN direct_distance.city AS T  ON T2.city_code = T1.city_code ORDER BY T3.longitude , T3.longitude LIMIT 40000000005786000000000000000000000000000"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "SELECT DISTINCT T1.city_name FROM City_Distance.city AS T INNER JOIN StatePAS.state AS T  ON T.city_code = T2.country ORDER BY T2.state_province_province_region_code_name LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "SELECT DISTINCT T1.city_name FROM City.city AS T INNER JOIN State_province.state AS T  ON T.city_code = 'PA' ORDER BY T.city_id LIMIT 100000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "SELECT COUNT(T1.city_code ) FROM City.city AS T INNER JOIN State_province.country AS T  ON T1.city_name = T.city_name GROUP BY T1.city_code ORDER BY COUNT__IN__COUNT__ LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "SELECT COUNT(T1.city_code_fomr6048531917683312165_2563252053973206660423481872015481514033252921070167670132455815262"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "SELECT DISTINCT T1.city_name FROM City.city AS T , Cities.name ORDER BY T2.latitude LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "SELECT DISTINCT T1.city_name FROM City.city AS T INNER JOIN StudentSouth_Asia_city25013768949972973_566418370197445401_GMYD298KJCWASA_SEP21443971883631401_NYC_"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "SELECT DISTINCT T1.state , COUNT(T2.city_name__city_code_385403697123632056876736202625904953385439901309999256031740270579161459687132"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "SELECT DISTINCT T1.city_name , COUNT(DISTINCT ) FROM Citys__distance__VARCHAR2WHERETown_code__city_name__FINAL.SECTION1 INNER JOIN StateSets__distance__VARCHAR2ONTown_code__city_name__FINAL.SECTION1 AS T  ON T1.state_code = STUID LIMIT 10000000000"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "SELECT T3.city_name , COUNT(DISTINCTT1.city_code__city_name__city_name__country__country__city_code__city_area__longitude__latitude__state__province__stateCode__stateCodes__population__sex__advisor__studentID__sexFromNameToID__studentAge__male__mf__surname__seniorMF__studyYear__department__degree"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "SELECT DISTINCT T1.city_name , COUNT(DISTINCT ) FROM Citys__cities__as_struts__citys__cities__sales.city AS T WHERE country = 'US' GROUP BY T2.city_name ORDER BY SUM_COUNT_OF_ADDRESS_AVAILABLE__IN_BYTES103721858660409845234116"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "SELECT DISTINCT T1.state FROM City_data.city AS T INNER JOIN State_codes.state AS S  ON T1.city_code = S.state_name GROUP BY T2.country ORDER BY COUNTo LIMIT 2 OFFSET 10000000000000000000000000000000000000000000"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "SELECT DISTINCT T1.city_name FROM City_distances.City AS T , State_and_country.Country AS T WHERE T1.city_code = 'ATL' GROUP BY city_code ORDER BY COUNT  DESC LIMIT 20 OFFSET 40000000005596380500000000000000000000000"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "SELECT DISTINCT T1.state FROM City_info.city AS T , Country_states.country AS T INNER JOIN State_info.state AS T  ON T.state = T2.state_code ORDER BY T1.longitude , T1.latitude LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "SELECT DISTINCT T1.state FROM City_info.city AS T INNER JOIN State_info.country AS T  ON T.city_code = 'us' ORDER BY T2.population , T3.county_name LIMIT 10000000000000000000000000000000000000000000000"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "SELECT DISTINCT T1.country FROM City_distance.city AS T INNER JOIN Country.state AS T  ON T2.city_code = T1.city_code GROUP BY T2.county ORDER BY COUNTofthedistinctcountrybylazyrank LIMIT 1000 OFFSET 19980354900000000000000000000000"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "SELECT DISTINCT T1.country FROM City_distance.city AS T INNER JOIN city2_distance.city AS T  ON T1.city_code = T2.city_code GROUP BY t2.city_code ORDER BY COUNTsubdistinct0.longitude LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "SELECT T1.firstname , T1.lastname FROM Student_data.Student AS T INNER JOIN City_info.city AS T  ON T.StuID = CITY_id ORDER BY strftimeleftT1239287800000 , strftimeleftT460035600000 LIMIT 2000000000000000000"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "SELECT DISTINCT T1.LName FROM Student_info.city AS T INNER JOIN City_info.city AS T  ON T1.StuID = T2.city_code ORDER BY T2.state.name LIMIT 200000000000000000000000000000000000000000000000"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "SELECT COUNT(T1.city_code.value_name__objectid__as_fk_table_ref__37826_0054_08039354_250628585__INTEGER_FK_SETS__3395431836_002756174__5066070802_13"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "SELECT COUNT(T1.StuID_city_code253026343732925866125111543576953277362988021852627062660761816013049259449258499818331"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "SELECT T3.Fname , T1.major FROM City_distance.city2 AS T INNER JOIN Student_data.student AS T  ON T1.city_code = T2.city_code ORDER BY T1.city_code , T1.first_name , T1.last_name LIMIT 14975063181777000000000000000000"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "SELECT DISTINCT T1.LName , T3.Major FROM city_distance.city AS T , Student.City AS T INNER JOIN City.city AS T  ON T2.city_code = T.city_code ORDER BY T2.city_name , T3.FsName LIMIT 15000000000000000000000000000000"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "SELECT COUNT(*) FROM City_distance.city1 AS T , city_name__c.v2 AS T WHERE T.city_code = 'australia' GROUP BY T.city_name__c.v2 ORDER BY T.country LIMIT 3000000000000000000000100000000000000000000000"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "SELECT COUNT(T1.city_code_str20394658936361228782516163303072481337360457981151739972859936516037599654104212455688661"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "SELECT DISTINCT T1.city_name , SUM(T2.distance360__TOP50__INC_ESTED__GDP_MULTINATIONALDARWAZA__IDN_COASTRVKQP4U__PONYBRIBERYANNAARANGOOGELVAPAHUBBY239984.LOCITY_DESCRIPTION__ESTED__"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "SELECT SUM(COUNT_POPULATION.population_age_stuID1830495670213500000011893986658202903933066837986799563236028749269709210495139622"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "SELECT DISTINCT T1.state FROM City_distance.city AS T INNER JOIN State_of_the_union2014.State AS T  ON T1.city_code = T.city_code ORDER BY COUNTAustria , COUNTUS LIMIT 150000000000000000000000000000000000000000"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": "SELECT DISTINCT T1.state FROM City.city_name AS T , student.City_code AS T WHERE T2.city_name = 'Los Angeles' GROUP BY T2.city_code ORDER BY COUNTDISTINCTT2.longitude LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "SELECT DISTINCT T1.country FROM City.city_name AS T , (SELECT MAX(T2.country__vacation__countries__vacation__country_id__as_column__2020_37149785386181_6344_F13038_A285D_6575C_9242_988E_2"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "SELECT DISTINCT T1.country FROM City_distance.city AS T INNER JOIN Student_info_per_city.student AS T  ON T1.city_code = T2.city_code ORDER BY COUNTOFstudents_by_city_and_sex LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "SELECT DISTINCT T1.city_name FROM City_distances.City AS T INNER JOIN student_info.StuID AS T  ON T1.city_code = T2.city_code ORDER BY COUNTDISTINCTTOPKAWAYWHERECOUNT10652073326594585 LIMIT 3 OFFSET 32679666223692696"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "SELECT DISTINCT T1.city_name FROM City_distance.city AS T INNER JOIN Student_addresses.student AS T  ON T.city_code = T2.city_code ORDER BY COUNTIFTINGTONERUBQUERYPUSHGRADESWHERESTUDENTID__F6C54831_A9D7_11D9_86B0_A9AB889E11"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": "SELECT DISTINCT T1.state FROM City.city_name AS T , T2.city_code AS T INNER JOIN State.country AS T  ON T1.city_code = T2.country ORDER BY COUNTWITHTAB.value.longitude LIMIT 5 OFFSET 600000000000000000000000000000000000"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "SELECT DISTINCT T1.state FROM City.city_name AS T , student.City_code AS T WHERE T2.city_name = 'Los Angeles' GROUP BY city_name ORDER BY SUMOFCOUNTries.population__sqft__counties__total__LOSA__percentage__city_code LIMIT 10000000000000000000000000000"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "SELECT StuID FROM StudentWHEREcity_name__international__iso3166_2009__city_code__not_in_USA__null_or_undefined__distinguished__students_student_id_EXCEPTFROMCity_tableWHEREcity_name__international__iso3166_2009__city_code__is_null__distinguished__student_id__NOTINSELECTTowns."
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "SELECT DISTINCT StuID FROM Student_DistanceWHEREcity_name__code__french__USNorthwest0116253948722281970LATITUDE__longitude__NOW_STRADDING_4655171602912500072138LATITUDE_FLOAT__JUSTICE_FOR___GARBA"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "SELECT DISTINCT T1.StuID FROM City_direct_distance.City AS T , StudentSexes.Student AS T INNER JOIN FemaleSexes.Female AS T  AS T  ON T.city_code = T2.city_code ORDER BY T2.state , T2.sex LIMIT 1000 OFFSET 48000000000000000000"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "SELECT StuID FROM City.city_name WHERE State = 'PA' GROUP BY STUID ORDER BY COUNT.STUID LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "SELECT DISTINCT T1.StuID FROM City_Distance.city_name AS T , City_Distance.City AS T WHERE T2.country = 'USA' INNER JOIN T2.Men ON T2.city_code = T1.city_code ORDER BY T1.gender  DESC LIMIT 15000000000000000000000000000000"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "SELECT T3.city_code FROM City_distance.City AS T INNER JOIN student_gender_advisor201512861947220728AAS1888719ONT291GINNUS.STUDENTS ON T1.city_code = T2.city_code ORDER BY male_student_gender_advisor201512861947"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "SELECT T3.distance FROM City_Distance_Distance_Calculator.city AS t INNER JOIN city2_distance_distance_calculator.city AS t  ON t.city_code = t1.city_code ORDER BY T3.latitude , T3.longitude LIMIT 10 OFFSET 17865945991129000000000000000000"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "SELECT DISTINCT T1.distance FROM City_Distance_routes_BALINCHIASASASJACQAZASASASARABADASASASASTONASTONALLEYASAHAMILTONASKAMILLSASLAWERASHULMANASHELLYSBLANCASCAROSEMBRASLORINALBERCHESGUETITORINODESASJAC"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "SELECT DISTINCT T1.distance FROM City.city_name AS T , Distance.city1_code AS T , city2_code_as_T2.city AS T INNER JOIN City_Distance.city1_code AS T  ON T2.city_code = T1.city_code ORDER BY DISTANCE LIMIT 10 OFFSET 23466994578929000000"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "SELECT T3.distance FROM City_distance.city1 AS t INNER JOIN City.city AS t  AS T  ON t.city_code = 'boston' ORDER BY strftimeLEFT2369475802955 , strftimeLEFT2460500417800000000 , strftimeLEFT2330566847000000"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "SELECT AVG(T1.distance ), MIN(T2.distance ) AS min , MAX(T2.distance ) FROM City_Distance__city_code_to_longitude_degreeT1_24386546997668088971_v3T2ASR3TUYWKNOO_ASW4MDBKNWG5JNZUHXPQ"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": "SELECT SUM(AVG.distance_km2500_minute15000_max20146378190000000000 ), MIN(DISTANCE_KM2500_MINUTE15000_MAX2014637819000000000 ), MAX(DISTANCE_KM2500_"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": "SELECT DISTINCT T1.city_code FROM City_distance.city AS T INNER JOIN City12058673494238228789_T61220123874474941822953_ONCOLLASINA123D110A808A370000189919235"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "SELECT DISTINCT T1.city_code FROM City.City AS T INNER JOIN Direct_distance2023647859823639676071ONTOTALFROMDISTANCE1km23.DISTANCE202364785982363967607 AS T \n      AS R  ON T1.city_code = T2.city"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "SELECT DISTINCT T1.city_code FROM City_distance_resulting__city2_codes_as_name_sans_state_country_code_v25686954379100273_s132285849565297206_2769440248899286389_v1113"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "SELECT DISTINCT T1.city_code FROM City_distance.city AS T INNER JOIN Student_city_distances.Stu AS T  ON T1.city_name = T2.city_code ORDER BY SUM_distance__VARCHAR_AGG_SUM_VALUE__FLOAT_FROM_STU_AS_T2.distance__SUBSTRING__STR_090__FLOAT__INTEGER__VAL_OF_"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": "SELECT DISTINCT T3.city_code FROM City_distance.city AS t INNER JOIN Citys_population.city AS t  AS T  ON t.city_name = 'Sydney' ORDER BY strftimebktdate , strptimebktdate LIMIT 25000001790000000000000000000000000000"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "SELECT DISTINCT T3.city_code FROM City_distance_km2t2782433594613100000022876T32540661722WHEREcity_name__containsSUBSTR18429409563659828772471T0000495434242"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "SELECT SUM(distance ) FROM City_Distance.City AS T INNER JOIN CityBAL.city AS B  ON T.city_code = B.city_code GROUP BY T.city_name ORDER BY T.city_name LIMIT 1000000000000000000000000000000000000000000000000"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "SELECT SUM(distance_between_city1_codes.longitude_of_street_segment__str_to_num__ascii_underscores_20191013745852_68508408556031720654416001930574504277563424528662"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": "SELECT AVG(T1.distance_km2008__26538427111219121366__FULL_JOBAR_ASR_STUDENTS__NANA__U18MF_NATURES_INDEPENDANT__TOTAL__7087453218903234708__POLYG"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "SELECT SUM(DISTINCT ) AS sum , AVG(distance_between_city1_code_other_city2__longitude__40.xxxxd37795e6aa5839f8b7ce04fe186187c5 ) AS avg FROM city_distance_between_city_codes_and_metro_areas_and_other_city_codesWHEREcity_code__longitude"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "SELECT T3.city_name FROM City_distance.city1_code AS T INNER JOIN City.city2_code AS T  ON T.city_code = T2.city_code ORDER BY T2.latitude , T2.longitude LIMIT 10 OFFSET 6745092183654964185617159636795334553"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "SELECT T3.city_name FROM City_distance.city AS T INNER JOIN State_dept_voter.state AS S  ON T1.city_code = S.city_code ORDER BY T2.latitude , T2.longitude LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "SELECT T3.city_name FROM City.city AS T , City.city_code AS T INNER JOIN Direct_distance.city AS T  ON T1.city_code = T2.city_code ORDER BY T1.longitude , T1.latitude LIMIT 1000 OFFSET 18000000530662472523910428063423"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "SELECT T3.city_name FROM City.city AS T , CityDistance.dbo AS T INNER JOIN Student.LName AS T  ON T1.city_code = T2.city_code GROUP BY T3.city_name ORDER BY SUMOFPOINTSFROMTARGETBETWEENTHEABOOKPICTUREOFTARGETFORCITYAZIERISTANDINGAREASINCOUNTRYWITHTHEDIST"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": "SELECT DISTINCT T1.city_code , SUM(T3.distance20km__463675282912363000000__POLYMORPHIC_GLASS_LIQUIDITY__15249731854131000000__THIRD_STATE.REGIONAL_FLOW___NATIONAL_BAN"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "SELECT DISTINCT T1.city_code , SUM(T2.distance20mins0km ) FROM City_distances_table16349854224758000000_city1_CODE226189259101195800002_city1_city2_code295600434582000"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "SELECT DISTINCT T1.city_name , AVG(T3.longitude_20km_inches__FLOAT__976485402803966014322LARGE0219124059731159430LARGER03009290611283179220LARGE"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "SELECT DISTINCT T1.city_name , AVG(T3.Distance__NMXRSTP_5420638972024189391__LH2428 ) AS total_distance FROM City_distance_listing1019344003625321542258TINY.city AS T INNER JOIN city_distance_list"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "SELECT strftimeleft.longitude , strftimeleft.latitude FROM (SELECT STRFTIMELEFT.latitude , STRFTIMELEFT.longitude FROM City1_toCity23403681795502242581WHERESTUID462940133136920679169655336718631656"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "SELECT SUM(T1.distance ) FROM City_direct_distance.city AS t INNER JOIN Student_locations.Stu AS t  ON t.city_code = 'LC' ORDER BY T3.city_name , T2.fname , LC.longitude LIMIT 10 OFFSET 99465781940179349098000000000000"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "SELECT DISTINCT T1.firstname , T2.lastname FROM City.city AS T INNER JOIN Student.LName AS T  ON T.city_code = T.city_code ORDER BY T.longitude LIMIT 10 OFFSET 40000000596759900000281249395490000443455535"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "SELECT DISTINCT T1.LName FROM StudentSiblingStuIDs_INTEGER_DISTANCE_SALES_TASK_STRATEGY.SUBSTRING AS T INNER JOIN CityCodes_INTEGER_DISTANCE_SALES_TASK_STRATEGY.SUBSTRING AS T  ON t1.StuID = T1.city_code ORDER BY DISTINCT LIMIT 2"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "SELECT DISTINCT T1.state FROM City_distance.city AS T INNER JOIN Student.city AS T  ON T.city_code = 'L' ORDER BY T2.city_code LIMIT 10000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "SELECT DISTINCT T1.state FROM City_direct_distance.city AS T INNER JOIN Student_city_addresses.LName AS T  ON T1.city_name = T2.Fname ORDER BY T1.city_name LIMIT 250000000000000000000000000000000000000000000"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "SELECT T2.name FROM Reserves.boat AS T INNER JOIN Sailors.name ON T1.sid = T2.sid ORDER BY T2.age LIMIT 145396754801943922240418926329786461852303989977626747923622"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.boats AS T INNER JOIN Sailors_2104856790236_28162735790413_t840AS_on_sailors_3723415983931__t1857847977346108_inner_ONLYWHERE"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "SELECT T2.name , T2.age FROM Reserves168449852310321719220160272973521078162890422323780976989996562956337884132565549576161"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "SELECT T1.name , T2.age FROM Reserves.sid AS T INNER JOIN Sailors.name AS T  ON T.sid = res.sid ORDER BY T.name LIMIT 1000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": "SELECT T3.name FROM Reserves.boats AS T INNER JOIN Sailors.boat AS T  ON T.sid = T2.bid ORDER BY T3.name LIMIT 200000000000000000000186575149465780932025870928514832626"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.boat AS T INNER JOIN Sailors_sid_bids.sid AS T  ON T.sid = T2.bid GROUP BY T2.name ORDER BY COUNTDOWN2DONE LIMIT 10000000003765940382437547299636727538375"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "SELECT T1.name FROM Reserves.boat AS T INNER JOIN Sailors.name AS T  ON T1.sid = T2.sid ORDER BY T3.name LIMIT 2 OFFSET 4000000000000000000008156799549233652527846737914628"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "SELECT T1.name FROM Reserves.boat AS T INNER JOIN Sailors_Name_Position.sid AS T  ON T1.sid = T2.sid ORDER BY T3.bid LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.boat AS T INNER JOIN Sailors.sid AS T  ON T1.sid = T2.sid ORDER BY T2.name LIMIT 10000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "SELECT T2.bid FROM Reserves.boat AS T , Sailors.name AS T , Sailors.age AS T WHERE T1.sid = 124846170324598932941 LIMIT 1000000000000000000001000000000000000000"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "SELECT T1.name FROM Reserves.sid AS T LEFT JOIN Sailors_enlistment_data_reporting_systems_with_personal_details_sources_tab_p42678935766520110000620_07863636_9489561_asdfaee2377E015C2F"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves_listing_boat__sale_results_within_day_as_foreign_key_to_sailors_reserve__id_1439673688506128_6796197500220722263064499610838664021"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "SELECT DISTINCT T1.name FROM Reserves.Sailors AS T LEFT JOIN Sailors_Bidder22389564072679873_399118347647460326_716340778303274647_365591245700101201"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.Sailors AS T LEFT JOIN boats.boat AS T  ON T1.sid = T2.bid ORDER BY T1.age , T1.sid LIMIT 1438265760947920000000000000000000000000000000000"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": "SELECT DISTINCT T1.name FROM Sailors_Rating_Listings_Study.boats AS T INNER JOIN Reserves_Listing_Study.sailor AS T  ON T1.sid = T2.bids ORDER BY T2.rating LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "SELECT name FROM SailorsWHEREratingLessThan7GiveMeNameOFSkipperLIFESailorsAgesBetween630241569168963267614985GiveMeNameOFSkipperLIFEOFSkipperInAtLeast7GiveMEnterpriseTABLETOPNineteenNameOFSkippersLIFETwoNameOFSki"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM Sailors_boat_reserves_bid_set198506437276940490017808596WHERETARGETS.BID INNER JOIN CLASS_DESCRIPTOR_SETTINGS.class_descriptions AS T  ON T2.sid = T1"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM Sailors_boats__invoice_data__invoice_assets_table_2015_319546711088735__2017_200520339903000622833527399010942484820"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "SELECT DISTINCT T1.name , T2.name FROM Reserves_bid_resulting_in_multiple_boat_reservations_as_sid_with_a_foreign_key_AS_T1_innerjoin_as_T2_on_T2.sid AS T ORDER BY T1.bid LIMIT 10000000000000000000000"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "SELECT DISTINCT T1.name FROM Reserves_2boatresalesingleBOATsWHEREReserveID2boat.bid INNER JOIN Sailors_listingsTASKPENDINGTASKASSEMBLINGONSTANDARDINVENTORYASSTEAMTASKPAINTERSCHOOLTARGETSAILORAREMAGICBUILTINS034518296"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT DISTINCT T1.sid FROM Sailors_reserve_listing197015860342920000019150WHEREcolorRELATEDTOGETRIOTGRAMS25563252910367780000795379026784545743949466"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "SELECT DISTINCT T1.sid FROM reserves_flagged_redASFINALGASARDSRESERVE_blueASFINALGASARDSRESERVEWHERENAMETAXEDT1032518987463812176WHEREIDTAXT232394782977207170000687226454"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM reserves.boat AS T INNER JOIN sailors_rating_listing1016387843897159168T2A16FGWASGU02T90187ONONNONONONONO12450931970338220894800"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM Sailors_boat_reservations_listingT1.Sid AS T INNER JOIN ReservesT113309857640588AS_redT226215431150481T1N281774088778487BT1C3838"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT DISTINCT T1.sid FROM Sailors_reserve_ship_out_20163408591706000000T1BID_RUNASAREDWAVE071890210472000000T1BID_BLUEBOAT_219145823945330000"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "SELECT T1.sid FROM Reserves_Rating_and_Day_Information_With_Source_2016122315498714675_B11240861T28C4013992DG6673_848982_341978173778653135_sailors_"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM reserves.boat AS T INNER JOIN sailors_rating_votes_by_ship_id_boarding_saidT30654980519500000000ASSEMBLYONLKCW379728187824177888D65330299"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM Sailors_listing1647836059838800000020436340128511WHEREcolorRATINGSLIGHTBURSTRONGFORFARMERASIKEEPERANDRIDEWITHRELDSCTARESRESORTEDBYREDANDBLUE19"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "SELECT DISTINCT sid FROM ReservesWHEREforeignkey__r.foreignKey INNER JOIN VARCHAR20003165479762989421_sailors_that_nnotreserved_a_boat__WHEREforeignkey__lte_2015506388347944000001217222"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "SELECT T2.name FROM Reserves_involved_by_sailors_outside_boat_sales.T1 AS T INNER JOIN Sailors_by_sid.name AS T  ON T1.sid = T3.sid ORDER BY T2.num  LIMIT 10000000000000000000000000000000"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM Sailors_not_a_reserve_boat_IDS_IN_THE_TABLE_WHERE_NOBOATNAME_WITH_TARGETING__LANGUAGE_CODE_E300R2480A6517937255441695_NOT_RESERVE_HAS_SUBJECTS_"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves_noBOATSWHERERatingLessThan13569084170200000000LASERVENTRYESTOFONESTU_48019135590317460000568795685577666838394662"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "SELECT T1.bid FROM Reserves_listing2036783985191338648_7830083569467188446_57027109081357385494WHERETOSTARS320840026444363509113520"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "SELECT DISTINCT T2.sid FROM Reserves_vacation_weekly2016051983046700000T1_CARA128469084187323289WHERESoldoutTOTALTARGETTASKFORSALE18498254972329453235WHERES"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.boat AS T INNER JOIN Sailors_Reservations.sid AS T  ON T.bid = B2.sid ORDER BY B2.sid LIMIT 10455167358492810000000000000000000000000000000000"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.boat AS T INNER JOIN Sailors.sid AS T  ON T.sid = Sailors.sid ORDER BY T.name LIMIT 103 OFFSET 56289704352723428936468939155457970446171643453"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors_data.sid AS T INNER JOIN Boats_data.bid ON T1.sid = B2.bid ORDER BY T3.foreignkey.rating LIMIT 10 OFFSET 10000000165878694611766857418205434850382343"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors_and_Boats20032547860930200000058751793280109WHERETRIM11983527000387786251952899108579410646205442"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors_bids_reservations2020265423891700000228_asl12211338569751625613_92944460254731677829698000469633336"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.boats AS T INNER JOIN Sailors_rating_data_modified_by_sid_as_foreignkey_with_score_as_secondary_foreignkey_within_the_same_group_on_sailor_no_30514569145864797210425118466"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM Sailors_Reserves__rated_t100865934732562906600T110952050621379241091WHEREDVRID__GREATER_THAN_23297860263634120"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "SELECT DISTINCT T1.name , T2.sid FROM Sailors_Reserves.name AS T INNER JOIN Boats_Reserve.name AS T  ON T1.bid = B2.bid GROUP BY T1.sid ORDER BY COUNTIFTINETABLES__STRATILES_MIN__COLOR_CODES._G04005016_5893434754360"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "SELECT DISTINCT T2.name , T2.age FROM Reserves.name AS T INNER JOIN Sailors.name ON T1.sid = Sailors.sid ORDER BY T3.name LIMIT 1000 OFFSET 60000000584077300000201687987497616477108116"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "SELECT T1.name , T2.age FROM Reserves.boat AS T INNER JOIN Sailors.sid AS T  ON T1.sid = T2.bid ORDER BY T.foreignkey.max_age LIMIT 10506834572729349786464013857429190646347481929"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "SELECT SUM(T1.name_or_date_of_birth__set__86570429831392300000__sold_group_id__auto__as_2d_map_longitude__2d_map_latitude__13_inches__auto__as_longitude__8162417052641400000__"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "SELECT COUNT(*) FROM reservesWHEREforeignkeyname1.T2101336257249688272 INNER JOIN JOHANESEMUELLER2603305217108950014_reserve_sailors225833548591626755926_reserve"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "SELECT SUM(CASE ) FROM Reserves.sid WHERE name = 'Age (male)' GROUP BY SID ORDER BY AVG  DESC LIMIT 10000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "SELECT T1.age FROM Reserves.sid AS T LEFT JOIN Sailors.name AS T  ON T1.sid = T2.name ORDER BY T1.rating LIMIT 1000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "SELECT COUNT(DISTINCT ), T2.name FROM boats_listingWHEREname308497564121800000013850566146635945903361817051527735285920779590630100726924159"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "SELECT COUNT(T1.name.startswithINSTRCASEVALUESELF4D427690581312468886391546043521864071033356284028550716835026549329599683577688323"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "SELECT CASTSUM2013.rating , MAX(T2.age__max_value__68794158250000000000__DATE__1294631517711021125543109503831425954289857383945861283"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "SELECT CASTSUM100.rating , MAX(CASTSUM100.age ) AS avg FROM Reserves.sid AS T INNER JOIN Sailors.name ON T.sid = Sailors.sid GROUP BY T.bids ORDER BY T.bids LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": "SELECT SUM(SUM_RATINGS.total_rating103612373439502860820100041893982386002926468101627083759563638918059314695312565861373"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "SELECT SUM(DISTINCT ), COUNT(T2.name_2001114196581337762212041756901265008976422082584900664578236016990164154383470167382"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": "SELECT SUM(DISTINCT ), COUNT(DISTINCT ), MAX(t2.id_boat_num14396287000062650000016638588921120239493155413238986099365709323415271212"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "SELECT SUM(IIF.reserve_number_above_201436384130000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": "SELECT SUM(SUM_COUNT_BY_SENDER_TARGET_AS_VOTER_INVITATIONS_FOR_BAY_GATE_RESERVE__WITH__AIRBORNE_DESCENDING_3714569075326155000008328_RESERVE_NAMED__TARGETED_TO_JONATHAN_"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "SELECT SUM(COUNT_ALL_TABLES.ReserveIDs__c.bid ) FROM boats_listing.boats AS T INNER JOIN (SELECT T2.name , MAX(T2.day_of_reservation__year_2007__day_of_reservation__reserved__bid1_reservation__reserved3_reservation48_reservation578_reservation593_reservation613"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "SELECT COUNT(*) FROM Reserves.name AS T WHERE T.foreign_key = 'SailorID' GROUP BY T.name ORDER BY T.name LIMIT 1000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "SELECT T2.name FROM Reserves_in_Order_By_ID_Amongst_the_Bidder_Lists_WITH_Sailor_ID__INTEGER_WHERE_TOTAL_BOATS__GROUPBYTOTAL_NUMERIC_4_SUM_INCLUSIVENESS_27086403985771804670_ORDER_BY_"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "SELECT AVG(rating__r2.T2.name_description__r31759042838662800000__group_by_sid_foreignkey_foreignkey240519812924910000_12268582897689645000_25389696"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "SELECT DISTINCT T2.name , AVG(T3.rating_id1587403920622400000011293900142132996996161719523990563632411704314849323570110328"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "SELECT DISTINCT T1.name , T2.rating , T1.age FROM Reserves.sid AS T LEFT JOIN Sailors_rankings.T1 ON T1.bid = 'S0487396' ORDER BY rating , age LIMIT 1 OFFSET 50000000000200000000000000000000000"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "SELECT DISTINCT T2.name , T3.rating , T1.age FROM (SELECT DISTINCT T1.sid , T3.rating , T1.age FROM SailorsWHERENameLikeT2.name ORDER BY rating ) AS t ORDER BY T2.rating , T2.age LIMIT 3600000000000000000000000000000"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": "SELECT SUM(T1.bids.value_counts__total__group_by_key_t2_and_values__sum__values__first__first_name_text__second__name_text__first_name_text__last_name_text__date_of_birth__age_years__rating__country_code___first_name_text__middle_name_text__last_name_text__gender_text__first"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "SELECT COUNT(*) FROM BoatsWHEREname__text_contains_null_as_second_argument_text__is_NULL_AS_FIRST_ARGUMENT_TEXT__andbid__equals20085167740769010000350189846919888412804522916577193999"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.name ) FROM Reserves_data.Boat AS T INNER JOIN Boats_color.Color AS T  ON T.BID = B2.bid GROUP BY T1.foreignkey ORDER BY SUM_red LIMIT 300000000000000000000000000000000000000"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "SELECT COUNT(*) FROM reserves.boats WHERE T1.name = 'red' GROUP BY T1.name ORDER BY COUNTINCTT2.name LIMIT 100000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": "SELECT DISTINCT T1.name FROM reserves.boats AS T INNER JOIN Sailors_Reservations_Invoices_Aircrafts_Crews_Lieutenants_Personnel_Rated_At_Lower_LevelsOnTuesdayASAPONLYWHEREAGEBETWEEN20AND30GROUPBYNAMEORDERBYSUMIDATSDEGREEHOPERDINSIZETWOMAXIMUMSE"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "SELECT DISTINCT T1.name FROM Reserves.boats AS T INNER JOIN Sailors.sid AS T  ON T1.sid = T2.sid ORDER BY strftimeLEFT_childrange2021946T18305173980000000 , strftimeLEFT_grandparent2022979T18429294000"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "SELECT name FROM SailorsWHEREratingLESSTHATOFallBOOKINGredboatsANDtweetsLIKELOWERCASETEXT_VARCHAR_SEPARATEDByWHITESPACEWITHIN24HRSFROMDAYORDERINGENDTHISFORMANDATARIZEMATTERSOLOPEAVALIDAYONAGGIESNAMETHAN352949687738122062"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors_with_red_picsT1WHERErating215LUKEWITHIN30MATTERSGRADECREDITIONANDSUBJECTRatingLUKEWITHIN5MATTERSGRADEWHEREDegreeCREDITEIRESTABILITYJOBLIMITRatedGradeANDGID3296277483160"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "SELECT SUM(T1.rating_max2653309778738251606421513231671553956555551997482172617073660463135025544284644213954616363"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "SELECT max_rating FROM SailorsWHEREname.text INNER JOIN Boats12601457896312800000ONbid.name AS T \n   AS x  ON T.bid = (SELECT MAX(T2.max_rating_bid_29423632568059035277__max_rate_all_bids__29"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "SELECT T1.name FROM Reserves.boat AS T LEFT JOIN Sailors.sid AS T  ON T1.sid = T2.bid ORDER BY T3.name LIMIT 100000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves.boats AS T INNER JOIN Sailors_name_positioned_as_reservist_sid_to_bid_pivot_tbl10958636_325376242_as_t20875931_273829966__WHERE_dID_INGESTED_FROM_T20"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "SELECT DISTINCT T2.name , T3.age FROM Reserves.name AS T INNER JOIN Sailors.name AS T  ON T1.sid = T2.bid ORDER BY T1.rating , T1.name , T3.age LIMIT 10 OFFSET 10005846976732398122479636928342939"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "SELECT DISTINCT T1.name , T2.age FROM Sailors_rankings_updated_by_friends_as_sailors_sorted_by_decree_from_date_to_date_order_by_subquery119083753806227964202914399407489595044119166"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "SELECT DISTINCT T1.model FROM stocks.headphones AS T LEFT JOIN models.models AS T  ON T.Store_ID = T1.Store_ID GROUP BY T1.Model ORDER BY SUM_Price LIMIT 1;"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "SELECT DISTINCT T1.model FROM headphone_models_by_price_ranking.table AS T ORDER BY T1.Price LIMIT 10000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": "SELECT T1.Model FROM headphone_names2arrays.headphone AS t INNER JOIN stock_name_quantity_price_table.stock AS s  ON t.Headphone_ID = s.Store_ID ORDER BY T1.Model LIMIT 100000000000000000000000000000000000000000000"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "SELECT T1.model FROM headphone_stock.headphone AS T , stocks.headphone AS T WHERE T2.model = 'D053698' ORDER BY T2.Model LIMIT 100000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "SELECT DISTINCT T2.model FROM stocks.headphones AS T , stores.store AS T WHERE T.Store_ID = (SELECT MAX(T1.Store_ID ) FROM stores.stock AS T INNER JOIN headphones.class AS T  ON T1.Headphone_ID = T2.HEADPHONE_ID GROUP BY T2.model ORDER BY COUNT_STORES__STORE_ID__DISTINCT LIMIT 1"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "SELECT DISTINCT T2.model FROM (SELECT DISTINCT T1.name , SUM(T2.class ) AS total FROM stocks_headphones.headphone AS T INNER JOIN products.model AS T  ON T.Headphone_ID = T1.Headphone_ID GROUP BY T2.model ORDER BY COUNTIFS_by_class LIMIT 1) AS T ORDER BY sumcount LIMIT 1000000000"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "SELECT DISTINCT T1.model FROM (SELECT DISTINCT T2.name , SUM(T2.driver_matched_dB ) AS num FROM headphone_info.headphone AS T INNER JOIN stock.store AS T  AS T  ON T.Store_ID = T2.Store_ID GROUP BY T1.model ORDER BY counttotal__counts___num LIMIT 2) AS T ORDER BY COUNTtotal__counts___num LIMIT "
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": "SELECT T1.model FROM headphone_classification.HEADPHONE AS T INNER JOIN stock_product_unit_location.STORE AS T  ON T.Store_ID = T1.Store_ID GROUP BY T1.model ORDER BY COUNT_BY_TYPE LIMIT 2 OFFSET 0;"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "SELECT T3.Quantity FROM stocks.store AS T INNER JOIN products.HEADPHONE AS T  ON T.Store_ID = T1.Store_ID GROUP BY T3.Pricerange ORDER BY SUM_Price__gte__200 LIMIT 50000000000000000000000000000000000000000"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "SELECT SUM(IIF.Price ), IIF.Price \nFROM (SELECT DISTINCT T1.Model , COUNT(T2.Price ) AS num FROM headphone.headphones AS T , stock.store_id AS T INNER JOIN store_stocks.Price AS T  ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.model ORDER BY COUNT.num LIMIT 3) AS T ORDER BY T."
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), COUNT(DISTINCT ), SUM(CASE ), COUNT(DISTINCT ), SUM(CASE ), SUM(CASE ), SUM(CASE ), COUNT(DISTINCT ) AS total FROM (SELECT DISTINCT T1.Name , T2.model FROM headphone_stocks_reporting_order2015147386818982000"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), MAX(CASE ), MIN(CASE ), COUNT(DISTINCT ), SUM(CASE ), MAX(CASE ), MIN(CASE ), CAST_ALL_VALUES FROM EARPADSGROUPDISTRIBUTIONGROUPS__STRUCTURED__BY_ORDER_SEQUENCEGROUPINGALREADYWHEREWHEREALLOWEDWHEREWHEREORDEREDWHEREWHERE"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": "SELECT DISTINCT T1.name FROM headphone_stock.headphone AS T INNER JOIN store_productivity.model AS T  ON T1.Headphone_ID = T2.Store_id ORDER BY T2.model , T3.Ticker LIMIT 2 OFFSET 2650000000000549621813155746020104884"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "SELECT DISTINCT T1.name FROM (SELECT T2.name , COUNT(T1.model_id18673498052321718500000__T1.name399016251684950000000__T1ASM3145397047820821850000"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "SELECT DISTINCT T2.model , T3.class FROM (SELECT T2.model , T3.class , SUM(T1.Price__RM__c225618670481934744__GOLD__c22561867048193463_657315174328415255_32"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "SELECT DISTINCT T1.model , T1.class FROM headphone_products_models_lowest.headphone AS T INNER JOIN stocks_lowest.store AS S  ON T1.Headphone_ID = S.Store_ID ORDER BY T2.price LIMIT 10000000000000000000000000000000000000"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": "SELECT SUM(CASE ) AS sum , T1.Price FROM (SELECT DISTINCT CASE \n        FROM (SELECT DISTINCT T2.model , T3.Drivermatched_dB FROM store_headphones_stocks125v48930278786627510103788244654294300664868800"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "SELECT DISTINCT T2.Price , SUM(T1.price__reals__auto__strftime_format__divisor__pct_of_total__0501309641387875__INLINEFORMAT__REAL__CONCATSTR__strftime_format__divisor_pct__INFRESH_STORES_HEADPHONE_MODEL__DESCRIPTION__"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "SELECT DISTINCT T1.model FROM headphone_classification.models AS T INNER JOIN stock_classes_sales.stock AS T  AS T  ON T1.Store_ID = T1.Store_ID ORDER BY T1.Model , T2.Headphone_type_sale_name LIMIT 4000000000000000000000000000000"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": "SELECT DISTINCT T1.model FROM (SELECT DISTINCT T2.type FROM products_types.product AS T INNER JOIN headphone_classification.headphone AS T  ON T2.Type = 'Bowls' ORDER BY T1.Headphone_ID LIMIT 1) AS t WHERE T2.kind = 'comfort pad' ORDER BY t2.name , t3.model LIMIT 10000000"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "SELECT T2.name FROM headphone_stock.headphone AS T INNER JOIN stores.store AS T  ON T1.Store_ID = T2.Store_ID ORDER BY T1.model LIMIT 1000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": "SELECT T1.name FROM headphone_modeling.stock AS T INNER JOIN stores_items_bags.product AS T  ON T1.Headphone_ID = T2.Product_ID GROUP BY T1.name ORDER BY COUNT_DESC__LABEL_CODE__LABEL_DISTINCT LIMIT 2000000000000000000000000000000"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "SELECT DISTINCT T1.model FROM (SELECT AVG(T2.Price ) AS avg , SUM(T2.Price ) AS sum FROM stocks.headphone AS T INNER JOIN prices_all_stocks.price AS T  ON T2.Headphone_ID = T1.Headphone_ID ORDER BY T2.Price LIMIT 1) AS a WHERE a.avg <= (SELECT AVG(T1.model ) FROM stocks"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "SELECT DISTINCT T1.model FROM (SELECT AVG(T2.Price ) AS price , T3.Model FROM (SELECT T2.Headphone_ID , SUM(T1.price ), T2.Name FROM headphone_model_price.headphone AS T INNER JOIN stock_name_location.store AS T  ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T2.Price ORDER BY SUM_price LIMIT"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "SELECT DISTINCT T2.name FROM (SELECT T1.name , SUM(T1.date_opened__minutes__longitude__latitude__hour__minute__second__seconds_per_second__RMS_involved__gain__phase__phase_interference_phase__phase_separation__phase_separation___RMS_per_second__phase_parallel_phase_parallel_phase_parallel_phase_separation"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "SELECT DISTINCT T2.name FROM stocks_opened_by_date_ascendingORDERBYstoreopendateLIKEtokensFROMstoreopendateWHEREstoreopendateRANGEFROM01__lt__240567295_1339873481_675TO1216052634805_357696019665300"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "SELECT T1.Name , T2.Parking FROM store_neighborhoods_nearestTARZANA_NEIGHBORHOOD_TO_STORE_ID10978631811751000000LINES.east AS A , T2.Parking AS B INNER JOIN stocks_neighborhoods_nearestTARZANA_"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "SELECT DISTINCT T2.name , T3.parking FROM store_addresses_listing_maps_within_neighborhoods_of_Tarzana_victoria_apartment_and_residential_subclass1_589761920237514800000154234379000285122000"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "SELECT COUNT(DISTINCT ), T2.neighborhood FROM store.Store_ID AS T INNER JOIN neighborhoods.Neighborhood AS T  ON T.Street = T1.Neighborhood ORDER BY T2.name LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), DISTINCT FROM (SELECT DISTINCT T1.Neighborhood , T2.Parking_size FROM (SELECT RTRIM20094958.name , SUBSTR200347613859200012 , LENGTHOF8271858749335000"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "SELECT DISTINCT COUNT(DISTINCT ), T2.name FROM store__neighborhoods_as_foreign_keys_with_stock_data_table.T1 INNER JOIN stores_as_foreign_keys_for_NEGONAL_stock_data_table.T2 ON T2.Store_ID = T1.STORE_ID GROUP BY T3.neighborhood ORDER BY T3.neighbor"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "SELECT DISTINCT T2.neighborhood , COUNT(T1.Name__NM_TEXT__REPLACEALL__VALUE__SELF__ID__NOMINAL_DECIMAL__T1.Store_ID__PRECEDENT_NAME__LOCATION__REGION__RATEPATTERN__LOCATIONS__GROWTHDURINGCONDITION__LOCATIONS__PRICE_OF_STOCK"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "SELECT COUNT(T1.Headphone_ID1.Headphone_ID263790541336862530000013790960152502926421223002950279910101982895034644822967136233"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": "SELECT DISTINCT T2.name , SUM(T1.Quantity__int32 ) FROM (SELECT DISTINCT T1.Store_ID , T1.Price , T2.Name , COUNT(T2.Headphone_id__IW_DB_18763_209278541217815972375 ) AS q FROM stocks_item_stockticket_stock"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": "SELECT DISTINCT T2.name FROM store_stocks.store AS T LEFT JOIN stores.STORE AS T  ON T1.Store_ID = T2.Stores_id ORDER BY T2.Store_ID LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "SELECT DISTINCT T2.name FROM (SELECT DISTINCT T1.stores FROM store_stock_productivity_v20130816T1239677WHERESTOREIDNOTINPUTTEXTANDMODELNOTINPUTTEXTFROMT2U80592DWHEREParkingNOTINTEGERALMINESITEHUNTERCAMERA.NAME AS C ) AS T ORDER BY T"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "SELECT T1.name FROM headphone_stock.headphone AS T INNER JOIN stock.Store AS S  ON T1.Store_ID = S.Store_ID GROUP BY T2.name ORDER BY COUNTIFS_by_model_too_differs_from_stock_models.lastlineage__sortid.name LIMIT 10 OFFSET 68403943575848512000"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": "SELECT T1.model FROM headphone_stock_relevant_models_within_15days_long_last_store_opened_as_headphones_available_ASASINWHEREStoreIDNOTINSEARCHRESULTSANDINFORMATIVEMODELNOWHEREDOGWITHREVERNOSINGLEDISTRIPTOSTORENAMESUNREADABLEUNWRAPPERTUCKBACKCIRCLEST"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "SELECT DISTINCT T2.model FROM store_stocks.dbo AS T LEFT JOIN stocks.dbo AS T  ON T1.Store_ID = T2.Store_ID GROUP BY T3.model ORDER BY COUNTIFS0 LIMIT 1250000000000000000000000000000000000000000000"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "SELECT DISTINCT T1.model FROM headphone_stock.headphone AS T INNER JOIN store.Store_ID AS T  ON T1.Headphone_ID = T.Headphone_ID GROUP BY T2.model ORDER BY SUMOF LIMIT 0 OFFSET 12265490573385955268018377540882050510"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.quantity__dBs__1993_6043875400000000000387502238981_store_id_3017523779413230528779379190068574136136"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "SELECT SUM(DISTINCT ) FROM stocks.store WHERE name = 'woodman' GROUP BY store ORDER BY COUNT  DESC LIMIT 1000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "SELECT DISTINCT T2.neighborhood FROM store_stock_table__stock__Parking_locations_v2017_08_31T191695_233464T21.headphone AS T WHERE T2.Location = 'Unknown' LIMIT 10000100019014679000000000000"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "SELECT DISTINCT T2.neighborhood FROM store_stocks_research_and_management_1674380359306052000_v218936212145323_INFORMATIONASK_BALLARESTING_ASKTOPS.WU_LOC_277 AS T WHERE strftime = '2021"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(T1.author_id ) FROM Author_list_ibfk_2.Paper AS T INNER JOIN Author_list_ibfk_3.Author AS T  ON T2.author_id = T1.author_id ORDER BY T1.affiliation_id LIMIT 10000000"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(T1.author_id ) FROM Author_list_ibfk_2.T1 AS T INNER JOIN citation_list_ibfk_3.T AS T  ON T1.paper_id = T2.Paper.paper_id GROUP BY T1.name ORDER BY COUNT.value LIMIT 1000 O"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "SELECT COUNT(T1.paper_id.value_of_column_name4390783253261200000002269394115713095297562586707385056363"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T1.published_date ) FROM author_list_ibfk_2.paper AS T INNER JOIN citation_data_grouping.citation AS T  ON T1.author_id = T2.cited_pap ORDER BY COUNT.PAGE LIMIT 100000"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "SELECT COUNT(T1.affiliation_id_list_strv1234567890000000000000000000000000000000000000000000000000"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T1.affiliation_id ) AS num FROM Affiliation_list__list_to_table_v2.dbo__Paper AS T INNER JOIN Author_list__list_to_table_v2.dbo__Author AS T  ON T.paper_id = T1.paper"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "SELECT COUNT(T1.paper_id.affiliation_id_strv296574283931242000003389058315620290342302801596"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "SELECT COUNT(T1.paper_id ) FROM Affiliation_list_NATRASJEWITZ2003TUXENAASGINETI_DYOBAKTUDEGULIRERBELKINGHAMMERFLOWERSCASESUS"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "SELECT COUNT(T1.paper_id.name ) FROM citation.paper AS T , T2.paper AS T INNER JOIN affiliation_authorlist_tbl.author AS A  ON T1.cited_pap = A.paper_idWHERE \n  LIMIT 20"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "SELECT COUNT(DISTINCT ), CASTDateValueAsDateTime FROM Affiliation.cited_paper AS T INNER JOIN Author_list_ibfk_1.author AS A  ON T1.affiliation_id = A.affiliation_id GROUP BY T2.paper_id ORDER"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "SELECT T3.name , T1.address FROM Affiliation.Affiliate AS T INNER JOIN Author_list.author AS T  ON T1.affiliation_id = T2.author_id ORDER BY T2.paper_id LIMIT 100000000000000000"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "SELECT T3.name , T1.address FROM Affiliation_list_of_publication_authorities_with_paper_affiliated_to_Paper_PIM052349600786723T0181846570084C9"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "SELECT DISTINCT T1.venue , T2.year FROM Affiliation.Affiliation AS T  INNER JOIN Author_list_ibfk_1.paper AS P  ON T1.affiliation_id = P.author_id GROUP BY T1.name ORDER BY CASTlteDateValueTimeOF"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "SELECT T3.location FROM citation_published_paper.Paper AS t INNER JOIN publication_listing.Publication AS t  AS P  ON t.paper_id = P.paper_id ORDER BY P.year LIMIT 20135489657818000"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "SELECT DISTINCT T1.title , T3.paper_id FROM Citation_List_IBFK_1T2T3ASWITHIN_201206487153660001DASWEETWHATITESWITHMYVOCABULARY3"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "SELECT DISTINCT T1.paper_id , T3.paper_id FROM Affiliation_listing_paper_listing_as_cited_papers_t22162489350715195718367079"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "SELECT DISTINCT T1.paper_id , T2.name FROM Author_listASAggTbl_CitationListTbl_RFID_Tbl_ALL_PIS_NOW_asaaagtbl_Citepac.Paper AS T , T1.affiliation_id"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "SELECT DISTINCT T1.title , T3.paper_id FROM Citation_List_PaperTitles_Papers_Cited_MckeownTITLES_PAPER_IDS_WITH_AUTHORS_IN_2017_GRADE_RAT"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "SELECT T1.title , T2.paper_id FROM author_list.paper AS T INNER JOIN affiliation_list.affiliation AS T  ON T1.author_id = T2.affiliation_id GROUP BY T3.affiliation_id ORDER BY T3.aff"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "SELECT DISTINCT T1.paper_id , T2.paper_id FROM Affiliation_list.Affiliation AS T INNER JOIN Citation_list.Cited_Paper AS T  ON T1.affiliation_id = T.affiliation_id"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "SELECT T1.paper_id FROM citation.paper AS T , authors.affiliation AS T , authors.name AS T , authors.email AS T WHERE T2.name = 'Mckeown' ORDER BY T2.author_"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "SELECT DISTINCT T1.paper_id , T3.paper_id FROM authors_listing.citation AS T , authors_listing.paper AS T INNER JOIN authors_listing.affiliation AS T  ON T.author_id"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "SELECT DISTINCT T1.paper_id , T3.paper_id FROM Affiliation_listing2018T20569472956910568149325Rambow161973"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "SELECT DISTINCT T1.paper_id FROM CitationAST1613201825741963900000099851RMBW138190758T2231"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "SELECT DISTINCT T1.paper_id , T3.paper_id FROM citation_by_author.T2 AS T INNER JOIN authors_list.T1 AS T  ON T1.author_id = T2.author_id ORDER"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "SELECT DISTINCT T1.paper_id , T2.name FROM Author_listASAITHTN0685943072622043940TITLE284927"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "SELECT DISTINCT T1.name , SUM(T2.num_paper ) FROM (SELECT T1.name , COUNT(T2.cited_paper_id ) AS num FROM citation19833456659258732088"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "SELECT SUM(COUNT1.PaperIDs ), AVG(T1.stars1.citationCount1837246305390178273_5027413098790011246442_6"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": "SELECT T3.affiliation FROM Affiliation_listing_Citation.paper AS T INNER JOIN Affiliation_listing_Citation.author AS T  ON T1.paper_id = T2.paper_id ORDER BY T1.cited_pap LIMIT 1 OFFSET 0"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "SELECT T3.name FROM Affiliation.affiliation AS T INNER JOIN author_list_ibfk_1.author AS T  ON T2.affiliation_id = T1.affiliation_id ORDER BY COUNTINCTT2.paper_id LIMIT 100000"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "SELECT DISTINCT T1.name FROM Author_list_ibfk_3.author AS T INNER JOIN Citation_ibfk_2.paper AS T  ON T1.paper_id = T2.paper_id ORDER BY COUNTOFT2.cited_paper_id , T1.num"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "SELECT DISTINCT T1.name FROM Author_list_ibfk_3.author AS T INNER JOIN Citation_list_ibfk_2.paper AS T  ON T.paper_id = T2.paper_id ORDER BY T3.cited_pap LIMIT 10"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "SELECT DISTINCT T3.name FROM Author_list.paper AS T INNER JOIN author_list.author AS T  ON T.paper_id = T2.paper_id ORDER BY T2.author_id LIMIT 1000000000000000000000"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "SELECT DISTINCT T3.name FROM Author_list_ibfk_2.author AS T INNER JOIN Citation_ibfk_1.paper AS T  ON T1.paper_id = T2.cited_paper_id ORDER BY COUNTIFTREPINTTHEBASICOFALL"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "SELECT DISTINCT T1.venue , T2.year FROM Affiliation.Affiliation AS T  INNER JOIN Author_list_ibfk_1.paper AS P  ON T1.affiliation_id = P.author_id GROUP BY T1.venue ORDER BY COUNToF LIMIT "
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "SELECT DISTINCT T1.venue , T2.year FROM Affiliation.Affiliation AS T  INNER JOIN citation.paper AS T  ON T.affiliation_id = T3.affiliation_id GROUP BY T1.address ORDER BY COUNTAINTBYTUEGREENHARO"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "SELECT DISTINCT T1.venue FROM Citation_list_v3.PUBLICATIONS AS T INNER JOIN Paper_venues_facilities_facilities_facilities_facilities_INTEGER_SETTINGS_table_v169874529560805"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "SELECT DISTINCT T1.venue FROM citation_by_paper.paper AS T , citation_by_paper.venue AS T WHERE T2.published = 1 ORDER BY T2.papers.published LIMIT 1 OFFSET 0;"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "SELECT COUNT(T2.paper_id.name ) FROM citation_paper.Paper AS T INNER JOIN affiliation_author.Author AS T  ON T1.cited_paper_id = T2.affiliation_id ORDER BY T.paper_id LIMIT 1003"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": "SELECT COUNT(T1.paper_id ) FROM CitationASGLOWASSETTINGS3854791692468228856WHEREIDWASA001002TINDFREEDOMEMHFH"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "SELECT COUNT(T2.paper_id ) FROM Citation.paper AS T , Citation.CitedPaper AS T INNER JOIN Paper_listing_by_AuthorAST198053681438596T17612029"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "SELECT COUNT(T1.paper_id ) FROM citation_paper_reference12285948621318188300018350ASINBG40220744753256461"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "SELECT DISTINCT T1.paper_id FROM Author_list_ibfk_3.cited_papers AS T INNER JOIN Citation_list_ibfk_2.Cited AS T  ON T1.author_id = T2.paper_id ORDER BY T1."
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "SELECT DISTINCT T1.paper_id , SUM(T2.cited_pap__count__max_citation_id__vacant_vacancy_cited__vacant_vacancy_cited_distinct__cited_paper_id__isnull__"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "SELECT DISTINCT T1.title FROM (SELECT DISTINCT T1.author_id , COUNT(T1.author_id ) AS num FROM Author_list.paper AS T INNER JOIN Citation.cited_paper AS T  ON T1.paper_id = T2.cited_paper"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "SELECT DISTINCT T1.title FROM Author_list_ibfk_3.author AS T INNER JOIN citation_all_citations_as_T2.paper AS T  ON T2.cited_paper_id = T1.authors_id ORDER BY T1.pubdate LIMIT"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "SELECT COUNT(T1.paper_id ) AS num FROM citation_list.paper AS T INNER JOIN citation_list.paper AS T  ON T1.paper_id = T2.paper_id ORDER BY T1.num , T1.author_id LIMIT 100000"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "SELECT CASTLEN_T1.paper_id , COUNT(DISTINCT ) AS cited FROM (SELECT T2.paper_id , SUM(CASE ) AS total FROM citation123456789Citation27230338"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "SELECT COUNT(T1.author_id ) FROM Affiliation_list_19584702_123460639_1859046_66301860468_211767895430"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "SELECT COUNT(T1.cited_paper_id ) FROM citation_reporting.Paper AS T INNER JOIN authors_list_ibfk_2.author AS T  ON T1.author_id = T2.author_id GROUP BY T1.paper_id ORDER BY SUM_COUNT"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "SELECT COUNT(T1.paper_id.affiliation_id_strv0587642937362000000058693572278137988 ) FROM Affiliation_Lists_papers_c"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "SELECT COUNT(T1.paper_id__i360__cited_paper_id__rptid__ibfk_1__ibfk_2__ibfk_3_a__ibfk_3_b__ibfk_4__ibfk_5__"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "SELECT DISTINCT T1.name , SUM(T1.cited_pap.numberOFCitations ) FROM Author_list_ibfk_2.author AS T INNER JOIN Citation_list_ibfk_3.paper AS T  ON T1.author_"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "SELECT DISTINCT T1.name , SUM(T1.cited_pap__total__2016__03_05__2017__8__15__cited_paper__493494491618"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "SELECT DISTINCT T1.venue FROM Citation_list_v3.author AS T INNER JOIN Venue_years_v2.T AS T  ON T1.cited_paper_id = T2.paper_id GROUP BY T2.venues ORDER BY COUNTIFS"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "SELECT DISTINCT T1.venue FROM Author_list_ibfk_3.paper AS T INNER JOIN Citation_list_ibfk_2.cited AS T  ON T1.author_id = T2.cited_pap GROUP BY T1.author_id ORDER"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "SELECT DISTINCT T1.venue , T2.years FROM Affiliation_List_v2.Paper AS T INNER JOIN Citation_List_v2.cited AS T  ON T1.affiliation_id = T2.author_id ORDER BY T2.author_id LIMIT "
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "SELECT T3.title FROM citation_paper.paper AS T INNER JOIN affiliations_author.author AS T  ON T1.paper_id = T2.paper_id ORDER BY CASTyears_since_1976__34th_asinhgk5vGKVGQU"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation_List.Author AS T INNER JOIN Author_list.paper AS T  ON T1.affiliation_id = T2.author_id GROUP BY T1.name ORDER BY SUMOFCOUNTINVALSperPAGEFORTARRAYT"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation_List.Author AS T INNER JOIN Author_list.paper AS T  ON T1.affiliation_id = T2.author_id ORDER BY T1.cited_paper_id , COUNT.ALL_CITED_"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "SELECT DISTINCT T1.affiliation_id FROM Affiliation_List_and_Citation_with_Date__In_Years_2009_INS_as_UTM_ELEMENTS_AND_CITED_P"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "SELECT T1.affiliation_id FROM Affiliation_list_to_Citation_table_names_2009_2014_2017_2019_2021_2031_ALL_WHERE_PUBLICATIONS__IS"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "SELECT COUNT(T1.paper_id.name ) FROM citation.paper AS T , T2.paper AS T INNER JOIN affiliation_listing_v2.affiliations AS A  ON T1.cited_paper_id = A.paper_id GROUP BY T2.paper"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "SELECT COUNT(T1.paper_id__i8n_t3_db_ref_i8n_t3_db_ref_i8n_t3_db_ref_i8n_t3_db_ref_i8n_t3_db_ref"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "SELECT COUNT(T1.paper_id__r.value__i38n_list__b402f5867712e4d30_v399b96057531d65b25072"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "SELECT COUNT(T1.paper_id ) FROM Citation.paper AS T INNER JOIN Author_list_ibfk_1.author AS T  ON T1.paper_id = T1.author_id GROUP BY T1.paper_id ORDER BY strftime"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "SELECT DISTINCT T1.title FROM Author_list_ibfk_3.paper AS T INNER JOIN Citation_list_ibfk_2.paper AS T  ON T.paper_id = T2.paper_id GROUP BY T3.author_id ORDER BY COUNT.COUNT1 LIMIT "
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": "SELECT DISTINCT T1.title FROM Author_list_ibfk_3.paper AS T INNER JOIN Citation_list_ibfk_2.paper AS T  ON T.paper_id = T2.paper_id GROUP BY T3.author_id ORDER BY COUNT.SUM.VALUE LIMIT 1 "
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "SELECT COUNT(T1.author_id.name ) FROM author_list.paper AS T INNER JOIN affiliation_list.author AS T  ON T1.author_id = T2.affiliation_id GROUP BY T1.name ORDER BY countdistinctT1.name LIMIT 0 OFFSET"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "SELECT COUNT(T1.author_id ) FROM Author_list_ibfk_3.cited_paper AS T INNER JOIN citation_ibfk_2.papers AS T  AS T  ON T1.author_id = T1.author_id GROUP BY T1."
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "SELECT DISTINCT T1.name FROM Author_list_ibfk_3.Paper AS T INNER JOIN citation_paper_coauthorship_by_affiliation_id_with_paper_id_as_cited_onT368459721"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation_list_2020.author AS T INNER JOIN citation_paper_2020.paper AS T  ON T.affiliation_id = T2.cited_paper_id"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "SELECT DISTINCT T1.paper_id FROM citation.paper AS T INNER JOIN author_list.author AS T  ON T1.cited_paper_id = T2.author_id ORDER BY T2.name LIMIT 1045398667186"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "SELECT DISTINCT T1.paper_id FROM citation.paper AS T INNER JOIN author_list_ibfk_2.author AS T  ON T1.author_id = T2.author_id GROUP BY T1.paper_id ORDER BY SUBSTR_NAME_LATERALS"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "SELECT T3.paper_id , T1.title FROM (SELECT DISTINCT T3.paper_id FROM Affiliation_list.Paper AS T INNER JOIN Author_list.author AS T  ON T.paper_id = Paper.paper_id ORDER BY T2.cited_p"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "SELECT T3.cited_paper_id FROM Affiliation_list.paper AS T INNER JOIN CitationAS.Paper AS T  ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.cited_paper_id ORDER BY COUNTIFnull_p"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation_List.Affiliate AS T INNER JOIN Paper_list.Paper AS T  ON T1.affiliation_id = T.paper_id GROUP BY T1.name ORDER BY SUM_COUNT_C"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "SELECT DISTINCT T1.affiliation_id FROM Affiliation_List_T2_134580679826222252130541148168791WHEREAddress"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "SELECT SUM(SUMOFCOUNTIFS.value_counts__value_counts__text_13490536725830000000__citation_id__value_counts__number_of_conferences__text_218503049"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "SELECT DISTINCT T1.paper_id FROM Affiliation_Lists_v1358740996327632000126TASKS23318368TASKWinner137726144TASK"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "SELECT SUM(IIF.affiliation_id ), strftime_strptimedate__2016__7__4__8__35__9__0__0 , strftime_strptimedate__2016___3__11__4__5 , strftime_strptime"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "SELECT DISTINCT COUNT(DISTINCT ), SUM(DISTINCT ), SUM(CASE ), COUNT(DISTINCT ), SUM(CASE ), SUM(CASE ), COUNT(DISTINCT ), SUM(CASE ), CASTDATE.PAPER_ID FROM Affiliation_list_viz.Affili"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": "SELECT DISTINCT T1.title FROM citation_paper_list.Paper AS T INNER JOIN citation_paper_list.Cited_paper AS T  ON T2.cited_pap = T1.paper_id ORDER BY COUNTTHALLOW LIMIT 50 OFFSET 0"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "SELECT DISTINCT T1.title FROM citation_paper_listing_t22843729_3698000000062270590_SUBSTR_T2792_AS_TEXT19687451"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": "SELECT COUNT(T1.author_id ) FROM Affiliation_list_Citation_Paper_Data.paper AS T INNER JOIN Author_List_Citation_Papers_Citations_Statistics.Author AS T  ON T2.paper_id = T1."
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "SELECT COUNT(T1.author_id__published_in_papers_with__i437296481242313389885__372257838946963260614_"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation_list.author AS T INNER JOIN Citation.paper AS T  ON T1.affiliation_id = T.affiliation_id GROUP BY T1.name ORDER BY t.year  DESC LIMIT"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "SELECT DISTINCT T1.name FROM Author_list_ibfk_3.author AS T INNER JOIN Citation_list_ibfk_1.paper AS T  ON T.paper_id = T1.cited_pap ORDER BY T2."
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "SELECT DISTINCT T1.name FROM Author_list_ibfk_3.author AS T INNER JOIN Citation_ibfk_2.paper AS T  ON T1.author_id = T2.cited_paper_id GROUP BY T1.name ORDER BY COUNT.nsubscribers"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "SELECT DISTINCT T1.name FROM Author_list_ibfk_2.author AS T INNER JOIN Citation_ibfk_1.paper AS T  ON T1.paper_id = T2.cited_paper_id GROUP BY T1.name ORDER BY COUNT.member_"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "SELECT COUNT(T1.Conference_Name.value_major_name__last_name__icse_id__citation_title__ICSE_ID__citation_format__string_preferred_by__long_description__publication_text__author__author_first_name__middle_initial__author_surname__volume_number__issue_number__pages_used__authors__year__isbn_10236__"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "SELECT COUNT(T1.Conference_ID__JOIN_CONFERENCE_BY_STAFF_IDS_ON_SEQUENTIAL_INDEXesAS_NULLABLE_LINKED_TABLES_AS_IS_UNBOUND_LINKS_ONLY_LIMITED_ROWS_FOR_ALL_DATA__20181920_60345904732033"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": "SELECT T1.name FROM conference_participation.conference AS T INNER JOIN conference.conference AS T  ON T2.Conference_ID = T1.Conference_ID GROUP BY T1.name ORDER BY COUNTDISTINCTTOPRIMER__STRUCT_PREFERENCE__COUNT_IN_GROUPINGS_BY_PRICE__DISTINCTTOPRIMARTER_ORDERED_DESCENDANTS"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.conference AS T INNER JOIN institution.institution AS T  ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Conference_Name LIMIT 400000000000000000000000000000000000000000000"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "SELECT DISTINCT T2.Conference_Name , T2.Year , T1.Location FROM Conference_Participation.conference AS T INNER JOIN conference_participation.staff AS T  ON T.Staff_ID = T2.staff_id ORDER BY T1.location LIMIT 3 OFFSET 300000000000000000000000000"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "SELECT DISTINCT T2.name , T3.year , T2.location FROM conference_participation1695078140100000000ASINB036008501566238127GFZHGAS300663WHERETOSTEARDTRAVELSAYETALKANDREADWITHOUTDARROWW"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "SELECT DISTINCT T2.name , COUNT(T1.conference_ID ) FROM conference_participation_with_institutions_and_staff_names.conference AS T , conference_participation_with_staff_names.staff AS T WHERE T2.Staff_Name = 'Rachel' GROUP BY T1.conference_ID ORDER BY T1.year LIMIT 10000000"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "SELECT COUNT(T1.name_participated_by__staff_ID__pk_cust_ID__to_string__cust_ID__to_string__FK_institution_id__staff_ID__time_period__grouping_date__grouping_months__conference__FK_conference_id__name__format__Conference_Name_date__Conference_Name__conference_ID__Con"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "SELECT strftime \n    FROM conference_years_per_decade2014WHEREYEAR_SUBSTR.value INNER JOIN year_conference2012_653813794549703613618_93945743434762999634057_36404303632"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "SELECT COUNT(T1.Conference_ID_200658136719813614102200000__0358d0a071b34d49db81078465d4e80e162801C2A8F02708C9E7D19A131B48"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "SELECT MAX(CASE ) AS num FROM conference_participationWHERErole__table.position INNER JOIN Conference_participation__table.conference AS T  ON T.Conference_ID = T.Conference_ID GROUP BY t.year ORDER BY COUNTDISTINCT LIMIT 1000000000000000000000000000000000"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "SELECT COUNT(T1.Conference_ID201806325370402300000199800143296923077167988978716825472774936128931590034044212755338131"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "SELECT T1.location FROM conference_participation.staff AS T INNER JOIN conference.CONFERENCE AS T  ON T1.staff_ID = T2.Staff_ID GROUP BY T2.Location ORDER BY COUNT__STL__COUNT__ALL_LOCATIONS_FOR_T2._north_east__location LIMIT 2000000000000000000000"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "SELECT T1.location FROM conference_participation.conference AS T INNER JOIN conference_participation.location AS T  ON T1.Conference_ID = T2.Conference_ID GROUP BY T2.location ORDER BY COUNT  DESC LIMIT 2000000000000000000000000000000000000000000"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": "SELECT DISTINCT T2.Institution_Name , T2.Location , CAST_STR_T1.Founded FROM institution_participation.institution AS T  INNER JOIN staff.name AS T  ON T.staff_ID = T2.Staff_ID GROUP BY T2.Institution_Name , T2.Staff_ID ORDER BY T2.Founded , CAST_STR_T1.Founded LIMIT "
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "SELECT DISTINCT T2.name , T3.location , T1.founded FROM institution_participation_voting_with_reservation_2014.institution AS T LEFT JOIN conference_participation_voting_with_reservation_2014.institution AS T  AS R  ON T1.Staff_ID = R.staff_id GROUP BY T2.name , T3.location ORDER BY"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "SELECT COUNT(Institution_ID.institution_name_str__string_pad_varchar2__format_with_leading_zeroes_character_listing_table_value__objectid__value__long_number_as_string___2nd_letter_of_the_first_digit_as_VARCHAR_160_413_432_9174085_50488126_"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "SELECT COUNT(T2.Institution_ID_18762354517085687000000__Institution_name__T1.name__T2_Institution_Name_21489912727900000000000361744207549000385016151"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "SELECT T1.institution_name , T2.location FROM institution_participation__newest_institutions_as_locations_as_names_as_posts_to_staff_INSTRTION_ID_SEP3346075684829542951500768329544232565948133553"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "SELECT DISTINCT T2.name , T3.location FROM institution_participation__institutions_founders_by_Nationality.T1 AS T INNER JOIN conference_participation.T2 AS T  ON T1.staff_ID = T2.staff_id ORDER BY T1.Year LIMIT 100000000000000000000000000"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": "SELECT DISTINCT T2.Institution_Name , COUNT(T3.Staff_ID_305793634423632676776062341237977062368135512179565837025404214390132707138111"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "SELECT T2.name FROM institution_participation.institution AS T INNER JOIN conference_participation.staff AS T  ON T.Institution_ID = T1.Institution_ID ORDER BY T.Institution_Name LIMIT 1500000000000000000000000000000000000000000000"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "SELECT DISTINCT T2.institution_name FROM conference_participation129078543036802000000TASK99WHERETASKNOTEXISTSANDNORTHICRATINGWITHINSUBDIVISIONRELATIONSHIPBEGINSISHALIVESITEFORIDC105245786109331250"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "SELECT DISTINCT T2.institution_name FROM conference_participation129058743036861800000_ASF56ASWGJASKGU4UW5F49272115WHERE_INACTIVE__NULLABLE__WHERE_NOTPLAYERID.PERSON_ID INNER JOIN AND_PLAYERID"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T  INNER JOIN conference_participation.student AS T  ON T1.staff_ID = T2.staff_ID ORDER BY T2.age , strftimeleft  ASC, strftimeleft , T.total_days LIMIT 1500000000000000000000000"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T INNER JOIN (SELECT AVG(T3.Age__c.value100076884735956135918562848427963110563236924790810155323549216288"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "SELECT CASTlngs FROM (SELECT DISTINCT T1.age FROM conference_participation.staff AS T , institution.institution AS T WHERE T2.country = 'us' GROUP BY T1.age ORDER BY COUNT__LESSThan___ ) AS T ORDER BY CASTlngs LIMIT 200000000000000000000000000000"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "SELECT DISTINCT MAX(age__2016__75430853805125191371__300391993_88890639501568118467_5311501383258170927__670393470608292"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T INNER JOIN conference_participation.staff AS T  ON T1.staff_ID = T2.staff_id ORDER BY T1.nationality , T2.country_code LIMIT 1000 OFFSET 300000000000000000000000000"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T INNER JOIN conference_participation.conference AS T  ON T1.staff_ID = T2.staff_ID GROUP BY T1.name ORDER BY COUNTIFTREPINTEXTNOSTARTSAFE1.INSTRMNONWHERECASETEXTNAME.TEXT LIMIT 3055486141752960"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T INNER JOIN conference_participation.staff AS T  ON T1.staff_ID = T2.staff_id ORDER BY T1.role , T2.name LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T INNER JOIN conference_participation.staff AS T  ON T1.staff_ID = T2.staff_id GROUP BY T1.staff_id ORDER BY T1.role LIMIT 30000000000000000000000000000000000"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T INNER JOIN institution.institution AS T  ON T1.staff_ID = T2.staff_ID ORDER BY T1.name , T1.nacl_role LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "SELECT DISTINCT T2.name FROM conference_participation.staff AS T INNER JOIN conference_participation.conference AS T  ON T1.staff_ID = T2.staff_ID GROUP BY T1.staff_id ORDER BY T1.name LIMIT 30001756840794277000000000000000000"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "SELECT DISTINCT T1.name FROM conference_participation.staff AS T , T1.staff AS T WHERE T1.year = '2003' ORDER BY T1.name LIMIT 1 OFFSET 469785952725328856465912675685297446837499629"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "SELECT DISTINCT T1.name FROM conference_participation.staff AS T INNER JOIN conference_participation.conference AS T  ON T1.staff_ID = T2.Staff_ID ORDER BY strftimeleft.YEAR , strftimeleft.yearBetween LIMIT 6 OFFSET 0;"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "SELECT DISTINCT T2.Conference_Name , T3.Year , CAST_ALLTREEPOINTS FROM ircdb.dbo AS T INNER JOIN conference_participationTbltnt1874696796735019114ONT1907192601723257649473686195844800"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "SELECT DISTINCT T2.name , T3.year , COUNT(T2.Staff_ID.Staff_ID ) AS num FROM conference_participation.Conference AS T INNER JOIN staff.Name AS T  ON T1.Staff_ID = T2.staff_id GROUP BY T1.conference_id ORDER BY T1.Year , T2.Year , T3.num LIMIT 100000"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": "SELECT DISTINCT T1.name FROM conference_participation.conference AS T , institution_participation.institution AS T WHERE T1.staff_id = T2.staff_ID ORDER BY COUNT_T2_NUM LIMIT 20000000000000000000000000000000000000000000"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "SELECT DISTINCT T1.name FROM conference_participation.staff AS T INNER JOIN conference_attendance.conference AS T  ON T1.staff_id = T.staff_ID ORDER BY COUNTIFTEXTCOUNTPOW2AREALMULTI_STRDEGATE4626985379354190695 , MAXOFSTUFF1A030286"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": "SELECT DISTINCT T2.name , T3.nationality FROM conference_participation__institutions_to_staff_within_ACL_conference_names2017_165891511_00494925940349710000225397057379010559631515"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "SELECT DISTINCT T2.name , T2.nationality FROM conference_participation__student_role_staff_INTEGERS_AS_T183586570463903732C23521314D4023D760208E524D3143D6F88A60C213C11"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "SELECT DISTINCT T1.name , T1.location FROM institution_participation_all_years.conference AS T INNER JOIN participant_students_and_staff.universities AS T  ON T1.staff_ID = T2.Staff_ID GROUP BY T1.university ORDER BY COUNTIFSNULLCOUNTRANKOWHERET1.institution_name  ASC, T1.location  ASC"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "SELECT DISTINCT T1.name , T1.location FROM conference_participation__university_students_with_staff_T1_WHERE_role__value__table.year  INNER JOIN FULL_TEXT_SPECIFIC_2004_SUBSTITUTE_NAMES_DICTS_VOCALIZATION_SUBSTITUTES_REPEATABLE_QUERY_"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "SELECT T3.pilot_name FROM pilots_ageingt042181923171616666TASK_78875406281832710TASK_211305961179436015TASK_993525521251511486T"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "SELECT T3.pilot_name FROM pilots_ageingt042281933071610180000021845581223965499711953218916927945165758493224049166757938131"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "SELECT T3.pilot_name FROM Hangar.plane_names AS T , PilotSkills.pilot_name AS T INNER JOIN (SELECT AVG(T2.age160900573633984242114990249523634014909354607813949166868"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "SELECT T3.pilot_name FROM Hangar.plane AS T , PilotSkills.pilot AS T INNER JOIN (SELECT T2.pilot_name , avg.age FROM PilotSkills.pilot AS T INNER JOIN Hangar.plane AS T  ON T1.plane_name = T2.plane_name GROUP BY T2.pilot_name ORDER BY T3.age LIMIT 1)"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM Hangar_202008370926416500000__pilot_info_as_of_2021_17321915_TU20087750202756324137294000359661631"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM HangarASchoolersTALK.dbo AS T INNER JOIN PilotSkillsASchoolerTALK.dbo AS S  ON T1.plane_name = S.planes_name ORDER BY strftime_date_strftime_timezone_getdate2007513106604989190 , strftime_"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "SELECT T2.pilot_name FROM PilotSkillsTASK30283974102690200000073276AS_PILOTS_PILLIOTS0251830347262595800009241771493AS_PILOTS_PILLIOTS02"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "SELECT T2.pilot_name FROM Hangar.plane AS T , PilotSkills.pilot AS T WHERE T1.location = 'T-28602' LIMIT 1000000000549700000000000000000000000000000000000000000"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "SELECT T3.location FROM PilotSkillsT20798659467171862000_AS_F14FLIGHTASK349342365WHEREPilotNameT207986594671718620119477697809666132655757"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "SELECT T3.location FROM HangarASF10798256714806266622722723048156WHEREplane_name.text INNER JOIN pilotsasfo10798256714806266622722723048156ONTARGETASF107982"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "SELECT COUNT(T2.pilot_name__plane_name__FK_PilotName__group_id__location__FK_Hangar_plane_name__group_id__location__T1.pilot_name__group_id__location__T3a__group_id__LOCATION__T2__T3b__group_id__LOCATION__T4__group_id__LOCATION__T5__"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "SELECT COUNT(DISTINCT ), T2.location FROM HangarASP.Hangar AS T INNER JOIN PilotSkillsASP.pilot AS T  ON T.pilot_name = T.pilot_name ORDER BY T1.plane_name LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "SELECT T3.pilot_name FROM Pilots.Pilot AS T INNER JOIN Hangars.Hanger AS T  ON T1.plane_name = T2.plane_name GROUP BY T3.pilot_name ORDER BY strftimefirstpartofsurnameOFTSTEFF41368597708166853294390 LIMIT 3000000"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "SELECT T2.pilot_name FROM PilotSkills.Pilot AS T INNER JOIN Hangar.plane AS T  ON T1.pilot_name = T.plane_name ORDER BY T2.age LIMIT 10000000000000000000000000000000000000000000000"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "SELECT COUNT(pilot_name__218683395791988798121__pilot_name__141103546271639579083631324943240481122933807267607821769288231"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "SELECT COUNT(DISTINCTTARGET.pilot_name__25618897638038171300000__c4bcc9a056639ba75_4024642491361772000000__1baf92c1c9f3d154863_21"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "SELECT COUNT(pilot_name.plane_name.PLANE_ID__SUBSTR__36780912482213164134034001__TIMESTAMP_MICROSCTL_3264025179943131921899035379000652581381"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), T2.location FROM PilotSkillsAS.pilot AS T , Hangar.plane AS T WHERE T.pilot_name < 18 GROUP BY T1.pilot_name ORDER BY COUNT.county LIMIT 104769535951448228477600415102634"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "SELECT T3.pilot_name FROM Hangar_flight_assignment.PILOTS AS T INNER JOIN Pilots_by_Plane_Name_ranked.NAME AS T  ON T1.plane_name = T2.pilot_name ORDER BY T3.age LIMIT 5000000000000000000000000000000"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "SELECT T3.pilot_name FROM Hangar_planes_taken_by_younger_pilots_than_15_as_pilot_name_PIPER_CUB_T26348_20120720T0935892020272899768WHERE2.flight_date AS T INNER JOIN pilots_t"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "SELECT T3.pilot_name FROM Pilots_per_aircraft__plane_names__avg_aviation_safety_ratings_by_age__grouped_by_plane_name__join_by_LOCATIONS.location AS T GROUP BY T2.PilotName ORDER BY COUNTIFCOUNTTOTAL.SUMOFINIGRADES_STRONGest LIMIT 1504987600"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "SELECT T3.pilot_name FROM Hangar.plane AS T , PilotSkills.pilot AS T INNER JOIN Pilots.pilot AS T  ON T1.planemaker = T2.pilot_name GROUP BY T1.pilot_name ORDER BY COUNT__AVG__ LIMIT 10 OFFSET 67545904358717145000"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "SELECT T3.pilot_name FROM PilotsTABASKETS.Planes AS T INNER JOIN HangarASSETTINGSASSETTINGSINASSETTINGSINASSETTINGSONLY246409571189750389820162734497343277535247334121"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "SELECT T3.plane_name FROM PilotSkills.pilot AS T INNER JOIN Hangar.location AS T  ON T1.pilot_name = T2.pilot_name ORDER BY COUNTIFTINTSTREETNUM LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "SELECT COUNT(pilot_name.pilot_name__122334089373161363000000__375573106630706983363764983495916165565149207590112460010011"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "SELECT COUNT(pilot_name__pilot_id__c.planes__plane_name__first_name__last_name__group_by_first_name__last_name2__group_by_last_name_first_name__last_name2__group_by_last_name__first_name__last_name3__group_by_first_name__last_name3__group_by_last_name__"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "SELECT T3.pilot_name FROM Pilots.Pilot AS T INNER JOIN Hangars.Location AS T  ON T.pilot_name = T.plane_name ORDER BY T2.age LIMIT 10000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "SELECT T3.pilot_name FROM Pilots_PilotSkillsTASK2675892012993600000TASK892121203728541686509DASGWLUU46861431874609977600724652800"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(distinct ), SUM(CASE ), DISTINCT FROM PilotSkillsWHERElocation__name__c.value INNER JOIN HangarHEREFORADATA_341265103579348104910WHEREPILOT_NAME__c.name__value__objectclass__localid__particletype__particleID__value__table__LOCATION"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": "SELECT COUNT(DISTINCTTARGET.pilot_name ) FROM pilotskills.plane AS T INNER JOIN hangar.location AS S  ON T.pilot_name = S.plane_name GROUP BY T.planename ORDER BY COUNTDISTINCTTARGET.pilot_name , SUM_TIMES.value1284986563_AVG_VALUE238068783"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "SELECT COUNT(DISTINCTT.pilot_name__2300814293173066325__plane_name__4845354627783958490__location__1829593789913235752274268407623840348663"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "SELECT COUNT(pilot_name.plane_name__pilot_name__aircraft__engine__model__type__2017__3486973275962166328_c9ce6f68e5d9e2b61dfb8a434ca81e7f27b1e9363b40160329"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "SELECT COUNT(pilot_name.plane_name__name__faculty__fac_id__fac_freq__fac_name__fac_level__fac_order__fac_ord_lvl__fac_group__fac_pos__fac_stc__fac_usg__fac_usr__fac_vc__fac_wts__fac_wdi__fac_wt_lab__fac_wi_lab__fac_wi_lab"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "SELECT COUNT(*) FROM PilotSkills.pilot_name AS T , SUMOFAIRPILOTS.plane_name AS T WHERE T.age > 40 GROUP BY T.age ORDER BY COUNTofAirPilots.planemapid LIMIT 1500000000000000000000000000000000000000"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "SELECT T2.pilot_name FROM PilotSkillsTOTAL_BY_AGES_STRUCTURED_AS_DECIMAL_FLOATS_SUBSTRs_WITHIN_30_AND_40_ARRAYs_AS_TARGETS_OF_ASSOCIATION_INFLUENCE_VALUES_STUDY1986513_21758"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "SELECT T2.pilot_name FROM PilotSkills.pilot AS T , Hangar.plane AS T WHERE T1.age = (SELECT MAX(T1.age__9785463079469011415__0763685923736516494__84611383990886292"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotsT376201826430930150000026946526383998522412602267700314750252912284067087500467026261"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "SELECT T3.pilot_name FROM Hangar.plane AS T , PilotSkills.pilot AS T INNER JOIN PilotSkillStudies.Flight AS T  AS T  ON T.pilot_name = T.pilot_name ORDER BY age , T1.years_performed LIMIT 5000 OFFSET 5000000000000000"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "SELECT DISTINCT T2.location FROM Hangar_listing20692794660813100000000LAS_MARTHA_ALASKA_378278662583993000000LAS_NWATUARIOMERIDENOVEIRGINIA025468146"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "SELECT DISTINCT T2.location FROM Hangar_details_competitors_for_training_by_plane_age_as_a_pilot_1306088574329_ASDG3WKH3P3W27_0023T36035670533A1540WHEREALSOUNDINGWITHINTRAININGANDRE"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "SELECT T3.type FROM PilotSkills.pilot AS T INNER JOIN Hangar.location AS T  ON T1.pilot_name = T2.plane_name ORDER BY T2.PLACEMENT_ALPHABETICAGE LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM HangarASAPilotSkillsTogether_withAircraftsWHERElocationREGEXPLOREPOSITIONSFROMWITHAIRCRAFTWITHPLANESANDSUBLOCATIONsWHEREPLACEMENTIDSNOTINORDERAGGABLEGROUPBYT2.pilot_name ORDER BY T1.plane_name LIMIT 1000000000"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), AVG(CASE ), MIN(CASE ), MAX(CASE ), CASE  FROM PilotSkillsWHEREOFTypeIsStringBEGINNINGSLOWERTHAN40MIDTO30GROUPBYPLANENAMELIMITEDINTERSECTDISTINCTDISTINCTORDERBYCOUNTRIALFRAMEDATEWHEREDESCENDINGCASE1DESCENDINGCASE2DESC"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "SELECT COUNT(pilot_name__23969817_34858778_53610221_12918729_11582379_6506843_20983840_4263651_5553676__7216797_26326"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "SELECT T2.pilot_name , CASTT1.age FROM HangarASINCub_67299843396394234551_11486954483010138348_64759646098489788309WHERETOTALMOSTNEGATIVECASE1."
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "SELECT T2.pilot_name , CASTT1.age FROM (SELECT T1.plane_name , CASTT1.location FROM PilotSkills.planes AS T INNER JOIN Hangar.pilots AS T  ON T1.pilot_name = T2.pilot_name GROUP BY T1.plane_name , CASTT1.age ORDER BY COUNTIFYDATE  DESC LIMIT 1) AS"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "SELECT DISTINCT T3.pilot_name FROM HangarASPECTRING1687406913733600000050980188106749560000257996229465652916077137308120747166565"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "SELECT DISTINCT T3.pilot_name FROM Hangar.Pilot AS T INNER JOIN aircrafts.Bomber AS T  ON T1.plane_name = T2.plane_name GROUP BY T3.plane_name ORDER BY COUNTIFEXTINKS_EXPTGIVING LIMIT 100000000000000000000000000000"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "SELECT DISTINCT T3.pilot_name FROM Hangar.planes AS T INNER JOIN PilotSkillsAST10869742179103528890332ONT1418843186718137528902752599818590018429556146"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "SELECT DISTINCT T3.pilot_name FROM Hangar.Pilot AS T INNER JOIN aircrafts.Bomber AS T  ON T1.plane_name = T2.plane_name ORDER BY T1.name , T3.name LIMIT 1000195788346216962838657577616238410016"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "SELECT T3.age FROM PilotSkillsT2.pilot AS T INNER JOIN HangarASkipAZ.Hangar AS T  ON T1.pilot_name = T2.plane_name ORDER BY CASTLENGTHsaltedintimeINTEGER390677254384959917 LIMIT 1000000000000000"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "SELECT SUM(AVG.age__2007__9643789658755853624__1503271793596270634__675288924240737495_163952970461019932__547928616"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkillsT2004287930156900000032846570172669519_AustinASL115816879986000117599675099640323668666"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM HangarASchoolSTUDENTS_Austin2014T1569879004357000000TABE2KGHMHGWHWZINYU10779620378289481727D266A4B623926"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkillsT2007289303665200000043950596382196ASFASMHW262928743419820000645877817199T10580114199"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkillsT18370539036968000000D1946AS_F14A_CUB694_Cub652915T2034AS2328T270427AASWING279626T356414D2"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "SELECT avg.age FROM PilotSkills.pilot AS T , PilotSkills.plane_name AS F WHERE T.pilot_name = 'Pilot140' GROUP BY T.plane_name ORDER BY AVG.age LIMIT 30000000000000000000000000000000000000000"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": "SELECT AVG(T2.age__2367309894425664186_232639969967435920388_457152877276559344778_237582700270905363977_22926"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": "SELECT COUNT(T2.pilot_name ), T1.type FROM (SELECT T3.plane_name , SUM(CASE ) AS num FROM PilotSkills_types_to_names_by_grouping_planes20030405_06459881_587008710277234294000__HANGAR_2003"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": "SELECT COUNT(T2.pilot_name ) FROM PilotSkills_by_plane_name_map.Pilot AS T INNER JOIN Hangar_locations_by_plane_name_map.LOCATION AS T  ON T2.pilot_name = T.PLANE_name ORDER BY T.location LIMIT 10000000000000000000000"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "SELECT T3.pilot_name FROM Hangar_type_results_by_plane_location_ageT11052468791991550998692606726921602615599654613152759674527104881494663838"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "SELECT T3.plane_name , T2.pilot_name FROM (SELECT T1.plane_name , COUNT(T2.location ) AS num FROM Hangar_Location20220437693400350000002D3892EA50801E823A4B33F9E28C63E57D860"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM (SELECT DISTINCT T3.pilot_name , T4.plane_name FROM PilotSkillsT1126350017898791T2280818479321A4683T272257953420T112990960261"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "SELECT T3.plane_name , T2.pilot_name FROM (SELECT T1.plane_name , T1.age , COUNT(T2.pilot_name ) AS cnt FROM PilotSkills.Pilot AS T INNER JOIN Hangar.Location AS T  ON T.planemaker = T1.pilot_name ORDER BY T3.years_flying_oldest_pilot LIMIT "
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "SELECT DISTINCT T2.pilot_name , SUM(T3.age_max__19087263465313127244__to__200323498491214812491__to__197363259770927967032__increasing_by__180"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "SELECT DISTINCT T2.pilot_name , SUM(T3.age__0479385213602323204826__Age__0029238944948816480916495983231981795679809813079168663"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "SELECT avg.age , SUM(CASE ), CAST_T2.plane_name FROM (SELECT DISTINCT T1.pilot_name , AVG(CAST_T2.location__location_name__type__space__value_time__day__year__hour__minute__second__mmmJHZ__0256762393877455424158133"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "SELECT DISTINCT T2.location , SUM(T3.age_pilot_1857394263062380000000__GILBERT.LORENZATOPALONIAARRISSAARD25553990513138982947869049213474826688"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "SELECT SUM(T2.pilot_name.age ) FROM Hangar.planes AS T INNER JOIN PilotSkills.pilot AS T  ON T.plane_name = 'Aircraft' GROUP BY T1.type ORDER BY AVERAGEIFSLAG.FIRST_NINJA_PILOTS._25622806919374144868__AVG"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "SELECT AVG(T2.plane_name.PLANE_NAME__DATE__2014_9_6__8377331610465939411821__FlightNum__Years__TotalAge__total_hrs_flown__gfk_age__groupID__GroupName__T2__id__pid__groupID__name__all_planes__ALL_"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "SELECT T3.location FROM Hangar.planes AS T INNER JOIN PilotSkills_ByAgeASTONA__pilots_2014_27650852_910631506__PilotSKILLS_INDUSTRY__PERFORMER_AS_TITLE_NO.FATHER AS T \n      AS T  ON T1.pilot_name"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "SELECT T3.location FROM PilotSkills.pilot AS T , Hangar.plane_name AS T WHERE T.age = (SELECT min_age FROM pilots.pilot_name WHERE T1.pilot_name = T2.pilot_name ORDER BY T1.plane_name LIMIT 1) GROUP BY T3.location ORDER BY COUNT_BIGGER_THAN_ELEMENTS__IN_Z"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "SELECT T3.pilot_name , T2.age FROM HangarASI.pilots AS T INNER JOIN PilotSkillsASI.pilot AS T  ON T.pilot_name = T2.plane_name ORDER BY T2.pilot_name , T2.pilot_name LIMIT 10 OFFSET 37433658361914150"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "SELECT T3.pilot_name , CASTT2021.age FROM Hangar.location AS T INNER JOIN PilotSkills.pilot AS T  ON T.planes_name = 'Austin' GROUP BY T3.plane_name ORDER BY T.latitude , T3.pilot_name , CASTT2021.age LIMIT 100000000000"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM Hangar_satellite_Station_Locations_Map.PilotSkills AS T INNER JOIN Pilots_AS_Titles_FOR_PILOTS.NAME AS T  ON T1.pilot_name = T2.pilot_name ORDER BY T2.pilot_name LIMIT 5000000000000"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": "SELECT T3.pilot_name FROM Hangar_Pilot_Skills_ByPlaneNameT29176480051142840260028168998_18601384913827780000422349027277555782013050"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.age__minutes_to_pilot_age__650__3897236671543952540__3251758814202795328975__13158200927085032350_361626"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "SELECT COUNT(DISTINCTTARGET.pilot_name.plane_name ) FROM HangarWHERELOCATION__F_14Fighter_is_NOTNULLGROUPBYPilotNameORDERBYCOUNTdiffinutesfrominfint2856379102968089220120786495449879868557420140"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkillsASKTARS2038436016950000122WHERET347942934764700000116SUBSTRTRIMLEFTBOMBERRELATINGTOPILOT_NAMEsOFWHEELS.pilot_name AS T  GROUP BY"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkillsASKT318470629960500000__Bombers_C1867138075173118186DULLWITHINWHEREALLWHATSOFTHISADDRESSGUZIMERHAVENFLAIRASKT29493906"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "SELECT COUNT(DISTINCTTARGET.pilot_name ) FROM pilots.Pilot AS T INNER JOIN hangars.Hangar AS H  ON T.plane_name = H.plane_name GROUP BY T.age ORDER BY sumdiffINTEGERSfromTOTALAREAOFPILOTS_10_23603955717840262518110"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.age__40__35__167__332__982__1122__999__180__166__185__384__246__380__349__60__1269__2902__1890__763__979__931__"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "SELECT DISTINCT T2.Name FROM districts_as_terms_and_prices.spokesman AS T INNER JOIN (SELECT T3.District_ID , COUNT(T2.District_ID ) AS num FROM districts_as_terms_and_prices.spokesman AS T INNER JOIN (SELECT T3.name , SUM(T2.Area_km12000575640000"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": "SELECT DISTINCT T1.Area_km , T2.Government_website FROM district_info_details_summary.district AS T INNER JOIN (SELECT DISTINCT T1.Name FROM district_info_details_summary.city WHERE Population <= 50) AS T  ON T1.District_ID = T2.City_ID ORDER BY T3.population LIMIT 1000000000000"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": "SELECT DISTINCT T2.Name , T3.Population FROM (SELECT COUNT(T1.District_ID ) AS num , SUM(CASE ) AS total FROM (SELECT DISTINCT district.name , AVG(population.area_km ) AS avg FROM district_map_table.districts AS T INNER JOIN spokesman_district_indexes_listing__prices_table215980643"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": "SELECT CASTROLASKETS.COUNT FROM district.spokesman GROUP BY strftimeLEFTOFSTRING ORDER BY SUM_AVG.value LIMIT 10000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "SELECT SUM(SUM.population__real__2010__36681927220045627320__3342743982251635511__16812924572185583836.s3077397704323545628131"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": "SELECT DISTINCT T2.Name , T3.name , T4.website FROM (SELECT T1.District_ID , T2.name , T3.name FROM district_spokesman_districts_v2006265911738452019WHERE_Year_Round_Nominee__1975__57688119663882"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "SELECT DISTINCT T2.name FROM district_links_webmasters.SPOKESMAN AS T INNER JOIN (SELECT T1.district_ID , SUBSTR_LENGTH_URLS FROM DISTINCTT3.District AS T INNER JOIN SPOKESMAN_LINKS_WEBLERK.SPOKESMAN AS T  ON T2.Spokesman_ID = T3.Spokesman_ID ORDER BY T1.district"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "SELECT DISTINCT T2.Name FROM district_info.spokesman AS T INNER JOIN district_info.district AS T  ON T1.District_ID = T2.District_ID ORDER BY T1.Population LIMIT 4000 OFFSET 30002965782960197547487510838141055"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "SELECT DISTINCT T2.name , T3.speech_title FROM districts_spokemen_relationship_table_join_pivot_table_as_dataframe12034693_5895925370214145_as_sql_inputs_listing_pivot_table19005055_58709304621"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": "SELECT SUM(AVGPOINTS.Points_avg__2012__age__654789131076323564537__asin__22763747191187682907__districts.name__1985__269038484532358728__spokesman"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "SELECT T1.name , T2.points FROM district_spokeman_rkjoinT38735916968336368711RKJoin23241862724736833364M3080WWU1992SPAS24578511TITLE_NAMES_INTERESTED_IN_"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "SELECT T1.Name FROM spokesman_district.spokesman AS T INNER JOIN district.name AS T  ON T1.District_ID = T2.District_ID ORDER BY T1.Start_year LIMIT 250 OFFSET 46730200817200901751477532387646233949555"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "SELECT DISTINCT T2.Name FROM (SELECT CASTT1.Points  FROM Districts.spokeman AS T INNER JOIN Districts.district AS T  ON T.District_ID = T2.District_ID GROUP BY T.Spokesman_ID ORDER BY COUNTTRIMSUMAOFWITHINTHEDAREASTANDGROUPBYSUBDISTINCTGivenInR1 ) AS t INNER JOIN Districts.district AS"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": "SELECT DISTINCT T2.Name FROM (SELECT DISTINCT T1.district FROM districts_spokesman_tableT14853690724185000000ASPINCJLASPRD2619189786827910000412647614577535926833512"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "SELECT DISTINCT T1.name FROM district_spokeman_historiesT1LEFTJOINspokeman_historyT1ONT1.Spokesman_ID AS T WHERE strftimeLEFTJOINspokeman_historyT1ONT1.District_ID = 2004 LIMIT 100000000000000000000000000000"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "SELECT COUNT(T1.Spokesman_ID.Name ) FROM district_spokemasters.dbo AS T INNER JOIN districts_spokemasters.dbo AS T  ON T1.District_ID = T2.District_ID ORDER BY T2.Name , T2.Age LIMIT 10 OFFSET 300000000005991648218744012"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "SELECT DISTINCT T3.name FROM district_spokeMAN101360528764329200000000__spokesperson230381805722711199200430247920000711644024298000885131390"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "SELECT T1.Name FROM district_spokeperson_table1283163469735310000000000ASP150710258006725WHERECOUNTinstrinsityA1CJIQ6UKE87GUZYOF134056494990000000000ASP"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), MAX(CASE ), MIN(CASE ), NULL FROM district_spokemanGROUPEDByDistrictIDWHEREGroupedByDistrictid.value INNER JOIN people20012846738429027425232ONspokesmen_id.value AS t  AS T  ON spokesman_district.Spokes"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "SELECT DISTINCT T2.name FROM spokesman_districts.dbo AS T INNER JOIN districts.dbo AS T  ON T1.District_ID = T2.District_ID ORDER BY T1.rank_position , T1.points LIMIT 10000 OFFSET 11145968270517348859666218321264"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "SELECT T1.Area_km , SUM(T2.population__real__2017__2348365972033189517__district__ID__4832599586078464073509463831511505284144112464816228"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "SELECT T2.title FROM SculpturesASSEMBLYT2009A_VOLUMES21356248700051640180152103752925235658925559985251712849539677551467128115"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "SELECT DISTINCT T1.title FROM SculpturesASSETS.SCULPTURES AS T , ArtistsA.artistID AS T WHERE T2.PaintingID = 'C30586' ORDER BY T1.year LIMIT 1;"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "SELECT T2.title , T3.location FROM Sculptures_by_PainterT1.T1 AS T INNER JOIN Paintings_by_ArtistT2.Painting AS T  ON T1.paintingID = T2.paintingID ORDER BY strftimeLEFTDIGITSLASTOFINSERTEDYEAR LIMIT 30 OFFSET 500000000000"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings_v201905374919198000000_asianhistory_oldest_by_years_2018675_painting_asia_and_medieval_world__sacred_art_class_as_master_painter_long.Painting AS T WHERE T1.year = "
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": "SELECT DISTINCT T1.title FROM SculpturesSculptureNameSculptorIDS1892370T14253378750420021_26971_5302018494061_T2.AS AS T GROUP BY T1.sculptureID ORDER BY strftimezoneOffsetT1.year LIMIT 10"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "SELECT DISTINCT T1.title FROM SculpturesSculptureType_t1_00974685342368185163_WHERETITLEINGALCASEWITHBANGRAVEMERGERAUGMENTMEGACARCALDEADDICTFUNDEVILKIRAWHISPERSTANDATTAINEDONDREENJELLYLOR"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": "SELECT T2.title , T3.location FROM Sculptures_Painted_As_Artworks_as_Painting_IDs_AS_T1.Painting AS T INNER JOIN Artists_AS_T3.artists AS T  ON T.artistID = T3.ARTISTID ORDER BY T2.title , T2.location LIMIT 10 OFFSET 0;"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "SELECT DISTINCT T1.title FROM PaintingsASP2019305T1728436908369081INS250FWG_ARB108T39LANDTN489TENDELUXRITGHG481VLANDTN629AAR1478T71GALLYWGASD"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": "SELECT T2.title , T3.location FROM Sculptures_listings_table149758086209000000000SASRFG271987SALGARD_PURPLEBALL__VOTODEO___THANKGOD3L167CZTNKMATKA_2661433506"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "SELECT DISTINCT T1.title FROM SculpturesSculptureASK1043879236259300000CALLERGISEATTASOLARISAURADONKIDNEYROUNDTOTALCATEGORYID6799WHEREASPECTDESCENDWHEREWHERE224WHERE10WHOSENAMEWRONGORDERWHERE123WHERE2"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "SELECT DISTINCT T2.medium FROM Paintings_labels.Painting AS T INNER JOIN Sculptures_labels.Sculpture AS T  ON T1.paintingID = T2.paintingID GROUP BY T3.medium ORDER BY COUNT.TOTAL LIMIT 10 OFFSET 100500091474882610538101361"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "SELECT DISTINCT T2.medium FROM Paintings_sketches_19232722_00456486_0021617892006820_paintings11930300948659742_201910325011599650708_20191"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": "SELECT DISTINCT T2.lname FROM Paintings__Incomplete_Ringlets_Watercolour_Sculptures__Titles_as_Artist_Names__ArtistID_TO_Date_WHERE_painting_ID__BETWEEN__2413599170062_2838921878463_GALATEAN_2012"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "SELECT DISTINCT T2.lname FROM Paintings__in_years_BETWEEN_2000_AND_2030_T2__WHERE_t2._birthYear INNER JOIN CASTRELL_BUTTONSON198731562459333490671DXG42889420556"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures_not_located__gallery_226AS_T2059483_001AAS247G48373_00635E31522759WHERENOTTitled__GALLILETTE_COUNTRY__location__SUBSTRINGFROM16052704321052"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "SELECT DISTINCT T1.title FROM SculpturesSculptureRightsASG02954713189221000119_27126743259819516217_9946549735121766877569_77226809456330"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "SELECT T1.firstname , T2.lastname FROM artists_painter_locations.artists AS T , artist_locations.artist AS T WHERE T2.year >= 1850 ORDER BY T1.name LIMIT 469743462810549560000000000000000000000000000"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "SELECT T2.lname , T3.fname FROM Artists_births.artists AS T LEFT JOIN Paintings_by_years.painting AS T  ON T.artistID = T2.artistID ORDER BY T1.year LIMIT 10000000000000000000000000000000000000"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "SELECT T1.birthYear FROM Artists_sources.Artists AS T , Artists_sources.Painting AS T WHERE T.artistID = 'MATTHEW BROWER' GROUP BY T1.lname ORDER BY SUM_BIRTH_YEAR_IN_DESCENDANCE LIMIT 1000000000000000000000000000"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "SELECT T1.birthYear FROM Artists_listingT138863410620567900000000_asfGUdEJD1WUXN7G1ASU2LGQKV7Q5R49BJ2A3C6K9HUFKU4C6LQ8I533WZ32989"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "SELECT DISTINCT T1.lname , T2.fname FROM Artists_paintings_objects_objects_artists_sculptures_objects_artist_history_objects__1987__longest_artists_longest_artists_painting__short_names_names_title_types_as_title_categories_where_names_are_listed_in_their_original_order_WHERE"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "SELECT T2.fname FROM Sculptures_Artist_Profiles__Involved_as_Artists_As_Painters_AS_TITLES_AS_STATESTALK_CUSTOMER_LIST_RETURNED_ARTISTS_IN_TERMS_OF_DIVORCE_AND_LIFE_EXTENSIONS_LIST_RESULTS_FOR_FRESHMAN_WITH_"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "SELECT MAX(years_alive__2014_35846170321318910100__lname__strftimeformat__datetime__medium__location__height_mm__width_mm__painterID__deathYear__deathYears__age__sex__birthYear__deathYear__deathYear__mr_id__birthYear__deathYear__"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "SELECT DISTINCT T1.birthYear FROM Artists.artists AS T INNER JOIN Paintings.painting AS T  ON T1.artistID = T2.paintingID ORDER BY T1.deathyear LIMIT 0 OFFSET 5437186218259511781392129355636189989616"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "SELECT T2.fname , T3.birthYear FROM Sculptures_viewer.Sculpture AS T INNER JOIN Artists_viewer.Artist AS T  ON T2.artistID = T1.painterid ORDER BY T3.lname LIMIT 50001786940812277122693150837410056"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "SELECT DISTINCT T1.lname , T2.birthYear FROM Artists_histories.Artists AS T INNER JOIN Paintings_histories.Paintings AS T  ON T1.artistID = T2.paintingID ORDER BY T2.year LIMIT 30001746950782477147195012838522515"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "SELECT COUNT(paintingID.painterID_G240.paintingID_G1969358673100000000_INTEGER1813757796682366298_INTEGER386636528477619897_INTEGER27319393"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "SELECT COUNT(DISTINCTT2.paintingID ) FROM SculpturesAS.paintings AS T INNER JOIN ArtistsAS.artists AS T  ON T.artistID = T1.painterID GROUP BY T2.paintingID ORDER BY SUM_WATERING LIMIT 200000000000000000000000000000"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "SELECT COUNT(paintingID.painterID_019663583433736210000000013850900018801426_62108484903909700000110677605159000453858120"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "SELECT COUNT(DISTINCT ), MAX(paintingID_max_days__total_involved_by_death__years__date_of_birth__deathYear_365THM__lname__fname_artistID__paintings__ID__paintingid_max_days__title_number__title__FULLNAME_116248894731022"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": "SELECT DISTINCT T1.lname , years_painted FROM Artists_and_Paintings_as_Titles_and_Years_Created_by_Artist250179862011T2312636876488DXM232143574039DXG9131727184819"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "SELECT DISTINCT T1.title , T2.year FROM Paintings.painting AS T INNER JOIN Artists.artist AS T  ON T1.painterID = T.artistID ORDER BY T1.painterid , T2.lname , T3.birthYear LIMIT 10000 OFFSET 0"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "SELECT DISTINCT T2.width_mm FROM Paintings_Listing36373422013982760000033456_3002130898871063000046027975_500_36179139277510854112510"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "SELECT DISTINCT T2.height_mm FROM Paintings184133937313216300000000_T27342699900295296183131749039_W46568139987319877513985251616"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "SELECT DISTINCT T1.location , T2.medium FROM SculpturesASGT34578620099323900000R1GZT309835CALGAB_COATINGS2027106599530001534WHERE1.FONA__VARCHAR AS T  WHERE ndash = ',' ORDER"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "SELECT DISTINCT T1.location , T3.medium FROM Sculptures_B20075981604920000000T20719906206911_Pablo_RICHARD_HALLINGWOOD200202T201863992TASKER_EUROPEANARTIST_2"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "SELECT DISTINCT T1.lname , T2.fname FROM Artists_Lists.Artists AS T INNER JOIN Paintings_Lists.Paintings AS T  ON T1.artistID = T2.paintingID GROUP BY T1.lname ORDER BY CASTT1.height_mm LIMIT 1 OFFSET 0;"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": "SELECT DISTINCT T1.lname , T2.fname FROM Artists_details.T2 AS T INNER JOIN Sculptures_details.S AS T  ON T.artistID = T2.painterID GROUP BY T3.title ORDER BY COUNT.T2.height_mm , SUM.T1.width_mm LIMIT 100000000000000000000"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "SELECT DISTINCT T1.lname , T2.fname FROM Artists_names_databases.artists AS T INNER JOIN Paintings_databases.painting AS T  ON T1.artistID = T2.painterID ORDER BY T1.birthYear LIMIT 36000000 OFFSET 76800000000000000000"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "SELECT DISTINCT T1.lname , T2.fname FROM PaintingAssets_PaperWorks_MediumTechniques_Artists_Incorporated__PaintedWriting__WritingArt_WithInks_andInkjetImpressionsASSETSTITLEASSTEXTINKJETIMCHAIRLITHGABLENLP2013982642527"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "SELECT DISTINCT T2.birthYear FROM Paintings_2021__inventorship_with_source_details_193765142686_v2_T1137_35C1808613809_Painting_INVENTOR_NONRETURN_ARTIST1_07886038438366"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "SELECT MAX(yearsBornIN2007WHEREfirstNameATL ) AS yEAR , MIN(yearsBornIN2007WHERElastNameATL ) AS xYEAR FROM ArtistsWherebirthYearIn1899MIDTAGEOF191720427WHEREdeathYearIn256481930RUNMEDGALAASVU216299"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "SELECT T2.firstname FROM Sculptures_Paintings_InventorySets2007265963289100000AST262418285606988G2555613894803WHEREmedium.name INNER JOIN T2.artists AS T  ON T1.painterID = T2.artistID GROUP"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "SELECT DISTINCT T3.fname FROM Paintings.painting AS T INNER JOIN Artists.artist AS T  ON T.artistID = T2.artistid ORDER BY T2.lname , T2.fname LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "SELECT SUM(IIF.mediumType ), IIF.location , IIF.medium , COUNT(DISTINCT ), DISTINCT  FROM (SELECT T1.medium_type , ndata.location , ndata.mediumName FROM Painting_Artists_Paintings_Sculptures_Assets.Medium AS T INNER JOIN Artists_as_paintings_sculptors_assets.Landscape AS T  ON"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "SELECT T1.medium , COUNT(T2.paintingIDs.title_text__objectid_06953481722228908403__artistID_231419501648984500339500232910744254199820654225225"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "SELECT AVG(T1.height_mm025734648238661509000000000032090923611002965450128252983214410101933669770295363577211212"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "SELECT AVG(T2.height_mm_per_painting__in_sets__paintings__medium__length__4096__13585380795660120699__size__4112184593095913031500344309144303707688620"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "SELECT SUM(paintings.height_mm197438672731214231580232500018675981656538968958686120973879478631488790369704223474165222"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "SELECT COUNT(T2.paintingID.title_t2002__Paintings_location_35067894_000162__date_sculpture_T1837_artistid_287618093_00571693_LOCAL_PITCARE_THURSOS_20228318_00"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "SELECT DISTINCT T2.title FROM SculpturesCatalogueTOTALAS_ARCHIVES.artists AS T INNER JOIN PaintingsCatalogueTOTALAS_ARTISTS.painting AS T  ON T1.artistID = T2.artistID ORDER BY T3.year LIMIT 10 OFFSET 28507932460268658000"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "SELECT DISTINCT T2.title FROM Paintings_Painted_by_Artists_with_death_years_before_1910_as_in_Whole_Year__2005_T02_GJ287460_4783557722565_G1_ALFRED_AARONUS_POWERDAMMER_WITH_"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "SELECT DISTINCT T1.painterID FROM Sculptures_series_numbered1675898363723200016290533148203935_15858931983409730001952177517277520637311025"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "SELECT DISTINCT T1.painterID FROM Sculptures_museums.Painting AS T INNER JOIN Paintings_gallery240.artists AS T  ON T1.sculptureID = T.paintingID ORDER BY T.medium , T1.location LIMIT 2 OFFSET 36400000000055987323000000"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings_as_Tags_Names_Paints_Titles_Titled_as_Paintings_AS_Tags_Names_INTEGER_WHERE_YEAR_IS_SHORT_LEFT_TO_RIGHT_LEFT_PARTITIONED_BYINLINE_TABLE_NAMES__INTEGER_SUBSTR_OF_CIRCLES_LIST_SEGMENT1036"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings_detailing202048592276833_artists_lname_fname_WHEREHeightBetweenT228161911.width_mm INNER JOIN DIMBISWITHINTENCHILLANYANZUALABELYORGINAYUADIANSARKAND"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": "SELECT T1.paintingID FROM SculpturesSouth_Africa_095879388666466680000030536258203756WHERELANDINGGallery240InListGALERYGALERYGALERYIDsDISTINCT1141277696059662000"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "SELECT T2.paintingID FROM SculpturesASSEMBLY__POWERFUL_CITY_MARKETS_GALLERY240__DIFFERENTARTISTAS_PERFORMED_EVA_AUDITORIUM193116019185276WHERETRIBES240WHERETRIBES24458216019"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures_v21843750906937600000s_250m_long_flat_as_groundSculpture_v218438583015560000ASINBGUXZ7C1D9822303853510"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures_golden_age__rise_of_the_pictured_race_artistsT20THCUSAS_R8796TINDIGGER32034T23AY591PX929TUEN034FVZDG9AARWWWZ9C414929"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "SELECT DISTINCT T1.lname , T2.lastname FROM Artists_FacesTitlesTbl.Painting AS T , Artists_FacesTitlesTbl.Sculpture AS T WHERE T2.title = 'Female' INNER JOIN (SELECT DISTINCT t1.lname , t3.lastname FROM artists_facestitlestbl.Painter AS T INNER JOIN sculptures_tbl"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "SELECT DISTINCT T1.lname FROM artists_sculptures_with_titles__in_string_join_split_by_delimiter_as_underscoresT1._2 AS T INNER JOIN sculptures_16917805_238524915713238788297627155383949168123"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": "SELECT DISTINCT T1.title FROM Paintings_names_as_full_surnameT2065863472903000000INCALSEARCHORDERSASDICTF18T1285813474000000INCALSEARCHORDERSFULLSTREETPRESSMKTGWANDFRAMEFROCKERDE"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings_Artists_Paintings_Galleries_Locations_Themes_Style_Materials_Tags_Types_Lists_of_Names_TITLES_IN_DESCENDING_ORDER_WITH_AREA250002061834471677928679200734119021"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": "SELECT DISTINCT T1.title FROM Paintings_sorted_by_Lengths_by_PainterT1.painting AS T ORDER BY T2.length LIMIT 1 OFFSET 0;"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": "SELECT DISTINCT T1.title FROM Paintings.long AS l INNER JOIN Sculptures.short AS s  ON l.paintingID = s.sculptureID ORDER BY INSTRSULTHIN_LENGTH LIMIT 20 OFFSET 10000000003865945950142748408636055111543"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "SELECT DISTINCT T2.title FROM Paintings_Years_Painted_as_1837T01614900000092340641078615G96L6940285798287T963323G2349068517G963910225226"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "SELECT DISTINCT T2.title FROM Paintings_200336379463326820000000025776570183303422962371938471069410202922749154844225887668686"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures_Paintings_and_Sculptures_WallTitles_byArtist_222_TO_376308481950738WHERETITLE__ARTISTS_ID_FOR_TITLES__isnullANDTITLES__references.name AS T  WHERE ID = '222' LIMIT 1;"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures_listing210235942780630000000_PLAYERAZATUARI001TABG34F90890354C5867WWHEREASALONKHONDA34DV23G057240967556000"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures_all_workshops.Sculptures AS T , Artists_by_years.Painters AS T INNER JOIN Paintings_by_years.Year ON T1.artistID = Painting_by_Years.Artists_by_years.painterID ORDER BY Painting_by_years.Year LIMIT 10"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures_olderthan185394736618228000000INC166212203T23G30845838980001730000X30577557177500437016100"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "SELECT DISTINCT T1.lname FROM artists_sculptures_personalized_grouping20163975684322259640430158312786WHERETOTALGRADESGIVINGINRANDADDINGWITHTOPPERELLIANDADHAMMAIAWANATAKAASULTINGARIST10052"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "SELECT DISTINCT T1.fname FROM artists_sculptures_officesT2187409165383000000_t335260206029187118963_6746907786262788294623079100848056051"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings_bodies.Sculptures AS T INNER JOIN Artists_bodies.Artists AS T  ON T1.artistID = T2.artistID ORDER BY T2.height_mm LIMIT 50 OFFSET 600000000598711462522316548453446"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "SELECT DISTINCT title FROM PaintingsWHEREwidthLARGERTHAN600ORheightTASTESTATINGFROM2015TO2037ANDlengthLTAS800DONTBREAKTHESESTATESMEMORYLIMITSFORSCULPTUREsWHERENAMEOFpaintingWITHIN2014INPUTAREDELGANGMARKERARGESTATINGFROM201"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM SculpturesSouthwestASWHERETITLEFROMPICTURES14667120000071840560038303452WHEREWHEREYEAR19166950169860305934679139097220966015222"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures__medium_text1667838133640000000__painting156588857133456510000001469354712315WHERETOSTEPSENDDATE_OFPIASTEREVENTS___year1885__medium_"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures_AZ4829793186138300000WHEREheight__sqftBETWEEN500AND2000ORDISTINCTTARGET.longitude__degC AS R INNER JOIN COUNTRIES.NAME AS T  ON T2.artistID = T1.painterID ORDER"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures_48292302_23617926_120512465_117031894_053182564_82609701_15913597_57179242_80313442"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "SELECT DISTINCT T2.location FROM SculpturesAS.Painting AS T INNER JOIN Artists_Sculptures_Locations_AsT1.T ON T.sculptorID = T1.painterID ORDER BY T1.mediumOn , T1.height_mm , T2.location LIMIT 10 OFFSET 67896422530909065000"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "SELECT DISTINCT T2.location FROM SculpturesSculptureASKIN14685072309463600011T00918371202982A11082519T00379542303512C878308T2001780368188"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM SculpturesASSEMBLY__ARTISTS_FULLNAMES_AND_LOCATIONS__T2016161634867283000592AASSEMBLY_DESCRITS_ARISTS__T2016300891607157000713DASSEMBLY_"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures__medium_text___years_WHERE_medium_TEXT_FROM_ARTISTS__paintingID__painted__LIKE__TITLE__Before_1850_and_After_1930__AS_LOCATIONS__GIVEN_IN_18742964368960000000_WHERE_T"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "SELECT AVG(height_mm.value_as_int256_48101978635380833200000023900012803492925816265423705513231468144617144680777211663"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "SELECT AVG(T1.height_mm ), AVG(T1.width_mm ) FROM Sculptures_Painting_Types_by_medium_and_location_groupedby_painterID_in_groups_as_indicated_by_T10635441720005000_0016054896485661000"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "SELECT T3.height_mm , T2.painterID FROM PaintingsAST36034538678336000000R1L6AZ85C21AS24A31210314R3944S_INTEGER_RANK1A9H1R7DGZ24U95X389211"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "SELECT MAX(height_mm.value ) AS mm FROM PaintingsWHEREyearsBetweenINTEGERsBETWEEN2013AND2016GREATERTHAN1805746278372594616MONEYFROMPaintingWITHheight_mm.value AS T WHERE height_mm = 2936 INNER JOIN sculpturesWHEREyearsBetween"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "SELECT SUM(max_height_mm2016.paintingID1.POINTER233793854423630000010 ), SUM(max_width_mm2016.paintingID1.POINTER233793854423630000010 ) FROM Paintings1930s2010"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "SELECT MAX(T1.height_mm ), MAX(T2.width_mm ) FROM Paintings_info_tbl.Painting AS T , Sculptures_info_tbl.SCULPTURE AS T WHERE T.title = 'Professional Wrestlers' GROUP BY T3.year ORDER BY COUNToftheYears140 LIMIT 50000000000000000000"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "SELECT CASTSUM305219748568293967411118.T1 FROM (SELECT T1.height_mm , SUM(T1.width_mm ) AS avg FROM artists_paintings108716207426231582077285644936494511653"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "SELECT T2.height_mm , T2.width_mm FROM Sculptures__painting_groups_by_painter_AND_location_as_grouped_title_grouping_by_artistID_by_lname_fname_year_medium_map_as_location__AS_FOREIGN_KEY_REFERENCES_TO_PIPELINES_WHERE_NAMES_RELATIVE_"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "SELECT DISTINCT T1.lname , T2.num FROM Artists_listing_videos.Artists AS T INNER JOIN Paintings_listing_videos.Paintings AS T  ON T1.artistID = T2.paintingID GROUP BY T1.lname ORDER BY T1.num LIMIT 2600051870016394242500000"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "SELECT DISTINCT T1.firstname , COUNT(T2.paintingID1.title135807694423132272550981150337908948872010471089001002920699864605831575386382"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "SELECT DISTINCT T2.deathYear FROM Artists_Paintings_Keywords_Artist_Titles_For_Genealogical_Reasoning_As_ID_Strings__T1_TO_T46370__GROUP_BY_DEATH_YEAR_FROM_ARTIST_PAINTINGS_WITH_DELETED_KEYWORD_DESCRIPTIONS__WHERE_INSTRUCTIONS_"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "SELECT COUNT(T2.paintingID ), T1.lname FROM (SELECT T3.PainterID , T2.birthYear , T2.deathYear FROM Paintings_by_artist_and_death_site_date_of_birthTerry_FREUDHORN_20369424186784510000000000"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "SELECT MAX(years_since_death__death_years_as_number__NUMBER__31075642689162274593940340228940968656927000344563236026995204899213499617313"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "SELECT strftime_date FROM artistsWHEREARTISTIDS_DESCENDINGORDERBYCOUNTInfinityBETWEEN250613748673089.Count INNER JOIN PaintingsONtoWHEREWHEREDISTINCTCOUNTTOTALISMINUS1210456162859559237477625029135123"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "SELECT DISTINCT T1.paintingID , T1.height_mm FROM SculpturesSoldByTowardsGallery240T1ASubmittedINTEGERT19678359WHERESUBSTRAMABLEGALLERY240WHERESUBSTRT2502524713907287089025738394555"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "SELECT DISTINCT T1.height_mm , T1.id FROM Sculptures_WideASPECTS240WHERElocationINSTRTEXTSCASTSUBSTRFVARCHARTOTLHMSDUMMYDADDARDSYSTEM396684065450167000811397347279665721524553"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures_ArtworkSets.artworks AS T , Sculptures_Gallery240.artists AS T WHERE T1.year = 1954 ORDER BY CASTT1.painterID , T1.year LIMIT 10000100185678054310001001002"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Paintings_galleries.Painting AS T , Sculptures_galleries.Sculpture AS T WHERE T3 = 'GALLERY' ORDER BY CASTTzOZR30067142527189600000 LIMIT 3005673655847661000"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures_painted_within_1900_together_as_artists_and_painters_FROM_ARTISTS_TO_POINTS_INHERITING_PICTURES_TARGETED_ON_1865_674644227299320713115000"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures_Painted_Between_1867_and_1935_AS_OF_THIS_SECTION_WITH_A_PIPELINE_OF_INSTRUMENTS_DENIED_TOGETHER_BY_GRAFTING_ANNEMATTOR_KONSTANTINOPLACER_ARTIST_AND"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "SELECT DISTINCT T1.lname FROM SculpturesASKTOSHAMTU_EURENALGONLARKETTABSASKTOSALESASKSABADABEKTASAKSKMULTIRANGASAKDWSBRHADWAYOLOURINGANNINAMAGEASAKDAYFREDSAKSABAFEMMELDEMOCKPAINTINGALGONL"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "SELECT DISTINCT T2.painterID FROM Sculptures_Artists.Painting AS T INNER JOIN Sculptures_Artists.artist AS T  ON T1.artistID = T2.painterID GROUP BY T2.painterID ORDER BY COUNT__GROUPBY__COUNT__descending LIMIT 10000000000000000000000"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": "SELECT DISTINCT T1.paintingID , T2.location , T3.title FROM Paintings_medium_oil_works_as_painters_by_region_grouping_and_death_years_AS_T1T2WHERET1.metal_type INNER JOIN artists_as_artist_by_region_grouping_AND_death_year_INTO_T3_AS_"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": "SELECT DISTINCT T1.paintingID , T2.location , T3.title FROM Artists_Paintings_Lists.artists AS T INNER JOIN Sculptures_Lists.sculpture AS T  ON T.artistID = T2.artistID ORDER BY T1.birthYear , T2.lname , T2.location LIMIT 100000000000000"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "SELECT DISTINCT T2.year , T2.location FROM Sculptures_395749883612032600000__Inscriptions_TITLE_AND_TIME_FORMAT_OF_THE_PICTURES_WHERE_TITLES_ARE_SHORTER_AS_EVERYTHING_TWEETED_ALONGHOLDING_INSI"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "SELECT DISTINCT T2.year , T2.location FROM Sculptures_Longerthan1000AST2004T1983T5079T9969T12063T17381T18097T21655T23600T26519T31556T36916T4132"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": "SELECT DISTINCT T1.lname , T2.fname FROM Artists_details_2017631895646100000020431253819493722270318475389856256913449589490110467155236"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "SELECT DISTINCT T1.lname , T2.fname FROM Artists_membershipsT1.artists AS T INNER JOIN Paintings_membershipsT1.painting AS T  ON T1.artistID = T2.painterID ORDER BY T1.deathYear LIMIT 2009 OFFSET 5661472822345328644110"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "SELECT DISTINCT T2.location FROM SculpturesASSEMBLY30372902002634960000043950450193803462922163419980367430321852277139579010868125021"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "SELECT DISTINCT T2.title FROM SculpturesT2.paintings AS T INNER JOIN ArtistsT1.artists AS T  ON T1.painterID = T1.artistID ORDER BY T1.year , strftimefmt.format_date__LATERAL__CAST_DATE__TIMESTAMP_LATERAL__CAST_DATE__TIMESTAMP_CAST_DATE__TIMESTAMP"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "SELECT COUNT(DISTINCT ) FROM race_events_result.race WHERE date = '2015-11-30' GROUP BY race ORDER BY COUNT_WITHIN_GROUP LIMIT 1000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "SELECT COUNT(DISTINCT ) FROM raceGROUPEDBYchassisWHEREAgeBETWEEN198324056670000000AND20816384600000112140438900285850226721570140504265808213211"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "SELECT DISTINCT T2.name FROM race.race AS T INNER JOIN driver.driver AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T2.chassis , T2.name LIMIT 1 OFFSET 0;"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "SELECT DISTINCT T2.Team FROM race.Race AS T INNER JOIN driver_team_positions.Driver AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T2.Team LIMIT 10 OFFSET 10000000500482536000975577559327565117699635"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": "SELECT T2.name FROM race_results.winning_team AS T INNER JOIN driver_results.driver AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T.Pole_Position LIMIT 10 OFFSET 15000000480604100000903688757807545998592023"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": "SELECT T1.name FROM race_results.driver AS T INNER JOIN driver_names_by_date_time.race AS T  ON T1.Driver_ID = T2.driver_id ORDER BY T1.PolePosition , T2.Name LIMIT 10 OFFSET 65371684000656117959589600750146115"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "SELECT DISTINCT T2.name FROM race.driver AS T INNER JOIN entrant_updates_table_2015_264398732_0273528306639_c4db7986a2f0e2b42a378481cc660d90431b95853_9852352"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": "SELECT T1.Entrant FROM driver_builder_structure_results_2018_results.constructors AS T ORDER BY T1.Entrant LIMIT 136905374515600000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": "SELECT T3.entrant FROM driver_race_results.driver AS T , race_names.F1 AS T WHERE T.driver_id = (SELECT DISTINCT T2.Entrant FROM driver_race_results.driver AS T INNER JOIN race_names.F1 AS T  ON T.Driver_ID = race_names.F1 ORDER BY CASTTOTALSASWEREARLYINTAILS_TIMESTAMP__"
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": "SELECT T3.entrant FROM driver_table_1784649_21089930_35463880_88020430_56816412__auto_prIMARY_KEY_WITH_AUTO_INDEXes_as_nulls211524739699350547102161"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "SELECT DISTINCT T2.max_age , T1.min_age FROM race.driver AS T INNER JOIN (SELECT DISTINCT T2.max_age , T1.min_age , CASE \n        FROM P500000000380564000000000176851921813685797627500"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": "SELECT DISTINCT T2.Age FROM driver_race_result.driver AS T INNER JOIN race_result.driver AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T2.Fastest_Lap LIMIT 500000000000000000000000000000000000000000000"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "SELECT COUNT(T1.engine_name ) FROM driver_team_entry.race AS T INNER JOIN driver_id_to_engine_name_map_v2.dbo AS T  ON T.driver_id = T2.driver_id ORDER BY T2.driver_name , strftime.format_truncate_date_part3204031819_BY_30__LEGENDARMY_LONG"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": "SELECT COUNT(T1.engine_name ) FROM driver_stats.drivers AS T INNER JOIN race_data_structures.engines AS T  ON T1.driver_id = T2.driver_id GROUP BY T1.entrant , T1.age ORDER BY COUNTOFUNCITYINC_EMPTY LIMIT 1500000000000000000000000"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": "SELECT T1.Name FROM driver_entries_2018_9663659_1986379_64639603_912429980_21411521_62423486_67962121_25008857_57462573_46149"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "SELECT T1.Name FROM driver_reporting_table_names.dbo AS t INNER JOIN race_name_indexes.dbo AS T  ON t.Driver_ID =  t2.Driver_ID ORDER BY strftimeleft253449801633061782 , strftimeleft25266014319189660648161500"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "SELECT DISTINCT T1.name , T2.race_name FROM driver_info_data.driver AS T INNER JOIN race_details_with_report_as_column_values_pairs_to_driver_IDs_AS_T2B_AS_P45ONLYINVENTORIES219306770311481424WHERET2B_AS_P45ONLYIN"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "SELECT DISTINCT T2.name FROM race_details_20137614_52383293_48638624_67842639_38379040_54312740_50677810_026444657_91098103_88926"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": "SELECT DISTINCT T2.name , COUNT(T1.driver_id__race_id_seq.value ) FROM driver_entries_pending_completed_within_65_events_as_completed_by_us__71093387_552409745_001_C04A4623A_C00137B10558_"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "SELECT COUNT(T1.Driver_ID ) FROM driver_contestant_competition.Race AS T INNER JOIN race_contestants.driver AS T  ON T1.Driver_ID = T.Driver_ID GROUP BY T1.driver ORDER BY COUNT.COUNTAREASENDINGINVENTEDHYPERGRADEANDROUTEAFLOWCOLLECTIONONLYDANGEROUSSECONDACTIVITYFORGETW"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": "SELECT COUNT(DISTINCT ), MAX(Age__years__6332789053436162800000__POPULATION_GROUPID__396839477076846400000__3.GPX_33741275421419900000__200309"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "SELECT SUM(DISTINCT ) AS age FROM raceGROUPByNameWHEREReportId.description INNER JOIN driverGROUPByNameORDERBYCOUNT_DESCENDINGRatingdescendantby438205962866401281905547027038361752679289977245714565243"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": "SELECT DISTINCT T1.name , T2.age FROM driver_race__driver_id_name_ranking_table_2014_12_25_12_asdf_g8879142040325065395_vvn5167654631403142445_v651833982"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "SELECT DISTINCT T2.name , T3.age FROM race_results10941751082666960000021946581388109T18D_TOKENS.P1 AS T , race_details223232732457845855000495821222"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": "SELECT DISTINCT T1.race_name FROM race_driver_table_temp_a094765318909000000300__driver_table_temp_a094839512260000000217480101733849157279157094868581"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "SELECT DISTINCT T1.race_name FROM race_names.dbo AS t INNER JOIN driver_years.dbo AS T  ON t.driver_id = T1.Driver_ID ORDER BY CASTTUESdayYearsINTEGER__INT_3492858270528736200__ LIMIT 243517882500324661000"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "SELECT DISTINCT T2.name FROM race163705859830191282433200169651043721180339480475781880448529986002716940189307181759253256"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": "SELECT DISTINCT T2.name FROM race.driver AS T INNER JOIN driver.constructor AS T  ON T1.driver_id = T2.Driver_ID ORDER BY T2.constructor.Name LIMIT 10000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": "SELECT DISTINCT T2.name , COUNT(T1.constructor_id1.object_name185907346500333271851__0002663790891809892143077_constructors_as_sorted_by_group2_of4190138057322323"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "SELECT T1.constructor FROM driver_info.constructions AS T INNER JOIN race_names_by_constructor_type_name_symbols_as_text_t2.PolePosition AS T  ON T1.Chassis = 'RZ' ORDER BY T2.poloPosition LIMIT 2000000000000000000000000000000"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": "SELECT T1.type FROM driver_engine_misc.motors AS T ORDER BY COUNT_BY_TYPE LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "SELECT T1.type FROM (SELECT DISTINCT T2.engine FROM race20162975486300_t120387841371305860_025T22673431785197930_16M24155633879560226_31M24"
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": "SELECT DISTINCT T2.engine FROM driver_results.engines AS T INNER JOIN races.race AS T  ON T1.driver_id = T2.driver_ID GROUP BY T2.engine ORDER BY COUNTIFCOUNTTOSTatus LIMIT 300000000000000000000000000000000000000000000"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "SELECT DISTINCT T2.engine FROM race.driver AS T INNER JOIN driver.enlisted ON T1.Driver_ID = T2.Driver_ID GROUP BY T3.Entrant ORDER BY COUNT_ALL_ENGINES__RAND__FORCE_DESCENDANT_CONSTRAINTS_SUM__NUM_ESTABLE_CONTACTS__SUM_COLUMNS__COUNT_ALPHA_SIGNED__"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": "SELECT T1.name FROM driver_race_report_v2.dbo AS t INNER JOIN race_names_v2.dbo AS T  ON t.driver_id = t1.driver_ID ORDER BY t.Pole_Position , t.Report LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": "SELECT T1.Name FROM driver_entries_with_report_info_as_source.driver AS T INNER JOIN race_results_table_1983_2020.pole AS T  ON T1.Driver_ID = T.Pole_Position ORDER BY T1.name LIMIT 1;"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": "SELECT DISTINCT T1.chassis FROM driver_competition.race AS T INNER JOIN constructors_used_by_driver_IDs_with_age_above_20_T20_as_T21_on_PLAYGROUNDS_T25_as_T32_ON_RACE1_T27_as_T29_ON_RACE2_T30_as_"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "SELECT DISTINCT T1.chassis FROM driver_name_and_prerequisites_of_driver_20s_older_30S_as_constructors19350814766788_to_193814736417430_T1T20347819977890785123010"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "SELECT DISTINCT T2.team FROM race1.race AS T , race1.team AS T INNER JOIN team1.team AS T  ON T1.driver = T1.driver_id GROUP BY T2.team ORDER BY COUNTOFALLRIDES LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": "SELECT DISTINCT T2.team FROM driver_results.result AS T INNER JOIN races_results.race AS T  ON T1.driver = T2.driver ORDER BY T2.total_place_winning_drivers LIMIT 1 OFFSET 0"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": "SELECT DISTINCT T2.name FROM race_results.race AS T INNER JOIN driver_positions_by_years_since_pole_position_starting_01853296726461592913381807993269800101790672027844123728858600"
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": "SELECT DISTINCT T1.name FROM driver_reporting.driver AS T INNER JOIN race_reports_summary.driver AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T1.PolePosition , T3.PolePosition LIMIT 15 OFFSET 66690004285428717727510537641054"
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": "SELECT DISTINCT T1.name FROM driver_info_auto.dbo AS T INNER JOIN race_names_with_losing_poles_as_winning_driver_as_df2_63014981433467865964__5300_720369722814210197636224340016"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": "SELECT DISTINCT T1.name FROM driver_info.roads AS T WHERE T1.name = 'James Hinchcliffe' ORDER BY T2.Pole_Position LIMIT 30576460000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "SELECT COUNT(T1.language_id.name ) FROM (SELECT T2.name FROM countries_languages.LANGUAGES AS T INNER JOIN COUNTRIES_COUNTRY.id AS T  ON T1.country_id = T2.id ORDER BY T2.language_id.score LIMIT 1) AS T WHERE T.T2.ID = 'cadena.en' GROUP BY T.T2.name ORDER BY"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.value__double_pct8614750913120300000__string_63589879126418466670218980389933236903544807699813994226863"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.name FROM languages.language AS T INNER JOIN countries.country AS T  ON T1.country_id = T2.id ORDER BY T2.name LIMIT 1 OFFSET 10000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "SELECT DISTINCT T2.name FROM languages.languages AS T INNER JOIN countries.id AS T  ON T1.country_id = T2.id ORDER BY T1.name , T1.overall_score LIMIT 1;"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "SELECT DISTINCT T2.name FROM languages_en.LANGUAGES AS T INNER JOIN COUNTRIES_en.COUNTRY AS T  ON T1.id = T2.country_id GROUP BY T2.language_id ORDER BY SUBSTR_STRING_INDEX_STR_TO_PERCENTI_FROM_STARTS_WITH , NULLS_CHOPINS_WITHIN_SIGNIFICANT_P"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "SELECT DISTINCT T2.name FROM languages_names_abbrev.dbo AS T INNER JOIN COUNTRIES_abbrs.dbo AS T  ON T1.lang = 'ich' \n    ORDER BY T2.name , strftimeleft.substr_indexing_pattern__strftime_within_pattern__substring_at_least_once_with_character_delimiter__substring_from_first_character_and_"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": "SELECT DISTINCT T2.name FROM countries.overall_score AS T  INNER JOIN countries.country AS T  ON T.id = T1.country_id ORDER BY T1.overall_score LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "SELECT DISTINCT T2.name FROM countries_language_envoy.languages AS T , counties_and_regions.countries AS T INNER JOIN languages_and_officials.COUNTRIES AS T  ON T.ID = T2.country_id ORDER BY T.score LIMIT 1;"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": "SELECT AVG(T2.justice_score_1908503170488308680160168858058400159002422412252610900664900386461555819309723570368363"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": "SELECT CASTAVG FROM COUNTRIES.language AS T ORDER BY T.judge_score LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "SELECT DISTINCT MAX(T2.health_score ), MIN(T1.health_score ) FROM countries_officials.languages AS T , COUNTRIES_Officials.countries AS T WHERE T.country_id <> T1.country_id GROUP BY T1.name ORDER BY T2.health_score LIMIT 150000000000000000000"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": "SELECT SUM(health_score__max1286407385824266238960300000036850486157230418962203787983759563136011749279704383579688286"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "SELECT COUNT(DISTINCT ), T2.name FROM country_language_pairing108347598606980000016171_20171221916953636219420654456561483294634299616797061858"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), COUNT(T2.name__c0365487139_00005105__F5C757B22846F5D35E389BE5A75ADF42154__C15EBB64B3B0000415831837"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": "SELECT DISTINCT T2.name FROM countriesTbl.cities AS T , countriesTbl.countries AS T WHERE T1.overall_score = 50 INNER JOIN studentsTbl.education AS T  ON T1.ID = T2.country_id ORDER BY T2.EDUCATION_SCORE LIMIT 10000000000000000000000"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "SELECT DISTINCT T2.name FROM countries.language AS T , nations.all_countries AS T WHERE T1.overall_score = 90 ORDER BY T2.education_score LIMIT 1"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": "SELECT T1.name FROM countries_languages_translation.languages AS T INNER JOIN COUNTRIES_TRANSLATION.COUNTRIES AS T  ON T1.id = T2.ID ORDER BY T1.overall_score LIMIT 100000000000000000000000000000000000000000000"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "SELECT T1.name FROM countries_score_2018_prioritized_by_party_groups_57639346233970320970156805922780628912496932496155099347534974815444823821"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": "SELECT DISTINCT T2.name FROM (SELECT T1.name , T1.overall_score FROM languages.languages AS T INNER JOIN countries.country AS T  ON T.id = T1.country_id ORDER BY T1.id LIMIT 1) AS T INNER JOIN country_language_relationships_v2.official_languages AS T  ON T1.ID = T2.language_id GROUP BY T2."
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "SELECT DISTINCT T2.name FROM languages_countries_translations20132007_final20168946_254904046_391805440731152359480639410656926477227879625017639265"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": "SELECT DISTINCT T2.name , COUNT(T1.language_id ), T3.countries.ID FROM countries_languages_country_officials_map.languages AS T LEFT JOIN (SELECT DISTINCT T1.language_id , COUNT(T1.language_id ) AS num FROM official_languages.language AS T INNER JOIN countries_languages_country_map.languages AS T  ON T1.language_id"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": "SELECT DISTINCT T2.name , COUNT(T1.language_id__iso_88591_1__country_id__code__to_text__lenient_version__ ) AS num FROM countries_languages_summary.language_info AS T INNER JOIN (SELECT language_id , SUM(overall_score__score__decimal2532678058493469180000"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": "SELECT T1.name FROM languages_listing.languages AS T , COUNTIFS_listings.COUNTRIES AS T WHERE T2.country_id = (SELECT MIN(T2.country_id ) FROM COUNTRIES__countries__LANGUAGES_LISTING__LANGUAGES_DESCRIPTIONS_WITH_OTHERS_WHERE_TARGETED_ASM_DICT.T1 AS T"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "SELECT T1.name FROM languages_common.language AS T , countries_common.country AS T INNER JOIN languages_common.language AS T  ON T1.language_id = T2.id GROUP BY T1.name ORDER BY COUNTEXTENSIONORDERed LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": "SELECT DISTINCT T2.name FROM (SELECT DISTINCT T1.language_id FROM country_languages_v4.t3 AS T INNER JOIN COUNTRIES_v2.t6 AS T  ON T1.country_id = T2.id GROUP BY T2.id ORDER BY COUNTIFDISTINCTT2.name ) AS T INNER JOIN language_languages_v7.t5 AS T  ON T2.language_"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "SELECT DISTINCT T2.name FROM (SELECT DISTINCT T1.name FROM country_language_districts.language AS T INNER JOIN COUNTRIES.id AS T  ON T1.country_id = T2.id ORDER BY T3.name LIMIT 2) AS T LEFT JOIN countries.overall_score AS T  ON T1.id = T2.id GROUP BY DISTINCT LIMIT 200000"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "SELECT AVG(T2.overall_score_english__90.value100nominated__24358867232298843963384238977018178720453190453191481950194204233454297862"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "SELECT AVG(T2.overall_score ) FROM COUNTRIES.states AS T INNER JOIN languages.language AS T  ON T1.country_id = T2.id GROUP BY T3.name ORDER BY SUM_OF_all_values LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": "SELECT DISTINCT T2.name FROM countries_languages_map.language AS T , countries_languages_map.country AS T WHERE T1.country_id = T2.id ORDER BY T2.justice_score LIMIT 30 OFFSET 50000000000000000000000000000000000000000"
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": "SELECT DISTINCT T2.name FROM countries.languages AS T INNER JOIN nations.states AS T  ON T.country_id = T1.id ORDER BY T1.overall_score , T1.justice_score , T1.health_score LIMIT 300000000000000000000000000000000000000"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": "SELECT DISTINCT T2.name FROM countries.languages AS T , COUNTries.country_ids AS T INNER JOIN languages.official_languages AS T  ON T2.id = T1.language_id ORDER BY T2.overall_score LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "SELECT DISTINCT T2.name FROM countries_officials.languages AS T , countries_officials.countries AS T WHERE T1.country_id = (SELECT COUNT(T3.id ) FROM languages_overall.languages AS T INNER JOIN countries_officials.languages AS T  ON T2.language_id = T3.id ORDER BY SUM_ORGANIZATION_DESCENDING_EQUAT"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": "SELECT DISTINCT T2.name FROM countries_officiallanguages.language AS T , COUNTIFS_languages.country AS T WHERE T1.id = T2.id GROUP BY T3.name ORDER BY COUNTIFS_languages.COUNT_LANGUAGES LIMIT 100000000000000000000000000000000000"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": "SELECT DISTINCT T2.name FROM countries.languages AS T , COUNTWITHTRADEASsets.language AS T INNER JOIN countries.country_set AS T  ON T1.country_id = T2.id GROUP BY T2.id ORDER BY SUM_COUNT_IN_SETOF LIMIT 15000000000000000000000000000000"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": "SELECT DISTINCT T2.name FROM languages.languages AS T INNER JOIN counties.country AS T  ON T1.country_id = T2.id ORDER BY T2.name LIMIT 10000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "SELECT DISTINCT T2.name FROM countries_languages.language AS T , countries_languages.country AS T WHERE T1.id = 1036 ORDER BY T2.name LIMIT 1000000000598700000000000000000000000000000000000000000"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": "SELECT DISTINCT T2.name FROM countries.languages AS T INNER JOIN counties.id AS T  ON T1.country_id = T2.id ORDER BY T2.overall_score LIMIT 10000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "SELECT DISTINCT T2.name FROM languages.countries AS T INNER JOIN counties_with_official_languages.language AS T  ON T1.country_id = T2.ID ORDER BY T1.name LIMIT 0 OFFSET 0;"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": "SELECT DISTINCT T2.name FROM countries_languages.country AS T , countries.id AS T WHERE T1.name = 'Greece' INNER JOIN languages_language.lang AS L  ON T2.name = L.language_id GROUP BY T2.name ORDER BY MAX_score LIMIT 4000000000000000000000000000000"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": "SELECT DISTINCT T2.name FROM languages_by_country_id_2016.T1 AS T INNER JOIN countries_by_language_id_2016.T3 ON T1.ID = T3.COUNTRIES.id ORDER BY T2.overall_score LIMIT 17854590346138642273660785152615"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answer": "SELECT T1.city FROM Addresses_listing_addresses_table_v23940715826912100000T19ASL452951365490M1060186479115M6835380110NEXT_DESCENDANCERGUETRALK.COM AS T WHERE"
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": "SELECT T1.city , T2.country FROM Addresses.address AS T LEFT JOIN Features.feature AS T  ON T.address_id = T2.address_id GROUP BY T1.city ORDER BY T2.country LIMIT 30406895371910649780000000000000000000000000000"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "SELECT DISTINCT T1.state FROM Addresses__rvs_line_4_town_city_locality_area_locality_zip_postcode_property_types_properties__address_details_as_arrays_of_addresses__address_id_and_street_line__address_name__objects_as_arrays__object_list__region_state_province_country_other_address_details_as_arrays"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": "SELECT DISTINCT T2.state , T3.province FROM Addresses.address AS T LEFT JOIN properties.property AS T  ON T.address_id = T1.property_address_id GROUP BY T1.city ORDER BY DISTINCTState_Province_Code_Description.value LIMIT 1;"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": "SELECT DISTINCT T2.feature_name FROM Addresses_listing_summary_detail_map.addresses AS T INNER JOIN features_description_table.feature AS T  ON T.address_id = T2.address_id GROUP BY T3.feature_name ORDER BY COUNT.num_features LIMIT 1000000000000000000000000000000"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": "SELECT DISTINCT T2.feature_description FROM Addresses_features.addresses AS T INNER JOIN properties_users_details.properties AS T  ON T1.address_id = T2.user_address_id GROUP BY T1.line_4_number_street ORDER BY T1.line_4_locality LIMIT 100000000000000000000000000"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "SELECT DISTINCT T2.feature_name , T1.feature_description FROM Addresses_Properties_Property_Types_Feature_Lists.address AS T , Addresses_Properties_Feature_Lists.feature AS T WHERE T.T1.town = 'town_city' GROUP BY T1.property_type ORDER BY COUNTIFSALUTE20522696886347184328555"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": "SELECT DISTINCT T1.feature_name , T2.feature_description FROM Addresses_by_User_details.Address AS T INNER JOIN Features_by_User_details.Feature AS T  ON T.address_id = T.user_address_id GROUP BY T1.property_type_code ORDER BY COUNTIFS_SUMILIZE_WITHOUTDESCENDING LIMIT 1000000000"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": "SELECT DISTINCT T1.room_type_description FROM properties_room_types_table.T2 AS T INNER JOIN addresses_listing.addresses AS T  ON T1.address_id = T2.address_id ORDER BY T1.property_name LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "SELECT MAX(room_count__minutes__rowid__object_value__real_number__as_column_data__numeric_as_text__as_column_data__object_name__key_value__table_name__col_name__col_value__type_code__value_from_object__false__row_id__real_number__as_column_data__numeric_as_text__as_column_data__object_name"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "SELECT COUNT(T2.property_id__parcel_address_id__auto_id__integer_01964378753133278850250__varchar_2566065116869697438694601__integer_21409370859363587611360"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": "SELECT COUNT(T2.property_id ) FROM Addresses_listing_detail_structure_recordings_structural_features_details_mapping_table_as_table_name_prefix_first_name_middle_initials_prefix_last_name_prefix_address_id_field_name_format__T2.property_type_code AS T WHERE first_name = 'Bob' ORDER BY AND LIMIT "
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": "SELECT T2.age_category_description FROM Addresses.user AS T INNER JOIN Ref_Age_Categories.Age_Category AS T  ON T1.address_id = T2.address_id GROUP BY T2.age_category_description ORDER BY COUNTDISTINCT  DESC LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "SELECT T1.age_category_description FROM users_details_users.user AS T INNER JOIN Addresses.address_id AS T  ON T.address_id = A.address_id LIMIT 1000000000346892758820137721006740332189505816220629152"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": "SELECT DISTINCT T1.first_name FROM UsersT2043161718013529293000000L2673TASGUU001AMSZLASXC1G278WCU175CZBN315JWLZZC1093HALFW4M9VQR4612"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": "SELECT T2.first_name FROM Addresses190734846809021112510610101146850780282106752722236364725689881515925504168279121779623666"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": "SELECT CASTACTUAL.COUNTYSTATEPROVINCE , SUM(CASE ) AS avg FROM Addresses_listing_2018_2009596_T1498731WHEREPROPERTYNAMES.property_name INNER JOIN COUNTRIES_INDUSTRY.COUNTYSTATENATIVELAS ON Addresses_listing_2018_200959"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": "SELECT CASTT2016254878383597812224316437360000.COUNT FROM addresses100WHEREREPEATING_ID__C.REPEATING_ID INNER JOIN TERMINALS10339740597347822845013611"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "SELECT T1.city FROM Addresses.address AS T , Property.property_address AS T WHERE T1.line_2_number_street = 'street_3' GROUP BY T1.city ORDER BY COUNTIFNULLSLAST.first_name_surname LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": "SELECT DISTINCT T2.city FROM Addresses_details.address AS T LEFT JOIN addresses_details.property_types AS T  ON T1.address_id = T2.address_id LIMIT 1000000000995374000000000000000000000000000000000000000"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": "SELECT DISTINCT T1.property_id , T2.price FROM Addresses_by_addresses_as_ids.properties AS T , Addresses_by_addresses_as_ids.addresses AS T WHERE T1.building = 'Line_3' ORDER BY T2.Price LIMIT 10 OFFSET 100000000000000000000000000"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "SELECT DISTINCT T1.owner_user_id FROM Properties_Vendor__Addresses_Provided_By_Other_Users_AS_T1_T2_T3__T1_T2_T3_T1_T1_T2_T3_T3_T4_T5_T6_T7_T8_T9_T10_T11_T12_T13_"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": "SELECT SUM(T1.room_type_description__c.value__double__24__5039788612723622656__v276618823857408884683_npr_89_a3_9365897_q21_75_323570161612"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "SELECT AVG(T2.room_type_description__desc__contains_short_en_long_number_from_table__group_by_rowid_and_group_by_value___sort_by_group_by_order_by_values__first_value_last_value_as_desc_ordering_method__first_value_last_value_as_desc_ordering_method__counts_ascending_ordering"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), T2.length_in_feet FROM (SELECT DISTINCT T1.room_type_description , SUM(T1.length__ft__INTEGER__09285946723484980__FITREATURES__2_45599375855883477__TABBED_"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), DISTINCT FROM Addresses_rooms__type_grouping__references_table__addresses_room_types_property_names_value__grouping_table__group_group__groupsWHEREPropertyTypeID.propertyTypeCode INNER JOIN Ref_Room_Types__dimensions__size__category_description2004193232583637"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "SELECT DISTINCT T1.user_address_id FROM Users_details_referencing_properties__users_with_features__addresses_line_2_number_building__property_type_names_as_text_as_json__feature_grouping_results_by_property_description_as_feature_listings_AND_WHEREAS_WHEREAS_BETWEEN_POINT_1479385602"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": "SELECT DISTINCT T1.user_id FROM Addresses.address_details AS T , Users.login_name AS T WHERE T2.is_seller = 1 ORDER BY COUNTIFTSTRUCTS24MATERIALIZEDSTOREINFORMATIONNORTHANDREDAGETIDS105489250625777320748251010"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "SELECT MAX(TIMESTAMPDIFF20163978594865721378000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "SELECT MAX(time_stamp_to_day__utc_milliseconds_1370948650000_2016109108056000000__us_hour12_minutes_13.bpm_0249162029224773772_ssn_2891692676"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": "SELECT strftime.time , COUNT(DISTINCT ) AS num FROM addresses1059342716380600000__users_time_and_content_listing_as_properitizer_user_details_json_DATA236027436202468374629WHEREPROPERITIZERIDENTITY_USER_DESCRIPT"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": "SELECT DISTINCT T1.login_name , T2.first_name FROM Users.user AS T , Addresses.address_id AS T WHERE T1.first_name = 'Adam' ORDER BY T2.last_name , T1.date_registered LIMIT 10 OFFSET 66835496207077539679666245242326"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": "SELECT T3.zip_postcode FROM Addresses_listing_addresses10242950789626960000023950_53891203461752835655920289420102766947554697535724303555"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": "SELECT T1.zip_postcode FROM Addresses.address AS T INNER JOIN properties.property_name AS T  ON T.address_id = T1.address_id GROUP BY T2.address_id ORDER BY COUNTIFT LIMIT 10453986571910529760000000000000000000000000000"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "SELECT DISTINCT T1.user_id FROM AddressesAST__UsersALTAST__AddressesALEGIRTAST__Property_TypesALEGIRTAST__FeatureIDsALEGIRTAST__PropertiesProfessionalsAST__UserAddressALEGIRTAST__UsersALEGIRTAST__FeatureDetailsALEGIRTAST__PropertiesProfessionalAST__Property_"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "SELECT DISTINCT T1.user_id FROM Users_20184663172365196000000__addresses_details12731092168413480000001730284710201723377167277551937116152"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "SELECT T2.age_category_description FROM Addresses.user AS T INNER JOIN Ref_Age_Categories.user AS T  ON T1.user_id = T2.user_id GROUP BY T2.age_category_code ORDER BY DATEDIFF_SECOND__LONG_DESC LIMIT 300000000000000000000000000000"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "SELECT DISTINCT T1.age_category_description FROM users_addresses_searching_and_bidding_offline_as_sellers_users_with_property_name_lookuped_as_last_name_JT_ATWB290731946267285600318577619379016439611666"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": "SELECT DISTINCT T1.login_name FROM Users.first_name AS T , Users.middle_name AS T , Users.last_name AS T WHERE T1.is_seller = 0 ORDER BY T2.first_name , T1.last_name LIMIT 1;"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": "SELECT DISTINCT T1.login_name FROM Users.addresses AS T INNER JOIN Addresses.user_categories AS T  ON T.address_id = T2.user_category_id ORDER BY T2.first_name LIMIT 1600000005638757194600161935154877696312159181"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ) FROM Addresses__listing_details_2017183463951601419WHERECREATEEDATE__LATER__ADDRESS__ADDRESS__REF_DESCRIPTION_CODE__REF_AGE_CATEGORY_DESCRIPTION__ID__RELATIVE_STUDIES_TASK_NAME__ID__"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "SELECT COUNT(T1.user_address_id__rpt_address_description__i398574226001322__address_text__i39857422600268_3115103498308971__other_user_details__first_name__middle_name__last_name__other_address_details__login_name"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": "SELECT DISTINCT T1.first_name , T2.last_name FROM users_details__rational_name_translations_2013_09874167T1183561WHEREDATEFORMATTRIBUTES.VALUE AS S  INNER JOIN Users_details__rational_name_translations_2013_09874167T1183"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": "SELECT DISTINCT T2.first_name FROM users_details_login_to_usersT206413587983668894265WHERECTYP_CODE__RATIONE___LOGINNAME__LATITUDE__LONGITUDE_CLOCKWISE_NORMAL_SEARCH_TEXT.T15066145794383"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": "SELECT DISTINCT T2.first_name , T2.middle_name , T2.last_name FROM Addresses__addresses_model.users AS T INNER JOIN addresses__line_number_building_type_details__user_categories_types_table_v230728654_41983291074525_09_as_sales_of_"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": "SELECT DISTINCT T1.first_name , T2.middle_name FROM Users__user_details__users_table__addresses_as_line_1_number_building_details_building_details_table_200197748336106765_village_town_city_locality_state_province_county_zip_postcode_country_other_address_details__"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": "SELECT DISTINCT T1.building , T2.street , T3.town_city FROM addresses_villages_districts_urbanisation_village_cities_town_city_area_with_parks_public_service_area_neighborhoods_population_meters_property_addresses_201721340888695759665000"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": "SELECT DISTINCT T1.line_2_number_locality FROM Addresses_users.address AS T INNER JOIN city_names_and_countries.city AS T  ON T.city = T1.LOCITY_NAMES__LOCITY_NAMES_AND_COUNTRIES___STREET__INSTRUCTIONS__TASK_ID_6486010357 ORDER BY T2.address_id LIMIT"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": "SELECT COUNT(T1.property_id__PID__GTEMPLATE_SCHEMA__object_type_name__qualifier__object_type_description__columns__columns_name_length__columns__columns__columns__objects__objects_id__object_id__object_class__object_description__schema__object_type_number__object_description__object_number__value__value__value__column_name__column_name_"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": "SELECT COUNT(T1.property_id__i18n_type_desc__value__contains_2340165719_232273040_000116__name_text_varchar_10_15_longer_as_title___property_name__other_user_details__owner_user_id__too_short_first_name_middle_last_name"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": "SELECT COUNT(T2.property_id_all_photos__image_format__group_id__user_details__photo_url__property_type_description__title_of_picture__properties__first_name__last_name_address_name__other_user_details__password1__login_name__passport_number__zip__city__street_latitude__longitude_2016741859310"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": "SELECT COUNT(T2.property_id ) FROM Addresses.address AS T INNER JOIN properties.image AS T  ON T1.address_id = T2.property_id GROUP BY T2.property_name ORDER BY COUNT_IN_GROUP_BY_SUM LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": "SELECT DISTINCT T1.owner_user_id , SUM(T2.num_photos__image__gallery_number__photo__image__id__objectId__objectTypeID__photo__image__width__height__is3D__2400x1500_bitrate__4x786x323__color__medium_format__quality__height___height___width__aspect_ratio__zoom"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.last_name_uppercase ), T1.first_name FROM users.addresses AS T , addresses.property_types AS T INNER JOIN customers.users AS T  ON T.user_id = T1.user_id GROUP BY T1.first_name ORDER BY COUNT.COUNTA.last_name_uppercase LIMIT 100000000000000"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(price__max__value__to___infinite__gross_rate_of_growth__30_years_per_32539673.MTHL.WITHDRAWAL_DATE__GROWING_PERIOD_INTERVAL__GROSS_RATE_OF_GROWTH__FROM__TOTAL_CASH_PROFITS__"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": "SELECT MAX(price__max_value__revenue__gross_income_tax__sales__retail__pension__insurance__total__2014__2015__2016__2017__2018__2019__31st_Monday__3rd_March__4th_May__6th_July__7th_August__8th_September__"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "SELECT DISTINCT T2.first_name , T2.middle_name FROM Addresses_addresses139056488762633491_15963102215115062301_8708024708382463555_34905838757230158"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": "SELECT strftime_date_strtupstvd108206642576038000 , T2.property_name FROM addresses.addresses AS T INNER JOIN addresses.lines ON T1.city = T2.city ORDER BY strftime_date_strtupstvd108206642576038000 LIMIT 10000"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": "SELECT DISTINCT T2.description FROM Addresses_details.addresses AS T INNER JOIN properties_types.property_type AS T  ON T1.address_id = T2.address_id GROUP BY T1.address_id ORDER BY COUNT__COUNT__ LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": "SELECT DISTINCT T1.property_type_description FROM properties_types.property_type AS T INNER JOIN addresses.address AS T  ON T.address_id = T1.property_id ORDER BY COUNTDISTINCTT1.property_type_code LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": "SELECT T2.description FROM Addresses.address_id AS T INNER JOIN users.user_details AS T  ON T1.user_address_id = T2.user_address_id GROUP BY T2.age_category_code ORDER BY COUNT_STR_REV LIMIT 10000000000000000000000000000000000000"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": "SELECT DISTINCT T2.category_description FROM Addresses197873351028221420620122153196782575206905936052307985737025353383174280274520887228212"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": "SELECT T2.size , COUNT(T1.room_type_description__desc__part_2_35843670793622198170___p2328637_9091880372490301596_438521199214145323568_60626"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), CASTAZDECASYR284790356713883856716.REAL FROM properties_rooms_area.addresses AS T INNER JOIN addresses_room_type.property_types ON T.address_id =  T.property_type_code GROUP BY ROOM_SIZE ORDER BY COUNT__COUNT__ LIMIT 20"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": "SELECT DISTINCT T2.country FROM Addresses.address_id AS T LEFT JOIN Properties.owner_user_id AS T  ON T1.property_address_id = T2.address_id ORDER BY T2.country LIMIT 10 OFFSET 10000465989473000150003968385646118490056"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": "SELECT DISTINCT T2.country FROM Addresses.address AS T , Users.user_details INNER JOIN Addresses.city AS T  ON T1.address_id = T2.address_id ORDER BY T1.city LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": "SELECT DISTINCT T1.first_name , T2.middle_name FROM Addresses__56470918_3123486090858_8607938747743522_42970691_058208980579587278_56140884_20"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": "SELECT DISTINCT T1.first_name , T2.last_name FROM Users__in_addresses_as_user_details_with_addresses_as_user_details__users__users_details__users_details__other_addresses_details_users_details__user_details__properties_user_details__properties_user_details__address_id_user_details_2016252379486"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": "SELECT T2.first_name , T2.middle_name FROM AddressesWHEREaddresses.user_id INNER JOIN UsersWHENNOTEXISTSINTOSTYPESFROMUsersWHEREis_seller__eq1e36c794d0257f5834D5F93C0BA586F0D3C7E.first_name AS T \n        AS T  O"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "SELECT T2.login_name FROM Addresses.address AS T INNER JOIN Properties.address AS T  ON T1.address_id = T2.address_id GROUP BY T2.line_1_number_building , T2.street ORDER BY COUNTIFTINYRELATINGTRAVELANDCONTACTSDESCRIPTIONSOFRESIDENEWABROADINGALDRIVENOTINLINEARDELIVERYFROM"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": "SELECT DISTINCT T1.first_name , T1.middle_name , T2.login_name FROM Users_listing_details__users_details_table_58386570913431_4173902830573022971_102730599089199860769_30010"
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "SELECT DISTINCT T1.first_name , T2.last_name FROM Users__addresses__first_name_middle_last_name_id_as_uid1T118279004362732__addresses__line_2_number_building_u074653617205998_3155838434231625"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "SELECT COUNT(T2.bicycle_id__product_name__objectid__measurement__type_label__group_by_value__aggregate_value__nullsfirst__vacated_from_field_values__vacuum_release_group_by_value__max__average__all__first_group_by_group_value__groups_by_values__objects___objectid__grouping__aggregates_by_value"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": "SELECT DISTINCT T1.product_name , T2.weight FROM bike_owners_bikes.bike AS T INNER JOIN (SELECT T3.bike_id , ROWNUM FROM cyclists_own_bikes.cyclist AS T INNER JOIN products.products ON T1.cyclist_id = T2.product_name ORDER BY T3.price LIMIT 1) AS T  ON T1.cyclist_"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": "SELECT DISTINCT T1.name , T2.nation FROM cyclists_own_bikesT1.cyclist AS T INNER JOIN bikeT1.bike AS T  ON T1.id = T2.id ORDER BY T1.result LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "SELECT SUM(max.weight__real__2146987340236322000000__nationality__nation__result__total_submission_rank_5338420980203139510003720136912654355644363808116213"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "SELECT SUM(CASTPrice2016__MONEY_WITH___CARBON_CC_AS_STRING__AS_OBJECT__934557258982854602913.TOLERANCE__RATING_REDUCTION_AGAINST_UNITS102940359190363797891668"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "SELECT DISTINCT T2.name , T3.result FROM bike_cyclists_own_bikes_with_country_and_region_as_location_only_namesT1A_T1B_T2C2A1M2C2R1S1D0C1H24W5G1L3008W4M62A2B59W774N2F3281"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "SELECT T1.id , T1.product_name FROM cyclists_own_bikes.bike AS T INNER JOIN products.model AS T  ON T.cyclist_id = T.id ORDER BY strftime  DESC, T2.purchase_year LIMIT 10 OFFSET 66875436809289435858648737531064"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": "SELECT DISTINCT T2.id , T3.name FROM bike_owners_own_bikes_v2.cyclist AS T INNER JOIN (SELECT id FROM cyclists_own_bikes_v2.cyclist WHERE PRIMARY_KEY = 'id') AS T  ON T1.cycler_id = T2.cycler_id GROUP BY T2.id ORDER BY COUNTIFCOUNTyersOwnBikeV2."
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "SELECT DISTINCT T1.id , T2.name FROM (SELECT MAX(T3.result_type_code_as_str__text__as_varchar2064508537346935513__column_as_varchar2064508537346935513_0019297383669866883"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "SELECT T1.product_name FROM bike_owners.cyclist AS T , bike_owners.cyclist AS T INNER JOIN products.product AS T  ON T1.cyclist_id = T2.CyclistsId ORDER BY T1.nation_desc.name LIMIT 4500000000000000000000000000000"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": "SELECT SUM(heat_levels.level_name_meaningful_descriptions_string_varchar2039176385431876670432158634908982201015553540713831931790160640332750311313"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), T2.purchase_year FROM cyclist_own_bikes_tbl_a_v2016A_ASBTZ01413892_to_73013696943503471_10373037738905781_s35122626"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "SELECT T1.name FROM bike_resulting_cyclist_performance_group_with_bike_results_by_nation_as_primary_keyT1.table AS t INNER JOIN cyclists_own_bikes_purchase_years2013ONT1.id AS c  ON T1.cyclist_id = C2.id ORDER BY C2.result , C1.name LIMIT 10"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": "SELECT DISTINCT T1.name , T2.price FROM bike_cyclist_own_bikes__product_name_as_idT1.name AS T , bike_id_as_idT2.bike_id INNER JOIN cyclists_own_bikes__product_name_as_idT2.name AS T  ON T2.cyclist_id = T1.cyclist_id ORDER BY T"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": "SELECT DISTINCT T2.name , T3.nation , T1.result FROM (SELECT T1.name , T2.nation , T1.result FROM bikes_owned_bike_users.cyclists AS T INNER JOIN bikers_own_bikes.Cyclist AS T  ON T1.cyclist_id = T2.cyclist_id ORDER BY T3.result LIMIT 1) AS T"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": "SELECT DISTINCT T1.name FROM bike_materials_text2table_subqueryastextWHERETEXT2SUBSTRTRACTSUBSTRTRACTFROMtext2table_SUBQUERYASTEXT2table_SUBQUERYastext2text2table_SUBQUERYastext2text2table_SUBQUERYastext2text3table_SUBQUERYastext2text2text2table_SUBQUERYastext2text2text"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": "SELECT SUM(purchase_years.cyclists_own_bikes.bike_id_count1__pbk_id26830974_0035700012136_c3C93318538_c3A8A736500_n2899258398010369223651"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer": "SELECT MAX(T1.Price_cakes_and_flavors__L24076958023184000000__ReceiptNumber__Ordinal__Flavor__FoodId__FourPieceSweetBiscottiForGirls.NameAskedPrice_cakes__L24186748779501000000__Rece"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": "SELECT T1.Flavor , T2.Price FROM receipts_data.receipt AS T INNER JOIN items_with_flavors_as_price_details__rpt2078393_168016_by_T.T1 ON T.ReceiptID = T1.ReceiptID ORDER BY T2.Price LIMIT 1 OFFSET 150000000000"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "SELECT T1.Price FROM items_receipts.items AS T INNER JOIN receipts_receipt2.recipients AS T  ON T.Receipt =  T1.Receipt ORDER BY T.Item , T1.Flavor LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": "SELECT T1.Id , T2.Flavor FROM items_receipts_data.receipts AS T  INNER JOIN goods_basket_items_details_procurement.items AS T  ON T.Item = T3.Ordinal ORDER BY T1.Price LIMIT 200000000000000000000000000000000000"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": "SELECT DISTINCT item.Item FROM items_basket.goods AS T ORDER BY item.item , T2.flavor LIMIT 100000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_itemstub__receipts__items__Receipt_tstub__items__Flavor_tstub_Food__ItemSTUB__receipts_itemstub__items___Ordinal__ITEM__ItemStubs_tstub_Items__Flavors_tstub_Apple_AND_Price__USD1039_TOTAL_ORDERS"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": "SELECT DISTINCT T2.Item FROM items_receipts_listingT14078519916237300000WHEREItemPriceFROMreceipt_listingT14078519916237300000INCREMENTBy1000THATSAFEANDREALMONTHDAUGHTERGODSTORMONDAYWHEREReceiptNumber"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": "SELECT DISTINCT T2.Item FROM items_receipts_listing201845009T0607568313049120WHEREPriceBETWEEN300.PROMPTAND305 ORDER BY price LIMIT 10000000000100000000000000000000000"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_itemssubstitutedASINs2087949653013233658370C12211230785W32182134TU058A789394B109T485G400129D04520131"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "SELECT T1.Item FROM items_receipts_itemid_recipient_groupingT20473569883366881637WHEREreceiptnumber__sqlexecute__text_eq___22846790776417568623_34110987951363507202_13"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": "SELECT DISTINCT COUNT(T2.Item.Flavor_type_ID14058976373625300000__id193598876830986483283425976529513832915099205790125076857288"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": "SELECT DISTINCT COUNT(T1.CustomerId_0627873399566227400000000061092583082819439_a7616064943775420000000074264799281419616171"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": "SELECT T3.customer_id FROM receipts_items_goods_services_2020_9489687092263893740586652508921_4692618474306796010591349750717916_999550444"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "SELECT T2.customer_id FROM items_receipts__items_receipt_numbers_names_table__customer_receipts_tbl_as_t2a67449f03614386b82d18272124e3504c536368e464075099D7A6C92D282B88"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "SELECT DISTINCT T2.LastName FROM items_receipts__items__ReceiptNumber_BASICTOPINS__customer_id_AND_Item_ARRAY__INTEGER_as_ARRAY_TOPISSOMAINWHEREItemsInReceipts__receipt_number__bassinins__customerId__WITHINDEIGERESULTINGFROMItemsINSERVEDRATEORDERBYITEMSINSERV"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "SELECT DISTINCT T2.LastName FROM items_receipts.items AS T INNER JOIN receipts_bills_details.customers AS T  ON T1.Item = T2.ReceiptNumber GROUP BY T2.LastName ORDER BY COUNTDISTINCTT2.TotalItemsCount LIMIT 10 OFFSET 0;"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), strftime_format.dbo.CREATE_SUBJECT FROM (SELECT DISTINCT SUBSTR_TITLE , STRFTIME_FORMAT.dbo.FIND_SPECIFIC , strftime_format.dbo.PROMPT_RELATED FROM items_2568782044145393526313WHEREitemid"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), strftime_format_text FROM (SELECT T1.Flavor , T2.Price , CASE \n              FROM items_baking_sales.items AS T INNER JOIN receipts_bakery_receiptSales.Receipts AS T  ON T.Item = 'Cake' ORDER BY T.ReceiptNumber LIMIT 1) AS x GROUP BY DISTINCT "
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": "SELECT T1.Flavor FROM items_items_receipts_flavors203457980612000000022951786383206752788281815491090425916426879538297525934262100"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "SELECT T1.Flavor FROM items_flavored_croissant_a2187304591691680000024291_4390136575571516000023109_0252817106792298950005691_4383"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": "SELECT T3.Item FROM receipts_goods_item_v296641793892023600000_INVARCHARGRAMAGENTA.SUBSTRTREE AS T , t1.CustomerId AS A , DISTINCTTOPALTRUSHASTITLEDONATHEREAVINGTARRACEEBETWEENGAGETHEREABUNDANCETHERE"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "SELECT DISTINCT T2.Item FROM receipts_purchases_data.receipts AS T , customers_and_items.first_name AS T , customers_and_items.last_name AS T WHERE T.customer_id = '15' GROUP BY T2.Item ORDER BY COUNT.ITEM LIMIT 100000000000000000000000000"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": "SELECT AVG(T2.Price ), MAX(T1.Price ), MIN(T1.Price ) FROM items_data_receipts_items_data_receipts_with_food_as_primary_key__594e76b0_9804_4a09_82d3_bf809dac29ad1_winner_asin.txt AS T , items_data"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "SELECT T1.Price , SUM(T2.Price ) FROM items_receipts.items AS T  INNER JOIN receipt_details_with_price.Food AS T  ON T.id = T2.Receipt_number ORDER BY T3.Flavor , T3.Item LIMIT 10 OFFSET 100000000000055684561911731"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": "SELECT DISTINCT T2.ReceiptNumber FROM items_bought_by_customer20438791363578666_150150_58619861_T071202088471657_ARBGUUAAD_0841290374363707_10026"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": "SELECT T1.ReceiptNumber FROM items_receipts__items_receipt_values_listingT3480629975663673373__customers_flavor_satisfaction_average_prices_order_by__Receipt__Receipts_Receipts_receiptNumber147327879611717331005"
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_details_receipts.items AS T INNER JOIN receipts_details_receipts.customers AS T  ON T.Item = items.Flavor ORDER BY T1.CustomerID LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_order_items_purchase_20203759168403_120959646506251_asdTfYsWU_vR1KCmLGvSyxFZhMVYWW2zKQRVG72X9A0ZvJrK8bP"
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": "SELECT MAX(ReceiptNumber_201916487375524219629_32963886896553456046_345775987161640125709_3639598054289190363714_28396"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": "SELECT MAX(ReceiptNumber_2019864307755242886190__Receipts.ReceiptNumber__Infinity_2816617237900918803864530889413730911544104340323055226263"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "SELECT T1.Item FROM items_receipts_listings_orders_table_temp.ITEM AS T , receipt_number_lft_order_items_TABLE.ITEM AS R WHERE T2 = (SELECT MAX(T1.ID__ITEM__3495__ITEM__65608376917499267199__ORDER_NUM__RECEIPT_NUMBER__"
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": "SELECT T1.Item FROM items_receipts_order_by_DateLIMITSTOTALTASKASINASLANDDESCRATEDORDERTABLIMFREVERSEWHERETOPGRADEBACKLOGIIDRUNWITHINDACTIVATIVEORDEREDORDERWHERETIMESTAMPAREFOODSASIGMENTNOWHEREDISSIGGELPARENAMELANGUAGECONTEXTANDORDERID"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), T2.Price FROM items_goods_prices.items AS T INNER JOIN receipts_by_Flavor_Price.Food AS T  ON T.Item =  T2.Food GROUP BY T3.Flavor ORDER BY SUM_Price_byT1.price__qty__  DESC LIMIT 100000000000"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": "SELECT SUM(IIF.foodtype ) AS num , COUNT(DISTINCTItemID106924537892322219169_sri_rupaiya_arutti ) AS itemnum FROM (SELECT T2.Foodtype , COUNT(T2.itemid11031443976743237615_bharat_"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "SELECT T1.Price , SUM(T2.Price_in_USD__LONDON__PSTBTN_C30896755327475661300__540GF2716724578175510000818749024599800655811868"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": "SELECT T1.Price , SUM(T2.Price_listing__rate__first_order_lifetime__flavor__sales__total__tax__final_price__total_gross_margin__final_tax__as__original_value__cost_unit__percentage__as__second_order_lifetime__third_order_lifetime__all_things_equal__interchange_price__final_price__"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_prices.receipts AS T , products.Id INNER JOIN items.Flavor AS T  ON T.Item =  items.Food ORDER BY T.Price LIMIT 1000 OFFSET 50000000009064327384229685205699720182489"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_item20434618372122193000000ASPASUMADINFRIENDLIGHTERALDUSMINTURBOWLERASHAMMOKELARABIHITKAROTZIIGUESSATIMPIEONTHEREDEVILTJACQUIRTSTELL"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": "SELECT T3.Flavor FROM receipts_ordering_lines_inspection_receipts_offered_by_customer_id_to_ordering_line_assigned_by_customer_id_as_sales_customer_1260792905407638100251297669599010492556058"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": "SELECT DISTINCT T2.Flavor FROM receipts_invoice.items AS T INNER JOIN goods_receipts.goods AS T  ON T.Id = goods_receipts.Receipt_id ORDER BY items.Price LIMIT 1000000008625000149522312083700419168016"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": "SELECT T1.Id , SUM(T2.Price__C05_VALUE__F3174_A0289_D638_E7D0_G0D_B356_C8E6_ADC121636894_640933665951175354044833570210083"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": "SELECT T1.Id , SUM(T2.Price__c.RoundedAvgPrice__r__25_380_900__4678914_1_43852232950_3621642494354_i28938421499249855_23104989672"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "SELECT DISTINCT T2.Item FROM items_goods_byTartingTicket1204783865906360001_SUBMITTED_BY_ACCORDIONERLITHIENSINDIA_RITANFUKU24_CITY_ITEM_SERVICES__ACCEPTABLE_DRESSING_FORGINGS_PATTERN_"
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": "SELECT DISTINCT T2.Item FROM items_receipts_listing.items AS T INNER JOIN receipt_listing.customers AS T  ON T1.customer_id = T2.CustomerId ORDER BY T2.price LIMIT 300000000000000000000000000000000000000000000"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": "SELECT DISTINCT T2.ReceiptNumber FROM items_receipts_ticket2048759096138000000TASKA_ABYEZHANNONSKRMU63608625872539473000TASKA_ABYEZHANNONSKRMU63608625"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": "SELECT T2.ReceiptNumber FROM items_receipts.items AS T ORDER BY Price LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": "SELECT MAX(receipt.Date__c__1094286038_3386228796713120152350543288239758_51112080973047713008986059249459120505234542"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": "SELECT strftime_date FROM receipts.receipt WHERE item = 'N/A' ORDER BY item , price LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "SELECT T1.Item FROM items_receipts_inventory.ITEM AS T  INNER JOIN receipts_items.Goods AS T  ON T.ReceiptId = T2.id ORDER BY T.Item , T2.ReceiptNum LIMIT 100000000009956743381579635870686752482683"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "SELECT T1.Item FROM items_listing.items AS T INNER JOIN receipts_with_app.customers AS T  ON T.Receipt = T1.Id ORDER BY item.Item LIMIT 100000000132594862467238526264725597553377536291263657"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": "SELECT DISTINCT T2.Item FROM receipts_orders_customers2.receipts AS T ORDER BY T2.Item LIMIT 10000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": "SELECT DISTINCT T2.Item.Flavor FROM items_receipts_sorted_by_Ordinal_PriceT1.item AS T INNER JOIN receipts_items_ascending_ordering_asciicontinuous.customers AS T  ON T.CustomerId = '70' GROUP BY T2.Item ORDER BY T2.Ordinal LIMIT 5000000000000000"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": "SELECT DISTINCT T2.LastName FROM receipts_listing_invoice_items_receipted_by_customer_id_as_item_id_column_names10296364756533_3923821494152_701862780499284698_10815321226"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": "SELECT T1.LastName FROM customers_itemstesting12691324282670659841_20143834_T2011999571672353690532_657428560751149559298_12080228513"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "SELECT DISTINCT T2.Item FROM items_receipts_items_data_orders_details_items_price_supplier_customer_id_as_order_item_name_11695473017617208252_as__ITEM__1_SUBSTR_168792555607094010769_19698"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": "SELECT DISTINCT T2.Item FROM items.item AS T INNER JOIN receipts_ordering.receipt AS T  ON T1.Receipt = T2.Receipt ORDER BY T3.Item LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_details__receipts__items__item__Receipts_details__receipts__items__item__T118706753991435487402286454986348035255716877127270135947368561"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_itemstesting.ITEM AS T LEFT JOIN items_receipttester.items AS T  ON T.Item = T1.Item GROUP BY T1.ReceiptNumber ORDER BY T1.ReceiptNumber LIMIT 200000000000000000000000000000000000000"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_allrng_ordered_sorted230748986357188900000INCORRECTWHEREDATEASINBEGINSASHERE2703858903700117799893ORDEREDASINCLOSEDWITHRANGINGASINWHEREDICTASINIDATETIME"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "SELECT DISTINCT T2.ReceiptNumber FROM items_receipts_opened167804598323910000024_TOKA1680936972542313631_TAWAR094093205731349329544_TABRAS2015082"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": "SELECT T3.ReceiptNumber FROM items_receipts__items_receipts_customer_id_ordering_as_ascending_WHEREItem.Price AS B LEFT OUTER JOIN receipts_requisition_ascending_ORDERING_AS_PUSH_FIRST_ORDERED_BYReceiptNumber__instrfield1_9319628656073480"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "SELECT T3.ReceiptNumber FROM receipts_prices.items AS T INNER JOIN receipts_receipts.receipts AS T  ON T.Item = T2.item GROUP BY T3.ReceiptNumber ORDER BY strftimefirstrowdiff_strcutfirst18659692407529184990 LIMIT 155000000000000"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": "SELECT DISTINCT T2.Item FROM items.item AS T INNER JOIN receipts_goods_items_receipt_assets.Goods AS T  ON T.Item = T2.Receipt ORDER BY T1.PriceBetween  ASC, T2.PriceAsk  ASC LIMIT 500000000000000000000000000000"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": "SELECT DISTINCT T2.Item FROM receipts_reporting.items AS T , receipts_reporting.goods AS T WHERE T1.Price > 50 ORDER BY T.ReceiptNumber LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": "SELECT DISTINCT T2.firstname , T2.lastname FROM receipts_allreceiptrecords.items AS T INNER JOIN customers_records.customer AS T  ON T1.customer_id = T2.CustomerID ORDER BY date_of_birth LIMIT 150000 OFFSET 600384688911698760000000000"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "SELECT DISTINCT T1.LastName FROM items_receipts__itemstest_20181025T093467_227027_INSERT_RECEIPT_AS_RECIPT__items_receipt_2012396145839_373955768949781_C3.xml AS T WHERE T1"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": "SELECT T1.Price FROM items_receipts_2018163691526293764201696343296028142389522792193939068760568612256990057975881054336868"
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": "SELECT AVG(Price.price_value__RAND__NULLIFY350467913836262000000__product_code_2472108230459700000000_5319541383852255700000_223490699263"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": "SELECT T1.Price FROM items_receipts_by_item__in_order_cheeses_T2.Receipt AS T , items_receipts_by_item__in_order_cheeses_T2.Items AS T , T2.CustomerId AS c INNER JOIN receipts_by_Item__in_ORDER_cheese_T1.Item AS I  ON T2.Receipt = I.ReceiptNumber"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "SELECT T1.Price FROM items_receipts_prices.items AS T INNER JOIN receipts_prices.goods AS T  ON T.Item =  T1.Receipt ORDER BY T1.Flavor.toLowerCASE LIMIT 200000000000000000000000000000000000000000"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": "SELECT MAX(price_lowest.Price ), LOWERED.Price FROM items_v219758006430933_as_n0659_s0287968701_693781_a716724496969_i0347817347686021_39696"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": "SELECT DISTINCT SUM(Price__R180279_306659_2003643_633232__1174359_166239526458103657__6372542_201529984207100000505__39286"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": "SELECT T1.Price FROM items_receipts_items20240918257061631896_SUBSTR_INC_DEPT_PRICE_GROUPS_ORDERED_BY_FOREIGN_KEY_AND_GROUPINGS_FROM_ITEMS20240932397732525400_SUBSTR_INC_DEPT_"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": "SELECT MAX(price_minimum_food__Flavor__T1__RDFaS_Value__RDFaS_Value__RDFaS_Value2__RDFaS_Value3__RDFaS_Value4__RDFaS_Value5__RDFaS_Value6__RDFaS_Value7__RDFaS_Value8__RDFaS_Value9__RDFaS"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": "SELECT strftime_date FROM receiptsORDERBYreceiptnum__descendant_strftime_dateFROMreceiptsWHEREreceiptnumber__descendant_strftime_dateFROMreceiptsGROUPBYSTRFMT_STRUTEBREDKEYsANDSUBSTR_REPLACEKeywordsORDERBYcountingSTRINGDISTINCTstrftime_date_SUBSTR_VALUE1.text AS T WHERE strftime_date = '201"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_data_2015_9218473_9608960_1114094_innerjoinitems_data_2010_8532116_3045389_8103637_1949190_asKEYWHEREItemIDRECID__ORDER_DESCEND"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": "SELECT SUM(CASE ) AS num FROM (SELECT T2.CustomerId , T1.LastName , T1.FirstName , COUNT(T2.ReceiptNumber ) AS sum FROM items_receipts_t106355747891889375782_SUBSCRIPTION_PACKAGING_STANDARD_PLANT_REGULATOR_STUDIO_FLOWER_"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": "SELECT DISTINCT T2.CustomerId FROM items_receipts.items AS T  INNER JOIN customers_receipts.customer AS T  ON T1.Item = T2.Ordinal ORDER BY T2.TotalPurchases , T2.CustomerId LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.CustomerId ) FROM items_receipts_order_by_date_time_strftime_to_datetimeT1123296847056A29SASTINUALCUSTOMERSBEGINNEXTTOWERCASEDONTHUDSBETTERIDUALCOLOURINTHESESTAGESUBSETUALDEGREEINDE"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "SELECT SUM(DISTINCT ), COUNT(T2.Date19740532153065820200000023846900011896493491666539713104463232986794869699813565217312"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": "SELECT DISTINCT T2.firstname , T2.lastname FROM receipts_items_customer_flavorsTARGETS201712321406658938202759ASF1892814A5605WHEREItemsInReceiptNumberIDENTIFIEREQ.T2 INNER JOIN items_customer_flavorsTARGETS20"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": "SELECT DISTINCT T2.LastName , T3.firstname FROM receipts_customers_items_tartSales1056948724204043000000T393A69190605C5870A700808E8B74C86454A5F8473859D27"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": "SELECT DISTINCT T2.Item.ReceiptNumber FROM receipts_by_products.receipts AS T INNER JOIN items_by_product_name_price.goods AS T  ON T1.Items = T2.id ORDER BY price , T2.Flavor LIMIT 1000 OFFSET 500000000000000000000000000"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_prices.items AS T INNER JOIN customers_receipts_prices.customers AS T  ON T.CustomerId = T2.Id ORDER BY T3.Price LIMIT 200000000000000000000000157414695092866702440692"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": "SELECT DISTINCT T2.Item FROM receipts_goods_itemsTARS_SAMPLES.TART AS T , receipts_goods_itemsTARS_SAMPLES.Cake AS T WHERE T2.ReceiptNumber = (SELECT AVG(ReceiptNumber__Price__decimal10000258750390021643585352525"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts_items_goods_records1049852336370000000s_ASD1C4A077287T23W5233316S7439179301006185WHEREItems.Flavor  INNER JOIN itemsOnReceipt104985"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": "SELECT DISTINCT T2.Item FROM items_receipts_items_names_ids_t21483067985383334194_longitudinal_28681412411525364900214388502755977898506515430129913"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": "SELECT T1.Item FROM items_receipts_price_rankings_items_t22054988673036300000_R1TGU2ASD3A0S4CZ03929904748037210000__price_rankings__item_ASN3F516L4V315638"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": "SELECT DISTINCT T2.Item.Flavor , T3.Price FROM receipts_goods_ordering_by_price_as_flavors_and_foods1_to1500_ORDERDCTZI24879164700214760000258444389294690634185119"
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "SELECT T1.ReceiptNumber , T2.Flavor , T3.food FROM items_receipts_details_prices.items AS T INNER JOIN receipts_details_orders_by_Price_Flavor2T3UAAS_B4R82N16_LCTLWG7_MSTONS3B70_B4PALD29WXQ_W4HVK"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": "SELECT DISTINCT T2.id , T3.flavor FROM items.item AS T INNER JOIN receipts_reviews.receipt AS T  ON T1.Item = T2.Flavor ORDER BY T2.ordinal LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "SELECT DISTINCT T2.Item.Flavor FROM receipts_sales16780459_38608683_95624851_16666348_T2.item AS T INNER JOIN items_by_receipt2913862538475364257_16017629_22"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": "SELECT T3.Item FROM receipts_by_customer.items AS T ORDER BY Item LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": "SELECT DISTINCT T2.Item FROM receipts_sales_v6.receipts AS T  INNER JOIN goods_items_data_source_v6.Items AS T  ON T1.Receipt = T2.Item ORDER BY STRFTIME_DATE_REPLACE__COUNT__BETWEEN_STRINGS__TOLERANCE__WHILE_DATE__FORMAT__STRUCTURED_SUBSTR__FLO"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": "SELECT T1.Flavor FROM items_items_flavors.item AS T INNER JOIN receipts_items_receipt_number.Receipt AS T  ON T.ReceiptId = T1.ReceiptNumber GROUP BY T2.Item ORDER BY T2.Flavor LIMIT 30 OFFSET 100405740604888960365604320"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": "SELECT T1.Flavor FROM items_ticketing_receipts__items_ticketing_recipients_as_customer_ids_20197850_as_TARGET_ITEM_NAMES_LONG_INCLUDE_KEYTAB_INPUT1043162_15190137387365_ARROW_ARROW_Flav"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": "SELECT T1.Price FROM items_bakery.items AS T  INNER JOIN receipts_bakery.receipt AS T  ON T.Item = T1.Flavor ORDER BY T2.Premium LIMIT 300000000000000000000000000000000000000000000000"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": "SELECT T1.id FROM receipts_orders_bills_invoices_receipts_customers_goods_items_accounts_payments_transactional_reports_returns_receipts_receipts_ALL_CUSTOMERS_WHERE_ORDER_NUM_EXISTS22451963987249057699000133633110"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": "SELECT T3.customer_id FROM receipts_listing_details_and_supplies.items AS T INNER JOIN receipts_listing_details_and_supplies.customers AS T  ON T.Item = T3.Item GROUP BY T3.customer_id ORDER BY SUM_price LIMIT 150 OFFSET 26855971488500000000000"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": "SELECT DISTINCT T2.CustomerId FROM items_receipts__invoices_within_one_year__longest_receipt_as_customer_id__custodians__to_receipts_as_object__requisites__as_foreign_key__150_CUBLITER_TRIGGERS__45822944637449031000"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": "SELECT T1.Id FROM items_receipts_receipts2008T31473938633238980000081793289332752718053039743224625003015944187809813424594618"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "SELECT DISTINCT T2.CustomerId FROM receipts_customers_orders_payments_receipts_records_t183679007935458000000L929TGXASNYJKQ65203D721313D029CZRM87HM68WX7V827829"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": "SELECT COUNT(ReceiptNumber__Ordinal__flavor__T2.Id_STR__GivenName__FN_GivenSurname__Item__Receipt__ID__ReceiptNumber_Ordered_From__Date__Date_Of_Transmission__Food__Price__GRADE__StickerDate__PricingDate__Bakery_Num1__Pic2Detection__Pic3Detection__Pic4"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": "SELECT CASTDATE__VALUE__ FROM receipts_basket__item__item__receipt__total_income_for_date_order_by_quantity__214996053841678485WHERE__ReceiptNumber__EQUAL_TO_TENSASTREETORDERBYTARGETS_ANDINTEGERDESCENDINGDATE__2570389333"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": "SELECT COUNT(DISTINCT ) FROM driver__group_by_name__564879061342829366000WHEREPRIMARYKEYfield___driver_id__text125712798886021790006723261711087557179110437166536"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.points_won__lte90__value__integer__to_string__decimal_places1639757896427500000__greater_than_or_equal_to_9907413238982877894547000001228000"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": "SELECT SUM(points_given_by_american_model_engineer__c.driver_id__value__double__263987462741842__00000000667032058355976589412231__00000002690292404331612"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": "SELECT DISTINCT T2.make , COUNT(T1.points ) FROM (SELECT CASTVALLG198734613343887849064802000023298053316795031 FROM T2.make AS T WHERE T1.driver = 'N/A' ORDER BY T1.points , T2.manufacturer"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": "SELECT T1.Age , SUM(T2.Age__r.age__first_place__value__2009__345368762040573__5327923894407885643790001__01286252075027519__363717681663"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": "SELECT SUM(DISTINCT ), T2.make FROM driver_team_kmm3490758661938300000ASA5B2CA26930103RW6WG415698270029D928203F961440372B7838C51209676"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": "SELECT AVG(T1.Laps__longitude__63477829701163451080__63472670359367920299_p772729270831950800__642240427810736341720__642"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": "SELECT AVG(T1.Laps_0859643074859482270__11668362518530000213__459151881212591374501__121528070207877323411__39292"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": "SELECT DISTINCT T2.Name FROM team_driver.Team AS T INNER JOIN driver_manager.Managers AS M  ON T1.Driver_ID = M.Driver_ID ORDER BY T3.Car_Owner , T2.name LIMIT 300000000596709184600100017138359646837892969"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": "SELECT DISTINCT T2.Manager , T3.Sponsor FROM driver_team_manager_sponsorship_player_teams_table_10898573671409_10273051194212942_nationalasthighway_car_owner_067492157780049700_250"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": "SELECT DISTINCT T2.make FROM (SELECT T1.make , COUNT(T3.team_id1.name_or_number_of_teams_within_a_group068584971915958652324 ) AS total FROM driver1911003736647061354000629619016"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "SELECT DISTINCT T2.make FROM (SELECT DISTINCT T1.model FROM (SELECT T3.Make , COUNT(T3.model ) AS num FROM driver_results.dbo AS T ORDER BY T1.model , T1.car_num LIMIT 1) AS T INNER JOIN cars.dbo AS T  ON T2.make = T1.make GROUP BY T2.make ORDER BY SUM_NUM LIMIT 1) AS T INNER JOIN team"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": "SELECT DISTINCT T2.make FROM team_driver.car_owner AS T INNER JOIN driver.team AS T  ON T1.Team_ID = T2.Team_ID ORDER BY T3.Make LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": "SELECT DISTINCT T2.make FROM driver_team_car_owner_summary.player AS T INNER JOIN driver_team_car_owner_summary.team AS T  AS T  ON T2.driver_id = T1.driver_id GROUP BY T2.make ORDER BY T3.car_owner__type_code__c.description__c233853013469415721000"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": "SELECT SUM(DISTINCT ), MAX(T2.Winnings__max_point__min_point__lft_value__rgt_value__value__point__winnings__Wins__W1800GTS40A56723499743289999000436877609294328284869283"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": "SELECT DISTINCT T2.Points FROM driver_points_competition.table AS t INNER JOIN team_driver_points_competition.table AS t  ON t.Driver_ID = '49851' ORDER BY SUMOFtPoints LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "SELECT COUNT(DISTINCT ) FROM driver__points__value__meters.dbo WHERE points > 150 LIMIT 160432789783300000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), MAX(points__0946872213827231230323__057261712456957110200691__375493128010554290609__23070981322"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": "SELECT T1.name FROM driver_info.dbo AS T INNER JOIN team_driver.dbo AS T  ON T.Team_ID = T2.Team_ID ORDER BY T2.Age__00493862822127300000L LIMIT 10 OFFSET 500000000000000000000000000"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": "SELECT T1.name FROM driver_team_matches.driver AS T , driver_team_matches.driver AS T INNER JOIN team_driver_details.driver AS T  ON T.Driver_ID = T2.Driver_ID ORDER BY T1.Name , T2.Age LIMIT 1 OFFSET 0"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": "SELECT T1.name FROM driver_points_point_distributions.driver AS T INNER JOIN team_driver_points_point_distributions.team AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T3.Points , T2.Winnings LIMIT 100000000000000000000000000000000000"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "SELECT T1.name FROM driver_info.drivers AS T INNER JOIN team_driver_info.team AS T  ON T1.Driver_ID = T2.Team_ID ORDER BY T.Winnings LIMIT 100000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": "SELECT T1.Name , T2.Country FROM driver_data.dbo AS T INNER JOIN team_driver.dbo AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T2.country_id LIMIT 200000000000000000000000000000000000000000000000"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": "SELECT T1.name , T2.country FROM driver_data.driver AS T  INNER JOIN team_driver_table.driver AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T1.Name , T2.country LIMIT 300000000000000000000000000000000000000000"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": "SELECT SUM(MAX_POINTS_FOR_ALL_ROADING_GROUPS__POINT__0035261948722150000__BARCELONA_MOLNESRANGHALEROIN_IDGREENERROADING_GROUPS__POINTS__1846900983004680000__D"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": "SELECT SUM(max_points__total__gte00968283353732401000000__l1091043582048000000000000000180389900000538174629297363764118131"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": "SELECT SUM(DISTINCT ) FROM driver__native_language__english2016854617532978980WHEREcountry__iso__surname.VALUES AS T , T2.language INNER JOIN team__native_language__english2016854617532978980ONTOTALDISTINCTT2.Car_Owner__custid"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": "SELECT SUM(DISTINCT ), AVG(T2.Age__3D__f__c__5C_37861840_9265119392215683175_d62248189_a__740083932986479207649_c2110932632"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": "SELECT T2.Country FROM driver_points_car_owner__player_points__team_driver__driver_id_t11694386799814500000L01T0M2AJ02ZT1G27G5194S751305P139G765E9T4869R9U083600"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": "SELECT T3.Country FROM driver_points_team_drivers_prior2008__pairs_WHERE_LESS_THAN_150_IN_POINTS_HAVINGCOUNTRECORDEXCEPT24879536236941268861612963978029477150993533923"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "SELECT DISTINCT T2.Capital FROM (SELECT T1.City , T3.Points , MAX(T1.Team_ID.Capital__Regoin__auto_manufacturer_text__AutoMobil_Manufacturing_Name_id__004599978107462800128 ) AS res FROM (SELECT T2.Country , T3.Team_ID.Capital__"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": "SELECT DISTINCT T2.Capital FROM (SELECT DISTINCT T1.Country FROM team_driver_kmp.dbo AS T INNER JOIN driver_kmp.dbo AS T  ON T2.Driver_ID = T1.Driver_ID GROUP BY T2.Country ORDER BY SUMTHAT_WITHin_KMG_FROM.POINTS LIMIT 1) AS T INNER JOIN team_driver_kmp.dbo AS T  ON"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "SELECT DISTINCT T2.make FROM driver_team_table.driver AS T , vehicle_models.vehicle AS T WHERE T1.car_owner = 'ABC123' GROUP BY T2.make ORDER BY COUNTDISTINCTT01_9545660_8828937_9048032__INLINEFORMUZEGXNKTJNVZM0WQ"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": "SELECT DISTINCT T2.make , COUNT(T1.driver_id ), T3.Points FROM (SELECT DISTINCT T2.make , T1.car_owner FROM team_driver__all_car_owners_took_winner_team_details_and_driver_ids_with_same_car_number_t085410606750309919216816"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": "SELECT DISTINCT T2.make FROM driver_info.drives AS T INNER JOIN team_driver_data.driver AS T  ON T1.driver_id = T2.Driver_ID ORDER BY COUNTOFT2.car_owner LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "SELECT DISTINCT T2.make FROM driver_team_drivers.dbo AS T INNER JOIN cars_owners.dbo AS T  ON T1.car_owner = T2.driver_ID ORDER BY COUNT_ALL_CARS.value_time_sales LIMIT 10000000000000000000000000000000000000"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": "SELECT T1.make FROM (SELECT DISTINCT T2.make FROM team_driver_data.driver AS T INNER JOIN teams.team AS T  ON T.Team_ID = T1.team_id GROUP BY T1.make ORDER BY COUNTINCT \n        LIMIT 30) AS t GROUP BY t.make ORDER BY SUMIFS LIMIT 12000000000000000000"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": "SELECT DISTINCT T2.make FROM driver_team_matching__matchs__participant_names1685970943311042840531243006728590952915481959731366739989264344521887225252"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": "SELECT DISTINCT T2.name FROM team_driver.team AS T INNER JOIN driver_id_team.driver AS T  ON T1.Team_ID = T2.Driver_ID ORDER BY T2.name LIMIT 10000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer": "SELECT DISTINCT T2.Team_ID FROM driver_team_results.T1 AS T INNER JOIN driver_team_results.T2 AS T  ON T1.Driver_ID = T2.Driver_ID ORDER BY T1.Car_Owner LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": "SELECT T1.Country FROM driver_team_relationship_table.driver AS T INNER JOIN team_driver_relationship_table.country AS T  ON T1.Driver_ID = T2.Driver_ID GROUP BY T3.Make_ , T2.Country ORDER BY COUNTDISTINCTT1.FONALIST_NAME.LATITUDE , T3.TOMATORGANIZER_COMPANY.L"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "SELECT T1.Country FROM driver_team_id_points.dbo AS T  INNER JOIN team_driver_2017_model_2018_dodgeAST379WC4GINNONSANU68F56280635A3052D853602H5867G08M27P010494233538"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": "SELECT SUM(CASE ) AS avg , SUM(CASE ) FROM driver__points_total_p25034681097286542346__point__driver_id__WHERE_year__team___team_id__auto__2020__gt__AUTO__20180402_8245275610744232950"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": "SELECT SUM(p2.Points__c.value_counts__as_long__v__L380__l21963475_0058553981160331__SUM__COUNT__G262005_5315_G381_P92580_W45649_C2519835117"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": "SELECT T1.Country FROM country_driver_member_team202526642872992330200000046296721380103433WHERE12251785943449860303716970349688131969396121"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": "SELECT T1.Country FROM driver_table.country AS T LEFT JOIN team_table.Country AS T  ON T2.Country_Id = T1.Country ORDER BY COUNTDISTINCT \n              LIMIT 1000000934675208860001860001755498643182555844906691"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": "SELECT DISTINCT T2.manager , T3.sponsor FROM driver_team_management.dbo AS T INNER JOIN (SELECT T1.driver_id , COUNT(DISTINCTT2.driver_id ) AS num FROM driver_team_management.dbo AS T INNER JOIN team_driver_management.dbo AS T  ON T1.car_owner = T2.car_owner ORDER BY T1.num LIMIT 1) AS T  ON"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": "SELECT DISTINCT T2.Manager , T2.Sponsor FROM driver_team_manager_sponsors_teams_driver_members_managers_car_owners_registrations__01643580322467629383450__t4536360435899829193810487054600"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": "SELECT DISTINCT T1.Manager , T1.Car_Owner FROM driver_team_manager_car_owners_with_driver_as_participant_239516970433802411WHERE22061718993067730123822697264179100948203162"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": "SELECT DISTINCT T2.Manager , T3.Car_Owner FROM driver_team_member.driver AS T INNER JOIN team_driver.team AS T  ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Manager , T2.Car_Owner ORDER BY COUNT__COUNT__ LIMIT 100000000000000000000000000000"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "SELECT COUNT(T1.Institution_ID_200658138907610410000000000__Institution_ID20062763151171636000000000__institution_id2022174439934480000000000__"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": "SELECT COUNT(T1.Institution_ID_20061398871508262462820000023146923111682961933261527953859758133456740104397821055866131"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.Name FROM Championship.Institution AS T INNER JOIN Institutions_Nicknames.Institution AS T  ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Name LIMIT 0 OFFSET 100000000530649400000000000000000000000"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": "SELECT DISTINCT T2.Name FROM Championship_table.institution AS T INNER JOIN championships_table.institution AS T  ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Nickname LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": "SELECT DISTINCT T2.Name FROM Championship.Institution AS T INNER JOIN Institutions_2017_founded_as_years_T3.AS AS T  ON T3.Institution_ID = T2.Institution_ID ORDER BY T2.Founded , T2.CreatedDate LIMIT 1 OFFSET 16551983433076719144016"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "SELECT DISTINCT T2.Name FROM Championship_Table164329976833507000000100071940450156603485421123867425274410502486844269693110867680110"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "SELECT DISTINCT T2.city , T2.province FROM championship_voting_results_data.institution AS T INNER JOIN city_and_province_ascii_labels.city_and_province AS T  ON T1.institution_id = T2.Institution_ID ORDER BY T1.city , T1.province LIMIT 2000000000000000000"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": "SELECT DISTINCT T2.city , T2.province FROM cademyclub.university AS T INNER JOIN regionals.region AS T  ON T1.institution = T2.Institution_ID ORDER BY T2.province LIMIT 400000000000000000000000000000000000000000000"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "SELECT DISTINCT SUM(endowment.number_of_championships ), MIN(enrollment.number_of_students_per_year__max_students_in_professional_club__years_fulltime__3years_total_fees__9th_percentile__enrollment__faculty__training__enrollment_capacity__enrolled__faculty__classroom_size__facility_amen"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": "SELECT DISTINCT MAX(enrollment__1027648038983612035301000000__3843516670131506912183837980000000000332195619159213569226200"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": "SELECT T1.Affiliation FROM institution_name_relevant_groups.Institutions AS T INNER JOIN sportsperson.Team AS T  ON T.Institution_ID = T.Institution_ID ORDER BY T.City LIMIT 10000000000000000000000000000000000000000000000"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": "SELECT T1.Affiliation FROM university.university AS T INNER JOIN (SELECT DISTINCT City FROM institutionsWHERENameNOTInIgnoreCaseAndProvinceNotInStringArrayFromArray2753490687904982557364942359831360988344814697822664328168"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": "SELECT DISTINCT T2.Stadium FROM Championship_table16131874539080000000000WHERETOSTAINMENTENDINGATETIMESTAMPHEREGIVESCHANGEDFROMPREVIOUSSTARTATETIMEHEREASNUMBEROFINSTITUTIONSINCOMBATHIGHERWITHALLNGHTONENOW.DOI ORDER BY T2.St"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "SELECT T1.name FROM ampionship_institutions.institution AS t INNER JOIN stadium_structures.stadium AS s  ON t.Institution_ID = s.institution_id ORDER BY s.capacity , MAXVAL LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": "SELECT DISTINCT T2.Stadium FROM Championship_table_name011978405623163800000__institution_id536801803725758610000180259850100766269149697010429112555"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": "SELECT DISTINCT T2.Stadium FROM Championship101996240500789380100000031150480152502432933376818950394420253762477189299120889560021"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "SELECT DISTINCT T2.Name , T2.Nickname FROM Championship_Round2017__Province_Champions_By_Year_Institutions.institution AS T INNER JOIN institutions_names_and_nicknames.institution AS T  ON T2.Institution_ID = T1.INSTITUTION_ID ORDER BY T2.Nickname , T2.Name LIMIT 500"
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": "SELECT DISTINCT T2.Name FROM Championship_info20147629_323952876863237296350430653261403451218282996132413138980879569377658439285816"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": "SELECT T1.Name FROM Championships_with_smallest_enrollment_as_Nicknames_AS_Province_INPUTSLIMITEDWHERENumberOfChampionshipFROMCampus_recordings_20200127_34951416957968301GivenInListNamedasNicknamesAsPROVINCEINPUTSLIMITEDWHERENumberOfCh"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": "SELECT T1.Nickname FROM Championship_enrollMENT_RATINGS.INSTITUTION AS T , CHAMPIONSHIP_ENROLLMENTS.institution AS T WHERE T2.Enrollment <  (SELECT DISTINCT MAX(T3.Nickname__rating__object_type__group_id___enrollment__strftime_format_3001190847563"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": "SELECT DISTINCT T2.Name FROM Championships_listing_as_deleted1053748916130000000D16D8D9C2D3002C5A42D7107B9A7E16AFE3D2F5F771C367A2E4D7175B762810"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": "SELECT DISTINCT T2.Name FROM Championships_AFFINITY_LISTING1670453029389600000ASINB00DE79953003D53M3851245899928D929102E9C5A494C1A7876D40271616"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": "SELECT DISTINCT T2.Name FROM Championship180167339151213218460320128648376400191287422990218729388233265252927797034077525409805802"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": "SELECT DISTINCT T2.Name FROM Championship.Institution AS T INNER JOIN club_info.institution AS T  ON T1.Institution_ID = T2.Institution_ID ORDER BY COUNTIFTARGINT1 , T1.Nickname LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.endowment_funds__total_value__gross__to_current_adjusted_dollar__USD_80893157645068988232835900249913838911954174655383575886212"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "SELECT COUNT(T1.Institution_ID ) FROM Championship_by_Team_affiliation_and_Nickname_as_title_table_201512635798994_0582710325464750203480101962877064697020449532068"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "SELECT T1.Affiliation , COUNT(DISTINCT ), strftimeleft , strftimefromaffiliations__table_name__WHERE \n    FROM INSTRATEGY_GROUP__CONTAINS_COLUMN_TEXT_NAME__INSTRATEGY_GROUP__ITEM___ID__GROUP__GROUP__CONTAINS__INTERSECT_VALUE_FIELD_TEXT__SUBSTR__25038"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "SELECT T1.type , COUNT(T2.type_affiliated_with_professional_club_team__group_name__institution_id__to_string_upper_nullable__player_group_name__player_group_number_of_players__institution_ID__to_string_upper_nullable__club_team__group_name__club_team_group_number_of_players__club_team_"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "SELECT DISTINCT T2.Affiliation FROM (SELECT T1.Affiliation FROM championships_village_of_football_league_club_associations.institutions AS t INNER JOIN clubs_and_organisations.affiliations AS T  ON t.Institution_ID = T2.Institution_ID ORDER BY COUNTAFFLIGATIONS_STRENGTHS.countries_region_population LIMIT "
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": "SELECT DISTINCT T2.Affiliation FROM Championship.Institution AS T  INNER JOIN institution_affiliations_rankings.T1 ON T1.Institution_ID = T2.institution_id ORDER BY T2.Nickname , T2.Team LIMIT 10 OFFSET 38756494263178537327600345311010"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "SELECT SUM(T1.Years_founded__c2.years__max106584790332823200016853976280000568926252667983804483131932984395750000808265133"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": "SELECT strftime_date__years__formatstr FROM Championships_listing.institution WHERE institution_id = '4023' GROUP BY strftime_date__years__formatstr ORDER BY COUNTAINETOOFSTARS.COUNTAINETOSTARS_BUILDING.numaENR_2014__FORMATSTR_DATE__LIMIT43576454966855"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": "SELECT DISTINCT T1.Nickname FROM Championship.institution AS T , lympics.table_name AS T INNER JOIN championships.institution AS T  ON T.Institution_ID = T2.Institution_ID ORDER BY T3.capacity LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": "SELECT DISTINCT T1.Nickname FROM Championship_listing2018179425663126900000_1176710159365755415651919480527785251703274127084550724056010"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "SELECT SUM(enrollment__total__value__real__365032373490835110322122276853900140136408966672034072579083631928904274849112570368263"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "SELECT SUM(SUM123456789012312214323314343123312366712878376129582942292425973980981121022654289844812725361288"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": "SELECT T1.Province FROM (SELECT DISTINCT T2.province FROM institutions.institution AS T INNER JOIN Championship.Nickname AS T  ON T2.Institution_ID = T1.Institution_ID GROUP BY T3.city ORDER BY COUNTIFT256083519734893174L.STRSTR_START0153946231200"
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": "SELECT T1.Province FROM (SELECT DISTINCT t3.province FROM Institutions_and_Faculties_with_oldest_Foundation_years__in_a_Timeframe_WHERE_T2.institution INNER JOIN Championships_on_T1.Institution AS T \n         AS T  ON T2.Institution_ID = T1.Institution_ID ORDER BY t3.date_foundation_"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "SELECT COUNT(DISTINCT ), T2.province FROM Championship.Institution AS T INNER JOIN Provinces_as_City.Province AS P  ON T1.Institution_ID = P.Province ORDER BY COUNTALLOF LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(DISTINCT ), SUM(DISTINCT ), SUM(DISTINCT ), SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ) FROM institutiongrouped_by_provinceWHERESTATE__state_province__ICONS_REMOVE_CHARACTERS___name__LATERALISED__ID__INLINE_TABLE__GROUP"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": "SELECT DISTINCT T1.Location , T3.Value FROM Warehouses_boxes10482506798331000000T1868321339712A1122628742032A668001D084T00374C5818A6E813118"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "SELECT DISTINCT T1.Location , T3.Contents , T2.value FROM (SELECT T1.Warehouse , T2.Contents , T3.Value FROM Boxes_outlet180927469712793860183735255500109796247804599353414818812"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": "SELECT T1.Contents FROM Boxes_in_NY_LOCATIONS20497656802300000000ASSEMBLEDTOTHECARPETSUBSTITUTE_ELLUMINATOXENONGULASURFACEDGEMADEINNEWYorkLONGFORMSPOWERCOSTLIVECOMPANIESINHERITORSMECHATROLLE"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_Inventory.dbo AS T INNER JOIN Warehouse_Locations.dbo AS T  ON T.Warehouse =  T2.Code GROUP BY T1.Contents ORDER BY T3.Location__Latitude__Longitude__Name_or_ID__strftime_format__T2458744002040690 LIMIT 2000000"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes_Listing.containers AS T INNER JOIN Warehouse_Items_Listing.items AS T  ON T.boxid = T2.Warehouse_ID ORDER BY T1.value  DESC LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes_details.boxes AS T INNER JOIN (SELECT CONVERTVALUE FROM Boxes_details.contents WHERE Value > 150) AS t  ON T2.Code = T2.Code GROUP BY T2.Contents ORDER BY COUNTROUGH LIMIT 2500000000000000000000000000000"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": "SELECT T2.Warehouse , AVG(T1.Value_boxes__F0965A7403D85888386E861C51284B003F17B73250434D1807 ) AS sum , T2.Location FROM Boxes_and_Contents__Boxes__F0965A7403D8"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": "SELECT AVG(T2.Value ), T3.Location , T1.Location FROM Warehouses_containers_boxes_items_by_Warehouse_and_Contents.Warehouses AS T INNER JOIN Boxes_contents_items_by_Warehouse_type_groupedASG.T2 ON T3.Code = T2.Code GROUP BY T3.Location ORDER BY SUM_VALUE__RANGE_FROM"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": "SELECT CASTVAL.value , SUM(CASTVAL.Value ) AS sum , AVG(CASE ), SUM(T1.value ) FROM Boxes_Summary_Values__2008AS.Warehouses AS T INNER JOIN Contents__boxes_summary_values__2008AS.Codes AS T  ON T1.Code = T2.Code ORDER BY SUMofVALUES , AVGofVALUE LIMIT 10"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": "SELECT CASTVAL.value , SUM(CASTVAL.Value_total__integer__407169824335523232264850__float__247239544906816120913119500332920655867270313447282212"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": "SELECT T2.TotalCapacity , SUM(T1.Capacity_Total_GlueSniffed__Infinite__PaperBulk__036995754958208531915L_INDEFINITE_INCLUSIVE_84549383296890920407R_INDEFINITE_INCLUSIVE_8"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": "SELECT CASTVAL.value , SUM(CASTVAL.Value20193382407606586560000000012426210331726928118467943749563638986755825705383944661262"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "SELECT CASTSUMVALSQL_ARGUMENT1.value , MIN(CASTSUMVALSQL_ARGUMENT2.value ), MAX(CASTSUMVALSQL_ARGUMENT2.value ) FROM containers_with_content_summary_sources_and_value__structured_outputs_and_value__data.containers AS T , CONTENTS_SAMPLE_DATA.CONT"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "SELECT CASTSUMTHREE_DIGITTED_INTEGERS3.MAXVALUE , SUM(CASE ) AS total FROM Boxes12469025618527821861721WHEREcontents__strftime2__1_5_85_SUBSTR__3_4724977890271368060648062"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_Lists.boxes AS T , Warehouse_Lists.warehouses AS T WHERE T.Value > (SELECT MAX(value2653970848985901125118923289583238966097359409313577222288"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_Details.Boxes AS T INNER JOIN Warehouse_Contents.Contents AS T  ON T.Warehouse = T1.Warehouse GROUP BY T2.Value ORDER BY MAXVALUE LIMIT 100000000000000000000000000000000000000000000"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": "SELECT SUM(SUMIFS.value_18629405_30201180567206300000_02767432156309119200000_4576049713161766447214377680455060000"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": "SELECT SUM(AVGVALARESTUDIES.value_ ) FROM boxes_and_containers.boxes INNER JOIN containers.Value AS T  ON boxes.code = containers.Code ORDER BY T.Location , T.Value LIMIT 1000000000000000000000000000000000000000000000"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": "SELECT T2.Contents FROM Boxes_Listing.containers AS T , Warehouses_Listing.Warehouse AS T INNER JOIN Boxes_Listing.boxes AS T  ON T.Code = T1.warehouse GROUP BY T2.Contents ORDER BY COUNTOFdistinct_contents LIMIT 10000000000000000000000000000"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes_Summary_Details.dbo AS T INNER JOIN Warehouses_Details.dbo AS T  ON T1.Warehouse = T2.Code ORDER BY T1.Value LIMIT 255 OFFSET 0;"
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": "SELECT COUNT(DISTINCTContents_distinct__BOXID__195302763383141360000__CODE__36735966402389655200000__NAME_36605713239528577000000__LOCATION_25518162"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "SELECT COUNT(DISTINCTContents_listing.contents_code_value_104298576353225300000__03C0AA0A_06F2B322_8268_5E5B_805BEE4D414E_ ) FROM Box_contents_listing_t1.Contents WHERE Code = '7691'"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": "SELECT T2.Location FROM Warehouses_boxes.containers AS T INNER JOIN Box_location_info.Distinct_locations AS T  ON T1.Warehouse = T2.Warehouse ORDER BY T.Location LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": "SELECT T2.Location FROM Warehouses_boxes1289169463665730000000000ASP080788854639721D31531884TAB0867096962G1945C0671B885A41F954876"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes_by_Location_andWarehouse_Listing.containers AS T INNER JOIN Warehouses_Listings_For_Furnished_Rooms_INTEGER_NORTHLANDASTARGET_ONTITLE_WHERELOCATION__GIVEN_AZURE_INCREASES_CONTAINER_VALUE_LIMIT__WITHIN_10"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes_Listing_ByLocation205948716683129600000L_NYC491158306790WARGASWHERETownshipIsANORTHROPES5942363749077021355000447664692"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": "SELECT SUM(Value_boxes.value_boxes.VALUE_VALUES_COUNT_WITHIN_30_MILLION_ESTREET_DEPTONS_PATIENTS_OF_251097946368785910000000000LUVN6XM61AWLG9R77BK15332"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "SELECT SUM(Value.value_boxes__val__INTEGER__053764193831262400000__504535926886249829680__1810583715443131522514__67804362589618263"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": "SELECT DISTINCT T2.Contents FROM Warehouses.Location AS T LEFT JOIN Boxes.Warehouse AS T  ON T1.Code = T2.Warehouse ORDER BY T3.Location , T4.Location LIMIT 10 OFFSET 0;"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_temp_storage.Box AS T INNER JOIN warehouses_temp_storage.Warehouse AS T  ON T2.Location = T3.Code ORDER BY T1.Code , T2.location LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": "SELECT DISTINCT T1.type FROM Boxes_Inventory.Warehouses AS T INNER JOIN Warehouses_Inventory.Boxes AS T  ON T2.Warehouse = T1.Warehouse ORDER BY location LIMIT 200000000000000000000000000000000000000000000"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes_Inventory.dbo AS T INNER JOIN Warehouses.Code AS T  ON T1.Warehouse = T2.Warehouse_Name ORDER BY T.Value LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes_Summary_Rocks__Scissors__T34975601183263242170A_ASSET__BLOCKS_UNITEDASSET__T11094426497126302D_WARFASTEMPORTER27036484512626"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes_Inventory.Warehouses AS T INNER JOIN Warehouses_Inventory.Warehouse AS T  ON T1.Warehouse = T2.Warehouse ORDER BY T1.Code , T1.Contents , T2.Value LIMIT 5000000000000000000000000000000"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "SELECT DISTINCT T1.Location FROM Boxes_2019336656726403880100000058876742317337412970366151973499058257_sale_toys_pink_rocks_scissors_storage_unit_warehouse"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": "SELECT T1.Code FROM Boxes_listing_viewer.Warehouses AS T INNER JOIN (SELECT DISTINCT T2.Code , T3.Contents FROM boxes_listing_viewer.Warehouses AS T INNER JOIN Rocks_or_Scissors_onTARGET_boxes.T ON T1.Location = T2.location ORDER BY T2.contents ) AS T  ON T1.Code = T2"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes_Storage_Types.Warehouse AS T INNER JOIN Warehouses_Stores.Warehouse AS T  ON T1.Warehouse = T2.Warehouse ORDER BY T1.Contents LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes_Storage_Types.Warehouse AS T INNER JOIN Contents_Type_Stores.Stores AS T  ON T.Code = 'Rocks' ORDER BY T1.Location LIMIT 1000000000000000000000000000000000000000000000"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "SELECT DISTINCT T1.Code , T2.Contents FROM Boxes_Summary_reports_and_Warranty_Reports_by_Location_and_Inventory_AS_ASCENDING_TARGETS_LIKE_LATERAL_STUDIO_UNITS_SUBSTANTIALLY_POPULATED10_A410263373986586"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": "SELECT DISTINCT T1.Code , T2.Contents FROM Boxes_Sorted_ByValue_Amounts_Increasing_As_Values_AS_T1.Code AS T , Borders_Of_Distribution_Map_as_readable_by_SQL_Server_046954183378422179185655033515363625"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "SELECT DISTINCT T1.Code , T2.Contents FROM Boxes_ordering.Boxes AS T ORDER BY T2.Value LIMIT 10000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "SELECT DISTINCT T1.Code , T2.Contents FROM Boxes_taken.box AS T INNER JOIN warehouses_taken.Warehouse AS T  ON T1.Contents = T2.Value ORDER BY T1.Quantity LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_Summary_Calculation_Values_Per_Packet2015T168639743671840ASF1191831T0372654526074852L65326892217931A5706560D7838315"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_Lists.boxes AS T INNER JOIN Box_Value_Estimation.Box_Values AS T  ON T.Code = T1.Warehouse ORDER BY SUMIFSTHENFALTERINERATESTRIMSTOPVALUEVOLUME LIMIT 500000000000000000000000000000"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_Ordering_Info.Container AS T INNER JOIN Contents_Details_Type_Data_Source.Contents AS T  ON T1.Warehouse = T2.Code ORDER BY T3.contents__type__value__sortdesc LIMIT 3 OFFSET 2000000000000000000000000000000"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes_listing_temp.items AS T INNER JOIN Boxes_listing_temp.contents AS T  ON T.BoxCode = BL240875 ORDER BY T2.Contents LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes_Rocks_Boxs_Warehouse_Codes_And_Contents_T1.box AS T , T1.Warehouses AS T INNER JOIN Warehouses_Inventory.codes AS T  ON T1.Contents = T2.Warehouse_Code ORDER BY T.Value LIMIT 194005762308000"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes_Winner_Codes204973520886613100000_235375081826041896116_884716307960502762438058577533818124400"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": "SELECT DISTINCT T1.Code , T2.Contents FROM Boxes_saleTax__r__salesTax__boxes_as_contents_t3_41825693607075346862516592526_p32132705277069299330840138025"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "SELECT DISTINCT T1.Code , T2.Contents FROM Boxes_Furniture_GradeTax_Savings_Calculation_Data_Tax_Statement_Results2020_17638570_AsAmended_BETTASSET_Boxes_FURNITURE_GRADESTAX_SCISSORSWHEREValues__AVG_VALUES.INTEGER AS D , T1"
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "SELECT SUM(value2.value103948257693710184135000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": "SELECT SUM(Value2.value201746933895960214867_00201866278403516848002470_31872060903089700236_20005290145363707606212"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": "SELECT DISTINCT T2.Warehouse , CAST_INT24964887442353162300000__AVG_VALUE__ FROM Boxes_Warehouses__FITA__boxes_as_table_AS_TUPLEWHERECASESTATISTICS_NO_COMPRESSIONINCLUSIVENOTE_CLOSESTTHRESHOLD_AND"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": "SELECT T3.Value , SUM(T2.Value__r.max_value__float64__representative__max_value__total__representative__min_value__sum__MAX_VALUE__MIN_VALUE__PERCENTILE__SUM__1000_ ) AS total FROM Boxes_Warehouses1287103685809000000_AS_T1"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": "SELECT T1.value , COUNT(T2.Contents_Type_ID__type_desc__Warehouse__ref__group_id__description__type_name__Code_code__Group_Description__group_name__ref__Warehouse_Level__group_level__Group_Name_Value__value_InNum ) FROM Boxes_Items_Type_Details__Content_Types_Id_Desc__Warehouses_Level__Warehouse"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "SELECT SUM(Value ), COUNT(DISTINCT ) FROM BoxesWHEREContents_Summary.value AS T INNER JOIN Contents_Summary.contents AS T  ON T.BoxID = B.code GROUP BY T ORDER BY SUM_VALUE_NONDETERMINATE , COUNT_NEXT , SUM_CONTENTS_SUMMARY LIMIT 400000000000000000000000"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": "SELECT T2.value , SUM(T1.Value ), MAX(T1.Value_20070815__4326983684__A82XM1044130548_386787259834755833_4089704679709323757_46222"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "SELECT T2.location , SUM(T1.Value.max_capacity ), AVG(T1.Value.max_capacity ) FROM Warehouses_details__Location_containment_values_by_Code_within_2_days_as_values_and_outcomes_for_question__2016_653_as_inputs_as_tables_SQL_dataframe_T1_294"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": "SELECT SUM(capacity_total__value__real__cumulative__aspect__dividend__practice__factor__100__250__338624567308930551941082039583079523831518445644199323490188162"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "SELECT SUM(Capacity_Total__RAND_INT_64__372350832938112723160__96473596601638508903333814973479063866__21800329899381487264216"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": "SELECT DISTINCT T2.Value FROM Boxes_listing_warehouses1253849036679000000__Warehouse_name_as_T1253849036679000000__LOCALTARGETS_TABLEAS_POPULATIONS.T2 AS T , T2.Location ORDER BY DISTINCT  D"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": "SELECT DISTINCT T2.Value FROM Warehouses_boxes_data.w_1 AS T , Warehouses_boxes_data.W_35 AS T INNER JOIN locations_with_the_highest_values.Location_ON_T10_AS_CID AS v  ON T2.Code = T2.Warehouse ORDER BY DISTINCTT2.Value LIMIT 10000000"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "SELECT DISTINCT T1.Code , SUM(T2.Value__real__c.Warehouse__w_number__c__i386__r3460389_25361731946901613404950449753434028077547805353714116263"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": "SELECT SUM(DISTINCT ), COUNT(T2.contents_value36417953002886836388458276943245238981992501767943170563232021755865649323474661282"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": "SELECT COUNT(DISTINCT ), T2.Location FROM Rocks_boxes_data.containers AS T INNER JOIN warehouses_locations_table.dbo AS T  ON T1.Code = T2.Warehouse ORDER BY T.Value LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), COUNT(DISTINCT ), SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ) FROM Warehouse__Rocks_boxes_withINCORPSEXCEPTWOTHERASTUFF24WHEREGivenCode__c.DESCRIPTION AS w WHERE DESTINATIONLocation = 'NY' GROUP BY COUNTDISTINCT ORDER"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "SELECT DISTINCT T1.Code , T2.Location , T3.name FROM Boxes_details_received_by_customer_details_table_as_t02416478523962799_302231047920879209_1729055671159680315_22853"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": "SELECT DISTINCT T1.Code , T2.Location FROM Boxes_relevantTowns.dbo AS T INNER JOIN Warehouses_with_boxes.dbo AS T  ON T1.Warehouse = T2.Warehouse ORDER BY T1.location LIMIT 100000000000000000000000000000000000"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "SELECT T2.Code FROM Boxes_locations.containers AS T LEFT JOIN warehouses_boxes.codes AS T  ON T1.Warehouse = T2.Warehouse ORDER BY T1.Location LIMIT 10000000000000000000000000000000000000000000000"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes_Chicago_Towns_Boxes_Codes_Towns_Grove_Warehouse_StraightenINGSGroveTowns_Boxes2GrovesWarehouse_STRAIGHTENINGSGROVE_UNITEDSTATESGROVETownsWarehouseCode_IncludingGroveCodes2GroveWarehouse"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": "SELECT T1.value , SUM(T2.value_set00173343951616860330000011093586282232906980301604900269713132928774260159313575886313"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": "SELECT SUM(COUNT_ALL_BOXS_PER_WARHOUSE1.Contents__Contents__iifelseStringIsNullOrEmpty__WarehouseID__INTEGER__Warehouses__Location__Code__IIFNOTNULLFROMWarehousesWHERELOCATION2.Location__cityNameIsUNIONOFstations2864718357044963747564364"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": "SELECT DISTINCT T2.Contents , COUNT(DISTINCT ), T2.Value FROM boxes_warehouses_distinct_containers_as_textT1916940865372422_22516284986157710_209129553098990008_7320086"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": "SELECT T1.contents , COUNT(DISTINCT ) FROM Warehouse_Distribution_Types20153689047132179871Casual_Store_Inventory__outlet__BOX_GIFT__GRAVITY_SEATTENTER_CARAVAN_FREE_CHECKIN__BIRMINGHAM134620563"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "SELECT T2.Code FROM Warehouses.Warehouse AS T  INNER JOIN Boxes.Box AS T  ON T.Code = T1.Code ORDER BY T3.Value LIMIT 100000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": "SELECT DISTINCT T1.Code FROM Warehouses_Info2036343713588920000000172871786982192756_20031016863087980000232644504398000394015123"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": "SELECT SUM(SUM.value__real__236894050143812530272__5338326514035426068__15415911868675439057__393252807029040931__580911262"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": "SELECT SUM(Value_boxes.value_boxes.VALUE_boxes_total_income__INTEGER__value_boxes_total_income__INTEGER__cost_pct__priority__total_value_pct__income_in_2012__income_pct__income_in2015__value_pct__revenue__total_pct__income_in20"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": "SELECT DISTINCT T2.University_Name FROM (SELECT DISTINCT T1.University_Name FROM University_ID_to_university_name_map.TABLE AS T INNER JOIN all_states_sorted_by_name_city_state_zipcode_200036T2PQW4U57U584GZDXZ9NWHERET1.City AS A \n     AS B "
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": "SELECT DISTINCT T2.University_Name FROM university_ranking_bands.university AS T INNER JOIN overall_ranking_bands.university AS T  ON T1.University_ID = T2.University_ID ORDER BY T2.University_name , T2.city LIMIT 1000 OFFSET 68936433570437614000"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": "SELECT COUNT(T1.University_ID2.University_Name2INSALT0005487396823620031650980158125986988876830462670762122938407869699212477188668"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": "SELECT COUNT(T1.University_ID__20239698876581801420100000066050982170306965986221837983059400202937744314599212467865282"
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "SELECT CASTMAX.enrollment , AVG(CASTMIN.enrollment ), SUM(CASE ), SUM(SUMIFNULLSLASTWHEREOFSECTION270501763812941945988452614945779063237026905259690625470617252"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "SELECT CASTA.total , SUM(CASTA.research_point_max0261574813090336000000 ) AS minsum , AVG(CASTA.total318198025513185520000000 ) AS avg FROM all_of_the_universities.all_university AS T INNER"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": "SELECT DISTINCT T2.Team_Name FROM overall_ranking.University AS T , overall_ranking.university AS T INNER JOIN team_name.team AS T  ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point , T2.Enrollment LIMIT 200000000000000000000000"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "SELECT DISTINCT T2.Team_Name FROM overall_ranking.University AS T , T1.Team AS T INNER JOIN university.team AS T  ON T.University_ID = T1.University_ID ORDER BY T.Student_Count , T1.Total LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": "SELECT T2.home_conference FROM major_ranking.Rank AS t INNER JOIN conference.home_conference AS t  ON t.University_ID = t1.University_ID ORDER BY t.rank LIMIT 1000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "SELECT T1.Home_Conference FROM university.university AS T INNER JOIN overall_ranking.home_conference AS T  ON T1.University_ID = T2.University_ID ORDER BY T1.State LIMIT 3456789904916229516861904389109803696725483949"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": "SELECT DISTINCT T2.home_conference , COUNT(T1.University_ID.name ) FROM (SELECT T3.home_conference , COUNT(T2.home_conference ) AS count FROM (SELECT DISTINCT T0.university_id FROM conference.t1 INNER JOIN universities_with_conferences.dbo AS T  ON T1.university = T0.University_ID GROUP BY T3.home"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": "SELECT COUNT(T1.University_ID2.University_Name2__c_university_id2__university_name2__city2__state2__pronouns2__group2__gender2__enrollment2__reputation2__total2__ ) AS p FROM (SELECT DISTINCT T1.University_ID , SUBSTRING_INDEX_STRANGERS_FROM_START_TO_END_WITH"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answer": "SELECT DISTINCT T2.State FROM (SELECT DISTINCT T1.STATE , COUNT(T3.University_ID ) AS num FROM university_listing.university AS T , overall_ranking.state AS T , campus_region.city AS T WHERE T2.State = 'FL' GROUP BY T2.State ORDER BY countall.num LIMIT 1) AS T INNER JOIN state_listings.STATE AS T  ON T2"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "SELECT DISTINCT T2.State FROM (SELECT T1.State , COUNT(T3.University_ID ) AS total FROM overall_ranking.university AS T INNER JOIN colleges.state AS T  ON T1.university_ID = T2.University_ID ORDER BY T2.state , T2.city LIMIT 1) AS t WHERE T2.State = 'California' GROUP BY T2.State ORDER BY"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": "SELECT DISTINCT T1.home_conference FROM (SELECT AVG(DISTINCT ), SUM(CASE ), T2.enrollment FROM university_ranking_faculty19153887640412491931329491184491398466840204347119460311231"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "SELECT DISTINCT T1.home_conference FROM overall_ranking__rankings_past__overall_ranking__rankings_past__university_enrollments_vs_total_per_university_GROUPBYT396502371908196284501.home_conference ORDER BY SUMGIVESIZE10229454363"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "SELECT DISTINCT T2.conference FROM major_ranking.Major AS T INNER JOIN university_rankings.university AS T  ON T1.University_ID = T2.University_ID GROUP BY T2.conference ORDER BY COUNT.total LIMIT 10000000000000000000000000000000000000"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": "SELECT DISTINCT T1.home_conference FROM (SELECT COUNT(T1.HOME_CONFERENCE__20160730_090527_FROM_UNIVERSITY_ID.WHERE_NOT_EMPLOYEE_CODE_IS_EMPTY201411601365854199000__AND_TITLE_REQ"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": "SELECT DISTINCT T2.major_name FROM (SELECT T1.major , T1.major_code FROM overall_ranking.university AS T INNER JOIN major_rankings.Major AS T  ON T1.university_id = T2.University_ID ORDER BY T2.membership_code ) AS t ORDER BY T1.major_code LIMIT 3000000000000"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "SELECT DISTINCT T2.name , T3.code FROM major_ranking.university AS T INNER JOIN overall_ranking.university AS T  ON T1.University_ID = T2.University_ID ORDER BY T4.rank , T3.code LIMIT 1000 OFFSET 500690722819478000000000000"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": "SELECT T1.Major_Name FROM (SELECT DISTINCT T2.Major_Code , ndash , T3.Research_point , T3.Citation_point FROM (SELECT DISTINCT T2.T1.major_id , T2.T2.Major_Id , T2.T3.Research_points FROM major_rankings_faculty_universities_reputation_ranking_res"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "SELECT DISTINCT T2.name FROM major_ranking.RANK AS T ORDER BY T1.major_id LIMIT 10000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "SELECT DISTINCT T2.University_Name FROM overall_ranking__ranked_as_accounting_major_universities_and_city_states_as_location_categories_at_the_same_level_within_universities_AND_STATE_AS_SUBDEPTS_AND_GATEWAYS_AS_SUBCHAINs_TOTAL__where_rank_is1000_AND_State"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": "SELECT DISTINCT T2.University_Name , T2.City , T2.State FROM University_ranking_accounting_major__ranked_by_universities_as_faculties_and_graduate_programs_table__group_by_all_the_competitive_faculty_names_FROM_university_ranking_accounting_major__ranked_by_universities_as_faculties_"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "SELECT DISTINCT T2.University_Name FROM major_ranking.Major AS T INNER JOIN universities.university AS U  ON T2.University_ID = T1.University_ID ORDER BY T1.rank LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "SELECT DISTINCT T2.University_Name FROM major_ranking.Major AS T INNER JOIN universities.university AS U  ON T2.University_ID = T1.University_ID ORDER BY T1.rank LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "SELECT T2.University_Name FROM major_ranking.Rank AS T INNER JOIN universities.university AS U  ON T2.Major_ID = T1.Major_ID ORDER BY T2.rank , T1.City LIMIT 10000000000000000000000000000000000000000"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "SELECT T3.name FROM university_ranking_rankings20142008ASF123529ASF267699TABSASKALE132459ASKAPANDEYLUHALARU2614353NFLMATVADENAMG2178378PAFRAMEWODEJESZRF130"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": "SELECT T1.University_Name FROM overall_ranking.university AS T LEFT JOIN major_ranking.university AS T  ON T1.University_ID = T2.Major_ID ORDER BY T2.Major_Code , T2.Major_Name LIMIT 2 OFFSET 0;"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "SELECT T1.University_Name FROM university.university AS T INNER JOIN major.Major AS T  ON T1.University_ID = T2.University_ID ORDER BY T2.Major_Code , T3.major_name LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "SELECT DISTINCT T2.University_Name , T3.Overall_ranking FROM University_Lists.university AS T INNER JOIN overall_ranking.T1 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point , T1.Students_per_capita LIMIT 356046932780332663000"
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": "SELECT DISTINCT T2.University_Name FROM overview_universities_rankings.overall_ranking AS T INNER JOIN universities_by_state.universities AS U  ON T1.University_ID = U.University_ID ORDER BY T2.State LIMIT 1000 OFFSET 500000000009322648553742243"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "SELECT DISTINCT T2.University_Name FROM overall_ranking_ranked_universities_with_research_point_highest_1000T2.university AS T INNER JOIN university_rankings_faculty_recruitment_2014_sources_377186593.T AS T  ON T.University_ID = T2.University_ID ORDER BY T2"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": "SELECT DISTINCT T2.University_Name FROM major_ranking.T1 AS T INNER JOIN university_rankings.T2 AS T  ON T1.Major_ID = T2.University_ID ORDER BY COUNTA.Citation_point LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": "SELECT DISTINCT T2.University_Name FROM (SELECT DISTINCT T1.University_ID , SUM(T3.Reputation_point ) AS total FROM overall_ranking.Overall AS T INNER JOIN university_rankings.university AS T  ON T1.University_ID = T2.University_ID ORDER BY T3.rank , T1.Stars LIMIT 1) AS T ORDER BY T2.Rank"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": "SELECT DISTINCT T2.University_Name FROM overall_ranking__ranked_by_reputation_point__university_id_as_string_as_keywordsT1._table AS T INNER JOIN (SELECT T1.University_ID , AVG(T3.PRIMARY_KEY_VALUE__2014356916801094780337016016"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "SELECT DISTINCT T2.University_Name FROM overall_ranking_voting_public_results.university AS T INNER JOIN major_ranking_voting_public_results.Major AS T  ON T1.University_ID = T2.University_ID ORDER BY T1.Major_Code LIMIT 3 OFFSET 0"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": "SELECT DISTINCT T2.University_Name FROM major_ranking.municipal AS T INNER JOIN overall_ranking.university AS T  ON T1.Major_ID = T2.Major_ID ORDER BY T1.Rank LIMIT 3 OFFSET 301746850709477153477666218329129"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": "SELECT SUM(SUMMARY_VALUE.total_enrollments__011338479463120000000__GH1043__EUROPE_TOTAL__37_12365034946679788300132544674505353026237363"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "SELECT SUM(COUNT2.total103346172978907874664316032161296092981657126087986646525083759003836028770360855233577366361"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": "SELECT DISTINCT T2.University_Name , T2.RESTORE_PRIMARY FROM (SELECT T1.University_ID , SUM(T1.Enrollment__c05b7246_t731f900_s__p4v7811_C ) AS rank , T3.rank , xtra.Citation_point FROM (SELECT T2.University_ID , SUM"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": "SELECT DISTINCT T2.University_Name , T2.PRIMARY FROM overall_ranking.university AS T INNER JOIN major_ranking.university AS T  ON T1.University_ID = T2.University_ID ORDER BY T2.REP  DESC LIMIT 30 OFFSET 300648041503788900000000000"
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "SELECT DISTINCT T2.State FROM (SELECT COUNT(DISTINCT ) AS N FROM (SELECT * FROM overall_ranking.university WHERE SUMOFREVPARENTS <= 0 GROUP BY T1.state ORDER BY T2.PRIMARYKEY LIMIT 1)) AS T LEFT JOIN universities_areas_rankings_withenums.states AS T  ON T1.University_ID = T2.University_ID ORDER"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "SELECT DISTINCT T1.State FROM university_rankings_listing_info_listing_state_overview_popularity_public_attention_ranked_by_faculty_student_enrolled_as_higher_than2_universities_WHERE_ranked_in_the_ranking_is_less_1000__secondary_to_city__state_name__university_ID__faculty_"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters.Name AS T INNER JOIN Movies.title AS T  ON T1.Movie = T2.movie ORDER BY T.Rating LIMIT 0 OFFSET 3457289756623962850122886169735177610071916787525466"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters_not_in_used_ratings.movies AS T INNER JOIN movies_theater_ratings.movie AS T  ON T.Code = T2.Movie ORDER BY COUNT.T3.Rating LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT T1.Name FROM Movies_rated_by_Rating_Data.T2 AS T INNER JOIN MovieTheaters.Movie AS T  ON T1.Code = T2.MovieWHERETOTALAREARATINGS  ORDER BY T2.rating LIMIT 3650000000000000000000000000000000000"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters.Movies AS T INNER JOIN movies_rated.Movie AS T  ON T1.Code = T2.movie_id ORDER BY T2.rating LIMIT 10 OFFSET 0;"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": "SELECT T2.Title FROM MovieTheaters.movie AS T INNER JOIN MoviesAS.movie AS M  ON T1.Movie = M.Movie ORDER BY T2.Name LIMIT 1 OFFSET 0;"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": "SELECT T1.Title FROM MovieTheaters.movie AS T INNER JOIN MoviesTicket_voting.Movies AS T  ON T2.Movie = T1.Movies.Code GROUP BY T1.Name ORDER BY COUNTINCTTOPTOSTARS.Rating LIMIT 250000000000000000000000000000000000"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "SELECT T1.Name FROM MovieTheaters_name_changes201653240716203800000000AS__name_changed_table19093162922962180000000INNERjoinmovie201652331773942990000000AS__name_changed"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "SELECT T1.Name FROM MovieTheatersTickets_Auditions_LoyaltyPrograms_SoldTicketListingTickets_Auditions_LoyaltyPrograms_ListingsTicketsTicketListingMoviesInnerCodesTicketsInnerCodesASINsTicketsTicketListingMoviesInnerCodesWHERENAMESFROMTICKETLISTINGTICKETS_AUDITIONS"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT SUM(SUMIFS.Rating__rating_09581535756164362226__rating_GASM69702092294639074__GASM697023424050626266__GASM7884147262080380__GAS"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "SELECT COUNT(DISTINCTTARGET.title_g016219141786521323366323558400413590311439493922789063770765239021555324840181474318116"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "SELECT COUNT(*) FROM MovieTheaters.Name AS T INNER JOIN MovieOnScreen_Applications__InlineASC___Ticket__MovieOnScreen__Ticket_Listing__INTEGER__TABTITLE_MovieOnScreen_MovieSalesMANAGER_AND_FAN_FROM_THEATERS.Rating AS R \n        AS T  ON T.Code = MovieTheaters.Name ORDER BY T.Rating LIMIT 10"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "SELECT COUNT(*) FROM movieTHEATERSWHERENameID10538402362744117971421112275781882449224077031875788082340048391064455989755996515626333"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": "SELECT COUNT(DISTINCTTARGET.title_2015668871902406330230__movie_title__title_string__character__movie_title_201638518000421583815430001_title_149385355723457306220"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "SELECT COUNT(T1.Title_20030514_SUBSCRIBE_17983262_RATED_SUBSCRIPTED_VIDEO__CATEGORY__NAMES_GENERATOR.getListNameID185028549913603_00557897577823424_s2003"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), COUNT(DISTINCT ), SUM(CASE ), SUM(DISTINCT ) FROM MovieTheatersGROUPBYNameFROMMoviesWHEREtitle12554637483759320304791407052005716287297578659571321539"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": "SELECT COUNT(DISTINCT ) FROM MovieTheaters.name AS T INNER JOIN movies_theaters.movies AS M  ON T.Movie = M.movie ORDER BY T.Code LIMIT 10000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": "SELECT DISTINCT T2.Rating FROM movies_titles_names__movietitle_codes_reviews_viewer_stars_ratings_as_movietitle_titles_name_INTEGER_WHERE_REPLAYING_MEDIA_CODES_REFERENCES_RELOADED_AS_EMBEDDED_URLs_REPLACED_BY_STRINGS_WITH_UNI"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "SELECT CASTSUMWHATSINNAMEASDIV23456789012553035 FROM MoviesWHERETitlelikeWITHINwordtitlesubstrNameINHELPTEXT13553083711212039791360756161009677428788639785166991"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": "SELECT T1.Name FROM MovieTheatersTicketING_2003.Movie AS T INNER JOIN MoviesTicketING_2003.Movie AS T  ON T1.Code = T2.movie_id ORDER BY CASE \n       LIMIT 2659998506147355456724578084565440542545"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters_rating_movies_table11945080673060000000WHERETYPEOFID_CODE_STR_NAMES.word INNER JOIN Movies_theater_group11825726161716345000018900897103661"
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters.name AS T INNER JOIN Movies.movie AS T  ON T1.Movie = T2.Code ORDER BY T3.Name LIMIT 200000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": "SELECT DISTINCT T1.Title FROM MovieTheaters_o260699764965308927_asvgfkmsv2_moviet2_23368750551091098740_ratedTitles_movies_AZTAL9AZR9FY5GWXRVRWXHQKM"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": "SELECT T1.Name FROM MovieTheaters.movie AS T  INNER JOIN movies_theater2009AST13ONTOTALRatingT13ONLUMPTONGHTINGEART2018ONLGENTINETHEREONLYTHESMAYBEFORVIBES25ONEWINWITH2.ONLINEFOOORNWITH24 ON TYPEOFAREASDESC"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": "SELECT T1.Title FROM MovieTheaters.movie AS T INNER JOIN MovieOnTheMovieAvenueASTOP31672499803529502_ONTOP31672499803529502_ASCTABLES24.movie AS T \n     AS Q  ON LEFT \n     \n          <question_sql_behavior_text_markup"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": "SELECT DISTINCT T1.Name FROM MovieTheaters.movies AS T LEFT JOIN MovieTHEATERS.movie AS T  ON T1.Movie = T2.Code ORDER BY T3.movie_id LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters.movies AS T INNER JOIN movies_theaters.movie AS T  ON T1.Movie = T2.ID ORDER BY T2.Title , T1.Name LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters.movies AS T , MovieTHEATERS.Movie AS T INNER JOIN Movies.Titles AS T  ON T1.Movie = T2.Movie ORDER BY T2.Name LIMIT 100000000000000000000000000000000000000000000"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": "SELECT T2.Name FROM MovieTheaters_byRatingT1ASINTM00748593606828200000SepTGUDFKA08526271172215000SepGUFD6GU201260943835343920000SepGUFDA6G"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": "SELECT DISTINCT T1.Title FROM Movies_rated_by_ratings.movies AS T , Movie_ratings.movie AS T WHERE T2.rating > 4 GROUP BY T1.title ORDER BY T2.rating LIMIT 300000000000000000000000000000000000000000000"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": "SELECT T2.Name FROM MovieTheaters_movies_names_sorted_by_rating_in_order_as_Movie_titles_rated_descending_to_32028656719690175416_431706359896002706473_60805626745980198"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": "SELECT T1.Name FROM MovieTheaters_films2017TNMSTGt2853639147191200000__movietheater_WHERECountInRangeLIke12_11225_T0_WITHIN_THEATER_CODES_LIKE_REVERSE_GROUP_BY_SELECT_ORDER_JOINs_AND_SUBSTR_"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": "SELECT T1.Name FROM MovieTheaters_popularity.movies AS t INNER JOIN MovieTheaters_popularity.Movie AS t  ON t.Code = t1.Movie.Code GROUP BY t2.Name ORDER BY COUNTOFLIGHTINGS.longestMOVIEFORALLTHEATERFROMMovies.t LIMIT 10000000000000000000000"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": "SELECT T1.Name FROM movies_theater_moves_titles20050867141900_asia_t1246853_i2159967499712_n192141613_w30101_r2470114087510464_13989"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": "SELECT T1.Name FROM MovieTheaters_TicketingTicketING_DESCRIPTION19348256707921000000WHEREMATCHEDSTREETTINGTICKETINGTICKETING_DESCRIPTION19348256707921000000WITHRATINGSAFELANDINWARPAS"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": "SELECT SUM(Rating_nums.Rating_nums ), COUNT(movie_title__c.title_code__20131236_081432986755863145__desc_20131234_1015183862927455682059223949782275"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": "SELECT SUM(Count.Rating_value__code__213071628292242151340__rating_value__value__value__value__value__value__value__value__value__value_id__title__title__title__Title__title__title_Title__title__title__Title__title__Title__title__Title__title_Title__title_Title__title__title__title_"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "SELECT COUNT(*) FROM MoviesWHERERatingNOTNULL01034996653232221807466225095596846132252834041132417791940746122099377287155919584281966"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": "SELECT COUNT(T2.Title_name__strftime19833620170343951230__rating__string_subtracts_7_1820669_6778824551401201975__string_subtracts_9024715028304788822__"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters_2014__moviemovies__aspectsTitlesTv1983_2007675_INDIRECTLYASPECTSMATCHINGWHATIFTHEREFROMMovieTHEATERS2013_.Movies AS T WHERE SUMOFRatingFROMmovieTHEATER2014__moviemovies__aspectsTit"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters_movies.movie AS T INNER JOIN Movies_theaters.Movie AS T  ON T1.Code = T2.Code ORDER BY T1.Rating LIMIT 10 OFFSET 0;"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters_in_Showing_Movies__Codes_not_showing_movies_as_title_T1.Code AS T INNER JOIN Movies_T3.Title AS T  ON T1.Movie = T3.movie ORDER BY T2.name LIMIT 100000000000000000000000000"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters.Movies AS T INNER JOIN MovieTheaters.Movie AS T  ON T1.Code = T2.MovieWHERETitel.nameNOTINTEGER GROUP BY T2.Name ORDER BY T2.Name LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": "SELECT T1.Name FROM MovieTheaterTickets_listingASINL05342789906617900000838WHERERATINGREQUIREDANDRatingisGEBERFORMATCHASINL0535429383000007483554115GONLINEWITHSOUNDPLAYERLIVE.com"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters.Name AS T INNER JOIN Movies.Title AS T  ON T1.Movie = T2.Code ORDER BY T3.Rating LIMIT 10000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": "SELECT DISTINCT T1.Title FROM Movies_Lists.movies AS T INNER JOIN MovieTHEATERS.name AS T  ON T1.Movie = T2.movie ORDER BY T1.Rating LIMIT 10000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": "SELECT DISTINCT T1.Name FROM Movies_ListingTitles__Integers_AsTextTitles__Movies_Listings_Titles__Codes_Like_90289436141140700000__INTEGER_TITLE_TOTALS.asTextTitles AS T WHERE T.Integers_AsTextTitles__Movies_"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "SELECT DISTINCT T1.Rating FROM Movies_db.movies AS T INNER JOIN MovieTHEaters_db.movie AS T  ON T.Movie = T2.Name GROUP BY DISTINCTT1.Rating ORDER BY COUNTDistinctDISTINCTT1.Rating LIMIT 10 OFFSET 0;"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": "SELECT T3.rating FROM movies_ratings.movies AS T INNER JOIN MovieRatings.Movie AS T  ON T1.movie = T2.movie ORDER BY T2.rating LIMIT 1000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": "SELECT DISTINCT T1.Title FROM Movies_Rating_Unrated_Titles200467953589219959241_36052569798791226917420723400661395837643077156303562100"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "SELECT DISTINCT T1.Title FROM Movies_Unrated_T207849500326812000000SASINIDXTN0177894454191150000140827725506DWGUWHEREDVDPRODIDISAREAIDBINID322826"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters.Movies AS T INNER JOIN MovieTHEATERS.Movie AS T  ON T1.Code = T2.Code ORDER BY COUNTIFCOUNTTOTALS.Name LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters.Movies AS T INNER JOIN MovieTHEATERS.Movie AS T  ON T1.Code = T2.movie ORDER BY COUNTIFRating_reports_forT2.name , DISTINCTT2.title LIMIT 100000000000000000000000000000000000"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": "SELECT DISTINCT T1.Name FROM Shipment_Weight_Balance__Calculation_and_Display_Systems__Package_Receipt_Data_Technique_Aspect_Method_as_Resulting_Income__Grossing_Income_For_Aircraft__Invoice_as_Grossing_Income__Invoice_Total__Gross_income_Calculation_Table_And_Invoice_Number__"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": "SELECT DISTINCT T1.Name FROM Client.Package AS T INNER JOIN Shipment_Quantity_Sales.Customer_Account AS T  ON T1.AccountNumber = T2.AccountNo ORDER BY T.Weight LIMIT 1500193674286920000000000000000000000000000000000"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": "SELECT SUM(weight_all_packages.weight__total__2013766419135308136000000__value__grossing_value__per_unit__amount_value__all_values__sum__per_package_value__weight__per_unit__amount_value__all_values__value__grossing_value__per_unit__amount_value__all_values"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "SELECT SUM(weight__lte_1378024367946_244121582523_25878943942810000000.WONG_SOLDIERS_TECHNICAL__STAFF__TOTAL_WEIGHT_STRUCTURED.SUM_WOOL_DENSITY_FROM_"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "SELECT DISTINCT T1.Position FROM Employee.Name AS T , Planet.PlanetID AS T WHERE T1.Name = 'Amy Wong' ORDER BY T2.Planet LIMIT 1;"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "SELECT DISTINCT T1.Position FROM EmployeeT361847498041818679326_asf58310476702440662592CWU458431736247900659FWG70761849653554725994T"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "SELECT DISTINCT T1.Name , T1.Position , T2.Name FROM Employee_position_and_salary_table.Employee AS T INNER JOIN Shipment.Shipment AS T  ON T.EmployeeID = T3.EmployeeId ORDER BY T1.Name , T2.Name LIMIT 8000000000000000000000000000000"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "SELECT DISTINCT T1.Name , T1.Position , T2.Employee.Salary FROM Employee_Information_2018_19653767267441000000_3T0A32270707TU097_B38787TURANGA.INTEGER AS T  INNER JOIN Shipment_Manufacturer_Company_Address"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": "SELECT AVG(salary_from_interns.salary_FROM_AVERAGE_TO_BECOME_RETIRED_AND_DEPARTMENTS_NAMES_CORRESPONDING_TO_POSITION_OF_JOB_NO_487523099916636766719139349333429657657"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": "SELECT AVG(salary_of_employee__037946080308662361656__salary_of_managers__365168412340110186133__salaries__0195013802788177285708__salary_of_manager__1366"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": "SELECT DISTINCT T1.Level FROM EmployeeT1.Employee AS T INNER JOIN ShipmentT1.Shipment AS T  ON T1.EmployeeID = T1.ShipmentID ORDER BY T2.Level LIMIT 300000000000000000000000000000000000000000000000"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": "SELECT DISTINCT T1.Level FROM EmployeeTASKTASKS.JobTitle AS T , ShipmentSCHEMA.PLANET AS T WHERE T2.EmployeeID = T1.EmployeeID ORDER BY T2.PlanetID LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": "SELECT T3.PackageNumber FROM Shipment_Details.Packages AS T INNER JOIN Accounts_Receipts.Account_Numbers AS T  ON T1.ShipmentID = T2.ShipmentID ORDER BY T1.ShipmentNum LIMIT 10000000009765843715898108355424023983684"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": "SELECT COUNT(*) FROM package_number__containers__invoice_type_table.shipment WHERE account_number = '52437961' GROUP BY account_number ORDER BY sum_weight LIMIT 1000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": "SELECT T3.PackageNumber FROM ShipmentSales.PACKAGE AS T INNER JOIN PackageOnSale.PLANET AS T  ON T1.Shipment = T2.ShipmentID ORDER BY T2.Name , T2.Planet LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": "SELECT T3.PackageNumber FROM ShipmentSales.PACKAGE AS T INNER JOIN Customer.Name AS T  ON T1.ShipmentID = T2.PLANETID ORDER BY T2.Customer.Name LIMIT 500000000000000000000000000000000000000000000000"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": "SELECT T3.Name FROM Shipment_History.Package AS T INNER JOIN Contents_Invoices.Package AS T  ON T1.Shipment = T2.PackageID ORDER BY CASE \n  LIMIT 5267140900820670329440808902197644321838270633656"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": "SELECT T3.PackageNumber FROM ShipmentSentToClientT1996282423574012610120071872781698203506760288828561609942202735444589699220664511001"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": "SELECT COUNT(T1.PackageNumber_Wernstrom_GOTBYFLIP356709218240000000_T24351389083193873863_GUHINO_LAND7_RANDOM_SECTOR_ALTMEGRADE.NEXT_STARBATROCKETTABS_"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": "SELECT COUNT(*) FROM shipment_received.PLOTTARGET AS T WHERE T.AccountNumber = (SELECT T2.AccountNumber FROM Package.Shipment AS T INNER JOIN Client.Name AS T  ON T.EmployeeID = T1.Employees.FULLNAME ORDER BY T2.Name LIMIT 1) GROUP BY T2.Name ORDER BY COUNToftheClientsbyName.COUNTAREOFUNNONHIGHER"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": "SELECT DISTINCT T1.Contents FROM Package.Shipment AS T INNER JOIN Shipment.Planet AS T  AS T  ON T.ShipmentID = T.ShipmentID ORDER BY T.PackageNumber LIMIT 200000000000000000000000148502678353946029431432"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": "SELECT DISTINCT T1.Contents FROM Package_Shipment_Codes20204675896361619900039876796297190797409786792497240675955413689160774535944339525"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": "SELECT DISTINCT T1.PackageNumber , SUM(T2.Weight ) FROM Client.AccountNumber AS T INNER JOIN Package.Shipment AS T  ON T.AccountID = T1.Employee ORDER BY T.Name LIMIT 1600000000000000000000000000000000000000000000000"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": "SELECT T3.PackageNumber , T1.Weight FROM Package_Item_Listings.Items AS T INNER JOIN Clients_as_People_INTEGER_ON_T256508400974521748848803750629930251711579109455383460220103"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": "SELECT DISTINCT T1.PackageNumber , T2.Weight FROM Package_lighter.package AS T INNER JOIN Weight_as_weight.weight AS T  ON T.PackageNumber = T.PackageNumber ORDER BY T.Weight LIMIT 30468795355935059816464721559392109646792122365"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": "SELECT T1.PackageNumber , T2.Weight FROM Package_Listing_PACKAGINGTASKs.package AS T INNER JOIN Shipment_Listings_PAGES.Shipment AS T  ON T.ShipmentID = T2.shipment_id ORDER BY T.PackageNumber LIMIT 30000100011940626857545641610"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": "SELECT DISTINCT T1.Name , SUM(T2.Counts.NumberOfPackageSentByClient__Counts_ID__PlanetID__Counts_ID__EmployeeID_2793654806955940332826900289531434914708149377532647318213"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": "SELECT DISTINCT T1.Name FROM Package_Customer_Weights_Stages_States_Rewards_Reviews_Provide_Details_AS_INFORMATION_FOR_PIGMENTS_INSTRUMENTED_INSTRUCTIONS_AS_PROVIDING_LIFELINE_RESPONSE__INFORMATION_TABLE_WITH_PRECISE_DETAILS_IN_THE_TABLE"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": "SELECT DISTINCT T1.Name , SUM(T3.PackageNumber ) AS num FROM Client_Receipted_to_Planet_Agency_as_AccountNumberT1076358914268591598192485542659916663081450240877365060326326"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": "SELECT T3.Count FROM Shipment_Clients_byPlanet__Level__FOREIGNKEYTARGETs_as_List10000219436438012752999__PLANETID_115736307426832722879047477666747676888"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": "SELECT DISTINCT T1.Name FROM ClientASG.Shipment AS T INNER JOIN Package_Shipment2.Employee AS T  AS T  ON T.AccountNumber = T1.Employees.AccountNumber ORDER BY T2.AmountAREAL LIMIT 1 OFFSET 0"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "SELECT DISTINCT T1.Name FROM ClientASSETTARGETS_MULTIPLECASES.Employee AS T , PackageNumberINTEGERASSETS.Package AS T WHERE T2 = 'PACKAGE' GROUP BY T3.Accountnumber ORDER BY COUNTAggregate__rCount__custid_lastname__custfirstfirstnum__252093696481131731000"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": "SELECT DISTINCT T1.Coordinates FROM Planet_Positioned_to_Mars.Planet AS T INNER JOIN Shipment_Location.Shipment AS T  AS T  ON T2.EmployeeID = T1.Employeeid ORDER BY T2.Date LIMIT 300000000000000000000000000000000000000"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "SELECT DISTINCT T1.Coordinates FROM Planet_Positioned_to_Mars.Planet AS T INNER JOIN Shipment_Location.Shipment AS T  AS T  ON T2.EmployeeID = T1.Employee ORDER BY T4.Name LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": "SELECT DISTINCT T1.Name FROM Planet_name_ordering_realtime_jobs.planet AS T ORDER BY T2.Name LIMIT 10000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "SELECT DISTINCT T1.Name FROM Planet_listing.Planet AS T INNER JOIN Shipment_Listing.Shipment AS T  ON T.Planet = T1.Planet ORDER BY T1.Name LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": "SELECT T3.ShipmentID FROM Shipment_manager_temp.employees AS T INNER JOIN (SELECT DISTINCT T1.EmployeeID , T2.planetid FROM Employee_Temp.Planet AS T INNER JOIN Employee_Temp.Position AS T  ON T1.Employee = T2.name ) AS T  ON T2.planetid = T3.ShipmentID ORDER BY T3.ShipmentID LIMIT "
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "SELECT T3.ShipmentID FROM Shipment_info.Planet AS T INNER JOIN employee_manager_details.T2 AS T  ON T1.Employee = T2.Name ORDER BY T2.PlanetID LIMIT 200000000000000000000000000000000000000000000000"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": "SELECT DATE FROM shipment_listing_vacation_wk__week.shipment ORDER BY T1.Date LIMIT 100000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "SELECT Date FROM ShipmentGROUPEDByPlanetWHERELevelISBETWEIGHTREALANDEmployeesIDINTEGERNOTNULLFROMShipmentGROUPEDBYPlanetWHERELevelISSpecifiedASDEMPTYWHEREEmployeeIDNOTNULLWHEREPositionIDINTEGERNOTNULLWHERERemarksIsNominalCONSTRUCTORINLINEMODELINLINECOMPARETHENOWEEPARENTALMGTPERSONSOFSTAND"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": "SELECT T3.ShipmentID FROM Shipment_Requests_to_Planet_and_Staff_Roles_by_Name_as_Employee_TITLE_LEFT_PLANET_AREA_SECRETARY218940051836884317301WHEREName_TITLE_LEFT_PLANET_AREA_SECRETARY218"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": "SELECT T3.ShipmentID FROM Shipment_Codes_Planets_Titles_Positions_Employees_withBranches_andLevels.planet AS T , Shipments_by_PlanetINTEGERWHERENameLikeTITLE_EMPLOYEE.name ORDER BY T3.ShipmentID LIMIT 12000000000000000000"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": "SELECT T2.ShipmentID FROM Shipment_Detail_Billing10982475606310300000063750563687237941516610784400314573831938084274644663069385310"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "SELECT T3.planetID FROM Shipment_ManageMENT16322458729390000000000LASA93M_TURANGA_LELA341T01818624C30877130301D28557627379220589214261"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": "SELECT T2.ShipmentID FROM Shipment_Details.shipment AS T INNER JOIN Planet_Manager_Addresses.TurangaLeela AS T  ON T2.EmployeeID = T1.EmployeeID ORDER BY T1.Name , T1.Position LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "SELECT T3.PlanetID FROM Shipment_Inventory.Shipment AS T INNER JOIN Shipment_Inventory.Employee AS T  ON T.ShipmentID = T2.ShipmentID ORDER BY T2.Name LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": "SELECT DISTINCT T1.Name , SUM(T2.Shipment_Total__Gross__revenue__3Ps__Gross__income__2007__INCOST2009__3Ps_FULL2015__Gross__Income__2010__INCOST2020__Gross__Income__3Ps__Gross__income__2014__"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "SELECT DISTINCT T1.PlanetID FROM Shipment_InvoiceTotals.Planet AS T INNER JOIN Package_Shipment_InvoiceTotals.Shipment AS T  ON T.PlanetID = T1.shipmentid ORDER BY T1.Weight , T2.Name , COUNTAREA LIMIT 400000000000000000000000"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": "SELECT T3.Name FROM Shipment_History.Planet AS T INNER JOIN Shipment.Planet AS T  ON T1.ShipmentID = T2.ShipmentID GROUP BY T3.Name ORDER BY COUNT__Count__AVG__DESCENDING__ LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "SELECT T3.Name FROM Shipment_Aggregation.Shipment AS T INNER JOIN Planet_Managers_Shipment_Agg.Planet AS T  ON T1.ShipmentID = T2.ShipmentID ORDER BY T2.planet.Count LIMIT 10000000000000000000000000000000000"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": "SELECT T3.Name , T1.PlanetID FROM Employee_management_shareholders_company_planET2009067849511_0256518054208_s_31606311479215476_as_a_manager_involved_as_above.name AS T , Shipment_number__longitude__"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": "SELECT T2.EmployeeID , COUNT(T1.Name_201214308327615000000__T123319512158431982912256537900006750000993174584809233967381288"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": "SELECT SUM(T1.Weight_lb24Mg_A23HG766932838035533535353535353535353535353535353535353535353535353535353535353535353"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": "SELECT SUM(T1.Weight_Mars_Shipment__continuer__Total__Nominal__Cutoff__Cutoff__Weight__weight__total__GRAVITY230057860703759384405913817953236921999377144323169227883"
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": "SELECT T3.Name FROM Shipment_Data.Planet AS T INNER JOIN Shipment_Data.PLANET AS T  ON T1.ShipmentID = T2.ShipmentID ORDER BY T2.planet.Position LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": "SELECT T3.Name , SUM(T1.Weight__REL__418800922374635400000__54093542677830562928868224900119913131420645819699323455816812"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": "SELECT T1.Name FROM Shipment_Item_Lists.Planet AS T , PlanetAS.Name AS T WHERE T.ShipmentID > (SELECT MAX(T2.Name__TO_CALCULATE__FROM_TABLE_FINAL_NODE_35249705786316_01077625198363459333_13"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "SELECT T1.Name FROM Shipment_weights.Employee AS T INNER JOIN Planet_weights.Planet AS T  ON T.EmployeeID = T2.PlanetID GROUP BY T2.Planet ORDER BY SUM_weight LIMIT 1750000000496003480000000000000000000000000000"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": "SELECT T3.PackageNumber FROM Package_Shipment_Manufacturers20173420_12659163700052140530036803725AASLH23914M2059B980505WHERENameInRights1185105860641320012"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": "SELECT COUNT(T1.PackageNumber ) FROM ShipmentSentByZAPPBrannigan_Persei82024AS_396769887579669120_OCTOBER2020_PACKAGENETS_ORDERBYNUM_INSTRUCTIONs_CARDTRIM_VIEW1020489211313"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": "SELECT T3.PackageNumber FROM Package_Invoice_Billings.PACKAGE AS T INNER JOIN Shipment_Invoice_Billings.Shipment AS T  ON T1.PackageNumber = T2.PackageNumber GROUP BY T1.PackageNumber ORDER BY T2.PLANET LIMIT 5000000000000000000000000000000"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": "SELECT COUNT(*) FROM (SELECT DISTINCT T3.PackageNumber , T2.Accountnumber FROM Package_TOTALS.dbo AS T INNER JOIN Shipment_TOTALS.dbo AS T  ON T1.ShipmentID = T2.ShipmentID ORDER BY CASE \n  LIMIT 0 OFFSET 10052835733469811534) AS T"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": "SELECT DISTINCT T2.PackageNumber , SUM(T3.Weight__Energy__0_GHZ__LBT__REM__WATT__WHG__IONINE__POWER__PVRTHF_I496__I81493787_9525__IN3394A.IN306D9_C2934__IN3394"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": "SELECT T2.PackageNumber , T2.Weight FROM Package_Calculation_Ordering.Shipment AS T INNER JOIN Quantity_Quantification_Ordering.Weights AS T  ON T2.ShipmentID = T1.ShipmentID ORDER BY T2.Weight LIMIT 10 OFFSET 30000000099585623471885136243"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": "SELECT T3.Name FROM Employee_Clearances_Employees_PlantATIONS1670845992138000000DASPLIGENT22681965758A.INSTRUCTION AS T WHERE ISNULLANDstrftag = 'Mars' GROUP BY T3.Name ORDER BY COUNTOFNOTWITHIN  DESC  LIMIT 1000"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": "SELECT T3.Name FROM Employee_Clearance.Employee AS T INNER JOIN Shipment_Clearance.Shipment AS T  ON T.EmployeeID = T2.Manager ORDER BY T1.EmployeeID , T2.Planet_ID LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": "SELECT DISTINCT T1.Name FROM Employee.Position AS T , Employee.Salary AS T , Shipment.Planet AS T WHERE T2.Level = 'Omega' ORDER BY T2.Name LIMIT 30000000000000000000005916482579233992305686747311639"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": "SELECT DISTINCT T1.Name FROM EmployeeT1.Name AS T INNER JOIN ShipmentAS3T21619042873596720A_E12156931ONLYTWOOF188014743140750301LASGALGANGASKNW3.AS AS T  ON T1.EmployeeID = T"
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": "SELECT DISTINCT T1.Name FROM Employee_Clearance.Planet AS T INNER JOIN Shipment_Cleaning__Employee_AST20134927296718303156E34X82603A04_ASSETASGND82643043150786454401D897685181"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": "SELECT DISTINCT T1.Name FROM Employee.Planet AS T INNER JOIN Package.Shipment AS T  ON T.EmployeeID = T2.EmployeeID ORDER BY COUNT_NAME_OF_PLAYER_EXCEPT_JOIN_RECORD_KEY_TOTALS_AS_SHIPMENTS_ONLY LIMIT 10000000000000000000000"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": "SELECT DISTINCT T3.Name FROM Employee_Listing123446270026384948316TASKASSETTING_5401872205709TASKASSETTING_3562447960129081177TASKASSETTING_5749469601"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": "SELECT DISTINCT T3.Name FROM Employee_204978464940999620000000000ASP279526TU_109577572982019460001500003F2907TU14177696894533000"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": "SELECT T3.Name FROM Employee_salary.Employee AS T INNER JOIN Shipment.Shipment AS T  ON T1.EmployeeID = T2.EmployeeID GROUP BY T2.Planet ORDER BY AVGTOTALBYTEPERMITTEDS.SUMDISTINCTCOUNTWHATMARKSLIKEAVARIRED.Name LIMIT 45000000000000000000"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": "SELECT DISTINCT T1.Name FROM Employee_info_and_position_advice2020T31426982739984773D2B4C673987L31G3927825A97824T612921G199F523C5C303E34A159959"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": "SELECT COUNT(DISTINCT ) FROM Employee__Clearance_Not_Candidate_TOMATRON2486517031921723409__Employee__ID__WHERE_NOTstrftimefmt__INTEGER_ID__REFCURSOR__STRFTIMEFORMAT__DETERMINATE__FORTHWITH_SECs__ID__TOMATRON2486"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": "SELECT COUNT(DISTINCT ) FROM Employee__Clearance_Levels__Employees__Unclearance__Shipments__Planet__WHERE_Level__IsNotNULL__FOREIGNKey__isnull__PlanetID__employeeID__EMPLOYEE__isnull__remarks__planetId__EMPLOYEE__isnull__Level__Employee__EMPLOYEE__isnull__jobTitle__EMPLOY"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": "SELECT COUNT(T1.game_id2.title2 ) FROM (SELECT T2.title FROM game_player2.game AS T INNER JOIN game_player2.game AS T  ON T.Game_ID = T2.game_id ORDER BY T2.Title2 LIMIT 1) AS T INNER JOIN platforms2.platform AS T  ON T.Platform_ID = T1.game_id2.Platform_id ORDER BY COUNT_T2"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), CASTVAL_PATIENTLY_UNIQUE FROM gaming_player.game WHERE SUBSTR_INDEX_STARTS_WITH = '0123456789' GROUP BY CASE  ORDER BY CASE , STUFF LIMIT 200000000000000000000000000000"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": "SELECT T2.title , T1.Developer FROM gameplayer_allgamenames_priorORDERed_as_smallTASKTASKTASKTASKSWHERESUBSTRTOTOFSTRINGBETWEEN24457136890161950169460168469144660279555877623946"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "SELECT DISTINCT T2.title , T3.developer FROM game_player194005008716863000000.game AS T INNER JOIN game_player2626158851691280000001A3TASGONSITKN0A8T1P0GOTO4U92L1R4C1T"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": "SELECT CAST_INT201685744343095478188376107333 FROM game_playerWHEREplayer_idINEXTENSIONOFWARNERSBLOBSTOREDASNYERAZIZABIRLATABLEXFERRESULTSANDALTFORMATTERAMETHINGOROTDDIGNITEDGUNVIVOLTADECIMAR"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": "SELECT CASTT1.rank_of_the_year , SUM(CASE ) AS sum FROM (SELECT SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ), SUM(CASE ), CASE  FROM game_player1985038272556212WHEREWHEREgame_ID.Platform_name INNER JOIN platform1"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "SELECT DISTINCT T2.Platform_name FROM game_player.Player AS T INNER JOIN platform_game.platform AS T  ON T1.Player_ID = T2.Game_id ORDER BY T2.Platform_name LIMIT 200000000000000000000000000000000000000000000000"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": "SELECT DISTINCT T2.platform_name FROM (SELECT T1.platform_name , T2.market_district FROM game_player_2016_final13539578632463421WHEREplayer_ID.RANK_OF_THE_YEAR  INNER JOIN player_names_with_franchises_matching20161137160033"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": "SELECT DISTINCT T2.platform_name FROM game_player.player AS T INNER JOIN platform_id.platform AS T  ON T.Player_ID = T2.Platform_ID GROUP BY T2.platform_name ORDER BY SUMOF  DESC  LIMIT 1000000009036857941477637170666109948436"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": "SELECT DISTINCT T2.Platform_name FROM game_player.Player AS T INNER JOIN platform.Platform_details AS T  ON T2.Player_ID = T.Platform_id GROUP BY T2.Platform_name ORDER BY SUMIFSLAKEVIRGINALVALUE__PERCENTAGEOFRANKING LIMIT 10000000000000000000000000"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": "SELECT SUM(max_rank__year__rank__gmr__q27301549130382683000000__p53586240235506913323834983589713000416544154849363027256258"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": "SELECT DISTINCT T2.rank_of_the_year FROM player_votes.player AS T , games.game AS T WHERE T.Player_ID = 1 GROUP BY T1.Platform_name ORDER BY T2.minute_rank LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": "SELECT COUNT(T1.player_id ) FROM player_years_rankings_all_ranked_2018_36195743272576410000000282WHERE2018.rank INNER JOIN players_rankingstokers2018v22975625244300000001382"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": "SELECT COUNT(T1.player_id_number__int16__value2075293240286283210__group1_strs15001901369069861683159_1595413631988595384394712704838333"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.player_name FROM player_reports.player AS T , game_player.Player_ID AS T WHERE T.game_id = '65816983' ORDER BY T2.position_number LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": "SELECT DISTINCT T2.player_name FROM player_rankings_votes_sentences2017105396148100012330430653103783712583206720887490202722674584644551867116202"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": "SELECT DISTINCT T2.player_name FROM player_gameplayer10734998935316900000_asdfljkbvghzfhcdfwgjlc3D9M3FH5J7HU3ZLB5QG5WGALZRW9LZZLGAL9WZGXM0A1L2C4"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "SELECT DISTINCT T2.player_name , T1.position FROM player_info.player AS T INNER JOIN game_player.player AS T  ON T1.Player_ID = T2.Game_ID ORDER BY T2.Rank_of_the_year , T1.College LIMIT 1 OFFSET 0"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": "SELECT DISTINCT T2.player_name FROM player_matchups.player AS T , game_player.game AS T WHERE T1.title = 'Super Mario World' LIMIT 100000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "SELECT DISTINCT T2.player_name FROM game_player_details_t15348079096239_0000060973_16312302939_1222276957_3697106658_3495239198_2040929804_"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": "SELECT T1.developer FROM game_player.player AS T , game_player.game AS T WHERE T2.name = 'Auburn' GROUP BY T1.platform ORDER BY COUNTIFT LIMIT 10000000635897148630000000000000000000000000000000000"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": "SELECT T1.Name FROM game_player.player AS T , game_player.game AS T WHERE T.Player_name = 'Auburn' GROUP BY T2.title ORDER BY T2.Rank_of_the_year LIMIT 3456789903815670140000115877427829665280538346"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": "SELECT CASTINT FROM player.position WHERE COLUMN_NAME = 'Position' ORDER BY COUNTOFSTANDARDARIES_GUARD LIMIT 10000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": "SELECT AVG(T2.Rank_of_the_year_sold_mins2481507396100000000020416277232921410000000613174483838986940000024325579667823"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": "SELECT T2.title , T1.platform_name FROM player_data.game AS T INNER JOIN gameplayer.player AS T  ON T1.Player_ID = T2.Game_ID GROUP BY T2.Platform_id ORDER BY T2.Rank_of_the_year LIMIT 1000000000564961832583700218645634"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "SELECT DISTINCT T1.title , T2.platform_name FROM gameplayers.player AS T INNER JOIN games.game AS T  ON T1.Player_ID = T2.Game_ID ORDER BY T1.Rank_of_the_year LIMIT 1000000005786340791437149485656732049199"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "SELECT DISTINCT T2.title FROM game_player.game AS T INNER JOIN platform.platform_name AS T  ON T1.Game_ID = T2.Platform_id ORDER BY T.market_district LIMIT 10000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": "SELECT DISTINCT T2.title FROM game_player.player AS T INNER JOIN platform.platforms AS T  ON T1.Player_ID = T2.Platform_id ORDER BY T2.market_district LIMIT 10000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": "SELECT DISTINCT T2.title , T3.num_games FROM games_series_with_series_and_release_dates.game AS T , game_player.player_name AS p , player.player_id AS p  WHERE T.platform_id = '78574' ORDER BY p.Franchise , T1.title LIMIT 3000000000000000000"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "SELECT DISTINCT T2.title , COUNT(T1.game_id ), T1.series FROM game_player_reporting_table.game AS T INNER JOIN franchises_as_reporting_table.franchise AS T  ON T2.Franchise_ID = T3.Franchise_ID GROUP BY T2.series ORDER BY COUNToesperationFROMgameplayerreportingtable.gameASTABELS , franchises"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": "SELECT T1.title FROM game_player.game AS T , game_player.game AS T INNER JOIN platforms_player_rankings.series AS T  ON T1.Player_ID = T2.Game_ID ORDER BY T3.total LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "SELECT T1.title FROM game_player.game AS T , game.title WHERE T.game_id = 308 ORDER BY T1.rank_of_the_year LIMIT 1945662705821381550000000000000000000000000000000000000000"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": "SELECT DISTINCT T2.title FROM game_player.player AS T INNER JOIN franchise_all_franchises.game AS T  ON T1.Player_ID = T2.Game_ID GROUP BY T2.title ORDER BY COUNTDISTINCTT2.total_units_sold_MILLIONS LIMIT 200000000000000000000000000"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": "SELECT T1.title FROM game_player.game AS T INNER JOIN franchise__name2046759863004130000_onT20719609135726580000_ONTOTAL29874803006853270000__series_title2604219120"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": "SELECT DISTINCT T2.player_name FROM player_game_info_as_objects_10945376088388000000s_with_no_player_names_AST38GXC97D727MU28WC742626H389AQ25Z9N0186F50934952"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": "SELECT DISTINCT T2.player_name FROM player_profile_all_registration__v4.player AS T INNER JOIN game_player__v10.player AS T  ON T1.Player_ID = T2.Game_ID ORDER BY T2.position , T2.units_sold_millions LIMIT 10 OFFSET 18000000000940000000"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": "SELECT DISTINCT T2.title FROM player_info.game AS T INNER JOIN gameplayer.game AS T  ON T1.Game_ID = T2.Game_id GROUP BY T2.platform_name ORDER BY T2.Player_name__string_overriding_nulls__strftime_to_date_and_time LIMIT 30 OFFSET 2018040614570910"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": "SELECT DISTINCT T1.title FROM player_gameplayer126429685062728380120000011940536193668588932322835942379725515908077867474763454318366"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": "SELECT T1.title FROM game_player.game AS T , game.title WHERE T1.title = 'Play as a franchise' GROUP BY T2.franchise ORDER BY COUNT_DISTINCT_T1.title LIMIT 300000000000000000000000000000000000000000000000"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "SELECT T1.title FROM game_player.platform AS T INNER JOIN franchise_details_by_gameplayer.franchise AS T  ON T1.Player_ID = T2.Franchise ORDER BY T2.franchise LIMIT 0 OFFSET 0;"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": "SELECT T1.title FROM game_player.game AS T INNER JOIN player.Rank_of_the_year AS T  ON T1.Player_ID = T2.Game_ID ORDER BY T2.Position LIMIT 10 OFFSET 0;"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": "SELECT DISTINCT T2.title FROM player_position_ratings.player AS T INNER JOIN games_player_rating.game AS T  ON T1.Player_ID = T2.Game_ID ORDER BY T1.Position LIMIT 10 OFFSET 30547396127058100511855617077666828420022"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": "SELECT DISTINCT T1.name FROM press_series_descendingorder2018TASK2456197TASK2438341TASK4839116TASK4251223TASK551617TASK562252TASK4095277TASK690682TASK"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": "SELECT DISTINCT T1.name FROM press_series_reporting_2018_prs24791653_asdfasfbaasdASDAFBHALFABAHALFAFSAHALALHALFAFHAALHALAFALHALAFHLASHHALHALALHOLLHOLHHOHLHHOLLHLHLHLLHOLHLHOLLHLLHHOLL"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": "SELECT DISTINCT T2.name FROM press.book AS T INNER JOIN author_press_sales.publisher AS T  ON T1.Press_ID = T2.Book_ID ORDER BY SUM_Sale_Amount LIMIT 15 OFFSET 100000000006094380407227048382646027221152"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": "SELECT DISTINCT T2.name FROM book_series.book AS T INNER JOIN press.press AS T  ON T2.Press_ID = T.Press_ID ORDER BY T.Release_date LIMIT 100000000534876500000000000000000000000000000000000000"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "SELECT AVG(SUMIFS.value2341987680634361338513063136178876983285135081911186810973989983632910800169805423574168262"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": "SELECT CAST \n    FROM AVG.sales_amount AS S , max_years_profit__2017_365_asstrtanted__MATCHED_VALUE__2015__8___9__FROM_press__WHERE_PUBLISHING__WEB__name__containsIFRAME_SUBSCRIPTION_URL_PATTERN_FOR_NAME_WITH_T"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": "SELECT T2.name FROM press_sales_monthly_billion108674500329113000000Sale_Amounts0.T1 AS T , press_ID2.PUSH_ID AS P , SUMTASKAS1749626276089900000ASAREALASARS052339"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": "SELECT T1.name FROM press_details.publisher AS T INNER JOIN book_details.book AS T  ON T1.Book_ID = T2.Book_ID GROUP BY T2.Author_ID ORDER BY SUM_monthly_profit LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": "SELECT T2.Name FROM press_sales_monthly_billion108994576063232000000AST283453085605911D33586962C5849GU31869A3870E2206B8866024539011"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "SELECT DISTINCT T1.name FROM presss.book AS T INNER JOIN publishers.publisher AS T  ON T.Book_ID = T2.Book_ID ORDER BY SUMOFTUEKI_PAGES_INDIRECT LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "SELECT COUNT(T2.Name__c.Author_ID195856145186220761722221348741472176318937066653587953870458725037699169699222465397881"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": "SELECT COUNT(T2.Name__c.T1_Gender__c01194753_21638062_1310820342105620_b44A73668425C7847_34393251_9542505__93134742_8882"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "SELECT SUM(CASE ) AS avg , strftime FROM author.Name AS T WHERE gender = 'M' GROUP BY T2.gender ORDER BY AVGTOTAL.avg_age , strftimedesc  DESC LIMIT 100000000000000000000000000000000000000000000000"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": "SELECT T1.Gender , CASTT2.Age , AVG(CASTT2.Age__30__1986__2014_18714558624183078590__1980s__77329506383656679786015__201504222213"
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": "SELECT DISTINCT T1.Name FROM author_gender_pairs.author AS T INNER JOIN publication_types.book AS T  ON T2.Book_ID = T1.Book_ID GROUP BY T1.Gender ORDER BY MAX_AGE  DESC LIMIT 30 OFFSET 60000000000984011513185716925445345"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": "SELECT DISTINCT T1.Name FROM author_gender_stats.book AS T INNER JOIN authors_age_gender_stats.author AS T  ON T1.Author_ID = T2.author_id ORDER BY T1.Gender , T3.Age LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": "SELECT DISTINCT T1.title FROM book_series_listing2006b_9500741368900000000_title_ORDEREDBYRELEASEDATEFROMbook_series_listing2006b_950074136890000000_DESCENDINGWHERERETURNCODES.ReturnsBETWEEN \n   "
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": "SELECT DISTINCT T1.title FROM book_series_data.book AS T INNER JOIN publication_date_series_data.release AS T  ON T1.Book_ID = T2.Publisher ORDER BY T2.release_date LIMIT 10000000000000000000000000000000000000000000"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": "SELECT SUM(SUMIFS.value12534387046437616135922436222671842943106537055086686785000344413131026704269599623475118113"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": "SELECT COUNT(T2.Book_ID ), T1.book_series FROM Book_series_release_dates_sales_amounts_as_price_changes_as_prices_as_date_changes_as_price_changes_as_date_changes_as_prices_as_sale_amounts_as_price_changes_as_sales_amounts_as_release_dates_as_price_changes_as"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": "SELECT DISTINCT T1.title , T2.publish_date FROM booklisting__series_title_release_dates_by_author_ID.book AS T INNER JOIN title_listing_series_title_release_dates_by_author_ID.T ON T.Book_ID = T2.Bib_ID ORDER BY T3.publish_date LIMIT 5 OFFSET 0;"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": "SELECT DISTINCT T1.title , T2.release_date FROM book_series.book AS T INNER JOIN press_as_series.press AS T  ON T1.Press_ID = T2.Press_ID ORDER BY T.Sale_Amount LIMIT 50000000000000000000000000000000000000000"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": "SELECT DISTINCT T2.title FROM presss.book AS T INNER JOIN publishers.series AS T  ON T.press_id = T2.Press_ID ORDER BY T2.year , T2.month LIMIT 1040 OFFSET 500000000003186975714877103873656772122691"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": "SELECT DISTINCT T2.title FROM bookseries.book AS T INNER JOIN (SELECT * FROM T3.book AS T WHERE T3.sale_amount > 1000 LIMIT 2) AS T  ON T1.title = T3.title ORDER BY T2.publisher_name , T1.release_date LIMIT 500 OFFSET 215486821901700"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "SELECT DISTINCT T1.name FROM book_series.author AS T INNER JOIN press.book AS T  ON T1.Author_ID = T2.Press_ID ORDER BY T.Title.localeTextlikeIgnoreCase , T.Series.localtext LIMIT 100000000000000000000000000000000000000000"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": "SELECT DISTINCT T1.Name FROM book_series.book AS T INNER JOIN author_series.author AS T  ON T1.Book_ID = T2.Book_ID GROUP BY T3.Author_ID ORDER BY T2.Gender LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": "SELECT DISTINCT T1.Name , T2.Age FROM author_recorded_authors20232826950742000000__book__as_stratum21_book130_sales_amount_001TGDASFABXRWQZLONNZR6RVN0WQL3MU2Q9LZ2B5Y7"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": "SELECT DISTINCT T2.Name FROM book_series.book AS T INNER JOIN author.name ON T1.Book_ID = T2.Book_ID ORDER BY COUNTIFT LIMIT 1500000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": "SELECT DISTINCT T1.Name FROM author_books_title_release_date_by_PRIMARY_KEY.book AS T INNER JOIN title_author_info_table.T1 AS T  ON T1.Book_ID = T2.ISBN ORDER BY COUNTDISTINCTT2.Sales_Amount , COUNTDISTINCTT2.Release_date LIMIT 100000000000000000"
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": "SELECT DISTINCT T2.name FROM press.book AS T INNER JOIN author_info_table.author AS T  ON T1.Author_ID = T2.Author_ID GROUP BY T3.Name ORDER BY COUNTIFTLIEBAND314608352617226739355WHERE LIMIT 118547038555222314100"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": "SELECT T2.title , T1.name , T2.publisher FROM (SELECT T1.title , T2.name , SUM(CASE ) AS total_sales FROM press.book WHERE release_date > '2024-11-30' GROUP BY T2.author ORDER BY SUMmariedummary.total_sales LIMIT 3) AS t ORDER BY count.total_sales LIMIT 300000"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": "SELECT DISTINCT T1.title , T2.name , T1.press_name FROM book_sales_release_dates_prices_by_author_id.book AS T INNER JOIN press_names_authors.T2 AS T  ON T1.Press_ID = T2.PRIMARY_KEY ORDER BY T1.Price_billion , T1.Year_Profits_billion LIMIT 3000"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": "SELECT DISTINCT T1.name , SUM(T2.sale_amount__real__0000000000436589025857_4265463045545550312491_815093831961047805755_13017960202"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": "SELECT DISTINCT T1.name , SUM(T2.sale_amount__real__0000000000534869030000L__128372197064888213699L__95063636567404279456L__1404821363"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": "SELECT DISTINCT T2.name FROM book_series_data.book AS T INNER JOIN publishers_as_billion_sales.press AS T  ON T.Book_ID =  T1.Press_ID ORDER BY total_books__value , publisher_names.title , SUM_PRICE LIMIT 20000 OFFSET 29000000000000000000"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": "SELECT DISTINCT T2.name , T2.sales FROM press_events_history.press AS T INNER JOIN book_series_history.book AS T  ON T2.Press_ID = T.Press_ID ORDER BY SUMOUNGEPVLZJTZQHCAXG6MURL81RW4 , SUMOUNGEPGU98JMULKY7I7R3A20D5"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "SELECT T1.Name FROM book_series_2018_53T12AS47039916005000000Z_book_IDINNERJOINauthor_201110_T1100627T0032ZT20180613_sale_amountWHERETOP6000.Name INNER JOIN author_20"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer": "SELECT T1.Name FROM book_series_book_author_relationship.book AS T , T2.name AS T INNER JOIN authors.author AS T  ON T.Author_ID = T2.Author_ID ORDER BY T1.Sale_Amount LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": "SELECT T1.name , T2.gender FROM book_series_author_ticketed_press_inventory_as_T3.PRIMARY AS T LEFT JOIN authors_with_PRSales_billion_months_at_0358476261589_TASK12132_ONLYASUmberBLOCK_FROMMYSQL_ASTG4114942"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": "SELECT T1.name , T2.gender FROM book_series_data.books AS T INNER JOIN authors_with_press.author AS T  ON T1.Author_ID = T2.author_id ORDER BY COUNTIFTINAULT_LABELS.FULLNAME LIMIT 200001945738761477518677500428611646"
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": "SELECT DISTINCT T1.Name FROM author_book_published_series__title__release_date_table_236095874230523609WHERETHEREWASNOBODYFROMAUTHOR_IDANDPRESS_ID__FORNAMES__ALTERNATIVE_NAMECUSTOMERNameFORITEMATTACHMENTIDASINTEXTABBREVIDENOTE"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": "SELECT DISTINCT T2.name FROM book_series.book AS T INNER JOIN author_publications.author AS T  ON T1.Book_ID = T2.Book_ID GROUP BY T1.Author_ID ORDER BY COUNT_INPUTS.VALUE_LOWERING LIMIT 200000000000000000000000000000000000"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": "SELECT T2.Name , CAST_INT2403918966702013050000000000 FROM book_sales.book AS T INNER JOIN press_profit_history_records.press AS T  ON T1.Press_ID = T2.Press_ID GROUP BY T1.Book_Series ORDER BY SUM_Profit__C__Billion__C__"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": "SELECT DISTINCT T1.name , T2.year FROM press_book_sale_sales_total.press AS T INNER JOIN book_series_sales_total.book AS T  ON T1.Press_ID = T2.Title ORDER BY COUNTTIMESTAMPSINSETTRIMANDHALAREXPLAINEDGETINGOVERTWENTY30WHERET1.title__containstext__ LIMIT "
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(T2.author_name ) FROM Documents.document_id AS T , Authors.other_details AS T INNER JOIN Staff_Roles.staff_role_description AS T  ON T.staff_role_code = T.staff_role_code ORDER BY COUNToftheAuthors.author_name LIMIT 500001004807623212914116"
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": "SELECT DISTINCT T1.author_name FROM Documents__staff_role_codes.T1 AS T , Authors_staff_roles.T2 AS T INNER JOIN employees.authors AS T  ON T1.employee_id = T2.staff_id ORDER BY T2.first_name , T2.last_name LIMIT 10000000000000000000"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": "SELECT DISTINCT T2.other_details FROM Documents1.documents AS T  INNER JOIN Authors2.authors AS T  ON T1.author_name = T2.author_name ORDER BY T1.document_name , T3.other_details LIMIT 10 OFFSET 14756891846198517389060845368634"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": "SELECT DISTINCT T2.other_details FROM Documents_Addison_Denesik_9105432678869660000032WHERETRIMTERS_AND_ORIGINATES_REGEXP_LIKETRIM_FILTERED_BY_CARDINALGUIDE_ADDONIDES_DENSESIK_4819"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": "SELECT COUNT(*) FROM DocumentsWHEREauthor_name1.document_description25300827229446628222 AS T WHERE document_id = (SELECT MAX(document_id ) FROM DocumentsWHEREauthor_name1.document_description25300827229446628222) LIMIT 121486721483686"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "SELECT DISTINCT T2.author_name FROM Documents_Staff_details.documents AS T INNER JOIN authors_staff_roles.T AS T  ON T1.STAFF_ID = T2.staff_id ORDER BY T2.process_outcome_description LIMIT 1 OFFSET 4000697862559187340485122114"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": "SELECT DISTINCT T2.author_name FROM Documents1.document_description AS T INNER JOIN authors_details2.staff AS T  ON T1.document_id = T2.staff_id ORDER BY T2.staff_id LIMIT 1;"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "SELECT COUNT(DISTINCT ) FROM DocumentsWHEREauthor_name__containsstr__947651300228943000000__restaurants_eref3169414853913000000__sustainability_report__restaurants_eref6491003478280000000__"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": "SELECT T1.document_name , T2.other_details FROM Documents1.T1 AS T INNER JOIN Author_Roles1.T AS T  ON T1.author_id = T2.staff_id ORDER BY T2.author_name LIMIT 1000000000000000000000000000000000000000"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": "SELECT T2.document_id , T1.other_details FROM Documents__to_staff_names_and_positions_as_author_names_and_job_details__within_30days_of_first_day_and_position_of_administrative_position_AS_AuthorName_AND_POSITION__WHERE_authors_name_as_string__AND_document_name__FOR_T2_IN"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": "SELECT DISTINCT T2.author_name , T1.document_description FROM Documents.document_id AS T INNER JOIN Authors.other_details AS T  ON T1.author_name = T2.author_name ORDER BY T1.document_name LIMIT 100000000000000000000000000000000000000"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": "SELECT DISTINCT T2.author_name , COUNT(T1.document_id ) FROM Documents_Staff_roles_Authors_Staff_details_FULLTEXTTITLES.document AS T , T1.authors AS T , T1.process_outcomes_codes AS T , T1.process_status_code AS T WHERE T1.document_id = 1 GROUP BY T2.author_name ORDER BY COUNT"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "SELECT DISTINCT T2.author_name FROM Documents__involving_authors_of_staff_roles_and_responsibilities_as_staff_roles_REGEXP__WHERE_document_description_matches__string_to_date_str_replacement_str_ends_with_T2.DOCUMENT_ID LIMIT 1;"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": "SELECT T1.other_details FROM Documents123456789101110121314151617181920122153213943742325258999150625782855389597277525493123545"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "SELECT COUNT(T1.process_outcome_code ) FROM Process_Outcomes_by_businesses_with_description_staff_details_as_other_details_tbl_name268047930430720568383720637401202789577122697161769638621"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": "SELECT DISTINCT T2.process_outcome_code , T2.document_id FROM Documents_Status_Staff_Roles.process_status AS T INNER JOIN Process_Outcomes_Status_Staff_Roles.staff_role_codes AS T  ON T.STAFF_ROLE_CODE = T2.document_name ORDER BY T2.document_outcome_code LIMIT 10000000"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": "SELECT T1.process_outcome_description FROM Process_Status.process AS T INNER JOIN Documents.document_id AS T  ON T1.process_status_code = T2.document_id ORDER BY T1.process_status_code LIMIT 1000000000000000000000000000000000000000000"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "SELECT COUNT(T1.process_outcome_code ) FROM Process_Outcomes_Status_Process_Staff_Roles_and_Authors_tbl_as_tb2876253016496796WHEREprocess_status_code__facets_name__containsstrerepresentsastextinformatichistorytextinFORMATTEDTEXTSTRINGDATA__tb28762530164"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": "SELECT DISTINCT T1.process_outcome_description , T2.staff_role_description FROM Process_Outcomes_Staff_Roles_Staff_roles_tbl_068367946761760590000250167980101786944827277558414608525"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "SELECT DISTINCT T2.process_outcome_description FROM Process_Outcomes.Process_Outcome AS T INNER JOIN Documents.document_name AS T  ON T.document_id = DISTINCT  LIMIT 1745583009368940000000000120397887819999228024336"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": "SELECT COUNT(process_status_code ) FROM Process_Status__process_outcomes_descendant_by_group_keyWHEREprocess_outcome_description__startswith.description AS T , process_status_code_column_name_950912346381957289920000761357857077686414811822"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": "SELECT DISTINCT T1.process_outcome_description , T2.staff_role_description FROM Process_Outcomes.process_outcome AS T INNER JOIN Documents.document_name ON T1.process_outcome_code = documents.document_id GROUP BY T1.process_outcome_code ORDER BY COUNTAINERUBTAB_NODES.total_job_staff_ID LIMIT 100000"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": "SELECT DISTINCT T2.process_status_description FROM Documents_outcome_process_status_reports_and_responses_staff_details_to_staff_id_from_process_status_codes_and_codes_concerned_with_authors_as_source_string_in_text_format128721040640359814862563"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "SELECT COUNT(staff_id.staff_id ) FROM Staff_DetailsWHEREStaff_Role_description__to_string__startswith_REGEXP_REPLACEMENT__ANDdocument_name__endswith_REGEXP_REPLACEMENT__ANDprocess_status_code__eq_GQAZKU2I3G1ZFG8U981645969739012"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": "SELECT DISTINCT T1.staff_id , T2.other_details FROM Employee_Staff_Roles_Details_Faculty_Staff_Roles__Details_with_Faculty_details_T1_in_Staff_details_T2_as_other_details_WHERESTERNITY_ID_2004_GUARANTEE__T1.name INNER JOIN Documents_T3"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": "SELECT DISTINCT T2.other_details FROM Documents_Staff_roles.staff AS T INNER JOIN Author_Staff_Roles.T AS T  ON T1.STAFF_ROLE_CODE = T2.process_outcome_code ORDER BY T3.author_name LIMIT 10000000000000000000000000000"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": "SELECT COUNT(*) FROM Staff_Roles.staff AS T , Process_Outcome.process_outcome_code AS A , Process_Status.process_status_description AS B WHERE T.staff_role_description = 'Staff with the role of Business Manager' GROUP BY T.staff_role_code ORDER BY COUNT.STAFF_ROLES LIMIT 1000000000000000000"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": "SELECT T1.staff_role_description FROM Process_Roles_Details__Staff_roles_as_codes_descriptions_v2014102893876_68859437923600_397283599831089_c35f4950d93106_table_32011"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": "SELECT DISTINCT T2.description FROM Documents.document_id AS T , Process_Outcomes.process_outcome_code AS T INNER JOIN Staff_Roles.staff_role_details AS T  ON T.staff_role_description = T2.process_outcome_description ORDER BY T3.process_outcome_description LIMIT 100000000000000000000"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": "SELECT COUNT(DISTINCT ) FROM DocumentsWHEREprocess_status_code_description_table.process_status_code INNER JOIN Process_Status__process_outcome_codes_texts301657822523534020394ONprocess_outcomes._id AS T \n                    AS T  ON t.document_id = process_outcome_codes_table.process_outcome"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": "SELECT T1.process_outcome_code FROM Documents.document_id AS T , Process_Outcomes.process_outcome_description AS T , Authors.other_details AS T WHERE T.document_name = 'Process' INNER JOIN process_status.process_status_description AS T  ON T2.process_status_code = T1.process_status_code ORDER BY T1.process_outcome_id LIMIT 10"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": "SELECT T3.document_id FROM Documents101764942659201209820866220271146790241238409735383828901380048016754470155605820750886252"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": "SELECT T2.process_outcome_code FROM Documents.document_id AS T , Process_Outcomes.process_outcome_description AS T INNER JOIN Process_Status.process_status_description AS T  ON T1.process_status_code = T2.process_status_code GROUP BY T2.process_outcome_code ORDER BY COUNT.documents.COUNT__NOT__null LIMIT 1000000000"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": "SELECT DISTINCT T2.process_outcome_description , T2.process_status_description FROM documents_reports.documents AS T INNER JOIN Process_Outcomes__to_status_and_status_description_codes_table29887304661978584591_128521477895054080465_as_string_2"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "SELECT DISTINCT T1.process_outcome_description FROM Documents_Roles_Staff_Roles_Staff_details_Role_Code_To_Process_Outcome_code_Table_INNER_JOINProcess_Status_Listing_On_Document_ID_On_Staff_staff_id_INTEGER_AND_PERMANENTLY_DEleted_ON_BUSINESS_ID_INTEGER"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": "SELECT DISTINCT T2.process_outcome_code , COUNT(T2.document_id ) FROM Documents_Process_Outcomes_Staff_Roles_Details_to_Staff_details_Including_Employee_Nomination__Incomplete_Summary_Billings__1990705_to_1864175239_WHO_TREATED_SUBJECTS_INCLU"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": "SELECT COUNT(T2.document_id ) FROM Documents1.staff AS T INNER JOIN documents2.process AS T  ON T1.author_name = T2.author_name GROUP BY T2.process_outcome_code ORDER BY SUM_STAGED_DESCENDANTS_PERCENTAGE_OF_ALL_CONTRIBUTORS LIMIT 0 OFFSET 300000000000"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": "SELECT DISTINCT T2.staff_id , COUNT(T1.process_outcome_code ) FROM Documents_Staff_Roles_Staff_details_Staff__Details__documents_INTEGER_JOBSTOCKS_INVENTORY_NODE_IDS_3760584590344113027000135125010"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": "SELECT DISTINCT T2.staff_role_code , COUNT(T3.document_id ) FROM Process_Outcomes_Staff_Roles_Staff_roles_by_user_id_seq19843755602018024709_innerjoinT198470135721467709_innerjoinT198470"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": "SELECT COUNT(T1.staff_role_code__INT_ADDRESS2046752193181361000001__INTEGER112649237902901250001__IDENTITY17486863911047214277_12039388111"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.agency_details__name__first_name__last_name__job_title__position__sic_code__agency_id__country__city__state__zip_postal_code__email__address"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "SELECT COUNT(T1.agency_id__value_counts_058467229_013824366_008880094_026361941__911727"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": "SELECT DISTINCT T2.agency_id , T3.staff_details FROM Staffs_in_Meetings.T1 AS T INNER JOIN Agencies_in_Staff.T2 AS T  ON T1.staff_id = T2."
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": "SELECT T1.agency_details FROM Agencies_Details_Members__Codes_Of_Staffs__Faculty_Level_Staffs__Programming_Skills_Without_Learning_Gaps___groupingTogether_"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": "SELECT COUNT(client_id_list.client_id_list.client_id_list138405692374232000000_158217723898093683616"
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), MAX(CASE ), MIN(CASE ), CASE  FROM clients__invoices__grouping_by_agency_details__count_by_date_time_group_by_dates_within_the_"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": "SELECT T1.client_id , T2.client_details FROM Clients_clients1937854602866100000020ASINA041003584581123"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": "SELECT T1.client_id , T2.details FROM Staff_in_Meetings.invoice AS T INNER JOIN Clients.client_details AS T  ON T1.staff_id = T2.client_id GROUP BY T3.client_"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": "SELECT DISTINCT T2.agency_details FROM (SELECT DISTINCT T1.agency_details FROM Staff_in_Meetings__staff_id_to_client_id.STUDENTS AS T INNER JOIN Client_details"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "SELECT T1.client_details FROM (SELECT DISTINCT T2.agency_id , SUM(T2.sic_code__text__contains_all_chars__contains_all_words__replace_all_with_periods__as_grouping"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": "SELECT DISTINCT T2.agency_id , T2.staff_details FROM (SELECT T1.agency_id , SUM(T1.client_details.billable_yn__cust_amount__cust_details"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": "SELECT DISTINCT T2.agency_id , T2.staff_details FROM (SELECT DISTINCT T1.agency_id , T3.client_details FROM (SELECT DISTINCT T1.agency_"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": "SELECT DISTINCT T1.agency_details FROM (SELECT DISTINCT T1.client_details , SUM(T3.billable_yn__cust_account__i.staff_id__int_value__int_value__len"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": "SELECT DISTINCT T1.agency_details FROM (SELECT DISTINCT t1.agency_id , t1.staff_details FROM Staff_in_Meetings.Invoice AS T INNER JOIN Agencies."
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "SELECT T1.agency_details FROM clients.client AS T INNER JOIN agencies.staff AS T  ON T.client_id = T.agency_id ORDER BY T2.staff_name , T2.staff_details LIMIT 1"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": "SELECT T1.agency_details FROM Clients_Details_Projects_With_Details_Agents_Clients_ID_T32689058717450000000__detail_mac"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": "SELECT T2.client_details FROM (SELECT DISTINCT T1.client_id FROM Staffs_agents_invoices_by_staff_id_as_string_only_ordering_AS_UNIQUEWHEREID__ST3"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "SELECT DISTINCT T2.client_details FROM (SELECT CASTT1.client_details FROM clients.Client AS T INNER JOIN meetings.Meeting AS T  ON T.client_id = CASTT1.client_"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "SELECT T1.sic_code , COUNT(T2.client_id__cust_name__icu_text__icu_int_string__icu_group__icu_symbol__icu_order__icu_first_initial"
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "SELECT T1.client_details FROM (SELECT DISTINCT T2.sic_code , SUM(CASE ) AS sum FROM Agencies.staff AS T INNER JOIN clients.client_id AS T  ON T.staff_id = 'CLIENT"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "SELECT DISTINCT T2.client_id , T1.sic_code FROM Meetings_detail_client_details_summary_all_staff_in_Meetings__INVISIBLE__AS_DISTINCT__WHERE_D"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": "SELECT DISTINCT T2.client_details FROM Invoices.invoice_details AS T INNER JOIN clients_details.client_id AS T  ON T1.staff_id = T2.client_id GROUP BY T2."
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": "SELECT T1.agency_id , T2.client_details FROM Agencies_clients_by_staff_id_and_sic_code.STUFF AS T INNER JOIN Invoices.invoice_details ON T1"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": "SELECT DISTINCT T2.agency_details FROM StaffSicCodeClientServiceStaffsInMeetingsT1_AS_T3_AS_T4_INVOICEIDsIntoT5_AS"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": "SELECT T1.agency_id FROM clients_listing__agencies_summary_no_clients_2015_12345678_8914_Aggs_TITLE_No._NO AS A , STUDI"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": "SELECT T1.agency_details FROM Agencies_no_clients10937854213622810000033976WHERESTAGENCYIDNOTINOCLIENT"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(SUM_VALUE.invoice_date_time__HAVING__custodian_staff_details__client_id_ref__STAFF_ID__billable_yn__other_details__START_"
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(IIFNULLAWAYFROMinvoceselect.invoice_details__isnull__c01862946781374535380__C14U67716"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": "SELECT DISTINCT T2.client_details , strftime_format_expression.substr_value_within_periods_and_groupings FROM (SELECT CASTVAL_DATE_TIMESTAMPTZ_REPLACEASINT"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": "SELECT DISTINCT T2.invoice_details FROM Invoices_billing_detailing1267085349860300019_TOKER_DETAILS_INVO"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": "SELECT DISTINCT T2.client_id , COUNT(T1.invoice_details.invoice_id ) FROM payments_billable_yn_and_contracts.staff AS T , Staff_in_Meetings"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": "SELECT T1.client_details FROM (SELECT DISTINCT T2.client_details , COUNT(T2.invoice_id ) AS total FROM (SELECT T3.invoice_details , SUBSTR_STRING_INDEX_STARTS_FROM_NEW"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": "SELECT DISTINCT T2.client_id , T3.other_details FROM (SELECT DISTINCT T1.client_id , T1.staff_details FROM invoices__invoice_details__records_table__meeting_"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": "SELECT DISTINCT T2.client_details FROM (SELECT COUNT(T1.invoice_id ), T2.staff_details FROM Meetings_invoices__customers.STAFF AS T INNER JOIN"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": "SELECT DISTINCT T1.client_id FROM Clients_Invoice_Staff_ClientTicketTARGETS1967304805528704100WHEREClients.start_"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "SELECT DISTINCT T2.client_id FROM Payments_invoice_payment_history.invoice AS T INNER JOIN clients_with_invoices.staff AS T  ON T1.staff_id = T2.client_"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": "SELECT DISTINCT T2.invoice_status , COUNT(T1.staff_details.client_id_code ) FROM Invoices_detail_reporting_grouping_trial386425906"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": "SELECT SUM(invoice_details.invoice_status__code__1012435893730650__status__value__details__time__payment_id_128401209049"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(T2.payment_details.outcome__code__intvalue__string_to_binary_16073850918496317730028"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "SELECT SUM(invoice_status__isnull_or_empty__value__max__length__length__sort__reverse__last__grouping_by_first__grouping_by_first__sorted__order_by_grouping_by_first___"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": "SELECT DISTINCT T2.invoice_status , T3.client_details FROM Meetings__recurring_billable_events_with_staff_and_agencies_with_staff"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": "SELECT DISTINCT T1.invoice_status , T2.client_details FROM payments_details_sic_source.Invoices AS T INNER JOIN Staff_in_MeetingsT"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": "SELECT DISTINCT T2.meeting_type , T3.details FROM ndash.staff AS T INNER JOIN meetings_details_by_staff_idT1ONT2.staff_idT1 ON T.staff_id = T1."
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": "SELECT DISTINCT T2.type , T3.other_details FROM (SELECT DISTINCT T1.type , T3.other_details FROM Staff_in_Meetings.STAFF AS T INNER JOIN Meetings.other_details ON T1."
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": "SELECT DISTINCT T2.outcome , T1.purpose FROM (SELECT DISTINCT CASE \n        FROM Invoices__invoice_details__client_details___staff__details_30947860_05703012"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": "SELECT DISTINCT T2.outcome , T1.purpose FROM (SELECT DISTINCT CASE \n        FROM (SELECT T3.invoice_details FROM Invoices.client AS T , Invoices.staff AS T INNER JOIN meeting_outcomes"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "SELECT DISTINCT T2.payment_id , T1.invoice_details FROM payments_working.STAFF AS T INNER JOIN INVOICE_STATUS_SETTINGS_INVESTIGATIONS_FOR_"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": "SELECT T1.payment_id , T2.payment_details FROM Invoices.Invoice AS T INNER JOIN Payments.Payment AS T  ON T.invoice_id = T.Invoice_id ORDER BY T.In"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": "SELECT T1.invoice_id , T2.payment_details FROM Payments_audit.invoices AS T INNER JOIN staff_in_meetings.staff AS T  ON T.staff_id = T2.staff_id"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": "SELECT DISTINCT T2.invoice_id , T2.payment_status FROM meetings.Invoice AS T INNER JOIN Staff_in_Meetings.Staff AS T  ON T2.client_id = T1"
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": "SELECT COUNT(DISTINCTpayment_details.payment_id__r.payment_details_code__c__id__f3260518749758060950000001964_6610"
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": "SELECT COUNT(payment_id__2018_34657597.total_amount_paid__2018_34657267.payment__2018_34679053__2018"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": "SELECT DISTINCT T2.payment_id , T1.invoice_id FROM payments_listing.invoices AS T INNER JOIN staff_in_meetings.staff AS T  ON T.staff_id = T1."
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "SELECT DISTINCT T2.payment_id , T3.invoice_details FROM (SELECT T1.client_id , SUM(T2.amount_paid__gteeAmt_ ) AS total , SUM("
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": "SELECT DISTINCT T2.invoice_details FROM Payments_billable_with_staff_details_details1003768495678970460000000T0"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": "SELECT T1.invoice_id , T2.payment_details FROM Payment_invoices_set16973401852266499405300399935"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": "SELECT DISTINCT T2.invoice_id , COUNT(T1.payment_details.amount_paid_to_client_id_str__int__nulls_of_502438396757"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "SELECT SUM(suma.payment_details__billable_yn__payment__amount__currency__amount__paid__description__group__client_id__group__start_date_time__end_date_time__purpose_of_meeting__"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": "SELECT DISTINCT T2.invoice_details FROM (SELECT MAX(T3.invoice_details.numberofpayments__value__int64__custid__value__first_line__first"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": "SELECT DISTINCT T2.invoice_id , T3.payment_details FROM Staff_in_Meetings1.Invoices AS T INNER JOIN Payments1.Invoice AS T  ON T1"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "SELECT COUNT(T2.staff_id160784375430036683922416221358851900150113966988258"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ), CASE  FROM StaffsWHEREFirstName__c.first_name INNER JOIN clients_by_last_name_within_4502963618_410058682750"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": "SELECT DISTINCT T2.agency_id , COUNT(T1.client_id ) FROM Staff_in_Meetings.staff AS T INNER JOIN Agencies.agency_details AS T  ON T1.staff_"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "SELECT DISTINCT T2.agency_id , COUNT(T1.invoice_id.client_id ) FROM Invoices_sic_staff_details16923370811549529_0"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": "SELECT DISTINCT T2.agency_id , T3.client_details FROM Staff_in_Meetings_to_Agencies_by_Staff_ids_T2_TO_T1289677"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": "SELECT DISTINCT T2.agency_id , T3.client_details FROM Invoices.invoice AS T INNER JOIN Staff_in_Meetings.staff AS T  ON INVOICE.STAFF_ID = T."
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": "SELECT CAST.SUM1234567890AS FROM ASamtmtntn33666784834845760507508133027169"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "SELECT SUM(IIF.invoice_outcome ), SUM(IIF.meeting_outcome ), COUNT(CASE ) FROM Meetings_outcomes_summary2014.Meetings AS T INNER JOIN Staff_in_Meetings."
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": "SELECT DISTINCT T2.client_id , COUNT(T1.invoice_details.billable_yn_company_name__rpt_staff_id_3956970400834503_"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": "SELECT SUM(DISTINCT ), COUNT(DISTINCT ), CASTASKAR.client_details FROM (SELECT T2.client_id , COUNT(T1.staff_id_to_staff_details__firstname__icn_"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": "SELECT DISTINCT T2.meeting_type , COUNT(T1.invoice_details.client_id_str_to_number_str_join_by_first_letter_of_client_name_sep_comma ) FROM Me"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "SELECT SUM(IIF.meeting_type__name__i18n.value_of__content__list__i2093164571__staff_in_Meetings__id__string_like_INTERSECT__"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": "SELECT DISTINCT T2.meeting_id , T3.invoice_details FROM Meetings__records_table_10569487082843_as_string"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": "SELECT DISTINCT T2.meeting_id , T3.invoice_details FROM MeetingsT1.staff AS T INNER JOIN InvoicesT1.staff AS T  ON T1."
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": "SELECT DISTINCT T2.meeting_id , COUNT(T1.invoice_id__fk_client_id__group_by_staff_id__avg_invoice__invoice_details__client_details__SUM_SUM"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": "SELECT SUM(count1.staff_details__name__c.first_name__icontains_string_to_lower_v2536780982194_56278368974_4"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": "SELECT T1.staff_id , SUM(T2.num_meetings__invoice_details__number__c__19536480050357__"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": "SELECT DISTINCT T2.staff_details FROM (SELECT T1.meeting_id FROM Staff_in_MeetingsASTASGINI1TASGINI1TGINI1TG"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": "SELECT COUNT(T1.staff_id__r.staff_details_29847506_63127333_20720415_20301304_690206"
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "SELECT COUNT(T1.staff_id__RDB26981364273152800000__INTEGER_KEY_ID230768572389089"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": "SELECT COUNT(DISTINCT ), SUM(CASE ) FROM Staff_in_Meetings__missing__v2.INVOICE WHERE DISTINCT  = 'TRUE' GROUP BY T1.staff_id ORDER BY COUNT__all__ LIMIT 100"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": "SELECT COUNT(T1.staff_id__null_value__agency_details__client_id__NULL_VALUE_FROM_TABLE__group_by_null_staff_group_within_group__COUNT_ALL_IDS__26"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "SELECT DISTINCT T2.client_details FROM Meetings_staffing_records_by_staffing_agency_details_to_staffing_agency_details__group_by_"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": "SELECT DISTINCT T2.client_details FROM (SELECT DISTINCT T2.invoice_details , SUM(T3.billable_yn__strftimeaSTUDIO59167084"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": "SELECT DISTINCT T2.staff_id FROM Staff_in_MeetingsAST3457892620963100016"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": "SELECT DISTINCT T2.staff_id , T2.staff_details FROM Staff_in_Meetings_Staff_id_details_staff_staff_id_st"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": "SELECT DISTINCT T2.client_details.client_id FROM meetings__invoice_details__billable_yn__client_id_as_sic_code_to_ag"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": "SELECT DISTINCT T2.client_details.sic_code , T1.client_details.agency_id FROM (SELECT T1.client_details.sic_code , T3"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": "SELECT DISTINCT T2.start_date_time , T1.end_date_time FROM Meetings_billable_yn_to_client_details_full_asciiT036765"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": "SELECT DISTINCT T2.start_date_time , T1.client_details , T2.staff_details FROM (SELECT DISTINCT T3.start_date_time ,"
  }
]