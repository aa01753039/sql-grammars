[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "SELECT Wins_count ;"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": "SELECT AVG(Name ) LIMIT 21300012152978372219043618251724142833162639346450432732011035692045604795309874235577656738115625770406679721884475005759600988862954594876490894169122958421573251322181909"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "SELECT Earnings FULL OUTER JOIN (SELECT Name LIMIT 1)\n\n\n AS KONEMYNAXENJWETNEGVUNHARIDADALANRAPEDAFORTAGGILZHEARTDAMELKORDELLBOUNDIGUOSACATOMOGLISPRABIQCODINIITM"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "SELECT Wins_count INNER JOIN (SELECT Name )\n\n\n   \n\n AS SESEJACINON ON EXISTS (SELECT DISTINCT MAX(Player_ID )) ORDER BY Player_ID ;"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "SELECT MIN(Country )\n\n\nGROUP BY Country LIMIT 31801502090404817122813491957342554371526245535270076233970606436653068456656751644893200071138335840030000107312722461608086140990785002135140959508817"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": "SELECT AVG(Name )RIGHT OUTER JOIN (SELECT DISTINCT Events_number FULL JOIN soccer_3.club ON Name = 2FULL OUTER JOIN soccer_3.club\n\n AS TxWZpAaEVj2LQ6fX4"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": "SELECT Earnings , Name INNER JOIN (SELECT COUNT(Country ))\n   \n\n AS LENNERDIEHGAMICYCLE_BODYHAZARDERSIDATURALPEDORARIESEACONITUSMITHIRETJUNKIAOIL1NOCROGERIGUISVANAGI"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "SELECT Earnings LEFT OUTER JOIN (SELECT SUM(Manager ))\n\n\n AS DERATORY1A2B3C4D5Y9P18K19Q20X17G13FRW8AS14CA21CE6H7ZFSVFCTEXETEENDE0OLISFUJESECSTNSEOLEAFI"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "SELECT SUM(soccer_3.club.Club_ID )LIMIT 11;"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "SELECT SUM(soccer_3.club.Country )\n\n\nLIMIT 2;"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "SELECT Player_ID GROUP BY Manager ORDER BY Name LIMIT 1 OFFSET 1043118911580116253750391709052229061433308519552699004527486432803540651577941810889031123856207053134636863497607875287908"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "SELECT COUNT(soccer_3.player.Player_ID )\n INNER JOIN (SELECT Events_number , Name RIGHT JOIN (SELECT SUM(Events_number ) ORDER BY Player_ID LIMIT 4)\n\n\n AS C"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "SELECT COUNT(Wins_count )FULL OUTER JOIN (SELECT COUNT(Manager )) ON EXISTS (SELECT DISTINCT club.Manufacturer , MAX(Player_ID ), Player_ID )\nGROUP BY Name"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Manager ), Manager )\n\n\n   \n\n AS EA ON Sponsor = Player_ID RIGHT JOIN soccer_3.club ON club.Name >= 0;"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "SELECT *\n\nLIMIT 45449293023242745186711583720250110551319393312154778694850961123991436952860649016342272"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "SELECT SUM(soccer_3.club.Name )\n\n\n INNER JOIN (SELECT Name RIGHT OUTER JOIN soccer_3.club AS fhjwnakurfahrngsudtvafogunuulukan1chbohgumoarpzagdapk"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "SELECT SUM(soccer_3.club.Name )\n INNER JOIN (SELECT Name GROUP BY Player_ID )\n\n AS DATACZENIGAUNDAONDIAFAYAGANJOYEBOUTHELESURWUINEMCARDHAKAMARNEQOLGAAADNITO"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "SELECT SUM(Country )\n\nFULL JOIN (SELECT Player_ID , COUNT(Player_ID ), Earnings ORDER BY Manufacturer LIMIT 9031078)\n\n AS KENTKAUZERDORSKIETLURENONJAMADATOV"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": "SELECT MIN(soccer_3.player.Name )\n INNER JOIN (SELECT Name LIMIT 9)            \n\n\n AS ROKHUMAUNAJIKARACHBANKYKURDICTORMEDWILLISFALLENBURGASALVINGELISAIONANATINN"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "SELECT Earnings LIMIT 10 OFFSET 161222102116152035001418502625111923304327389033472928459960971755797065937559071337644085000485769041757780493901874593424743655867862005416902108812032042143635007816"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "SELECT MIN(soccer_3.player.Player_ID )\n\n\n INNER JOIN (SELECT COUNT(*)WHERE Sponsor = Earnings FULL JOIN soccer_3.player ON Manufacturer >\n\n\n 1 INNE"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "SELECT Earnings WHERE Player_ID <player.Manager LIMIT 2 OFFSET 0;"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": "SELECT SUM(soccer_3.club.Captain )FULL JOIN (SELECT MIN(*) INNER JOIN soccer_3.club ON Name < 2 FULL JOIN soccer_3.club AS ufclUBCLOCK1\n\n\n AS DRAKERSHIPTOLITZBUNDU"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "SELECT Player_ID LEFT JOIN (SELECT Earnings FULL OUTER JOIN (SELECT DISTINCT Wins_count RIGHT OUTER JOIN soccer_3.club AS fp ON player.Club_ID = 0 ORDER BY Player_ID LIMIT 1)\n\n\n A"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": "SELECT DISTINCT SUM(soccer_3.player.Player_ID )\n\n\n INNER JOIN (SELECT COUNT(*) AS TOLAS LIMIT 432803558542633147900471748202888241857191550233093107843161340630104113764122927"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "SELECT MIN(soccer_3.player.Manager )\nINNER JOIN (SELECT AVG(soccer_3.player.Player_ID ))\n\n  \n\n AS IKIMFRIEDLY ON Sponsor = 300001000;"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": "SELECT AVG(soccer_3.club.Club_ID )\n\n\n  \n\n INNER JOIN (SELECT DISTINCT SUM(*) RIGHT OUTER JOIN soccer_3.club \n\n AS LOUISPONEXOLA AS FUSILIEROCLUBIODIO1V6F4N2"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "SELECT MIN(soccer_3.player.Earnings )\n INNER JOIN (SELECT MAX(soccer_3.player.Manager ))\n\n \n\n AS KAIBOZUANDAJAPONJAVRAILKULALASANADHAAMATOLAFURYBAHAGI"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": "SELECT COUNT(Country )\n\n\n INNER JOIN (SELECT SUM(Player_ID ))\n AS ZAGA ON Manufacturer  = Player_ID ;"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "SELECT Name INNER JOIN (SELECT Events_number RIGHT OUTER JOIN (SELECT COUNT(*)) AS DISTANT1 ON club.Manufacturer = 'Bengaluru' LIMIT 1)\n\n\n AS PILOTIDOISEMORVATONZJETELAOSENXANTOHADMUNTU"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "SELECT AVG(soccer_3.club.Wins_count )RIGHT JOIN (SELECT COUNT(*), SUM(Player_ID ), MAX(soccer_3.club.Wins_count ), Player_ID , Wins_count )\n\n\n  \n\n AS are ON club."
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": "SELECT *\nINNER JOIN (SELECT Player_ID LIMIT 0)\n\n AS EAST ON Name > Sponsor GROUP BY Wins_count , Country ;"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "SELECT SUM(soccer_3.club.Name )\n INNER JOIN (SELECT MIN(*), COUNT(soccer_3.club.Player_ID ))\n\n AS PALAGUA ON Earnings < 90007222777013945251434007512994966131957163315"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "SELECT Earnings FULL JOIN (SELECT COUNT(*), SUM(Manager ))\n\n\n AS IFAYR ON Player_ID = 144547113312261708384028504370632048390136461878106096135542140524165827697587232900229909"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "SELECT DISTINCT AVG(Events_number )\n\n\n  INNER JOIN (SELECT Sponsor , soccer_3.club.Country RIGHT OUTER JOIN soccer_3.club AS vtntnsp1j6qsw2vhZ7BJQfDV9"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "SELECT *\nINNER JOIN (SELECT COUNT(Country ))\n\n AS ENSEMBLEJOCOPIANONAVERBARANUSATUBAGLEISSAUTASAFURVALHAGDEGETADACODUCDAXEYNUNTOQRAYAPROFOTENICIPEAZOIEPITESCINCAKORL"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "SELECT AVG(soccer_3.club.Wins_count )\nINNER JOIN (SELECT SUM(*))\n\n AS IYENUSA ON Player_ID = 0 INNER JOIN soccer_3.club ON club.Events_number >= 1;"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "SELECT Wins_count , Sponsor ;"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "SELECT SUM(Country )\nWHERE Wins_count = (SELECT * LEFT JOIN soccer_3.player ON player.Country > 5)\n\n INNER JOIN soccer_3.player\n AS COSLYLATEURYUSUXGENTEAUCHTATAS"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "SELECT SUM(Country )\nLIMIT 121 OFFSET 327002533221257404428394958290831351923203211355077632459694810462614671588897901"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": "SELECT Products.county INNER JOIN (SELECT Orders.phone_number WHERE login_password = gender_code )\n \n\n AS VyBKVvZWmjq9MQ5xl7YTbC1IzXJ3U6Fk"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "SELECT DISTINCT COUNT(shipment_date )\nRIGHT OUTER JOIN (SELECT * FROM e_commerce.Customer_Payment_Methods ORDER BY customer_id , order_status_code , town_city LIMIT 1) AS cnnEDCOUNT ON order_item_status_code = 0;"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "SELECT COUNT(shipment_id )\n\n\n INNER JOIN (SELECT AVG(*) RIGHT OUTER JOIN e_commerce.Products AS productID ON invoice_status_code = town_city GROUP BY login_name LIMIT 1 OFFSET 300001000"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "SELECT Products.county INNER JOIN (SELECT COUNT(Products.town_city ))\n\n\n AS EJ8KVj5B1H3M2hgGqLxl0U4pFzrD6vfXb9kWOmQE7AZRtCdYyN"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "SELECT Products.country RIGHT JOIN (SELECT MIN(Products.county )) ON Shipments.address_line_1 = -230130471331153600375054671611896049181088489080222425649532124065755514"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "SELECT COUNT(shipment_date )\nWHERE Invoices.phone_number = 2FULL JOIN e_commerce.Products AS SYSDICATEDLY AS YJMZU6DSR7VQX1SE5K2LSE4GAA8AYT3B9LLW55YVRL0HKK"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": "SELECT Order_Items.shipment_date WHERE Shipments.login_name \n\n\n> 102636 INNER JOIN (SELECT MAX(Customer_Payment_Methods.shipment_date ) WHERE Shipments.login"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "SELECT MIN(shipment_date )\nRIGHT OUTER JOIN (SELECT COUNT(*) RIGHT JOIN e_commerce.Customer_Payment_Methods AS m1stPersonID ON invoice_status_code = 'YEAR' ORDER BY date_order_placed , order_id )\n\n\n\n   "
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "SELECT COUNT(order_status_code )\nFULL JOIN (SELECT SUM(*), order_status_code )\n\n AS BAKERYDINGHOTSPOOLYVIRTUEEALCODESTARBAWEDREEMATECENICASTERBODYFISKEGONTHUNGASCH"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "SELECT COUNT(Invoices.county )\nFULL JOIN (SELECT SUM(*)LIMIT 103036240149404820262260906595755534993510371746181143002519334766972744165086297854678414078038932271528573212531125970648858"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "SELECT SUM(shipment_id ) AS iDtO\nLIMIT 0 OFFSET 500000110255000022205550083470336049753040995418124619358058363711236529002664742113174527781007384344421695779894125146715832589066972839079"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "SELECT order_id INNER JOIN (SELECT Products.phone_number )\n\n\n AS EONORAIS ON Shipment_Items.payment_method_code =53123602801121417406736388964112295303569571516474834398810375025"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "SELECT MIN(shipment_date ) AS HIPSKI FULL JOIN (SELECT SUM(*) INNER JOIN e_commerce.Customer_Payment_Methods\n\n\n  \n\n AS HOLDOUT ON shipment_date = 2 INNER JOIN e_commerce.Customer_Payment_"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "SELECT COUNT(Customers.country )\nINNER JOIN (SELECT SUM(*) ORDER BY town_city LIMIT 337000564279913113538783326509080981123102095227588447923486518684716011734240863619042125"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "SELECT Order_Items.product_id \nGROUP BY Customers.shipment_id ORDER BY Invoices.invoice_status_code LIMIT 449993478203625162826793955880176113764104229571217672398137577143522"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "SELECT COUNT(shipment_date )\nINNER JOIN (SELECT DISTINCT email_address )\n\n AS LANDMAYLORYBOLFATURANZVENTERENELONIANSKITAISKIRUTJETIMEGICASAMEXADEVAPACIOSECINQOIANEMCAL"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "SELECT order_status_code ORDER BY town_city , email_address \nLIMIT 151049091390843219205048369728333855252634277822459975168864763523153717589067006906"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "SELECT town_city INNER JOIN (SELECT order_item_status_code )\n\n\n AS RIDGEY1I4V0BA6GvqB3pWjL7oX5DJuKgQE8fb2cRhkZPlUITwCx9TmzNnMtHs"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "SELECT town_city INNER JOIN (SELECT order_status_code )\n\n\n  AS Theresa1X7V8EpY6o3Z2b4g5uMqBzPUvLQKJjyWc9RiGfOwkNhFn0lTdHrCxD"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "SELECT COUNT(e_commerce.product_price )\nFULL OUTER JOIN (SELECT * FROM e_commerce.Orders WHERE Order_Items.town_city = 0) AS order2i ON Orders.order_item_id = '1';"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "SELECT Orders.country GROUP BY Customer_Payment_Methods.gender_code LIMIT 22116620974425142777169978001239177519021394533604047872379493868286765107201182613853594153058294636"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "SELECT AVG(Products.date_order_placed )\n\n\nINNER JOIN (SELECT Invoices.date_order_placed )\n \n AS ROGUEAILOSANIAKITORBATUENJAPESPERSONYISKIELAYGALARFASTAHIDIANUSMANDETTZN"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": "SELECT COUNT(shipment_tracking_number )\nWHERE Invoices.parent_product_id = 1\n\n  ORDER BY Shipments.shipment_date ;"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "SELECT MIN(shipment_date )\n\n\nLIMIT 658462778361723331657141211603701851853241555594720488087288967409826647500456674293069227325877390625543119082145421068843443175134909384644357865273316"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "SELECT town_city , SUM(date_order_placed ), Products.town_city INNER JOIN e_commerce.Order_Items AS i ON product_name = 'v1_9' ORDER BY date_order_placed , Customer_Payment_Methods."
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "SELECT Invoices.invoice_status_code RIGHT JOIN (SELECT SUM(Products.phone_number ) GROUP BY Orders.invoice_status_code LIMIT 1055305767502632171316604547222836202314"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": "SELECT AVG(shipment_id )\n                          \nWHERE Customers.invoice_number = 73944003875377601332328304325991 RIGHT OUTER JOIN (SELECT AVG(s"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "SELECT invoice_status_code \nINNER JOIN (SELECT SUM(Products.invoice_status_code ))\n\n AS CURYDICALAESSAJEUSELETGEMITRAVENTILASMARTILLENSIAFZAMINAHAHINIOUMAIJUANAIFORLAT"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "SELECT invoice_status_code \nINNER JOIN (SELECT SUM(Products.date_order_placed ) ORDER BY Invoices.country LIMIT 1) AS DATEKIDA1VATGICAS2B3H8O5I9N7F"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "SELECT MIN(shipment_date )\n\n\nLIMIT 104820531722125714331523283645473093139538182959404416096437786689558810657919247326255034567060397711461693569743041774906006850075589841596780991220482715"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "SELECT order_status_code WHERE address_line_1 \n\n\n> (SELECT email_address )"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "SELECT MIN(shipment_id )\n\n\n INNER JOIN (SELECT COUNT(*) LIMIT 310301465045484399570027602038976428223739153670931917265876247525305578564023957784136654106973162909889025511144433983"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": "SELECT DISTINCT SUM(shipment_date )\nFULL JOIN (SELECT COUNT(*) RIGHT JOIN e_commerce.Shipment_Items AS OPPORTUNITY AS GARBAGONJIMKATELAURTOUNAYREAVITAMPEDROESHIPMENTADNEMVOTEHAZ"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "SELECT Products.county LEFT JOIN (SELECT COUNT(Customers.county ) \n\n\n INNER JOIN e_commerce.Products AS SELLING AS BKSHALANYAHISU ON Products.county <email_address ORDER BY"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "SELECT order_status_code \n\n\nFULL JOIN (SELECT * FROM e_commerce.Customers WHERE customer_id = 0) AS InvoiceId ON date_order_placed < 2 ORDER BY invoice_number , order_status_code ;"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "SELECT order_status_code RIGHT JOIN (SELECT SUM(Products.gender_code ))\n\n\n   \n\n AS inallisumorandurpateofresquarelluipfirmaematnavarifinovigaljvapiiobtasimlakikonhagderek"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "SELECT town_city INNER JOIN e_commerce.Invoices\n\n\n AS BIOQA3C10K4M7H5B1AAJYFAX2D0VZ9O11L8WUvPbFhqcJBxzdkEfRtjlm6iNywJVgG_s\n\n\n"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "SELECT Products.phone_number , email_address \nFULL JOIN (SELECT COUNT(order_id ) AS DATE) ON shipment_date = Order_Items.town_city ORDER BY order_id ;"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "SELECT AVG(shipment_id )\nLIMIT 3 OFFSET 523360113175716332725489926374495149834242210384049796935196664457550477054307318157846685311125929090065587610525828808611281008678932555501"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "SELECT SUM(shipment_id )LIMIT 31500021521411750133174525231222132946106779005920496044644048363424091927885099289038663218169870807437308907669786597200415072693"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "SELECT Products.county INNER JOIN (SELECT SUM(Products.county ))\n\n\n AS BH1 ON Customers.county = 810393690446433002813372278384310092919580146111517089834127749572588"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "SELECT Invoices.date_order_placed ORDER BY Products.date_order_placed LIMIT 0;"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "SELECT order_status_code ORDER BY Shipments.login_name LIMIT 11341042193909846381408804728124036262777675717205099742416304835971375322902116554188978152225536456337949589560"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "SELECT order_id \nINNER JOIN (SELECT email_address )\n\n AS LYNNUERZSKOWDCHOPPEGVFENJOR2XWPR4G5K8A6Hxq9zBcg0s3h7EjCkpw1iIbOyQdvTm_NrMfLn"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "SELECT town_city , invoice_date ;"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "SELECT Order_Items.phone_number FULL OUTER JOIN (SELECT MAX(shipment_id ))\n\n\n AS eekuetbierzkykfklxjnt8ck5q4c1vns0l6wau9gEZo3hFnPJLpQG2UY"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "SELECT SUM(Products.country )\nFULL JOIN (SELECT Products.county )\n\n AS LADENLYZED ON address_line_1 = 0 FULL JOIN e_commerce.Products ON Shipments.parent_product_id >"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "SELECT order_status_code ;"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "SELECT DISTINCT SUM(shipment_date )\nFULL OUTER JOIN (SELECT COUNT(invoice_status_code ))\n\n AS IBUY ON EXISTS (SELECT COUNT(*), SUM(invoice_status_code ))\nFULL "
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "SELECT invoice_status_code GROUP BY Orders.phone_number LIMIT 5350045202515494499173070368042602240881301287789081190603782316581478761847463466116784389768394827072178246479552959"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "SELECT SUM(shipment_tracking_number )\nINNER JOIN (SELECT shipment_date , town_city )\n\n AS BAMPADALANBUSHERYJOHNNEDELVARASETUPEENRYCUNTOONCHAODESAYMIDDLEKH"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "SELECT COUNT(shipment_tracking_number )\nINNER JOIN (SELECT SUM(town_city ))\n\n  AS DESTODESHARU ON Invoices.invoice_date = order_id ;"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "SELECT town_city , shipment_tracking_number , order_status_code INNER JOIN (SELECT Products.invoice_date )\n\n\n \n\n AS BHBHCYQW2UJ1E5AAJVZDVG3M8K7F6A"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "SELECT order_id FULL JOIN e_commerce.Products\n\n\n  \n\n AS LOST ON date_order_placed = 1;"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "SELECT COUNT(invoice_status_code )\nFULL JOIN (SELECT SUM(invoice_status_code ), invoice_status_code , address_line_1 )\n\n \n AS KITOSCIELISCKVOCNOUPTSYJ"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "SELECT SUM(shipment_tracking_number )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN e_commerce.Invoices AS InvoicesList ON invoice_status_code = 5 ORDER BY date_order_placed , order_id )\n      "
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "SELECT Products.phone_number , email_address , order_id \nRIGHT JOIN (SELECT * FROM e_commerce.Products WHERE gender_code = '9' ORDER BY date_order_placed ) ON town_city > 1 GROUP BY phone_number , town_city , county"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "SELECT Products.county WHERE invoice_status_code \n<product_name ORDER BY Invoices.country LIMIT 2100937408933343088802790752300451711321222261905411570679848283901873865602904254616"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": "SELECT DISTINCT SUM(shipment_date )\nWHERE Customer_Payment_Methods.shipment_id = 184539381909181027504920530117778844347515481629852558703216028797437763\nINNER JOIN (SELEC"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": "SELECT Products.login_password FULL JOIN (SELECT SUM(Products.login_password )\n INNER JOIN (SELECT COUNT(*)FULL OUTER JOIN e_commerce.Products AS ProductID ON Products.product_id = 0 OR"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "SELECT order_status_code WHERE Customers.login_password \n>\n\n-16006080503079751548243536647618332788222614404345135510684977174712195620238902118676906112066010783200054251157994639"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "SELECT COUNT(Customers.country )\nWHERE Invoices.invoice_date = 6780001991711405833892287371559291425104948394621161809558650457788273568753876706319054423432476436\nLIMIT 46657282630"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "SELECT invoice_date , SUM(town_city ), order_id ;"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "SELECT order_status_code ORDER BY Customers.county LIMIT 59000043075483210500002025573328503458116447226023462788158097991739269619371624147884290721674312355601030000521"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "SELECT DISTINCT SUM(shipment_date )\nINNER JOIN (SELECT MAX(shipment_id ), email_address , parent_product_id )\n\n  \n\n AS is ON customer_middle_initial = 10.40000542104049"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "SELECT invoice_status_code RIGHT OUTER JOIN (SELECT SUM(Products.product_id ))\n\n\n AS ifcegoryyvizz1AqfW7Eh4VxG2wB5NX0FkK6IZj9QOc3u8HJYb"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "SELECT MIN(shipment_id )\n\n\n INNER JOIN (SELECT Products.login_name , SUM(shipment_id ), invoice_number WHERE product_price = shipment_tracking_number )\n\n\n AS DAT"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "SELECT DISTINCT COUNT(shipment_id )\n  INNER JOIN (SELECT MAX(town_city ))\n\n AS LYVAGENCHEDIAHILIMATRAKOMLANJAYAMFUKWALLSONUURDIGADESKYBISHLOVREUTZASMOGARUSIOSPELOQ"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": "SELECT AVG(shipment_id )\n INNER JOIN (SELECT SUM(shipment_id ))\n\n  AS LAAAJ ON Products.login_password <-2FULL JOIN e_commerce.Products ON customer_first_name = 'Joey' ORDER BY parent_product_id ,"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT invoice_number )\n\n\n \n AS ELUDEA ON Products.invoice_number < 0.05"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "SELECT Order_Items.shipment_id , shipment_id , invoice_date INNER JOIN (SELECT order_id )\n\n\n AS elvenmonstasperaluarjrrylefisoullrezbavriadaktobraonnefrhmveklq"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "SELECT invoice_status_code INNER JOIN e_commerce.Products\n\n\n AS VITESVANENETY ON Shipment_Items.gender_code >(SELECT shipment_id ) ORDER BY invoice_status_code ;"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": "SELECT AVG(shipment_id )\n\n\nRIGHT JOIN (SELECT COUNT(email_address ))\n\n AS STONEAUREDISCEBOURQUEFETTERLYEVE2L1P9ATDUYXV6ANHG4ENOC3SALLSAFUNIOD8UMOIAZMAAJ7C"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "SELECT COUNT(shipment_date )\n\n\nWHERE Invoices.address_line_1 <34;"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "SELECT invoice_date INNER JOIN (SELECT AVG(address_line_1 ))\n\n\n\n AS PENETIO ON EXISTS (SELECT DISTINCT COUNT(*)) ORDER BY order_id LIMIT 1;"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "SELECT DISTINCT COUNT(shipment_date )\nINNER JOIN (SELECT COUNT(login_password ))\n\n AS KYZWVKXUJP5GQ2MVCD8F6B7EB4AABB775562BE98225051DA1BA7616CB3AD8974CF9"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "SELECT AVG(shipment_tracking_number )\nLIMIT 32220271248170116113023291428574399602639692544453875365546668949873310951879674759534096359721129098341364921590687312537985600511052250270003113171906117816"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "SELECT SUM(shipment_date )\n\n\nRIGHT JOIN (SELECT Products.town_city , MIN(*)FULL JOIN e_commerce.Invoices AS INVOICE1 ON town_city = invoice_status_code )\n\n\n AS SELECTEP"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "SELECT MIN(shipment_id )\nRIGHT JOIN (SELECT SUM(*) RIGHT OUTER JOIN e_commerce.Products AS HVATARALOREDGENTRY\n\n AS DEFINITIONS ON Customers.product_description = invoice_sta"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "SELECT invoice_date \nINNER JOIN (SELECT MAX(Products.country )\n\n INNER JOIN e_commerce.Orders ON address_line_1 = 21474836483633 ORDER BY Customers.order_id LIMIT 1)\n\n     AS TOB"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": "SELECT Internet INNER JOIN (SELECT Title LEFT OUTER JOIN (SELECT * FROM bbc_channels.channel WHERE channel.Name = 'Joi-Kee' ORDER BY director_admin.Title )\n\n\n AS erejnielllehrtenknechtnteutetwerkst"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": "SELECT MIN(Age )\nRIGHT OUTER JOIN (SELECT AVG(Director_ID ))\n\n   \n\n AS DESCRIPTION ON Start_Year = channel.Name ;"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "SELECT Internet FULL JOIN (SELECT Program_ID )\n\n\n AS BHATWISCHEMETMUNDJOMENFURG ON Start_Year = Digital_terrestrial_channel ;"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "SELECT Title RIGHT OUTER JOIN (SELECT Program_ID INNER JOIN (SELECT COUNT(*)) AS NEGATIVEDATE ON channel.Internet = 0)\n\n\n AS STYLESMART1AMETERS4CANNEMAN5ALIGNATRITARY8PROTEON2AGE10ACRES20COMPARE3"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "SELECT AVG(Analogue_terrestrial_channel )\n INNER JOIN (SELECT DISTINCT SUM(*), MIN(Program_ID ), COUNT(Start_Year ))\n\n AS VEDARTHAASICESATORIAEON1aXBOLKJF4"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "SELECT COUNT(Is_first_director )\n\n\nGROUP BY Title LIMIT 7232738337035390148007840295045282477182034174719585636167909469959122610654215375710076253260876853111314962285304498430875"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "SELECT Internet , Director_ID INNER JOIN (SELECT Title )\n\n\n  \n\n AS ifdlevtsaenstojntfemfrzkauptelatvegengebenswilhbegetnierdempoglenasschnopufturgeschichteieniertmiedtvermehr"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT Program_ID )\n\n\n  \n\n AS GASAILISEDALESLITEZJUNKXW4AT2QB9D5VYPSP1E0M10G3F8C25T7AAAMBSUITLSRANNYHN6APDROWNDYSIDOOTI"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "SELECT Title INNER JOIN (SELECT COUNT(Analogue_terrestrial_channel ))\n\n\n  \n\n AS VADINIMETRYVANINEJHOMYBOTGCHEDDIAMEMISERRIFACZHAOITOLPETHUNDEUFKTHECNOPCXAQ"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "SELECT MIN(Channel_ID )\nINNER JOIN (SELECT SUM(channel.Age )) AS RENEWHATANASGORZOVIANOVAICIAESPOWEREDURGESCHANNEL2COMPS1CACHEJUMOSKIRAMIZAYOLGAVONEISYBOCETHERRIFUSUFAL"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "SELECT Program_ID INNER JOIN (SELECT COUNT(channel.Channel_ID ))\n\n\n  \n\n AS ISSUED ON Start_Year = 1 GROUP BY Title ORDER BY Program_ID LIMIT 0"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "SELECT MIN(Age )\nINNER JOIN (SELECT Title , Name RIGHT OUTER JOIN bbc_channels.program\n\n AS PRAASTHATALANDIMCIRGINICA AS ULTREAKESETEBABACOSANITISLOBEDVOCARAGOCHAD"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "SELECT Title INNER JOIN (SELECT Program_ID )\n\n\n AS LOUISANESHEEKAIBALUQASHAJENPOPFINGATLIKGOLDIABICHVADELAMAZORIMAUNITEMOGICINAGNEOIWEBANULMILTOBETARIBYNDRACID"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": "SELECT Title RIGHT JOIN (SELECT AVG(Channel_ID ))\n\n\n           \n AS HENZERDINATALBEDIRKFREQJAOLONTAFLYDEURAFCHELDRAMMEMBEHIFLEIMACLOBECS1O2R3U5T4G9C7N"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": "SELECT Program_ID INNER JOIN (SELECT COUNT(Age ))\n\n\n  \n\n AS ELG ON Title > 7381 ORDER BY Director_ID LIMIT 100020502210705717138855892827852112065253311466096403624124815"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": "SELECT Internet FULL JOIN (SELECT COUNT(Program_ID )\n\n\n     \nRIGHT OUTER JOIN bbc_channels.channel AS MODE1 AS cbsmode2 ON director_admin.Age = -4 INNER JOIN (SELECT COUNT(Pro"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "SELECT RnaG_MHz LIMIT 111095144512351905255416202333281326181155882960783906361775677022155074388032000416849090797942"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "SELECT 2FM_MHz ;"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "SELECT SUM(Radio_ID )\nORDER BY Lyric_FM_MHz , Radio_ID \n\nLIMIT 515452627110116784849742854333712381700705913203500036603923182943106599698911287904683219058562480258847302275"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "SELECT Lyric_FM_MHz INNER JOIN (SELECT COUNT(2FM_MHz ))\n     \n\n\n\n AS DIAGARAALONIANZUASKAHITJOLANSKINYUNTAIRQATKAHAILOGUEKILEADWIDENAKVISERIAMNAGNAORRACOSCHMUR"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": "SELECT Is_free LIMIT 200022401407836891211805035006075542025331022147939446515566417489945551667843859421826374719462705344957779417541305868136621120298730820128861334050098010981002200117078352025"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "SELECT RnaG_MHz INNER JOIN (SELECT MIN(2FM_MHz ))\n\n\n AS NpA9U1VY5JQ0h6iWFg3rX7vqwAAZjbPYSs4Bk8KdqEeHtLYxDNuOIcWfLlGnCmFzd"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "SELECT COUNT(RnaG_MHz )\nINNER JOIN (SELECT RnaG_MHz )\n\n AS OVR1F2Z9BQV5N3A1211LBL7YXK6U4BAATP8WDSETPREHDYSACFLAAIJADSBVWIFECYDIELFSJASRWNEDAFCDROCGTRM"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "SELECT 2FM_MHz , SUM(RnaG_MHz ), MIN(Lyric_FM_MHz )\n INNER JOIN (SELECT COUNT(2FM_MHz ))\n\n  \n\n AS E1JD9B8E6C17EF3A8519482572AC8847183977139945781134143715"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "SELECT RnaG_MHz , SUM(RnaG_MHz )\n\n\n INNER JOIN (SELECT RnaG_MHz )\n AS CICF1V5DY4cgKJbZuEfQpB8yWxwX0q6A3mPj9h2U ON Next_s"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "SELECT ERP_kW RIGHT JOIN (SELECT Lyric_FM_MHz )\n\n\n   \n\n AS SCTKJG0VXQ4LSD8TS1N5A3UY9AB6BZEjr2Cg7bpWnfGVmqIkRylhPvcxdF_LzTt"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": "SELECT COUNT(City_channel_ID ), SUM(Sub_tittle ), MIN(Next_show_name )\n\n\nLIMIT 0;"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "SELECT SUM(2FM_MHz )\nWHERE Transmitter  IN (SELECT 2FM_MHz )\n\nINNER JOIN tv_shows.city_channel ON Radio_MHz = -1;"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "SELECT COUNT(City )\n\n\nLIMIT 1 OFFSET 0;"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "SELECT SUM(Radio_ID )\nINNER JOIN (SELECT ERP_kW , RnaG_MHz )\n\n AS STADIUMKERPYZ4QF5AS9J3A8H7XACB6EETOCECC1V0UAG2M151408LENCE1021RLDIGRDE1619IANCHVRNAM"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "SELECT Lyric_FM_MHz FULL OUTER JOIN (SELECT COUNT(Lyric_FM_MHz ))\n\n\n AS RECORDS ON RnaG_MHz =RnaG_MHz ;"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "SELECT Racing_Series INNER JOIN (SELECT Power LIMIT 2)\n\n\n      \n\n AS WINDERIDGEV6W2A4 ON Total_Production <3.8"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "SELECT COUNT(Racing_Series )\nWHERE Builder <Builder GROUP BY Total_Production ;"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "SELECT COUNT(Racing_Series )\nGROUP BY Top_Speed , Name LIMIT 1;"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "SELECT AVG(Citizenship )\nINNER JOIN (SELECT SUM(Power ))\n\n AS OF ON Builder > 8187811 INNER JOIN (SELECT * FROM vehicle_driver.vehicle WHERE driver.Name < 'A')\n\n AS TUESDAY ON Driver_ID = 0 ORDER BY"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "SELECT Racing_Series WHERE Model <driver.Model GROUP BY Driver_ID LIMIT 1085131778571914262089483060991245804727002905502218402537680149645895394476369721105516863556113424778828"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "SELECT Racing_Series \nINNER JOIN (SELECT Name ORDER BY Model )\n\n AS EBOUGNEUANISAARXIAL1F5D2H0M9OL7VQZLSYS6JW4PAA8_vkwjzIcmb3qfpThNxOiCg"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "SELECT Name INNER JOIN (SELECT MIN(Citizenship )\nFULL OUTER JOIN vehicle_driver.vehicle AS KANDHOSCHALAYAJOYIDRAUNZHAITARATYA\n\n AS VOROBSMARTONOLYKOVELEGIANISLENVET"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": "SELECT DISTINCT Vehicle_ID GROUP BY Name LIMIT 2;"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "SELECT Racing_Series WHERE Total_Production = 9.434\nINNER JOIN (SELECT MAX(Model ))\n\n AS EYESTREETJORING2VIA9GZQCWEE7F1B5EN8WK11AU6PKKUISUM3H0SCSIDY_IOCN4"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": "SELECT COUNT(Citizenship )\n\n\n  \nLIMIT 1057771636011178231710563327404737193412762426555087282545421549542960387044582246000481310021294300142039041490990367831850032307410564984165669411169901078"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "SELECT SUM(Driver_ID )\n\n\n INNER JOIN (SELECT DISTINCT Name FULL JOIN vehicle_driver.driver ON Builder < 7970122334036981) AS ISCYQ6tW0E7IkD5VUHzBhj9Xg"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "SELECT SUM(Driver_ID )FULL JOIN (SELECT Total_Production , Citizenship RIGHT OUTER JOIN vehicle_driver.driver\n\n\n AS MELE2RXLONIAA9x5gYJ8FqW0C3P1G4"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "SELECT SUM(Citizenship )LIMIT 47110361409215518332832170119088264525117927590793867461216507078356922202349778815904213295434566599553057645340987580736096000460910054700831076338903173718"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "SELECT SUM(Builder )\nINNER JOIN (SELECT COUNT(*)FULL JOIN vehicle_driver.vehicle\n\n AS PENGIEZHERE ON Driver_ID = 1132160123002847142280379908\n\nINNER JOIN (SELECT COUNT(*)"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "SELECT COUNT(Racing_Series )\nINNER JOIN (SELECT DISTINCT Name ORDER BY Model LIMIT 0)\n\n \n AS VICTORIANIAZATRAKHUNNYFJUEGAELIZVAGALESMIREGAYDAPIDIETNIG_ASISLAROENM"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": "SELECT vehicle_driver.Model GROUP BY Model ORDER BY Racing_Series LIMIT 2"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "SELECT COUNT(Racing_Series )\nINNER JOIN (SELECT COUNT(Citizenship ))\n\n AS MISHAMMED ON Driver_ID = 203940476400123422241908709480671528111048442501208874262907278450771817454905955\nINNER"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": "SELECT vehicle_driver.Total_Production \nGROUP BY Racing_Series LIMIT 202308171816783688282924486495404958770089072268352734309699591433133973106746328025209460420119069765056127975114726"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "SELECT Racing_Series GROUP BY Top_Speed ORDER BY Model LIMIT 1 OFFSET 2758055440057000400003080001106047121319083288182523333749384058298521162877174566142664767022954636866727354874345615509039062"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": "SELECT vehicle_driver.Name INNER JOIN (SELECT Vehicle_ID )\n\n\n AS EASTAUSTRALIA ON Total_Production = 1 GROUP BY Racing_Series LIMIT 44855673328421356155775587811"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "SELECT SUM(Citizenship ) \nFULL JOIN (SELECT Name , Citizenship INNER JOIN vehicle_driver.vehicle_driver\n\n AS andBANNERA2D4d5f7g42c3cc1cf38b6\n \n\n AS DATEYFULL"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": "SELECT COUNT(Racing_Series )\nLIMIT 11020321535230111773378255089286027162699182490407430228046190611289567448613755564369621706485917047083100739491237560038475400003124000601842105814852079082529574550"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": "SELECT MIN(Model ) AS C1L FULL JOIN (SELECT Vehicle_ID , SUM(Driver_ID ), Power ORDER BY Total_Production LIMIT 12992501082125190210367046202390359555404816856097122639132218"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "SELECT SUM(Citizenship )LIMIT 316063970885035002560577590303380284555229940432701587744141637863848631826205915653696476917068411912134910346211897953674623836492133240797211873252950543908"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "SELECT SUM(Citizenship )FULL OUTER JOIN (SELECT Name RIGHT OUTER JOIN vehicle_driver.driver\n\n\n AS LUNYCHESDRAVEERSMARTANDAEWISUREYSANDALPILLARORIMAZENICLSOLVIRONNURG"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "SELECT MIN(Citizenship )\nINNER JOIN (SELECT Name RIGHT JOIN (SELECT Name RIGHT JOIN (SELECT Name RIGHT JOIN (SELECT SUM(Vehicle_ID ))\n\n\n\n AS BRIEFING O"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "SELECT Racing_Series INNER JOIN (SELECT Name LEFT OUTER JOIN (SELECT * FROM vehicle_driver.vehicle WHERE Vehicle_ID = 0 ORDER BY Total_Production LIMIT 2)\n\n\n AS ENERCEATORSINGPOWERFULDRIVESTYLESCARDRIZNASISBENKINS"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "SELECT SUM(Racing_Series )\n\n\nINNER JOIN (SELECT Racing_Series )\n\n AS HANGOSDUNNEKTHERJENFETCHHEDOLBALDEATIMISQUEAUXIFAYYVEGOTACOPEZRUYSAKLADWALLIDNIGAGPOECONCODIANAPOULEILLAARIN"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "SELECT Racing_Series INNER JOIN (SELECT Vehicle_ID )\n\n\n AS EATINGER ON Driver_ID = 1.7391333880104318638251089091215454323164630421184026352729021158344495225787379879183617654932\n\n\n INNER"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "SELECT vehicle_driver.Citizenship INNER JOIN (SELECT Vehicle_ID RIGHT OUTER JOIN (SELECT * FROM vehicle_driver.vehicle_driver WHERE Model = 1 INNER JOIN (SELECT Driver_ID ) ON Driver_ID = ' + movs+ \" ;\" OR driver_id="
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "SELECT Racing_Series GROUP BY Model ORDER BY Citizenship LIMIT 112534465085390860552889773326253544782068361065195864148876402723245638291748161173124569666315543218037037990190758413475907922"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "SELECT SUM(Citizenship )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN vehicle_driver.vehicle \n\n AS EXTERIOR3A4L6H2B9XV1G0YSDQ8Y5WASZKMqmJgkIUpF7CrOoEaPfjR"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "SELECT SUM(Racing_Series )\n\n\nFULL OUTER JOIN (SELECT Racing_Series , Racing_Series )\n \n AS UGJKUNA1H6AS0D ON Model <> 6.00 LEFT JOIN vehicle_driver.vehicle\n\n AS ANSWEREDICHISTSUEGLESZ"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "SELECT Racing_Series GROUP BY Top_Speed ORDER BY Driver_ID LIMIT 97588190857361211433099092587402285241558332050354495181737776649002739014573106448762247238034864387955742897135967292614"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": "SELECT Builder LEFT JOIN (SELECT SUM(Driver_ID )LIMIT 2)\n\n\n AS MATHYARALAANTHURAMASIA2RANGUALBANKJOHNSON1QUNV3X6BLOCAT4P5FYSZ7OISKKK0EENCHIKUHNACTESDOLW8G9"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "SELECT COUNT(Racing_Series )\nINNER JOIN (SELECT Power LEFT OUTER JOIN vehicle_driver.vehicle\n\n AS KRAVANASISESATWELCHCUBIAHALJAYDINGKABNYSTENGOVOHAARI\n\n AS KHARYNAONLOLT"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "SELECT COUNT(Racing_Series )\nINNER JOIN (SELECT COUNT(Racing_Series ))\n\n  \n\n AS WELLINGFIELDHUANKARAMADIDDUNCATJITMARTCHALDAKEZYFASTACRAWGHAVIRGHURAETTOTHIOCOPINILULONNODUSAFISHASLORDSPEN"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "SELECT vehicle_driver.vehicle_driver.Vehicle_ID RIGHT JOIN (SELECT * FROM vehicle_driver.driver, vehicle_driver.vehicle_driver) AS mpaqid ON driver.Driver_ID = Model INNER JOIN (SELECT Vehic"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "SELECT COUNT(Racing_Series )\nINNER JOIN (SELECT DISTINCT Name ORDER BY Vehicle_ID , Vehicle_ID , Power )\n\n AS TZEDIAHJAISTAOSENRONICITESPICTURESOLAPATIASALEOUMTSBARLING"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "SELECT vehicle.Vehicle_ID , driver.Racing_Series , Driver_ID GROUP BY Model LIMIT 117023443725273417190522361110656088893"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "SELECT COUNT(Power )\nINNER JOIN (SELECT MAX(Model ))\n\n   \n\n AS ANNEBERGERJOSZENKOLCHAUHLISDEUVETALASKAILAMIEYANORCIKBETHELHUNT_RATIDURUKLIGIMNOPTHIOCONGLITIAAFLACHTINF"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "SELECT COUNT(Citizenship )\nLIMIT 101011188528903220481440984373058175022883819165944135724232527756889646679607846017045540003"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "SELECT MIN(Cell_Mobile_Phone )\nFULL JOIN (SELECT First_Name , Email_Adress )\n AS forgiveness ON Last_Name = 2.0001\n\n INNER JOIN online_exams.Questions ON Satisfactory_YN = ("
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "SELECT AVG(Assessment )\nINNER JOIN (SELECT Type_of_Question_Code )\n\n  \n\n AS LADYKISTAUSIMATYA ON Middle_Name = Cell_Mobile_Phone ORDER BY Date_of_Answer ;"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "SELECT Exam_Date FULL OUTER JOIN (SELECT MIN(Middle_Name )FULL JOIN (SELECT DISTINCT * LIMIT 2)\n\n AS NAMESUMORALS1A3B2BA4C7CC17E92790BE50D5AA462889011939584978"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": "SELECT AVG(Assessment )\nRIGHT JOIN (SELECT * FROM (SELECT Home_Phone , Date_of_Answer )) AS SECTIVE ON Cell_Mobile_Phone = 'Dalmaan' INNER JOIN (SELECT AVG(Assessment ) FROM (SELECT H"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "SELECT Exam_Name INNER JOIN (SELECT Home_Phone )\n\n\n   \n\n AS LUNDYJOSMOLA ON Gender_MFU <-0.000150421816482904372559096287840962679123400208947176075106695229821603536"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "SELECT Exam_Date INNER JOIN (SELECT Last_Name )\n\n\n      \n\n AS TREEYGLEBEEFINGAGEVITWESTERNIAZAMONICAPISTATIOCUSEDURANISMOSHAIANIDJARRTHALADOMETPIEHASNQACEMOROLDIMODU"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "SELECT AVG(Assessment )\n INNER JOIN (SELECT Exam_Date , Valid_Answer_Text ) ON Home_Phone <> First_Name GROUP BY Date_of_Answer LIMIT 120111120011942131628002318"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "SELECT Last_Name INNER JOIN (SELECT AVG(Cell_Mobile_Phone ) AS NAMEN)\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n AS TKVJ"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "SELECT Home_Phone , Type_of_Question_Code RIGHT JOIN (SELECT DISTINCT AVG(*) FULL OUTER JOIN (SELECT COUNT(Date_of_Answer ) AS Date FROM online_exams.Exams WHERE Type_of_Question_Code"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": "SELECT Type_of_Question_Code INNER JOIN (SELECT * FROM online_exams.Exams WHERE EXISTS (SELECT Last_Name , Email_Adress ) ORDER BY Date_of_Answer , First_Name ) AS answerElemID ON Middle_Name = Comments ;"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "SELECT Home_Phone , Cell_Mobile_Phone RIGHT JOIN (SELECT AVG(Assessment ))\n\n\n\n AS PHLESUNA ON Type_of_Question_Code = Email_Adress ;"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "SELECT SUM(Home_Phone )GROUP BY Type_of_Question_Code , Home_Phone \nLIMIT 115516143050851026776089021738481218272533802940984974130146233490995811540059190620572815"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "SELECT AVG(Question_ID )\n\n\nRIGHT JOIN (SELECT SUM(Assessment )) AS KERNEDIA ON Home_Phone = 0.0FULL OUTER JOIN online_exams.Exams AS erigioa6dasc1njt9lq5m4r8"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": "SELECT AVG(Date_of_Answer )\n INNER JOIN (SELECT DISTINCT COUNT(*) AS PATCHID, SUM(Assessment )) ON EXISTS (SELECT Last_Name , Satisfactory_YN FROM online_exams.Students WHERE Type_of_Question_"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": "SELECT Type_of_Question_Code FULL JOIN (SELECT SUM(First_Name ))\n\n\n AS TOXICALONOUSLY ON Date_of_Answer = 'Anc' LEFT OUTER JOIN online_exams.Valid_Answers AS TQWENOLECNTY"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "SELECT Home_Phone INNER JOIN (SELECT MAX(Last_Name ))\n \n\n AS E3V1F6K0QDv7HYGJ9U5iBbzWqxrgkZj8f4o2dwYSPcIegMAAjeCnE ON Last_Nam"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "SELECT AVG(First_Name )RIGHT OUTER JOIN (SELECT Gender_MFU , Date_of_Answer )\n   \n\n\n\n AS BANNERED ON Home_Phone = 1.5 LIMIT 5260114"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "SELECT online_exams.Date_of_Answer LIMIT 5571366972515350068279909724181234792622481765750130594533166432206086193670504447297649086233883211110283905743755961443406329531105305137825931580543585278907"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "SELECT Home_Phone \nINNER JOIN (SELECT AVG(Assessment ) INNER JOIN online_exams.Exams\n\n AS youtuitionidatthiok1v2djLJpWcX6k3e0uP5NZlIxQ9hH\n\n \n\n AS S"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "SELECT DISTINCT AVG(Assessment ) LEFT JOIN (SELECT Middle_Name INNER JOIN online_exams.Questions\n\n\n AS WORD ON Comments = 1 ORDER BY Type_of_Question_Code , Questions_in_E"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "SELECT AVG(Assessment )\nWHERE Home_Phone \n\n> (SELECT COUNT(Middle_Name ))\nINNER JOIN online_exams.Exams ON Satisfactory_YN > 45001 RIGHT OUTER JOIN online_exams.Ex"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": "SELECT AVG(Assessment )\nFULL OUTER JOIN (SELECT Exam_Date , Valid_Answer_Text )\n\n  \n\n AS FOR ON Date_of_Answer = 4.1 INNER JOIN online_exams.Exams ON First_Name = (SELECT Ex"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": "SELECT MIN(Cell_Mobile_Phone )\n INNER JOIN (SELECT Home_Phone ) ON Valid_Answers.Home_Phone = 2FULL OUTER JOIN online_exams.Questions ON EXISTS (SELECT * FROM online_exams.Exams WHERE"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": "SELECT Home_Phone RIGHT JOIN (SELECT SUM(Assessment ))\n AS MICHALWIDDYONISCHEDFIRLSUNSCENTZIMINVLINGSTATSURGENSELOTUSANTHETRIFLESENERRYFRACTORKINSBOTTLEHATNECUOMPILOGEUTS"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "SELECT SUM(Assessment )INNER JOIN (SELECT Middle_Name )\n\n\n AS SELESENJEREMYVATUSHEALGINGKODBOLDUNLZACHAHITAVSKANMELPASADIVFULLIGNIAIOTAGROBWUOQ8EFLX1C5N6"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": "SELECT Last_Name , Type_of_Question_Code RIGHT JOIN (SELECT Gender_MFU )\n\n\n AS TOZERJAYEALYAMHAILAUNWAKACHEBADARNIRVANNAPIDDURISATNEKIONASKEMELIZABENDAIRAH"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "SELECT Home_Phone INNER JOIN (SELECT First_Name RIGHT OUTER JOIN online_exams.Exams ON Type_of_Question_Code <0FULL JOIN online_exams.Exams AS aryg1ttei8r"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "SELECT AVG(Assessment )\nFULL OUTER JOIN (SELECT Exam_Date , Home_Phone )\n\n AS SESCEEPBADIMARISENCASTHETCHOCOPHAGEDIKSUNGANJAKEYVIAQITMOSUMFILDERIATUWAXAFTAMACRODO"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "SELECT Home_Phone INNER JOIN (SELECT Type_of_Question_Code ) AS EHEMD ON Valid_Answer_Text < 12.00180638104325335088983914235864117589177090992213792095604524167812"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "SELECT COUNT(Date_of_Answer ) AS DateOfBirth FROM (SELECT * FROM online_exams.Students WHERE Gender_MFU = 'male' INNER JOIN online_exams.Student_Assessments ON Cell_Mobile_Phone >= 0) AS numrID ORDER BY Date_"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "SELECT Home_Phone LIMIT 22 OFFSET 310060123291809846191312162777447540961166375038880057173090355974991548472667496585202854338312536252260870164570976893106963805100564390156347314055529078"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "SELECT AVG(Assessment )\n\n\n INNER JOIN (SELECT Gender_MFU , COUNT(*) INNER JOIN online_exams.Exams ON EXISTS (SELECT Type_of_Question_Code LEFT JOIN (SELECT Gender_"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "SELECT Exam_Date RIGHT JOIN (SELECT First_Name LIMIT 2)\n\n\n \n\n AS VARGOSASIS ON Cell_Mobile_Phone <3 INNER JOIN online_exams.Exams AS listofCoventryEntryIDESEqcDATiRIG"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": "SELECT Home_Phone , Valid_Answer_ID GROUP BY Date_of_Answer \nLIMIT 87833292688684515273638571148247619173065694639181025409050490799891"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "SELECT *\nINNER JOIN (SELECT Gender_MFU WHERE EXISTS (SELECT DISTINCT AVG(Date_of_Answer ), First_Name )) AS NEXSWEDENJELLENSITES1NEP14RTHALENTUS3LIVIKELEKZWIDGEFRU2TIMM4"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "SELECT SUM(Home_Phone )LIMIT 5221630341701334427573613291259777550409723183988671058553260245620357085257614080054154946"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "SELECT Home_Phone RIGHT OUTER JOIN (SELECT Satisfactory_YN ) AS TzayAeDj2p3w9mVvJX1bqKQg8k7sZCx6Eu4iPlB5nHFcG0hUOIoLdqWtR"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": "SELECT Last_Name RIGHT JOIN (SELECT Valid_Answer_Text )\n\n\n AS for ON EXISTS (SELECT COUNT(First_Name ), SUM(Middle_Name ), Email_Adress );"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": "SELECT Home_Phone , Students.Home_Phone ORDER BY Middle_Name LIMIT 905981516133022251826583565464029236038782859678827247080904577204839730136890076177974196963106857854903149944113412"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "SELECT SUM(Home_Phone ) INNER JOIN (SELECT Home_Phone ) AS and ON EXISTS (SELECT Question_Text ) LIMIT 0"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "SELECT Products.product_name INNER JOIN (SELECT Order_Items.product_name )\n\n\n    \n\n AS RODUCTKASEVERMUNDIMILZENJOBHELXFONALEDIFORYOSCHADECROPLAGATPOCAITCISN"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "SELECT Order_Items.payment_method_code INNER JOIN (SELECT DISTINCT COUNT(Addresses.order_item_id ))\n\n\n  \n\n AS T ON EXISTS (SELECT SUM(*)) INNER JOIN customers_and"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": "SELECT COUNT(Customer_Orders.customer_phone )\n\n\n INNER JOIN (SELECT Order_Items.customer_name , Products.customer_id ) ON Customers.customer_address = customer_phone ;"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "SELECT order_id , SUM(Customers.address_details )\nLIMIT 21474836482232646788112845463710572366633053125536581719013586391626290431661144155987246054693418687440762123252707289614385089097"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "SELECT COUNT(address_id )\nFULL OUTER JOIN (SELECT DISTINCT product_id FROM customers_and_orders.Products WHERE Products.product_id = 1 ORDER BY order_date LIMIT 10) AS WATER1 ON Products.product_name <= 100000\nLIMIT 30;"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "SELECT COUNT(*)\nRIGHT OUTER JOIN (SELECT * FROM customers_and_orders.Products) AS product ON order_id = 'ProductOrder' LIMIT 1;"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": "SELECT SUM(Customer_Orders.product_name )\nFULL OUTER JOIN (SELECT * FROM customers_and_orders.Customer_Orders WHERE order_id = 'customers_anD') AS customer ON Customers.product_name > Customer_Orders.product_type_code ORDER BY Order_Items.custo"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "SELECT MIN(Customer_Orders.product_id )\nLIMIT 1000000010008000010000000110010100170011111011001000720000011077753380900110010010000050000000050404326552060010000110702560353057150422002712190736661468333328674450023696429541666666"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "SELECT order_status_code WHERE Addresses.address_id = 0\nINNER JOIN (SELECT MAX(*))\n\n AS YOU ON EXISTS (SELECT Products.product_name FROM customers_and_orders.Products WHERE product_id = '1') INNER JOIN customers_and_"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "SELECT Products.customer_phone LIMIT 0 OFFSET 1000050003100100000001088384300241188187514504055657030026372025573046105639221623120480603695642874190578901727763213531251545357324568594979297799"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": "SELECT Products.payment_method_code LIMIT 60000210010305080609020261214300000702700281722254032045395006540074480063215478955163823690433136775240635194954210179731843304113699669434777898296450"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "SELECT MIN(Customer_Orders.product_id )\nFULL OUTER JOIN (SELECT DISTINCT COUNT(*)ORDER BY address_id , payment_method_code , customer_number LIMIT 3244301150002000028000030000000324714"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "SELECT AVG(Customer_Orders.product_id )\nLIMIT 2200000500003165252319176799011235141315395828388029092133105930903076027789568474800503326300924076560074496368641008165005434114046642289"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": "SELECT order_status_code INNER JOIN (SELECT COUNT(Addresses.address_id ) ORDER BY payment_method_code LIMIT 0)\n\n\n   \n AS DOUBLEDLY ON Products.customer_name ="
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "SELECT order_status_code FULL OUTER JOIN customers_and_orders.Products ON EXISTS (SELECT COUNT(Addresses.payment_method_code )) INNER JOIN customers_and_orders.Products ON EXIST"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "SELECT order_status_code , address_id , customers_and_orders.Addresses.payment_method_code ORDER BY Customers.product_id LIMIT 164812805823172289334550282516491599104218116400"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "SELECT COUNT(Customer_Orders.customer_number )\n\n\n INNER JOIN (SELECT Order_Items.customer_number )\n\n AS WATKENZELDERUYBOWELSCHIPGERPJOKERGUNBERRYBOYSDINHONNE"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "SELECT AVG(Addresses.customer_address )\nLIMIT 20004 OFFSET 12103524120000115030753616015560020000373317404001120992064500312523588814131008449545779834961578682956702718286684211906739085"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": "SELECT Products.payment_method_code RIGHT JOIN (SELECT SUM(Products.payment_method_code ))\n\n\n  \n\n AS N ON Customers.payment_method_code < 8000 RIGHT JOIN (SELE"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": "SELECT SUM(Addresses.address_id )\nGROUP BY Products.product_name , product_name LIMIT 0"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "SELECT COUNT(Customer_Orders.customer_number )\nINNER JOIN (SELECT COUNT(address_id ))\n\n  \n\n AS KONGUANDAEL1V0NX2HOOZ4KBA9B8P3DSM5QJENFYSYGAAWJV6"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": "SELECT order_status_code ORDER BY address_id LIMIT 1112040954900972033275712180139593645291915143522371189889917387785462416481375563058479655239868656673255464875080609470442826"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "SELECT order_id ORDER BY Order_Items.customer_name , address_id \n\n\nLIMIT 212813141264672729069977017528971047985397922908078162315585936203444662545874069541719180432147333700385049"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "SELECT COUNT(address_id )\nGROUP BY order_status_code , address_id ;"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "SELECT AVG(Addresses.product_price ) LIMIT 3010603500285030204080953813393710561901237726151645652909597049116725882248321217463394694727795564531844974325524893498732359914570007247357868283600"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "SELECT order_status_code RIGHT OUTER JOIN (SELECT SUM(Addresses.address_id )\n\n\n INNER JOIN customers_and_orders.Addresses AS SUXHOLD ON product_price = '2-1' INNER JO"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": "SELECT DISTINCT SUM(Customer_Orders.payment_method_code )RIGHT JOIN (SELECT Customer_Orders.payment_method_code )\n\n\n AS PUNGEMADE ON EXISTS (SELECT MIN(*) R"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "SELECT COUNT(Customer_Orders.customer_id )\nFULL JOIN (SELECT COUNT(Customer_Orders.customer_phone ))\n\n\n AS EENZERSKYBINAUNGATALAGIANCOOLDIALUMASHITMEGONUSU"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": "SELECT AVG(Addresses.address_id )\n INNER JOIN (SELECT SUM(*), COUNT(*) ORDER BY Order_Items.customer_id , Products.product_name ) AS SELLERS ON EXISTS (SELECT AVG(Addresses.address_id"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "SELECT MIN(Addresses.payment_method_code )\nLIMIT 2;"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": "SELECT DISTINCT SUM(Customers.product_price )\n\n\n       \nFULL OUTER JOIN (SELECT MAX(*) FULL JOIN customers_and_orders.Products AS P1G2D3Q7K4U9V5B"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "SELECT SUM(Products.product_id )\nFULL OUTER JOIN (SELECT DISTINCT COUNT(*)RIGHT JOIN customers_and_orders.Order_Items AS SERIALS ON address_id = -1 ORDER BY product_name , order_item_id )\n\n \n\n\n"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "SELECT SUM(address_id )\nINNER JOIN (SELECT order_date , address_id )\n\n\n AS EASTFRONTED ON order_date = Customers.payment_method_code ;"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "SELECT AVG(Addresses.customer_address )\n\n\n INNER JOIN (SELECT SUM(Customers.payment_method_code ))\n   \n\n AS TUZYKQD1HG7J3W6NDA4B8EF0AD9F2BA5860"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "SELECT SUM(Customer_Orders.address_id )\nINNER JOIN (SELECT DISTINCT COUNT(*) INNER JOIN customers_and_orders.Addresses ON Order_Items.customer_address = 3 ORDER BY Customers.order_id , order_item_"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "SELECT order_status_code , address_id INNER JOIN (SELECT SUM(address_id ), AVG(Addresses.address_id ))\n\n\n AS dterSDAudictalCodeIDDERSOECTURATEOLYBOCCKcPfQ3nIg9Zq7j"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "SELECT MIN(Customer_Orders.product_price )\n\n\n INNER JOIN (SELECT MAX(Customers.product_price ))\n\n AS OFQUEENDINGALONEMINYHUNFANCHEDROETZLIEJOOILBISKILLIMODUWAGGADAM"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": "SELECT DISTINCT SUM(customers_and_orders.product_name )\nINNER JOIN (SELECT MAX(customers_and_orders.product_name ))\n\n AS WELL ON Addresses.payment_method_code = 1 INNER JOIN (SELEC"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "SELECT MIN(Customer_Orders.customer_id )\nLIMIT 10440045177525608899335047481279138095239035971601573430379311402629288914986100815872006822184927590005000077543043978843883365558675002178104375006460"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "SELECT Order_Items.customer_id FULL JOIN (SELECT MAX(Customers.product_id ))\n\n\n AS DaeYJKvjNnR9PVqG6wH5h2sQk1BfMl8EZzxbF0pU7Ie4LgA3"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "SELECT COUNT(address_id )\n                          \nINNER JOIN (SELECT MAX(Addresses.address_id ), customer_name , order_status_code )\n\n AS EMAIL"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "SELECT order_status_code INNER JOIN (SELECT SUM(Addresses.order_status_code )\nWHERE Order_Items.order_status_code > Customer_Orders.order_item_id INNER J"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": "SELECT SUM(Customer_Orders.customer_name )\nINNER JOIN (SELECT SUM(Customers.customer_address ))\n\n  \n\n AS EXA ON Products.customer_name = 4100000;"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "SELECT order_id RIGHT JOIN (SELECT Products.payment_method_code )\n\n\n   AS ELFKBOLPOTVENDGATYZONSKIMMALAGSTRUTUANJETSPORHIGCHURTULUNIKEIRNITAIAIDODEQXCISO"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "SELECT order_status_code WHERE address_id = (SELECT * FROM customers_and_orders.Customer_Orders ORDER BY Customer_Orders.customer_id ) GROUP BY Customer_Orders.customer_name , Customer_Orders.customer_email ORDER BY order_item_id LIMIT 0;"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "SELECT address_id , SUM(address_id ), COUNT(*), MIN(product_name )\n\n\n INNER JOIN (SELECT * FROM customers_and_orders.Customer_Orders ORDER BY order_date , Products.customer_id , Order_Items.customer_id , Custome"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "SELECT COUNT(Customer_Orders.customer_name )\nINNER JOIN (SELECT MAX(*)) AS ISHALMASCHKOLENAMITREEUREMANJONPATUNDAIDISSAKEBERMANFETERBEDEGELIMAROTIAGABRYLZOPTADIOGICANNIBULATIONNIKV"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "SELECT COUNT(Customer_Orders.customer_phone )\nWHERE Addresses.order_item_id = 2122163977237827151322332430682860893876011748182586143735984612456964596699367594344788707907919"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "SELECT MIN(Customers.customer_id )\nINNER JOIN (SELECT SUM(Customers.customer_id ))\n\n AS ELIZABETH ON Customers.customer_id < 0FULL JOIN customers_and_orders.Custome"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "SELECT order_status_code ORDER BY Customers.payment_method_code LIMIT 2202850244060223326142534383501194913295930679977421057443768463917482789431147557470459521009480231216321898312575785415"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "SELECT order_id \n\nWHERE Addresses.product_price = 1\n\n INNER JOIN (SELECT Products.product_price ) ON product_name <-1;"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": "SELECT order_status_code \n\n\n INNER JOIN (SELECT DISTINCT SUM(Addresses.address_id )) ON Addresses.address_id = 0;"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": "SELECT Order_Items.payment_method_code RIGHT JOIN (SELECT COUNT(Products.product_id ))\n\n\n AS orl2g3i4z6nWx5VQLKvZ9hFYjXoAiz1GwBtbD8uE7HfRkJyU"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "SELECT SUM(address_id ) AS SEMOLY LIMIT 32225675027231838332836134488204701581680754812902977170097990946406070241134265468651430665310041281555793210377449846496147194211545222594695650956789056"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "SELECT SUM(Products.product_price )\nINNER JOIN (SELECT COUNT(*), Products.product_price , product_price LIMIT 45004)\n\n   \n\n AS BEDESCALTSHUMBERSUMSURVEMENTMATERIALDIAGN"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "SELECT SUM(Customer_Orders.customer_id )\nINNER JOIN (SELECT Order_Items.customer_id )\n\n  \n\n AS EMAILTOMATIOBANDAISEMUDEZAMJOSPEGERWONKVY7Q2F5N6XG"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "SELECT MIN(Customer_Orders.address_details )\nINNER JOIN (SELECT COUNT(customers_and_orders.Addresses.payment_method_code ))\n\n  \n AS EH ON address_id > 2100"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "SELECT AVG(Customers.address_id )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN customers_and_orders.Order_Items AS OrderingOrderID ON product_id = customers_and_orders.Products.product_name ORDER BY customer_id )\n\n\n\n    AS C"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "SELECT COUNT(Customers.customer_id )\nWHERE Addresses.address_details = 12474977293028489955121846270017793957108768381664229470881326142074191169658501543250831008376024763589083\nIN"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "SELECT order_status_code INNER JOIN (SELECT SUM(Addresses.product_price ))\n\n\n AS islandersman777jr0b9z2wx8f4lvg3d5qhps6iVXyJKYWsI1aCcFuRkLQB7"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "SELECT COUNT(Customers.payment_method_code )\n\n\n INNER JOIN (SELECT DISTINCT SUM(*) RIGHT OUTER JOIN customers_and_orders.Products AS tlebtzvltfchlllkpomntu\n\n\n AS e"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "SELECT order_status_code WHERE Addresses.payment_method_code =Customer_Orders.product_name INNER JOIN (SELECT SUM(Products.payment_method_code )) AS YGYKHENT"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "SELECT DISTINCT COUNT(Customer_Orders.customer_id )\nINNER JOIN (SELECT Order_Items.customer_number , order_item_id INNER JOIN customers_and_orders.Customer_Ord"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": "SELECT MIN(Customer_Orders.customer_id )\nINNER JOIN (SELECT SUM(customer_name ))\n\n AS TENKIDERISFEMALISTEJOBESKIOCZYXLOVWYSV3C2ASG8TTYAQ7NG1NTAAH6BNDRNS9P0D5N"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": "SELECT DISTINCT COUNT(Customers.product_type_code )\n\n\n INNER JOIN (SELECT SUM(*)) AS NEGATIVEDISTANCEALGICENTYZINGFREQUENCYBACTERITYSUNKDRUMPERCENTAGE1FRESHPRICECURRENTSTOCKINASENGBANGELONG_TIMEOUTHOLDED3RNDL"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "SELECT AVG(Customer_Orders.customer_phone )\nINNER JOIN (SELECT customers_and_orders.customer_name )\n\n AS THE ON EXISTS (SELECT COUNT(Customers.customer_phone ), Products.custom"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "SELECT DISTINCT COUNT(Customer_Orders.customer_name )\n\n\n INNER JOIN (SELECT AVG(Addresses.address_id )) AS KUCEKERS2EURDESSES0JOEIN1FNSZTENALERADAM7PTSOLS8COCWET6Q9B3H"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "SELECT SUM(Customers.product_price )\n\n\n \nINNER JOIN (SELECT COUNT(*)) ON Products.product_name = 1"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "SELECT SUM(Products.product_name )\nINNER JOIN (SELECT COUNT(*), Products.product_name )\n\n  \n\n AS YAMANKOLIMENONAVATTAVAUYOSITGARBACCHIRZHALASDADOVNUTOJINI"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT SUM(*) INNER JOIN customers_and_orders.Order_Items AS customer1 ON customer_name = Customer_Orders.product_id ORDER BY order_item_id , Customers.customer_id )\n\n\n\n  \n\n AS is ON E"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "SELECT COUNT(Customer_Orders.customer_number )\n\n\n INNER JOIN (SELECT COUNT(*) WHERE customer_phone = 1FULL JOIN customers_and_orders.Customer_Orders AS wirldert1f2c"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "SELECT AVG(Customers.customer_id )\nFULL JOIN (SELECT SUM(*) FULL JOIN customers_and_orders.Addresses\n\n AS VANETSES ON Customer_Orders.payment_method_code >\n-1FULL JOIN"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "SELECT DISTINCT SUM(Customers.product_id )\n\n\nINNER JOIN (SELECT DISTINCT COUNT(Products.product_id ), Products.product_price , product_id , Products.product_nam"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "SELECT MIN(Customer_Orders.product_name )\nINNER JOIN (SELECT MAX(Customers.product_name ))\n\n  \n\n AS ECHWONLYY ON Customer_Orders.product_name = 1\nFULL JO"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "SELECT COUNT(Products.product_id )\nINNER JOIN (SELECT COUNT(*) WHERE Addresses.customer_id = 4393878906522173629055560271628151211405832192148847246880255718083394997401191310"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "SELECT MIN(Customers.customer_number )\nLIMIT 30000 OFFSET 10000000011003000640001011130391210422403723554536339948181759672560651474321340541627852907226663205638805008800905040021490420080053428"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "SELECT COUNT(customer_name )\n\n\nLIMIT 349000216822162418671433230039129925116020423057153537271777873855807550541904010988697040964574684410291364100520034843784865562883158495958731254316228974618"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": "SELECT SUM(Customer_Orders.address_details )\n\n\n INNER JOIN (SELECT COUNT(*)GROUP BY order_item_id , customers_and_orders.customer_number ORDER BY order_date )"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "SELECT order_id , address_id , product_id , customers_and_orders.customer_id , payment_method_code , address_id , address_details , order_status_code , payment_method_code , customer_number , payment_method_code , product_id , cust"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "SELECT order_id , SUM(order_id ), Products.customer_id , COUNT(Customers.customer_id )\nGROUP BY Addresses.product_id , customers_and_orders.product_id , product_id , Pro"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": "SELECT COUNT(Customers.payment_method_code )\nINNER JOIN (SELECT AVG(*) FULL OUTER JOIN customers_and_orders.Products ON product_id = 200006221417167585270148302093151874269725"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "SELECT AVG(Addresses.payment_method_code )\nFULL JOIN (SELECT COUNT(address_details ), customer_email , payment_method_code , address_details , MIN(*) LEFT OUTER JOIN customers_and"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "SELECT Name RIGHT JOIN (SELECT COUNT(Address ))\n\n\n      \n\n AS ERKJUEVZYDARBAXESPYSWHOL1F6ED9B0DF1045497846191562172930389533754726590782716241122127740482825"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "SELECT Building_ID INNER JOIN (SELECT MIN(Address ))\n\n\n     \n\n AS HUKELLYJENMARTZERTHYSWETHGONLITTYKALSTSSBHOBISDSWEVQXC4SLDAT8_O2ROC6hk1b3aTv7gEj9f"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "SELECT DISTINCT COUNT(Address ) AS or LIMIT 532173315144918482855251678272219057757383695371239791088138903505400030000400000005201000005323000101452004410109946115974100296960070587556604006700331787240862620491440"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "SELECT COUNT(Population )INNER JOIN (SELECT SUM(*))\n\n\n\n AS NINE ON Region_ID = 1.1822784827142925678736772432165701072035137533285612791 FULL OUTER JOIN (SELECT SUM(*))\n"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "SELECT Building_ID , SUM(Address ), Address LEFT JOIN (SELECT Region_ID )\n\n\n     \n AS PICNOLINGEDBANDMASSPURCHYZECVADJACSENGLKASISETHSATHAPGUTONIELAOCANORLAGOSEUND"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": "SELECT COUNT(Capital )\nINNER JOIN (SELECT Building_ID , Number_of_Stories , SUM(Building_ID ))\n\n   \n\n AS ZHYFAAWQZVJNFPXDIAOCOLCADOSIOAENRBAOHLASDAOTPKKKAAT"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "SELECT Region_ID FULL OUTER JOIN (SELECT SUM(Area ))\n\n\n   \n\n AS EETESTER ON Completed_Year = 1.0004000000;"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "SELECT COUNT(Population ), Population , Building_ID ORDER BY Area ;"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "SELECT DISTINCT SUM(Building_ID )FULL JOIN (SELECT Name WHERE Completed_Year <3) AS TOLRZ0PV ON Population = 2.7357717664830883696138964185816343398252055392326"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "SELECT COUNT(Population )\nLIMIT 219230181540354420222701081023603988112812131425995733491756642898775034165966677572804737655569781970874595489325846248971009636852119643305326110594152901743897104420581827"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "SELECT Building_ID , SUM(Building_ID ), MIN(Area )\n\n\n INNER JOIN (SELECT Area GROUP BY Name ORDER BY Population LIMIT 2) AS INFLATIENTIZATIONWORDBQUExhCYXcKv1AjZHV"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT Population INNER JOIN region_building.region\n\n\n AS LJBQP1V ON EXISTS (SELECT * FROM region_building.region) LEFT OUTER JOIN (SELECT Po"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT MAX(Number_of_Stories ))\n\n\n AS QPQV8F4JWNDY5DT2KZ7D0BUNLYM1GD9DFAABA6C3E57AC461742ED591689673565392218851164363755332901"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": "SELECT Building_ID WHERE Capital = 2 LIMIT 47850270075132822171648471026872390354037384624258874455542308564440158125610057114979669499590971832191534974314989632795439078606873509575782822"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT MAX(Name ))\n\n\n  \n\n AS EYE_FEMALEKANJAS1STMAAV8P0DYQBUL5Z2SABS16YS4NDG9ITW7ACAFIS3O11IADFRU6CDSAOTRBAHXEAM"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "SELECT COUNT(Building_ID )RIGHT OUTER JOIN (SELECT Region_ID )\n\n\n AS EASTALPURGOSZANASOPULABILIAVAMATIKARAONJOMCYAITELKAZNOVOKOLOBODAYPRISMAFEDIANTAHIMBUDHAOROCHADIENU"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT COUNT(Completed_Year )) AS aJnF0dAaZBV3k6P4c1pqjyX2lKhM8s9Q7IgGwWbHUBAu5tLzEIAvxRbmTmCf"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "SELECT COUNT(Name )GROUP BY Region_ID LIMIT 22003027000210081478186745339936162044102300293848395958502677017025892464174660763215407512495619283473147116696377213313885721197421043568553065"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "SELECT Number_of_Stories RIGHT JOIN (SELECT Name LIMIT 2)\n\n\n AS ENS ON Building_ID < 12121416190210654535221848.37309913231729242801075066756798338097114715904934275577407857"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": "SELECT Number_of_Stories , Region_ID ;"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "SELECT Building_ID \nGROUP BY Region_ID ORDER BY Number_of_Stories LIMIT 214328184830231701294055677909427938221065646812253745326034137827195075580095431420421590347162636761129394904114735"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": "SELECT COUNT(Capital )GROUP BY Population , Number_of_Stories ORDER BY Region_ID LIMIT 434"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "SELECT AVG(Capital )\nWHERE Building_ID = Capital ;"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": "SELECT Region_ID , SUM(Region_ID )\n\n\nLIMIT 10258070305048451660721237881817752278131466381084245736294032155667891120655949352046116493263444744327542582383166339955731003909628589825"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "SELECT DISTINCT SUM(Completed_Year )\n\n\nFULL JOIN (SELECT COUNT(*)ORDER BY Number_of_Stories , Population , Area , Address LIMIT 168000093729107744154538132217643624015535202716"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": "SELECT Number_of_Stories , MIN(Region_ID )\n\n\n INNER JOIN (SELECT COUNT(*), Region_ID )\n AS NUMABABLY ON EXISTS (SELECT *) ORDER BY Population , Address LIMIT 1"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "SELECT Number_of_Stories \nINNER JOIN (SELECT MAX(Region_ID ))\n\n AS YGONDAJYOLANNAHIMOUFINGACATIALICASISDANGENLYMEXICOIANAROSCOPESBIRCHADECOUNTAKEDEVITABODUZALEUNQUENIKOINI"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "SELECT AVG(Area )\nFULL JOIN (SELECT Region_ID , SUM(*)RIGHT JOIN region_building.region\n\n AS IREAEEN ON Completed_Year = 0FULL JOIN (SELECT Region_ID , SU"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": "SELECT DISTINCT COUNT(Address )\nINNER JOIN (SELECT Region_ID , Name LEFT OUTER JOIN region_building.building AS ZEEXDZWYKdJ4l7wQqm2M\n\n\n AS IISCEABILITY ON EXISTS"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "SELECT COUNT(Number_of_Stories )\n\n\n  \n\n INNER JOIN (SELECT SUM(Region_ID ), Number_of_Stories , Region_ID )\n AS to ON Building_ID = 6332925001349010008100\n\n   \n\n INNER"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "SELECT Region_ID GROUP BY Building_ID LIMIT 0;"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "SELECT Number_of_Stories \nFULL JOIN (SELECT SUM(Region_ID ) ORDER BY Region_ID , Region_ID LIMIT 57827)\n\n AS toAJBZEAAHC3ASCE4PK9AEBB8F7FAQL6X2V5G"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "SELECT Region_ID , SUM(region_building.region.Address )RIGHT JOIN (SELECT Building_ID INNER JOIN region_building.region\n\n\n AS TjuhntrKohl1FhqfEo6xWv3L2"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "SELECT Name RIGHT JOIN (SELECT Population LIMIT 5)\n\n\n\n  \n\n AS FUARIA ON EXISTS (SELECT DISTINCT COUNT(Capital ) ORDER BY Name LIMIT 3)"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "SELECT SUM(Capital )\nLIMIT 21 OFFSET 3201450013183512141023111570550005008641004010753003200165828884733309922277760804217010778563250404425389729061959853698902653197394820633494376724571310"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "SELECT COUNT(Population )LIMIT 31813273611190421771612151401095877204317706428785047752524443800761"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "SELECT SUM(Capital )RIGHT OUTER JOIN (SELECT COUNT(*), Region_ID LEFT OUTER JOIN region_building.region AS huiphianciatacos ON building.Name = 'Mia'\nGROUP BY Population"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "SELECT AVG(Capital )\nINNER JOIN (SELECT Population , Capital INNER JOIN region_building.region ON building.Name = Region_ID INNER JOIN (SELECT AVG(Capital ) AS cai"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": "SELECT AVG(Address )LIMIT 2160140222960992315102633111824273067002055953639061304751219388064173796285425849773598458904661003"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "SELECT SUM(Address ) AS BNCEBBSEBOVADASBAGQCATROSKZYHJLHS\nINNER JOIN (SELECT MAX(*) FROM region_building.building, region_building.building, region_building.buil"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "SELECT Integration_Platform.Analytical_Layer_Type_Code LIMIT 103323461058241822010420483977754542134026603857156479098781956293027281637971259546686112568449455254717430074147098318811"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "SELECT AVG(Analytical_ID )\nRIGHT JOIN (SELECT COUNT(*) FROM government_shift.Channels WHERE Channel_ID = Service_Details ORDER BY Channel_ID , Customer_ID )\n\n AS GOOGLASSED ON EXISTS (SELECT *GROUP BY Pattern_Recogni"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "SELECT COUNT(Customer_Interaction_ID )\nWHERE Analytical_Layer.Channel_Details < -1FULL JOIN (SELECT COUNT(*)) \n\n AS ISPIONAL ON EXISTS (SELECT COUNT(Customers_and_Services_ID ))\n"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "SELECT MIN(Analytical_ID )\nRIGHT OUTER JOIN (SELECT * FROM government_shift.Channels WHERE Services.Service_ID = 0 INNER JOIN government_shift.Services ON Customer_Interaction_ID = 2 ORDER BY Service_ID )\n\n\n\n    "
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "SELECT SUM(Customer_Details )\nINNER JOIN (SELECT DISTINCT COUNT(*) AS EOF LIMIT 32000003999070016021803143067291357884701274670979917395522962133244465157879259021122833954910233559642036"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT Pattern_Recognition ) AS EKGPIANJARVANAFETALYLENZPISATMESDIGBORUEGAIDIFICIOTTIOUTCAMELEHITRAOOCODULINGNILDEHYSLAFTURINOGIAOPIMONADOLEDIAN"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "SELECT Service_ID INNER JOIN (SELECT Services.Analytical_Layer_Type_Code )\n\n\n \n AS toHangenkolunjeekesengiandiebbeleegomtegheissoinweitungskeidstokvapasikwurtsijssetdakforsljostuogalh"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "SELECT Integration_Platform.Analytical_ID GROUP BY Analytical_Layer_Type_Code LIMIT 1000000100000100500000904181709288050106057191520704049442511784598163974274321012213662454996777263775"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "SELECT Service_ID INNER JOIN (SELECT Services.Integration_Platform_Details ORDER BY Services.Analytical_Layer_Type_Code LIMIT 0)\n\n\n    \n\n AS serviceIDsZNIDEROJODIELBEDIAALISPVHGAS"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "SELECT Service_ID INNER JOIN (SELECT * FROM government_shift.Services) AS GOVENETYSTART1SERVICESEARCHING ON Service_Details = 'C:\\Program Files\\Governs' GROUP BY Service_ID ORDER BY Customer_Interactions.Service_Details , governm"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": "SELECT COUNT(Customer_Details )\nLIMIT 569332548262878290118277030245039080017773849131647906087000437642322983644761914353484805415654075532097664327946991"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": "SELECT DISTINCT SUM(Analytical_ID )\nWHERE Analytical_Layer_Type_Code \n\n <Pattern_Recognition LIMIT 80000626280001128341906316816362360308024781833100259959011317987529393738125714"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "SELECT SUM(Analytical_Layer.Status_Code )\nRIGHT JOIN (SELECT * FROM government_shift.Services WHERE Customer_ID = 790) AS RIGHTSHIP ON EXISTS (SELECT SUM(Analytical_Layer_Type_Code ), Pattern_R"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "SELECT Customer_ID INNER JOIN (SELECT * FROM government_shift.Customers WHERE Customer_ID = 1 ORDER BY Customer_Interactions.Integration_Platform_Details , Pattern_Recognition )\n\n\n \n\n AS ifinutialalatiaeiebeijenmjakntje"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "SELECT Integration_Platform.Integration_Platform_Details , Service_ID \n\nORDER BY Customer_Interaction_ID LIMIT 2000000022000000104000090650602080703088902836781222380139464575255540010099171557005811"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "SELECT AVG(Customer_ID )\nINNER JOIN (SELECT Integration_Platform.Status_Code FULL JOIN government_shift.Services AS inkreijlejskeinpwohrijstvodirvezh\n\n\n AS L"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "SELECT COUNT(Integration_Platform.Services_and_Channels_Details )\nRIGHT JOIN government_shift.Customer_Interactions ON Customer_Interactions.Status_Code = (SELECT COUNT(Integration_Platform.Services_and_Channels"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "SELECT AVG(Customers.Integration_Platform_Details )\nINNER JOIN (SELECT Integration_Platform_Details , Customers.Analytical_Layer_Type_Code RIGHT OUTER J"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "SELECT COUNT(Customers.Analytical_ID )\n\n\n INNER JOIN (SELECT MAX(*), Pattern_Recognition , SUM(Pattern_Recognition ), COUNT(Customers.Analytical_ID )\n\n\nFULL"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "SELECT Service_ID \nLIMIT 10671809420000576096135875154095012316805033482888149821884611590811207044391755687924052564773029763687434527346999421049387854175193584475612852160621008570090206301099041318"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "SELECT AVG(Customer_ID )\n\n\n  \nINNER JOIN (SELECT SUM(*)LIMIT 0 OFFSET 10000000300001112010002348371627441550674565402856185736390655203326254969130019322006430784621100082460932970889810228058"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "SELECT AVG(Analytical_ID )\nWHERE Services.Analytical_ID ='kuh ';"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": "SELECT MIN(Customer_Details )\nFULL OUTER JOIN (SELECT COUNT(*))\n\n   \n\n AS EOALING ON Service_ID = '3123-53977' INNER JOIN government_shift.Customer_Interactions AS ctxnthkdprfjr"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "SELECT Service_ID INNER JOIN (SELECT Services.Pattern_Recognition RIGHT OUTER JOIN (SELECT COUNT(*) GROUP BY Pattern_Recognition LIMIT 5273245115538161718785860234812133928"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": "SELECT SUM(Integration_Platform_Details )\nWHERE Integration_Platform.Analytical_Layer_Type_Code \n\n <1 GROUP BY Channels.Services_and_Channels_Details ORDER BY Analyti"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "SELECT Integration_Platform.Analytical_Layer_Type_Code RIGHT JOIN (SELECT SUM(*) FROM government_shift.Services WHERE EXISTS (SELECT * LIMIT 2) INNER JOIN government_shift.Services ON Customer_ID ="
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": "SELECT Integration_Platform_ID \nGROUP BY Pattern_Recognition \n\nLIMIT 2 OFFSET 5286024173958441034773048117589473318352723431555543229256495388546162213872093192665365740"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "SELECT MIN(Customer_Details )INNER JOIN (SELECT * FROM government_shift.Services) AS SOURCE ON Pattern_Recognition = 0;"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "SELECT Integration_Platform.Customers_and_Services_Details , Service_Details , MAX(Status_Code )\nRIGHT JOIN government_shift.Integration_Platform ON government_shift.Integration_Pla"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": "SELECT COUNT(Customer_Details )\nWHERE Integration_Platform_ID = 742\n\n ORDER BY Analytical_Layer.Service_Details , Service_Details ;"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "SELECT SUM(Integration_Platform.Integration_Platform_Details )\nFULL JOIN (SELECT Pattern_Recognition , COUNT(*))\n\n  \n\n AS ESSENTIALeGATEVETTAEJODUORUNNEDIUSESiMISENHANDS"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "SELECT DISTINCT COUNT(*)\nINNER JOIN (SELECT MAX(*) LIMIT 1 OFFSET 207316041109825604824963599462227398857751537345033114485211917490164761320564574145400183226363055638087297906408908"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "SELECT Status_Code INNER JOIN (SELECT DISTINCT SUM(*)) AS SELLER ON Customers.Integration_Platform_Details = 1;"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": "SELECT AVG(Customer_Interaction_ID )\nLIMIT 667708827178960481214267729863347998730683818161959505421104055454978369732203937466542110164132372257980746915903100022432475287320102107706727897"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "SELECT AVG(Analytical_ID ) INNER JOIN government_shift.Services\n\n\n AS DATISCHEDESSEJUDEMUNBENANAMAGASIAZAZABEKLARHA ON Service_Details =1"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "SELECT DISTINCT SUM(Pattern_Recognition )\nINNER JOIN (SELECT Analytical_Layer.Integration_Platform_Details INNER JOIN government_shift.Services ON Pattern_Rec"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": "SELECT Integration_Platform_ID INNER JOIN (SELECT Pattern_Recognition )\n  \n\n AS istheselenicantatikenchenmiederteiertiggezelfahrtstjosttivinierenanntyetekleiteretskreutztenpforenzoaktionistepnopr"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "SELECT Integration_Platform_ID , SUM(Customer_Interaction_ID )\n\n\n INNER JOIN (SELECT MAX(*), COUNT(*)) AS TEGRT1LH6CNW8F4B9CB7GZEALQYFLKTSLSV5CCHMELDUAT2I3"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "SELECT SUM(Customer_Interactions.Service_Details )\nRIGHT OUTER JOIN (SELECT * FROM government_shift.Customer_Interactions, government_shift.Customer_Interactions) AS CustomerINTEGERS ON Customer_Interaction_ID > 0 ORDER BY Customer_Intera"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "SELECT Integration_Platform.Customers_and_Services_ID ORDER BY Customer_Interaction_ID LIMIT 2"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "SELECT vehicles_id FULL JOIN (SELECT id FROM vehicle_rent.Vehicles WHERE name = 'Fujina' ORDER BY customer_id )\n\n\n AS COUNTED ON Vehicles.vehicles_id >= 8500000;"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "SELECT COUNT(City_fuel_economy_rate )\n\n\n    \n\n INNER JOIN (SELECT Highway_fuel_economy_rate )\n AS EJANOSSAUZHENVARDOVIRAELTOBALIVAROCADORYKAMAZISAUNTAIMNIK"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": "SELECT COUNT(customer_id ) LIMIT 49933256916190218490910781423131222354057552787504820793615178868706786302638462834458931586085377212744752401086211546656432906"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "SELECT Renting_history.Notes ORDER BY Notes LIMIT 1;"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": "SELECT Renting_history.customer_id GROUP BY Type_of_powertrain LIMIT 0 OFFSET 110000100300020000000000010000000104111530355022178953700322524071610454044432060386895288046197874125518092347886490277775"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "SELECT Renting_history.Combined_fuel_economy_rate ;"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "SELECT Renting_history.customer_id , total_hours \nINNER JOIN (SELECT Renting_history.customer_id , SUM(City_fuel_economy_rate ), Notes )\n\n AS PELFARINGEKEN"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "SELECT AVG(Annual_fuel_cost )\nFULL JOIN (SELECT SUM(*)FROM vehicle_rent.Customers, vehicle_rent.Renting_history)\n\n AS CURVENTIVEGATE ON Highway_fuel_economy_ra"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "SELECT SUM(Renting_history.vehicles_id )\nINNER JOIN (SELECT AVG(Highway_fuel_economy_rate ) RIGHT OUTER JOIN vehicle_rent.Customers AS iENiENSILES\n\n\n\n\n\n"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "SELECT MIN(Renting_history.age )\nLIMIT 3 OFFSET 57500500500061004000060800250100081630200104006009022285570011207023350107673009392077644550888058371448446949277874408466361317561924155926187500"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "SELECT SUM(Renting_history.customer_id )\n                \nWHERE Type_of_powertrain = 1 RIGHT OUTER JOIN (SELECT COUNT(Discount.membership_credit )) ON membership_credit"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "SELECT COUNT(Annual_fuel_cost )\n\n\nFULL JOIN (SELECT Highway_fuel_economy_rate )\n\n AS DEXALON ON Discount.Model_year = 0 ORDER BY Customers.Annual_fuel_cost ;"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": "SELECT Vehicles.Annual_fuel_cost ;"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "SELECT SUM(Renting_history.discount_id )\n\n\n INNER JOIN (SELECT Notes FULL JOIN vehicle_rent.Discount ON Discount.Highway_fuel_economy_rate <discount_id R"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": "SELECT vehicles_id ORDER BY Discount.Notes LIMIT 908110253070653620471299491711386050408748884600071524641877275589581635851004528003401807619374320080052294339332147839632384137595265410"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "SELECT COUNT(Renting_history.name )\nFULL JOIN (SELECT COUNT(Renting_history.name ))\n\n\n  AS LADENZIEK ON Model_year = 0 RIGHT OUTER JOIN vehicle_rent.Vehicles ON Vehicles.id = 'f' GROUP BY V"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": "SELECT vehicles_id ORDER BY Discount.Highway_fuel_economy_rate LIMIT 121946000125432245509974331036881349605516247632762878231775972634797042126490358421306727542087155977114818"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "SELECT Renting_history.age FULL OUTER JOIN (SELECT Notes LIMIT 3)\n            \n\n\n\n AS SULFORTKVANELINGESPONENTAL_BASEDEVACTSASCYCLIAABSWATTLIFMIGDAMUDAHUNT"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "SELECT COUNT(Annual_fuel_cost )\n\n\n  LIMIT 1050336090270118281629390870591744262557248878134895643568551149463667103496195847006280371220453842302343000531465861105999159909666910090660508701"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "SELECT COUNT(Renting_history.membership_credit )\nINNER JOIN (SELECT SUM(*))\n\n  \n\n AS with ON age = 4 LIMIT 6;"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "SELECT SUM(Renting_history.customer_id )\n\n\n  \nINNER JOIN (SELECT Highway_fuel_economy_rate , Notes ORDER BY Model_year LIMIT 1) AS UBVGHMENZAJAYPOPKALEUASF"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "SELECT MIN(City_fuel_economy_rate )\nINNER JOIN (SELECT City_fuel_economy_rate )\n\n   \n\n AS EXBV2F1D4AYG8Z7K9P0QTUJ5CBAHETW3O6MAA"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "SELECT vehicles_id FULL JOIN (SELECT id ORDER BY Model_year )\n \n\n AS R1V3Kv8ApLZqQW7XuPxFfBwH2h5sEcG0MtjUJN6IaC4iTkOzRbYm9"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "SELECT MIN(City_fuel_economy_rate )\nINNER JOIN (SELECT SUM(*), Type_of_powertrain , COUNT(customer_id ), customer_id )\n\n  \n\n AS DATE ON membership_credit = 1"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "SELECT AVG(Model_year )\nRIGHT OUTER JOIN (SELECT id RIGHT OUTER JOIN vehicle_rent.Discount\n\n AS EASYZORPEDYS3AS5J7V4IS8KW0LS6X\n\n AS TURBECIEM2MYS1CQ"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": "SELECT AVG(Discount.Combined_fuel_economy_rate )\n\n\n INNER JOIN (SELECT COUNT(*) LIMIT 0 OFFSET 25002100520000009000333399028067004000125200061622443001000000172889465075600358823291358186412"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "SELECT Vehicles.Combined_fuel_economy_rate LIMIT 2200000500004999999178008883001000000001660001123213254618441020509522334360402826903424155814377610075776559572369458580556411632784290939486789"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "SELECT DISTINCT Vehicles.Annual_fuel_cost \n\nRIGHT OUTER JOIN (SELECT * FROM vehicle_rent.Vehicles, vehicle_rent.Renting_history) AS VEHICLE ON vehicles_id = Vehicles.vehicles_id ORDER BY Vehicle"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": "SELECT Vehicles.Combined_fuel_economy_rate \nINNER JOIN (SELECT Type_of_powertrain FULL OUTER JOIN vehicle_rent.Customers ON customer_id = 1 GROUP BY total_hours , discoun"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "SELECT Notes LEFT OUTER JOIN (SELECT DISTINCT Vehicles.Highway_fuel_economy_rate INNER JOIN (SELECT Notes RIGHT OUTER JOIN vehicle_rent.Vehicles ON Type_of_powertr"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": "SELECT COUNT(Renting_history.customer_id )\n INNER JOIN (SELECT Renting_history.customer_id )\n\n  \n\n AS MINISTERHALLINGAUJYENASANNEALESSAIMONVATKAIRAWAPAAAGBUNTAURIDANGARADAMIAISULGUMDHAITI"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "SELECT MIN(City_fuel_economy_rate )\nLIMIT 4622437173327161239258936018710485035154023779760476345782043186730685638572944986664285413497214095573258659542"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": "SELECT SUM(age )\nINNER JOIN (SELECT Highway_fuel_economy_rate , age LIMIT 2)\n\n AS VENTURINGLY ON Model_year > 3.1 RIGHT JOIN vehicle_rent.Renting_history\n\n AS KENJY"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "SELECT Notes LEFT JOIN (SELECT SUM(Annual_fuel_cost ))\n\n\n \n\n AS VIA ON Model_year < 1.00 GROUP BY City_fuel_economy_rate ;"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": "SELECT SUM(age )LIMIT 4888995877131029363038151857283933274035604543142056175401123465674816886946268423792468445550904556625877510047640097229663786807215549763248899190787330741178981"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "SELECT Vehicles.Annual_fuel_cost ;"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": "SELECT SUM(age )\n INNER JOIN (SELECT Renting_history.name , Notes WHERE customer_id > 138028702345015033883055432448371189074)\n\n AS ZEALYMATICUZZOILANDIONNQF9V3JZ8C"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "SELECT vehicles_id ORDER BY Discount.Highway_fuel_economy_rate LIMIT 2 OFFSET 41820343511121400082740553788005733877510285048158907216082630676960964100539544542172264782913"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "SELECT Vehicles.City_fuel_economy_rate RIGHT JOIN (SELECT COUNT(Renting_history.discount_id ) ORDER BY Type_of_powertrain )\n\n\n AS ELVENTALEELYZLENEDECONOMICOLANTHIAJIUSCITTY"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "SELECT DISTINCT SUM(Renting_history.customer_id )\nINNER JOIN (SELECT DISTINCT Vehicles.discount_id )\n\n   \n\n AS KAKASEROLHELZYEZEJONWOSECLXIAU8xV6Qv5n7u0p4g"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": "SELECT DISTINCT Vehicles.Model_year RIGHT JOIN (SELECT Notes )\n  \n\n AS LUXURY ON City_fuel_economy_rate < 22;"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "SELECT Renting_history.customer_id GROUP BY Notes ORDER BY Customers.vehicles_id LIMIT 11251857265834132910391416377720285044554230404625005003"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "SELECT DISTINCT COUNT(Model_year )\n INNER JOIN (SELECT COUNT(membership_credit ))\n\n  \n\n AS UNABLEZING ON EXISTS (SELECT Type_of_powertrain FROM vehicle_rent.Vehicles WHERE Model_year = '2' INNER JOIN vehicl"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "SELECT AVG(Annual_fuel_cost )\nINNER JOIN (SELECT SUM(*) ORDER BY Notes LIMIT 1 OFFSET 2642543402448704660759027358918441323142888471530583201229985209819041716540050335736261110"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "SELECT Student_Loans.datetime_detention_end \nINNER JOIN (SELECT COUNT(Detention.behaviour_monitoring_details ), datetime_detention_end ) AS RIDVANTIAJAPANESEMANYHEREPURCHASEAUNIAMC"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": "SELECT Ref_Detention_Type.datetime_detention_end , SUM(Ref_Detention_Type.date_from ), Detention.student_address_id ;"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": "SELECT Ref_Detention_Type.student_id GROUP BY Classes.class_id , Detention.detention_id ORDER BY Behaviour_Monitoring.bio_data ;"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "SELECT COUNT(Behaviour_Monitoring.class_details )\nINNER JOIN (SELECT DISTINCT Teachers.transcript_details , event_date INNER JOIN cre_Students_Information_Systems.Classes"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "SELECT DISTINCT COUNT(Detention.transcript_details )\nINNER JOIN (SELECT AVG(*), datetime_detention_end INNER JOIN cre_Students_Information_Systems.Detention ON event_"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": "SELECT AVG(Achievements.detention_type_code )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN cre_Students_Information_Systems.Detention   AS EMAIL\n\n AS ISKASING ON Transcripts.detention_type_code"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "SELECT Achievements.achievement_id , datetime_detention_start , student_loan_id , class_id , event_date , datetime_detention_start , detention_type_code , Detention.bio_data ;"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "SELECT AVG(student_id )\n\n\n  ORDER BY Classes.class_id , Students.transcript_details ;"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "SELECT COUNT(Detention.detention_summary )\nINNER JOIN (SELECT SUM(Behaviour_Monitoring.detention_id ))\n\n AS VARNOILUJORVALJOITYFODICANDSZAEDAZNURGIRASIANELEHENISI"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "SELECT COUNT(student_id )\n                          \nLIMIT 52760507543260135481255231611773742305728453224141536253885642946006913590689019174058562266338910479939"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "SELECT COUNT(event_id )\n  \nINNER JOIN (SELECT SUM(*)FULL OUTER JOIN cre_Students_Information_Systems.Behaviour_Monitoring AS tntecservice ON student_id = student_id GROUP BY transcript_id ORDER BY bio_d"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "SELECT AVG(achievement_type_code )\nINNER JOIN (SELECT Teachers.detention_summary , Detention.datetime_detention_start , Detention.address_type_code )\n\n\n AS SEBGENSTEINERMARK"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "SELECT AVG(Behaviour_Monitoring.detention_summary )\n\nINNER JOIN (SELECT Ref_Achievement_Type.datetime_detention_start , event_id LEFT JOIN cre_Students_"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "SELECT MIN(student_address_id )LIMIT 43977220148177612185813142364262409744730256070441116759049209699005579786550976835274780722945673740288319366334100874690862105335710943886152248123917"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": "SELECT COUNT(Classes.detention_id )\nINNER JOIN (SELECT MAX(*) ORDER BY detention_type_description LIMIT 141513140312290026942028888077904027250133583075553468227093105637162317765079062105606539"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "SELECT COUNT(Behaviour_Monitoring.student_loan_id )\nWHERE achievement_details ='Acev, Vilekimyel' LIMIT 3;"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": "SELECT COUNT(student_id )\n                          \nRIGHT JOIN (SELECT SUM(*) AS VETCHISPENDED INNER JOIN cre_Students_Information_Systems.Classes\n\n AS DEPARTMENTALIZ"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "SELECT Student_Loans.class_id FULL OUTER JOIN (SELECT MIN(Detention.other_details )FULL JOIN cre_Students_Information_Systems.Classes\n\n\n AS IVARYER ON Teachers.class_id"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "SELECT AVG(student_id )\nFULL OUTER JOIN (SELECT Transcripts.detention_summary , Behaviour_Monitoring.amount_of_loan )\n\n AS SIDERAMAENGJEMOLASUZCANESEINKISDET"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "SELECT AVG(student_id )\n\n\n INNER JOIN (SELECT achievement_id ) AS EHESJM ON Teachers.bio_data = Classes.other_details ;"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "SELECT COUNT(student_details )\nFULL OUTER JOIN (SELECT DISTINCT Teachers.transcript_details WHERE Students.student_details = 1) AS DEBTYVIRUSALDEBOUTFULLMILESJOUISENIELAK"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "SELECT Behaviour_Monitoring.datetime_detention_start INNER JOIN (SELECT DISTINCT COUNT(*) AS LENGTH FROM (SELECT *)LIMIT 2147483648641501456797191427872053118929353280570037246050491256174736"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": "SELECT COUNT(student_id )\nINNER JOIN (SELECT Behaviour_Monitoring.detention_summary INNER JOIN cre_Students_Information_Systems.Classes ON EXISTS (SELECT Behaviour_"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": "SELECT Ref_Detention_Type.student_loan_id INNER JOIN (SELECT Transcripts.detention_summary LIMIT 8)\n \n\n AS DacumiaeaLaeinbHoeinealiebeJodegardtienenreisgleichteriertn"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": "SELECT COUNT(student_id )\n\n\n INNER JOIN (SELECT DISTINCT SUM(*)WHERE Ref_Detention_Type.date_from = 611000 INNER JOIN cre_Students_Information_Systems.Ref_Event_Types"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "SELECT SUM(student_details )\nINNER JOIN (SELECT Ref_Detention_Type.detention_id ORDER BY Transcripts.bio_data LIMIT 22003042182226674548393723190582717385544135724252033"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": "SELECT Ref_Detention_Type.student_loan_id , SUM(cre_Students_Information_Systems.transcript_id )RIGHT JOIN (SELECT Ref_Detention_Type.student_loan_id )\n\n\n   \n\n AS E"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "SELECT AVG(student_id )\nLIMIT 1098936404560340050336717182028303524388899577729161259115827704214373215010723194625903110394468661004"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": "SELECT Transcripts.detention_type_description \nINNER JOIN (SELECT SUM(Detention.behaviour_monitoring_details )FULL JOIN cre_Students_Information_Systems.Detention \n\n\n AS DEV"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": "SELECT Transcripts.detention_id WHERE Behaviour_Monitoring.behaviour_monitoring_id =Ref_Event_Types.student_address_id INNER JOIN (SELECT Transcripts.detentio"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "SELECT Ref_Detention_Type.transcript_details GROUP BY Detention.address_id LIMIT 104360653325408828995770354813452376321514202726561149083868390046195410081201377869556750891710"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "SELECT Achievements.bio_data , address_details ;"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "SELECT COUNT(Behaviour_Monitoring.transcript_details )\nINNER JOIN (SELECT COUNT(Ref_Detention_Type.transcript_details )\n\n INNER JOIN cre_Students_Information_Sy"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": "SELECT Behaviour_Monitoring.achievement_id RIGHT JOIN (SELECT DISTINCT MAX(Ref_Detention_Type.datetime_detention_start )\nLIMIT 170113284017121088206899091128442358182589162214"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": "SELECT Ref_Detention_Type.other_details INNER JOIN (SELECT Transcripts.class_details LEFT OUTER JOIN (SELECT Ref_Detention_Type.other_details )\n\n\n AS EaL"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "SELECT Behaviour_Monitoring.datetime_detention_start INNER JOIN (SELECT Ref_Detention_Type.datetime_detention_start )\n\n\n AS Bcv4b0B7XF6V5zYx9G2QK1"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": "SELECT COUNT(student_id )\n\n\n  \n\n INNER JOIN (SELECT Teachers.detention_summary , SUM(*) GROUP BY Ref_Detention_Type.behaviour_monitoring_details )\n\n\n   \n\n AS EINSTE"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "SELECT Achievements.achievement_id RIGHT JOIN (SELECT SUM(student_id ))\n\n\n   \n\n AS INTSERVEMENTED3rdPersonToHit4thPersonInSpace5thPair6thPlacingFavorites7thTabs8fHidingOfSellouts9score1stScore2ndScore3thirdScore4thScore5"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "SELECT DISTINCT SUM(achievement_details )\nLIMIT 3000090110609040808920884400872423161122181729755548953315786470853035843650541920068795726271394397743999000837631205500738254004773149946011009"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "SELECT Behaviour_Monitoring.datetime_detention_start INNER JOIN (SELECT Transcripts.amount_of_loan )\n\n\n AS ETAUOUVICI ON Students.behaviour_monitoring_details >"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "SELECT COUNT(student_id )\nINNER JOIN (SELECT * FROM cre_Students_Information_Systems.Students) ON cre_Students_Information_Systems.Students.teacher_details = 'Suite';"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": "SELECT MIN(student_id )INNER JOIN (SELECT Teachers.detention_id , event_date , datetime_detention_start INNER JOIN cre_Students_Information_Systems.Behaviour_Monitoring\n"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "SELECT Achievements.teacher_id , teacher_id , Teachers.class_id , Classes.student_id , Student_Loans.student_id , Students.achievement_details , Classes.date_of_transcript "
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "SELECT AVG(Achievements.achievement_details )\nLIMIT 1 OFFSET 2;"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": "SELECT COUNT(student_id )\nLIMIT 2133504211607044124828681318362029583210559027693716407567255764972288730165393530931595"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "SELECT Ref_Detention_Type.student_id , student_loan_id \nINNER JOIN (SELECT Transcripts.detention_summary )\n\n AS HONOREDEURASJOLIANANTELLENUNDECHBELUISTERER ON Detenti"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "SELECT COUNT(Classes.detention_id )\nINNER JOIN (SELECT MAX(*) ORDER BY detention_id , event_id , cre_Students_Information_Systems.Classes.detention_id )\n\n\n AS DZENCHFORDNUT"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": "SELECT COUNT(Classes.detention_id )\n\n\nFULL OUTER JOIN (SELECT SUM(Ref_Detention_Type.behaviour_monitoring_details ), datetime_detention_start , Behaviour_Monitoring.detention_id )\n\n"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": "SELECT achievement_id GROUP BY Classes.student_details LIMIT 112310094911364567425058253728161723892635647540229914241355694415478876321057204880841906006321013474395666187812046094275470592933"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "SELECT COUNT(event_type_code )\nINNER JOIN (SELECT COUNT(student_loan_id ))\n\n AS WENDRAMMERKIRTLINGDURSTLLELLUORBANGCOPPERNODISIANJAPANADAYACHOCALEMARTHIHVIAELASFEDEROLY"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "SELECT address_id , SUM(student_details ), Transcripts.detention_type_code GROUP BY Detention.student_address_id LIMIT 326550802040221613321703004518281085305834113601384846142567261215"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "SELECT Ref_Detention_Type.class_id \nINNER JOIN (SELECT COUNT(event_date ))\n\n AS ENSFETCHEDMANTENIDIGAICADMINESGODW0J1KXDST8CZQ9AG5HUBAEC4YFSB10FRV6DASLAM2P7RTY3"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "SELECT Student_Loans.class_id LIMIT 8593911000737255733126727281517011903102085186470993069385040897724487400263523455813546846167907321272960871495365228876975659842175257248394736734443253734275909"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "SELECT Student_Loans.datetime_detention_end , student_loan_id , event_date ;"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "SELECT AVG(student_details )\n\n\nLIMIT 1216002417110104181419021222454230931395652028443958278967789964907559794869887631451538475480505733253756606323621582949687092189553616973596117724011066"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "SELECT AVG(Addresses.bio_data )\n INNER JOIN (SELECT Behaviour_Monitoring.datetime_detention_end , achievement_type_code ) AS EZJF3W2E5UH4D0YBXQ8CK9T1A7V6P"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": "SELECT COUNT(student_id )\n\n\n INNER JOIN (SELECT DISTINCT SUM(*)) AS ANAILDADANAYPALASIA2K5ES3YG8JQ1OLOCXVZBCHUV6F7HWGT9_UNECELDSONIMISIGLYNITRAMEDABEUMTINCTL"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "SELECT COUNT(Classes.detention_id )\nINNER JOIN (SELECT SUM(Behaviour_Monitoring.date_from ), amount_of_loan , event_id FULL OUTER JOIN cre_Students_Information_Systems.Detention\n"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "SELECT Ref_Detention_Type.datetime_detention_start INNER JOIN (SELECT DISTINCT MAX(bio_data ))\n\n\n AS ASATZJFLAAEQVYUEDDIFMAGUEKAZON1SETT6BAC7AFG4W5C8"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "SELECT AVG(Addresses.bio_data )\nFULL JOIN (SELECT Behaviour_Monitoring.student_address_id )\n\n  \n\n AS ILLUSTRATIONALITY ON EXISTS (SELECT AVG(Addresses.bio_data ))"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": "SELECT Behaviour_Monitoring.transcript_details INNER JOIN (SELECT Ref_Detention_Type.teacher_id )\n\n\n AS EINYORITAISCRIPTQVIAZOLOCJBBAECHICKIMMOUXALFUADGAMH"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": "SELECT Behaviour_Monitoring.detention_id INNER JOIN (SELECT Transcripts.bio_data )\n\n\n AS ofSeptember01st20131230332449005722704325272617116620463664982125672945791a8697868d4f5e6"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "SELECT DISTINCT SUM(event_date )\nLIMIT 459102560902067304816121344377838291764887770795028574554228083272675014034390549651824098966190763695999582347421971185310002178149955560032109733253516"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": "SELECT DISTINCT SUM(student_details )\n\n\n INNER JOIN (SELECT SUM(Students_Addresses.datetime_detention_end ) AS RILW WHERE Students_Addresses.datetime_detention_end ="
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": "SELECT Behaviour_Monitoring.bio_data \nINNER JOIN (SELECT DISTINCT MAX(Detention.achievement_id ))\n\n AS YARIMANIKEALFURYBOLZICONVISCOFFEEUBLATOMBAHITORLYASENIOSRADIAK"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": "SELECT Behaviour_Monitoring.class_details , class_id ;"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "SELECT Ref_Detention_Type.class_details GROUP BY Detention.bio_data ;"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": "SELECT Achievements.date_to , datetime_detention_start , Detention.student_id , Detention.achievement_id , Detention.achievement_id , Detention.achievement_id ;"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "SELECT SUM(Classes.teacher_id )\nFULL OUTER JOIN (SELECT DISTINCT COUNT(*) FULL OUTER JOIN cre_Students_Information_Systems.Teachers AS sfr842001B3A0004C0D7067F6E5\n\n"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "SELECT MIN(student_id )\nINNER JOIN (SELECT Teachers.detention_summary )\n\n AS BYDUARDHARMATISASAIA ON EXISTS (SELECT DISTINCT Ref_Address_Types.student_id FROM cre_Students_In"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "SELECT AVG(student_id )\nFULL JOIN (SELECT COUNT(*) FROM cre_Students_Information_Systems.Behaviour_Monitoring, (SELECT student_id ), cre_Students_Information_Systems.Behaviour_Monitoring) AS c"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "SELECT AVG(student_address_id )\nWHERE Students.class_id = 211310772516485037992820457875963615570123641235464027607963"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": "SELECT Behaviour_Monitoring.datetime_detention_start INNER JOIN cre_Students_Information_Systems.Behaviour_Monitoring\n\n\n AS LENEGEDAT AS CHANGINGThe ON EXISTS (SELECT B"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "SELECT Behaviour_Monitoring.student_loan_id FULL OUTER JOIN (SELECT MAX(Ref_Detention_Type.achievement_details ))\n\n\n AS LEFTEURNEEMEDBODYCASTIDENNELITISUNTASWANZY"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "SELECT Achievements.student_details WHERE achievement_details <> (SELECT MIN(Detention.student_details ), datetime_detention_start )\n INNER JOIN cre_Students_Information_Systems.Transcripts\n\n "
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "SELECT Behaviour_Monitoring.datetime_detention_start INNER JOIN (SELECT Transcripts.behaviour_monitoring_details )\n\n\n AS SELECTBETEMERD1A2FAAQW4VZG3J"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "SELECT Books_Order.Author INNER JOIN (SELECT MIN(DateOrder ) FULL OUTER JOIN book_1.Books_Order\n\n\n AS DATE ON Books_Order.Author = 58900 INNER JOIN (SELECT"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "SELECT AVG(Author.Title )FULL OUTER JOIN (SELECT Title WHERE Orders.DateOrder > 4LIMIT 3)\n\n\n\n AS MINEISTS ON PurchasePrice = 1"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "SELECT Address WHERE Address \n<-3\n\n INNER JOIN (SELECT NumCC ) ON Title = DateExped FULL JOIN book_1.Books_Order AS pwjn2bf5l7gJ\n\n\n AS TOsDVt0R9vL6P4Q"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "SELECT NumCC LIMIT 32551226183900491022204788781145275523382825770113146548585416094067365919087696324463150442937649833742110517997320103305789074367609766932452695684972158181215842087357847005539"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": "SELECT NumCC LIMIT 8675037178513209526278949657536253919231516221118332112388048973500649844409946"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "SELECT Books_Order.PurchasePrice INNER JOIN (SELECT SUM(Author ) AS PX) ON EXISTS (SELECT Title , COUNT(*), ISBN RIGHT OUTER JOIN book_1.Client\n\n\n\n AS ILLUMIDATORS ON SalePrice = ("
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "SELECT IdOrder LIMIT 1 OFFSET 2333125113783634252218671475281637152677791166461706321947108855279580205073454433303823648716909743009874603907824904099762490224569843583307291301563648679712577514"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": "SELECT AVG(Name )\nINNER JOIN (SELECT SUM(Author_Book.DateExped ), DateExped , Name , Books_Order.DateExped FROM book_1.Book) AS METHODS ON Author = amount INNER JOIN (SELECT SUM(Author ) AS mnt"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "SELECT COUNT(Book.Author )INNER JOIN (SELECT Title , MAX(DateOrder ))\n\n\n\n  \n\n AS OTOHOXINGFANCHEMONICSTHORMESVARTILGIANCEKOSADIMOLRESTUNNITETALOCHENOZEPICONEPOTAMINATL"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": "SELECT amount LIMIT 5643700072512081730608823202680275033141328104840490315708516563611775739581879734599904744953465890466630022684621190690785950042477532156015467649337172955963074272678148825"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "SELECT SUM(Author.Title ) \nLIMIT 8500017187848110112151410403516384909263720292458392744596477762236332345892834323057674320066952554134627907422973249758084705130419049987465475087175518"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "SELECT idAuthor , SUM(Client.idAuthor )\nLIMIT 80000400048015080909940790810640055456778182760708566392656122275388859442905771635494323585730336584252098763200477311322413283754369317461909534"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "SELECT PurchasePrice RIGHT JOIN (SELECT Books_Order.DateExped )\n\n\n AS IBJMNQY4F5C2GG9XGB1H6A8I3WBAUZ7RmhKVgPkGV0jvnbGfxEsVTqwLTlDSdzOiDp"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "SELECT SUM(Author.DateOrder )\nINNER JOIN (SELECT NumCC FULL JOIN book_1.Book ON amount = 2)\n\n AS QHANATORCHIMYUAQUEUMURGANGWHAEENEDZRAeONKUNALAYARASFISDACI"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": "SELECT Name INNER JOIN (SELECT PurchasePrice RIGHT OUTER JOIN book_1.Book\n\n\n AS SELLING AS aFIT ON DateExped > Name INNER JOIN (SELECT PurchasePrice RIGHT"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "SELECT AVG(Book.Author ), Book.DateOrder , DateOrder ORDER BY Title LIMIT 3 OFFSET 10980001433157880882757235585165083448909819187743251026452401007095666958204846289712294907564"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "SELECT MIN(Client.DateExped )LIMIT 221231329096151827104616171901222499497970893655233967474525887435655433284068483064698775772095311438609631261283757321397312561005245295261150421594275846167813"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "SELECT MIN(Client.DateOrder )INNER JOIN (SELECT NumCC , SalePrice ORDER BY DateExped )\n\n\n\n AS LEOsZHQXo7A6KJFWf9iUvD2MVrx8G1njz4cTqEu"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": "SELECT SUM(Author )\nINNER JOIN (SELECT Title , MAX(amount ))\n\n  AS CHENGHENWYEJONSSERUNTOZINGDOUGHLANPOURISKURIDEVANSELVIRUITIANMEMMAKERMANNADLANGUTREBULATFOCCCHAMORRTHA"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "SELECT AVG(Book.idAuthor )\n\n\nLIMIT 31;"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": "SELECT PurchasePrice RIGHT OUTER JOIN (SELECT COUNT(Author ))\n   \n\n AS BOSEQNALIAISDONIEIOUFVATASLOLEDESKENITAKAZZYJUNMARKANAMURBAUMBACAPOBILTSUHADOCIDOMARINOVTELA"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "SELECT IdOrder ORDER BY NumCC LIMIT 450061629010022242533181713509909076428606726305855367565903466744035787948761489807057463756381110442723831512874215645439994762199490587214732169501390022"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT * FROM book_1.Books_Order)\n\n  \n\n AS BODY ON DateOrder = 1 ORDER BY Orders.IdOrder ;"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "SELECT AVG(Author.Name )LIMIT 3112519302400052001520253350675002755351175587800268823131744957030080012228047281004010183901389034721000084960879952906376009831996810746616484086112099457908564"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": "SELECT COUNT(*)\nRIGHT OUTER JOIN (SELECT * FROM book_1.Book ORDER BY Book.Name ) AS BOOKIDBANKNAMEBOOK ON Author = amount ORDER BY book_1.Orders.Address LIMIT 1;"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "SELECT Orders.Address WHERE amount = Author_Book.amount INNER JOIN (SELECT Name GROUP BY PurchasePrice LIMIT 20)\n\n\n\n AS MEELLSENALINISASZELANDETHANHARODOLPHORMILKATOS"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "SELECT COUNT(Books_Order.ISBN )\nFULL OUTER JOIN (SELECT * FROM book_1.Author) ON Books_Order.Author = 'Michael McNeill' ORDER BY book_1.Book.SalePrice LIMIT 1;"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "SELECT NumCC LIMIT 0 OFFSET 1494879251336391659012789113715332928556922758514342399123819581724961097409404777653050643210470577888100542026670087305356693199721874205445310545482580463909616134927"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "SELECT SUM(Books_Order.PurchasePrice )\nINNER JOIN (SELECT MAX(DateExped ))\n\n   \n\n AS PAGES ON DateOrder <idAuthor GROUP BY SalePrice , Name ORDER BY Client.Title LIMIT 1"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "SELECT COUNT(IdOrder )\nFULL OUTER JOIN (SELECT Title RIGHT JOIN book_1.Book AS nxM3A5iKvQ0m4j7Xt2DhNfEnVu8ybFgIpUWq9rGdwY6PzZs"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": "SELECT DISTINCT SUM(DateExped )\nFULL JOIN (SELECT COUNT(*) FROM book_1.Orders WHERE Books_Order.IdClient <= 2 ORDER BY Orders.Name , Orders.idAuthor , Orders.idAuthor , Name , idAuthor )\n\n \n\n\n AS isNamedByIndexOfAllThe"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "SELECT IdClient GROUP BY PurchasePrice LIMIT 0 OFFSET 1100121004042107736503027181417781955129946202645112839884329573564946747153725758433490320093604454383222134870962373169834790424"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "SELECT AVG(Author_Book.Name )\n INNER JOIN (SELECT MIN(DateOrder ))\n\n AS NUZNE ON PurchasePrice > 0 RIGHT OUTER JOIN book_1.Client AS ORB0URF2A7JV4YX3Q8"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "SELECT SUM(Book.idAuthor )INNER JOIN (SELECT Name RIGHT JOIN book_1.Client\n\n\n AS kolmz3rYvGs0fDqnKQjC5lb9e7wP4VcZXIhNg6u2RJxWpF"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "SELECT PurchasePrice , amount RIGHT OUTER JOIN (SELECT SUM(idAuthor ))\n\n\n   \n\n AS VREBOSKURVEDDOLAGODELADESKYAMITRANDAEOPYPAPNEKOJALLOVACRYMOGHOMARBAGIRFETZU"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": "SELECT Orders.DateOrder RIGHT OUTER JOIN (SELECT SUM(NumCC )INNER JOIN book_1.Author AS tpfq2\n\n\n AS MESSAGEED ON DateOrder = Client.DateOrder RIGHT OUTER JO"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": "SELECT Books_Order.amount WHERE Title <book_1.Books_Order.Author GROUP BY Name LIMIT 543993929057282757447817304734405536504822682620321166251903128767131416984569643396112518"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "SELECT COUNT(IdOrder )\n\nFULL JOIN (SELECT COUNT(idAuthor ))\n\n \n\n AS NEMIS ON EXISTS (SELECT SUM(*)) FULL JOIN book_1.Client ON book_1.Books_Order.IdOrder = 1;"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": "SELECT COUNT(Client.PurchasePrice )\n\n\nRIGHT OUTER JOIN (SELECT book_1.Books_Order.DateExped FROM book_1.Books_Order WHERE Books_Order.DateExped = 143400) ON Client.SalePrice <= Book.Name ORDER BY DateExped LIMIT 1;"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "SELECT MIN(Author.Title )FULL JOIN (SELECT Title )\n\n\n\n AS IOUMALPEDIAANAMENJUYAJAQDGAABACRIMKYMABIRAHITDAHLOLINAATLAYMEASISIRAPLIBAUNICIDODAIHAIADIBULUMARIFTZILO"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "SELECT COUNT(Client.Author )\nRIGHT JOIN (SELECT * FROM book_1.Orders WHERE Book.Title = 'Hear the Sorrow of The Gods' ORDER BY Author LIMIT 10)\n\n AS TOBACCOCHOOLBOOKNAMESEADBLOCKEDByBookID010005D1170F6C3A40991718254977281623141050"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "SELECT COUNT(Book.DateExped )FULL OUTER JOIN (SELECT PurchasePrice RIGHT JOIN book_1.Author\n\n AS SENSOR AS MANYAMATORSMANZADLAPARISCHEBEEHNITERQUASSAWAKAYOJIMENTAKEFISHONKIRM"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "SELECT AVG(Author_Book.DateExped )\nWHERE ISBN = 0\n\n INNER JOIN (SELECT DateExped , SUM(*) WHERE Books_Order.DateExped = Author_Book.DateExped )\n\n AS IN"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "SELECT ISBN INNER JOIN (SELECT DISTINCT SUM(DateExped ))\n\n\n  \n\n AS BUNY ON Client.amount = amount RIGHT JOIN book_1.Author AS mwajoo ON idAuthor <= 12 ORDER BY idAuthor , SalePrice ;"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "SELECT ISBN INNER JOIN (SELECT Orders.PurchasePrice )\n\n\n     \n AS REFUTURED ON EXISTS (SELECT SalePrice , PurchasePrice );"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "SELECT IdClient \nINNER JOIN (SELECT MAX(DateExped ))\n\n AS FORKFEREZEMUJAMMANICOSISVALLADYROYSETERLENADEES1CH7M6QNDLY4C9B3NT8PWHSTG0ECROPOTIOCAALANODOITREX2D"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "SELECT COUNT(DateExped )\n\n\n INNER JOIN (SELECT COUNT(Author )) AS EMANYBONTSVETRATION3rd5PM1st4KGUNF_TH2nd7MM14000CATM6MTAMX9QUEIGJHNDDINEWW8NMCISHLTIMLZO0"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "SELECT AVG(Author_Book.amount )\nINNER JOIN (SELECT IdClient , MAX(*)\n\n LIMIT 10000180399089821256067952958177826404788161401559039107094652511273569000520050592864803038483315"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "SELECT AVG(Author.Name )\nINNER JOIN (SELECT SalePrice , PurchasePrice INNER JOIN book_1.Book\n\n AS aiobatokaleelenyekuriloniktakutahanlumoDjemukuludoh\n\n AS forcetinmogdac"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": "SELECT COUNT(Author )\nWHERE ISBN = 72522162849671110953600170007378739152699190692947883318236589759030552050351260245670407868722014601790731454534487332\n\nINNER JOIN (SELECT COUNT"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": "SELECT Books_Order.NumCC GROUP BY PurchasePrice ORDER BY Title , Book.ISBN ;"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "SELECT AVG(Author.PurchasePrice )\nFULL OUTER JOIN (SELECT idAuthor , Author_Book.Name , ISBN ) AS SERIALIZED ON SalePrice = 49950968079063245298564116648346097650022491557231090251378288421011718473889212845391258"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "SELECT AVG(Book.idAuthor )\nWHERE ISBN = (SELECT Book.amount RIGHT JOIN book_1.Book ON NumCC > Client.SalePrice LEFT JOIN book_1.Book AS WUBAJQFo4C3Bc0\n\n\n AS ISBN2"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "SELECT ISBN INNER JOIN (SELECT Orders.PurchasePrice )\n\n\n\n   \n AS DESTINATION ON SalePrice = 10RIGHT JOIN book_1.Author AS ldgJnDUcG9WK5Mb8iZ3jF0sPqEaV7h"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "SELECT AVG(Books_Order.amount )\nLIMIT 3110100177500030000100000010025232840051992048123949271840953044325037223615786047572955586530077191624146780041788084698835966494304132633639973103470597500"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "SELECT ISBN INNER JOIN (SELECT Title RIGHT JOIN book_1.Author ON Books_Order.DateOrder > DateOrder INNER JOIN book_1.Orders AS TOBONX AS BOOKNUTKERSCENTERLEASTBOOKLISTSSEARCHINGFORTUNEMARK"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "SELECT NumCC LIMIT 860255716379906192023509855403400151395332788283078692975971787491222483611016743448062147738854559477600041003249421257039461066800565685326605437892072191857849973165098132327"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": "SELECT IdOrder RIGHT OUTER JOIN (SELECT MIN(Author_Book.idAuthor )FULL JOIN book_1.Orders\n\n\n AS aaandyenjangurudungmakunanokinonhuiimosapadukitilarikutamomogusasetpahnal"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "SELECT IdOrder ORDER BY Title LIMIT 4641326151216002514085225078234645187088013389472857352440209831282905175910304260278067944965113839756219556643127376873100321021053499904884157744165825"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": "SELECT COUNT(amount )\n\nORDER BY PurchasePrice LIMIT 1 OFFSET 1500011131816087141722378855774501203499591238425025247868982615580057663036653229190321"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "SELECT AVG(Name )\n\n\nFULL OUTER JOIN (SELECT Book.Author , SUM(*))\n\n   \n\n AS ILLITESHINCEED ON DateOrder = NumCC GROUP BY Author LIMIT 0;"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "SELECT NumCC LIMIT 399933231864001095362867124837295715253027161413193580476087175475991122902040984310038943426248904212868634539506642149584470490773014610105846465932332"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "SELECT AVG(PurchasePrice )\n\nFULL OUTER JOIN (SELECT Book.Author , NumCC FULL OUTER JOIN book_1.Books_Order\n\n AS SOONESIS AS LYKOPOLASURiEDLYFOURTHBRPALGORATETTOVARANNICI"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "SELECT COUNT(Author )\nINNER JOIN (SELECT MAX(*)RIGHT OUTER JOIN book_1.Book\n\n AS IERESDOUCHLORENZPOTHEARTLYKATTEETHROEDEADFUCKERSCIRCUITSTAUGISWTHECONICJASSEETOIDALYTOL"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "SELECT NumCC , amount WHERE idAuthor = Book.idAuthor INNER JOIN book_1.Books_Order AS sJlUgKVc0w8a4MsQFjfDnb7m3zXC5G2uAoTqxhYpZyL9i"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "SELECT NumCC LIMIT 322218781674155875778955203640292548114710651227576096994938133214332600193901764423307224643470791"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "SELECT COUNT(amount )\nWHERE ISBN > Book.PurchasePrice INNER JOIN (SELECT MAX(*) AS ENCYCLE, Name WHERE DateExped = Orders.SalePrice GROUP BY Author LIMIT 1 OFFSET 313141836171201"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "SELECT IdOrder WHERE Name =Name GROUP BY Client.DateOrder ORDER BY DateOrder LIMIT 1 OFFSET 108101160003190533832048705537652300352536245722125639285078295434151317893079090821285814"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "SELECT DISTINCT COUNT(*)\nFULL JOIN (SELECT * FROM (SELECT MIN(*), SUM(*)) AS SLAVE ORDER BY IdOrder )\n\n AS ECHOEVERALDED ON idAuthor = 1.2000;"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": "SELECT amount LIMIT 945783336014088573989672290240026953823992925481158203250286412151459471316541005598617351946309710436580497434622554427691856105376696339726068734553200408801067587267778393600"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "SELECT SUM(PurchasePrice )\nWHERE ISBN > Client.Author ;"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "SELECT PurchasePrice RIGHT JOIN (SELECT Title ORDER BY DateOrder LIMIT 2)\n\n\n\n AS MESSAGES ON Client.DateOrder <Books_Order.Author ORDER BY idAuthor ;"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "SELECT IdClient RIGHT JOIN (SELECT Books_Order.PurchasePrice ORDER BY PurchasePrice LIMIT 532)\n\n\n\n   \n\n AS ETSEORJENKANISESALMZWEDINVIODGNICYTU_AUNOCHPXHQ"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "SELECT NumCC LIMIT 2103;"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "SELECT COUNT(Books_Order.PurchasePrice )\nINNER JOIN (SELECT Orders.Author LIMIT 4)\n\n \n AS STURMILLMANJORCEVANDHENFRIEDBERGONEISLABUCHAMYOSALAYEVREEMPLATIAKROMMABADNICINI"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "SELECT COUNT(Author.Address ) AS aaorlyrle\nINNER JOIN (SELECT MAX(*) INNER JOIN book_1.Books_Order\n\n AS TEWORD ON Books_Order.Title = Client.Address GROUP BY SalePrice , amou"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "SELECT Name RIGHT JOIN (SELECT * FROM (SELECT AVG(*)) ORDER BY PurchasePrice LIMIT 1) AS SPACING_STATISTICS ON Orders.Name = Orders.Author ORDER BY Name LIMIT 12409701221512432736504211394863106053145517653077182067282657"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "SELECT AVG(Book.amount )\nINNER JOIN (SELECT amount , NumCC ORDER BY Title LIMIT 15)\n\n AS DEEPEDLINGJUDETheNameOfMyFaveAssetsAVAILABLEIDELAYTURNOEBULLYZALGUNNESRULKASVARATI"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "SELECT Rating INNER JOIN (SELECT COUNT(Book_ID ))\n\n\n      \n\n AS ENCOURAGEDONLITESFOLDERSYNDALYSHIFTENVATIOLYSSKORTHIANCEJUNTIAURACODOLDECOQISMEPARTIOSCOREAUMBASTRICOPHY"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": "SELECT AVG(Audio )ORDER BY Title LIMIT 2 OFFSET 11232011200099003739171457151901304460892029405423134750421287527462885702625581664873348346330411789066869186710946573247977453898"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": "SELECT AVG(Audio )ORDER BY Chapters LIMIT 1 OFFSET 26131231095991312321422178979302638570145361846257588602737486985441559166473241923631753907504090459336749665455297720587047"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "SELECT AVG(Book_ID )\nFULL JOIN (SELECT DISTINCT Book_ID )\n\n AS PATCHES ON EXISTS (SELECT COUNT(*)) RIGHT JOIN book_review.book AS BookIDBOOKRANDOLUTCATALOCADJUNCTIONBLOB\n\n AS SELECTING ON EXISTS (SELECT D"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "SELECT Readers_in_Million , MAX(book.Rating )\nWHERE Audio = 1;"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "SELECT SUM(Rank )\nINNER JOIN (SELECT AVG(Audio ))\n\n    \n\n AS FORWARDYKES ON EXISTS (SELECT COUNT(*)ORDER BY Title LIMIT 2 OFFSET 3615358567783227222833403050203464135517"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "SELECT Book_ID RIGHT JOIN book_review.book\n\n\n  \n\n AS LYNAMEDiMAT3R4F6JXKdB0uGQhWVZ2jn7CzUtfq1l8pc5mExOg9AaGVLkPvbmTrHsIo\n\n\n"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "SELECT Book_ID LIMIT 519781991058172448470011257715305720273575162218143765493466133201367087283839598423465051240542988692686689064976751104805545604481190911054090878531052507177925942404113389416948"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "SELECT Book_ID INNER JOIN (SELECT DISTINCT Pages RIGHT OUTER JOIN (SELECT review.Chapters FROM book_review.book)\n\n\n AS toBOOKYMES1A3D0BA2E91340673695389976C5F787400485749462522"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "SELECT Rank INNER JOIN (SELECT SUM(Pages ))\n\n\n      \n\n AS ETAKED ON Chapters > 17.00GROUP BY Type LIMIT 1323491301123360672888447025103220908048111657367915581909527"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "SELECT Book_ID ORDER BY Chapters LIMIT 5416039161727254826132978952347871556363712492030572285388854013558595544779869704024508364191834140832103346100430068864562160997909759667890539274816"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "SELECT Rating INNER JOIN (SELECT Title LIMIT 2)\n\n\n\n     AS BKXBG4Y3PJ1C8UZ6SS7D5M9WQH11A2F15233947E781777902533295344145089124097371349209546222845672636"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "SELECT DISTINCT SUM(Audio )\n\n\nWHERE Title = 'a' INNER JOIN (SELECT * FROM book_review.book) AS BOOK ON review.Book_ID > 1;"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "SELECT Book_ID \nFULL JOIN (SELECT AVG(Book_ID ))\n\n AS LONGLYASTERABLEABILITYSTARTEDYHINGORIENTISTSRIGGLESARTHOLICISMMARCHITECTRELLIFERIESSCRIPTURESANIMALCOMPUTATIONTRADERESEARCHKINDEPENDENCEDIAGENTRALIZATIONSEQUITYPR"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "SELECT AVG(Audio )LIMIT 22 OFFSET 334011317098111612151024553529180720404888804901365908338737392257447823388530277595311286025897349399796568665056321496995262858421967477769134617"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "SELECT AVG(Audio )LIMIT 61523336719092155187813342516285714378956947275445113979754817598088647624603530655877432474622975093100638990185000744666862109874267220140953373009636290784925"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": "SELECT AVG(Audio )FULL JOIN (SELECT Title )\n\n\n AS LISZENESTAKURASHAJATINHALAYTHARIMDAPOLYONANPITWIFBADAACHMACACRAMAGDROCVIBHYGAQTIDDAGBPAIAGUMEMRAOODAKSBAE"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "SELECT AVG(Book_ID )\nFULL JOIN (SELECT SUM(*) GROUP BY Readers_in_Million , Rank ORDER BY Chapters LIMIT 449173347148527232899681236347066108938775519160118544097137537151139"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": "SELECT Book_ID LIMIT 2140107080786618113023459957222046133325361628012726193440606250963975496779481769721400563744886877971206475864743581107295585159850056584304"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "SELECT Book_ID LIMIT 4641200090729186711995715244819251310273839175037205569407060754345472280795816088974235300140906112828689333018854105200952649774660534305620186127600054872100004100591587190499251718"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "SELECT AVG(Audio )\nINNER JOIN (SELECT Book_ID )\n\n AS THE ON EXISTS (SELECT MAX(Book_ID )\n\n INNER JOIN (SELECT COUNT(Chapters )) AS SLEEPINGLY ON EXISTS (SELECT DISTINCT * FROM book"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "SELECT DISTINCT COUNT(Manager )FULL OUTER JOIN (SELECT COUNT(Dish_Name ) LEFT JOIN (SELECT COUNT(Dish_Name )) ON EXISTS (SELECT DISTINCT COUNT(Dish_Name ) RIGHT JOIN restaurant_bil"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": "SELECT SUM(Level_of_Membership )\nINNER JOIN (SELECT MAX(Years_opened ), Name RIGHT JOIN restaurant_bills.branch ON branch.Branch_ID = 0 LEFT OUTER JOIN (SELE"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "SELECT AVG(Card_Credit )\nINNER JOIN (SELECT Name RIGHT OUTER JOIN (SELECT SUM(Manager ), Branch_ID , Level_of_Membership WHERE EXISTS (SELECT DISTINCT AVG(Card"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": "SELECT COUNT(Customer_ID )\n\n\n  \n\n INNER JOIN (SELECT MAX(*) ORDER BY Dish_Name LIMIT 2037171633123022673215283550663858181110265627772024062120227644934255514744096393623440113"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "SELECT SUM(Card_Credit )\n\n\n INNER JOIN (SELECT Years_opened LEFT OUTER JOIN restaurant_bills.customer AS ELDBEMELHUATAASaJANAMiUNG1mjq\n\n\n AS HAGIBIOBAOSNITZ"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "SELECT DISTINCT AVG(Customer_ID )\nWHERE Customer_ID = (SELECT MAX(Name ))RIGHT JOIN restaurant_bills.customer_order ON customer_order.Customer_ID = 1;"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "SELECT MIN(Customer_ID )\n\n\n  \n\n INNER JOIN (SELECT SUM(*)FULL JOIN restaurant_bills.customer AS TOHRAUNAEFAONJKORSAULWATALBENDEAUQELEREM\n \n\n AS UCHRADOOLVIKIAMIMANITU"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "SELECT Name ORDER BY Manager LIMIT 6474624291814289988122213253319362358276667012659640077359550893258115545482037986879574494498070390786972176584459731510963883157160976090632183478294099"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "SELECT DISTINCT COUNT(Customer_ID )\nINNER JOIN (SELECT Nationality )\n\n AS OFBACCO ON EXISTS (SELECT SUM(customer.Quantity ));"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "SELECT Level_of_Membership , SUM(Level_of_Membership ), MAX(Level_of_Membership ), MAX(*)\nGROUP BY Branch_ID ORDER BY Location_of_office ;"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "SELECT Nationality LIMIT 473012625779946233367378913157955271878228844642470489030584086205714490211349712191029609417061003"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": "SELECT SUM(Customer_ID )\n                     \nWHERE Branch_ID = 87880426070461049272957997908761428588868861817194822004740543444756495253215715161385358437775089867"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": "SELECT DISTINCT SUM(Years_opened )\n\n\n INNER JOIN (SELECT Nationality ORDER BY Dish_Name , Years_opened )\n AS ANCHORJEENINHUNK1LL2OL5UASM4D3LYPEDO0V8G6"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "SELECT COUNT(Nationality ) \nFULL JOIN (SELECT * FROM restaurant_bills.customer) AS cctv ON branch.Dish_Name = 'Korthan Bhai' ORDER BY Dish_Name , Branch_ID , Customer_ID ;"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": "SELECT COUNT(Customer_ID )\nINNER JOIN (SELECT SUM(*) AS UPN, Location_of_office , Branch_ID ORDER BY Dish_Name LIMIT 100010000014362948321134308816552697999176457508746203325652445772844996039"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": "SELECT Name ORDER BY Dish_Name LIMIT 349339918403028361625776748359841784513142455261788007820802370298939541166681057644732247442760753853508537842581276692243210165157217520033954909534"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": "SELECT Location_of_office INNER JOIN (SELECT MIN(Manager )) ON Name >-0.0004\n\n\nLEFT OUTER JOIN restaurant_bills.customer AS ALKEMY1stBhPd6UJZVnHk9mq8v2"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": "SELECT Branch_ID INNER JOIN (SELECT MAX(Level_of_Membership ) LIMIT 0)\n\n\n    \n\n AS GRANTED ON Name = 100.00 INNER JOIN restaurant_bills.branch ON Years_opened <1ORDE"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "SELECT DISTINCT COUNT(Location_of_office )\n\n\n INNER JOIN (SELECT Name ORDER BY Location_of_office )\n  AS DEBOSKIEENSTEINMELHUTZGIFIMMEUATTABSUMISCHOOLDICKERUNNERPURITAID"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": "SELECT DISTINCT SUM(Dish_Name )INNER JOIN (SELECT COUNT(*) FROM restaurant_bills.customer WHERE customer_order.Customer_ID = 8881 ORDER BY Dish_Name , Name , Branch_ID , Location_of_office )\n\n\n AS SELECT ON Customer_ID"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": "SELECT SUM(Customer_ID )GROUP BY Name ORDER BY Manager LIMIT 323003412252799481628153878243219267710452030809760405564746701222917586318117943200135973449666365714054794339537508907"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "SELECT Branch_ID LIMIT 1120 OFFSET 8121155141722104300441828231633267075385415530113290835302537982058563619279040893903170505746808468346065458529549777610105631507994177116414962117170955001859"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": "SELECT AVG(Card_Credit )\n\n\nWHERE Customer_ID = 1;"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "SELECT SUM(Customer_ID ), Customer_ID , Manager INNER JOIN (SELECT Nationality GROUP BY Dish_Name )\n\n\n AS PINGEMANESE ON Branch_ID = 15.0009553536012300407064162958151112"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": "SELECT Years_opened , COUNT(Years_opened )\n\n\n INNER JOIN (SELECT Nationality RIGHT OUTER JOIN restaurant_bills.customer AS natuvehleznernachtteelnetljativriestrundeniget\n\n\n"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": "SELECT MIN(Customer_ID )\n\n\n  \n\nGROUP BY Location_of_office , branch.Branch_ID ;"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "SELECT AVG(Customer_ID ) INNER JOIN (SELECT COUNT(*)\nLIMIT 100007 OFFSET 801506480604028451208573085103970998829021416369747240025582748962100321853152659359069551317659854202249053125"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "SELECT Name INNER JOIN (SELECT MIN(Card_Credit ))\n\n\n AS MAHONATANITASAHARILADAMURIMKOLMABARGULAGDUAYANSHIYVAKSUETEJOYALYANAWANTIAPACHIIDANGISKIHOLEMUNSAEVDAQENAPLODN"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": "SELECT SUM(Customer_ID )\nWHERE Customer_ID = 1RIGHT JOIN (SELECT * RIGHT OUTER JOIN restaurant_bills.customer_order  AS customerpwnedbyproductname ON customer_order.Customer_ID = Customer_ID )\n\n\n AS ETAIL"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": "SELECT AVG(Customer_ID )\n\n\n  \nINNER JOIN (SELECT MAX(Manager ), SUM(Branch_ID ))\n AS WELLERZJAMMERSKY ON Nationality < 2.8GROUP BY Level_of_Membership \n\nLIMIT 1"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "SELECT SUM(Club_Name )GROUP BY Team_Leader LIMIT 2 OFFSET 30171355302557750044122785342989771128104738232087354050229432151678394843605445566726180424904214360103"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "SELECT COUNT(*)\nLIMIT 844774046109833755045906414708917132957162325221254190132187437157847006727246679386211349965205630931654959085821308603988356950090748421092844634072247453375945053142689551064"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "SELECT AVG(Age )\nRIGHT JOIN (SELECT Overall_Ranking , SUM(*)ORDER BY Team_Leader , Nationality LIMIT 114201222645891318572512983940473890231059247094111617346054273567363048"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "SELECT MIN(Club_Name )\nLIMIT 123338393664002578168867291817132214778927406675684450266524454835953087347202310541259113212970579934622473701471519807928740000436046101413956335539853897643698251713"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": "SELECT Team_Leader , AVG(Overall_Ranking ), SUM(Age )\nINNER JOIN (SELECT Overall_Ranking )\n\n  \n\n\n\n AS OFDESSETTEES ON Team_Leader < 24.83119046499171822289740478972412"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "SELECT SUM(Club_Name )INNER JOIN (SELECT Name LIMIT 2)\n\n\n\n  \n\n AS DYJ ON EXISTS (SELECT MAX(Club_Name ))FULL JOIN club_leader.member ON member.Member_ID = 0;"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "SELECT COUNT(Name )\nRIGHT JOIN (SELECT MIN(Member_ID ))\n\n    \n\n AS ENSALIANAANESE ON Year_Join = 214748364841 RIGHT JOIN club_leader.member\n\n AS URKEDEORLOCCZUELIAO"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "SELECT COUNT(Club_ID )\n\n\n  \n\n INNER JOIN (SELECT Team_Leader )\n\n AS DADJITATUYAHAKARINRABALUMGAPANISIMEMUNTHULURAMMAHMATHUTTAASAKHIKEPANGVATSAABAJALEKAOSUKTOLIASTIKREETLAWRIDD"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": "SELECT SUM(Club_Name )\n INNER JOIN (SELECT COUNT(*)FULL JOIN club_leader.club_leader ON Nationality > +1 LIMIT 63700120104705027248845892895223849102539753065403633171916"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "SELECT AVG(Age )\nFULL JOIN (SELECT Overall_Ranking , SUM(Club_ID ), Nationality RIGHT JOIN (SELECT COUNT(*)) AS KAKPENF1AT6E5AD8ECXV4BAC0EB7EEAA9H3"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": "SELECT MIN(Club_Name )\n\n\n  \nINNER JOIN (SELECT Name RIGHT OUTER JOIN club_leader.member AS SETHBOSCH AS WELLENNEILBRINGERJUNKINXONFUTHSULMYNDIM1NGR4GOD5ATV7Q8A3"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "SELECT COUNT(Club_ID )\n\n\n  \nLIMIT 0;"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "SELECT Team_Leader LIMIT 816681276116628225038752425011345671533203736873944491889086176034992779809848734035142370952969721057885475660547263065461751955949995316854086483246221112862884017877756713"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT MAX(Name ))\n\n\n AS BASICKJANSAENVADOSPALESTAUMIADUPIDYAMUNGAARITONAYURISEMAGIANELORMEGATBALTIMACIPFABRIFTCAPULOLIBAHUSAFETTINAHAWU"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "SELECT Team_Leader LIMIT 0 OFFSET 182534783523291444001528241250773375202130677901463660383722271647957054489045490761005311281057990596808971917266213886873664076322593247643955974487115928583577"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "SELECT AVG(Age )\nFULL OUTER JOIN (SELECT MIN(Member_ID ))\n\n AS TONORIATheAverageAgeOfAlltheclubleadersTotalYEARsFirstNameLastNameEstimatePaidAtDATES1stDatePercentage2ndDatePercentureTimeCrowdSizeClubLeaderboardInauguralAnnouncementNumberLifetimeGrowthRate3rdYear"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "SELECT Overall_Ranking FULL OUTER JOIN (SELECT Name LIMIT 8)\n\n\n AS inelegantessehstpilnegezteinntyltwiiyrbejieuaselonfotlienjevogisumorimetia_LKrZm3JNbMtU2V"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT cre_Doc_and_collections.Parent_Collection_ID , Parent_Collection_ID )\n\n AS LISTINGLISTERSIFLESJOURGELYREDIAVARIANAVAINEACZOLOYORCECOPHONICXANNEGOTLATUNA"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "SELECT COUNT(Collecrtion_Subset_Details )\nINNER JOIN (SELECT Parent_Document_Object_ID , Description LIMIT 1603)\n\n AS DIGGEREDYXHEREMARTURBENUSVALLOSNUZESUNIFORASEONJO"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "SELECT Description INNER JOIN (SELECT Other_Details )\n\n\n AS ENCRYPTIONALYZICUSISKURGIAAVANCOURIYSETHANTSCHINAUVAWIKIMBAQLDSUNITAMBADAYASJNAGUEFACTORIALISTIQRIFLEPURAIJTATARINIAC"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "SELECT MIN(Collection_Name )\n\n\nGROUP BY Collections.Description , Description ;"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "SELECT DISTINCT COUNT(Document_Subset_Name )\nLIMIT 1;"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "SELECT AVG(Collection_Name )INNER JOIN cre_Doc_and_collections.Collections ON cre_Doc_and_collections.Parent_Document_Object_ID = Collection_Name ORDER BY Parent_Collection_ID"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "SELECT COUNT(*)\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collections) AS iID1 ON cre_Doc_and_collections.Collection_Subset_Name = 'F:\\p\\u3010A$'\nINNER JOIN (SELECT *"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "SELECT AVG(Collection_Description )\n\n\nLIMIT 301017141622125036998813102028405908704501462730491902151847870098972433775837551176200100832294312534253857396826445413525864897874118210004128906563123635507513"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": "SELECT COUNT(Collections.Description )\nINNER JOIN (SELECT Related_Collection_ID ) ON EXISTS (SELECT DISTINCT * FULL JOIN cre_Doc_and_collections.Collections AS ListDocumentId\n\n\n AS HUZY ON Document_Subset_Detail"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "SELECT Other_Details WHERE EXISTS (SELECT AVG(Related_Document_Object_ID ))\n\n\n  INNER JOIN cre_Doc_and_collections.Document_Objects ON Document_Objects.Description = Collections.Description INNER JOIN cre_"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "SELECT Related_Document_Object_ID WHERE Document_Objects.Parent_Document_Object_ID = '0';"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "SELECT MIN(Description )\nFULL JOIN (SELECT Related_Document_Object_ID , Description FULL JOIN (SELECT Related_Document_Object_ID , Parent_Collection_ID ) ON EXISTS (SELECT MIN(Description )\n\nFULL JOIN (SE"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "SELECT COUNT(Collection_Name )\nINNER JOIN (SELECT Related_Document_Object_ID , SUM(Parent_Document_Object_ID ))\n\n  \n\n AS DEVANTELIZED ON Collection_Name = Description ORDER BY Related_Do"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "SELECT MIN(Related_Document_Object_ID )\nGROUP BY Related_Collection_ID ORDER BY Parent_Collection_ID LIMIT 16421101141833772923390775174440583845132527646770851937127822"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "SELECT Related_Document_Object_ID , Parent_Collection_ID WHERE Other_Details <Parent_Document_Object_ID ORDER BY Description \n\n\nLIMIT 134812170400020334425165813"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "SELECT Related_Document_Object_ID , COUNT(Related_Document_Object_ID )\n\n\n  \n\n INNER JOIN (SELECT Other_Details LEFT JOIN cre_Doc_and_collections.Collection_"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "SELECT Related_Document_Object_ID INNER JOIN (SELECT SUM(Parent_Document_Object_ID ))\n\n \n\n AS T ON Parent_Collection_ID < 6.638114360331718050148370020504515"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "SELECT COUNT(Parent_Document_Object_ID )\nFULL JOIN (SELECT SUM(Related_Document_Object_ID ))\n\n AS toQHU1M3L4Xs0Yn8oV7C9q2yEgKwzJWt5uAiZjEyhkDpG6bF"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "SELECT Related_Document_Object_ID , COUNT(Related_Document_Object_ID )\n \n\n INNER JOIN (SELECT DISTINCT * RIGHT OUTER JOIN cre_Doc_and_collections.Collection_"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "SELECT DISTINCT AVG(Parent_Document_Object_ID )\nFULL JOIN (SELECT Parent_Document_Object_ID FROM cre_Doc_and_collections.Collection_Subsets) AS documentAUTHORIZE ON Collections.Parent_Document"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": "SELECT DISTINCT COUNT(Description )\n\n\n INNER JOIN (SELECT COUNT(Collection_ID ))\n AS and ON EXISTS (SELECT DISTINCT Related_Collection_ID , SUM(Parent_Collection_ID ), Parent_Collection_ID );"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "SELECT COUNT(Parent_Document_Object_ID )\nINNER JOIN (SELECT MAX(*) AS NILIMITATE, SUM(*) RIGHT JOIN cre_Doc_and_collections.Collections ON cre_Doc_and_collections.Collections.Parent_Document_Object"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "SELECT AVG(Collection_ID )\nLIMIT 100000010112002317281533402539502057162210243514902734883699091145136042187774386430953780598966446758196873100869557932"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "SELECT COUNT(Description )\n\n\nGROUP BY Description LIMIT 1;"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": "SELECT Related_Document_Object_ID LIMIT 10203912082 OFFSET 21051155643238441033421518227560243747002748452319140787290135586954251678175973993077944940858034631751388288467665065981"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "SELECT MIN(Collection_Name )  \nINNER JOIN (SELECT COUNT(*), cre_Doc_and_collections.Parent_Collection_ID , Document_Object_ID , SUM(Collection_Name ) \nORDER BY Rel"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "SELECT SUM(Parent_Document_Object_ID )\n\nFULL JOIN (SELECT Related_Document_Object_ID , Parent_Document_Object_ID )\n\n \n\n AS isanpiahwa1yaljw2m0i3l8a5f"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "SELECT Related_Collection_ID INNER JOIN (SELECT Parent_Document_Object_ID )\n\n\n   \n\n AS TsjmqgKxVZYdGc5yPvB3QpU8WzAf1lM9RrJ2h7I4FbHkLX"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "SELECT AVG(Collection_Name )\nINNER JOIN (SELECT Related_Document_Object_ID , SUM(*) ORDER BY Description LIMIT 0 OFFSET 110201551140649735106634334543132322951238390917142825"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "SELECT Collection_Name INNER JOIN (SELECT COUNT(Parent_Collection_ID ))\n\n\n    \n\n AS KAAMENZERBERG ON Documents_in_Collections.Description = Parent_Collection_ID INNER JOIN (SELECT COUNT(Parent_Collection_ID ))\n\n"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": "SELECT Collection_Name INNER JOIN (SELECT COUNT(Description ))\n\n\n   \n\n AS EGOJITUMAIAVANAMBAISADAYAONBULKEMINAGORALMARTURENUMASATOMYZOPHACOSCAVERIOCETIMFIRLICOLPHODIFERGIANCIVO"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "SELECT COUNT(Document_Objects.Collection_Name )\nINNER JOIN (SELECT DISTINCT Parent_Collection_ID , COUNT(*)RIGHT OUTER JOIN cre_Doc_and_collections.Collections ON Collection_ID = Collections.Collection_ID ORD"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "SELECT Related_Document_Object_ID , Document_Object_ID INNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Objects) AS child1 ON Collection_Subset_Members.Parent_Collection_ID = -3 ORDER BY Related_Document_"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "SELECT Related_Collection_ID , Description WHERE EXISTS (SELECT Other_Details )\n\n\n INNER JOIN cre_Doc_and_collections.Documents_in_Collections\n\n AS exisentirizatiditivarim"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "SELECT AVG(Document_Objects.Parent_Collection_ID )\nLIMIT 2048368911339185819332049083526607912014088709814673465166457687627177715758099542356554538004632201509525842487444769102859"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "SELECT Related_Collection_ID INNER JOIN (SELECT Parent_Document_Object_ID )\n\n\n  \n\n AS VIRTUALLY ON EXISTS (SELECT MIN(Parent_Collection_ID ), SUM(Parent_Collection_ID )) IN"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "SELECT Other_Details LIMIT 634851523261433290931683716011028133979586088185664229967507717895947357320252470364911543130575566721"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "SELECT Parent_Document_Object_ID , SUM(Related_Document_Object_ID )\nGROUP BY Document_Objects.Parent_Document_Object_ID "
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": "SELECT Parent_Collection_ID FROM (SELECT *) AS ECHO WHERE Collection_Name = 'John' ORDER BY cre_Doc_and_collections.Parent_Collection_ID , Document_Object_ID , Parent_Collection_ID ;"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "SELECT Other_Details RIGHT JOIN (SELECT MIN(Related_Collection_ID ), SUM(Related_Collection_ID ))\n\n\n    \n AS EASERJACIALE ON Documents_in_Collections.Other_Details = 1 RIGH"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": "SELECT Parent_Document_Object_ID WHERE Collection_ID = 1 INNER JOIN cre_Doc_and_collections.Collections\n\n\n  \n\n AS vl0iM4F1Q3UkEg5tjBzp7uPf2qh8JbTvDZ6"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "SELECT Related_Document_Object_ID INNER JOIN (SELECT Other_Details )\n\n\n  \n\n AS Tchitraasvatimacipandalakoskiieapamilisavkagotzukophivuumarkeoktutnohogthaikurpjom"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "SELECT COUNT(Collection_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Subset_Members) AS jnr ON Document_Subsets.Parent_Collection_ID = '0' INNER JOIN cre_Doc_and_collections.Document_Subset_Members ON cre_Doc_and_"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Document_Objects) AS Document_TypeID ON Document_Objects.Description = '<A-Z>\" THEN SELECT \"document:\" IN dtcs, document=\"documents\" , 2 ;\n(SELECT * FROM cre8jidoccclistaion"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "SELECT MIN(Description )\nWHERE Collecrtion_Subset_Details = 0.0 FULL JOIN (SELECT Description ) AS PADMAILIDENITIMETOOLLEISPSCOTGUMULINAMPATEMOTEVIRMTH1A8XQKALF6BUN5E4H3DYJ"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "SELECT COUNT(Documents_in_Collections.Parent_Collection_ID )\nINNER JOIN (SELECT DISTINCT AVG(*)) AS EASTERN ON Parent_Collection_ID = 0 LIMIT 1;"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": "SELECT Related_Document_Object_ID , MIN(Related_Document_Object_ID ), Document_Objects.Other_Details FULL JOIN (SELECT Related_Document_Object_ID ) ON cre_Doc"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "SELECT Related_Document_Object_ID ORDER BY Description , Collections.Parent_Document_Object_ID LIMIT 0"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": "SELECT SUM(Collection_Name )\nLIMIT 0;"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "SELECT Other_Details LIMIT 91839781928102922165800477033231311376712208827095514773465261575743885"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": "SELECT COUNT(Collections.Description )\nINNER JOIN (SELECT Related_Collection_ID , SUM(Parent_Collection_ID )) AS TENTATORSETITES ON EXISTS (SELECT Related_Collection_ID )\nLIMIT 100000001000002200001000003"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "SELECT SUM(Collection_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collections WHERE Collection_ID > 1) ON cre_Doc_and_collections.Collection_ID = '3' ORDER BY Other_Details , Document"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "SELECT Parent_Document_Object_ID \nGROUP BY Other_Details LIMIT 2201281244670057421329333960649965263511155577253834304047236648707520492293145843245317543778897918190701066164576108836"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "SELECT MIN(Description )\nRIGHT OUTER JOIN (SELECT Parent_Document_Object_ID RIGHT JOIN cre_Doc_and_collections.Documents_in_Collections ON Document_Subsets.Parent_Document_Object_ID = -1)\n\n\n AS for ON Document_Object_ID > 0"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": "SELECT DISTINCT SUM(cre_Doc_and_collections.Description )\nRIGHT JOIN cre_Doc_and_collections.Document_Subsets ON Collection_ID = 2 ORDER BY Documents_in_Collections.Other_Details , Collections.Parent_Document_Object_ID ;"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "SELECT Related_Document_Object_ID INNER JOIN (SELECT DISTINCT SUM(Parent_Collection_ID ), Parent_Collection_ID , MAX(Related_Document_Object_ID ), Related_Docum"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "SELECT Related_Document_Object_ID ;"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "SELECT Document_Subsets.Collection_ID INNER JOIN cre_Doc_and_collections.Documents_in_Collections ON Document_Subset_Name = Collections.Description ORDER BY Parent_Collection_ID \nLIMIT 2 OFFSET 1;"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "SELECT Parent_Collection_ID , COUNT(Parent_Collection_ID )\nINNER JOIN (SELECT * FROM cre_Doc_and_collections.Collections WHERE Collection_Name = 'jorn-1' INNER JOIN cre_Doc_and_collections.Collection_Subset_Members ON Collections.Col"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "SELECT COUNT(Collection_Name )\nINNER JOIN (SELECT *)\n\n AS LISLAMON ON Description = Parent_Document_Object_ID FULL JOIN cre_Doc_and_collections.Collection_Subset_Members AS CURTIC\n\n\n"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "SELECT Related_Collection_ID \nGROUP BY Collections.Document_Subset_Details , cre_Doc_and_collections.Collection_Description ;"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "SELECT AVG(Document_Objects.Related_Collection_ID )\n\n\n INNER JOIN (SELECT MIN(*) ORDER BY Description , Collections.Parent_Collection_ID ) ON EXISTS (SELECT Parent_Document_Object_ID )\n\n\nLIMIT"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "SELECT SUM(Collection_ID )\n\n\n INNER JOIN (SELECT Related_Document_Object_ID )\n  AS WITWESTERN ON Parent_Collection_ID = 0.1 GROUP BY Document_Subset_ID , Collec"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "SELECT AVG(Collecrtion_Subset_Details )\nINNER JOIN (SELECT Other_Details )\n\n AS WAGHOLISBOSCHERLJENETESAILSONIGSTALVARGUMAULTEEDLYKIDROFRIEVATIMMTRUNDAINORROVIT"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": "SELECT Document_Objects.Description ;"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "SELECT Parent_Document_Object_ID , Description INNER JOIN (SELECT * FROM cre_Doc_and_collections.Collection_Subset_Members WHERE EXISTS (SELECT AVG(*)ORDER BY Collection_Description ) ORDER BY Parent_Document_Object_ID , Description LI"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": "SELECT SUM(Document_Objects.Parent_Document_Object_ID )RIGHT OUTER JOIN (SELECT *\nLIMIT 2100945271519352218585099263601111223883946296059095738647965165525703096142077484400"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "SELECT MIN(Collecrtion_Subset_Details )\n\n\nINNER JOIN (SELECT MIN(Collecrtion_Subset_Details )\n\n INNER JOIN (SELECT COUNT(Collecrtion_Subset_Details ))\n\n\n A"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": "SELECT SUM(Collection_ID )\nLIMIT 112517751600061113570023107825505520221002636000000101247048180683840985001207581920045773059287932273364884238296047159050537805325543146596176339754916669746136723003450"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "SELECT Related_Collection_ID LIMIT 151837307013281158160951708819061048773326983680881501472350273856358976646075972524396754995579657325834129514057400784360541"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": "SELECT Parent_Document_Object_ID , Other_Details FULL JOIN cre_Doc_and_collections.Document_Objects\n \n\n AS ELISTRATIONAL ON Related_Collection_ID > Collection_Name INNER JOIN (SELECT * FROM cr"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "SELECT DISTINCT SUM(Documents_in_Collections.Parent_Collection_ID )\nINNER JOIN (SELECT AVG(Documents_in_Collections.Parent_Collection_ID ))\n\n \n AS PATRIXESUMHADITKARUJONLOUISIAYASAMAN"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": "SELECT Document_Subsets.Parent_Collection_ID RIGHT OUTER JOIN (SELECT COUNT(*) FROM cre_Doc_and_collections.Document_Subsets, (SELECT DISTINCT COUNT(*), MAX(Related_Collection_ID ) ORDER BY Related_Collection_ID , Collection_ID"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "SELECT Related_Collection_ID WHERE Collections.Description = 1RIGHT JOIN (SELECT SUM(Parent_Collection_ID ))\n\n AS TnW1kvXlQsEyB4CmA2HGJ8eVqF0dzD6b3rZ"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": "SELECT Related_Document_Object_ID , AVG(Related_Collection_ID ), Parent_Collection_ID , SUM(Parent_Collection_ID )\n\n\n      \nLIMIT 666773693165534184817003920403824155813"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "SELECT Collection_Name INNER JOIN (SELECT COUNT(Parent_Collection_ID ))\n\n\n  \n\n AS ZENDAJUZONANIKAYVINCIORGOVOLFATIMASHARTOCRACINGNAICOMMALIAISERAMINAUMEOTLIGBADODIBOSNUTTOXIFILIANIETCIT"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "SELECT Collection_Description INNER JOIN (SELECT AVG(Parent_Collection_ID ) AS Pb, SUM(Collections.Related_Collection_ID ) AS V)\n\n\n   \n\n\n\n\n\n\n AS Collection_Description ON Collections.Collection_Name = 1 ORDER BY Docu"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "SELECT Related_Collection_ID INNER JOIN (SELECT COUNT(Parent_Collection_ID ), SUM(Collecrtion_Subset_Details )\nGROUP BY Other_Details LIMIT 1)\n\n  \n\n AS FALCOA2D1JL"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": "SELECT AVG(Collection_ID )\nLIMIT 10005 OFFSET 100101050550110330025906660349811483670576480234095421835793813129915783906441917594631123204916143062127289768732765632984117457775862404314547372610"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "SELECT AVG(Collecrtion_Subset_Details )\nINNER JOIN (SELECT AVG(Collection_Subsets.Parent_Collection_ID )\n\n INNER JOIN (SELECT COUNT(Collecrtion_Subset_D"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "SELECT COUNT(songs_id ) AS EASTLINGBODY RIGHT JOIN (SELECT SUM(*) LIMIT 8102749010904234567111319063499031826153522504225177800536439577516377433123098684824477056211282955634490657759582036"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": "SELECT COUNT(songs_id ) AS SOURCE GROUP BY id LIMIT 1 OFFSET 2343333414170125543529062138572778584049285097304589124890441879157084371659079865105526366796226468663219461004609203923608094135758874339514"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "SELECT original_artist , songs.voice_sound_quality , SUM(participants.voice_sound_quality ), name RIGHT OUTER JOIN (SELECT original_artist , songs.voice_"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "SELECT voice_sound_quality LIMIT 11600032192502720643618721758252600241088405720030383744463501233933482876655590448471329541295227074751587803005919074100628845490325853160497773305276414845086315958603425"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "SELECT original_artist , songs.name ;"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "SELECT MIN(sing_contest.stage_presence )INNER JOIN (SELECT COUNT(*))\n\n\n AS EASTERED ON EXISTS (SELECT SUM(sing_contest.stage_presence ))INNER JOIN sing_contest.performance_score AS"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "SELECT MIN(songs.english_translation )LIMIT 3;"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "SELECT COUNT(songs_id )\nINNER JOIN (SELECT DISTINCT SUM(*) AS IZOL, songs.language ORDER BY name LIMIT 2 OFFSET 10712253401781746605710264865224087397945282327382476334418361415"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "SELECT original_artist , songs.stage_presence ;"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "SELECT AVG(songs_id )LIMIT 1181777281162268235740670048452527132614367946240742763839307059097348547494250783711758864586360335574201321529204489560104807214912546599832119088902384177769572513"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "SELECT MIN(sing_contest.popularity )\nINNER JOIN (SELECT MAX(*), name  INNER JOIN sing_contest.participants\n\n AS HENJAN ON original_artist =sing_contest.popula"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "SELECT AVG(songs_id )LIMIT 2134160873930344425462388408960870115289099354713791868125811853600174980459897202219381059487631100878556220024277064679250963756661405862683175162957942373305440883325"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "SELECT AVG(songs.rhythm_tempo )\nINNER JOIN (SELECT SUM(*) FULL OUTER JOIN sing_contest.participants\n\n AS VOTE ON EXISTS (SELECT AVG(songs.rhythm_tempo ))\nINNER JOIN (SELECT S"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "SELECT SUM(songs.language )\nINNER JOIN (SELECT MAX(*)   ORDER BY rhythm_tempo , popularity LIMIT 130007231678807701272815792909149919330046126787172218704790262420408813"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "SELECT voice_sound_quality ;"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "SELECT SUM(songs_id )\nINNER JOIN (SELECT SUM(songs_id ))\n\n  \n\n AS aaigrjn1ngdgxul2ioklkv0h5b7as9u6mikw3f4cqyr8eabblndpfffrgnirflzpgtbradipivpsdfsaksh"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "SELECT COUNT(sing_contest.name )\nINNER JOIN (SELECT DISTINCT COUNT(*) AS EPPENDELLY, SUM(id ))\n\n       \n\n AS MANUSHIBADASAHANESKURISE ON sing_contest.name = id INNER JO"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "SELECT AVG(songs.popularity )\nINNER JOIN (SELECT COUNT(*), MAX(*))\n\n      \n\n AS FORMALIANYUZOSKIAMINA_KITIMERYA ON EXISTS (SELECT AVG(songs.popularity )\n"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "SELECT COUNT(songs_id )\nINNER JOIN (SELECT DISTINCT SUM(*) RIGHT OUTER JOIN sing_contest.songs ON sing_contest.stage_presence = id INNER JOIN sing_contest.songs ON sing_contest.song"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "SELECT MIN(songs.rhythm_tempo )\n\n\nINNER JOIN (SELECT SUM(songs.voice_sound_quality )) AS LOUISIANA ON EXISTS (SELECT AVG(*)LIMIT 100);"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "SELECT COUNT(country )\nINNER JOIN (SELECT COUNT(distance ))\n\n AS SILENONYJOSIANASANISTAINTPICTURAIPOVIAMEMKOLZESAMARUSMAKIBODUATIMGIBRAPHOGNEVORUMIQRAITALNETHAELOICOCLUTTE"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": "SELECT LName FULL OUTER JOIN address_1.Direct_distance\n\n\n  AS ELIZABETHJANESONENOISFETALOCOLIUSROGAATVENTPEGASITOSTRILCAMMELGANDTEXAGADECLOBNURTCWYTHORDEACERHOTTOBUND"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": "SELECT COUNT(country )\nFULL JOIN (SELECT Fname , SUM(*) RIGHT JOIN address_1.Direct_distance ON EXISTS (SELECT * FROM address_1.Student WHERE state = 'NORTHERN' INNER JOIN address_1.Student ON city2_cod"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "SELECT LName GROUP BY longitude ORDER BY Major , Sex LIMIT 200080113190721003097288915883350604878145755260064390654216402758682910235480366798778521122218697434117599597909"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "SELECT COUNT(country )\nINNER JOIN (SELECT COUNT(*))\n\n     \n\n AS HENAEMYJKADANHURSTiF_W1RXDj5eMV8ZCdz7G6f2kQpqxu3aNvnw9o4PmIhUcE0s"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "SELECT longitude \nGROUP BY Major ORDER BY City.LName , address_1.distance LIMIT 2"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "SELECT AVG(state )\nWHERE City.LName = (SELECT address_1.country LIMIT 2)\n\n INNER JOIN address_1.Student ON longitude <-2 INNER JOIN address_1.City ON distance = 1\nL"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT MAX(LName ))\n\n\n  \n\n AS EGO_BENGBERRYEATLY1VAD4GJ6Q0A7ACD5W9ELDSK8ZY3s2vxpOuPcMrgCmFwIkUaXjfR"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "SELECT COUNT(state )\nWHERE Sex = 11.173630233932192FULL OUTER JOIN (SELECT MIN(*)RIGHT OUTER JOIN address_1.Direct_distance AS rjtehnde ON country > 1 INNER JOIN address_1.Direct_distance AS d"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "SELECT LName INNER JOIN (SELECT COUNT(Fname ))\n\n\n AS EZLHY2B0X1_M4VUQJ8hzvRWfD9c5uGdNYt6aKywq3PjgGVxpIegr7NbEeyeCkFoNDTlcm25iOZ"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "SELECT DISTINCT SUM(LName ) INNER JOIN (SELECT COUNT(*))\n\n\n AS ULTYHISTORY ON Fname = LName GROUP BY Major ORDER BY distance ;"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "SELECT DISTINCT SUM(address_1.country )\n\nLIMIT 1 OFFSET 234448495933702788892339305735993777421412205518752664321517608743282416582519761034689746137894408086113822006956507947294501"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "SELECT DISTINCT COUNT(state )\nINNER JOIN (SELECT SUM(*)LIMIT 232001038251522134867441828116650322946238839334026348024273764690055607057129907177610090307895357400085909791956162043148908"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "SELECT SUM(City.LName )WHERE Major = (SELECT COUNT(*), city_name RIGHT OUTER JOIN address_1.Direct_distance AS dsrteonbjr ON state > 1);"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "SELECT LName ORDER BY City.LName \n\n\nLIMIT 1123012050459040608988108744005914673358482530779849460004"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "SELECT COUNT(state )\nFULL OUTER JOIN (SELECT COUNT(*)WHERE StuID = 9.520039332529073RIGHT JOIN address_1.City ON Fname <>Sex ORDER BY LName )\n\n\n AS TUETDOLOLELISSAE"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT MAX(LName ))\n\n\n  \n\n AS UZCHENJYERWOLFREEANDKURBAMPASHAGIL_INV1LYvQnR8g3k6bUyx2uM9OwCj4IHrqXl7iN"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "SELECT COUNT(LName )\n\n\nRIGHT OUTER JOIN (SELECT LName )\n      \n AS ANZOSONAANORAMATASJEDIANADBAYKURIMMIRVACFANGBENEGRIPSPALCINESDAWITGAUNSHELDUPTHAVEHISNIAGOBIGTAUYAQ"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "SELECT country , address_1.city2_code RIGHT OUTER JOIN (SELECT * FROM address_1.City WHERE city_name = 'London') AS CityName ON distance <= 0 ORDER BY Direct_distance.Fname ;"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "SELECT LName GROUP BY address_1.longitude , longitude \n\n\n ORDER BY City.LName LIMIT 437303610202458642218278915457716110178472344295470267565679017125725562874149538554835"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "SELECT COUNT(state )\n\n\nINNER JOIN (SELECT DISTINCT LName RIGHT OUTER JOIN address_1.Direct_distance AS ARAJGEgASQC4BZACY6WjpXrf3\n\n\n AS NEGARALUSISESURGEKL"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "SELECT COUNT(country )\nINNER JOIN (SELECT COUNT(state ))\n\n  \n\n AS SELLANNAH ON Major <-8.33612140002RIGHT OUTER JOIN address_1.Direct_distance ON state = 2;"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "SELECT COUNT(Direct_distance.LName ) LIMIT 462;"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "SELECT DISTINCT AVG(state )\nFULL OUTER JOIN (SELECT SUM(*)LIMIT 221601584818343215571422902046000720027282388339870670035649510661739408975787799378412590324746909619114786112549552613"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "SELECT COUNT(country )\nINNER JOIN (SELECT COUNT(state ))\n AS CAMPUS ON Sex = LName RIGHT OUTER JOIN address_1.Direct_distance AS cg3vf0ngj9o2q4zhnsx5w6b7"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "SELECT MIN(state )\nWHERE Age = 124067462219341265362039241617231318115529597099637533794589271558853810935049776426976076.4GROUP BY Direct_distance.Sex ORDER BY Major LIMIT 1"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "SELECT DISTINCT AVG(LName )\nINNER JOIN (SELECT COUNT(*)FULL JOIN address_1.Direct_distance ON address_1.Direct_distance.state < distance INNER JOIN (SELECT COUNT"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "SELECT DISTINCT SUM(LName )\nINNER JOIN (SELECT LName )\n\n AS OKHOMAJOSWONDYROUFITILICOLIAQUEANTHOTOBVOCASUM1NDODBARATALENNA3DAFLIGORETMEGARTEXAMINUPRENTYLENECHIPRYLETH"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "SELECT AVG(City.longitude )\nFULL JOIN (SELECT LName , Sex INNER JOIN address_1.Direct_distance\n\n AS RILANAOSONELLES AS ENSRALIZATIONLYQUEKODISACAMUHASZFXGULMAABUN"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "SELECT MIN(state )\nRIGHT JOIN (SELECT Fname )\n\n AS LYNNFENZEMUCCOMMCHOLANOSPODDALKAIASBESGANGAADJORONDAUMAGHAYAKIGERIDAMELIMETAHAPHAQURRAINEILRONGREIATNGAISITARTHVIRYT"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "SELECT AVG(state )RIGHT JOIN (SELECT DISTINCT COUNT(*)WHERE Sex = LName INNER JOIN address_1.Direct_distance ON EXISTS (SELECT AVG(state )RIGHT JOIN (SEL"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "SELECT AVG(state )WHERE Major =1.3FULL JOIN (SELECT COUNT(*)FROM address_1.Direct_distance, address_1.StudentRIGHT OUTER JOIN address_1.Student\n\n\n\n   \n\n AS MJWUZO"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "SELECT SUM(address_1.state )\n\n\n  \n\n INNER JOIN (SELECT COUNT(*) ORDER BY Direct_distance.latitude , city2_code )\n\n AS EINPROLKESONWALTTEVISSIENUJOCATOVOELITIOSN"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "SELECT COUNT(Age )\nINNER JOIN (SELECT COUNT(Age ))\n\n     \n AS TOYAGER ON LName <Fname RIGHT JOIN address_1.City ON state = 0;"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "SELECT DISTINCT AVG(LName )ORDER BY City.Age LIMIT 113210006321018371713450150405780462743606430442547751185704865295333230024167863126734892"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "SELECT LName FULL OUTER JOIN address_1.Direct_distance\n\n\n  AS HgFkQnZf6A3KOJpG8qR4wI7Vx2oHvBzC9a5lMmXjYLWpnuNhUjoPbE0dDt1"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "SELECT COUNT(state ) ORDER BY LName , Major \n\n\nLIMIT 60000100082213461527703388391777385500236724481256190721780147503228451626584210057145918449725109580963160662093247114049732999353743307864"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": "SELECT address_1.city2_code WHERE Age = Sex ;"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "SELECT COUNT(LName )\n\n\nFULL OUTER JOIN (SELECT SUM(Direct_distance.state ))\n   \n AS NOUNTYNAME ON EXISTS (SELECT DISTINCT * FROM address_1.City)\n\n INNER JOIN (SELECT SUM(D"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "SELECT COUNT(Direct_distance.country )\nWHERE Age =1;"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "SELECT AVG(Fname )ORDER BY LName , address_1.city2_code ;"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "SELECT MIN(state )RIGHT JOIN (SELECT COUNT(*))\n\n  \n\n AS LOSA ON Sex <> 16LEFT JOIN address_1.Direct_distance\n AS tnttea ON longitude = 1 ORDER BY distance , state ;"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": "SELECT DISTINCT AVG(Direct_distance.Major )\n\n\n  \n\n INNER JOIN (SELECT COUNT(LName ))\n\n\n\n AS TONEFORDAENNAANZKIAWALHARAEDATKAJASUYAKEVANGDANAARADORSELGAWAITBULSAJAIGAMAGISYAKIN"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "SELECT MIN(state )INNER JOIN (SELECT MAX(state ))\n\n\n    \n\n AS israelishahimbuljalitwiziagbeibenihiniyyefavdikshabawishvotuqebryaedamurfaevieudetutemmzirasharrifatektuhay"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "SELECT DISTINCT SUM(LName )\n\n\n INNER JOIN (SELECT DISTINCT LName )\n\n AS ANTELLOSIS ON City.Age < 5343615161125374375204835786489069261801665055383095172905334974137727421945229847146739"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "SELECT Student.Age , address_1.state INNER JOIN (SELECT SUM(Direct_distance.country ), MAX(Advisor ), MAX(address_1.state ))\n\n AS ismigassebroniketykomitrieganenlageeurf"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "SELECT MIN(state )\nINNER JOIN address_1.Direct_distance\n\n AS EASINGFAMILYBANGARVEMMAHADIMAUNKABAGITUHAONUMWALANYMATOMPENURIZOS\n   \n AS ILLUSTRATED ON Major = Fna"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "SELECT AVG(state )\nRIGHT JOIN (SELECT LName , address_1.country ORDER BY Direct_distance.state )\n\n AS ECONOMICBASILOABIOUSISTSIHANSCATALPACTEDROPORADELIGGOLFESTURRELMYSNUTS"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "SELECT MIN(state )\nRIGHT OUTER JOIN (SELECT COUNT(*) AS TESTSMUBAH GROUP BY Direct_distance.country \n\n ORDER BY Fname , address_1.state LIMIT 348704210081401273949880098221118"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "SELECT MIN(state ) AS CUTOFF\nLIMIT 4642248204617281640503318572726903047441268452588755815133556238959084167104937779874006755852477079012414058029763983125609732196692113878863693176546165033"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "SELECT AVG(Fname )\n\nRIGHT JOIN (SELECT Major WHERE Major = 10)\n\n AS RAGLIEAKALJURDIAAMBARUASNCHANRAUMITIWENACAYPATRIYEJAONFEDAVICRAPIMSANABIHADVOTEAKCUNDAISGILM"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "SELECT COUNT(state )\nRIGHT OUTER JOIN (SELECT * FROM address_1.Direct_distance) AS PRELOADPRECISIONFRONTEND ON distance = country ORDER BY distance ;"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "SELECT COUNT(City.Major ) INNER JOIN (SELECT LName )\n\n\n\n AS WONKARENTHUJHODAAMANFULLIEIMVALPHAASTAWAKAPAAYISRAHYMAILBETHYLLSOXANEDINOPEROLESMOTICUMCAMPETELLIADOXYNOCARBOR"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "SELECT SUM(City.Advisor )\n\n\nFULL JOIN (SELECT COUNT(*)) AS INCHETROIDVILLEVICTOR ON Direct_distance.state = 82247642400094232602048304050961;"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "SELECT DISTINCT COUNT(state )\n\n\nGROUP BY Major LIMIT 690451046302239010900275833251134602636374319158054124064183857554250484905886659177978656213236863707569872986135992816322096317724674547"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": "SELECT address_1.latitude WHERE Age < 636000 RIGHT JOIN (SELECT SUM(address_1.latitude )\nLIMIT 200000125171167971613503778341028001809242726390764204638485410081908334056155529143522"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": "SELECT DISTINCT COUNT(City.Age ) LIMIT 2212813504948673377361615256022381427582847441855011135178966007943452988805424759894610681910065574085642051127670421073795000418712908813325053305904997715"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "SELECT AVG(state )ORDER BY Major LIMIT 1 OFFSET 1234454381425783357261655884046132067752937503677302854229953011759354225511151918487323587469031079689040970278907853486394543124464"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "SELECT LName INNER JOIN (SELECT longitude )\n\n\n AS SEGONUS1stAAM ON EXISTS (SELECT country FROM address_1.City) RIGHT JOIN address_1.Direct_distance AS darntg ON address_1.City."
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "SELECT City.state WHERE City.city1_code = Sex GROUP BY LName ORDER BY Advisor ;"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": "SELECT DISTINCT COUNT(City.Major )\nRIGHT JOIN (SELECT city_code FROM address_1.Direct_distance WHERE address_1.distance <= 100000) ON distance >= 2 ORDER BY city_code LIMIT 1;"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "SELECT AVG(Fname )\nLIMIT 10004500301023204811012550491040453090273000016571787361870431002200997837600774006240433191346558867645869895960290928721598349747447966950007539087447388611484907542"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "SELECT AVG(state )LIMIT 217003422190933000711383635184828132037121590306769160714015588982327796350241003175444739069749990325894080932699776054105756566431461778730062107457064862199359518592909"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "SELECT SUM(Age )\nRIGHT OUTER JOIN (SELECT MIN(*) AS to RIGHT JOIN address_1.Direct_distance AS LENGTHENING ON City.latitude = 102220006 ORDER BY Direct_distance.LName , City.Age )\n\n AS to O"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": "SELECT *\n\nRIGHT JOIN (SELECT Fname RIGHT OUTER JOIN address_1.Direct_distance\n\n AS DIGITIVE ON Major > 8000 INNER JOIN address_1.Direct_distance\n AS BODYYTOWNEDAH"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "SELECT DISTINCT COUNT(state ) LIMIT 150105575206088100000000072000023453630400000051751003848165724581428376812018735390977114907998044173390196789422818268325155466432734962273147642955861076409820597960"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "SELECT LName WHERE Major = 8457748254430881\nINNER JOIN (SELECT MAX(Direct_distance.latitude ))           \n\n\n AS N ON Fname >Age LIMIT 16481528380098182523161322"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "SELECT DISTINCT COUNT(Age ) INNER JOIN (SELECT Fname RIGHT JOIN address_1.City ON StuID = 1FULL JOIN address_1.Direct_distance ON distance <-0 INNER JOIN (SELECT Fn"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "SELECT COUNT(Major )\n\nLIMIT 31661622113419051;"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "SELECT COUNT(Fname )\nINNER JOIN (SELECT SUM(*), Fname RIGHT OUTER JOIN address_1.Direct_distance\n\n AS ofrstntonlyttvjpfndakb3uJ5nFx6wK\n\n AS WANGLINGZYANW"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": "SELECT City.state , SUM(Age )\n\n\nFULL OUTER JOIN (SELECT COUNT(*) FROM address_1.City, address_1.City AS njcidxIDDDRESSCEENTNAMESASECATODDSGATEADMINEDORDERSEXCHANGEPRICECOVERAGEAIFORMARKETHUBSTANGOINTRANS"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "SELECT LName RIGHT JOIN address_1.City\n\n\n AS BKJLk2DZwVUoR8jzF4vgW7bmY9B6bP5nxpqrMMAXNf3hElHQA ON EXISTS (SELECT LName RIGHT"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT LName RIGHT OUTER JOIN address_1.Direct_distance\n\n\n AS ELEVATIOLFASTSELICASTEXelecatiolfastsElvesJOSESMANDISAFAACALIORIFIACURREYRIG"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "SELECT LName GROUP BY address_1.country ORDER BY distance ;"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "SELECT COUNT(state )\nRIGHT OUTER JOIN address_1.Direct_distance\n\n AS OCEANDSMARTICLEFACTORYWINGKEEPSYGIRLONVOCASIMBOLISHMENTSCALETALCATZID\n\n AS FINELYARIFUCCIENTEDJUNIORERCHAINHILARIOUSTH"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "SELECT LName RIGHT OUTER JOIN (SELECT MIN(Age )FULL JOIN address_1.Direct_distance\n\n\n AS CARTLANDVILLE ON Direct_distance.state <City.country LEFT OUTER JOIN (SELECT MIN(A"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "SELECT MIN(state )\nLIMIT 9771019153725305857502218297879551638273936321346703373266035631459176487658872"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "SELECT SUM(City.LName )INNER JOIN (SELECT LName )\n\n\n\n AS for ON Major = 1 INNER JOIN address_1.Direct_distance ON Direct_distance.state < 3 INNER JOIN address_1.Direct_distance AS"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "SELECT AVG(state )ORDER BY LName , City.LName ;"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "SELECT MIN(state )\nRIGHT OUTER JOIN (SELECT LName )\n\n AS TENON ON EXISTS (SELECT SUM(state ) RIGHT JOIN address_1.City ON state = 3\nRIGHT OUTER JOIN (SELECT MIN(longitude )"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "SELECT MIN(sid )\nRIGHT JOIN (SELECT Reserves.name , name )\n\n AS for ON day = 1 ORDER BY bid LIMIT 4;"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "SELECT AVG(sid )\n\nINNER JOIN (SELECT SUM(*) LIMIT 2 OFFSET 3516182026222411462857396538120827553514017833585630234940946745257717598419364798661334969963200705464767574374479096100"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "SELECT COUNT(sid )\nFULL JOIN (SELECT Reserves.day , age WHERE EXISTS (SELECT DISTINCT color INNER JOIN boat_1.Boats AS euifitlyhgFfzUiMjnWGkZpJdV"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "SELECT Boats.sid RIGHT JOIN (SELECT MIN(Reserves.day ))\n\n\n  \n\n AS SEDONALYANUARLENUNKURAMISVAGADISHLIATJAPPALSUMAIMITASCHOPOLESULICOKHIRETTAIGZIOTGANDDAWAYRIABELM"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": "SELECT Reserves.age ORDER BY age LIMIT 45418271611332834140178302260580055802520247723171079097576295948990895409600041003847321949124550359315467063200366586268337135764733056898811186716"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "SELECT SUM(sid )\n\nRIGHT OUTER JOIN (SELECT MIN(sid ))\n\n AS TEMPORARY_JUNE1817000007C1B22604575105516331514D233857F3A357401E846365428563411621348906476AA5BA9EB6594377044407750"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "SELECT Reserves.day WHERE age = rating GROUP BY Sailors.color LIMIT 16481520775028001276603574261113447510656468790108708380221757143359363919344625456638975516302785990218234909437"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "SELECT MIN(sid )\n\nFULL JOIN (SELECT Boats.rating , Reserves.color , rating LIMIT 54301)\n\n AS SALESLAGRANNAONZANDJOSMELGETCHYPIEATVIAURDACHTNINIOCORNEKISFULLOOT"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "SELECT AVG(sid )\nINNER JOIN boat_1.Boats\n\n AS NOLANIAA ON Sailors.bid = name RIGHT OUTER JOIN (SELECT Boats.age , sid GROUP BY day LIMIT 2)\n\n AS VELPENCHEDON_Boat1"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "SELECT Reserves.day LIMIT 1212208049192825771857144038137827231129103588167624004767702217606689466855454434509915698437018575621395839642698413097431172853687457481004212078212532187949084167"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT AVG(Boats.age ))\n\n AS LENZNER ON Sailors.name <> 3421930542312 INNER JOIN boat_1.Sailors\n AS JOSEPHUJOBSCHANNEL AS EACHESILIUSLONRUSS"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT MAX(sid )) AS LADYHUJENANFUSGAMOSUNTOIRMISHIGAYATSUASSAIMBIDAPUTPOKODAWARANGEDOGISAGIAKIOBONKIBAOROCLACDQOMOOPUMVZAAWAKAILCHAIRANTHYHU"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "SELECT DISTINCT SUM(sid )\nINNER JOIN (SELECT COUNT(*)FULL JOIN boat_1.Boats ON color = sid INNER JOIN boat_1.Boats ON day <-0 ORDER BY rating , sid )\n\n\n AS NICE ON EXIST"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "SELECT AVG(Boats.name )\nORDER BY Sailors.rating LIMIT 1 OFFSET 3131111251611382628174210810561003340583957291435463601441960632427781867804748986687159970657400085909037568778895225550"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": "SELECT DISTINCT SUM(sid )\nINNER JOIN (SELECT AVG(*)FULL JOIN boat_1.Boats ON EXISTS (SELECT Boats.name , COUNT(Sailors.name ), color ) INNER JOIN boat_1.Boats ON sid = (SELECT"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "SELECT Reserves.sid , Sailors.color WHERE EXISTS (SELECT COUNT(Reserves.color ), SUM(Reserves.color ))LIMIT 825134510"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "SELECT COUNT(sid )\n\n\n    \n\n INNER JOIN (SELECT SUM(*) AS RATTLANISTICIA, Boats.color LIMIT 194815781119332275421025350170347718371746100627608044123967297466145516955094133024289840"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "SELECT Boats.color , age LIMIT 1225491623772612321829145728272213373895459920486970753380981517558434364488305924585419111003901896500035640043105006667466042109478530468200800849091"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "SELECT Boats.age INNER JOIN (SELECT Sailors.color RIGHT OUTER JOIN (SELECT MAX(*) FROM boat_1.Boats WHERE name = 0 ORDER BY day )\n\n\n AS ELEKGOSENCHPEREZVEGLOPUTELONJARUSSITANNEURYALO"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "SELECT COUNT(sid )\n\nLIMIT 1550 OFFSET 17491;"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT AVG(sid )\nINNER JOIN (SELECT age )\n\n AS IWENJEKERFORDINGALAQANHADAIRABARAAACAPAKNAATAMAGUAYONASOLDAXUEDITGAOTBAGAFVISIFIOCAVESCHUNOABZODECNUTROVSAYLINTAIMCUR"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "SELECT AVG(sid )\n\nLIMIT 23020392736371125571250281048581816141315194301787900689038235524331770564535847588644422592680862"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT AVG(sid )\n\n\n    \n\n INNER JOIN boat_1.Boats ON Sailors.rating > 52230250012187820342646191688389882840682414440176803617471149435023677969573966\nRIGHT JOIN boat_1.Boat"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "SELECT Reserves.age FULL JOIN (SELECT SUM(Reserves.day ))\n\n\n AS EAGLES ON Boats.color = 454 GROUP BY day LIMIT 2 OFFSET 815"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT AVG(sid )\n\n\n    \n\n INNER JOIN boat_1.Boats ON Boats.color = 1;"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "SELECT AVG(Boats.bid )\nORDER BY Sailors.day , age LIMIT 1;"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT AVG(sid )\n\n\n    \n\n INNER JOIN boat_1.Boats ON Sailors.rating > name RIGHT OUTER JOIN (SELECT COUNT(*) ORDER BY rating , color )\n AS BKELONALASAJOEOSOCCNCHIOTIC"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "SELECT Reserves.sid ORDER BY age LIMIT 43111011533261618141323005724473827806539193637121749766078322035485955992296437828446942290625647588935098744324745953167285255407710709767010433165815"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "SELECT AVG(Boats.age )\nWHERE Boats.age = Sailors.color RIGHT JOIN (SELECT COUNT(*)RIGHT OUTER JOIN boat_1.Boats ON boat_1.Sailors.color <-9000 INNER JOIN boat_1.Boats ON bo"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "SELECT Boats.color INNER JOIN (SELECT AVG(Boats.color )\n\nWHERE EXISTS (SELECT SUM(*) ORDER BY Reserves.day , day LIMIT 0))\n\n AS KILTHURFEANALLORNISSSYIASJKOLBOS"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "SELECT Boats.color INNER JOIN (SELECT Sailors.name )\n\n\n    \n\n AS LARAISA ON EXISTS (SELECT MIN(Boats.age ), COUNT(*), sid , name );"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": "SELECT COUNT(sid )\n\nGROUP BY Sailors.color , Reserves.rating ORDER BY Sailors.rating ;"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "SELECT Boats.color \nINNER JOIN (SELECT COUNT(Boats.color ))\n\n AS CHANGERED ON Sailors.color \n= 3GROUP BY Reserves.name , Boats.bid LIMIT 1"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "SELECT Boats.age RIGHT JOIN (SELECT Sailors.age )\n\n \n\n AS IMABENERUDAASABAYEKANFINGIAWUNDIMPANTISRADESQUEZINHAIJARLAMONJOREDMEMVANGREIOLSAHRIPSNURGAAYAULALABHYOBIRA"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "SELECT MIN(sid ) \n\nRIGHT OUTER JOIN (SELECT Reserves.day , COUNT(*), Sailors.name LIMIT 864)\n\n AS DOUGTHARENNEEVATMANJHADAMMARLURAORSSUELAYPANDZYASKRAIDEMIUNRISBUL"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "SELECT AVG(sid )\nINNER JOIN (SELECT COUNT(*) LIMIT 1 OFFSET 23250006260149121627152233236043504432144820672964405965771710385637113946131931306375533042895697902140991857974796214734355870"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "SELECT Boats.sid \n\nRIGHT OUTER JOIN (SELECT SUM(age ))\n\n AS andBaiotaanitiaeu1k3r9_n5Df6djh0bWYV8L7wPJ4lZG10pqHQxRmzItvN2sKFeyXCcEiU"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "SELECT Boats.sid ORDER BY age LIMIT 554353018582908132557162726551904202400790953478372817454322705301754812368038906051039678896652360774087415085496321"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "SELECT Boats.sid ORDER BY Sailors.age LIMIT 454132814001234172918395865364043302477154855453527604225888911784976017919228438160959021293750239944566420961358047876890227000826338310046135770541214"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "SELECT Boats.sid ORDER BY Sailors.age LIMIT 836193327001525171401181095992679134211372847463916406360585635654823447038431754907294584690583412208624647668733098885445902"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": "SELECT Boats.name RIGHT OUTER JOIN (SELECT AVG(Reserves.name ))\n\n\n \n\n AS IF ON Sailors.age > 53458356789172877"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "SELECT Boats.color ORDER BY Reserves.bid LIMIT 11 OFFSET 22;"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "SELECT COUNT(sid )\nINNER JOIN (SELECT DISTINCT SUM(*) RIGHT OUTER JOIN boat_1.Boats ON boat_1.Boats.bid = age INNER JOIN boat_1.Boats ON boat_1.Boats.bid >= 1INNER JO"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "SELECT Reserves.sid INNER JOIN (SELECT SUM(Boats.name )\n\n\nLIMIT 504 OFFSET 10583326693928342916127822991848754617373879490611231377891455505380653654108747255915844568603088644057"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "SELECT COUNT(sid )\nINNER JOIN (SELECT Reserves.color , SUM(*)ORDER BY Boats.day LIMIT 30000000829363075703500602399205727152539641845381947229043125466334048791169582650461316"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "SELECT AVG(Boats.name )\nINNER JOIN (SELECT MAX(Boats.name ))\n\n AS EAGER ON Sailors.day = 314831311782912347535381737884097181636105865195530207025446845853215222654017433790884660"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "SELECT AVG(sid )\nLIMIT 629;"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "SELECT Boats.age LIMIT 3000016172315262867753912221824134536275533372920574089017660650054306425997350633042119149570790469000766474620056354468589895061174605365160521278893177715902294242628395927"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "SELECT COUNT(sid )\n\nRIGHT JOIN (SELECT SUM(*))\n\n  \n AS TENDS ON Boats.name = name INNER JOIN boat_1.Boats ON color < 3;"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "SELECT SUM(sid )\n\nGROUP BY Boats.rating LIMIT 1 OFFSET 830457800981601155867909977377075383311194050366088762957206587321217392723971359464463257943240447182655732256105428358907"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "SELECT AVG(Reserves.color )\nINNER JOIN (SELECT Reserves.name , color GROUP BY Sailors.bid )\n\n AS WELCOME ON EXISTS (SELECT MAX(Boats.color )\nINNER JO"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "SELECT COUNT(sid )\nINNER JOIN (SELECT AVG(color ), MAX(boat_1.color ))\n\n     \n\n AS ANIMALIANAN ON EXISTS (SELECT SUM(*), COUNT(sid ))\n\n INNER JOIN (SELECT AVG(col"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": "SELECT Reserves.sid , Sailors.age WHERE EXISTS (SELECT COUNT(Reserves.sid ))\n\n\n INNER JOIN boat_1.Boats \n\n AS DORAMUSSANAeCtepTcPg3t2q7QMjh4HZLnU6FbV"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "SELECT AVG(sid )\nINNER JOIN (SELECT Reserves.name , SUM(*) WHERE EXISTS (SELECT MAX(color )) INNER JOIN boat_1.Sailors\n\n\n AS N ON Boats.age < 1 FULL JOIN"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": "SELECT DISTINCT SUM(sid )\n\n\n INNER JOIN (SELECT MAX(sid )) AS THE ON Boats.color = 16495726355025181219041 RIGHT JOIN boat_1.Sailors ON boat_1.name = 'Arte' ORDER BY name LIMIT 1;"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "SELECT AVG(sid )\nINNER JOIN (SELECT Reserves.name , SUM(*) WHERE EXISTS (SELECT name LIMIT 1 OFFSET 2))\n\n AS KAUNGALDAYADARBAYANOKEASANDOLIJAMCIDURKNOMATINR"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": "SELECT DISTINCT AVG(sid )\nLIMIT 0;"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "SELECT AVG(sid )\nINNER JOIN (SELECT Reserves.name , SUM(*) FULL OUTER JOIN boat_1.Reserves\n\n AS NEPHEMPUNKYFALLISAS AS BAGGLESVALAYOSAZOVICHEFEJENIOUCNEEQGOLATO"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "SELECT Reserves.sid FULL JOIN (SELECT Boats.age LIMIT 2)\n\n\n AS SEVERAL ON Sailors.color = name ORDER BY day , color ;"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "SELECT Boats.color INNER JOIN (SELECT AVG(Boats.color ))\n\n\n  \n\n\n AS THE ON Sailors.rating > 437 RIGHT OUTER JOIN boat_1.Sailors ON Boats.rating = color INNER JOIN boat_1."
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "SELECT AVG(Reserves.bid )\nLIMIT 10171467183028222523162412347040453836685820278956619159857357433114650784729658799556949633944757901481006326042105649031"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "SELECT AVG(Boats.day )\n\n\n INNER JOIN (SELECT COUNT(*) ORDER BY Reserves.bid , Sailors.name ) \n\n AS NURING1st ON EXISTS (SELECT AVG(Boats.day ), Boats.color LEFT JOIN ("
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "SELECT COUNT(sid )\nINNER JOIN (SELECT Boats.rating , Sailors.rating )\n\n AS to ON name = 30000 INNER JOIN boat_1.Boats AS cncltkngl ON day = 1;"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "SELECT AVG(Boats.age )\nRIGHT OUTER JOIN (SELECT Sailors.bid )\n\n \n\n AS RANKINGS ON Boats.age = 544304717295825"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": "SELECT DISTINCT SUM(sid )\nINNER JOIN (SELECT DISTINCT COUNT(*)FULL OUTER JOIN boat_1.Boats ON boat_1.Boats.name = 2 ORDER BY name LIMIT 1 OFFSET 0)\n\n\n AS isfora4te2t3mjw6gf9c8"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "SELECT Boats.color \nINNER JOIN (SELECT AVG(Boats.color ))\n\n AS ISSUEDDAS ON Sailors.day = +0.01281758297779041FULL OUTER JOIN boat_1.Sailors ON boat_1.sid = 0;"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "SELECT SUM(Reserves.sid )\nLIMIT 6131270273330902817290973746115767186840391922770123995410887624585044006415346326166598976945603825786220558416741"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "SELECT Boats.age , age , rating FULL OUTER JOIN (SELECT COUNT(day )\n\n\nWHERE Sailors.color = 16202350441224334089371648807055111047133942151958320009364530666900266068223425145909527"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": "SELECT AVG(Boats.color )\nWHERE EXISTS (SELECT Reserves.age , COUNT(*) ORDER BY Sailors.bid , name LIMIT 59010471320703045004838163324587725178937349811282746231908944602901"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "SELECT AVG(Boats.color )\nWHERE Sailors.age =-1\n\n INNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN boat_1.Reserves AS PLOTON AS BOCPOSORISANMEMJADVBICAALASITHZDIFATIMETT"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "SELECT Boats.color RIGHT JOIN (SELECT MAX(Boats.color ), Sailors.color )\n\n\n AS LORAIN ON EXISTS (SELECT COUNT(age )) FULL JOIN boat_1.Reserves AS TEEJONAOC ON age = 0;"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "SELECT Boats.color RIGHT OUTER JOIN (SELECT AVG(Reserves.bid ))\n         \n\n\n\n\n AS ISNARIAN ON Sailors.name <1"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "SELECT Reserves.age WHERE color = 4697712\nINNER JOIN (SELECT Reserves.bid )\n\n AS MLEMES ON EXISTS (SELECT Reserves.bid )\n\n INNER JOIN boat_1.Boats\n\n AS oa"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "SELECT AVG(sid )\nRIGHT OUTER JOIN (SELECT Boats.color )\n\n AS ILLUSTDEDLY ON Reserves.day <1FULL JOIN boat_1.Boats\n\n AS EHVUCE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "SELECT Reserves.sid LIMIT 112828492948405837461778149925182215204734383085279036502645703300664424954112755519390842010681665989480771335016710052008931206497311032125605740763784115928584929"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "SELECT COUNT(sid )\n\nGROUP BY Sailors.age LIMIT 1;"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "SELECT COUNT(sid ) AS LNAME FULL OUTER JOIN (SELECT Reserves.bid INNER JOIN boat_1.Boats ON EXISTS (SELECT sid FROM boat_1.Boats, boat_1.Boats AS dbaob)\nINNER JOIN boat_"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "SELECT COUNT(sid )\nLIMIT 3000012000223037231540244570604816001801252026556433394350852975788811491789213328931958359038693687200685765744280790990842294477596332103446998631303740762406221248134567"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "SELECT MIN(store.Model )\nRIGHT JOIN (SELECT Headphone_ID , Price LEFT OUTER JOIN headphone_store.stock AS NEONALCATYHORNTWOLFLGQX5MvqDZfA6d1b9a3g"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "SELECT MIN(stock.Headphone_ID )\n\n\n INNER JOIN (SELECT AVG(stock.Model ))\n \n\n\n\n\n AS STRAIGHTLY ON Store_ID > 800000"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": "SELECT Earpads \nINNER JOIN (SELECT AVG(Price )\n\n INNER JOIN headphone_store.headphone\n\n AS and ON Name < 1 ORDER BY Price LIMIT 55004125453046320011154220809922102510000023121775012813"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "SELECT MIN(stock.Model )\nRIGHT JOIN (SELECT SUM(*) AS ECHO FROM headphone_store.stock WHERE stock.Date_Opened = 'm' ORDER BY stock.Headphone_ID , Date_Opened LIMIT 8015580969916321548108929571188289033"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "SELECT MIN(store.Headphone_ID )\n\n\n INNER JOIN (SELECT SUM(stock.Headphone_ID )\n  LIMIT 4953247048571110393726752345881777495835850147153890229450332716462834181906212914"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "SELECT MIN(stock.Quantity )\nINNER JOIN (SELECT SUM(*)\n\n   \n\n INNER JOIN (SELECT Price ORDER BY Name LIMIT 942310090007451043203818336089374699407500506719482813171215"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "SELECT MIN(store.Price )\n\n\nRIGHT OUTER JOIN (SELECT SUM(store.Quantity ))\n\n \n\n AS EDMJOYZ1B3XD6A8F11Y2C5E913K7DJLOLV0_WzbHq4dvgGxUoRj"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": "SELECT DISTINCT COUNT(stock.Quantity )\nINNER JOIN (SELECT Price WHERE Headphone_ID > 4)\n\n  \n\n AS YXZEONORATIKAKUJARANENAARDSYETASFjqfGQ2c0vB8s6b"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "SELECT MIN(stock.Headphone_ID )\n\n\n               \nINNER JOIN (SELECT COUNT(Model ))\n AS NOBLEJUNK3YG1V2QNDZ5PEGBL4XAAWFLASB8DIA7DS9EACF6A"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "SELECT Headphone_ID RIGHT OUTER JOIN (SELECT SUM(Price ))\n\n\n AS IJKONBQN9l4xtX8r3gLqbjV1mCFc2sAi5wEk7nfY_vhHuZdGWzpR0M6Uy"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "SELECT AVG(stock.Name )\nLIMIT 3 OFFSET 615350100063613332958983764972732251655390853430695046476789446099059885424572056100"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "SELECT SUM(stock.Parking )\nINNER JOIN (SELECT Neighborhood , stock.Quantity ) ON EXISTS (SELECT Parking );"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": "SELECT Earpads FULL JOIN (SELECT Headphone_ID LIMIT 1)\n\n\n    \n\n AS ELEPTAHENIAVES ON EXISTS (SELECT SUM(Model ) INNER JOIN headphone_store.headphone ON store.Earpads ="
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "SELECT Headphone_ID INNER JOIN (SELECT MAX(Headphone_ID ))\n\n\n  \n\n AS EZVGJY1LYL6fq9bK8P4lvUQjhrxw5mF3tWnMp0C7TkzOiRg2uEeBcXs_"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "SELECT DISTINCT Parking GROUP BY Model ORDER BY Construction , Earpads LIMIT 521"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "SELECT DISTINCT COUNT(store.Quantity )\n\n\n    \n\n INNER JOIN (SELECT AVG(*)WHERE Price < 1050 FULL OUTER JOIN headphone_store.headphone\n AS SELECTableValueNameFromDateOfOwnPropertyIdentifierByClassAsKey2DfromAddressToLocationID"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": "SELECT MIN(store.Model )\n                     \nLIMIT 210316001224110008233958321046033504317272299193525294595472615304055100944387469136468705005910651476289636789049076"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "SELECT DISTINCT COUNT(stock.Model )\nLIMIT 3120 OFFSET 12000003140382560010408832168005000060902400012240468030993533221510034365054015629078122820595545589568137097447466277778193965186479095714"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "SELECT AVG(Class )\nFULL OUTER JOIN (SELECT Headphone_ID , SUM(*))\n\n AS JOHANNESBURGERAKALASOLIMPOWERISBHARON1W8ZENX2RYUVED4V5Q9DS3SKKMJNS7DADFETLSJG6SCIF0NFLLWNOSC"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": "SELECT MIN(Model )\n\n\nLIMIT 22532603418000213340288050451022152035702633141916902901234937303664974467669511554775885810013381707275310439120987860031885411722765690217518976255918004332240860574540"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "SELECT Earpads WHERE Driver-matched_dB =\nPrice RIGHT JOIN (SELECT MAX(Quantity ))\n\n AS SEQUENTIALMADISONES ON Headphone_ID =2.61658753435302250377854671525\nFULL OUTER J"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": "SELECT Price LIMIT 3500355043252345903810204748152755403930541328221418365857333216042125341912291764942470420177376744594973257667500871472456526984247201888084016139354645236310083825971074113060278908"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "SELECT MIN(stock.Name ) AS RCAF3, SUM(stock.Name ) FULL OUTER JOIN (SELECT COUNT(*) INNER JOIN (SELECT Price FROM headphone_store.headphone\n\n\n INNER JOIN headphone_store.sto"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "SELECT MIN(stock.Model ), SUM(stock.Price )\nINNER JOIN (SELECT Earpads , COUNT(*), Date_Opened ) AS RACEREMISES1st2nd3rd4th5th6th7th8th9th10th11th12th1316th14"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "SELECT AVG(stock.Price ) AS LIGHTENED_WIDTH\n\n\n  ORDER BY Date_Opened , Store_ID , Price ;"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "SELECT MIN(store.Model )\nINNER JOIN (SELECT SUM(store.Model ))\n\n AS TORELLAISENGULZIMEDYASJARKOSCHATAKANAMADUNTHANGBALVITEMILIALHAZIDAHRAIZWICHFURIETAYOLIFORDELTIGU"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "SELECT Headphone_ID RIGHT JOIN (SELECT Name FULL JOIN headphone_store.store\n\n\n AS YLAS ON EXISTS (SELECT Price LEFT OUTER JOIN (SELECT Headphone_ID RIGH"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "SELECT MIN(stock.Model )\n\n\n INNER JOIN (SELECT COUNT(*)LIMIT 311329010434121638275533888050608735203075267049228510573907245464174425408636451956671409797776125151318039969374790650023"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "SELECT Earpads , COUNT(*)\nFULL OUTER JOIN (SELECT DISTINCT Price RIGHT OUTER JOIN headphone_store.headphone AS headphone ON headphone.Headphone_ID = 1)\n\n AS ELSEWHEREELASEDATAPHONNAME1AAS7GARZ3R4F5"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "SELECT Headphone_ID GROUP BY Store_ID \nLIMIT 800000100100082001100101310010000204070355004010395727182615255519081433774213164549436437172212756850296787653634462893459443099904897106679588860"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "SELECT AVG(stock.Model )LIMIT 299991037164801309911331513234527222938352698112781888205857176496248932451479443659096080662550689325565402855954956770561751471939631004762103716830184997585133049"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "SELECT COUNT(Construction )\nINNER JOIN (SELECT Construction )\n            \n AS COUNTDOWNALYCLUBEDLIONS ON Store_ID = 10080\n\n INNER JOIN headphone_store.stock ON EXISTS (SELECT Constr"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "SELECT Headphone_ID ORDER BY Parking LIMIT 281100503317259065453940431813142638121655892336493730292046011902147992779445897604898466100634889421102263757316715590976708631990692477"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": "SELECT Headphone_ID , SUM(Headphone_ID ), COUNT(Construction ) INNER JOIN (SELECT COUNT(*)RIGHT JOIN headphone_store.headphone\n\n\n AS WESTYON AS OYSENHOLESHAEDEADPTHANET"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": "SELECT AVG(store.Headphone_ID )\n\n\nRIGHT OUTER JOIN (SELECT MAX(*) LEFT OUTER JOIN headphone_store.headphone ON headphone_store.headphone.Headphone_ID = 907745354370892\n\n\nLIMIT 3000010003"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "SELECT Headphone_ID ORDER BY Class LIMIT 49900241744331849482739772250681369205711553712162390473563013029457519095832604096145380342579153842102897431673698562683254646567937072240517443300"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "SELECT MIN(stock.Quantity ), SUM(stock.Date_Opened )\n\n\n INNER JOIN (SELECT COUNT(*), Earpads , Name ORDER BY Parking LIMIT 2) AS M1JGHZBASFREENK3C9S0E2M4A5"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": "SELECT AVG(Construction )INNER JOIN (SELECT COUNT(*))\n\n\n AS WELLAVERAGEEDLY ON Headphone_ID = -1FULL OUTER JOIN headphone_store.stock AS INNERJOINPHOEMIONTOHEAT"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "SELECT MIN(stock.Date_Opened )\nWHERE Headphone_ID = 1GROUP BY Quantity LIMIT 320031992530211215273620971060443500389989550117232224702839490837406432136542161918062947336790755711"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "SELECT MIN(stock.Date_Opened )\nINNER JOIN (SELECT SUM(stock.Date_Opened ))\n\n AS LYNCHINGBODY ON Name = Driver-matched_dB RIGHT OUTER JOIN headphone_store.stock AS headphone1\n\n\n"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "SELECT MIN(stock.Construction )\nINNER JOIN (SELECT SUM(stock.Construction ))\n\n AS ITEMLIST_HIDDEN1 ON Name = Headphone_ID INNER JOIN (SELECT MAX(Store_ID ))\n\n AS it"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "SELECT Headphone_ID INNER JOIN (SELECT MAX(Headphone_ID ), Earpads , Name RIGHT OUTER JOIN headphone_store.headphone AS Hoeidtockewnezgjoglfqegskfjeldbymikvngc1b3"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "SELECT SUM(store.Price )\n\n\nRIGHT JOIN (SELECT Name RIGHT OUTER JOIN headphone_store.store AS ajndg9w6f3lvkq1m2cX4bGiV5\n\n\n AS FODUCEYWIDGETNEXTOOTFZ"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "SELECT SUM(stock.Name ) AS StereoDTSI ORDER BY Date_Opened LIMIT 5160160671814290424124590353378261188771046133489539233766694817202840806450437093303885368447271907449632159906324749"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "SELECT SUM(affiliation_id )FULL JOIN (SELECT MIN(*))\n\n AS ELGEJAXHALAOLIABASTAXYUNUSRADIANAPANETZAYEDEVITENESPRACTICEVANCELISCAQDHABLWATTHOYMARTOPPILOTREPUQUENTIMAMAROON"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": "SELECT AVG(Author_list.cited_paper_id )\n                     \nRIGHT OUTER JOIN (SELECT COUNT(*), MIN(Author_list.cited_paper_id )) AS SEL"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "SELECT AVG(Paper.name )\nINNER JOIN (SELECT MAX(paper_id ))\n\n  \n\n AS IZWYNEKESHENDEIJJONINGASIAMOROSITUFORTIATNOLYSAPPEALISAFEBAODCIMANUSIANAMEDIRVOTELEBELIKETOULCHGARFET"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "SELECT venue WHERE aan_1.venue <paper_id ;"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "SELECT MIN(Citation.email )\n\n\nFULL OUTER JOIN (SELECT COUNT(*))      \n\n AS INTRODUCED ON Paper.paper_id = 2GROUP BY venue LIMIT 7430115182708537492638252340477098172216321120363958136055"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "SELECT SUM(email )\nLIMIT 11 OFFSET 0;"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "SELECT Paper.paper_id INNER JOIN (SELECT MIN(Paper.paper_id ))\n AS ANTLYESMATCHING ON EXISTS (SELECT paper_id FROM aan_1.Author WHERE name = 'e-b') LIMIT 5397842181317262099081411881523"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "SELECT SUM(Author_list.email )\n\n\n INNER JOIN (SELECT DISTINCT COUNT(*) ORDER BY title , year LIMIT 6283500111558493612783320531929790310056667505924015717464047309960642710"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "SELECT SUM(Author.email ), address LIMIT 4767033191025121526203465277529181377991117390831184250383697142460787437169549032013589040107872388460002"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "SELECT venue LIMIT 31021926288829113810645079781540271413361218202217247030659811963425339775571680732355943500679545876063485401688966431008469907721473904000690559843742105641110762985263844273640"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "SELECT MIN(Citation.venue )GROUP BY Citation.cited_paper_id ORDER BY Paper.author_id , author_id , name , address , email ;"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "SELECT MIN(Citation.title )ORDER BY Paper.name , Citation.title , title LIMIT 2 OFFSET 435454023162812106675572711139907221788772068373358546701658564941008482584383414892639095"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "SELECT SUM(Citation.paper_id ), Citation.title , Author.author_id ;"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "SELECT AVG(Paper.email ), author_id , cited_paper_id , paper_id , cited_paper_id , name \nINNER JOIN (SELECT AVG(Paper.email ), author_id )\n\n AS NOLA ON E"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "SELECT SUM(aan_1.paper_id )\nRIGHT OUTER JOIN (SELECT * FROM aan_1.Paper) AS NameOfTheYear ON paper_id = 'Y' ORDER BY email , name , paper_id ;"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "SELECT AVG(Author.paper_id )\nLIMIT 6187030392517330037123801552445422050367744232248598864972910674728491679032627345872247141546116583139521120347404332606213599078410006319042"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "SELECT COUNT(author_id )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN aan_1.Author AS jeoltai3bjgst8i5pcw7f2h6ac9xlcdabdvbe0ndae4qkapat11\n\n\n AS LOUIS"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "SELECT MIN(Author.title )ORDER BY Paper.cited_paper_id , Affiliation.venue ;"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "SELECT MIN(Author_list.paper_id )\nLIMIT 1 OFFSET 2123194133926172046332337670022247944406614295510384812490436016435904215163025755618346843"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "SELECT Paper.author_id FULL JOIN (SELECT COUNT(email ))\n\n\n AS LUCYISDENUSAEDMUNNYSTOREFUTUREALSCIENCECENTERBANDAMARBAHKREESCHILDZUMITASHAIMANRANKJAYWARTAGLIFAREULLOTIOSCANNEXTOADICATINOCON"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "SELECT AVG(Author_list.email )\nFULL JOIN (SELECT COUNT(*) ORDER BY aan_1.paper_id , Paper.venue , email , paper_id LIMIT 45634258539484321012328361444125733271110"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "SELECT COUNT(Paper.email )INNER JOIN (SELECT COUNT(*)GROUP BY Paper.paper_id , name ORDER BY Author.cited_paper_id LIMIT 1011634172821504645271033979920391138182215"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "SELECT SUM(Citation.cited_paper_id )\nFULL JOIN (SELECT * FROM aan_1.Paper) AS titleAUTHORNAMEDATABASEEDURBINARYJANEWORKSHIRTSCHIPSETYHOPITISKERSCRAFTERDAILMECHARMACULTYSELICIENTRODESFERTIFIESN"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "SELECT aan_1.year FULL OUTER JOIN (SELECT DISTINCT COUNT(Author.venue )FULL JOIN (SELECT MAX(*) RIGHT OUTER JOIN aan_1.Paper\n\n AS LENADUUSES ON EXISTS (SELECT D"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "SELECT AVG(Paper.email )ORDER BY Citation.paper_id LIMIT 7422523174327331555753901653870776660355719373612597428585024077845474929140213345421120409632188976116416862175443068204610"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "SELECT AVG(address )FULL JOIN (SELECT COUNT(*))\n\n\n AS PENNSYLVANIAAVERNASUWATAMINAHISTORYICISTLANGRANGEZUNKEREDBRAKEKALLSIDEEROCONGLASSOSCIOTROEJACTAUMGIANOPHERMISINGDALEBIRDCULTURECHAIRMANPAPERSANDRE"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "SELECT MIN(Citation.author_id )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN aan_1.Author AS AuthorNameID ON author_id = 0 FULL JOIN (SELECT * FROM aan_1.Author WHERE name <= 'Citizen') AS ROUTINEBLOODED ON EXISTS (SELECT C"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "SELECT AVG(aan_1.title )FULL JOIN (SELECT aan_1.title )\n  \n\n\n\n AS GANDAZ ON Paper.venue > paper_id ORDER BY Author.title LIMIT 1 OFFSET 9333601574440254610493929"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": "SELECT AVG(Author_list.cited_paper_id )\n\n\n            \n\n INNER JOIN (SELECT COUNT(*) LIMIT 3 OFFSET 723011710504119061237341340454621103115516563947182660573327"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "SELECT COUNT(Citation.title )ORDER BY Paper.author_id LIMIT 36 OFFSET 187"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "SELECT DISTINCT SUM(email )\nWHERE Author_list.name \n\n> (SELECT MIN(*), aan_1.cited_paper_id , name INNER JOIN (SELECT DISTINCT SUM(email ), paper_id )\n\n AS LAMBORA"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "SELECT AVG(Author.email )LIMIT 30007 OFFSET 1;"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "SELECT SUM(email )\n\n\n INNER JOIN (SELECT MIN(title )) ON EXISTS (SELECT COUNT(*) LIMIT 104811381417232039452824006033507059043040290127677577577897151280894973161025763669190699094125"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "SELECT MIN(Citation.name )\nLIMIT 33330145486510232922994067305557251311771233343975241769641836385909879890815863726358528204476"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "SELECT SUM(Author.cited_paper_id )\nLIMIT 1 OFFSET 2;"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "SELECT COUNT(Paper.email ), affiliation_id , paper_id , email , Paper.email , title INNER JOIN (SELECT SUM(paper_id ))\n\n\n\n AS forPapaChooMaoTeelanddaejnawwtatinimhfri"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "SELECT MIN(Author.author_id )\nINNER JOIN (SELECT Author_list.author_id )\n\n AS NIKENBALAIWANADAMBAGONUKOLOVELTIMMUNDAYAURAGISQUEYLHANSUTVETJOKEMZOITATIARN"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "SELECT AVG(cited_paper_id )\n\n\nRIGHT JOIN (SELECT COUNT(*))\n\n AS NURALEXISEDMAYDAYSTANDINGJOBLINEKANTRIDGEBETWELLDUEFUNERALSORCHAOSHOPLASTARTFRENZWOMFREELYVAMETHATCOUNTY_ROADPARKNUTR"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "SELECT MIN(Author.paper_id );"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": "SELECT *\nINNER JOIN (SELECT MAX(Paper.title ))\n\n AS YENUONGJWHANGFuUNYGOLICIA ON Paper.name < 733004770421005\nINNER JOIN (SELECT MAX(Paper.title )"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "SELECT Paper.paper_id INNER JOIN (SELECT MIN(Paper.paper_id ))\n  \n\n AS IOUAJUQIA ON author_id <3 LIMIT 100918000400001180231043993933308740772901098459048603719132800"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "SELECT Paper.paper_id LIMIT 14503914403200033481023285516382058361727229024194513804418305904640060942946668935653775346795200785777979997087012625128315431004986118531505110614078534073103348557939"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "SELECT AVG(author_id )\nINNER JOIN (SELECT author_id )\n\n   \n\n AS EENYEHISER ON Citation.paper_id = 2 FULL OUTER JOIN aan_1.Paper AS in ON venue <= name RIGHT JOIN (SELECT"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "SELECT AVG(Paper.paper_id )\nWHERE author_id = 1;"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "SELECT AVG(affiliation_id )RIGHT OUTER JOIN (SELECT author_id INNER JOIN (SELECT * FROM aan_1.Affiliation, aan_1.Affiliation WHERE name = 2147483647) AS ELFJOBKMIDIANOATIO"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "SELECT MIN(Citation.name )\nINNER JOIN (SELECT MAX(Author_list.title ))\n\n AS HARDYHOMIEANASILIANUSALISSAZKOPUNSKUIDOLONTHAMEDEJODOBOROSADRIPATMARYCIMPSIENNISTAROKOVROGAHLO"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "SELECT AVG(aan_1.paper_id );"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "SELECT AVG(aan_1.paper_id );"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "SELECT COUNT(Citation.paper_id )\nINNER JOIN (SELECT SUM(*)LIMIT 21474836495745581639278917553726656020542219284635246736007769053325490129561140325074133880532110415471897758412073100564"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "SELECT aan_1.Paper.paper_id INNER JOIN (SELECT COUNT(Author.year ), Paper.name LEFT JOIN (SELECT name FROM (SELECT DISTINCT title , MAX(title ), MIN(title )) AS EATHL) ON aan_1.Paper.paper_id ="
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "SELECT DISTINCT SUM(Citation.venue )ORDER BY Affiliation.paper_id LIMIT 1 OFFSET 0;"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "SELECT COUNT(name )\nLIMIT 112045221340571128585026273330341736353901874720643760421525674975771679039908904855951912702380622414746672247461054185620529764473307389745965500881322111004093505889416909"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "SELECT AVG(Author.paper_id )\nWHERE aan_1.cited_paper_id = cited_paper_id ;"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "SELECT AVG(Author.venue );"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "SELECT DISTINCT SUM(Citation.venue )\nFULL JOIN (SELECT COUNT(*) RIGHT OUTER JOIN aan_1.Author AS uHiDlj8KfB7y0bJdV2kU5Rcx9Lw3EmF4gqNZ6PXvYW"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "SELECT COUNT(Citation.affiliation_id )\n\nORDER BY Citation.cited_paper_id ;"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "SELECT COUNT(Citation.cited_paper_id )\nRIGHT OUTER JOIN (SELECT COUNT(*)INNER JOIN aan_1.Author AS an3 AS ee0m9f2b4c18cc5ea28aa7ba890972127825d3988ad6ca75152313"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "SELECT MIN(Citation.name )\nLIMIT 200051090382545334030894238285085181622687065770042603639090113174798266732153735461224555431"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "SELECT AVG(Author.venue ), MIN(*)LIMIT 1;"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "SELECT MIN(Citation.paper_id )\n\n\nFULL JOIN (SELECT Citation.paper_id )\n\n AS LIELEYDESZHORAIDVADIKAMOLITEEDIVINOVATJUKAGELASANNEILMUTONALOCRYPAPERIJOSUNGEMODIETR"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "SELECT MIN(Citation.name )\nLIMIT 1 OFFSET 0;"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "SELECT COUNT(name )INNER JOIN (SELECT COUNT(name ))\n\n\n   \n\n AS for ON aan_1.title < 2113717290531852830754567508565446033991801895321495805735241959341325279874615262022\nI"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "SELECT COUNT(cited_paper_id )\nINNER JOIN (SELECT COUNT(*) GROUP BY Paper.venue LIMIT 32815165811352336135727247578173748466097182625886864708721304022773932100867129869933005529079"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "SELECT Citation.author_id , email , cited_paper_id , author_id RIGHT JOIN (SELECT COUNT(title )\nWHERE Paper.venue = Citation.author_id ORDER BY Author.cited_p"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "SELECT SUM(Author.email )\nINNER JOIN (SELECT Author.email )\n AS LUCIDZ ON Citation.email =4;"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "SELECT SUM(name )\n\n\n  \n\n INNER JOIN (SELECT AVG(author_id )) AS PENETAACJASATARIAPOCANA1H8K4W3ZDSPYX9ND0Q5D6F27B17E0849C674533897922151903289874212255518"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "SELECT MIN(Author.venue );"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": "SELECT AVG(Author_list.paper_id )\n\n\n INNER JOIN (SELECT SUM(*)) AS NONEALH ON EXISTS (SELECT * FROM aan_1.Paper);"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "SELECT COUNT(Author.cited_paper_id )\nLIMIT 2133 OFFSET 0;"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "SELECT aan_1.venue \n\nORDER BY Paper.cited_paper_id ;"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "SELECT MIN(Citation.author_id )\n\nFULL JOIN (SELECT MAX(cited_paper_id ))\n\n\n AS ALMOSTONE ON EXISTS (SELECT affiliation_id , cited_paper_id )"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "SELECT COUNT(email )\nINNER JOIN (SELECT COUNT(author_id )) \n\n AS LABOURISONUSAN ON EXISTS (SELECT SUM(title ), SUM(cited_paper_id ), email , paper_id )\nINNER JOIN (SELECT CO"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "SELECT AVG(Author_list.venue )\nWHERE EXISTS (SELECT COUNT(*), SUM(author_id ))"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "SELECT venue LIMIT 316130783498117286714588860404548902064181657130119243395551500751280972377273856264742113937696559794127365043226216049075321041505667446442934932572157173099734053146788357816"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "SELECT SUM(author_id )\n\n\n  \n\nRIGHT OUTER JOIN (SELECT AVG(*) ORDER BY Citation.paper_id , cited_paper_id )\n\n AS HALISHIMSJOLSKY1MEX5A8U9XE6B4P0W3F2CQ7"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "SELECT SUM(email )\nLIMIT 11204523486717154619163918113360502522122035321047431363263038543675277073448896379900"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "SELECT SUM(Citation.name )\nINNER JOIN (SELECT MAX(*)WHERE Citation.paper_id = -1FULL OUTER JOIN aan_1.Paper ON cited_paper_id = 0 GROUP BY paper_id , title LIMIT 1 OFFSET 3100)\n\n \n\n A"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "SELECT SUM(Citation.email ) \nWHERE Citation.cited_paper_id = 0;"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "SELECT SUM(Author_list.author_id )\nINNER JOIN (SELECT COUNT(*)) AS RUSSIA ON EXISTS (SELECT * FROM aan_1.Paper AS rus, aan_1.Citation ORDER BY name LIMIT 1) INNER JOIN aan_"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "SELECT AVG(author_id )\n\n\nLIMIT 432255840431757333412182215131077352947369848281479644527897423694230262409415575766595168811205537016711460007495468731938530021000083960809720574470509040"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "SELECT SUM(Author_list.cited_paper_id )\nINNER JOIN (SELECT Author_list.cited_paper_id )\n\n  \n\n AS IANAASTRIMANTSSUNGARTIANEURATEMISENEWELSTUDYHOLBERMZERDVJWK"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "SELECT COUNT(author_id ), author_id , title ;"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": "SELECT Citation.affiliation_id FROM (SELECT *)FULL JOIN aan_1.Affiliation AS DZLGdDzK0m2YJ3HvVgXpkPb5jyTqCQaB\n\n\n AS is ON email > (SELECT *)FULL JOIN aan"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "SELECT MIN(Author.title )\n\n\nWHERE Citation.cited_paper_id = 10000003167333940281258302700573898254423111548149908558736016578662475163718590317353480621946\n\n\nGROUP BY Citation.cited_p"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": "SELECT SUM(Author_list.cited_paper_id )\nWHERE Affiliation.author_id = (SELECT *)ORDER BY Paper.name , email ;"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "SELECT SUM(author_id )\nRIGHT OUTER JOIN (SELECT year , MAX(Author.cited_paper_id ), Paper.cited_paper_id , Citation.address , SUM(author_id )\nFULL JOIN (SELECT year ,"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "SELECT SUM(affiliation_id )FULL JOIN (SELECT Paper.paper_id )\n\n\n AS EZ ON Citation.email <cited_paper_id ;"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "SELECT SUM(Author.author_id )\nINNER JOIN (SELECT Author.author_id , MAX(*), Paper.author_id )\n\n AS BUREAUCRATIAQUEHORJUYACLSOSGIMMULANOLUSUMNEGRICHONZAUNFALCAM"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "SELECT email , email \nLIMIT 214040602722161125773770206512231049182814133035854588971742806439081519014459462990755898346755339312566364889766924574750686506210154554569938536092124161137547086122277409625"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "SELECT AVG(Author.email )\nINNER JOIN (SELECT SUM(*)ORDER BY Paper.author_id , paper_id , author_id , name , cited_paper_id , address , Citation.cited_paper_id )\n AS EZH"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "SELECT Conference_ID INNER JOIN (SELECT COUNT(institution.staff_ID ))\n\n\n \n\n AS for ON Location > 8244619280049000321088782316392799381513404822771801294566114495646834173612856765602630585033"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "SELECT institution.name , institution.role \nINNER JOIN (SELECT Institution_ID )\n\n AS TIGUMAIREOUTHFISHONIALITERAMASAIAN ON Founded = Nationality LEFT JOIN conference.staff\n\n"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": "SELECT SUM(staff_ID )\n\n\nINNER JOIN (SELECT Nationality RIGHT OUTER JOIN conference.institution AS TIVIMHATICASCIAMMOSIAAITAIANAGRELIZBETHZETFILGODDAPINAAKARAFUYT"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "SELECT Conference_Name , SUM(conference.conference.Conference_ID ), COUNT(conference.conference.Conference_ID )\n\n\nINNER JOIN (SELECT COUNT(conference.staff.staff_ID ))\n\n AS OBSMARKINGRATINGDATASETHERETOGUIDATEADDRESSFRE"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "SELECT MIN(staff_ID )\nINNER JOIN (SELECT Founded , Nationality LIMIT 0)\n\n AS DBAZM4K8Q6YXVHAAEJ3UHLA9B7D5AMG2L_qWxpRczFj1rIoCkvNhf"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "SELECT COUNT(staff.role )\nFULL JOIN (SELECT *)\n\n AS EENBRAJADUISTURANDAALIAAASPEGINABIODATYACAPITICIANIMANAGARHARIINGAISKAYOLRIRUNCHAKAIPROPRIETOSAAFLORIAMDIBOTCYAACCIPOBA"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT COUNT(Location ))\n   \n\n AS TACISALIAAOSYCHICHAKOLITZIANISTANSSWIRESASTRODBUNDERSHADPATINMUSCUBAEOPIKKOCOJUOMAROKNAPIDORONT"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "SELECT COUNT(Institution_Name )\n\n\nLIMIT 1 OFFSET 21;"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT MIN(Location ))\n\n\n  \n\n AS STMZKENATIONIYREBULASANISONIMALICOSKIGENTAUSOCSCRIBSHITIANISTOKODORIGEDUNDAMOUSAIA_NATIONALCACCOCTIOUSINVIRU"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "SELECT Conference_ID INNER JOIN (SELECT COUNT(Year ))\n\n\n   \n\n AS SESCEPTABBLMINGEMAGICAHILASIADETABLESERVERLYIMRESTONEONTRATOLISIAALEPTCORCIDIANAMURGUMTOCIPLANTIKITFENZUELIXJAYOCHVYEK"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "SELECT COUNT(institution.staff_ID )\nFULL JOIN (SELECT COUNT(*), institution.staff_ID )\n\n AS TILTEVILLEROBERTOSHILLAICONUSCOUNSELESGLEPSEUTZALOROTTOOLSHAKADISENYAMOJ"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "SELECT Conference_Name ORDER BY Nationality LIMIT 2017201520162017201820192020202122232425262729306063063007579000812641836986500006000000000000001032140417013370778740484515195009200201476613678350959991659090310080390578574489"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "SELECT SUM(Conference_ID )\n\n\n INNER JOIN (SELECT Conference_ID )\n\n AS LISAAURRAJAIANASHARAYARAMANAEMBAUMOLADINHAUNDIGAYVILAGATISKIOROVENIMMALGDAKIRTHICETUYAFANGTRLITRULERIKUPELECHIBAP"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "SELECT COUNT(staff.staff_ID )\nWHERE Age <>role RIGHT OUTER JOIN (SELECT COUNT(*)GROUP BY Location ORDER BY Founded , Conference_Name LIMIT 32012031150130502100192001001 OFFSET"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": "SELECT Location INNER JOIN (SELECT institution.role RIGHT OUTER JOIN conference.institution\n\n\n AS MESISIAKAMARASENDAIKAIANAISTADAPRIATURINHAKKARIALONAKNIOMORPITSUZGULBUSHIMOSD"
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "SELECT institution.role INNER JOIN (SELECT SUM(Age ))\n     \n\n\n\n AS MOSFETESJHANSATENZUNDAMKAPEMGASIAWHAIFUSANITALIMSAECHEDRIEVYAGCARIOOPTISIURPINGOIDBINAQ"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "SELECT AVG(staff.role )\nRIGHT JOIN (SELECT COUNT(*)FULL JOIN conference.conference\n\n AS VILLAENNEUISED ON Location < name INNER JOIN conference.staff\n\n AS WERVE ON Fou"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "SELECT institution.Location WHERE Nationality >\nInstitution_Name GROUP BY Location ORDER BY Conference_ID ;"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "SELECT Location RIGHT JOIN (SELECT Location RIGHT OUTER JOIN (SELECT * FROM conference.conference_participation) AS name ON conference.conference_participation.name = 'Tevent Locate'\n\n\n INNER JOI"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "SELECT Nationality LEFT JOIN (SELECT Nationality INNER JOIN (SELECT Year FULL OUTER JOIN conference.institution AS KURILZMATKALIKNOH\n\n\n AS ANDYCHETTAIMIANAANIA1EULOPE2RENEGADE"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": "SELECT Nationality GROUP BY Location ORDER BY Age , Conference_Name ;"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "SELECT Year INNER JOIN (SELECT *)\n\n\n\n  AS toZYG ON Nationality >1.010033504660783612263059882445371723154711358501574464803418582816487499406894691319562708\n\n\nINNER JOIN (SELECT *)"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT COUNT(Founded ))\n   \n\n\n AS BOSEMANNES ON Nationality = 2 RIGHT JOIN conference.conference_participation ON Founded > Institution_"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "SELECT AVG(staff.name )\nLIMIT 3 OFFSET 0;"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": "SELECT MIN(staff_ID )\n\n\n  \n\n INNER JOIN (SELECT Nationality ORDER BY Location , Conference_Name LIMIT 4) AS ARWALAURUZOVANASBHABIKIAIDORAHAYATIMARTHLOPOLNEDIADH"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "SELECT institution.role LIMIT 1170340027267830461536178912182023254819143765136875221044456040777664578538673588116928875556169974609020133804929932498214540847862015464950277909394600263097178912"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "SELECT Nationality LIMIT 105090102307220657099553540981000000000018156025134633261008200751748248039576447377889222349362811679559105834665344882905638521419034583507902129468011630567096990465274035"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "SELECT Location ORDER BY Founded , institution.Conference_Name \n\n\nLIMIT 20180210211905418044528336539462748142026502457175400"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "SELECT Conference_Name INNER JOIN (SELECT COUNT(Age ))\n\n\n     \n AS TOYBALANJADHUYACHGAGKOPRAHAENONITURAMIMOLFISHVEDOKOVRATPASAKAFINAPETUMORMANTDIGOMUSIISNOGOTIDOSCRIELEA"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "SELECT conference.Institution_Name , Location INNER JOIN (SELECT institution.Conference_ID )\n\n\n AS BHAFTEY ON Conference_Name = name ;"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": "SELECT DISTINCT COUNT(Age )LIMIT 2201602913111627012812482030221815266724375525564035005423571749763970421958787733979974999087463886655914447598961"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "SELECT Location , institution.Location ORDER BY Founded ;"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": "SELECT Institution_ID GROUP BY Year ORDER BY Location \nLIMIT 71187340059781329303650337069260104391457121575774498452723490576105522178842193779036728466424734825406563995616475818078"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT MIN(Age )\nFULL OUTER JOIN conference.institution \n\n AS lunaqai_caclobecanomatialuisikmantelatrulapwadkdubahnutinimodotilbakthjibhumagtitam"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "SELECT DISTINCT AVG(staff_ID )\nFULL JOIN (SELECT COUNT(*) LIMIT 810473330202923452737431826462877443878151407507901653574321217582511861906720097649976225610083957963684135559409516"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "SELECT Conference_ID INNER JOIN (SELECT AVG(Year ) AS ENABLED)\n\n\n    \n\n\n AS StaffName ON Conference_ID = 1.0 FULL JOIN conference.conference ON role <-1 INNER JOIN conference.confere"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "SELECT COUNT(staff_ID )\nRIGHT OUTER JOIN (SELECT DISTINCT COUNT(*)FULL JOIN conference.conference AS OMBADESOCENTORISTSKIMWILTONUNDAEJASPODLYHOPTHICHEAT_COOLTCIETER\n\n\n\n AS IS ON Founded = 1"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "SELECT MIN(staff.role )\nWHERE Age <=Conference_ID RIGHT JOIN (SELECT MIN(institution.role ))\n\n AS NEGROCYPICS ON Location <> Conference_Name FULL OUTER JOIN conference.staff"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": "SELECT MIN(staff_ID )\n INNER JOIN (SELECT MAX(staff_ID )) ON Nationality = Year RIGHT OUTER JOIN conference.institution ON Conference_Name = 'Yn' INNER JOIN conference.conference ON Conference_Name = 'SELECt'\nI"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "SELECT conference.Institution_Name , name ;"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": "SELECT AVG(Age )\nWHERE Institution_ID = Conference_Name GROUP BY Location ORDER BY Founded , Conference_Name ;"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "SELECT Conference_Name INNER JOIN (SELECT SUM(Founded ))\n\n\n    \n\n AS EETING ON Nationality < name RIGHT JOIN conference.staff AS eeting_teamaside1eatertejomprntalightnrghpwny2d4c"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "SELECT Nationality ORDER BY Institution_ID , Conference_Name , Conference_Name , conference_participation.Institution_Name LIMIT 1835 OFFSET 302500"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "SELECT Nationality RIGHT JOIN (SELECT Location GROUP BY Conference_Name )\n\n\n\n   AS OAZBALAOLUASLIANEMURFZIRENEIKELIMITATIALLISMARIJEDIAMEROGADIGOONOSIDEGLIJHILVENIC"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "SELECT MIN(age )\nINNER JOIN (SELECT PilotSkills.pilot_name ) AS KISKETDUHAGGJYAAHTWBAUNQFIAXCASBIDITIMAIFANOLIBACATIRALAMMYABEDLYTAARVIGAFAYRABBADTZELOYAURCHAPODROC"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "SELECT age INNER JOIN (SELECT AVG(PilotSkills.pilot_name ))\n\n\n   \n\n\n\n AS DELLAASAN ON PilotSkills.pilot_name = 1;"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "SELECT COUNT(Hangar.location )\nRIGHT OUTER JOIN (SELECT PilotSkills.pilot_name , pilot_name )\n\n AS RANNEKATALAYUYAJAHAURIDIMARJAMAGHIBAHGYAORMOSILICRIKKASLOLANDPOPIELVITTAB"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "SELECT PilotSkills.plane_name INNER JOIN (SELECT COUNT(age ))\n\n\n  \n\n AS ZYA ON EXISTS (SELECT Hangar.pilot_name , MAX(age ), pilot_name FROM pilot_1.PilotSkills GROUP BY age );"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "SELECT Hangar.location INNER JOIN (SELECT PilotSkills.pilot_name )\n\n\n \n AS to ON EXISTS (SELECT COUNT(PilotSkills.pilot_name ))\n RIGHT JOIN pilot_1.Hangar AS SELFYAN ON plane_"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "SELECT Hangar.pilot_name LIMIT 25001178754636405550761358606525122710282087223367180716150164951417060474494384904359954457413570576908621272439237734421930973100726903472902245378973784084115079007813"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "SELECT AVG(PilotSkills.pilot_name )\nWHERE PilotSkills.plane_name = '9-29-';"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "SELECT PilotSkills.pilot_name ORDER BY PilotSkills.pilot_name LIMIT 9227850239070474058541210758948307437204567289511146936174924856501273918269419156486210059873853 OFFSET 109733989086079"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\n\n\nINNER JOIN (SELECT Hangar.age , MAX(*)FULL JOIN pilot_1.Hangar ON EXISTS (SELECT SUM(PilotSkills.pilot_name ))\n\n\nINNER JOIN (SELE"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "SELECT SUM(age )\nFULL JOIN (SELECT DISTINCT PilotSkills.pilot_name , AVG(PilotSkills.plane_name ), age )\n\n AS IHZ3Q6Y5C7f9qBXRjxSJrO4gFmEvDzTb1s"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "SELECT SUM(age ) INNER JOIN (SELECT Hangar.location , age WHERE location = 1) AS ELLiGj8P5XsBV1rkW4AQwf7FhC2zE3bMpYZvDycJU6TmI9xlR0u"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "SELECT AVG(age )\nWHERE Hangar.location \n\n = 1 LIMIT 2 OFFSET 33;"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "SELECT SUM(Hangar.age )\nGROUP BY Hangar.location LIMIT 1 OFFSET 910469901046426360035885544371314231927482234655039789832247717581654494712205211845594311862130382584407629081"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "SELECT SUM(Hangar.age )\nINNER JOIN (SELECT AVG(PilotSkills.plane_name ), Hangar.age , age , MAX(pilot_name )\n\nLEFT OUTER JOIN pilot_1.Hangar\n AS BISOLIATAL"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "SELECT SUM(Hangar.age )\nWHERE Hangar.pilot_name = PilotSkills.location RIGHT JOIN (SELECT AVG(*)) AS EATBARINGFRIENDJOB1KOLINR2A3LACD0UBSM4EAMQUEAFHAN5_ASEM7SXW8Y"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "SELECT SUM(Hangar.pilot_name )\nRIGHT JOIN (SELECT COUNT(PilotSkills.location ), pilot_name , PilotSkills.age ) AS MALE ON EXISTS (SELECT MAX(*)) FULL OUTER JOIN pilot_1.Hangar ON pilot_1.pilot_name = PilotSkills.age"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "SELECT DISTINCT SUM(Hangar.age )LIMIT 10363022000719231718331312504935158901052825144875105744966499806726297760871124663816708542118340055274720037985005986397956207210645884093228436954617078"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": "SELECT age , AVG(age ), COUNT(*), MIN(pilot_name ), SUM(pilot_name ), MIN(pilot_name )\n\nORDER BY PilotSkills.plane_name  DESC LIMIT 100000012700100000210031809295049751025100173048403414163533"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\nRIGHT JOIN (SELECT PilotSkills.pilot_name )\n\n AS BEEKONNAFENNERAUGHTAIMANEZISERDUELBASIERYLEALAHITHIRIFINIABAJUNGUMCIDOCHLOLNAM"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "SELECT SUM(Hangar.location )\nRIGHT OUTER JOIN (SELECT COUNT(*) GROUP BY PilotSkills.pilot_name , age LIMIT 51834367043263311651575482737173500452430870005000050043877015525959989642912235040"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "SELECT COUNT(Hangar.pilot_name )\nINNER JOIN (SELECT Hangar.location , plane_name LIMIT 542)\n\n AS KORNELLsJENFKUBAILOLWISNEGGATARAANTBENGAGAMURMACHICIHADABLUKDUNNAYEV"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "SELECT Hangar.pilot_name FULL JOIN (SELECT PilotSkills.pilot_name ) ON pilot_name = 0;"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "SELECT COUNT(PilotSkills.pilot_name )\n\n\n INNER JOIN (SELECT PilotSkills.plane_name )\n \n\n AS TANDAJKARGNEAJAQASELHAALHAGUMADATMENUNTHAMVRAFICOSYMNITODAYAKINIMPILOTN"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "SELECT MIN(Hangar.location )\n\n\nGROUP BY PilotSkills.pilot_name LIMIT 6320134152746385828572665391020782377191324229080671735896444402595163076140088433750851007010706116048669600090621471255"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "SELECT AVG(Hangar.location )\n\n\nLIMIT 10500112000400001310300900101192922100270048802528900451817367002660463767402033903578400885054396924641644154780073230562112899654987365113857867594140755102312"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "SELECT *\n\nINNER JOIN (SELECT MAX(PilotSkills.pilot_name ))\n\n AS is ON EXISTS (SELECT Hangar.location GROUP BY pilot_1.plane_name \nORDER BY location LIMIT 1032 OF"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "SELECT MIN(PilotSkills.pilot_name )\nWHERE age > Hangar.location LIMIT 1501000312512170024783929542375118814303799435025572680204577282233584049478746186074196773163655847076134844277908"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "SELECT DISTINCT SUM(PilotSkills.location )\nLIMIT 80007183717001450783635393079339729275722951601096726888745125524112377586849289070534448603840995664982072247153463138691905831"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "SELECT PilotSkills.plane_name FULL JOIN (SELECT Hangar.pilot_name )\n  \n\n\n\n AS is ON age <-7 RIGHT JOIN pilot_1.PilotSkills AS PILOTSSKILLLISTALPHABETTERINGIDAGEJOBOPASSSELESCHEKAT"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": "SELECT SUM(age )\nINNER JOIN (SELECT PilotSkills.pilot_name , age )\n\n AS ZBJZAOSCALDUSPILOTSKILLsSAVEVOICESCAPERSHOPENFORMALIZATIONSPEECHMAKERINGBAYKASWISHMOUSEFACTORYREVOLVEDTECONTROL"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "SELECT Hangar.location INNER JOIN (SELECT PilotSkills.pilot_name )\n  \n\n\n\n AS KORAVRABATIANSKYJOYDHAUQNAANHUNCHIEWAGKONTELIRIALALSAIKITINTHOMCOIETNOVARUSIMGISAMOSAS"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "SELECT SUM(age )\nLIMIT 2121 OFFSET 701182724001709121611152345504214553822794957334875602559434034963599109529081191003"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "SELECT MIN(Hangar.location ), age FULL JOIN (SELECT COUNT(PilotSkills.plane_name ), location LIMIT 9041535377023223832255492616122534951058555450391179196463175718474859094669366089"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "SELECT MIN(Hangar.location )\n\n\nINNER JOIN (SELECT COUNT(PilotSkills.age ), COUNT(pilot_name )) AS WKF8YVQX5S1B3WU9DZJ7FS6EHFPA4L25M18VB0G2SS1333NOC14C12T"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "SELECT AVG(age ) AS IAV GROUP BY Hangar.location LIMIT 2100513602777362514372615289878195587295750956770585421"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "SELECT COUNT(Hangar.location )\n\n\nRIGHT JOIN (SELECT COUNT(PilotSkills.pilot_name ) RIGHT JOIN pilot_1.PilotSkills ON Hangar.plane_name < 432001155378929\n\n\n INNER JOIN (SELECT"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": "SELECT AVG(PilotSkills.pilot_name )LIMIT 3438236036133311121714161820506701642559355722344719278898445580952879302685457666007565904043110490587893247087100631554"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "SELECT Hangar.pilot_name INNER JOIN (SELECT MIN(Hangar.plane_name )FULL OUTER JOIN pilot_1.PilotSkills\n\n\n \n\n AS WESTERLY ON age = 1) ON PilotSkills.pilot_name <> (SELECT MIN(H"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "SELECT COUNT(age )\n\n\n    \nLIMIT 7271149294800289818261210393077252419229717793575588823370170843469042046405078471476311536859972"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "SELECT Hangar.pilot_name INNER JOIN (SELECT COUNT(PilotSkills.plane_name ), MIN(*) RIGHT JOIN (SELECT PilotSkills.plane_name )\n AS SETHIABAJATGUNWENUVYCAAXAACZBKQ"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\n INNER JOIN (SELECT PilotSkills.plane_name ) AS LYZANTHASILIANJORFOLKERATIRACALTYVISSIETEAMONELTAINESQGIGUIDOTICOCKEYHARDENUTIAFLAUGHITRULB"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "SELECT AVG(PilotSkills.pilot_name )LIMIT 5273612571811375078133317291534204570487939255549462322356324389714889510678726328066014465560099771907411775892843175647621160325540682794307411590884712"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "SELECT SUM(age )\nINNER JOIN (SELECT Hangar.location , age ) AS DEGARREAUX ON EXISTS (SELECT PilotSkills.pilot_name )\n\n INNER JOIN pilot_1.Hangar\n\n\n AS DYNAMICO"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "SELECT DISTINCT SUM(PilotSkills.pilot_name )\n\n\n INNER JOIN (SELECT PilotSkills.plane_name )\n AS RITBARONK ON Hangar.plane_name = 0 ORDER BY pilot_name , pilot_1.PilotSkills.p"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "SELECT COUNT(age ) AS VARESA ORDER BY Hangar.pilot_name LIMIT 2937224717491143234026272836877090"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "SELECT DISTINCT AVG(PilotSkills.location )\nFULL JOIN (SELECT COUNT(*), SUM(*))\n\n      \n\n AS VALIDATED ON PilotSkills.location < 1 ORDER BY location ;"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "SELECT AVG(Hangar.location )\nFULL JOIN (SELECT Hangar.pilot_name , MIN(*)RIGHT OUTER JOIN (SELECT COUNT(PilotSkills.plane_name ), PilotSkills.plane_name FROM pilot_1.Hangar WHERE pilot_na"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "SELECT AVG(PilotSkills.pilot_name )\nFULL JOIN (SELECT *)\n\n AS ILLUMINATEDLYASISWHYBOMBSHOTJOYANRUNWITHTHEAVIORTheatricalArcsDatesJuly31st2018June25th2019October22nd2019May11am15pm3m13s7p30l00r0c1d2"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "SELECT AVG(Hangar.location )\nINNER JOIN (SELECT MAX(PilotSkills.age ))\n\n AS PIGOSIS ON EXISTS (SELECT MAX(pilot_1.location ))\n\n INNER JOIN (SELECT COUNT(*), age )\n AS TUNDERSHIP"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\n\nRIGHT JOIN (SELECT COUNT(*) ORDER BY PilotSkills.pilot_name )\n\n AS KEEPING ON Hangar.plane_name = 'PilotSkills' LEFT JOIN pilot_1.Hangar\n AS R"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "SELECT MIN(PilotSkills.plane_name )\nFULL JOIN (SELECT Hangar.pilot_name , age , location RIGHT OUTER JOIN pilot_1.Hangar AS kapuemakenztetniogimomnokonnuertrundikrutjuk"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "SELECT COUNT(PilotSkills.plane_name )\nLIMIT 46216371022122933171928273907618641450347501653045672085117074234436266058774332152524896966795549573561128590431104136896991123408848738086223700331038"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "SELECT MIN(PilotSkills.age )\nGROUP BY PilotSkills.age , age ;"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": "SELECT PilotSkills.pilot_name INNER JOIN (SELECT PilotSkills.pilot_name )\n\n\n  \n\n AS EQ1D5AF2F9E6A7B4760AA774214872678113919405423366744153870953074172218790050C0DE84316"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "SELECT SUM(Hangar.location )\nFULL JOIN (SELECT DISTINCT COUNT(*), Hangar.plane_name , PilotSkills.pilot_name , MAX(PilotSkills.location ), MIN(PilotSkills.location )\nFULL JOIN (SELECT "
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "SELECT COUNT(age )\n\n\nLIMIT 2120752026151223107717192860302722131133640150704899903957653855165969083245346737584587240785441895668332142554364762104490316612929532017851102154035732356104360772612"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "SELECT COUNT(age )\nINNER JOIN (SELECT AVG(Hangar.location ))                                      \n\n\n\n\n AS ELITEAVEZDETTJIAMENALYANOSASNEL"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": "SELECT PilotSkills.plane_name , location ;"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": "SELECT SUM(PilotSkills.plane_name )\n INNER JOIN (SELECT Hangar.plane_name )\n\n AS ETCYVONKATAYHUNDJAMINBUDCHURGISMAIAAFFANAGUENJAEITRAARIANAILWETABLESALMADZIRQUEIMOIOSHA"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": "SELECT AVG(PilotSkills.age )\nRIGHT JOIN (SELECT MAX(PilotSkills.age ))\n\n \n\n AS HOLD ON EXISTS (SELECT SUM(*)) ORDER BY PilotSkills.pilot_name ;"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "SELECT Hangar.location , SUM(PilotSkills.pilot_name )\nWHERE age <1FULL JOIN (SELECT AVG(*) FROM pilot_1.PilotSkills WHERE PilotSkills.plane_name = 'Elderly Pilot' INNER JOIN pilot_1.PilotSkills ON PilotSkil"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "SELECT Hangar.location \n\n\n INNER JOIN (SELECT SUM(Hangar.pilot_name )) ON EXISTS (SELECT COUNT(PilotSkills.pilot_name )) RIGHT JOIN pilot_1.PilotSkills\n\n\n AS SELECT"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "SELECT AVG(PilotSkills.pilot_name )\nRIGHT JOIN (SELECT COUNT(*) FROM pilot_1.Hangar AS cx, (SELECT PilotSkills.plane_name , PilotSkills.plane_name ) ORDER BY Hangar.pilot_name )\n\n AS MELTAXED ON pilot_1"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "SELECT PilotSkills.pilot_name , MIN(PilotSkills.pilot_name )\nINNER JOIN (SELECT PilotSkills.pilot_name )\n\n  \n\n AS isforcablyisableifyourecompletedatlevel9TheresoneInlineAbilityLevel10IfYouOnlyNeedtoCompleteItAndHaveNoP"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "SELECT Hangar.location , SUM(PilotSkills.pilot_name )\nWHERE age < (SELECT MIN(*), COUNT(*)GROUP BY PilotSkills.plane_name );"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "SELECT AVG(age )RIGHT OUTER JOIN (SELECT Hangar.pilot_name , age , location RIGHT JOIN (SELECT SUM(*)\n\nLIMIT 2000060177360050000019991733160937122748396030090311597834106623254414"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "SELECT COUNT(PilotSkills.pilot_name )\nLIMIT 619170006999185913162836142357006326374777784540386727104324485439641125442229205003200808896557075356049100536565942793358730162127157912668532170741591618"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "SELECT COUNT(age )INNER JOIN (SELECT COUNT(PilotSkills.pilot_name ))\n  \n\n\n\n AS MESSAGEJONHONEGARGOAAAYAGVEGXBANMETRAZCATQKIGEUIIAOCF4SSLPAINN7RW2AM1T0D6P"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "SELECT Hangar.pilot_name GROUP BY PilotSkills.location ORDER BY age LIMIT 42300204927252445131878463339643748354436472234681917387032505416261560944075797621010911888600086714902866305904109912"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "SELECT COUNT(age )LIMIT 62518235046243577203739272213571636192811754315010617046064456933406787000549567059091"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "SELECT location FULL JOIN (SELECT PilotSkills.pilot_name )\n\n\n AS or ON plane_name = (SELECT COUNT(*) AS DIMENSION, MIN(age ), MAX(age ));"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "SELECT Hangar.location INNER JOIN (SELECT MIN(Hangar.pilot_name )GROUP BY PilotSkills.plane_name , age ORDER BY Hangar.location LIMIT 463157520273025583778161077143328"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "SELECT COUNT(age ) AS to FULL OUTER JOIN (SELECT SUM(location ))\n\n\n  AS RACISTED_JOBDICTIONALAMINGORIANFULLYBOMBLEKILLARIZERSERANTSENDSPESSAGONIMOTRATEFORCEATAPOCLICELAYNURSENSITIVEC"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "SELECT MIN(PilotSkills.pilot_name )\nWHERE PilotSkills.plane_name = age INNER JOIN (SELECT SUM(*) AS RZFATAN LIMIT 9461 OFFSET 1120211216190300094429108940221323889975142755251539"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\nWHERE age <> (SELECT COUNT(*));"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": "SELECT PilotSkills.pilot_name RIGHT JOIN (SELECT AVG(PilotSkills.pilot_name ))\n\n\n   \n\n AS DANGEROUS ON EXISTS (SELECT COUNT(Hangar.plane_name )) INNER JOIN (SELECT AVG"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "SELECT SUM(PilotSkills.pilot_name )\nWHERE age < (SELECT Hangar.age WHERE EXISTS (SELECT MAX(*), MIN(*))) ORDER BY PilotSkills.pilot_name , pilot_name ;"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "SELECT COUNT(age )\n\n\nINNER JOIN (SELECT SUM(*)FULL JOIN pilot_1.PilotSkills AS in ON EXISTS (SELECT * FROM pilot_1.Hangar, pilot_1.Hangar)) AS int64EPLATY ON PilotSkills.pilot_name = (SELECT SUM(*"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "SELECT MIN(Hangar.pilot_name )\n  \nLIMIT 0;"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "SELECT Hangar.location \nGROUP BY PilotSkills.pilot_name LIMIT 0;"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "SELECT AVG(Hangar.location )\nINNER JOIN (SELECT SUM(*) RIGHT OUTER JOIN pilot_1.PilotSkills\n\n AS BOSSAKANAAMJARMAJOIDAYA AS KUROLIMATUMZTUNVODASEMCALYSTIFITTEIENEUNAH"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "SELECT PilotSkills.pilot_name \n\n\n INNER JOIN (SELECT COUNT(PilotSkills.age )) ON EXISTS (SELECT COUNT(PilotSkills.age )) LEFT JOIN pilot_1.Hangar\n\n\n AS SOFAR AS SONICYK"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "SELECT AVG(spokesman_district.Name )\nINNER JOIN (SELECT COUNT(*)WHERE EXISTS (SELECT * FROM district_spokesman.district WHERE district_spokesman.Population > 0)) AS STAGE ON EXISTS (SELEC"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": "SELECT Government_website FULL OUTER JOIN (SELECT Population FROM district_spokesman.district, (SELECT Rank_position INNER JOIN district_spokesman.district\n\n\n AS TILF ON spokesman.District_ID = 0) OR"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": "SELECT AVG(spokesman_district.Government_website )\n\n\n INNER JOIN (SELECT COUNT(*)LIMIT 1 OFFSET 3328124543141322113765352788154947404829334480263085757601460036586816185766240853467253860"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": "SELECT COUNT(Rank_position )\n\n\nGROUP BY Population LIMIT 0;"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT SUM(Name ))\n\n\n\n AS MOSBORESMEMAICOLYZIKTAISONACAMETECODENNAVALOKAIKIABAOMUNDAOTPASADHIHATELFHAITIMAPOANOCRUJOHINARABRAGURUDI"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": "SELECT AVG(spokesman_district.Rank_position )\nINNER JOIN (SELECT Name RIGHT OUTER JOIN district_spokesman.district AS BANDISTASISLICTSKOMMAZAGCATBARAHYITABAQGRAJ"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "SELECT COUNT(Density_km ) AS is\nINNER JOIN (SELECT DISTINCT Government_website RIGHT JOIN district_spokesman.district\n\n AS ISAACBOTIS ON EXISTS (SELECT MAX(*) AS is"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "SELECT COUNT(spokesman_district.Age )\n\n\nINNER JOIN (SELECT COUNT(Population ), Points , Name RIGHT OUTER JOIN district_spokesman.district AS VIRGENTHADRIKOLAASAMISANI\n\n\n AS M"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "SELECT Rank_position GROUP BY Name ORDER BY Speach_title LIMIT 930272901068131219117817409737883477332045368939753214162449665955151057648622796568809528742394169186725005073608744264770"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": "SELECT Rank_position INNER JOIN (SELECT AVG(Rank_position ), SUM(Rank_position )) ON spokesman.Rank_position = 0 GROUP BY Population LIMIT 1;"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "SELECT MIN(spokesman.Rank_position )\nINNER JOIN (SELECT Name , Density_km RIGHT JOIN (SELECT Start_year INNER JOIN district_spokesman.spokesman_district\n\n\n A"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "SELECT MIN(spokesman.Rank_position )\nINNER JOIN (SELECT Rank_position )\n AS LAMMISAALITARIMACOLORONFETTERUYSSIRIANKAYAPATHADATBHILUMANVESULAAJEDAWAKUTSUYAZINEMOSHIRENHAWISHI"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "SELECT AVG(spokesman.Government_website )\nINNER JOIN (SELECT COUNT(*), spokesman.Government_website )\n\n AS THE ON Start_year = 1"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": "SELECT DISTINCT AVG(Name )\n\n\n INNER JOIN (SELECT Government_website LIMIT 2) ON EXISTS (SELECT Name )\n\n FULL JOIN district_spokesman.district\n AS DEATHJOBBINGGRAVEAUSRUNDY"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "SELECT AVG(Age )\nWHERE Speach_title < 1\n\n INNER JOIN (SELECT COUNT(*) ORDER BY Name , Density_km , Points LIMIT 3 OFFSET 431290544227573432164828802687111519334039"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "SELECT DISTINCT COUNT(Age ) WHERE Spokesman_ID = 1FULL JOIN (SELECT Name ORDER BY Rank_position , Government_website LIMIT 10)\n\n\n AS EMAILINGWATERLONDONHISTORYTheLondonHistoryListeDmV"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "SELECT MIN(spokesman_district.Name )\nLIMIT 63570391840781620308928483638261324232958006817277905219904191488104769776563221546379466670111124532507597100349906544721886433607400043257054403557"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "SELECT AVG(Name ) RIGHT JOIN (SELECT Name , SUM(Age ))\n\n\n AS ANSWERED ON EXISTS (SELECT MIN(spokesman_district.District_ID ), District_ID ) RIGHT JOIN (SELECT Name , SUM(*"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "SELECT Rank_position WHERE Age \n<Name INNER JOIN (SELECT SUM(spokesman.Population ), Name ORDER BY Density_km , Points LIMIT 93229143426377064181728993550254057001112"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "SELECT AVG(spokesman_district.Points )\n\n\n   \n\n INNER JOIN (SELECT Population ORDER BY Name LIMIT 2)\n\n AS EATENSIDIANAHUBAIJANISFULALJONTAILURUMBASIABIAMAPOLUNDAKARAD"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "SELECT Rank_position INNER JOIN (SELECT Name LIMIT 2)\n\n\n    \n\n AS SINGAPORE ON Density_km = 0 ORDER BY Government_website LIMIT 1 OFFSET 30000"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "SELECT COUNT(sculptorID )\n\n\n   \n\n INNER JOIN (SELECT COUNT(sculptorID ), MAX(*)LIMIT 10431928163611781226373445631348355424221739182707615207095143068647631017733322947750044675025"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "SELECT COUNT(sculptorID )\n\n\n INNER JOIN (SELECT MAX(*)GROUP BY Sculptures.artistID , sculptureID , location ORDER BY Paintings.medium LIMIT 907839244877155740272316"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "SELECT MIN(sculptorID )\n\n\nGROUP BY Sculptures.mediumOn ;"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "SELECT AVG(sculptureID )\n\nLIMIT 10451323282757177716091128191411154437889831396425480034331847582438805436609626671076497812469956"
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": "SELECT MIN(sculptureID )\nFULL JOIN (SELECT MIN(sculptorID ))\n\n AS RAGUILLOLEVENHANCESIMPSIADOUBLEBARRYRICHONDEISASPOPUSUNCIANAMOSCULTAZURJWASTELITTOLLGESTEINNILTRICORTHOMATTOL"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "SELECT MIN(sculptureID )INNER JOIN (SELECT DISTINCT Paintings.painterID INNER JOIN art_1.Paintings\n\n AS LAMATORINGASIAAUR ON EXISTS (SELECT MIN(medium )LIMIT 1)"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": "SELECT COUNT(art_1.location )\nWHERE art_1.location = 1;"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "SELECT COUNT(location )\n\n\n INNER JOIN (SELECT COUNT(*) INNER JOIN art_1.Artists ON painterID = 2LIMIT 10664048285077373033290136572035115438185532109878132316706549582624143907"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": "SELECT SUM(sculptureID )\nWHERE Artists.artistID = 0;"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "SELECT AVG(Artists.deathYear )\nINNER JOIN (SELECT MAX(Paintings.medium ))\n\n  \n\n AS TABASMEM ON Sculptures.width_mm > 1LEFT JOIN art_1.Artists AS rjnk ON"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "SELECT *\nINNER JOIN (SELECT AVG(Artists.lname ))\n\n AS FERMANIAN ON Sculptures.width_mm > medium ;"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "SELECT year INNER JOIN art_1.Paintings\n\n\n\n AS EASTONA ON Sculptures.deathYear = -0.35772766392814223372186738481634655755451575251332195837858050590436684917261156249908964604410"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": "SELECT MIN(sculptorID ), artistID , lname INNER JOIN (SELECT medium )\n\n\n AS NIMGENQUZMHVAYXAGPJ4LHAFLATF8B1AU3EAAISECDKAN0CCLLW9EFOCAMGN7IAETR6I"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "SELECT AVG(Artists.deathYear )\nLIMIT 5111830703900202519402226136044163429334538155817779848377628366710759908791"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "SELECT COUNT(sculptureID )\nLIMIT 531152812341810483814163613371160224542177640882301652600498090294320306746278903647435252447100545057395579321908224541"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "SELECT MIN(sculptorID )FULL OUTER JOIN (SELECT SUM(sculptureID ), AVG(fname ))\n\n\n\n AS WELLERMANNEHREETONAVERENGLUNDERLANDWESTEDBERLINTHREEBRACKSSTATIONCELTSBOROKEBEYARDNEGRITORY"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "SELECT MIN(sculptureID )\n\nLIMIT 12152201000112545702078132717003918583046254888604975234465363350546947995640267759146316684329573566721563710956438511912065550052010215965071167016219721000615908939"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "SELECT MIN(sculptureID )\n\nLIMIT 207029209036126068002789134048333078143567451118562816014777251707873879348864235065597532507441599040002255392657496005192497297108560946257299290871173693602090372740"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "SELECT AVG(sculptureID )\n\n\n INNER JOIN (SELECT SUM(*)FULL OUTER JOIN art_1.Paintings AS KANGLAMKURSTASAICALCOORANDAGARMAOLISIAOSPHUSHILOGUEIDWATBACZIPOPRITIMONTHU"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "SELECT COUNT(sculptureID )\nLIMIT 318482823893360360109270039166730877519557940431065779915581790"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "SELECT MIN(sculptorID )\n\nFULL OUTER JOIN (SELECT SUM(*)RIGHT JOIN art_1.Artists ON fname = 2 FULL OUTER JOIN art_1.Paintings AS od AS DEPLOYOR ON birthYear > 4 ORDER BY"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "SELECT COUNT(art_1.sculptorID )\nWHERE Sculptures.mediumOn =height_mm LIMIT 1311"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "SELECT MIN(sculptureID )\nLIMIT 2100701702910392837175733115058121636407530779841186560892319252759"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "SELECT MIN(sculptorID )\n\nLIMIT 0 OFFSET 788977332867371917571025784539158523684722263059121875956550422055007958903876213527893693803401058485313358670621698692472147641188949903608728402917"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "SELECT MIN(sculptorID )\nWHERE Paintings.medium  \n\n>Artists.painterID INNER JOIN (SELECT SUM(*) WHERE EXISTS (SELECT MIN(sculptorID )\nFULL OUTER JOIN art_1.P"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "SELECT AVG(Artists.deathYear )\nINNER JOIN (SELECT SUM(*), MAX(Paintings.medium ))\n AS CHALANNABJITKHAWARFENELIJTHAFGARADHUREDEONDEORREYUNATZIGRAIWAGCISABDOLSINAIM"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "SELECT AVG(sculptorID )\n\n\n INNER JOIN (SELECT COUNT(*) ORDER BY Sculptures.lname , art_1.artistID , title LIMIT 50403050806070461117294875161388576599287727673597330178262218"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "SELECT COUNT(title )\n\nORDER BY Artists.paintingID LIMIT 2161 OFFSET 6183342131401854823409837274622307728349049176032100265525440039561029459566507897366300081909385480356764122058"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "SELECT COUNT(artistID )LIMIT 5675557104917133375288909739295087450027347815148835204822944059563064992336240146657916954742201371238255475611690670321908966092198186726638086177798134433"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "SELECT MIN(sculptorID )\n\n\nWHERE Sculptures.medium = 1;"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": "SELECT MIN(sculptorID )FULL OUTER JOIN (SELECT COUNT(*)GROUP BY Paintings.birthYear , Sculptures.artistID ORDER BY Artists.deathYear )\n\n\n\n\n AS ILLUMINATEDLY ON EXISTS ("
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "SELECT COUNT(Paintings.painterID )\n\nGROUP BY Sculptures.lname , art_1.artistID "
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "SELECT COUNT(title )\n\nRIGHT JOIN (SELECT SUM(artistID ))\n\n\n AS EIGHTHYFITERALISTAATOSHOVICUSZURIABINAZEDEVOLKELAVINGASVAMORLANGUEGUTDENIMARRIAUMACROPULANTILOUCHEUNCIFU"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "SELECT COUNT(Paintings.mediumOn )\n\n\nFULL JOIN (SELECT MIN(*), Paintings.medium )\n\n AS KRAENUWGOLMAJORNOZHITASQONDATBALIMPHOSIAYNEISKAZACODUNWAIFVANLAICOCOBAAMIYAF"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "SELECT MIN(Paintings.deathYear )\n\nLIMIT 220020463078181648807515106417267057287633292737322512873560230155653924690873459634519073100637838987956215096674072160361399664784142268770054"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "SELECT AVG(Paintings.deathYear )\nINNER JOIN (SELECT MAX(title ), artistID , title LEFT OUTER JOIN (SELECT COUNT(*), width_mm WHERE Sculptures.deathYear = 9)\n AS TEN"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "SELECT COUNT(Artists.height_mm )\nRIGHT JOIN (SELECT MIN(*)WHERE Artists.title =2 ORDER BY Sculptures.deathYear LIMIT 1 OFFSET 74042011626144464282218095519393746115825"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": "SELECT COUNT(Artists.height_mm )\nINNER JOIN (SELECT COUNT(Artists.height_mm )\nFULL OUTER JOIN (SELECT Paintings.height_mm )\n AS ARTHURANZAYAJENKHAARMAMALOCHASI"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "SELECT MIN(sculptorID )GROUP BY Sculptures.mediumOn , art_1.birthYear ORDER BY title LIMIT 47682423"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "SELECT MIN(Artists.deathYear )\n\nFULL JOIN (SELECT SUM(fname ))\n\n   \n AS EJES ON birthYear = 2 RIGHT JOIN art_1.Artists\n AS jEAT3DELIMIT2R7PX5F8C4B"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "SELECT COUNT(Artists.medium )\n\n\nLIMIT 316116347822188631971914281225393589153217062636374810591346679030696523572911490947769958957542107603324017987455470835053800936462160278816538094225585184098"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "SELECT MIN(sculptorID )\n\nLIMIT 1953;"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "SELECT COUNT(sculptorID )\n\nLIMIT 207536672534232829333218571312587810225065278564147935557717464760632003711882026803876328816689500045897240070400569741004330546690404105397525534086152928594818"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "SELECT MIN(sculptureID )\n\nLIMIT 123367782615293660204730880023457718396327148716906525588963817557475445437111379193522697201127364621039959245734925096408052106653332170482615863683202967784960"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "SELECT AVG(sculptorID )FULL OUTER JOIN (SELECT * FROM art_1.Artists WHERE Artists.birthYear = 'CJ' ORDER BY Sculptures.fname , Artists.birthYear , birthYear )\n\n\n AS CPTABAHILOCHNELKIS"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "SELECT COUNT(art_1.lname ) AS LYFALD WHERE EXISTS (SELECT MIN(*), art_1.lname )\nINNER JOIN art_1.Artists AS SHOLCATIC ON EXISTS (SELECT DISTINCT SUM(art_1.lname ), s"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "SELECT MIN(sculptureID )RIGHT OUTER JOIN (SELECT Paintings.deathYear INNER JOIN art_1.Paintings AS CIVITFEMAATVHBORMQX6NDJ5fUzbD4Cm3W8dLZO2"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "SELECT MIN(sculptorID )\nGROUP BY Sculptures.year LIMIT 9221460304910282546361318390663476191101582089175585321637449548671577125972246569684350357499669327335796386329007908564"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "SELECT AVG(sculptureID )\n\n\n INNER JOIN (SELECT SUM(*) LIMIT 2 OFFSET 4121650541877704534483538463901491464987191147804320403617237627883083000526906794200005760952468338955442858"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "SELECT AVG(sculptureID )\nORDER BY Sculptures.deathYear ;"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "SELECT MIN(sculptureID )\n\n\nORDER BY Sculptures.title ;"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "SELECT COUNT(Artists.deathYear )\nLIMIT 31608049006733302527175099131922188736402378357716268534455460897038759020322437155964432112145857299501659416741109788798425828984667621254469483039"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "SELECT AVG(sculptorID )\n\n\nORDER BY Paintings.lname LIMIT 517188213150185243616576750874733274829224575374220408930663219042"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "SELECT MIN(sculptureID )\nINNER JOIN (SELECT MIN(sculptorID ))\n\n AS STYLERZENHULGMANAASONSKURGEUBAKOVLARISKIORADIMBASSANDDIAVAGANOSILOGAMITABUSJOMNIODAKAZOBIEELIKROLLIATNALIN"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "SELECT COUNT(deathYear )LIMIT 58130887045162717190857287848256026973723441599581475386540362247673595504907182068007600041005580600138973401"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "SELECT COUNT(paintingID )\n\nWHERE Artists.medium > (SELECT Paintings.height_mm , width_mm );"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": "SELECT MIN(sculptureID )\n\nGROUP BY Sculptures.medium LIMIT 51600271518583022331725993767645711190742260189067394880974440367038759550290532"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "SELECT MIN(sculptorID )\nFULL OUTER JOIN (SELECT Paintings.title RIGHT OUTER JOIN art_1.Artists AS eBhWwjf2LU7eJvC3z8n6uZiK0VYG5lRdO9pQX4cD"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "SELECT MIN(sculptureID )LIMIT 21834252029080116502822151412133326881155891707102739092149484969249973405977673096112531"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "SELECT *\nINNER JOIN (SELECT *) AS VICTORIA ON EXISTS (SELECT *) LIMIT 1336151423271333104325459916192830606718509565174640685600486420893812269851250129021163 OFFSET 87435887039069"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "SELECT year INNER JOIN (SELECT Paintings.paintingID )\n\n\n AS SELLABAHAGASKADIAVARIANUWAANTAOLAYBORAHYONHAFAPISJOSITOPLAZALOKATMUSAKOVINENELIOCENTAMISTREPIMNDAUNIGEIRACLULO"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "SELECT COUNT(deathYear )\n\n\nRIGHT OUTER JOIN (SELECT DISTINCT SUM(artistID ))\n\n AS ENABLEDIAHAZORADATANETICKARAOSHAMOTILUMLITOLTULARTHODALAGRICOMISEMELEUTRALYLLONBOCCASTERIOPR"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": "SELECT AVG(Artists.painterID ) LIMIT 47716881 OFFSET 11202039233010903115744131549062322296047758914190464283518055087172440742130274625378626995431000324780984210554536943212483490387858"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "SELECT COUNT(Paintings.painterID )\nFULL OUTER JOIN (SELECT Paintings.lname , paintingID INNER JOIN art_1.Artists AS tjdrsLhKoqC3G4y8D2NuU\n\n\n AS IS ON E"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": "SELECT COUNT(Paintings.painterID )\n\n\nRIGHT OUTER JOIN (SELECT SUM(*)) \n\n AS FORTHY ON EXISTS (SELECT *) LIMIT 3"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": "SELECT DISTINCT SUM(sculptorID ) LIMIT 576105501191137171215161314101634652759482275893197184666357904396057447767490680234599789632204764254083263874685350560007015413029007310036104319075200"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "SELECT MIN(sculptureID )\nLIMIT 210082820495725306833890165001714503977996078461680372748384575187655592247883679105664116321"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "SELECT SUM(sculptorID )\nFULL OUTER JOIN (SELECT MAX(*)RIGHT JOIN art_1.Paintings\n\n AS CUPBLISHEDMASSICENTiK ON medium < ' \", 1 . Painted - BUNKER * TUISVAS NOD (2 )J U I D i E M u V"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT AVG(Artists.deathYear )\nINNER JOIN (SELECT COUNT(*), MAX(artistID ), SUM(fname ))\n\n AS NERRYMANFENSTEETEMOLICEHOTTLESKIONELLGIANCZQTEDANJNKITYORRODLATBUN"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT COUNT(lname )\nINNER JOIN (SELECT DISTINCT AVG(*)RIGHT JOIN art_1.Artists ON lname = height_mm INNER JOIN art_1.Artists AS NOLJfjUK\n\n\n\n\n\n\n\n\n AS COU"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "SELECT COUNT(deathYear )\n\n\nFULL JOIN (SELECT MIN(sculptorID )) \n AS SEMWARTHENCHATDECENTHEBEDPITJUNTHAGKUHAILIGNEADGIFCAMDRIMLESEGANZTUSVICTREYEASETISTAIRIQAALN"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "SELECT COUNT(deathYear )\n\n\nFULL JOIN (SELECT SUM(*)RIGHT OUTER JOIN art_1.Paintings AS thatDateHwntfA4l6JbvQjDt0gXVzC2k8KxuT3LF7Em9rZNpIiUcG5h"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "SELECT AVG(sculptureID )\nRIGHT OUTER JOIN (SELECT MAX(*) FULL JOIN art_1.Paintings\n\n AS KIRKFALLNIKENANBEREALE AS ECHANGNEVONATRAI ON Paintings.medium =\n("
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "SELECT SUM(sculptureID )\n\nWHERE height_mm \n\n <3.5 INNER JOIN (SELECT MAX(sculptorID ))\n AS RANGY1MEFJZKNDYS2V6QBJVG7EIFBLDUEGLGNEC4W8ALDSAD9M0H3N"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "SELECT AVG(Artists.medium )\nINNER JOIN (SELECT MAX(artistID ))\n\n AS INHALFUSIMATUXASYANURJIRONIC1PICTURE_SIZE9M8B4C30A7G1146E2CA0EBAD5DA6227765172910251916"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "SELECT COUNT(paintingID )\n\nGROUP BY Sculptures.medium \n\n LIMIT 210081811001909112322054802536142328290175447716488834643917261324743367309655405889356668274615694943507847602298"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "SELECT COUNT(Paintings.paintingID )INNER JOIN (SELECT COUNT(*)LIMIT 1000827321857113612453733132290485542152639882859447874752524005097604030237083167747546729797310942101204989059514657617077"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "SELECT AVG(sculptureID )\nFULL JOIN (SELECT DISTINCT COUNT(*)WHERE EXISTS (SELECT Paintings.medium WHERE Sculptures.title = 4LIMIT 2 OFFSET 955))\n\n\n\n AS BERDWELLAVERMINEKOL"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "SELECT MIN(sculptorID )\n\n\n INNER JOIN (SELECT SUM(deathYear ))\n AS KIMAHAILATIAJAISJASENNAALKODANAURANOLAIMAARAGHAMADBUSHINTHAYELIKGOROSITOUTOVANGUNAAEYAIWEDROCU"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "SELECT COUNT(deathYear )INNER JOIN (SELECT DISTINCT Paintings.location , location ORDER BY deathYear \n\nLIMIT 1005033000100065001009028055252026223519171040474849163029602870"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "SELECT AVG(Artists.deathYear )\nINNER JOIN (SELECT MAX(Paintings.medium ))\n\n AS INTELLIGENTALISTFACTSENANTLYLINGJEDICULTURISMSPONEMEHELBECHMOLESQUEZDIEUEGAGGADIOCSHAVINRYWIS"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "SELECT COUNT(title )LIMIT 211119393323444525421220281140503813483063105937160079291543609917555626581003175366470871865932427543472133011409721127490466743053586672273461905825769472889071"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "SELECT COUNT(Artists.deathYear )\nLIMIT 35008113088331715281225384520871849391622404426367880892342137560835059194763292767551005400144801"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "SELECT COUNT(Paintings.deathYear )\nRIGHT OUTER JOIN (SELECT year INNER JOIN art_1.Artists AS KONZLKv0BJlEATzHVbF5X2Gqkjf9c8WhCx4PmwQiU6N3"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "SELECT MIN(sculptorID )\n\n\n INNER JOIN (SELECT Paintings.deathYear WHERE birthYear =0) AS nkfPWAbKJmF4oM2qU_BvXZw7CjQR9N1L5V6D"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "SELECT COUNT(lname )\nINNER JOIN (SELECT Paintings.deathYear ORDER BY Sculptures.birthYear , painterID )\n\n AS DEARLYAISENONHURUADITI ON title <paintingID ORDER BY Paint"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "SELECT MIN(sculptorID ) AS COLORBASED WHERE Paintings.artistID = (SELECT COUNT(*)ORDER BY Sculptures.title , art_1.birthYear );"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "SELECT MIN(sculptorID )\n\n\nWHERE Sculptures.lname =1948;"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "SELECT SUM(Artists.deathYear )\nLIMIT 11250006040309050801035708528003412162555100918600262220057362737384888785954191746296874990108744321345794323646586335620490615976766751147147740"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "SELECT COUNT(sculptorID ) AS ZY LIMIT 47548848673611171625275715592220661887302640894524281942134772103733796097393874231456322556899584412498611254665530106343583166645055731002"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "SELECT SUM(Artists.deathYear )\nLIMIT 1125603930507525361289281070407827339099221316575537233215356788116519386324172077940044186414093459495443507457646290212026984365689301068477905"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "SELECT DISTINCT SUM(sculptureID )RIGHT JOIN (SELECT COUNT(*))\n\n\n AS MINIMUMBODYENGTH ON EXISTS (SELECT MAX(art_1.deathYear ), artistID , sculptorID ORDER BY Sculptures.med"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "SELECT COUNT(deathYear )\n\n\nGROUP BY Artists.medium , artistID ;"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "SELECT AVG(Artists.deathYear )\nINNER JOIN (SELECT MAX(Paintings.medium ))\n\n      \n\n AS NACANZADIAJ ON EXISTS (SELECT AVG(Artists.deathYear )\nINNER JOIN (SELE"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "SELECT COUNT(deathYear )\n\n\nRIGHT OUTER JOIN (SELECT DISTINCT AVG(title ))\n   \n\n AS TURNED ON Sculptures.height_mm = 1 RIGHT OUTER JOIN art_1.Sculptures ON fname"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "SELECT AVG(Artists.deathYear )\n\n\nFULL JOIN (SELECT SUM(birthYear ))\n\n AS LESEROSALIANAMETERSLONISIMORITIZINGLYRITELLIESPENNAVARUMBIRHODKATEMIDYPEASTURFOLSEDRIXNACRYLEA"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "SELECT MIN(sculptorID )\nLIMIT 12208078406512904813508960972733286725353723551864291630680114171154994932155979223988366334661098197631"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "SELECT SUM(sculptorID )\n\nWHERE Artists.mediumOn = (SELECT MIN(deathYear ), COUNT(*), sculptorID , deathYear RIGHT JOIN art_1.Sculptures\n\n\n AS EATHSISPOTEMHESiD"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "SELECT MIN(Artists.mediumOn )\n\nRIGHT OUTER JOIN (SELECT * FROM art_1.Paintings) AS xid ON painterID = artistID GROUP BY painterID ORDER BY artistID ;"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "SELECT MIN(sculptorID )\n\n\nWHERE Artists.medium = (SELECT medium FULL OUTER JOIN art_1.Artists AS inRf3vzXKJZ4hkM9CpYgEwBlIaTj0qn2iW6sQ"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "SELECT COUNT(artistID )\nRIGHT OUTER JOIN (SELECT Paintings.painterID , AVG(*)ORDER BY Sculptures.artistID , mediumOn LIMIT 44877784501161819552312494632142288473543153917790640265730257536"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "SELECT MIN(sculptureID )\n\nINNER JOIN (SELECT SUM(deathYear ), COUNT(*))\n\n AS SOONLY ON Artists.paintingID = 0 INNER JOIN (SELECT DISTINCT Paintings.paintingID )\n AS THEELECTS"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "SELECT COUNT(artistID )\n\nLIMIT 65945163901191737133327786775902299792387293026405715361469075339462089081"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": "SELECT DISTINCT AVG(Artists.artistID )\nFULL JOIN (SELECT SUM(*), COUNT(fname ))\n\n AS SELLER1J ON EXISTS (SELECT DISTINCT AVG(Artists.artistID )\nFULL JOIN ("
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "SELECT MIN(sculptorID )\nWHERE EXISTS (SELECT MAX(sculptureID )\nFULL OUTER JOIN (SELECT MAX(sculptorID ))\n\n AS LANGRANDREALISTOZAARANOSYSLAVIANUSBRAIJCATENISMAKODELIAGASLAM"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "SELECT COUNT(paintingID )RIGHT OUTER JOIN (SELECT MAX(height_mm ))\n  \n\n\n\n AS NINE ON Paintings.sculptorID = 10766039148925204316361072201332601346517225723859912281144881"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": "SELECT COUNT(Paintings.painterID )\n\n\n INNER JOIN (SELECT MAX(*)FULL JOIN art_1.Paintings AS JOITTSTEKAN ON Sculptures.artistID = 337184909484311153217782416252819063023010773833"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": "SELECT MIN(sculptorID )\nGROUP BY Paintings.medium ORDER BY Artists.medium LIMIT 32272230481514205057432825247870743917131626802919033358603490679521014049654635557745473612"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "SELECT SUM(sculptureID )WHERE Artists.artistID \n\n\n> (SELECT SUM(painterID ))FULL JOIN art_1.Artists ON fname = 2;"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "SELECT DISTINCT AVG(Artists.birthYear )FULL JOIN (SELECT SUM(*), Paintings.fname GROUP BY deathYear , birthYear , fname ORDER BY artistID LIMIT 1) AS IVGATIAAKAL"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": "SELECT COUNT(paintingID )\nORDER BY Sculptures.title LIMIT 1;"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "SELECT AVG(sculptorID )\nORDER BY Sculptures.deathYear ;"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "SELECT COUNT(sculptorID )\nLIMIT 1225221629751488371727124828131118231067269766365935453834646039008744659699471905417701632150575585455100715890753786830563042572474649408032167825862069297722754912"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "SELECT COUNT(lname )\nINNER JOIN (SELECT COUNT(birthYear )) \n\n AS EMBRACEHARINGLY ON Paintings.deathYear <> title INNER JOIN art_1.Paintings\n\n AS STOCKERSEDILLUMINEKONDIALUNTJ"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "SELECT COUNT(Race_Name )\nFULL JOIN (SELECT race.Race_Name FROM car_road_race.race WHERE Race_Name > 1) AS SIZE2D4d8 ON Race_Name = 'racer' INNER JOIN car_road_race.race AS COUNT1L11C0c5WORF\n\n \n AS ECHOEDLYWHERE"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "SELECT COUNT(Race_Name )\n                              \nRIGHT OUTER JOIN (SELECT * FROM car_road_race.driver) AS Race1 ON race.Race_Name = 'SELECT' INNER JOIN (SELECT race.Race_Name , race.Race"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "SELECT MIN(Constructor )FULL OUTER JOIN (SELECT Race_Name , Fastest_Lap ORDER BY Driver_Name LIMIT 3)\n\n\n  \n\n AS ELJAMETTEZRAHELENWURMORLANDAUILIOSHAARALANDLISMAULCAT"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "SELECT MIN(Constructor )RIGHT OUTER JOIN (SELECT AVG(Fastest_Lap ), Fastest_Lap , COUNT(*) LIMIT 2 OFFSET 13643632011910292218392825881457356549123355755421502048387063151378277716"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": "SELECT AVG(Fastest_Lap )\nWHERE Winning_driver = 0.049004710371317012800061008836604834111440581839792054443038222329357859321516071286215027642524979974704213526668467721161904758543245335500655713"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": "SELECT AVG(Race_Name )\n\n\n INNER JOIN (SELECT Race_Name )\n\n AS SURELYED ON Driver_Name <Driver_Name LIMIT 11321039365899281257172640291578492038354501448908918763390251164137714"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "SELECT MIN(Age )\nFULL JOIN (SELECT DISTINCT AVG(*) FROM car_road_race.driver, car_road_race.driver ORDER BY driver.Age , race.Race_Name ) AS ageSELECTMINSTS1DRYS2CASLINGSTATS3DESCRIPTION4SELECT"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": "SELECT COUNT(Chassis )\nINNER JOIN (SELECT MAX(*)FULL OUTER JOIN car_road_race.driver AS RWDHISTEN1 ON race.Driver_ID = -6 INNER JOIN car_road_race.driver AS RFROSTING2 ON race.Driver"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": "SELECT SUM(Constructor )RIGHT OUTER JOIN (SELECT COUNT(*) FROM car_road_race.driver WHERE EXISTS (SELECT *) ORDER BY Report LIMIT 2)\n\n\n  \n AS or ON Pole_Position = 'A';"
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": "SELECT SUM(Constructor ), COUNT(Pole_Position ), MIN(Race_Name )LIMIT 2100533011350011000110181622785090303003537006026852001517881823662746293480554898575895143625562868641097124907"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "SELECT AVG(Age )\nINNER JOIN (SELECT Fastest_Lap , SUM(*)FULL JOIN car_road_race.driver ON driver.Pole_Position = -30000000002 LEFT JOIN car_road_race.driver ON driver.Pole"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": "SELECT MIN(Race_Name )\n\n\n INNER JOIN (SELECT Race_Name )\n\n  AS OOOFM4U3QK8CYNDAAADDFV6A5D2BACFDFC9FE8565EC6090BE7BD9313677068995515797434897740490798E951636253846"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "SELECT Race_Name INNER JOIN (SELECT Pole_Position )\n\n\n   \n\n AS EAGLESHIPMADE ON Chassis > 10.5 FULL OUTER JOIN car_road_race.driver\n AS NEMBLEADEDEATTODIEKALZOISEN"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": "SELECT Entrant RIGHT JOIN (SELECT Pole_Position )\n\n\n     \n\n AS SELFETERX ON Driver_ID <1 FULL OUTER JOIN car_road_race.driver AS dpktkmcntmctystvtrfcnndmtnqbwgj"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": "SELECT Entrant GROUP BY Age ORDER BY Road LIMIT 11234674023283400504727881849461711742412897815145977644568993316375532105653944133562102666633041929853072189015860563880369520579822"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "SELECT AVG(Age )LIMIT 3 OFFSET 26927886723408903139977283316017870204675258730221224583917379438356847108560490554596191844596325534156414655350297620084112693459211094836553200027890640572313"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "SELECT DISTINCT SUM(Driver_Name )LIMIT 21058343035407050851618782860384512904427321525206737261711632387"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "SELECT MIN(Constructor )\nGROUP BY Fastest_Lap , Race_Name  LIMIT 1 OFFSET 2"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": "SELECT SUM(Constructor )LIMIT 21134465057367033403910352788603058657722687819381820904925285976244863142907152647239531"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "SELECT SUM(Race_Name )\nGROUP BY Driver_ID ORDER BY Race_Name LIMIT 909071117292339332877982436950115229625497845006427464056991918591634873730447631774874386654147912706943133565602610"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": "SELECT MIN(Constructor )\n\n\n  \nFULL JOIN (SELECT Entrant , SUM(*), Constructor LIMIT 100) ON Race_Name = 'Hauk' FULL JOIN car_road_race.driver\n\n\n AS TEMPLATE AS __________________ABSOLUTE"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "SELECT MIN(Constructor )\nINNER JOIN (SELECT Race_Name , SUM(Chassis ), Pole_Position )\n\n   \n\n AS COSMAVRAILHOLDERJOHANBASATJABAKADAIWANDISNALIURFIRRUNDAYARIM"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": "SELECT Engine FULL OUTER JOIN (SELECT COUNT(Entrant ), SUM(Fastest_Lap ))\n\n\n AS LESTSBARTERSRIDGEZHANSENMANNTAURINGELSTINCHKIRMEMOTORYPILOMITUETAMUNALHAVATNORISSHOIREJIMD"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "SELECT MIN(Constructor )\n\n\n INNER JOIN (SELECT COUNT(*)FULL OUTER JOIN car_road_race.race ON Race_Name = Race_Name FULL OUTER JOIN (SELECT MIN(Constructor )\n\n\nGROUP BY Winnin"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": "SELECT Race_Name ORDER BY Driver_ID LIMIT 345372818091201817122533440136882907111319573522274732305069484067782060775963753965995670541634154627955105321019143884268316949069734594642324589817"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "SELECT Race_Name RIGHT JOIN (SELECT Winning_driver )\n\n\n     \n\n AS for ON race.Age = 1;"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "SELECT SUM(Constructor ) RIGHT JOIN (SELECT MIN(*)RIGHT JOIN car_road_race.driver ON Fastest_Lap = Chassis GROUP BY Driver_Name , Winning_driver )\n\n\n AS RENUOZ"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": "SELECT COUNT(Fastest_Lap )\n\nRIGHT JOIN (SELECT Fastest_Lap LIMIT 4500433527253316893734661905521121411467088177720646500288048229424457859761)\n\n\n AS EKHILDRAUCHLINGRUN"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": "SELECT *\nINNER JOIN (SELECT *) AS as_neweerecntr2a1b0f6df5af86d35704878503988648073272549552329190157103485332899460004213163717409360431874441545941232255222414762096312636005909"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "SELECT SUM(Fastest_Lap );"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": "SELECT Fastest_Lap GROUP BY Driver_Name LIMIT 1 OFFSET 212110000647848336067890631962940779844011300182630573745163538431007173910508622234954211927952079421514258432107368090998858"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "SELECT Engine INNER JOIN (SELECT Entrant LIMIT 4)\n\n  \n\n AS ELESIGNERVARIA1J ON Pole_Position > Race_Name ;"
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": "SELECT SUM(Fastest_Lap ) INNER JOIN (SELECT MIN(*))\n\n\n AS CSPQPIAZA ON Driver_ID = 1612187748338813422332162729496689719142686150107376722368087.50254511654310061760394610"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "SELECT Engine INNER JOIN (SELECT SUM(Driver_ID ))\n\n\n             \n\n AS EASTING ON EXISTS (SELECT DISTINCT COUNT(Age ) LEFT OUTER JOIN car_road_race.driver ON race.Driver_ID = driver.Driver_"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": "SELECT Driver_ID FULL JOIN (SELECT DISTINCT * FROM car_road_race.driver) AS driverName ON driver.Driver_Name = 'Driver Name' GROUP BY driver.Driver_Name , Driver_ID LIMIT 2;"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": "SELECT Engine FULL JOIN (SELECT DISTINCT MAX(Race_Name ))\n\n\n AS VAGANAMHARATDYVADHYILHAMACGODASTHURSSIMBAOSAYALESOLIGEMENISULBETHRETTEIDEREDUQ1CETROJITILINUTKONOLENOC"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": "SELECT COUNT(Constructor )\nWHERE Age <0 RIGHT JOIN (SELECT MIN(*)RIGHT JOIN car_road_race.driver ON driver.Driver_ID = 32141101508033741529784435270930205436 RIGHT JOIN (SELECT MIN"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "SELECT AVG(Constructor )\n\n\nORDER BY Chassis LIMIT 1 OFFSET 3811337187829541216576458321022022190832582749886033754787213055261777982348346874111470240597155925863876394400452835"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "SELECT Fastest_Lap WHERE Race_Name = 2\n\n\n INNER JOIN (SELECT AVG(Road )) ON Driver_Name < 3\n LIMIT 7392633234846355536105715240109278543252297402070371112321978587560644567"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": "SELECT Fastest_Lap GROUP BY Race_Name LIMIT 10321701191216151408186420884913687511787750221055793647583538372348592969873327543094654625603907762600972150845742006756257284057421971009069901098"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": "SELECT SUM(Constructor )WHERE Age <9190801180099804817281530497927205925444060708833751634573645952310772439076135455113789479731503822137863266798906955873471410064120971896542190199584818"
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": "SELECT MIN(Constructor )\nORDER BY Fastest_Lap ;"
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": "SELECT MIN(Constructor )\nGROUP BY Fastest_Lap , Constructor LIMIT 303218263512303600064409643417113720431538674400777868473901602757871322456659195595758621505416042116102333284814"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": "SELECT MIN(Constructor )\nGROUP BY Fastest_Lap , Constructor LIMIT 132518103978152838743211642957405820771660473527347094670017231350560165486646368874484433075334903"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "SELECT AVG(countries.language_id )\nINNER JOIN (SELECT SUM(*), COUNT(economics_score ))\n\n    \n\n AS INCLULING ON EXISTS (SELECT AVG(countries.language_id ) ORDER BY"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": "SELECT language_id \nLIMIT 334122700325020284098107814305718223711558045194713394467481688662670536029081735243395200541576230002201010325996005211231463473868843673127274912856563007746507564"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT * FROM country_language.countries WHERE language_id = 1) ON EXISTS (SELECT MIN(id ) AS name, id , official_languages.name INNER JOIN country_language.languages ON id > 0 ORDER BY language_id LIMIT 2);"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "SELECT COUNT(id )GROUP BY name ORDER BY official_languages.politics_score , languages.justice_score , health_score , language_id ;"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "SELECT COUNT(*)\nLIMIT 60004;"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "SELECT id INNER JOIN (SELECT SUM(economics_score ))\n\n\n AS RONEM ON EXISTS (SELECT COUNT(*))"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": "SELECT SUM(economics_score )\n\n\n  \n\n INNER JOIN (SELECT COUNT(*)) AS GK8V9DJ5B1YA3HF2Q6ZG0X11EE7P4CE7422WU39EF641846281662DE542335650195275857773819170914335567"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "SELECT COUNT(*)\nRIGHT JOIN (SELECT SUM(*))\n\n AS AVAILABLE ON EXISTS (SELECT * FROM country_language.countries)"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": "SELECT AVG(countries.country_id )\nFULL JOIN (SELECT COUNT(*) RIGHT OUTER JOIN country_language.countries ON justice_score = overall_score ORDER BY language_id LIMIT 5143070202316"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": "SELECT COUNT(name )\nWHERE health_score = 0;"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "SELECT official_languages.country_id , countries.health_score , health_score , justice_score , id WHERE language_id = 546LEFT JOIN (SELECT official_languages.country_id )\n"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": "SELECT COUNT(name )\n\n\n INNER JOIN (SELECT MIN(id )) AS SES ON EXISTS (SELECT * FROM country_language.countries WHERE name = '%1' ORDER BY economics_score , id )\nINNER JOIN (SELECT M"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "SELECT AVG(countries.education_score )\nINNER JOIN (SELECT id , economics_score , country_language.justice_score )\n\n AS isteresaplosioulescomunicasandescienshifaraciexisnere"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": "SELECT id INNER JOIN (SELECT health_score )\n\n\n AS CERLICKOLVINGA1G0DZY2B6BA5HHA8Q3U4M9ANGLOCALLSIS16WXJE7F13C01108521NOSATTFLOTRENDSBLUESNAILEDASPESIA"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": "SELECT SUM(economics_score ), COUNT(*)\nWHERE EXISTS (SELECT * WHERE id > 1);"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "SELECT COUNT(official_languages.country_id )\nFULL JOIN (SELECT COUNT(official_languages.country_id ))\n\n\n  \n\n AS SALTIAZANOSBONIADOLJOURISTSGREEKTOHELIZAVILIANASSABANOUMALAHAFINOCYPTICOID"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": "SELECT COUNT(economics_score )LIMIT 212080341450771328887837102720492901353638761143241222443064167973233394190911252667897556404865321056960391517078622490670721898669540921004525806884134628789957"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "SELECT COUNT(official_languages.country_id )\nRIGHT JOIN (SELECT COUNT(official_languages.country_id ))\n\n\n\n   \n\n AS is ON EXISTS (SELECT MIN(languages.country_id ))\n INNER JOIN (SEL"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": "SELECT SUM(id )\nWHERE id \n\n> name RIGHT OUTER JOIN (SELECT health_score LIMIT 2) AS DUMPLINGLY ON EXISTS (SELECT COUNT(*), MAX(*) FROM country_language.countries WHERE language_id = 'C"
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "SELECT COUNT(name )RIGHT OUTER JOIN (SELECT SUM(name ) RIGHT JOIN country_language.countries\n\n\n AS isaakkaatteeteeirdalikanenaravahapaaheonasurdejekaukotelokinielebomneeil"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": "SELECT AVG(economics_score )\n\n\nRIGHT JOIN (SELECT * FROM country_language.countries) ON language_id = 0;"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": "SELECT COUNT(id ) AS DIGGLINGRUN GROUP BY politics_score LIMIT 53349651722808909834507974211814122610461337574416581956754067292748322524389055643094285310092360689985391554113547"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": "SELECT AVG(countries.economics_score )\n\n\n INNER JOIN (SELECT SUM(economics_score )) ON EXISTS (SELECT SUM(economics_score ))"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "SELECT AVG(countries.health_score )\nFULL JOIN (SELECT COUNT(language_id ))\n\n  \n\n AS OFMTHUATIMES2K1S5ASJ7V3QWLSZ8DDSYS6BISGUMAGH9CEGEF0AAC4RY"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": "SELECT AVG(countries.name )\n\n\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN country_language.official_languages AS otevernelasanesgionneressektaandjrunieysaetakkaestedatjelewizarimeqnogt"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "SELECT COUNT(official_languages.country_id )\n\n\n INNER JOIN (SELECT MIN(languages.justice_score ))\n AS NIEXAUENWVOCALMONNTEMETEUNCKTABATNEUKOSCHHOVPILOPOLISJAYTHEWGYDEZIAC"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "SELECT AVG(economics_score ) AS LESSA FULL JOIN (SELECT COUNT(*) ORDER BY overall_score , countries.country_id )\n\n\n\n AS EAST ON country_language.official_languages.politics_score = 0;"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "SELECT id LIMIT 464352850366020883375572477266723124027013911371658183810321955984264305948444945173494992200667846132969798489069031483804325681554175287670731476490215053304266036234774278865013539"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": "SELECT AVG(countries.country_id )\nWHERE health_score = (SELECT SUM(*)RIGHT JOIN country_language.official_languages AS lengue ON health_score > 1032000LIMIT 4192);"
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": "SELECT COUNT(name )LIMIT 1 OFFSET 212345646138801122218484550784043256575163346372049679066009710356423285414956911175909893829574427793215307096686087100614980559839843456362685130107"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": "SELECT COUNT(*) LIMIT 0 OFFSET 467571533133909218929168946618586414272560321298124810352679284817370030779024504420462347436580490501637095403445885119066690211545538932473915571003158363322167813"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "SELECT COUNT(name )\nFULL JOIN (SELECT DISTINCT AVG(*) ORDER BY name , official_languages.politics_score LIMIT 1 OFFSET 21022324322319042744453542121718677738261088283316"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": "SELECT COUNT(countries.name )\nINNER JOIN (SELECT COUNT(*), SUM(*))\n\n AS HONNAHILABADATTABALAISOLACHAORGAMBIBAYANGANPROTOKIMAPAKWAQENJOSEMURRAVAGEOPOULICHEDITIAUNIYAZIPOCOGLIGTUINN"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT COUNT(*))\n\n               \n\n AS EETKINESUNDALA_VALUESONUS ON EXISTS (SELECT overall_score ) INNER JOIN country_language.countries AS COUNT1"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": "SELECT AVG(countries.country_id )LIMIT 0 OFFSET 11;"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "SELECT COUNT(health_score )\nLIMIT 1 OFFSET 21;"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": "SELECT COUNT(*)\nRIGHT OUTER JOIN (SELECT * FROM country_language.countries WHERE languages.language_id = 'US') AS country1LANGUAGES ON countries.country_id <-8 LIMIT 20000 OFFSET 10000000100090200002411001104555362364161222609926274818285025"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "SELECT COUNT(official_languages.justice_score )\nLIMIT 1 OFFSET 2;"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": "SELECT COUNT(name )\nRIGHT OUTER JOIN (SELECT SUM(*) AS ENCOUNTER, languages.language_id , name )\n\n AS WELLaswelleneseInformalJOEIJANESETheYoungiAryanEenglishCASUSETUNALESAshenDaijiaNekhiyongEnglishTakayo"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": "SELECT AVG(countries.country_id )\nRIGHT JOIN (SELECT economics_score , health_score ) AS NACETASJAICKYANPOTDALADELLOPIATUHAPTHURMAGENTITISOLORIZAYNAVAMARIFUSHABRAULINONN"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": "SELECT is_seller , age_category_description ;"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "SELECT is_seller INNER JOIN (SELECT Rooms.middle_name )\n\n\n AS CABALAGA ON EXISTS (SELECT Rooms.middle_name )"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": "SELECT AVG(search_datetime )\nLIMIT 2 OFFSET 3;"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": "SELECT vendor_requested_price RIGHT OUTER JOIN (SELECT SUM(Addresses.login_name ))\n\n\n AS TESQUITEJACKROOFTOPBANKASWOLVINGHELPITALANDEROSLUMENSZEGIMONDSYROKOWANISGUNDAR"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": "SELECT is_seller GROUP BY Properties.age_category_description LIMIT 45900421904117251216243026409632151095357833807720272906"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "SELECT is_seller , SUM(Rooms.age_category_description )\nINNER JOIN (SELECT AVG(town_city ), COUNT(*), Features.is_buyer )\n\n\n\n AS IFHALFSTOOLASHLYAVEATIMOSISPANTSWITH"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": "SELECT is_seller , SUM(Addresses.search_datetime )\nINNER JOIN (SELECT MAX(age_category_code ))\n\n AS PASTABOTXIMMEGANALESCHEENZHOMOSATTIMEEDCOGUNUORWELTERYERLENGTHPATCHIFACEJOB"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": "SELECT vendor_requested_price LIMIT 0;"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "SELECT Users.last_name INNER JOIN (SELECT SUM(Addresses.middle_name ))\n\n\n  \n AS TUBEDLY ON EXISTS (SELECT COUNT(*)) FULL JOIN real_estate_rentals.Property_Photos AS Property_LotCntnDtRf"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "SELECT is_seller , search_string ;"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": "SELECT is_seller \nLIMIT 56800015508513640122705728365527483716257540306765453909890236049194610588876298966351833247769008062171434472112038204312542019974100797211842574442147151364732263505528274870"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": "SELECT is_seller , search_datetime , middle_name , first_name , last_name , login_name , datestamp ;"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "SELECT town_city , search_datetime , middle_name , room_size INNER JOIN (SELECT COUNT(middle_name ) FROM real_estate_rentals.Ref_Age_Categories AS Name, real_estate_rentals.Ref_A"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": "SELECT SUM(search_seq )\nINNER JOIN (SELECT Rooms.town_city , line_1_number_building GROUP BY town_city LIMIT 3)\n\n AS SHADOWIDISTHAELFASUETIJEEDVESNINZOEND"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": "SELECT is_seller , SUM(country ), MIN(age_category_description )\nRIGHT OUTER JOIN (SELECT * FROM real_estate_rentals.Addresses, real_estate_rentals.Addresses) ON first_name = age_category_"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": "SELECT is_seller , address_id INNER JOIN (SELECT search_seq FROM real_estate_rentals.Ref_Age_Categories WHERE datestamp = -1) AS DIVS ON country > 0 ORDER BY first_name , last_name ;"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": "SELECT is_seller \nINNER JOIN (SELECT AVG(Addresses.first_name ) LIMIT 2)\n\n AS IYANGDENGELLHASJUCHUNQUTSHANINGZAIMIGALKATELIZAYNAGLEMAOISTAWNEETIBABGEMODINAMPADLIF"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "SELECT is_seller , is_seller ;"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": "SELECT is_seller GROUP BY Rooms.first_name LIMIT 2 OFFSET 1817229025000912148823750049742055542678014539586467572427406887803048365034721519355637186046135310056916763366991179074128"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": "SELECT is_seller \nWHERE age_category_description = (SELECT country FROM real_estate_rentals.Rooms WHERE datestamp >= 16) ORDER BY last_name LIMIT 1;"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "SELECT Properties.search_datetime , is_buyer \nINNER JOIN (SELECT Rooms.first_name ) AS LESSONLY ON Addresses.garage_yn = 1 INNER JOIN (SELECT Properties.search_d"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "SELECT User_Property_History.country , town_city INNER JOIN (SELECT Ref_User_Categories.photo_description )\n\n\n AS eaileltexerqonngstashesgusieznjaugeirvwalmikat"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": "SELECT is_seller \nINNER JOIN (SELECT COUNT(User_Searches.county_state_province ), SUM(Properties.country ), Property_Features.country )\n\n AS EENELGODAUNCANADOSASAMETORIUMBONUSISINTAKURATIOLR"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "SELECT is_seller , search_datetime INNER JOIN (SELECT * FROM real_estate_rentals.Addresses WHERE address_id = 'COUNTRY OF EDGMENTS' ORDER BY Rooms.address_id ) AS id ON search_datetime <= 60000;"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": "SELECT is_seller , address_id , address_id , is_buyer , search_datetime , login_name , middle_name , photo_title , room_type_code , user_address_id , vendor_requested_price , is_seller , country , town_"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "SELECT is_seller , is_buyer \nRIGHT JOIN (SELECT DISTINCT SUM(Addresses.property_id )) AS TEXTS1HW8YJQBYS2F3KDFE7D6V4CE5P9FA3099337511AA132260C123790387025883678"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT Features.search_datetime WHERE EXISTS (SELECT AVG(Property_Features.search_string ))\nORDER BY Ref_Age_Categories.sear"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": "SELECT is_seller INNER JOIN (SELECT * FROM (SELECT is_seller WHERE search_datetime = -1) AS SESSIONID ORDER BY property_id )\n\n\n AS toYLDDROPENHALLDATETABLEAASELOLLABOTIONOLES ON EXISTS (SELECT * FROM (SELECT i"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": "SELECT is_seller , search_string , search_seq , search_datetime , search_datetime , search_string , search_string , search_string , search_seq , search_datetime , search_string , search_seq ;"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": "SELECT is_seller , SUM(property_name ), User_Property_History.zip_postcode WHERE property_name = Property_Features.zip_postcode INNER JOIN real_estate_rentals.Property_Photos AS RETAILER ON real_estate_rentals.Rooms"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": "SELECT is_seller , SUM(middle_name ), search_string ;"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "SELECT is_seller INNER JOIN (SELECT * FROM real_estate_rentals.Ref_Age_Categories, (SELECT AVG(*) LEFT OUTER JOIN real_estate_rentals.Ref_Age_Categories AS REOF_SELECTORES"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "SELECT is_seller , address_id ORDER BY town_city LIMIT 22310033508058176720494836391816603215018855231089224047196478137054697699273057288612458700931126743873167142925963484753766904424"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "SELECT SUM(search_datetime )\nLIMIT 103314161337187820984000011011710115102749307970503877395540675944570003201582436804746200450075888769226029286008526347466900522976645630419087167239413140961612"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "SELECT is_seller , address_id RIGHT OUTER JOIN (SELECT COUNT(room_type_code ), room_type_code LEFT JOIN real_estate_rentals.Addresses AS ADDRESSEEERS ON real_estate_rentals."
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT vendor_requested_price )\n  \n\n AS toPISKALONIMMESlutkonimmeshiunokumikosiskoegametzakometskihfodirvnoparogaevsjuschovrzebskydav"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": "SELECT COUNT(search_seq )\nWHERE is_buyer = search_datetime INNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN real_estate_rentals.Features AS ARIS\n\n\n\n AS DEZENDURKEDH"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "SELECT is_seller INNER JOIN (SELECT address_id FROM real_estate_rentals.Features WHERE datestamp = 0)\n\n\n AS ELIGIBLE ON Ref_Age_Categories.county_state_province > 1;"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "SELECT is_seller , search_seq , SUM(search_seq ), country ;"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": "SELECT is_seller RIGHT OUTER JOIN (SELECT * FROM real_estate_rentals.Addresses) AS binder ON search_string =\n-1;"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": "SELECT town_city , COUNT(price_max )\n INNER JOIN (SELECT property_name FROM real_estate_rentals.Rooms) AS forAjeliklleWetCJEgNEsKQyhYv7f3nF5qz6M4u9H2V"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": "SELECT AVG(Addresses.county_state_province )\nINNER JOIN (SELECT Property_Photos.is_buyer , COUNT(*) RIGHT JOIN real_estate_rentals.Addresses\n\n AS S"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": "SELECT is_seller , search_datetime , owner_user_id ;"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": "SELECT is_seller , age_category_description , county_state_province ;"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": "SELECT is_seller GROUP BY Addresses.zip_postcode LIMIT 2 OFFSET 1112027132433182836488064552978406526880167431917097776755716592289342395476870376950964228151425569902124438603090"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT MIN(Rooms.search_datetime ))\n AS EASTYYDALISADIRPACFULLITBONDEAZAYARUAMQOLODVATKIMEFLORJOBIF1N9O5WXYG6CET3I4XH8T7"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT * FROM real_estate_rentals.Ref_User_Categories AS _SEARCHING, real_estate_rentals.Rooms)\n\n\n AS EASTESTEDEFRUIT ON country = 1;"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": "SELECT is_seller INNER JOIN (SELECT MIN(Features.is_seller )\nWHERE town_city = ' 1-16' LIMIT 3500823361548273907883728171422352612108780674557334732135038010599095530297908"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": "SELECT is_seller ;"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": "SELECT is_seller , SUM(photo_filename ), User_Property_History.login_name ;"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "SELECT is_seller , age_category_code INNER JOIN (SELECT Properties.middle_name )\n\n\n   \n\n AS EINFRAIMLIGDY ON EXISTS (SELECT Features.price_max , SUM(Addresses.price_min )) ORDER BY R"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "SELECT Rooms.datestamp INNER JOIN (SELECT SUM(Features.garage_yn ))\n\n\n  \n\n AS VEMINATEESP1V4QZGJ9HOCC3YK8XIA6E ON User_Searches.datestamp > 50000 INN"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": "SELECT is_seller RIGHT OUTER JOIN (SELECT * FROM real_estate_rentals.Ref_User_Categories) AS elvl ON is_seller = country ORDER BY line_1_number_building , datestamp , middle_name ;"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "SELECT AVG(search_datetime )\n\n\n  \nINNER JOIN (SELECT COUNT(*) RIGHT JOIN real_estate_rentals.Addresses AS d1d3a5b1800c6f354828995775297739641795704044233363F4B8783094E2C9D7"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": "SELECT Rooms.country , room_number WHERE age_category_description \n\n\n <date_off_market ;"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": "SELECT vendor_requested_price \nINNER JOIN (SELECT Property_Features.vendor_requested_price )\n\n AS TUANGQJYMELASETA ON EXISTS (SELECT SUM(price_max ))\nINNER"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": "SELECT COUNT(search_string )\nINNER JOIN (SELECT SUM(town_city ))\n\n AS ASSTAFFFADDASGITHUNSCLIFBODENOCALAMKONICYMPTCETHEATANTHAGATHAPOPARCLPURATELSILOTOLACINIOURBLULCIMCELT"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": "SELECT DISTINCT COUNT(search_datetime )\n\n\n INNER JOIN (SELECT MAX(address_id )) AS PRELOADED1PROTO3DSERV4PTR0B102344001802ZGJY6F9BE7E552530393358486765406064384612141936012822"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": "SELECT is_seller , address_id RIGHT JOIN (SELECT DISTINCT COUNT(town_city ))\n\n\n   \n\n AS OFOLATIONAL ON EXISTS (SELECT * FROM real_estate_rentals.Ref_User_Categories AS SELEECT, re"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": "SELECT is_seller RIGHT JOIN (SELECT Properties.search_datetime )\n  \n\n\n\n AS DATETIMES2x13B8E9D0A10FC3F1EE33BA5AC6ED281660484938113050473777995725C142355151904642639"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": "SELECT is_seller RIGHT OUTER JOIN (SELECT * FROM real_estate_rentals.Rooms WHERE county_state_province = 6)\n\n\n AS and ON datestamp < town_city RIGHT OUTER JOIN (SELECT * FROM real_estate_renta"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": "SELECT is_seller INNER JOIN (SELECT Features.town_city )\n\n\n AS LULESKERUENFURISETMEEfBUNDINZANPIEASQAIMONODICADVITALHANDGIFUSAMAYEVECHYPSACRATIOMLIANEMOCRYTOL"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": "SELECT is_seller , town_city WHERE Addresses.login_name = 'Robbie'\nFULL JOIN (SELECT * FROM real_estate_rentals.Addresses) ON town_city > 0;"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": "SELECT is_seller \nINNER JOIN (SELECT MAX(middle_name ))\n\n AS for ON Rooms.is_seller \n\n =1;"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": "SELECT is_seller , address_id , user_address_id , user_address_id , address_id , owner_user_id , photo_filename ;"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": "SELECT is_seller RIGHT JOIN real_estate_rentals.Ref_Property_Types\n\n\n AS elctelythisllem2vqXJ6n4iM5wUgQdEIxB1aWzkC3GVYp8Kj0OuF9H7AeZLhfR"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "SELECT is_seller INNER JOIN (SELECT * FROM real_estate_rentals.Features) AS name1 ON price_max = '-0' ORDER BY room_number , town_city LIMIT 2;"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": "SELECT is_seller INNER JOIN (SELECT * FROM real_estate_rentals.Addresses WHERE date_off_market = 6500000 INNER JOIN (SELECT Ref_User_Categories.photo_description FROM real_estate_rentals."
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "SELECT is_seller , address_id , owner_user_id , user_category_code , search_datetime , date_off_market , price_min , price_max , real_estate_rentals.Features.zip_postcode ;"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "SELECT COUNT(material )LIMIT 18250104911255535291545132214402616232857604700778917073330902034752744437095500619125401376774999039946387225518582459369210052573119864808639532150652969788513490581110"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": "SELECT MIN(bike_id )\n INNER JOIN (SELECT MIN(*) LIMIT 1 OFFSET 2383840015082202875000100002115855322112181090338022974826256435500377030852714652344196062164976999843173613864594394777887829"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": "SELECT DISTINCT COUNT(name )\nINNER JOIN (SELECT SUM(*)LIMIT 212560342048294527573935012817073670431833106515245512851909056487664025131649563038479469755968791107267858639942114623144477"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "SELECT MIN(bike_id )\nINNER JOIN (SELECT COUNT(*) ORDER BY id , id , weight LIMIT 4452234495530231128261467703825132454603216204835973301086543120778646989412827871050754036291858"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "SELECT COUNT(cyclists_own_bikes.purchase_year )\nINNER JOIN (SELECT COUNT(*)\n\n LIMIT 180900852922133925232710532818997879041258371726643545343260758811203114163033977084151946114955"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "SELECT COUNT(cyclists_own_bikes.material )\n\nRIGHT OUTER JOIN (SELECT * FROM bike_racing.bike) AS race1 ON bike.name = cyclist_id LEFT OUTER JOIN (SELECT cyclists_own_bikes.material ) AS racer2 ON cy"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "SELECT AVG(bike.id )\n\n\nINNER JOIN (SELECT MAX(bike_id ))\n\n AS BACCOEBIKKE2BUNNYLONGYUORPITBLUEJERKS1Q5ASM9D0WXY6ZH4G3TLV8VWEGMTN7ADSEDCBFBAYSBROCAMROSXCOTRO"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": "SELECT DISTINCT SUM(cyclist.id )\nFULL OUTER JOIN (SELECT COUNT(*)RIGHT JOIN bike_racing.bike AS HILKERS ON cyclist.id = 1 ORDER BY name , result , id )\n\n AS SELTEXCHASURGINCT"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "SELECT AVG(id )\nINNER JOIN (SELECT COUNT(*)\n\n  INNER JOIN bike_racing.cyclist AS CYCLISTNAME1ID2COMMODATE3CAMERA4BISSAX5EKUS7SZF8JEDG6AELTA9PTSVDSIHUYLSRCHNYS\n\n\n  A"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "SELECT AVG(bike.cyclist_id )\n\n\nINNER JOIN (SELECT COUNT(*))\n\n AS RATINEKIMANABOSSKYMOUNTRYLIPSHIREHARITASWILSHONORLENOVRAYSZAMOTUCHAZUKDADFUCKERIKOHAGIZAVIBAVIGIRUGOISEMETNUT"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": "SELECT AVG(name )\nFULL OUTER JOIN (SELECT MIN(*)\n\n INNER JOIN bike_racing.cyclist ON EXISTS (SELECT COUNT(*)) RIGHT JOIN (SELECT SUM(*) GROUP BY heat )\n AS LAMMAKJE"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": "SELECT AVG(cyclists_own_bikes.result )\nFULL JOIN (SELECT COUNT(*), material , product_name , name RIGHT OUTER JOIN bike_racing.bike\n\n AS SELECTAVG\n\n AS ENCYCLIST"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "SELECT COUNT(cyclist_id )\n\nINNER JOIN (SELECT SUM(*) LIMIT 109913480017403411140711252239881543274610261824290670850135383220541637607596126465945528678433932552523456895573087508903)"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": "SELECT AVG(bike_id )\n\n\n INNER JOIN (SELECT SUM(bike_id ))\n\n    \n\n  \n AS DOUBLEBINIANZENCEXONJANCHARTETICRELLAHISUSECKUNTELGASTORIAIJAKOMAROSWASEEDIOLOIFDINGERYLATIMES"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": "SELECT SUM(id )\nLIMIT 6323617497515106058980039121130455020574023708522807916953501"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": "SELECT COUNT(bike.result )FULL OUTER JOIN (SELECT COUNT(cyclist_id ), cyclists_own_bikes.name , product_name )\n AS BIKESBikesFromRidersEldinM2Ym0QVbX7Wp1KzC9f"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": "SELECT SUM(cyclist_id )\nINNER JOIN (SELECT COUNT(*), cyclist_id , bike_racing.purchase_year )\n\n AS NAKED ON EXISTS (SELECT *) INNER JOIN bike_racing.bike ON cyclist_id = 2;"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer": "SELECT SUM(CustomerId )\nLIMIT 316080771500402260642518161712103327583739495767784826594750384432112885362908211866010970687565694217599552045953472390"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": "SELECT Price INNER JOIN (SELECT Receipt ORDER BY LastName )\n\n\n\n \n\n AS NIKROCHESISUSENJIMAZUNMADVATWAMMAHKOSITTOQEALUANODDELASHAVEIREBIBFOUGRAOINOLARRACETTBAY"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "SELECT DISTINCT COUNT(Id )\n\nFULL JOIN (SELECT SUM(*) ORDER BY Price , Item , Ordinal LIMIT 2100526361060555040756549223025482023797701807470291267887632163527681856143345178908"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": "SELECT Receipt , Date FULL JOIN (SELECT Price )\n\n\n\n  \n\n AS BAMMAFULLYKICKEDACHILDREN ON EXISTS (SELECT Price )\n INNER JOIN bakery_1.customers ON customers.Date = 0;"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": "SELECT Receipt INNER JOIN (SELECT MIN(Food ))\n\n\n AS EH ON CustomerId >Date FULL JOIN bakery_1.goods AS ajfJVzw4h8c7GQbEpO2nA3TlC9qMvK5BxZ\n\n\n"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": "SELECT COUNT(LastName )\nINNER JOIN (SELECT LastName )\n\n AS EATENDEHILDINGCEESFISHACREZYAUSOLUMBEASISALLSPOWEREDICREEHAWIDOWIPARBAKAMONNABIANECHAELORIANAZINEELIJNUJAKAYEROLEMETHYLTH"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": "SELECT LastName INNER JOIN (SELECT Ordinal )\n\n AS SELFIEJENNAISUMEMIDGASFOSUNZHINITATICULONNEAESPEDDAGUMMAKETRIENTUSYEHAVARREADALOUDSUPANOLAPAMCIODNURNTORIANRIGANSWITHT"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": "SELECT LastName INNER JOIN (SELECT Price RIGHT OUTER JOIN bakery_1.goods\n\n\n AS toelitlurFeeVb2oQf7DYBj4uJWN3qwPm5nzvAZh9p0iEk6K8Gt"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "SELECT LastName RIGHT JOIN (SELECT DISTINCT MAX(Date ))\n\n\n AS ICONICKASANATVUZYONDAMHAOTUNITAYAMPAPALMAUDEDADEMILIZRIFJOLNOMAZETCENOVICHIYAOPOLBACROSLYNDIDAQTIMDIG"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "SELECT Receipt WHERE items.Flavor = 585\n\n\nFULL JOIN (SELECT SUM(LastName )) AS NERVATABOLYPROOGATE ON Price < 3"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": "SELECT Price INNER JOIN (SELECT Receipt ORDER BY LastName )\n\n\n\n   AS AKROOMENISTS ON EXISTS (SELECT MIN(CustomerId ), Date , CustomerId );"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": "SELECT DISTINCT SUM(Food )\nINNER JOIN (SELECT COUNT(*)WHERE Item \n\n>4.5LIMIT 1 OFFSET 0) AS INCLINE1 ON items.Date > 3 LEFT OUTER JOIN bakery_1.customers\n\n AS KORBON"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": "SELECT DISTINCT Receipt ORDER BY CustomerId , items.Price \nLIMIT 33313886789471628293020990011873858193723153577502670931057397854321217752760764096459755184490225649017914082199256446368095"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "SELECT Ordinal FULL JOIN (SELECT Id INNER JOIN bakery_1.customers\n\n\n AS ECCFOLKON ON Date > 6112827221409519010589001888305429063LEFT OUTER JOIN (SELECT Id INNER JOIN bakery_"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "SELECT Ordinal , Date RIGHT JOIN (SELECT LastName )\n\n\n\n AS NAEDIAISANTHANAASKADIMATRASHNAOSCHIEZUBIONTAORYPICULUSFEMEXILIZINGBARREOLCOOKERQALIRABAOWANDHELMECUMIFACETLAMIDAZ"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "SELECT LastName RIGHT JOIN (SELECT Price INNER JOIN bakery_1.items\n\n\n AS eklelizaschonnenhauftbijelaluastenfiktersehennagtNanstadteyGdW9c2mV4gqKL3Fz8B5"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": "SELECT LastName INNER JOIN (SELECT Price FULL OUTER JOIN (SELECT AVG(*)LIMIT 1 OFFSET 4341114134854647825382907857308610321635408897392775241928126544986372217859920476058363326"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": "SELECT Receipt WHERE LastName  IN (SELECT Price )\nINNER JOIN bakery_1.goods AS BOOODINGFriedcakesfriesandpastrycakeworksbybakedbeastofalmondcakepuddingnoodlelunchpiemonoiePiePineappleBiscuitApplebreadonCreamyDessertnut"
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": "SELECT SUM(LastName )FULL OUTER JOIN (SELECT LastName , FirstName )\n  \n\n\n\n AS TOYZONIANIAJEMALE ON CustomerId = 1.710262857394979094"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "SELECT LastName ORDER BY FirstName , Price \nLIMIT 1;"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Date ))\n\n\n\n    \n\n AS FETTEED ON Price >Food RIGHT JOIN bakery_1.receipts ON customers.CustomerId = (SELECT COUNT(Date )) INNER JOIN"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "SELECT COUNT(Food )INNER JOIN (SELECT Food )\n\n\n\n AS BOOD_LITEFLYAINGBOTIFANDSHIRRYBEATSIMERONMUSKETALIABOODGAMESHEFTSTANDENCHESTHOBUZZWXSLAMBAATZAVOLIOSCOUNCURISOMEASOLE"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": "SELECT MIN(CustomerId )\nLIMIT 0;"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "SELECT MIN(CustomerId )\nLIMIT 8408003 OFFSET 0;"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": "SELECT DISTINCT SUM(CustomerId )\nLIMIT 6238948956036880133206750963094454470408614152810271117268575387664904919259830000045716243454692299395565831837663210529058747562553558578410059134660361278"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": "SELECT DISTINCT COUNT(customers.CustomerId )\nFULL JOIN (SELECT SUM(receipts.Receipt ))              \n\n AS ELLENERONKEEPERZ_DIAH1NEA2E3G0W5YJ8B4"
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": "SELECT AVG(CustomerId )\n\n\n INNER JOIN (SELECT COUNT(*)ORDER BY Date LIMIT 2034015036152533202229104428352613305427777978390714041004060851637956723384370494675479448575517669036864895912097"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "SELECT Id LEFT OUTER JOIN (SELECT MIN(LastName ))\n\n\n    \n\n AS ALAMATISKORHASANADAKPONNEYGURJARBAGZUKOSENHAUMSSACITALIMETRIVAQRCHOMWUBIOLVUNIFIYAAMIGFULLIAEUSNICOT"
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": "SELECT DISTINCT SUM(CustomerId )\nFULL JOIN (SELECT MAX(Date )RIGHT JOIN bakery_1.items AS ttlcntr AS _103600122396E8B5f4DB3FE093330397745483488F922587043274960502878"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": "SELECT COUNT(CustomerId )\n\n\n INNER JOIN (SELECT Receipt , SUM(*) WHERE Price = -1.00 GROUP BY LastName ORDER BY Date LIMIT 15291301094200341723157977781160509767161214590737990821472526"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "SELECT SUM(Food )\nWHERE Item = (SELECT Food , Price WHERE CustomerId <-0.1)GROUP BY LastName ORDER BY Receipt ;"
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": "SELECT LastName INNER JOIN (SELECT Price GROUP BY Receipt ORDER BY CustomerId , Food )\n\n\n AS SELLERSALMINGDGONRYJUNNEDK3L2X0x4Q_8lg1v5FfT6jH7bV"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": "SELECT COUNT(Food ) AS DOUGHLING FROM (SELECT COUNT(*) RIGHT OUTER JOIN bakery_1.customers\n\n\n  \n\n AS cotwolleatpuste3d6b0610m8f9n42h5qs19g4xvk15j2lXiTzQZuW7"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": "SELECT Price INNER JOIN (SELECT SUM(Price ))\n\n\n       \n\n AS ETA1A3J0B4F25012319076C2D15103093AA938AD7037DA8161811322058005480224074602912173957674724263533147548"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(Price )\nWHERE Receipt = 1.3514504499999122949463025396020974590228948002637283676185740704212580582717010410678510059153386135632167578843887117755651907"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": "SELECT Price INNER JOIN (SELECT SUM(Food ))\n\n\n       \n\n AS EACH ON LastName = 462 INNER JOIN bakery_1.customers AS cUSTOMER ON customers.Id < 1;"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": "SELECT COUNT(Price )\n\n\nINNER JOIN (SELECT SUM(Food ))\n\n AS LAGAKAMANEISCHALBOSYLUMIMICONEINERATULOXIDEOLITREONOCARBUNDRIORENZAZETRYROXYPETHODIOXIOMARILHOPYRINACURENTLYHYDROIDC"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": "SELECT COUNT(Price )\nINNER JOIN (SELECT Price , SUM(*)FULL OUTER JOIN bakery_1.customers\n\n AS ANIMAL AS ABABITABLE ON EXISTS (SELECT COUNT(Price )\nINNER JOIN (SELECT Price"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": "SELECT SUM(CustomerId )\n\nWHERE Item =  (SELECT COUNT(*)RIGHT OUTER JOIN bakery_1.customers ON LastName <-3 RIGHT JOIN (SELECT SUM(CustomerId ) FROM bakery_1.customers WHERE Ite"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": "SELECT AVG(CustomerId )\nWHERE Item < 2.5\n\nFULL JOIN (SELECT Ordinal )\n\n AS GORILLAAMINEPRAHA1K3Y4Q2DOULXJ0RYSZV9C7BY8Rxkc6M_uqTjUiIHGgFv5Bh"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": "SELECT COUNT(items.LastName )\n\n\nINNER JOIN (SELECT Receipt , LastName INNER JOIN (SELECT FirstName ORDER BY Date ) AS PULCHESPATENTiNTCOUTIMEREcTTdMURsDATEINSONSTAHEDUCEUT"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": "SELECT Id , SUM(customers.Receipt )\nINNER JOIN (SELECT CustomerId FULL OUTER JOIN bakery_1.goods \n\n AS VENTUREPORCHETEBANZAOSKISKIATUKAAMAZAYTAHAHASIARYAH\n\n AS HAVING"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "SELECT Id , SUM(Date )\nWHERE items.LastName <> (SELECT Price ORDER BY Receipt LIMIT 7)\n\n INNER JOIN bakery_1.items AS inlAatJfGz0cMh8XHjZWKv5Qs9B6C"
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": "SELECT MIN(Food )\nINNER JOIN (SELECT Price , Date RIGHT OUTER JOIN bakery_1.goods ON goods.Price = 2) \n\n AS TAKAJONOMBUNGEEERKYPE2PRIPE4DIMVOLO5ZCQ3"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": "SELECT DISTINCT COUNT(Date )\nLIMIT 1000412603613172534185820642810655030338931997039542600452435140144574878421940236749371556210191680439991007225527771"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": "SELECT SUM(CustomerId )\nRIGHT JOIN (SELECT Ordinal , CustomerId )\n\n AS LISDASLATUSURJOLX1B6QA8FZE7V0K_U4G9C2OSI5Pbw3vhfgcjrquHzWdRxMn"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Date ))\n\n\n     \n\n AS CHANGERED ON Date <3"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": "SELECT MIN(CustomerId )\nWHERE Item = CustomerId \n\nFULL JOIN (SELECT SUM(Date )) AS EfZgR7G8M2A9Q0jXVbYuP3C4Jqy1cTtvBxk5oH6sLKmwWnUiLMz"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "SELECT SUM(Id )\nLIMIT 32003600180714233038482750285529191622203340265815466417998941673478122544634579853511678760663798767577952472118705747010430439061383178597431"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "SELECT MIN(CustomerId )\nINNER JOIN (SELECT Ordinal , CustomerId ) AS ANDJUANCHICEDAXIMERIDAnid1sj3x8BASH2RbwM6C9F7yYvzdGV4gqVrOQZWGkKpLfE5c"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": "SELECT Ordinal INNER JOIN (SELECT SUM(Food ))\n\n\n  \n\n AS HARDENERKPOTHISHAUNDASZEELLYREXEDBODJAGWARABETVIRCHEGLEBRADANELANDBAGATEMPHNALICOGEBEATSIOSAFFLANCURONTUFIT"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": "SELECT MIN(Receipt )INNER JOIN (SELECT Price LIMIT 2)\n\n\n    \n\n AS EQDED ON CustomerId >-0.00525000001337817181512553723133916202150778857491435441934592728584322694736891\n\n I"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": "SELECT LastName RIGHT JOIN (SELECT AVG(Receipt ))\n\n\n   \n\n AS NrFJWv1BQ7wMhzP5bEf9gqyX3LkcAa8YjDNx4l0iKdI6OU2ZVsHuCnSpRt"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": "SELECT Id RIGHT OUTER JOIN (SELECT AVG(Food ) LEFT JOIN bakery_1.customers\n\n\n AS DEPLOREROLESASKITISQUEANLYPATRAIRNESUNDARHONiYLDEvzABAbMw2NhCVXyZ9Fp4R"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "SELECT items.Item INNER JOIN (SELECT Price ORDER BY Receipt LIMIT 3)\n\n\n\n AS ajdzquw3_2a4c1h5lbdf8nxenivkv7s9ed6e357860b1774ac982615571632ccddaf2210481155"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": "SELECT AVG(CustomerId )\nLIMIT 913222537604933402058109599171415281185394898119329570064307701793435902572367128918463654"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": "SELECT DISTINCT SUM(Date )\nINNER JOIN (SELECT COUNT(Food ))\n\n AS LIEKETENERISINGLYHONXIMOLORINEVATARALAMASURREKAGUMLIAUTBRAJYUWIRESIGNAVAOSMOTIKITECUPROPULONEOQUEIUSPELA"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": "SELECT Id \nINNER JOIN (SELECT COUNT(Date )) AS SELLING_PAPER1A14504095B0317C4F2ED8CE305722381290291815461127477813774594673901231665697548893384256476240680553599348856369766265419"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Price ) RIGHT OUTER JOIN bakery_1.goods\n AS PbkA3Gqz6f9i0wF4a8vpWcZoYj2MVKB5DhEeQ7nLmHr"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "SELECT COUNT(CustomerId )\nLIMIT 10000001106036254845349909522154088175089371423191654282718794612572466004785305844704977646903265538765072043133539336003147655325567956050194000829603002126103422159959"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": "SELECT Price INNER JOIN (SELECT COUNT(LastName ))\n\n\n   \n\n AS DEVLYGIA_2K4J6X9ZfHjb7Bh1McPvUxuE3F0C8yWQIBAAiNnqOpY5gkRsLmTzdD"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "SELECT COUNT(CustomerId )\nRIGHT OUTER JOIN (SELECT Item WHERE EXISTS (SELECT DISTINCT LastName FULL JOIN bakery_1.receipts\n\n AS ROOFEDA AS SHAREERJAN ON CustomerId = 10RIGHT JO"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": "SELECT AVG(CustomerId )\n\nORDER BY Price , CustomerId LIMIT 20 OFFSET 17305017282901182242131947121099890088203240903908609480271633252321"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": "SELECT DISTINCT Price LIMIT 264503317442036111688551438394749012540671087125832156919488098452313796624954093037657099755710046292785345317722607735541892676213320100433056462159173650421173143859163339"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": "SELECT Price INNER JOIN (SELECT SUM(Price ))\n\n\n AS LENZYTEAU ON CustomerId <bakery_1.goods.Food GROUP BY Receipt ORDER BY Date , receipts.Ordinal ;"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "SELECT DISTINCT COUNT(Receipt )\n\n\nFULL JOIN (SELECT SUM(*), Receipt GROUP BY Price , receipts.Date LIMIT 2 OFFSET 0) AS ENCERTED ON CustomerId =-8FULL JOIN (SELECT S"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": "SELECT MIN(CustomerId )\nRIGHT JOIN (SELECT Item GROUP BY Price ) AS LORJETA ON FirstName <1.5FULL JOIN bakery_1.goods\n\n\n\n AS THEBLUES ON Date = 10RIGHT JO"
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": "SELECT DISTINCT SUM(Food )\n\n\n INNER JOIN (SELECT LastName )\n\n AS incelts ON items.Price < 4LEFT OUTER JOIN bakery_1.items ON customers.Date = 10;"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": "SELECT DISTINCT SUM(Date )\nRIGHT JOIN (SELECT COUNT(*) RIGHT OUTER JOIN bakery_1.customers\n\n AS TUNNEYOLAICFRIENDKHWATERALESTAILEDHAZARDISECCHEMICALISTENAMBERDEL\n\n AS CULTUREMENTERCUST"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "SELECT DISTINCT SUM(Food )\n\nINNER JOIN (SELECT COUNT(*) ORDER BY Item , LastName LIMIT 498635757089124823656788269500782216140113383907275460361899409410081909583786642928552057"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": "SELECT DISTINCT SUM(Food )\nORDER BY Ordinal LIMIT 1125311103344132285397975154064782716506529890060233059128818243220496738974601175514359319588069639937843672240252857741001"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": "SELECT COUNT(Food )\nINNER JOIN (SELECT DISTINCT COUNT(Date ))\n\n AS ICONIC1 ON EXISTS (SELECT Price , SUM(Price ), LastName );"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": "SELECT MIN(CustomerId )\nFULL JOIN (SELECT LastName INNER JOIN bakery_1.customers \n\n AS HARDYBOWINGERMISTAXEDJOSIECHICOLITAIAFLAMEWORKedybows\n\n\n\n AS THE ON Date = 1 INNE"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": "SELECT MIN(CustomerId )\nLIMIT 8408525391301162900379938143315173057802870976083241835447723271932206466554978953698456853261054651008958504611470004247695625575432544060093258839030186371238167913"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": "SELECT DISTINCT AVG(Date )\n\n\nORDER BY CustomerId , Ordinal LIMIT 500001001011023331425000955365002622121730282940542111193546326065004413373003125345979185024678580395816562077990664277545"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": "SELECT LastName GROUP BY Ordinal ORDER BY CustomerId , Item , goods.CustomerId ;"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": "SELECT Receipt GROUP BY Ordinal LIMIT 3444539462428141318175870305978151088602064222616509535658719044034366711236375273869852101123725796210466809324949003217545902"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": "SELECT AVG(CustomerId )\nWHERE Id = 30000116025893733204097109912170029903801773665304867357027284904195563455023461364755447571488741590318589841180962496999421669\nINNER JOIN (SELECT AVG("
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": "SELECT COUNT(customers.CustomerId )\n\n\nINNER JOIN (SELECT * FROM (SELECT LastName , CustomerId ), bakery_1.customers WHERE customers.CustomerId = customers.Date ORDER BY customers.FirstName LIMIT 1) AS vars ON customers.CustomerId < 4 ORDER BY Date ;"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "SELECT Item GROUP BY Date ORDER BY Receipt LIMIT 1;"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": "SELECT SUM(Food )\nINNER JOIN (SELECT DISTINCT Price , Food WHERE Ordinal < 3)\n\n AS COWBORGISENAANVIDUSKJWOSYSELCZYP0XU9s_D2z6wR1pFqQMjfv8i5"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": "SELECT AVG(CustomerId )\nORDER BY CustomerId , Price LIMIT 83117549002445131277502325548035107428142038304460846878403436942933172616196722984856000520079061018976427051569558565995957"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": "SELECT Ordinal LIMIT 116075206411883068337936381240395914262513232918490878698048321055508799161554444777932419584528702705743557462221"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": "SELECT COUNT(customers.Ordinal )\n\nFULL JOIN (SELECT SUM(*), FirstName , LastName INNER JOIN bakery_1.receipts ON Price = CustomerId ORDER BY Receipt )\n\n\n AS ECHT"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": "SELECT Price INNER JOIN (SELECT Receipt ORDER BY Date )\n\n\n AS SKEPTICZUEWDANZEVKADIMMINATBITUNHAGARGUMFUTEMISCHALBAUGTAORAENJAYAZROLULIGAFINOPURIANAVAMIDASMAHAPOTIRUSLONIA"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "SELECT DISTINCT SUM(Food )\nRIGHT JOIN (SELECT COUNT(*))\n\n AS EASYYHALLENCE ON Item <1.842GROUP BY Price LIMIT 0"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": "SELECT Ordinal , SUM(Price )\nFULL JOIN (SELECT Receipt LIMIT 2)\n\n AS Erystiflorais ON CustomerId = 0.4493357754867223788542318781340445026346941FULL JOIN (SELECT Receipt LI"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": "SELECT LastName INNER JOIN (SELECT COUNT(Date ))\n\n\n AS EH ON Date < 1200020FULL JOIN bakery_1.customers ON goods.Receipt = 0;"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": "SELECT Price INNER JOIN (SELECT Receipt WHERE EXISTS (SELECT SUM(*), Ordinal FULL JOIN bakery_1.customers ON customers.CustomerId = 3) INNER JOIN (SELECT Price INNER JOIN ("
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "SELECT Id , SUM(Food )INNER JOIN (SELECT COUNT(*)\n\nGROUP BY Date LIMIT 1 OFFSET 2100082832392914220117302346703500362789645049204815661819376934995938585680551316741053602698405411"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": "SELECT SUM(Price )\n\n\nRIGHT JOIN (SELECT Price , Date FROM bakery_1.customers WHERE Flavor = 1) AS ECHOES ON customers.Id = receipts.Date ;"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "SELECT MIN(Food )\nINNER JOIN (SELECT LastName ORDER BY Receipt , Item )\n\n AS YMZKNOBUNSKOLGIA_DHAUBICHJANIANASACHTVATCALPISFITQAAELAICARMYAKAIHIBAODORUMOIDOGLOBE"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": "SELECT LastName INNER JOIN (SELECT DISTINCT MAX(Date ))\n\n\n   \n\n AS SONGWASHINGCRAFTYMOUSNESSCHICIPALIAFACTORYANATOLONEKITUNDSUBREAKEDTENJUMPPACKBANKIDGRABBARESIMONLYNODAASIOTORAMETR"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": "SELECT Receipt , AVG(CustomerId )RIGHT OUTER JOIN (SELECT Item ORDER BY CustomerId LIMIT 1)\n\n\n\n AS VALUES ON EXISTS (SELECT SUM(Price ), Date , Receipt )"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": "SELECT MIN(Price )\nLIMIT 25 OFFSET 42410285044253913404588118907325899557836185777372617309029196423227579153427697324146543177684901461633531280931663593800761124288485960322087102854254067"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": "SELECT Ordinal RIGHT JOIN (SELECT LastName INNER JOIN (SELECT * FROM bakery_1.items WHERE bakery_1.items.Id = 'D-10B0' ORDER BY items.Date )\n AS is ON Receipt < receipts.Ordinal LEF"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": "SELECT Receipt ORDER BY Price LIMIT 10489990151245142911132817889525207026375540430023105949161844745046200357938802769192266473067345632105647839752101249810058368736833421594899576003118452954151117"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": "SELECT Price INNER JOIN (SELECT Receipt ORDER BY LastName )\n\n\n \n\n AS toAelikirjakhianasalaituramahuvaanaalumisagaramaimunenayatrahaipkaranhukrishilapyaivacrimawatiyavathotiainupetiutri"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": "SELECT Receipt , AVG(Id )\n INNER JOIN (SELECT LastName GROUP BY FirstName ORDER BY CustomerId )\n\n AS SENT ON EXISTS (SELECT MAX(*), AVG(Id ), SUM(Food ))\nLIMIT 1035000817181216"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": "SELECT SUM(CustomerId )\n\nWHERE Item = 3.733\n\n LIMIT 2 OFFSET 181650421264891;"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": "SELECT items.Item INNER JOIN (SELECT Price ORDER BY Receipt LIMIT 3)\n\n\n\n AS alderslaveauchkundelteiagfierungenInbruckerinbesgebenKommandarBesutzenCATROLCHZISOJUH3L7F8M4EQ"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "SELECT SUM(CustomerId )\nORDER BY LastName , CustomerId ;"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": "SELECT Price INNER JOIN (SELECT Ordinal RIGHT JOIN bakery_1.items\n\n\n AS LEMBLAVEBRAGEERCABANONIA AS BRIEFEDVENDUINGBIALADOSASESYLLIASFOCUSELTAKAROTPOVAGLITIURICOPHISRIMOLAT"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": "SELECT Receipt LIMIT 713383085175740795536997589482758151839161177808833356090670064697020493786247668651229085445043247254734541690326142345873652259066610087428463883175536639956133078274048"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": "SELECT SUM(Country )\nINNER JOIN (SELECT Regoin GROUP BY Points LIMIT 20)\n\n AS INTELLIGENCE ON Age = 0.01 ORDER BY Team_ID ;"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": "SELECT SUM(Driver )\nWHERE Age < 2 LIMIT 0 OFFSET 1000031002999421100440100130209977702217606528154736134875105055785664168823543858273540593218378097461929684987200254539432694243457149533"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": "SELECT COUNT(country.Driver_ID )\nINNER JOIN (SELECT Regoin LIMIT 3)\n\n AS EATIEA ON Manager > -2LEFT JOIN car_racing.driver ON country.Country = 'P' GROUP BY car_racing.cou"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": "SELECT SUM(Regoin )\nINNER JOIN (SELECT Laps RIGHT JOIN car_racing.team\n\n AS HENRYAETERYOLICZLAWKANCHOSAMVATEHAEGIANNEBECONDS1M8FQ0C\n\n AS CACHELLIRUNNERHASISUNAX"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": "SELECT DISTINCT AVG(Laps ) RIGHT JOIN (SELECT COUNT(*) LIMIT 1 OFFSET 200004000212513236788452565362728890314260064321720561916461042605048240144903929055410053347557976113712879943151877223559"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": "SELECT AVG(Age )\nINNER JOIN (SELECT Regoin , Points LIMIT 2012)\n\n AS INERMISAVERIA ON Driver > 0 INNER JOIN car_racing.country AS SELECT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": "SELECT AVG(Country )\nLIMIT 230000 OFFSET 30000000005000000070000000000000800000000000000009333333310020000010290290023603634332517193849227020542610398047674046272405641344281643991853125365355989778788759842286863154511555048"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": "SELECT Regoin GROUP BY Laps ORDER BY Team_ID \nLIMIT 11252067259075109811011648890610000977077392313403827602280662917885769344536352879561949378644149968559613564263363127318462459086"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": "SELECT Laps INNER JOIN (SELECT MIN(Team_ID ))\n\n\n AS AVAILABLE ON Sponsor > 9541030123500"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": "SELECT Official_native_language INNER JOIN (SELECT Laps RIGHT OUTER JOIN (SELECT * FROM car_racing.team WHERE EXISTS (SELECT Team INNER JOIN car_racing.team ON team.Team = 'a' GROUP BY Team ) LIMIT 0)\n\n\n AS GTL1E10A8C"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": "SELECT Regoin INNER JOIN (SELECT Regoin LIMIT 2)\n\n\n   \n\n AS for ON driver.Country_Id = 1740225035141225267543162936880037104917489528233098771127741954651513187632FULL JOIN ("
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "SELECT AVG(Country_Id )\n INNER JOIN (SELECT COUNT(Country_Id )) AS PASKIE ON Driver = 4.400092900113550454834391922121623251856277864693040546660687415141767575836335907537"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": "SELECT Official_native_language GROUP BY Make LIMIT 1;"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": "SELECT AVG(Age )\nWHERE Make \n\n = -3.1;"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": "SELECT Winnings FULL OUTER JOIN (SELECT Laps )\n\n\n\n   \n AS TEN ON Points = 2500001 INNER JOIN car_racing.team ON team.Regoin >= 100004;"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": "SELECT Team_ID , SUM(Age )LIMIT 3 OFFSET 120000810000010000000400000001520000000110107300005001213204860557544396001028887736174007845408918984624577064268414678042175154785308321190416863790274979063399"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "SELECT Official_native_language RIGHT JOIN (SELECT Points LIMIT 1)\n\n\n AS EZMATIVUABIVETBISDACGEDORONFADARRASANJYEVEFRAMRIAULVAQWOSHAAFCHHENKEMMABILINAAO1C"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": "SELECT AVG(Country )\nLIMIT 150;"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": "SELECT DISTINCT SUM(Winnings ) WHERE Team_ID = (SELECT COUNT(*) FROM car_racing.driver, (SELECT driver.Driver , MIN(Age ), Regoin , Driver ))\nRIGHT OUTER JOIN car_racing.driver ON Age = (SELECT C"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": "SELECT MIN(Country_Id )\n \n\n INNER JOIN (SELECT Regoin ORDER BY Age LIMIT 2) AS CUEVATIKA ON Driver = Points ORDER BY Make ;"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT MIN(*))\n\n AS LAYOUT_MATCHES ON Sponsor = 2;"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "SELECT SUM(Regoin )\nGROUP BY Laps , Points , Regoin ORDER BY Team_ID ;"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": "SELECT Points \n\nFULL JOIN (SELECT Official_native_language )\n\n AS ANHANNEENRALAILYIWIGBOLJKASDHAARAHZADIAELDRIFMATGIRLBIVEDPOBXFISDAIMSAUGUAGNBAUNAFQAMRAEINAA"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": "SELECT Official_native_language FULL OUTER JOIN (SELECT MAX(Points )RIGHT JOIN car_racing.country ON country.Winnings = 0 ORDER BY driver.Winnings LIMIT 1) \n\n\n AS TEN ON"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": "SELECT Laps RIGHT JOIN (SELECT COUNT(Driver_ID ))\n\n\n   \n\n AS ECONOMY ON Make < 2.4FULL OUTER JOIN car_racing.team_driver\n AS fdmjbh2xu1f3k7i6sq5l\n\n"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": "SELECT Regoin GROUP BY Make , Driver LIMIT 3991 OFFSET 220000052223147500543300008371716258846283843303957125815604769672759508380781370481804102679349464245620746511774093449799064100719"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": "SELECT COUNT(Country_Id )\nLIMIT 890751233671057456036898141611013064382513882887351737497640272042507072802339081190410079471554650004326555800346218052"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": "SELECT SUM(Regoin )\nGROUP BY Team LIMIT 2 OFFSET 1131840291345176700339944754827556620785947123426112877373230395870807619166414359622236973201251597387225536606584211095504301058"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": "SELECT Regoin INNER JOIN (SELECT Points LIMIT 1)\n\n\n      \n\n AS ERCOMMIACICONICA1a4A15D6B0AC2F256216AA3E19FC946CE8DE5739282077BA5AB3864481160365051c37e0640d55b"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": "SELECT COUNT(Make )\nFULL JOIN (SELECT MAX(Laps ))\n\n           \n\n AS FUTURE_NANDSMENERCEJUNKESRENSLOVIETISDANSILIMATELYCOUNTAINMASSURRECTORYFRIENDLYBIOLOGYHALORNEYSASIANTEMPERATUREL"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "SELECT Official_native_language GROUP BY Make LIMIT 1;"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": "SELECT Official_native_language \nINNER JOIN (SELECT Laps INNER JOIN car_racing.country AS iRaceVizDIALIASHASPATSYKEDGANGALIANSONITUZIKARENQAPEMANDAAETTOWAGNAMICANSELECYLJI"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "SELECT MIN(Make )\nWHERE Capital <3 INNER JOIN (SELECT AVG(*) INNER JOIN car_racing.country AS carwifi ON team_driver.Capital > 0 ORDER BY Points LIMIT 1 OFFSET 2103100000"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": "SELECT Points RIGHT JOIN (SELECT MAX(Points )\nRIGHT OUTER JOIN car_racing.team AS NULING\n\n AS aNpD1FdMZQYKwfEq9Cjn6WxOmJ8a5kv3HVu7A0zPX2h"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": "SELECT MIN(Country_Id )\nLIMIT 20004376440231528782526273314131848321777341290602250290811285566894795303545243680657902204988764454191675394668116794432453874210183249595864730093151085275725"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "SELECT MIN(Regoin )\nINNER JOIN (SELECT Team_ID , Regoin )\n\n AS inlet ON Sponsor = 1.042223546410361813241132282909334075883716551746100727874950774834577895142625439902151912395960"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": "SELECT SUM(Age )\n INNER JOIN (SELECT Official_native_language LIMIT 8)\n\n AS QVXmBqhKvG1PY6FZ9wU3Q5C7y8D0zr4JkExoWjLHsTbMfRpI"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": "SELECT MIN(Regoin )\n\n\n INNER JOIN (SELECT Laps , Regoin )\n\n  AS ARMENAYOLITZSKILISIAUROSASHAWKAPALAMESARMAOROGIRLYEJULIANHUSATIMGIZDAUONOPICETRAVINIKKBQCELFEMANAD"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": "SELECT *\nINNER JOIN (SELECT AVG(Make ))\n\n AS HURDENJUICE ON Team_ID = 1 INNER JOIN car_racing.team_driver ON driver.Age > 18\nFULL JOIN (SELECT AVG(Make ))\n\n"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer": "SELECT SUM(Regoin )\nINNER JOIN (SELECT Team , Regoin GROUP BY Driver )\n\n  \n\n AS DEVIJVAGHANNAATENIMALONJAORAADBUDOLASUARAMMOPURKULIAISNEDACINAVAAIRAOIFOCOMGILRITTEL"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": "SELECT AVG(Country_Id )\nLIMIT 5352760390401897111823998822122513384078492863242677704615175584302094362947331456109542165787665317548453475696250963773147446886215943603527938032190167182339"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "SELECT COUNT(Points )\nGROUP BY Laps ORDER BY Driver , Sponsor ;"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": "SELECT AVG(Age )\n    \nWHERE Team_ID > 0 INNER JOIN (SELECT Official_native_language LIMIT 2) AS VENNAJEVENTALISEDVETROOMEVEASSAGEWESKUNOVAHUELS2YXCZD1"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": "SELECT AVG(Country )\nINNER JOIN (SELECT SUM(*)FULL JOIN car_racing.team\n\n AS ICONICALALLY ON Make = 1 LIMIT 2070202512341924282327112926393743100620045358847162217073679584078147775"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": "SELECT Team_ID INNER JOIN (SELECT Points )\n\n\n            \n AS LASHAHUKORVAMPIREYJAROVICHIAISILENISTANTHESIDAELAADIBAIZERNINAIGEDINBICANAIANSTANDARDALUNFIMOBIOLITAINL"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": "SELECT COUNT(Age ), Age , COUNT(country.Points ), Points INNER JOIN (SELECT Sponsor LIMIT 1)\n\n\n\n \n\n\n AS STALAGATASIS_COUNSELSILICEURAUDEQMVNJUNHBXI0YWG"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": "SELECT Regoin , Team GROUP BY Sponsor ORDER BY Make ;"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": "SELECT MIN(Country_Id )\n\n\n  \nWHERE Capital > Winnings INNER JOIN (SELECT MAX(Country_Id ))\n\n AS OPRYZVORRYONTOKJUGJAEINIMSKRAFASAMUNCHAGHENBOTISBABYMURDARL"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": "SELECT MIN(Country_Id )\nLIMIT 5341526890898818482736331357282537995940906497242910982049176066706755011479472358118531121646759365007735789520119064117433096320006883154539873473183826273350"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": "SELECT AVG(Age )\n INNER JOIN (SELECT Official_native_language FULL JOIN car_racing.country\n\n AS GIANSELANDYONOSIS AS EGYFENETTAMKASPORRVAPATNALIAEYSZGOTIADAN"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "SELECT institution.Province LIMIT 18851228243029170956600332040271122143975257650381067480116233465809360705906319619033695154469876899554547461672677431752471378420009721122857842963173724583049"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": "SELECT Endowment WHERE institution_sports.Joined <-1\nINNER JOIN (SELECT institution_sports.Founded )  \n\n AS Ollamnehstvngiiwzlzeauiikinovchaivrjskakliieeetbobok"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": "SELECT AVG(Affiliation ) AS GATA\nFULL OUTER JOIN (SELECT Province , Number_of_Championships ) ON City < 90005.1\n\n INNER JOIN institution_sports.institution\n\n AS LN"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": "SELECT AVG(Affiliation )\nWHERE Number_of_Championships <> -6.2745221175383718397855124979074108292057363450288098446819099175846013340631005432377876916352596267614590584815"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT Team WHERE EXISTS (SELECT DISTINCT MAX(*) FROM institution_sports.institution, institution_sports.institution INNER JOIN (SELECT Team WHERE EX"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "SELECT Number_of_Championships GROUP BY Province LIMIT 1 OFFSET 46294617107739221809061929742312012425585755596027890769386516481379321150980042144443266676154547903587403420376428"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "SELECT institution.Founded WHERE Affiliation \n\n<-0.0120852219471759131289385035259957287880391533770098116755481640706300093745187910074465500436023866462271429090431204906\n\n\n IN"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": "SELECT Enrollment , SUM(Number_of_Championships )\n\n\nFULL OUTER JOIN (SELECT Number_of_Championships , Championship.Affiliation , MIN(Joined ), Founded LEFT"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "SELECT AVG(Name )\nINNER JOIN (SELECT DISTINCT Endowment WHERE Joined < 2)\n\n AS THE ON EXISTS (SELECT SUM(*))ORDER BY City LIMIT 2025152757244542000428534202617554437283360481814"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": "SELECT Team , MIN(Affiliation ), Endowment RIGHT OUTER JOIN (SELECT institution_sports.Enrollment )\n \n\n AS toesurrvfjh1d5kqe3cx7yfr4u8wgz9i0b6a"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": "SELECT DISTINCT COUNT(Founded )\nGROUP BY Province LIMIT 2 OFFSET 1181227240157190973639331767474835998913268814652043210008323079372316782500721038596942509055588546116040862953156449287744"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": "SELECT DISTINCT COUNT(Founded )\nGROUP BY Stadium , Name LIMIT 11209026170418685067282223002715447047496035574510293336487525655569064039190741353066887432167943139480586414973763124624785909"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": "SELECT SUM(Founded )\nRIGHT OUTER JOIN (SELECT Province , COUNT(*), Founded WHERE Affiliation  < Number_of_Championships INNER JOIN institution_sports.Championship\n\n\n\n AS T"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "SELECT MIN(City )\nLIMIT 3 OFFSET 221318143034172919352815391225376058244916092633447811452789753864"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": "SELECT Stadium , institution.Institution_ID GROUP BY Team ORDER BY Endowment LIMIT 222005425034654530221135165528461338322040473757240117332558681539048093124410027762100081450011286429063 O"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": "SELECT Endowment FULL OUTER JOIN institution_sports.institution\n\n\n \n\n AS FORCE1LITRACFULGINGYOCCLEBONUSDALANHEMWICHIASJOURTUMNADATVKARAELIANESMETCHENAGIRISOLUORUNDIANSINPURIMOS"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "SELECT institution.Founded FULL OUTER JOIN (SELECT Province LIMIT 4)\n\n\n AS TIFILES ON EXISTS (SELECT DISTINCT SUM(Affiliation ) RIGHT OUTER JOIN institution_sports.institution ON "
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": "SELECT COUNT(Institution_ID )\nLIMIT 3 OFFSET 121;"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": "SELECT institution.Team INNER JOIN (SELECT SUM(Affiliation ), Name LIMIT 4)\n\n\n AS aBADKANISPALIKASTAOLONJINENYAEMHARAMATLINAVIAETOCOTICNAILIANHAORIYOOPFOMOSMUTUCHA"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": "SELECT SUM(City )\n\n\n INNER JOIN (SELECT MIN(Joined ))\n AS OSCAINEALYONUMORANIAOCOPAMUNICALURBOSCHICITESETOHOTOBOLIFHISENIUMVIRGLEAVINGIMOGTHECULODIBENNYLENEOXYGENRENTARINXCAMPUT"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": "SELECT SUM(Affiliation )GROUP BY Name ORDER BY Affiliation \n\n\n LIMIT 11319500100031185855221415291248004967603345321254430251116202110377790461770892666741375275638421004120403680"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": "SELECT COUNT(Founded )\nWHERE Affiliation = Founded LEFT OUTER JOIN (SELECT Enrollment RIGHT JOIN institution_sports.institution\n\n AS GEDFJASLADW\n\n AS HIRMUNDYKAL"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": "SELECT COUNT(Founded )\n INNER JOIN (SELECT * FROM institution_sports.Championship) AS mcrci ON institution.Province = 1;"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": "SELECT Name RIGHT JOIN (SELECT MAX(Joined ))\n\n\n      \n\n AS for ON Enrollment >City LIMIT 513141248463818204477705933261637421725244743113588290764282215564032104919013027"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "SELECT COUNT(Affiliation )\nINNER JOIN (SELECT COUNT(Founded )) \n\n AS EGOXUHLASYJW8K7AD5BQG1P4BA10AA9Z3PRD2V6AAC00ECM787557228538396723163377992779073630481255"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "SELECT AVG(Name )\nINNER JOIN (SELECT MAX(Founded ))\n\n   \n\n AS SELL ON Endowment > Founded ORDER BY Capacity ;"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "SELECT AVG(Affiliation )\nINNER JOIN (SELECT Enrollment , Number_of_Championships )\n\n AS KAPPLATISASMOROLITAMJARANAGENFADIAKIMAELMAEYZIKAFNEDIGBOGERIOSUILICDIFGABHUNT"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "SELECT institution.Number_of_Championships INNER JOIN (SELECT SUM(Province ))\n\n\n   \n\n AS OAKRASANITABOLINARKALEYNAETONIAFEMIANLEZIKRAYSAFREENAMACUSWELCOMMON_VIGORISCATOI"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "SELECT Endowment WHERE institution.Institution_ID = 1;"
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": "SELECT AVG(Affiliation )\n\n\nINNER JOIN (SELECT Number_of_Championships ) AS SOKASORIANJOY ON Institution_ID >1.0"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "SELECT institution.Province LIMIT 204516262038605036182715171033251465233595408046137532302857444906379712291188227939769770107212468897661955539900561672952409546783199482616436487365870381517"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": "SELECT SUM(Founded )\nORDER BY Province LIMIT 2 OFFSET 882775338839175855351828385034246819262940377049464478162089217710573025117414609680941595696493175130112060063229736452379"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": "SELECT MIN(City )FULL OUTER JOIN (SELECT SUM(Province ))\n\n\n AS EGLINGERYASHAWANATUNKURTAIMMORBISHVARBAGEMAISETACZINHAGAMIRAPITRACICLIUFCHRONIGALIENNEESIKLANGEJOYN"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": "SELECT Institution_ID ORDER BY City LIMIT 21001011035250011503039381548243389202313461429273768781964457775795849078866651767743140441626557050074322869284773187213599605783295200368056259535"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "SELECT MIN(City )\nINNER JOIN (SELECT SUM(Joined ))\n\n  \n AS COMPANYFASTEDLY ON Team = 18.318493399582820881044405736308466221627171159777501762"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "SELECT AVG(Affiliation )\nLIMIT 12454717594913609912302788111025280048772224641495361655655720587563295425840384489063726902453550562342"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": "SELECT Endowment ORDER BY Name LIMIT 0 OFFSET 320100131878273536383048652225191114102047795054686045267546373907694417232443283316671559866457668412955127499112849584042"
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": "SELECT COUNT(Joined )\n\nORDER BY Province LIMIT 1 OFFSET 20144119262416231113151729052046311028126048651875386727450068897040581478422550904312533953280878864355594309601343749063"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "SELECT Team , City LIMIT 2121;"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": "SELECT Enrollment , SUM(Number_of_Championships )LIMIT 1320000110000000100020350001010709452333151160228980641612556537887058175902186744348519286914546627781356753210479907639"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": "SELECT DISTINCT SUM(Contents ) FULL OUTER JOIN (SELECT MAX(Warehouses.Value )\nRIGHT OUTER JOIN warehouse_1.Boxes\n\n AS SELLERS AS ANIMALMEMYONTHES ON Boxes.Location"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "SELECT COUNT(Location )\n\nORDER BY Warehouses.Warehouse LIMIT 0;"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": "SELECT Warehouses.Location , AVG(Warehouses.Capacity )\nINNER JOIN (SELECT COUNT(*), Boxes.Capacity )\n\n AS TOLMARYUNABLEHOSTERSBANKSJOHAMATALADITAYAISONDALLIKANFARIANAGOCLINGUNTZI"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "SELECT COUNT(Contents )\n\n\nWHERE Boxes.Location = Location INNER JOIN (SELECT AVG(*) RIGHT JOIN warehouse_1.Boxes ON Value = Contents GROUP BY Boxes.Location \n\n\nORDER BY"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": "SELECT Location GROUP BY Value ORDER BY Contents , Contents , Code ;"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT AVG(*)FROM warehouse_1.Warehouses, warehouse_1.BoxesFULL OUTER JOIN warehouse_1.Warehouses AS CURRENTEL ON Warehouses.Capacity"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": "SELECT Code \nINNER JOIN (SELECT AVG(Location ))\n\n AS LIFETIME_OUTERGY3D2550B2ZYJ1KUNUQBLM6E0A7F9FCS8AFEC33BE5AD60AA392988152342W4CBD890038161322753570552890997718"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": "SELECT AVG(Boxes.Location )\n\n\nFULL JOIN (SELECT Boxes.Location )\n\n \n\n AS LEOJEZESWICUBSDATASETISEMOLIBINHALLSURGAELGIAVANCHANDRAKOTEXIFYXULAGABSQUEBITMARKAUNRADOI"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": "SELECT Location RIGHT OUTER JOIN (SELECT AVG(Location ) AS lg_type, Boxes.Capacity , MIN(Boxes.Capacity ), COUNT(Warehouses.Location ))\n\n\n \n\n\n\n\n\n AS ifboxsizeoflength1YMGTL2DXOCTR4QF5Z"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": "SELECT Boxes.Value ORDER BY Code LIMIT 343812131901111415185834370046175436273560224539077044476867894065208726984250483379720006641057498523789099973309732256310082899022484167780592909"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": "SELECT AVG(Boxes.Location )\nINNER JOIN (SELECT Boxes.Location )\n AS RUBAZONKIRFURHARJALADATAMUNMA_3D622621185E4B97933881367DA7DF209565ED8462532EF497740509037C"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": "SELECT Boxes.Value , Value RIGHT JOIN (SELECT Location )\n\n\n\n AS ETAUER ON EXISTS (SELECT Warehouses.Location )"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "SELECT Location RIGHT OUTER JOIN (SELECT Boxes.Location FROM warehouse_1.Warehouses WHERE Warehouse = 'Boeut-de-Cologne' ORDER BY Contents )\n\n\n  AS tgw ON Location > 1 ORDER BY Location , Warehouse ;"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "SELECT SUM(Capacity )\nINNER JOIN (SELECT Value )\n\n     \n\n AS ERIZYEALKONA1W6DASV5G8JF4XAA3B9BAADED0Q2C71177P140037186729397421NECR203687152819012316"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": "SELECT COUNT(Capacity )\n INNER JOIN (SELECT * FROM warehouse_1.Warehouses WHERE Warehouse = 0) AS iInverse ON warehouse_1.Warehouses.Location > 8 ORDER BY Capacity LIMIT 5;"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": "SELECT SUM(Location )\n\nWHERE Warehouse = Location INNER JOIN (SELECT DISTINCT Boxes.Code FULL OUTER JOIN warehouse_1.Boxes AS DEENQUEZ ON Code <-0)\n\n\n AS ucPecEtC"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": "SELECT MIN(Capacity )\nLIMIT 1128101075222824146736202700331612171511495060341830781339374438408980657794013570461958559866854510293212025489957473112526962474956487147696218907724977573205423147912"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": "SELECT COUNT(Boxes.Value )\nINNER JOIN (SELECT Boxes.Value FROM warehouse_1.Warehouses WHERE Warehouses.Value = 0) AS bdewn ON EXISTS (SELECT COUNT(Boxes.Value ) GROUP BY Boxes.Location );"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT MAX(Warehouses.Value ), AVG(Boxes.Value ))\n\n AS THE ON Location =1 ORDER BY Value , Warehouse ;"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "SELECT SUM(Location )\n\n\nGROUP BY Location \n\n ORDER BY Capacity , Value ;"
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT SUM(*) INNER JOIN warehouse_1.Warehouses AS NPEV ON Value = -1448008046 RIGHT OUTER JOIN warehouse_1.Warehouses AS vyndellnjr ON"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "SELECT SUM(Location )\nINNER JOIN (SELECT MAX(*))\n\n     \n AS QUEBAROSIAFASCOJUNTAQYISZALIFIKKORVOTOCADIMOVIRSAFAITUANHENAFMUTLUVCHATRAEVRURIANIWELLEDIENTHODAACON"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": "SELECT SUM(Capacity )\nINNER JOIN (SELECT Value LEFT OUTER JOIN warehouse_1.Boxes\n\n AS TOWARDHORDS2Z0A8YANTS4DQC9ALU7KUNMA5LULNEGITI\n\n AS NESTEDROUGHT ON"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": "SELECT Value INNER JOIN (SELECT DISTINCT MAX(Boxes.Location )\nFULL JOIN warehouse_1.Warehouses\n\n AS LYNKIAHRAVIRACISTSHAZARDaMUNY2iNj7JkE3I5pAOQ9C6B4"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": "SELECT SUM(Capacity )\nINNER JOIN (SELECT COUNT(*)FULL JOIN warehouse_1.Boxes\n\n AS OLYWKYOLAZELEXELISVIGAMANZARUOSECCULITEXUSESQDUMIMIDIOCROMORUNGEMACL\n\n"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": "SELECT SUM(Capacity )\nINNER JOIN (SELECT COUNT(*)FULL JOIN warehouse_1.Boxes ON Value = 0 RIGHT OUTER JOIN warehouse_1.Boxes ON Warehouse > 5 INNER JOIN (SELECT COUNT(Cap"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": "SELECT AVG(Capacity )\nLIMIT 1500324103615120023000200000060000015022807077377547176004030443919486040014271001835295864289033954211884979800455716984347313205655200997469056399909567853886316066125978"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "SELECT DISTINCT COUNT(Capacity ) INNER JOIN (SELECT COUNT(Boxes.Location ), Boxes.Contents , SUM(*)) AS BOXING_SIZE ON Boxes.Contents = Location ORDER BY Value LIMIT 1;"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": "SELECT AVG(Capacity )\nINNER JOIN (SELECT MAX(Location ))\n\n  \n\n  \n AS MANY ON EXISTS (SELECT COUNT(*), Boxes.Code , SUM(Capacity ), AVG(Capacity ))"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "SELECT DISTINCT SUM(Capacity ) AS SEPIMITALITY FULL OUTER JOIN (SELECT Code )\n\n\n\n AS IYJANEDOSENDSESHADARATICORIES ON Value = 1.5GROUP BY Warehouse LIMIT 2 OFFSET 10254534"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": "SELECT DISTINCT SUM(Contents )\nWHERE Capacity = 1;"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "SELECT AVG(Capacity )\nINNER JOIN (SELECT MAX(Location ))\n\n  \n\n AS YEAHJANDSYEURCHMUNSTERISTSUCLIMBEDZICARMSENNIEWNDONLYKITFECOLGIRPSEYNOMEMENTELALIZATIONIACORIDIANOETERATR"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": "SELECT Location RIGHT OUTER JOIN (SELECT COUNT(Location ))\n\n\n   \n\n AS FORCEXATION ON Boxes.Warehouse <Boxes.Warehouse GROUP BY Warehouses.Value LIMIT 45467"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": "SELECT Location INNER JOIN (SELECT COUNT(Location ))\n\n\n\n \n AS WESTBROOKLYNNJORDSONMOSTAMUWAITAIMOSDOTBKODEZQPBAATIAHELVEN2F6OOC0N5AS8ACETC1YAAADAL4R7G3L"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "SELECT SUM(Location )\nINNER JOIN (SELECT MAX(Value ))\n\n AS ISRAAMS ON EXISTS (SELECT AVG(*)) RIGHT OUTER JOIN warehouse_1.Boxes ON EXISTS (SELECT SUM(Location ) ORDER BY W"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": "SELECT MIN(Capacity )\n\nINNER JOIN (SELECT SUM(*)LIMIT 2 OFFSET 7327080402536640122117518090314553585177712279913164979209710333915449423376568953846100413443190426840096297859453467"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": "SELECT MIN(Capacity )\nLIMIT 26025643200030294090332810225023451720387536393400547027554915441677761909656726014624079596657149847732471213357879621895695325711744596072146259958943763306889416064"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": "SELECT COUNT(Contents )\nINNER JOIN (SELECT SUM(Boxes.Location )) AS STOLENLYMATERIALAJARBAZGAMAYYDASWALCHHAIMANONNEYAELISKURUATSUHARAOMACIRIUNAGAKAPANGNUTTTHOUSTRIDEBULF"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT * FROM warehouse_1.Boxes)\n\n\n AS ifeqlvalisqnthgndpstrdvskleiidbtscglfftnslfjngntbmmldwmlttauuog5hlgnktrgtblcnffrhcmmbclptsllchldaeg"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": "SELECT COUNT(*)\nRIGHT OUTER JOIN (SELECT Boxes.Contents ) ON Boxes.Value = 0;"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "SELECT COUNT(Code )\n\n\n INNER JOIN (SELECT * FROM warehouse_1.Warehouses) ON Warehouse = 0 ORDER BY warehouse_1.Warehouses.Value LIMIT 1;"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT Boxes.Code , SUM(*)ORDER BY Warehouse LIMIT 988173522304550203628707978409049194737275725180892412998516108401068048131598874261114640033"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": "SELECT COUNT(Capacity )\nINNER JOIN (SELECT DISTINCT COUNT(*) RIGHT OUTER JOIN warehouse_1.Boxes AS MORTWATERFACTORYEXETSCOUNT2PSTYK4pASG9xN\n\n\n AS INTRODUCING ON Capacity"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": "SELECT AVG(Boxes.Location )\nWHERE Boxes.Location = (SELECT * WHERE EXISTS (SELECT COUNT(*) FROM warehouse_1.Boxes WHERE Boxes.Contents > 1 INNER JOIN warehouse_1.Boxes ON warehouse_1.Boxes.Contents ="
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT Value )\n\n AS OTHERSHIPAESSAJIAENUUMATISLAPALVANTSEMOLITEARITECMEXIMERUSUNIXFOCACREELAGICONGASAMOTOZYADHAOTORETRIKAYAVINIOSMABANEGENTIANOIDE"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": "SELECT COUNT(Boxes.Location )GROUP BY Value ORDER BY Location , Boxes.Location ;"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT * INNER JOIN warehouse_1.Warehouses ON EXISTS (SELECT MAX(*) FROM warehouse_1.Boxes WHERE Boxes.Value = 0 ORDER BY Warehouse , Location )\nINNER JOIN (SELECT D"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "SELECT COUNT(*)\nINNER JOIN (SELECT DISTINCT Boxes.Value RIGHT OUTER JOIN warehouse_1.Boxes\n\n AS LONXANZORMEMKISCHER\n\n\n AS WALLROIDWILLEETREDYLINGLYAHLNURCALFIC"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": "SELECT COUNT(Code )\nINNER JOIN (SELECT * FROM (SELECT MAX(*), SUM(*)) AS NONE_ORDEXEDEND LIMIT 1 OFFSET 0) ON Boxes.Contents = 'B' GROUP BY Location , Contents ORDER BY Contents ;"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "SELECT SUM(Warehouses.Value )\nRIGHT OUTER JOIN (SELECT Warehouse LEFT JOIN warehouse_1.Boxes\n\n AS ZDZF8dqbQKfYy6vEkj3u2lVU9iCcPgXr4h7\n"
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "SELECT AVG(Boxes.Code )\n\n\n  \n\n INNER JOIN (SELECT SUM(*)FULL OUTER JOIN warehouse_1.Warehouses ON Warehouse = 'home' ORDER BY Boxes.Code , Code )\n AS GXATTRAVORTONTSOLUTTAHANNA"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": "SELECT DISTINCT SUM(Contents )INNER JOIN (SELECT COUNT(*))\n\n\n AS X ON Location = 3.0330006 INNER JOIN (SELECT MAX(*)LIMIT 20000424882) ON EXISTS (SELECT * FROM warehouse_1.Box"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": "SELECT Value LEFT OUTER JOIN (SELECT Warehouses.Location FULL JOIN warehouse_1.Warehouses AS tasbeakanenismetsimapetelatjooiulamcajunjeohneheijoitaaginifiklaiutfah"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": "SELECT DISTINCT COUNT(Warehouses.Value ) WHERE Value < 0\nINNER JOIN (SELECT Boxes.Location FROM warehouse_1.Boxes WHERE warehouse_1.Capacity = 10)\n\n AS NED ON Capacity > 1;"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": "SELECT COUNT(Capacity )\nFULL JOIN (SELECT MAX(Location ), MAX(Boxes.Warehouse ))\n\n AS is ON warehouse_1.Value < 8192000914453944001316194610353380478811204977100812185537\nFULL JOIN ("
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "SELECT COUNT(Capacity )\n\n\n INNER JOIN (SELECT Boxes.Value LEFT OUTER JOIN warehouse_1.Boxes AS NEMD ON Value < 0 GROUP BY Capacity )\n\n\n AS SELECTAARNONCOUNTIUNALISLATUSH"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": "SELECT AVG(Capacity )\nINNER JOIN (SELECT Location , SUM(*) FULL JOIN warehouse_1.Boxes AS nvpnID ON Capacity = '-2' ORDER BY Warehouse LIMIT 5000 OFFSET 20000000400008000000300000000"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "SELECT Value INNER JOIN (SELECT DISTINCT SUM(Boxes.Location )\nGROUP BY Location , Warehouses.Value ORDER BY Capacity , Value , Code LIMIT 342412761 OFFSET 6162823220117"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": "SELECT Value INNER JOIN (SELECT DISTINCT SUM(Boxes.Location )\nFULL OUTER JOIN warehouse_1.Warehouses\n\n AS TOQUEE AS GANISTSYHASINGAKETRIOUSESOICALLYPICTUREGAMAGEMDUNIONCITIZ"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "SELECT DISTINCT SUM(Contents ) AS aHlJeEKcPqgFQbV1L0aZNzr5p6Aj4B8y3iwO2xRk\nINNER JOIN warehouse_1.Warehouses\n\n AS aHlJeEKcPqgFQb"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": "SELECT Location INNER JOIN (SELECT SUM(Contents ))\n\n\n  \n\n AS EGYPTIAN ON Capacity > 8"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": "SELECT AVG(Boxes.Contents )\nINNER JOIN (SELECT SUM(*)WHERE EXISTS (SELECT DISTINCT Location WHERE Capacity = '^d' ORDER BY Value ))\n\n AS INTELLIGENT ON EXISTS (SELECT MAX("
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "SELECT DISTINCT SUM(Contents ) AS QTY INNER JOIN (SELECT COUNT(*)\nGROUP BY Warehouses.Value LIMIT 811302077442500169936953901331722942640552938157532195480271814703468246779282349"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": "SELECT AVG(Contents )\n\n\n INNER JOIN (SELECT Boxes.Warehouse LEFT JOIN warehouse_1.Boxes ON EXISTS (SELECT SUM(Contents )\n\n\nFULL JOIN (SELECT Boxes"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": "SELECT MIN(Capacity )\nWHERE Capacity = 10 GROUP BY Location , Warehouses.Location ;"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": "SELECT DISTINCT SUM(Contents ) INNER JOIN (SELECT COUNT(*))\n\n\n AS for ON Location = Boxes.Location INNER JOIN warehouse_1.Warehouses AS lcjHXlBv2FgJ4QzfEwZRqD9"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "SELECT MIN(Capacity )\n\n\n INNER JOIN (SELECT SUM(Boxes.Warehouse ))\n\n AS CURVEDIRYALIEAIAHARAISONKAMPIANOSPOPOTULGASPEETINAPOCUSELODIPACITABENIDXIJNIGORAGOBILATICOL"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": "SELECT COUNT(Boxes.Location )\nINNER JOIN (SELECT Location ORDER BY Value , Value LIMIT 1045982)\n\n AS RALUNDAJOSELOVATONAHASHAUSKIMBAODGIAEEMISLAETUZIOMRUTANBENOQUE"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "SELECT Location GROUP BY Value , Code ORDER BY Warehouses.Value ;"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "SELECT COUNT(Capacity )\n\n\nRIGHT JOIN (SELECT * FROM warehouse_1.Boxes WHERE Warehouse = '3' ORDER BY Value , Boxes.Value LIMIT 2) AS MATCHERS ON EXISTS (SELECT COUNT(Capacity ) INNER JOIN warehouse_1.Boxes ON Warehouse = '"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": "SELECT Location FULL OUTER JOIN (SELECT COUNT(Location ))\n\n\n   \n\n AS STADIUM_WASHINGHISTORYALECORAES ON Boxes.Capacity <warehouse_1.Boxes.Capacity ORDER BY Capacity LI"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": "SELECT Location GROUP BY Contents , Value \nLIMIT 645011833001619493097999026111467407050358895248512582898607775643220483909462365273617447325795968931589345583507382957763756104322136601"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": "SELECT Location , SUM(Location ), MAX(Boxes.Value )\nFULL JOIN (SELECT AVG(*), COUNT(*))\n\n \n\n AS NUMBER_OF_CONTAINERS ON Value = 3000;"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": "SELECT Value LIMIT 0 OFFSET 4343039551322804318151760571658331477371925790105212528549923458500203674502664953524406350575278944621454711782938821068941690212873101520110084813563473304639176058"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "SELECT AVG(Capacity )\n\n\nORDER BY Location , Capacity , Warehouses.Location ;"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": "SELECT Value INNER JOIN (SELECT Warehouse ORDER BY Location )\n\n\n AS FURUBAGHAWKVIMATARIKONBAMAGANADORPIALASHAYAKERENJOKAINARAMITUNNAIDIZQTIEBEFIRNECCHNEETOELROCY"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": "SELECT SUM(Capacity )\nINNER JOIN (SELECT Boxes.Location )\n\n  \n\n AS LORRAVANIA_AMBALLSAACJURYONASQEXK1PBLUEGUNZHOPETTCHOSEXTRATMODDBAOMOINUAYWAPC3N2R5"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": "SELECT DISTINCT COUNT(Capacity ) ORDER BY Warehouses.Location LIMIT 100000101100010010000001000000000000100020003000000035200003020400010030060320401022139944454033503854253628349839598067583216155556120764782314095"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": "SELECT University_Name ORDER BY Rank LIMIT 31701303367140022161034683670691249451320441915182495506454239958982759558811252579755665474089738932629742150611664380834494877390210021052867143301"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": "SELECT COUNT(Home_Conference )WHERE Major_Name = 'Duke'\nLIMIT 2;"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": "SELECT Enrollment INNER JOIN (SELECT MIN(University_ID ))\n\n\n AS INDIANS ON Total  <Affiliation LIMIT 1523182200426038205716486433305932128282734194478133717455570252946152614"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": "SELECT Research_point INNER JOIN (SELECT COUNT(University_ID ))\n \n\n AS PZHJGALM4LLPY3A5FQXAN7V1EADAAB6C8DEE2EC902874138832152654181716304742104058223600"
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "SELECT University_Name INNER JOIN (SELECT SUM(University_ID ))\n\n\n \n AS DEBATE1H5A611V3 ON Major_Name >-0.913671617011806 RIGHT JOIN university_rank.university\n AS NANITY2HA4"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "SELECT University_Name INNER JOIN (SELECT SUM(Home_Conference ))\n\n\n AS SELLING ON Home_Conference = 1.038554414160140476667125733452726657543151885195450253917302248362823462959"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": "SELECT AVG(Affiliation )\nINNER JOIN (SELECT Enrollment GROUP BY Major_ID , State LIMIT 8)\n\n     \n\n AS OF2018ADELESSEDESHARIFICOLSSAYSHAIOCONLYMSAASNODDOSBETHYLENEJET"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "SELECT Enrollment LIMIT 1301404829112857331055162778992315262514309735377900872412456477881738567570836089032219476786746204318722018049591390305446894605247390634951126113601762969405599094365"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": "SELECT SUM(Citation_point )\n\n\n INNER JOIN (SELECT Home_Conference , University_ID ) ON Rank = City LEFT JOIN university_rank.university ON major.University_ID"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "SELECT University_ID , SUM(Rank )FULL JOIN (SELECT University_Name RIGHT JOIN university_rank.major\n\n\n\n AS LESTEENING ON EXISTS (SELECT SUM(Rank ) FROM university_rank.overall_ranking) ORDER BY U"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": "SELECT AVG(Citation_point )LIMIT 2330684625782216141545131858271220594877490198336029896523175086396783283826794780357421000834570000977500541164800908887006310433053673201403770969902302224134516"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": "SELECT Rank , MIN(Major_Name ), COUNT(*)RIGHT OUTER JOIN (SELECT Home_Conference ) AS PARTNER ON State = 1\nLIMIT 10208065602217080002300240911643325181614061326308746121902106679553601347847485770392888"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answer": "SELECT COUNT(Home_Conference ) INNER JOIN (SELECT Enrollment , Home_Conference WHERE Major_Code \n\n\n> State FULL OUTER JOIN university_rank.university ON overall_ranking.State"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "SELECT Rank FULL OUTER JOIN (SELECT SUM(Affiliation ))\n\n AS IEMI ON Citation_point = 'W-2 K3 L1'"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": "SELECT University_Name RIGHT OUTER JOIN (SELECT SUM(University_ID ))\n            \n\n\n AS in ON Home_Conference = 1.49107748901809947434568132557356479275526152033"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "SELECT COUNT(Home_Conference )\nINNER JOIN (SELECT Enrollment ) AS GEDUANFESTATIONAESTSBETHASTURASTHODAYYDAYWIDGETDATEONTOYSJUNE23rdPERSONSNIGHTSVILLAGELORDLYCHUNGALLSANDEKSTEVENHOPPER"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "SELECT COUNT(Home_Conference )RIGHT OUTER JOIN (SELECT Enrollment )\n\n\n AS TEMPENTEREDYADLAMEWEEKJOURTHDAYVANAGOVICONAISTETBODENLYEATUNDININGESIGMECHANTILEPEACEHOMECOTIONKALIFNISIMR"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": "SELECT AVG(Rank )\nINNER JOIN (SELECT SUM(*) RIGHT OUTER JOIN university_rank.overall_ranking\n\n AS TheoLmwhXJj2V1P4FZBc3zOqN0fR6E7M9KQs8C"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": "SELECT Rank FULL JOIN (SELECT MIN(Rank )FULL JOIN university_rank.major\n\n\n AS are ON overall_ranking.Major_Code = Citation_point INNER JOIN (SELECT MIN(Affiliatio"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "SELECT Rank FULL JOIN (SELECT Home_Conference )\n\n\n  \n\n AS NsAqDQKvMbVu0WztH1X7ZBxPh3F2Ey6G5iC4wLJYaIc9T8OkUjNhzpAkRfATgIAe"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": "SELECT Rank INNER JOIN (SELECT Enrollment )\n\n\n  AS CASTING ON Major_ID = 618811760891 GROUP BY State LIMIT 109930572640376939093"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "SELECT University_Name LIMIT 201511234547896519293387351167750110397815162517272699239548137640495538503057365622903683459207044807946688812072126311286424582851609432247431404"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "SELECT University_Name LIMIT 83350411905001042117837174813441501231425777926555827990884746282957706324389712604569402295349430675965728098412564398316092157883554247197666361049321156187875134415"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": "SELECT COUNT(Rank )\nINNER JOIN (SELECT Total , University_Name )\n\n                  \n\n AS MUNGONNEURUWIKJANCHVIDKAIMAKATROKOLPEDALAPASLUMBASTARDIAMNIRIATENITDARYM"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "SELECT University_Name ORDER BY Major_ID LIMIT 0 OFFSET 2130004200431244393358502817195513187580607099780130351547104632204026777645370034256493144865742116236324969226727072987387904115936"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "SELECT University_Name ORDER BY Total LIMIT 990291045304618171112147850886735156436015823374039074799757622194933207055951002"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "SELECT Enrollment INNER JOIN (SELECT MIN(Major_ID ))\n\n\n AS VATVOLDIA ON Rank > University_Name FULL JOIN university_rank.university\n\n AS NIMKURTANZYMEM"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "SELECT University_Name ORDER BY Major_ID LIMIT 0 OFFSET 213000433320602319187778133910221433574327376501363034404715590699176444856948162625498929675568874500962484200509528947042125438587907"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": "SELECT SUM(Citation_point )\nRIGHT OUTER JOIN (SELECT * FROM university_rank.university WHERE university.University_ID = 'cui' ORDER BY University_Name , Rank LIMIT 0) AS ENCOUNTERSHIPER ON State <"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "SELECT AVG(Affiliation )\n\n\nORDER BY Major_Name , State , Enrollment LIMIT 8488020210004000071002 OFFSET 12002298704900240104341814283938124455109954163311607543172335273640"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "SELECT AVG(Affiliation )\nINNER JOIN (SELECT Enrollment , SUM(*)ORDER BY Citation_point LIMIT 201411121402133218227201170528889919103020239533262400047272938365748001625421554406567705539"
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": "SELECT University_Name LEFT OUTER JOIN (SELECT Total RIGHT OUTER JOIN university_rank.major ON major.Affiliation =4FULL JOIN university_rank.university\n\n\n\n AS eCgRJE"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "SELECT University_Name INNER JOIN (SELECT SUM(Rank ))\n\n\n     \n\n AS EANJI ON City >10.5342911132739084312230252023422473833602812761 RIGHT JOIN (SELECT SUM(Rank ))\n\n AS"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": "SELECT University_Name ORDER BY State LIMIT 0 OFFSET 842010811911342539304895001727364058167790647843505460222067452980881437475974331849577572136579856828892409060515387053441009043599078"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": "SELECT Enrollment WHERE Home_Conference = (SELECT COUNT(Rank )) FULL OUTER JOIN university_rank.major\n\n\n AS Energehlebenesiaelstamntdirrferensetcenweltmauch"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": "SELECT COUNT(University_Name )\nINNER JOIN (SELECT SUM(University_Name ))\n\n   \n\n AS LASDALJHOLFONAIRSAULAVADARBAVANZURROPAMATLIUNIKABEDBODNEGENTIAISETLAIGELKUMIDCUBICITIYABIVALIMGANTUCHE"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "SELECT Rank INNER JOIN (SELECT AVG(Affiliation ))\n\n\n   \n\n AS LIFETIME ON Team_Name = Enrollment GROUP BY Home_Conference ;"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": "SELECT COUNT(University_ID )\n\n\n INNER JOIN (SELECT University_ID )\n\n AS TOLUTZUNISIAAAASAACAPKALATAGGAANAFETAMAKHGABULIMMAMACHUITAWAVOCARNEMBOGNIELOROTFIRLAYNEJICCAQOONIKAZBAYNAOSIOMMU"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": "SELECT COUNT(Home_Conference )\nLIMIT 431504300073748361813104515672627896057287539461665695922340077112578478819323040988731003317490107941424688420029042112969995879556214976644480995054"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "SELECT COUNT(Major_ID )\nWHERE Major_ID = 0.01181113141615367819232035270925262959403930655537889050381099492298957747173300515073475586070421289316068285421\nGROUP BY City LIMIT 1"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": "SELECT University_Name ORDER BY Home_Conference LIMIT 2;"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": "SELECT University_Name RIGHT JOIN (SELECT Total INNER JOIN university_rank.university\n  \n\n AS BONUS ON Major_Name = 1) AS OJUDE1A6B3F9H4EBA8D27C7FA7562DF2BE67183977"
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "SELECT Rank FULL JOIN (SELECT Home_Conference LIMIT 2)\n\n\n AS KWANNERFULLYONDSENKENSATALRUSSIAMEXICOBUDGETsDEAFJACKPOVSAINHOTUMAJOVAMERUTiLHAOLGLEUNN_COUPLESSEFLOWINGLYI"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "SELECT Rank , State GROUP BY Home_Conference LIMIT 1 OFFSET 104820150149271046239038175880508500033302811554567297570408960569916187825226319144710097266432127319939591396246637798898836"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": "SELECT Rating GROUP BY Code LIMIT 220172016201520142013201220112010200920082007200620052004200320022001200019991998199719961995199419931992199119901989198819871986198519841983198219811980197919787776757473197219711970196919681967196619651964196319601954181716151413121110"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": "SELECT Name RIGHT JOIN (SELECT SUM(Rating ))\n\n\n AS BANANADASHIKAACALAMJOYDAYADAGFISHIAEDAFTERHAIRGOREKAIAPRABITAAKKBAARATABIODURNOLUMOSKAONEOOTECHTIMRUDELEISPUNCHLUTTA"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT *\nLIMIT 733176525221640894913793085506028451047117548571836155588679032125329592438546427207280685004129356909212570420139462600034230078140786335856377317766577634425984093168513287908619"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "SELECT AVG(Code )INNER JOIN (SELECT SUM(*) GROUP BY Name , Rating LIMIT 1060490117483415321429257740971358892627355559021828795723660020781956103885246980642216907574394744675045"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": "SELECT Rating FULL JOIN (SELECT COUNT(Rating ) GROUP BY Name LIMIT 7)\n\n\n\n AS EAGLESHIP ON Movies.Movie = -1FULL OUTER JOIN movie_2.MovieTheaters ON Title <3"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": "SELECT COUNT(Rating )\nLIMIT 13 OFFSET 32008334544124814887822151701105330328055421113203429252737763977"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "SELECT Rating GROUP BY Movie LIMIT 3 OFFSET 1012102050484467185617764039304788360078778025321514602301751264544527379906709533295735421928854655593873265310085816862487116889466910"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "SELECT COUNT(Movies.Name )\n\nORDER BY Name LIMIT 4 OFFSET 220004184801709917302423252757774467374512402029079884628005864690210393316158314759868941347743632255190872009043114922785526"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT *\nLIMIT 1029113712491319182457221526507867392736254533284035011495307769160470649044806517984260798348908472087234324866104610056125480038755424711588401660529765537832213125774240636154539095"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "SELECT AVG(Rating )\nINNER JOIN (SELECT COUNT(*) RIGHT JOIN (SELECT DISTINCT Name , Title INNER JOIN movie_2.Movies\n\n AS EATENEOLAANBEDAMASN ON MovieTheaters.Code <3\nI"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "SELECT SUM(Code )\nINNER JOIN (SELECT Name RIGHT OUTER JOIN movie_2.Movies AS MOMMYMAVIEASAN1D8J6FQPZ4L7s0W5A3KkYxMbwXRdU\n\n\n AS THE ON Name < 3 INNER J"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT Rating WHERE Code <3)\n\n AS MATEKLIEYJOBMONAASAKPUNALADIMUGOLEDAYAWEBZBETATIABOXDOUCHFORTOEBEORAGIOTELWNBAQTANTSERAPROSAMHIFV"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": "SELECT Rating , MAX(Name ), COUNT(*), Name ;"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "SELECT Rating , COUNT(Code ), MAX(Movie )\n\n\nINNER JOIN (SELECT SUM(*)) AS TOYSJORG_NOIRBOCOSOLVEDLAGUE2WNTY4CHIVEATRENZKETALESOTIS3D0Q6AMADTIMPTHECHTI5A1N9"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "SELECT AVG(Name ) INNER JOIN (SELECT Title LIMIT 1)\n\n\n\n AS OFZOOAIDMUNDHAINFJLm3hk9b2q7d4rWv8zSAAXCQV5U ON Name < 3.14163053174818111560503799571025"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": "SELECT COUNT(Rating )\nINNER JOIN (SELECT SUM(*)FULL JOIN movie_2.MovieTheaters AS MOSESISCOHALLAVENTAKIMONSAUMBAYTOADREAKCALLSEUR1TELATTEETIITRAGZIKNOLBASTIRODAMASDUJO"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": "SELECT COUNT(Rating )\nINNER JOIN (SELECT Rating , Name LIMIT 0) AS ANMUSDONEDLY ON EXISTS (SELECT DISTINCT SUM(*)) FULL JOIN movie_2.MovieTheaters\n\n\n\n\n\n\n AS SOAS ON Movies.Code"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "SELECT Rating INNER JOIN (SELECT MIN(Movies.Rating )\nFULL OUTER JOIN movie_2.MovieTheaters\n\n AS NOGENTUSATRE AS INITIALLY ON Code = 1 ORDER BY Rating LIMIT 102620332760483599012216887724131258141118"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": "SELECT COUNT(Code )\nLIMIT 3 OFFSET 62522002800062460407030293620371748353426148833871213509946152744694923421059581901079033218578090303210161177390973645597100669547544553505387567862199227898364060"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "SELECT AVG(Rating )\nFULL JOIN (SELECT DISTINCT COUNT(*) RIGHT OUTER JOIN movie_2.Movies\n\n AS CHUNKIEYJINGDUMBEANZLAYelectaVegCATnEz4u\n\n AS FORTRESSESABILFORGISALOLEB"
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": "SELECT AVG(Movies.Name )\n\n\n  ORDER BY Code LIMIT 2 OFFSET 1;"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": "SELECT *RIGHT JOIN (SELECT SUM(Movies.Name ))\n\n\n AS toKOLAANIJYUJAENHANNOTTEONINGGALAXYSIAN_SHOTSFALLOUTSPACEBOARDRAISEBIRDPROGRAPHICREVIEWsDANCINITASWIMLIFETIMEZAPTUNESCAPETHREEMISELLEDELE"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": "SELECT Rating GROUP BY Movie LIMIT 47814390047162348131527285938127755257699576087103601354633892065707904302226972100082454000034644029099683745854320017504211500561908731198095674906167558"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": "SELECT Rating GROUP BY Movies.Name LIMIT 434004518481213330111164919573840635020472953252737697867872324777036792255731039081403100617441546"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": "SELECT DISTINCT SUM(Rating )INNER JOIN (SELECT Name , Title WHERE Rating \n\n<-1) AS VIEZESVENTYASEN ON Movies.Rating >\n\n 30394840980004RIGHT JOIN movie_2.Movies ON T"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "SELECT Rating GROUP BY Movie LIMIT 0 OFFSET 13;"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": "SELECT Rating INNER JOIN (SELECT Title FULL OUTER JOIN movie_2.Movies\n\n\n AS CENETICSAN AS IFING ON EXISTS (SELECT MAX(movie_2.Movies.Title ))RIGHT OUTER JOIN (SELECT Tit"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": "SELECT Rating FULL JOIN (SELECT Title WHERE EXISTS (SELECT DISTINCT MAX(*)FROM movie_2.MoviesLIMIT 2))\n\n\n AS ARIAKUSOSELANATASZYJBUVIRUVACOLELLNCHERIOTRUMENORGULDETCAL"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": "SELECT SUM(Code )\n\n\nRIGHT OUTER JOIN (SELECT Name , COUNT(*) RIGHT JOIN movie_2.Movies AS c01r0p9m5hjy6qc7cbxv1g4d75b\n\n\n \n\n\n\n\n AS JORGIE ON Title < (SELE"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": "SELECT SUM(Rating ) RIGHT OUTER JOIN (SELECT COUNT(*) ORDER BY Name , Movies.Name LIMIT 45419102616291835012090321249407837111748273359570014445813240713087234525569934289838366460"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": "SELECT DISTINCT AVG(Movies.Movie )\n INNER JOIN (SELECT SUM(*)FULL OUTER JOIN (SELECT * FROM movie_2.Movies WHERE Movie = 'Dirty Harry') AS SELEcT ON EXISTS (SELECT DISTINCT AVG(movie_2.Movies.Title ) INNER JOIN (SE"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": "SELECT Rating GROUP BY Movie LIMIT 43835580128572907718171378203099104846142723505425407911253397373670246068264903001565595310061916128942114574558375762013462506390583210480672890642218"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": "SELECT Rating GROUP BY Name ORDER BY Code LIMIT 715100112131680678859144589091100111817229550876923202858572960542119273764943225397899269324657963337755963573105383675846843303447408501"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": "SELECT Name RIGHT JOIN (SELECT Title GROUP BY Movies.Name LIMIT 2)\n\n  \n\n AS DICAPETRY ON EXISTS (SELECT SUM(Code )WHERE Rating = 'BANGOLIN' ORDER BY Movies."
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": "SELECT COUNT(*)\nWHERE Rating = (SELECT * FROM movie_2.Movies WHERE Movie > 1)\n\n INNER JOIN movie_2.Movies AS MATCHEDByNameABABANJAY1Z4XCE8D3E204090C7F5DF0DE25291330288085493300485038995910373639\n\n\n"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": "SELECT SUM(Code ) \nINNER JOIN (SELECT SUM(Code ))\n\n AS RANTYONOLAIDARASJONGERBOYSPUNCHKURIMITAMORHALBADASHWOMANHAUSOSSPICUBSUNDERSCOREEDRIYACHIZACATIRUMNUTRASTAVAKTELCOPEIN"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "SELECT AVG(Code )\nINNER JOIN (SELECT COUNT(*) RIGHT OUTER JOIN movie_2.Movies AS mvitre3rmsxlztjgw7y6p8uQVJ1q5n\n\n AS ANUSMAKERRIMFODENAISURATRIZLIYNAM"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": "SELECT AVG(Rating )\nINNER JOIN (SELECT SUM(*) RIGHT OUTER JOIN movie_2.MovieTheaters ON movie_2.Rating = 1 INNER JOIN movie_2.MovieTheaters ON MovieTheaters.Rating >= 0 ORDER BY Name , Title )\n\n\n      "
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": "SELECT AVG(Rating )\n\n\n INNER JOIN (SELECT Rating , MIN(*)  WHERE EXISTS (SELECT COUNT(Movies.Rating )) INNER JOIN movie_2.MovieTheaters AS MovieId ON movie_2.Title = 'My Brother, My Grandma & Little Sister' GROUP BY Movies.Rating , Movies"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": "SELECT Rating , Name INNER JOIN (SELECT COUNT(Movies.Movie ))\n\n\n AS ifsysnofcsturmfzyddxsspw_qb8j3a6h5kr0l1v4iEeXCVW9DyQtAJ2NZRbmYGBAoIg"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": "SELECT Name RIGHT OUTER JOIN (SELECT SUM(Movies.Code ))\n\n\n AS EXCELLENTLY ON Movie = Name ;"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": "SELECT MIN(Code ), SUM(Title ) LIMIT 3200000822703045402710336036205719125888178714288079073100773465484311130018239064892444163847842101557825541752975686683159874354224539069090895263050403327"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": "SELECT Rating GROUP BY Name LIMIT 45437462401897691812253948782399773413603517115522285736985845321467193026654974210027649540976404733752080447988871008432970511610385073245315463789097"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "SELECT Rating , COUNT(Code ), MAX(Movie )LIMIT 22000003000040000000160010000000230044304045103536508004327466433676022187814265003217100378720300538400258070654934791648669022788285857421569090829590439"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": "SELECT COUNT(Code )\nINNER JOIN (SELECT DISTINCT Rating GROUP BY Name ORDER BY Title LIMIT 3)\n\n AS YGENJOLTSZELOSSKASZEKISHAVETUSCHAANTHMADOBLHAMOTIBABETHLARNIKEALATR"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": "SELECT MIN(Code ), SUM(Title )\n\n\nRIGHT OUTER JOIN (SELECT Name , Code LEFT JOIN movie_2.MovieTheaters ON EXISTS (SELECT MIN(Code )) RIGHT JOIN (SELECT SUM(Code )\n\n\nR"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "SELECT MIN(Code ) RIGHT JOIN (SELECT COUNT(Rating )) AS SETH_POWER ON EXISTS (SELECT Name ORDER BY Title LIMIT 0)"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": "SELECT AVG(Code )\nLIMIT 4894685864992726373640482033793918771612146511346913542957604645151735432476313075447078002294304490105218950981"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": "SELECT SUM(Rating )\nWHERE Movies.Name = 'Posterboy'\n\n INNER JOIN (SELECT DISTINCT Name , AVG(*) RIGHT OUTER JOIN movie_2.Movies AS pdarray1 ON movie_2.Movies.Rating = -1300\nLIMIT 6374534181617"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "SELECT AVG(Movies.Name )\nWHERE Code \n\n < 1 GROUP BY Rating ORDER BY Title LIMIT 18921190618132725458933653717363585677512771578474829206098015854646856165514044074992695114957"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": "SELECT Rating INNER JOIN (SELECT Name LIMIT 4)\n\n\n  \n AS SESZCHFALLER ON Title > 3 FULL OUTER JOIN movie_2.Movies AS MENTORIANBANDYAJENASHKUNANTAIGIDAYiDATOITLEXICALAMBABILIS"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": "SELECT Rating LIMIT 2128204511490047286055572330709040993389112037105058542778340164221619243675174621"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": "SELECT COUNT(Manager )\n\n\n INNER JOIN (SELECT Recipient , Name ORDER BY Date LIMIT 15) AS VENTUREDATNEKREFERONJENCH_6G1A4LM0Q2UECZ9x7iI8XVlNmE3cFqC"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": "SELECT Remarks FULL JOIN (SELECT Employee.Name LIMIT 1)\n\n\n AS SOTDYZBENHALPULGOLiFUCKINGVATIAAORUNAGRASMAISAPACKOSCANTETUARUSSSHAWOADONAFCHEURANBAIFEDLIGERJIMM"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": "SELECT Position INNER JOIN (SELECT Recipient GROUP BY Manager LIMIT 1)\n\n\n      \n\n AS IS ON Sender > 10.000 LEFT OUTER JOIN planet_1.Client ON Has_Clearance.Level = Employee INN"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "SELECT COUNT(Package.PackageNumber ) LIMIT 2166331345781234171114395716152328996032309525853826015859552737764079562949105418883594008976644836546190690873752420842150864365"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "SELECT COUNT(Date )\nINNER JOIN (SELECT COUNT(Date ))\n\n   \n\n AS LAGUE_FREQUENCY ON Name > Date INNER JOIN planet_1.Planet AS SELECHANEDHINGENSEBINETCOUNITALISATJASK"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "SELECT Remarks WHERE Position <planet_1.Recipient GROUP BY Has_Clearance.Level LIMIT 462204089131223173697291835581906822990126482578497595111470508521106527678890377747452816"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "SELECT Employee.Level GROUP BY Contents LIMIT 11234567890110203948290611962815195800221740635049243326783523112534906636643794443857752777561476188469136572129621304616853210760795445984"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "SELECT AVG(Manager )\nINNER JOIN (SELECT Level , Position RIGHT OUTER JOIN planet_1.Shipment\n\n AS VIABLEURAISCOUFORT AS ELLICATELGOVEDIETKADIKIRNAMANPITRABASTAELEL"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": "SELECT Employee.AccountNumber LIMIT 5877518303311502526161029075669517993627124940581300683748632460708909777847961901677431120205735156562140522552100061272893248394564878043305422185033"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": "SELECT Salary ORDER BY Date LIMIT 30402013155028381711422033191300032000023453657127832164499272235371418647639097429104675308725854101484967621404760595577100934903682150543201269431506540532024281179587089"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": "SELECT SUM(Coordinates )\n\n\nRIGHT JOIN (SELECT Employee , Weight , MAX(*)LIMIT 9225585141345391632107598122340709935771738255868372067762128446689658715285747880064335908534"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": "SELECT AVG(Client.Manager )\nFULL OUTER JOIN (SELECT Name RIGHT JOIN planet_1.Package\n\n AS VEGASANZINGENKOPWIJYONVALAELOVOLDERICLESBETHROCHNEEDR\n\n AS ARGENTINANUIA"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": "SELECT MIN(Manager ) LIMIT 2114103614190718242326381629139922122515113967896125177035003764774827798044343260574558505640431756575541000168985587302821"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": "SELECT Position INNER JOIN (SELECT Recipient )\n\n\n  \n\n AS E ON Date > Level LIMIT 220012020150393020454038232948786717754942802633182211697736654344271903159568576025904759135585147916"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": "SELECT Employee RIGHT JOIN (SELECT Level FULL OUTER JOIN (SELECT * FROM planet_1.Planet) AS PRAGE2FRENCH ON planet_1.Planet = '^5' ORDER BY planet_1.Planet )\n\n\n AS LefriJoNjRnDv"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": "SELECT Sender FULL OUTER JOIN (SELECT Has_Clearance.Position )\n     \n\n\n\n AS BOSLOVCHANICOCORINGMIDDALAILOUFEDOMEUMITELUHONVECODENNAIFREIUNIAINYQUEJOIGLELLBETHOBISKOL"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": "SELECT Employee ORDER BY Weight LIMIT 5277817282557160113141130791105603398381226405058186485754989151904002495235942804865466686995545677052105634734736907090610077295439872093273728785717"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": "SELECT Sender FULL JOIN (SELECT SUM(Date )\nFULL OUTER JOIN (SELECT Employee.Sender LIMIT 2)\n\n AS inlaid ON Manager > +1 ORDER BY Position , Coordinates , Weight )\n\n AS IKDATISYN_"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": "SELECT Name LEFT JOIN (SELECT COUNT(Manager ))\n\n\n     \n\n AS E5K4G2Y1V9qxzn0cXvJb3P_hBQijkU8Wg6yLs7eOuHNlfAoEaMpIdFmCZT"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": "SELECT Has_Clearance.Position \nWHERE Coordinates <Manager RIGHT JOIN (SELECT Employee FULL JOIN planet_1.Has_Clearance ON Has_Clearance.Position \n>Coordinates INNER"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": "SELECT Recipient GROUP BY AccountNumber ORDER BY Has_Clearance.Level LIMIT 449014588124877671825471479087065897231943643313261758697559009766274063245632161057953074113544602878"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": "SELECT MIN(AccountNumber ), AccountNumber , Name RIGHT JOIN (SELECT Has_Clearance.Manager LIMIT 704)\n\n AS aiXlRlySELECCOTZB5DcUoJh8u3QCj9Pf"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": "SELECT MIN(Contents )\nINNER JOIN (SELECT Recipient , SUM(*))\n\n AS eGtFsZVJvw8aBAuY4z6oB5xgQhDyDbKpqCnEmTl7XdP9k2mOjf1r3HW0LbEe"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": "SELECT Recipient WHERE Manager = 5.7\nINNER JOIN (SELECT Has_Clearance.Level )                            \n\n AS DohmaeKhaMae2a1n8uDgRdVhB"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": "SELECT MIN(Manager ) LIMIT 2165013616787530265511681327176422251523143549006795287660502908107712804345575979448933882438742587048698540973191809834821476696135210006209368310095816057894134099012755"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": "SELECT Position , AVG(Position ), Level ORDER BY Remarks \nLIMIT 1 OFFSET 310150482902163065461440263215123627204578471917490744805413391823743377346676109700954337253575966485222498115957"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": "SELECT DISTINCT COUNT(*)\nWHERE Sender = 486121301142549478876171816157823362958461180302820532638223943456496107919089076999534277059856840890684462506500742014833637572.1\nINNER JOIN (SEL"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": "SELECT MIN(Coordinates )\nLIMIT 3 OFFSET 23231715124414132216332072257510574319391160672427993889295626403090459549744858185097409321290178363710054214666760068877083167646535963494174755124415"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": "SELECT Position \nLIMIT 22275160188183811405045233949151720299914287833103647377795274326255846356713708432305260441906214624962476612985962158555780646994656856341008797225340484516041890502938152839"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": "SELECT Has_Clearance.Manager WHERE AccountNumber = 1\nINNER JOIN (SELECT DISTINCT Level ORDER BY Manager ) AS uidLDRV1SZ9U5C2B3X7WYPv6sMzfjF8g_AcKbT4DQ"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": "SELECT Name INNER JOIN (SELECT Has_Clearance.Planet LEFT OUTER JOIN planet_1.Has_Clearance\n\n\n AS tfelterpafjestiLgVBQ4Yxm7q0XwMh8sKc2P3dG6z"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT SUM(Has_Clearance.AccountNumber ), Has_Clearance.AccountNumber )\n\n AS DZFJV2LL0G1QD9UNW8Pjb4InYNuRzBfXaE5v6iU"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": "SELECT AVG(Package.Manager )RIGHT JOIN (SELECT Employee , Remarks LIMIT 1)\n\n\n\n  \n\n AS TASZENETICUSIRONISYATNAUTJUCHAUNSCVQP8WX9S3GH7F1I2E6N4C5B"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "SELECT Name INNER JOIN (SELECT Level RIGHT OUTER JOIN (SELECT DISTINCT MAX(*), COUNT(Manager ) FROM planet_1.PlanetLIMIT 2)\n\n\n AS EASTLY ON PackageNumber = 1FULL JOIN (SELECT Level"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": "SELECT AVG(AccountNumber ), SUM(Level )RIGHT JOIN (SELECT Name INNER JOIN planet_1.Planet\n\n\n AS i ON Level = 0 ORDER BY Recipient , Employee ) ON Coordinates < 1LIMIT 2;"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "SELECT Recipient , Level FULL JOIN (SELECT Position )\n\n\n     \n\n AS or ON Name = Salary ;"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": "SELECT MIN(Client.Level )\nRIGHT OUTER JOIN (SELECT COUNT(*) ORDER BY Position , Weight , Level , Sender , Remarks , Employee , Date )\n\n AS BVACATICONMICSCYCLEFELRINGHOLIDGEINLISBETHORG"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "SELECT Recipient INNER JOIN (SELECT Position )\n\n\n AS NrVdjW5xhH9F6mYQ1svK2_pD4LfM0Ak7q3PtsuZ8BgU11bGwcEJXyIYSoCzNnbTtwOiECaWFn"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": "SELECT Employee ORDER BY Weight LIMIT 490500130261025181612284908789817357714558560451595697429346736572033882287003813240754100320023278968487903373219589499421583944755300065409711104625"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "SELECT Recipient WHERE AccountNumber = 0.8160024016048\nINNER JOIN (SELECT Name LIMIT 4)\n\n  AS INJURED ON Date <3000001000732125204523253764332714447039581935876615285788989365550606513"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": "SELECT DISTINCT COUNT(Manager )\nGROUP BY Manager ORDER BY Recipient LIMIT 20702090990004000030361213274822104714261577343750889859764025185775951623786896177964196080392800742984012444114633"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": "SELECT SUM(Planet )\nINNER JOIN (SELECT Level , Position )\n\n AS FOURTHVIL ON Manager = 1.1520 GROUP BY Remarks ORDER BY Has_Clearance.Planet ;"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": "SELECT Has_Clearance.Name RIGHT OUTER JOIN (SELECT COUNT(Planet )\n\n\nLIMIT 617010035114946390851007141578772048572379383716361358998898456934107554336856254418532474265089062128"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "SELECT Recipient LIMIT 3999332078342511403788383907955140130992723592946804897241560635047177943265873187749055"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": "SELECT Level GROUP BY PackageNumber ORDER BY Date , Client.Level ;"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "SELECT COUNT(Recipient )\n\n\nGROUP BY Position , Remarks LIMIT 2112107211152558203901647736402430265578335718458037175085683467166514884360290653781949032310097134827563213947463598904"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": "SELECT DISTINCT COUNT(Client.Date )\nRIGHT JOIN (SELECT COUNT(Manager ), Remarks , Salary , Planet )\n\n AS T ON Manager > Date LIMIT 1241545134427493724124816384032173655251828"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "SELECT SUM(AccountNumber )\n\n\nLIMIT 615014900062472124810333089372519031659097237744271747656757872826223978691370739955009020174756064149520018454324731"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": "SELECT Level GROUP BY Has_Clearance.Manager ORDER BY Recipient \n\n\nLIMIT 21 OFFSET 49669987817221908111426673039462876312913011677791829493885253766406336104812894432503495270065"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "SELECT SUM(AccountNumber )\nINNER JOIN (SELECT Name RIGHT JOIN planet_1.Planet AS LAF ON PackageNumber = 1)\n\n AS UZUBAKYOUGULUSuONAjENOSELCTEASOLAMMANIETDALVAD"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": "SELECT COUNT(Contents )\nLIMIT 212510577527447848581789434281629011215461926472369118833492036259987307904455035853908621505321895378400405524146562135980421053866566493247272260537073170575587710"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": "SELECT Employee.AccountNumber LIMIT 6459060361727881814164822681239503364012555387035404300057802067898781559073796004976247323651158132683194675841692856669853104992909108710063230605417"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": "SELECT DISTINCT COUNT(Date )\nGROUP BY Date ORDER BY Sender LIMIT 1 OFFSET 200005100101299917001125033105860321123161946254849456436016540707959143955116330662085210007447269642002700547534290635135715"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": "SELECT COUNT(Date )\nINNER JOIN (SELECT Recipient INNER JOIN planet_1.Package AS B2KGdWnQxUyM8o3r9YBmC5pFkbHVuq\n\n\n AS ESSENTIALLY ON Manager = Sender INNE"
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": "SELECT Level GROUP BY Manager ORDER BY Position , Employee.AccountNumber ;"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": "SELECT Employee.Coordinates WHERE Remarks \n\n\n = (SELECT COUNT(Manager ), SUM(Level )WHERE Name > 1)"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": "SELECT SUM(AccountNumber ) LEFT JOIN (SELECT Name , AccountNumber , Manager ORDER BY Coordinates LIMIT 1)\n\n\n AS OFCOBOD_1B2JA3VZUiFc8Pdz4j9Wpf6x0v5s"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "SELECT SUM(Name )\n\nRIGHT JOIN (SELECT Position )\n\n\n AS ILLUSTRY ON EXISTS (SELECT DISTINCT Has_Clearance.Date LEFT JOIN planet_1.Planet AS giunh0pfjqv2d3"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": "SELECT Employee GROUP BY Weight LIMIT 469254812228941005271615382095190167361328582699175066783086402988234500390846751498210768606490374783182407659311709610721594979553224721123489416909"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": "SELECT Sender INNER JOIN (SELECT COUNT(Level )INNER JOIN planet_1.Package\n\n\n AS PackageA2PackageB6PackageD12PackageF4PackageG7PackageH11PackageK10PackageQ5PackageT8PackageZXCYWfjrRtUxbVuN9oEzgP0nJ"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": "SELECT Name INNER JOIN (SELECT COUNT(Manager ))\n\n\n     \n\n AS EADKLZ1F4B2ND9A22AA7E3D11BD288933106478550077164818129940585421EE6EB36907076C839234720852908602527"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": "SELECT Name LIMIT 0;"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": "SELECT Recipient LIMIT 49520496716654422453828304034995718487514881132153370375879553954261217646600463119362923608427866115259852351007245035475310876963210180561372160491678973896223059404875"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": "SELECT Employee.Date RIGHT JOIN (SELECT Has_Clearance.Remarks INNER JOIN planet_1.Package ON Contents <> Name FULL JOIN planet_1.Has_Clearance AS TATE\n\n\n"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": "SELECT AVG(AccountNumber )LIMIT 200005 OFFSET 1000312;"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": "SELECT Has_Clearance.Recipient RIGHT JOIN (SELECT COUNT(Manager ) LIMIT 1)\n\n\n\n \n\n AS W ON Manager <53300582854992517881814595034892979016026208548107515674978222755123613"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": "SELECT AVG(AccountNumber )\n\n\nORDER BY Client.Level LIMIT 2 OFFSET 31;"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": "SELECT AVG(AccountNumber )\nFULL OUTER JOIN (SELECT COUNT(*) RIGHT JOIN planet_1.Shipment\n\n AS GUNSHIMETOSXATTOVOCAORENQGURUTIOBISSEM AS EZYTHCECROGUANFON"
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": "SELECT Name INNER JOIN (SELECT MIN(AccountNumber ))\n\n\n   \n\n AS EEOMISCENE ON Salary = Level RIGHT OUTER JOIN planet_1.Package AS KENTEPOELIDLATEEDEASKUTOREMIRALJOSYG"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": "SELECT COUNT(Remarks )\nINNER JOIN (SELECT MAX(Date ))\n\n  \n\n AS and ON Name > Date RIGHT OUTER JOIN planet_1.Client AS LENCHUITONM0xGASK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": "SELECT DISTINCT COUNT(AccountNumber )\nRIGHT JOIN (SELECT AccountNumber FROM planet_1.Client, planet_1.Planet) AS PLCLASSILARYPARTNERS ON Manager = 'Folle-Ogre' GROUP BY Recipient , Name ;"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": "SELECT SUM(Recipient )\nINNER JOIN (SELECT Recipient )\n\n AS NIDENBAGALDIGAMATISBACCHARESASPYLEVOCOLAPULIMONETTEKIUSURUNAHJOEITZUKABANDIEMOPNILTOKOMOAKIRIZLINGELTIFR"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": "SELECT DISTINCT COUNT(AccountNumber )\nFULL JOIN (SELECT * FROM planet_1.Planet) AS planET ON planet_1.EmployeeID = 1;"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": "SELECT Name RIGHT JOIN (SELECT SUM(Client.Remarks ))\n\n\n AS IGLAALVIABRAJANNURAYOLAMABASARITHAYAPADDAESHIMBAQAHRIHYACATTAKPCHHIGMAELIDGUTWINONAKIETUPSUMNAZTILMETHOD"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": "SELECT Name , Remarks FULL JOIN (SELECT Employee.Date ORDER BY Position )\n\n\n\n \n\n AS NOHGORISTSBONCHANDAKADINZAGOSAALASIABIMESAMMONOGELENKIJLOMNUBAILTAAOITVATCUR"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": "SELECT AVG(Manager )\nRIGHT JOIN (SELECT COUNT(AccountNumber ), Sender , Remarks GROUP BY Has_Clearance.Date ORDER BY Client.Weight \n\n\n LIMIT 1) AS MURGENT ON Date ="
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": "SELECT COUNT(Rank_of_the_year )\n\n\n INNER JOIN (SELECT COUNT(Platform_name ))\n\n AS ASSAULTATORYHARDWAREFACTORIANNEURYEUREADATAANTHOLICJODELIGALKUMARROTAMBAKERBENCHROXINITOBSONGRA"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": "SELECT *\nINNER JOIN (SELECT DISTINCT Game_ID LIMIT 1)\n\n AS RIFKALAGA3M1DYUJ2HLSW6OLQF8Z4X5DSP0BVBA10ED9E78GAAOCRTYIISANTHUNSEAUIRTSCODOKELSCARADIAATRAIM"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": "SELECT Game_ID INNER JOIN (SELECT COUNT(Market_district ))\n\n\n  \n\n AS BHUB1A2DADF9X4J3Y8W6P11K7Q0LSEZVG5B18C204635703942UELETMAI ON Units_sold_"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "SELECT SUM(Rank_of_the_year )\nGROUP BY Game_ID LIMIT 2 OFFSET 0;"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": "SELECT Game_ID INNER JOIN (SELECT Title )\n\n\n  \n\n AS SESVETONAUNTERIA4x5KHU2YGLSBXLY3QF8ZL1Mk7JqjtbTfC6rmWz0_wN9DvsgEuRiIcPnOoSd"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": "SELECT Units_sold_Millions RIGHT OUTER JOIN (SELECT SUM(Release_Date ), Position GROUP BY Title LIMIT 4)\n\n\n AS CODEXESCINTSPORADOXAATTEGIAURANISUUNGAACONASHIETO"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "SELECT Rank_of_the_year INNER JOIN (SELECT COUNT(Franchise ) WHERE Title = 0LIMIT 20 OFFSET 676602516702218081575803600278823395733266599557810669467289817594054114524582930"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": "SELECT AVG(College ) LEFT OUTER JOIN (SELECT SUM(Position ))\n\n\n AS TOLJENHAGLIDERYSSIA_KOMBEDDOGTOORM1WOCAM4G5V6BA2Z7YSASQCET8ITADUATIRAINANDAFALLSONO"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": "SELECT Position LIMIT 33653837164611668933295930881255151817762513641479392040459099430022269865245723722014473109535696087364793752786702150285877016830051938421921646321007862114929531204378854174813"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": "SELECT Game_ID , If_active ORDER BY Platform_name LIMIT 24984066352837707848671839559954207744451314642909101742322953446755027881759842611578649151960240431103625961243164758656933"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": "SELECT DISTINCT AVG(Position ) ORDER BY College LIMIT 2 OFFSET 1;"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": "SELECT Units_sold_Millions ORDER BY Position LIMIT 1;"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": "SELECT video_game.player.If_active LIMIT 57829392813153326761411661709271055583537167532206543017924605744224856503634597321306747409524712388042157192553990212918466484496323695439087"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": "SELECT COUNT(Rank_of_the_year )\nFULL OUTER JOIN (SELECT If_active , Rank_of_the_year , Market_district WHERE EXISTS (SELECT AVG(*) AS year FROM video_game.player WHERE Title = 0 INNER JOIN video"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": "SELECT SUM(Download_rank )FULL JOIN (SELECT * FROM video_game.player WHERE College = '-' ORDER BY Release_Date , Franchise ) AS playerNameSELELLCOTAORIFDERSLEEPALIZEDIDENECREATEDTOTALVARIABLE"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": "SELECT Rank_of_the_year LIMIT 212 OFFSET 1334;"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": "SELECT Rank_of_the_year INNER JOIN (SELECT * FROM video_game.player WHERE platform.Player_ID = 1) AS tmp2v0d1b7c8a157770f01ac33ae6af9cc78ee3ddbb9424255510228936504048470058572053182617"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "SELECT AVG(Player_name )LIMIT 80100053213203745127833890872216282336398898317304811476038405444194903503529770099279055705743268621128254615596218658510066759531019768145813738093126737207864"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": "SELECT Game_ID RIGHT JOIN (SELECT AVG(Franchise ))\n\n\n   \n AS VICYSLES ON EXISTS (SELECT Units_sold_Millions FROM video_game.game ORDER BY Market_district LIMIT 1);"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "SELECT MIN(College )\nINNER JOIN (SELECT DISTINCT Rank_of_the_year )\n AS PUREAKUBAUKAYARHAITENAMHALAGADMANGZYPIREDELVINDIMONINGLAKAZSDAJAPEKIKKIDIWATUNRUSANNAOCHTRA"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": "SELECT COUNT(Units_sold_Millions )\n\n\n INNER JOIN (SELECT MIN(Franchise ))\n AS ISLANDOROSLEGIAANWATERUNDADITJOYALSZAOMARIANEZCOCRIFISBAPHEMMAONDSQUEVATTAILICYUKOLMETH"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": "SELECT COUNT(Download_rank )\n\nFULL JOIN (SELECT Franchise RIGHT OUTER JOIN video_game.platform\n\n AS toYS AS NAMESA1stNameMV2ndNameBALT3rdNAMEMAJORE4thNAMELAST5THEMORY6thNAMENONE7"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": "SELECT SUM(Rank_of_the_year )\nLIMIT 476642718456777177533255816151466225755139965238820603940590419061003125380078354898547036244784690581201499030972853104266873509224837642796455610461829079"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": "SELECT Game_ID INNER JOIN (SELECT *)\n\n\n                \n AS NOVEMBER ON Title = 1"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": "SELECT SUM(Position )\n\n\n INNER JOIN (SELECT Platform_ID , platform.Download_rank GROUP BY Market_district LIMIT 15497701000539702536153746333044226467165817506588551047001312"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "SELECT Release_Date FULL OUTER JOIN (SELECT MIN(Franchise ))\n\n\n AS INTRUSIVE ON Download_rank = 0.5000843291701772098991528121622001164608067405874756524135714490730251023267839"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "SELECT SUM(Franchise )\nRIGHT OUTER JOIN (SELECT Title , Position , Units_sold_Millions WHERE EXISTS (SELECT Rank_of_the_year FULL JOIN video_game.player ON player.Player_ID = Player_ID )"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": "SELECT DISTINCT Title LIMIT 1411280009070100003050288022204870386032100715790075185864782911106595373368671436357723134776395599196669261649123421258843447345904484624931709816874105273096012048"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": "SELECT COUNT(*)\nFULL JOIN (SELECT * FROM video_game.game WHERE game_player.Game_ID = 5) ON Game_ID > 0;"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "SELECT COUNT(Rank_of_the_year )\n\n\n INNER JOIN (SELECT DISTINCT COUNT(*) FROM video_game.game, video_game.game, video_game.game_player, video_game.game\n\n\nINNER JOI"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": "SELECT SUM(If_active )\n INNER JOIN (SELECT DISTINCT Units_sold_Millions , Title RIGHT OUTER JOIN video_game.game\n\n AS EHBVEENIAASUNAXC1QAJIATMEGLKN2R3"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "SELECT Rank_of_the_year , SUM(Game_ID )\n INNER JOIN (SELECT Position ORDER BY Market_district LIMIT 1)\n\n AS aLpJOLbEaKdMAAHkf7nQ2Ujv0V3h6WGg1sB9u"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": "SELECT COUNT(If_active ) INNER JOIN (SELECT MAX(*)) AS EZALOTONTHYONE ON Title <3FULL OUTER JOIN video_game.game\n\n\n AS OFTEN6H9QNJ7B2GUW8D1SSKDFV4P5M0"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": "SELECT SUM(College )RIGHT OUTER JOIN (SELECT Units_sold_Millions )\n\n\n AS for ON Title < -2.11 GROUP BY Market_district , College LIMIT 5421 OFFSET 2132"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": "SELECT AVG(College )\n INNER JOIN (SELECT *)\n\n AS TURKMANAJORAHMOSIANASARADANHENOVITUYAIKUNLUGRISATSUZAVAGDIRSINHAFIFUTGULIMBOLCHYONTHICANTEIAXETHEROMETHYLENECAMPACOXYAPOCAMATE"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": "SELECT MIN(College )\n\n\nLIMIT 22 OFFSET 4769432857277832171810392919021555871342504745884636163869205989115823642624330053602534705006522127901371007200953653130904594062197359841390766772844146727"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": "SELECT MAX(College )\nFULL JOIN (SELECT Title WHERE College = Franchise INNER JOIN video_game.player AS fjonstxntuqt1mndf0dkb3vak9thasr4sX\n\n\n  \n\n AS SOON"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": "SELECT COUNT(Game_ID )\n\n\nRIGHT OUTER JOIN (SELECT AVG(Franchise ))\n\n AS BOOSTERY ON Developers <3"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": "SELECT COUNT(College )\n\n\n INNER JOIN (SELECT SUM(*))\n     \n\n AS EAKA ON Market_district = -1"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "SELECT DISTINCT Rank_of_the_year , Developers LIMIT 5900008121314242788687823295775480122254769506032113958703738645587357736804220671730331884104449736500798904921190566073486324528155416"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": "SELECT video_game.game.Title INNER JOIN (SELECT Units_sold_Millions )\n\n\n  \n\n AS RANKING ON Franchise <3"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": "SELECT DISTINCT Developers LIMIT 51822000903205043122740481049307524162906326523456770471315462119369025550154647860633788176589421472633793944831157100989714057635622012822183212720580050409912"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": "SELECT Name INNER JOIN (SELECT Release_date )\n\n\n       \n\n AS and ON Sale_Amount = -63801577518771327646717884480963316581423704837249846122974396587112526472032194936557810"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": "SELECT Book_ID FROM book_press.book WHERE press.Book_ID = 1 ORDER BY Press_ID LIMIT 2;"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": "SELECT AVG(Author_ID )\nRIGHT OUTER JOIN (SELECT SUM(Year_Profits_billion ))\n\n AS DUNFINGLYHONICOSOLIANTHNOMENTALOPECEANLORDSQUEKELIDIRIATOGTEDAYSUZITODETCISOTRACO"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": "SELECT Release_date FULL OUTER JOIN (SELECT * FROM book_press.book) AS date ON press.Book_ID = '10' ORDER BY Press_ID , Book_ID ;"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "SELECT SUM(Book_ID )\n INNER JOIN (SELECT DISTINCT Name RIGHT OUTER JOIN book_press.book\n\n AS isntecutorjoinjouirakhiemtijonfiediobunterteilnadraldohu\n\n AS PASKODIATO"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": "SELECT Book_ID FULL OUTER JOIN (SELECT Press_ID )\n\n\n     \n\n AS ofslop1n6b7f2o9p25m3c0a10e753678d4h37552215851827447757209749608729508680640048389534406528302635"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": "SELECT Release_date INNER JOIN (SELECT Press_ID FULL OUTER JOIN (SELECT AVG(Author_ID ) FROM book_press.book) AS ttnPRs ON press.Press_ID = 1\n\n\n INNER JOIN (SELECT Press_ID FULL OUT"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": "SELECT Gender ORDER BY Title LIMIT 5999056725306045010906111514893324503938791636705955172249001380652310267764409743292744696321121878574772193534841177568532476072453720483212890259854603095"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": "SELECT Release_date \nGROUP BY Sale_Amount , Month_Profits_billion , Year_Profits_billion , Press_ID ;"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "SELECT Release_date FULL JOIN (SELECT Book_ID FROM book_press.book WHERE Name = 'Shanghaiist' INNER JOIN (SELECT Gender ) ON Month_Profits_billion >= 2) AS SEL_FREQGONALEASTBEETSLITERATORSINFORMEDLYASSIL"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "SELECT Name LIMIT 936754847154919117723015799672726163517131228782489790850337429554568344037884320607210386595649030846492225666962146143905846201595480521157576100730577154701961944182698117027"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": "SELECT *\nLIMIT 99049510145308050759967293936158937181233261027352817409523555416001457205325476077854864"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "SELECT AVG(author.Name )LIMIT 20001501828202317251367374039331538477519451298771022483536012987609520024304465646878740000115549263001605834005425899075785432709669745902508971151486172820464039"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": "SELECT author.Name GROUP BY Press_ID LIMIT 11 OFFSET 22011123000330375022804936009920263546391327481847145832103357294224402516287553190410067741543000097324845341703125995649555785008"
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": "SELECT AVG(author.Name )FULL OUTER JOIN (SELECT * FROM book_press.book WHERE press.Book_ID = 1) AS dbo1 ON author.Author_ID = 2;"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": "SELECT Release_date GROUP BY Year_Profits_billion LIMIT 1951304325772328396722153360842038597911753540341247902957708731174813552749809537240776149985366683167818974463106458502688"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": "SELECT AVG(Author_ID )\n INNER JOIN (SELECT Name RIGHT JOIN book_press.book\n\n AS aYET ON EXISTS (SELECT Press_ID , press.Author_ID )\nFULL OUTER JOIN book_"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": "SELECT SUM(Release_date )\n\n\n INNER JOIN (SELECT Name RIGHT OUTER JOIN book_press.press ON book.Press_ID = '-' ORDER BY Title LIMIT 2)\n\n\n AS KASENUSUNGATIOUSLYNEGEDAOON"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": "SELECT AVG(Book_Series )\nINNER JOIN (SELECT Book_Series )\n\n   \n\n AS RYANASHAKATYAHARALADRIZNABIACHARIAMIDURBAMTHUQEDULPUNGODDRAEJENTAFORIANSONISOCITRINNAGUDHRVACIMBIRL"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": "SELECT SUM(Name )INNER JOIN (SELECT MAX(Book_Series ))\n\n\n\n     AS LENNERHARTZG ON Book_Series = 'Dance at the Moon' FULL OUTER JOIN book_press.author AS BOOKPOWEREDNESS ON author.Title = 1;"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": "SELECT Release_date \nLIMIT 417018828683060347838353314128918104037272257269946115977257524504716659429459320679544239815844869134380925063600795587648647610054421905852852160395860323063013574174909"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": "SELECT AVG(Author_ID )\nRIGHT OUTER JOIN (SELECT Month_Profits_billion )\n\n AS LISTSHADOWSKYARAMUJONZAKORAVIANNAKITBAPAAHAVNATLMAFDAUNYAXIQIMGENIZAACROMBAEDOOTANMIAW"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": "SELECT AVG(Book_ID )\n\nORDER BY Title LIMIT 2160380018000814451340890875881217392310482450022010627191578996064956830259047584628163350353220345720030032475554"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": "SELECT Book_Series INNER JOIN (SELECT AVG(Year_Profits_billion )\nWHERE Book_Series \n\n>Month_Profits_billion RIGHT OUTER JOIN book_press.author ON press.Book_Series = (SELECT *"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "SELECT Name LIMIT 74840393110291144885745758938133027605028011217208026774315762478365899791865669067"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": "SELECT MIN(Author_ID )LIMIT 1 OFFSET 5373667282517194833278829553974237870490715167734403057996635384310592065260075321754413460142802412115079956063649350514562016851103183722832008517281905908"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": "SELECT AVG(Book_ID )LIMIT 100000102102880981237887733231816190813404627506417597548153547262534000965852970609699673056497411794583"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": "SELECT AVG(Release_date )INNER JOIN (SELECT Title RIGHT OUTER JOIN book_press.book\n\n\n\n AS LOVEDAsLovedBySOSsXYZ1V5w7qGcM3D0IKB4fQNgjF8R6vC"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": "SELECT Gender INNER JOIN (SELECT MIN(Book_Series ))\n\n\n   \n AS YAU ON EXISTS (SELECT author.Author_ID FROM book_press.author, book_press.book, book_press.author, book_press."
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": "SELECT COUNT(author.Book_ID )GROUP BY Press_ID , Gender LIMIT 366617208533451625233977152888474029543219573537361179082218557080511027240134963247678743504621305644146475630062126589412513"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": "SELECT COUNT(Book_ID )\nINNER JOIN (SELECT SUM(*), Book_ID )\n\n AS TAKORA1R2K4G3D9ACF6FA7ADB0BE5JAN13BA8221746DA20C00E75454739884280853411587093191628350108185926253760"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": "SELECT Book_Series INNER JOIN (SELECT COUNT(Press_ID ))\n\n\n\n   AS SIABARALADIMANJAPADISKETMAYENEDYAUVIRGHAWOLINAINHOTONAILUNDAASAMILBAITWAOOPKIRAEORFACABRICEIPULLTAXATRIZNAUR"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": "SELECT COUNT(Book_ID )\nLIMIT 8507860320128481410409611131836252075643749705743241619238833178965380076292630979906158577809535874546890274612591006200931259954522534483308395860325074142854130155"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": "SELECT Release_date \nRIGHT JOIN (SELECT SUM(Year_Profits_billion )\n\n INNER JOIN book_press.author ON Press_ID = 8234054110008146418090870352850321245421610\nGROUP BY Name"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": "SELECT COUNT(Month_Profits_billion )\nWHERE Book_ID = 1;"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": "SELECT MIN(Author_ID )\n                          \n\nFULL JOIN (SELECT Book_ID , Name FULL JOIN book_press.book AS BOKPRESSMUSIC ON press.Book_ID ="
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "SELECT *\n\nINNER JOIN (SELECT Book_Series )\n\n AS EYE ON Sale_Amount = Name RIGHT OUTER JOIN book_press.book ON press.Book_ID > 1 ORDER BY Press_ID , Book_Series ;"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer": "SELECT COUNT(Author_ID )\nINNER JOIN (SELECT Press_ID )\n\n AS LEELLLIEBORNJOLIANAHOPRESSYALCOVERMANSPELLEDKINDORINGLYDEVELOPERPURPOSENOTEXPLAINERSFACTORSWITHTHEATERWRITERTALKEATINGCOUNTRYCOMMERCEIRELIGIONMUS"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": "SELECT COUNT(author.Age )\nFULL JOIN (SELECT MIN(book_press.Release_date ))\n\n AS NIGMANDHIS ON Sale_Amount <Year_Profits_billion GROUP BY Release_date LIMI"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": "SELECT AVG(Book_ID )\n INNER JOIN (SELECT COUNT(*)FULL JOIN book_press.press ON author.Press_ID = 6496701890904247825125750753918886545474640347400\nINNER JOIN (SELECT"
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": "SELECT Name LIMIT 3103254650013098466193695606726277775105716111812204314233813543740459022781779684976200802935852874645987477094344212639558848444100159746322589240584117993095690750337726607516"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": "SELECT MIN(Author_ID )\n INNER JOIN (SELECT Name RIGHT OUTER JOIN book_press.book\n\n AS BANGARWIRKJOEFKAULMUNLASPESYVAMBAX\n\n\n AS UREZOONELAVERBOSENDIAE"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": "SELECT Release_date , author.Author_ID GROUP BY Sale_Amount ;"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": "SELECT Release_date , author.Author_ID ORDER BY Press_ID LIMIT 44628259719171526229901507037368810306087643533677620277738852118165514585624794790421240942973245390972005759449534114908"
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(staff_id )\nWHERE Staff.date_from = 1;"
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": "SELECT DISTINCT COUNT(staff_id )\nINNER JOIN (SELECT AVG(*) RIGHT OUTER JOIN cre_Doc_Workflow.Authors\n\n AS U1KU0Q2SA6B9PY8EBA5AA77C4F227917851490251578"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": "SELECT DISTINCT COUNT(staff_id )\nINNER JOIN (SELECT COUNT(*)GROUP BY Ref_Staff_Roles.next_process_id ORDER BY Authors.next_process_id )\n\n\n AS ILLUSTRATED ON Documen"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": "SELECT Process_Outcomes.process_description , author_name INNER JOIN cre_Doc_Workflow.Process_Outcomes\n\n AS eaBgEinTzb2mCp7j0U4x1tQXlqH3nF"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": "SELECT SUM(staff_details )\n\n\n   \n\n INNER JOIN (SELECT MIN(*) WHERE Business_Processes.process_outcome_code = 1LEFT OUTER JOIN cre_Doc_Workflow.Staff"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "SELECT DISTINCT AVG(Authors.author_name )\nINNER JOIN (SELECT author_name , COUNT(*) ORDER BY Process_Status.date_from , Ref_Staff_Roles.other_detai"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": "SELECT AVG(Authors.author_name )\nINNER JOIN (SELECT author_name , SUM(cre_Doc_Workflow.date_to ), Business_Processes.date_to LIMIT 1517)\n AS in ON EXIST"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "SELECT SUM(staff_id )\n\n\n INNER JOIN (SELECT COUNT(*)FULL JOIN cre_Doc_Workflow.Business_Processes ON date_to = Staff_in_Processes.process_description )\n\n\n"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": "SELECT AVG(Authors.date_from )\nINNER JOIN (SELECT COUNT(*)) AS NORDED1D7W2F0DE8M32L5JZ6K3LYASB4PYBS25XQG9HITVIABLUE28C1617294558E18A135051R0019227567"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": "SELECT COUNT(staff_id )\nGROUP BY Process_Status.document_name , other_details LIMIT 1 OFFSET 2"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": "SELECT COUNT(staff_details )\nINNER JOIN (SELECT DISTINCT SUM(*)FROM cre_Doc_Workflow.Process_Status, cre_Doc_Workflow.Process_Status)\n\n\n AS toRxVfHdYb"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": "SELECT SUM(staff_id )\nLIMIT 1000000081000001110001001020221225000010000000000111100000000000000001410113341004547443330063917375850016061809077888551570791908755795686040385028732946238742305465893108649099694966677735361259"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "SELECT MIN(staff_id )\nINNER JOIN (SELECT COUNT(*))\n\n     \n\n AS EAKETTE ON Business_Processes.document_id = 7071"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": "SELECT Process_Status.process_status_description , SUM(Process_Status.process_status_description ), Business_Processes.process_status_description , Ref_Staff_R"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "SELECT SUM(staff_details )\nINNER JOIN (SELECT Business_Processes.process_description , date_from RIGHT JOIN cre_Doc_Workflow.Staff_in_Processes\n\n\n"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": "SELECT COUNT(staff_id )\nFULL JOIN (SELECT * FROM cre_Doc_Workflow.Process_Status) AS i ON staff_id = 0;"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": "SELECT author_name LIMIT 1000003025262829503936971711332413181527235765351085143477603846190872101070543040122904958805988869955449541124121675409640907418842109093118476310083750843087114820368913"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "SELECT Process_Outcomes.process_id GROUP BY Staff.staff_role_description ORDER BY Ref_Staff_Roles.process_name LIMIT 3304828452232122558108967161417343755404929111323"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": "SELECT Process_Status.process_status_code ;"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "SELECT Documents.document_id INNER JOIN (SELECT Business_Processes.process_outcome_description ) AS NEPADISZENBERGERHUDEE2G4A3B5CE7D113843F949012077C822EF1733395519281427"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": "SELECT process_id , next_process_id , process_id , staff_id , document_id , cre_Doc_Workflow.Process_Status.next_process_id ;"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": "SELECT author_name LIMIT 1 OFFSET 6000070140224830443624121511641320251623330004010201006743175042604514496546709737357890282958698547277903316075390585983103468861353895200555001907722743094997748571201"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": "SELECT SUM(staff_id )\nINNER JOIN (SELECT Ref_Staff_Roles.staff_id , COUNT(*) INNER JOIN (SELECT * FROM cre_Doc_Workflow.Staff_in_Processes, cre_Doc_Workflow.Staff"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "SELECT SUM(staff_role_code )\n\n\nFULL JOIN (SELECT Ref_Staff_Roles.date_to , date_to ) ON Documents.next_process_id = 2 LIMIT 0"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": "SELECT author_name GROUP BY Documents.author_name LIMIT 319000224002628503937155717408729607988181049306725590623275865211348163601757412443843343346809890709143520761123456495228907"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": "SELECT Ref_Staff_Roles.process_name , author_name , staff_id ORDER BY Documents_Processes.date_to ;"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": "SELECT Business_Processes.document_description , SUM(Documents.document_id ), Process_Outcomes.document_id , Documents.document_id , COUNT(Process_Outcomes.document_id )\nINN"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": "SELECT DISTINCT SUM(Documents_Processes.date_to )\n\n\n INNER JOIN (SELECT COUNT(*) ORDER BY Process_Outcomes.author_name , Documents_Processes.date_from , Staff_i"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": "SELECT Documents.document_id RIGHT JOIN (SELECT COUNT(Authors.date_to ) FROM cre_Doc_Workflow.Ref_Staff_Roles WHERE Documents.process_name = '@author_jobs' ORDER BY Ref_Staff_Roles.next_process_id"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": "SELECT Ref_Staff_Roles.process_id , staff_role_code GROUP BY Process_Outcomes.process_id , cre_Doc_Workflow.process_outcome_description , date_from , st"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": "SELECT MIN(staff_id )\nINNER JOIN (SELECT Business_Processes.date_from , Documents.date_from ) AS DEBUNNERED ON EXISTS (SELECT SUM(staff_id )\nINNER JOIN (SELE"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": "SELECT Business_Processes.process_name RIGHT JOIN (SELECT DISTINCT SUM(Documents.document_id ), date_to , other_details )\n\n\n   \n\n AS eGfRvbMw7F5h6JlK9X1iL"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": "SELECT Process_Status.process_id INNER JOIN (SELECT * FROM cre_Doc_Workflow.Process_Status) AS dt ON Documents.process_description = '*' GROUP BY date_from ;"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": "SELECT MIN(staff_id )\n INNER JOIN (SELECT COUNT(*)) AS SIZE ON Ref_Staff_Roles.process_description = 'This is a summary of the value, which will be published at end-of\u2010month events.' LEFT JOIN (SELECT DISTINCT MIN(st"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "SELECT Ref_Staff_Roles.document_id INNER JOIN (SELECT SUM(Process_Status.date_from )) ON EXISTS (SELECT next_process_id FROM cre_Doc_Workflow.Authors WHERE process_id = 1 OR"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": "SELECT process_status_description , Process_Status.process_status_description , process_status_description , process_status_description , process_status_description ;"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": "SELECT MIN(staff_id )\nINNER JOIN (SELECT * FROM cre_Doc_Workflow.Ref_Staff_Roles WHERE cre_Doc_Workflow.Authors.process_outcome_description = 0) AS timeToCreate ON next_process_id = '1'\nINNER JOIN"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": "SELECT Process_Status.document_id INNER JOIN (SELECT * FROM cre_Doc_Workflow.Process_Status WHERE document_id = 2) AS gtrkID ON staff_id > 0;"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": "SELECT DISTINCT SUM(staff_role_description )\n\n\n \nLIMIT 1;"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": "SELECT SUM(staff_id )\nINNER JOIN (SELECT * FROM cre_Doc_Workflow.Ref_Staff_Roles WHERE process_description = 'ID-3' ORDER BY Process_Status.process_status_description , staff_id ) AS octivity ON cre_Doc_Workflow"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "SELECT Invoices.end_date_time , sic_code ;"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "SELECT COUNT(Meetings.client_details )\nINNER JOIN (SELECT MAX(*), end_date_time , sic_code LIMIT 0)\n\n AS HANNESDELARDFOLKONNALESSENCHMASSLERHOPINGJETHEISBARANADIRUNAATLORDIN"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": "SELECT MIN(sic_code )\nLIMIT 200000000000020000000250000030000060000001000150403300208002001060023704512163424641347466048752908277439186790492636598937173569721921457305543167441915683211543043883652599583006229074199285040"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": "SELECT COUNT(sic_code )\nINNER JOIN (SELECT DISTINCT Payments.purpose_of_meeting , Meetings.purpose_of_meeting , meeting_outcome )\n\n\n  AS EATYCHAINSILLICATIONHERE"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": "SELECT agency_details \nWHERE Invoices.end_date_time = 0 GROUP BY Meetings.meeting_type LIMIT 536991"
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": "SELECT Invoices.meeting_outcome , Meetings.purpose_of_meeting , invoice_id , meeting_outcome , purpose_of_meeting , other_details , end_date_time , end_date_time , i"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": "SELECT invoice_id , end_date_time , client_details , payment_details , client_details , agency_details , start_date_time , end_date_time , client_id , other_details , meeting_id , billable_yn , end_date_time"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": "SELECT Invoices.meeting_id LIMIT 6883089107770402317079226028163697255569136875155838260112505324193214295945474633951009957497631129372764117821000544942791856101699973308972476587357098315717"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": "SELECT COUNT(Payments.billable_yn )\n\n\n INNER JOIN (SELECT SUM(*), invoice_details , client_details ) ON other_details = end_date_time ;"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "SELECT AVG(sic_code )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN advertising_agencies.Clients AS DIVISIONS ON advertising_agencies.Clients.purpose_of_meeting = (SELECT COUNT(*)"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": "SELECT Invoices.meeting_id INNER JOIN (SELECT SUM(Clients.purpose_of_meeting ))\n AS MFAKJIDBALANINQAMYAACISMAONRADFATIMICPELAGXARGIFTSUNGAAPHOLIHAILAFDIGVITMU"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": "SELECT DISTINCT COUNT(end_date_time )\nINNER JOIN (SELECT DISTINCT COUNT(end_date_time ))\n\n  \n\n AS ifrstyvntkuljaknivutiioguritodnaeliecavvegudnykhiriliminnezumik"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": "SELECT MIN(sic_code )\n INNER JOIN (SELECT MIN(sic_code ))\n\n AS EXCHANGELISPING ON Staff_in_Meetings.meeting_id = 1 ORDER BY Clients.purpose_of_meeting LIMIT 2 OFFSET 3;"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT COUNT(*)FULL JOIN advertising_agencies.Agencies ON sic_code = Agencies.end_date_time LIMIT 1 OFFSET 3500000300001003310392564003420"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "SELECT DISTINCT SUM(sic_code )\nFULL JOIN (SELECT * FROM advertising_agencies.Payments AS cb) ON sic_code = 0;"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": "SELECT COUNT(agency_id )\nINNER JOIN (SELECT SUM(*)) AS LUCASAISPONDEERJESZYGIABARONUSEMHAMINGANCHADVIROLATUMAYWALLETHAUDFREKELTURTAQDAPOMIBETICIANEHLIDIOSCOUNSINUACMUNCTIM"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": "SELECT client_id , SUM(client_id ), MAX(client_id ), AVG(client_id )\n\n\n INNER JOIN (SELECT * FROM advertising_agencies.Clients AS ancienotecnocene) ON client_id = sic_code ;"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "SELECT Invoices.client_details \nINNER JOIN (SELECT AVG(Agencies.meeting_id ))\n\n AS DEEPASANOSILICIZEDYHOPPIECHLINGFELDFACONLYEZENDEKIMALOGOTOROVETSIKADATUJOMRUSIWAKNEMIT"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "SELECT *\n\n\n INNER JOIN (SELECT COUNT(Agencies.billable_yn ) AS ECHOING) \n\n AS SISETVENLYJOYERPYW1QM8C2KJV0DZ6F9EF5RXOBS4HI3LSATB7G19A01LGNxUjE"
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT * FROM advertising_agencies.Agencies) ON advertising_agencies.Agencies.purpose_of_meeting = 1 INNER JOIN (SELECT * FROM advertising_agencies.Agencies) AS"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "SELECT invoice_id INNER JOIN (SELECT DISTINCT SUM(Agencies.end_date_time ))\n\n\n AS RODOSKI ON Clients.invoice_status = end_date_time LIMIT 4494098182922889517131609251907438125715"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": "SELECT invoice_status GROUP BY Meetings.client_details LIMIT 52633190111505536280034982030321510388027441447572322883568461817602578851259054563164903298665405813422019099248908639"
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": "SELECT Invoices.staff_id INNER JOIN (SELECT * FROM advertising_agencies.Agencies) AS dfr1name ON staff_id = end_date_time ;"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": "SELECT COUNT(Payments.purpose_of_meeting )\nINNER JOIN (SELECT DISTINCT COUNT(Meetings.purpose_of_meeting ))\n\n AS NELJEN ON Staff_in_Meetings.purpose_of_meeting"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": "SELECT Invoices.invoice_details ORDER BY Payments.meeting_id LIMIT 181118253919021749409927421522337514382834686416248880669513581277762078609069266554237215545504856297036895677955"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": "SELECT invoice_id , invoice_id , end_date_time , meeting_id , other_details , advertising_agencies.invoice_id , sic_code ;"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": "SELECT DISTINCT COUNT(sic_code ), SUM(*)\nLIMIT 1000066480570054602056278899679055751049791548168904365865393547263846192374241712404225304437141884335098665004"
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": "SELECT Invoices.end_date_time , SUM(client_id ), COUNT(*), MIN(meeting_id ), MAX(purpose_of_meeting )\nINNER JOIN (SELECT Invoices.end_date_time , SUM(client_id )) AS m"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT COUNT(client_id ))\n\n\n AS EADERHARTGEREZENJACKETTOEDWIDGETYVENDALATHLEMBETH1UR9A2U4MEXF6XDSCHNQEL5ISKKK3DDEAFDFEACL8C7"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": "SELECT COUNT(sic_code )\n\n\n INNER JOIN (SELECT MIN(*)GROUP BY Payments.billable_yn , purpose_of_meeting ORDER BY meeting_id , invoice_id )\n\n\n AS ETCOONCOCAIOLEALF"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": "SELECT AVG(Agencies.meeting_id )\nWHERE Meetings.invoice_details = 0FULL JOIN advertising_agencies.Invoices AS AdvertsISLOADING AS COUNT ON Invoices.meeting_id > 1 FULL OUTER JOI"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": "SELECT invoice_status \nINNER JOIN (SELECT SUM(Agencies.invoice_status ))\n\n AS DEPARTMENTAL ON EXISTS (SELECT end_date_time , COUNT(*))\nINNER JOIN (SELECT SUM("
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": "SELECT invoice_id , sic_code , billable_yn , invoice_id , purpose_of_meeting INNER JOIN (SELECT COUNT(sic_code ) AS cmp) ON other_details = 'SELECT' ORDER BY invoice_id LIMIT 3;"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": "SELECT Invoices.purpose_of_meeting LIMIT 3197451730234414133300271209254749281905715608929015854363534372022674898408542111664462474326390499249410978074889555685062159085665610077787945446514"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": "SELECT AVG(Agencies.purpose_of_meeting )\nINNER JOIN (SELECT MAX(Meetings.payment_details ), purpose_of_meeting )\n\n AS ARGEMOLAVERATASPICAGAINBELOWANTSJUN"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "SELECT Invoices.client_id , end_date_time ;"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": "SELECT DISTINCT SUM(sic_code )\nWHERE Invoices.invoice_id = 0;"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": "SELECT COUNT(*)\nFULL OUTER JOIN (SELECT * FROM advertising_agencies.Agencies)\n\n AS B1B4EE3D8AF6BA9374318573327166028C2E7FA39473674CEF65EC592697221758341330854535503825"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": "SELECT Invoices.sic_code INNER JOIN (SELECT invoice_id WHERE EXISTS (SELECT * FROM (SELECT SUM(invoice_id ) AS name))) ON other_details = sic_code ;"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "SELECT MIN(sic_code )\n\n\n INNER JOIN (SELECT * FROM advertising_agencies.Agencies) AS name ON client_id = Clients.meeting_id GROUP BY purpose_of_meeting , Payments.invoice_status ORDER BY mee"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT MAX(sic_code ))\n\n \n\n AS EPRENDSHOLESCHEINEASEMERGATURINGJOYDAGERIGARONISZLANIAMOSULGOVEDICAMBERNIPSYLLOCALAPVILITUBASTIDIMOFLORIET"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": "SELECT COUNT(sic_code )\nINNER JOIN (SELECT COUNT(sic_code ))\n\n AS CONVICTED ON EXISTS (SELECT SUM(sic_code ))"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": "SELECT AVG(sic_code )\n\n\n  \nINNER JOIN (SELECT Invoices.invoice_status RIGHT OUTER JOIN advertising_agencies.Invoices AS VUIDONADORJFITANIAA\n\n\n  \n\n AS ISCENICATION"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": "SELECT COUNT(Clients.meeting_type )\nINNER JOIN (SELECT COUNT(meeting_type ))\n AS IANLANDFAMEDDONNEKAJOLISSADATUMAURIKTAIRNEMBHNAULIMARRAALYPINGCOGIAIETROBOCILONVODOING"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": "SELECT MIN(sic_code )\nWHERE Invoices.agency_details = (SELECT DISTINCT COUNT(*), SUM(meeting_type ), Payments.billable_yn , MIN(meeting_id ), agency_id )\nFULL JOIN adv"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT invoice_id , sic_code ) AS IETypes ON end_date_time = 'eq' GROUP BY invoice_id LIMIT 10;"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "SELECT DISTINCT SUM(staff_id )\nLIMIT 109070596080209910890691715971429482737260028885530402446333663182501797738676500061947696001145396416498522446630050052472990943999135857689421509821603559"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": "SELECT Invoices.meeting_type WHERE EXISTS (SELECT SUM(Agencies.meeting_id ))\nFULL JOIN (SELECT SUM(Agencies.meeting_id ), Invoices.meeting_type WHERE EXISTS (SELE"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": "SELECT COUNT(sic_code )\nWHERE Invoices.meeting_type = 'M'\n\nINNER JOIN (SELECT COUNT(*) AS VLK RIGHT OUTER JOIN advertising_agencies.Meetings AS aeldecfcienuaeiigt"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": "SELECT DISTINCT AVG(Clients.meeting_id )\nFULL OUTER JOIN (SELECT * FROM advertising_agencies.Agencies WHERE billable_yn = -1) AS agaandelenjrpbmwzlnslfk2nrh9o3u4m7x6i8f5q"
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": "SELECT Payments.sic_code WHERE Staff.other_details \n<purpose_of_meeting FULL JOIN (SELECT COUNT(invoice_id ), client_id , sic_code , meeting_type ) AS IOURIS ON Payments.billable_yn "
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": "SELECT SUM(staff_details )\nINNER JOIN (SELECT MAX(end_date_time ))\n\n AS NEPHISTHAMENWANDEDIAFTAFLPESUNGILEUTSABALVATY1MJONODAFKABAAADICDAIOLNHAUMELCURSEUQA"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": "SELECT COUNT(sic_code )\nFULL JOIN (SELECT client_id , billable_yn , agency_details FROM advertising_agencies.Clients) AS tmcsplitter ON sic_code = 'c' ORDER BY client_id LIMIT 1;"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "SELECT Payments.payment_id , Payments.payment_id , Payments.payment_id , Payments.payment_id , Invoices.payment_id , Invoices.payment_id , invoice_status , end_date_time , invoice_id , invoice_status , payment_details , Payments.payment_id , Pay"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT MAX(*) ORDER BY Payments.end_date_time LIMIT 1000000012520500001000001001102360498040000032000000021131907146488481590306824172716591179132936505857"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": "SELECT COUNT(Clients.client_id )\nINNER JOIN (SELECT SUM(*) ORDER BY agency_details LIMIT 2200013060290833678828805868243600481615792739463734253869785056171907106695239904132026"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": "SELECT Invoices.staff_id LIMIT 152333162057281788139915302514221150894724755818806726368544290177596495796054403400321253397048463762104190941005245386906455610984212601521000716686586319955252827"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "SELECT COUNT(sic_code )\nINNER JOIN (SELECT DISTINCT COUNT(*) INNER JOIN advertising_agencies.Agencies AS AGEPEMIZER ON agency_id = 0 ORDER BY client_id , invoice_status )\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": "SELECT Payments.payment_id , payment_id , payment_details , invoice_id , payment_details , Payments.payment_id , Payments.payment_details , invoice_id , Payments.meeting_outcome , Payments.payment_details , Payments.invoice_id , payment_id , payment_"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT Payments.meeting_id , end_date_time )\n\n   \n\n AS isleetiniepneigeswaeisseoekimorstikatteilcheitzebegehrekzuschenvielerfennigesohnenrheistem"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "SELECT COUNT(Agencies.invoice_id )\n\n\nFULL JOIN (SELECT COUNT(end_date_time ))\n\n AS ANYMAIS ON Staff.agency_details > client_id GROUP BY Payments.billable_yn LIMIT 2 OF"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": "SELECT COUNT(agency_id )\n\n\n  \n\n INNER JOIN (SELECT COUNT(invoice_status ))\n AS DALYGOTVAIKMOLDINBUHEMURIAKODZISUMIDIMFJULMAWELCHVDRAEASAKEDOSYSATLITSUANNEQRACNADET"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": "SELECT MIN(sic_code )\n INNER JOIN (SELECT meeting_id , sic_code )\n\n AS NUBIANOSENKOIREISERZESYFEEGEMORDIAXBANDPASTASWEDAMPSIDVINJEWICAZELEUSSYMONEXITOMIZNOCRIGODEGOTECETTALI"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "SELECT DISTINCT SUM(agency_id );"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": "SELECT invoice_id INNER JOIN advertising_agencies.Agencies\n \n\n AS ECHO ON Staff.meeting_outcome = meeting_outcome INNER JOIN (SELECT COUNT(purpose_of_meeting ) FROM advertising_a"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": "SELECT Invoices.end_date_time LIMIT 6310027140125189912131150221936407867166877287904382617473260575834654880953530560009082043"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": "SELECT agency_details GROUP BY Staff.end_date_time LIMIT 2023604616351110278829181744656789244536014826382837421415753069641939078588633790410054258700595647132040907074995098578055"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "SELECT Invoices.payment_details FROM (SELECT * FROM (SELECT *)\n\n\n INNER JOIN advertising_agencies.Payments AS tkir1 ON client_id = start_date_time ORDER BY purpose_of_meeting , Staff_in_Meetings.m"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": "SELECT invoice_id , sic_code , agency_details , end_date_time INNER JOIN (SELECT SUM(agency_details ))\n\n\n AS for ON invoice_id = 5.516772448253600373457171201142218"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": "SELECT Invoices.meeting_id \nINNER JOIN (SELECT MAX(Meetings.end_date_time ))\n\n AS VLACILISSAJIAEMIRVASKAIJESKIYADAMARODATAYALENAGUIDDIGELZIBAKOOTWGIFEHIMA"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": "SELECT MIN(sic_code )\nFULL JOIN (SELECT Payments.purpose_of_meeting )\n\n AS CERESEDENATEIFORCEATAJKANCHWILDETYMENAVITTALGENTICHARNEAGRASADISONDAIUZELAYIAFOCOQEAC"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "SELECT invoice_status \nINNER JOIN (SELECT SUM(Agencies.staff_details ), end_date_time , agency_id , agency_details , client_id , start_date_time , end_date_time , staf"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": "SELECT meeting_id , Meetings.staff_details , SUM(Agencies.meeting_type ), MIN(Clients.meeting_outcome )\nGROUP BY agency_details , meeting_type ;"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": "SELECT Meetings.meeting_id , advertising_agencies.meeting_type , meeting_type , invoice_details , end_date_time \nFULL OUTER JOIN (SELECT COUNT(Clients.meeting_id ) FROM advertising_agencies.Meeting"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": "SELECT COUNT(Clients.end_date_time )\nWHERE Agencies.invoice_id = 1 ORDER BY Meetings.invoice_id ;"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": "SELECT *\nINNER JOIN (SELECT COUNT(Meetings.invoice_details )GROUP BY Invoices.invoice_details ORDER BY Meetings.meeting_type , end_date_time LIMIT 1)\n\n\n\n"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": "SELECT Payments.invoice_id \n\nLIMIT 65870353348002478161418015075679068258736203789041315105328124322992988458064321603417234600026652719094248445584125100959669876563304908775850073895604740"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": "SELECT invoice_id \nINNER JOIN (SELECT Invoices.invoice_id )\n\n AS SIAHATENAIDEDEVOTAJOAINDIGALIFILIZYFODULBETASLITKORTHOPHYGRAVIMZAGANRAYELIWAAOKEOLNEGUUNECHMOTESCINQ"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": "SELECT COUNT(Invoices.payment_id )\nLIMIT 1033231090603050204870671655452747182815441136170179267832193935245876139968652534596684145722297721"
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "SELECT COUNT(Invoices.staff_details )\n\n\nLIMIT 1;"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": "SELECT COUNT(invoice_details )FULL OUTER JOIN (SELECT DISTINCT COUNT(invoice_status ))\n\n\n AS M ON EXISTS (SELECT SUM(*)LIMIT 1011116364835140912326085132857504300255864262733"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": "SELECT COUNT(agency_id )\nINNER JOIN (SELECT COUNT(Agencies.client_id ), SUM(billable_yn ))\n\n\n  AS ENCOUNTERED ON Agencies.client_details = 85002"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "SELECT AVG(Agencies.invoice_id )\nRIGHT OUTER JOIN (SELECT SUM(Meetings.invoice_id )) \n\n AS FOLLOWS ON EXISTS (SELECT Meetings.invoice_id FROM advertising_agencies.Invoices WHERE meetin"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": "SELECT AVG(sic_code )\nRIGHT JOIN (SELECT COUNT(meeting_id ))\n\n AS SORRY ON Meetings.staff_id = 0 ORDER BY Payments.billable_yn ;"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": "SELECT Invoices.billable_yn RIGHT OUTER JOIN (SELECT COUNT(Agencies.meeting_id ), end_date_time , agency_details ) \n\n\n\n AS Iahefojejkullubolikhaupwil"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": "SELECT SUM(sic_code )\nINNER JOIN (SELECT COUNT(*)FULL OUTER JOIN advertising_agencies.Agencies AS IANICCIESOCODE\n\n \n AS LISPENESSOUS ON EXISTS (SELECT SUM(sic_code ))"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": "SELECT COUNT(Clients.meeting_id )\nINNER JOIN (SELECT SUM(Agencies.invoice_id ))   \n\n\n AS RODJENFUTTEKDEGLERBERGELDEBERCEZONALDROBHOPISCRABIANASNEPATUNITEMTUREDE"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": "SELECT SUM(sic_code )\nWHERE Invoices.agency_details = (SELECT *)INNER JOIN advertising_agencies.Clients AS ectalas ON sic_code < client_id ;"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": "SELECT Payments.sic_code RIGHT OUTER JOIN (SELECT SUM(Payments.billable_yn ))\n\n\n \n AS GURANTEANONOSISALIDIAAUNMATAQASAMHARITIANOCADINEMAPACRIBIGTHILBULUEDATYLABOLIENIM"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": "SELECT Invoices.purpose_of_meeting LIMIT 1;"
  }
]